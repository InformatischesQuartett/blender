
#ifndef __UNIPLUG_BLENDER_CPP_H__
#define __UNIPLUG_BLENDER_CPP_H__

#include <string>
#include <array>
#include <vector>
#include <map>
#include <string.h> /* for memcpy */
#include <Python.h>

namespace UniplugBL {

// VECTOR POD MACROS
#define DEFINE_VECTOR_POD(sname, stype, slength)\
	struct V##sname##slength {\
		stype data[slength];\
		stype& operator[] (const int idx) { return data[idx]; }\
	};\

DEFINE_VECTOR_POD(FLOAT, float, 2)
DEFINE_VECTOR_POD(FLOAT, float, 3)
DEFINE_VECTOR_POD(FLOAT, float, 4)
DEFINE_VECTOR_POD(FLOAT, float, 16)

// PROPERTY MACROS
#define PRIMITIVE_TYPES_GETTER(stype, sconv, sidentifier)\
	PyObject *val = PyObject_GetAttrString(pyobjref, sidentifier);\
	stype resval = sconv;\
	Py_DECREF(val);\
	return resval;

#define PRIMITIVE_TYPES_SETTER(sconv, sidentifier, value)\
	PyObject *val = Py_BuildValue(sconv, value);\
	PyObject_SetAttrString(pyobjref, sidentifier, val);\
	Py_DECREF(val);

#define POD_VECTOR_TYPES_GETTER(stype, sconv, sidentifier, slength)\
	PyObject *seqval = PyObject_GetAttrString(pyobjref, sidentifier);\
	V##stype##slength resarr;\
	for (int i = 0; i < slength; i++) {\
		PyObject* item = PySequence_GetItem(seqval, i);\
		resarr[i] = sconv;\
		Py_DECREF(item);\
	}\
	Py_DECREF(seqval);\
	return resarr;

#define PRIMITIVE_TYPES_ARRAY_GETTER(stype, sconv, sidentifier, slength)\
	PyObject *seqval = PyObject_GetAttrString(pyobjref, sidentifier);\
	std::array<stype, slength> resarr;\
	for (int i = 0; i < slength; i++) {\
		PyObject* item = PySequence_GetItem(seqval, i);\
		resarr[i] = sconv;\
		Py_DECREF(item);\
	}\
	Py_DECREF(seqval);\
	return resarr;

#define PRIMITIVE_TYPES_ARRAY_SETTER(sconv, sidentifier, slength)\
	PyObject *items[slength];\
	PyObject *tupleval = PyTuple_New(slength);\
	for (int i = 0; i < slength; i++) {\
		items[i] = Py_BuildValue(sconv, values[i]);\
		PyTuple_SetItem(tupleval, i, items[i]);\
	}\
	PyObject_SetAttrString(pyobjref, sidentifier, tupleval);\
	for (int i = 0; i < slength; i++)\
		Py_DECREF(items[i]);\
	Py_DECREF(tupleval);

#define PRIMITIVE_TYPES_VECTOR_GETTER(stype, sconv, sidentifier)\
	PyObject *seqval = PyObject_GetAttrString(pyobjref, sidentifier);\
	std::vector<stype> resvec;\
	for (int i = 0; i < PySequence_Length(seqval); i++) {\
		PyObject *item = PySequence_GetItem(seqval, i);\
		resvec.push_back(sconv);\
		Py_DECREF(item);\
	}\
	Py_DECREF(seqval);\
	return resvec;

#define STRING_TYPE_GETTER(sidentifier, sconv)\
	PyObject *attr = PyObject_GetAttrString(pyobjref, sidentifier);\
	PyObject *str = PyUnicode_AsUTF8String(attr);\
	std::string resstr(PyBytes_AsString(str));\
	Py_DECREF(attr);\
	Py_DECREF(str);\
	return sconv;

#define CLASS_TYPES_GETTER(stype, sidentifier)\
	PyObject *val = PyObject_GetAttrString(pyobjref, sidentifier);\
	stype restype(val);\
	Py_DECREF(val);\
	return restype;

#define MAP_TYPE_GETTER(sidentifier, stype)\
	PyObject *seqval = PyObject_GetAttrString(pyobjref, sidentifier);\
	PyObject *seqkeys = PyObject_CallMethod(seqval, "keys", NULL);\
	std::map<std::string, stype> resmap;\
	for (int i = 0; i < PySequence_Length(seqval); i++) {\
		PyObject *keyobj = PySequence_GetItem(seqkeys, i);\
		PyObject *str = PyUnicode_AsUTF8String(keyobj);\
		std::string key = PyBytes_AsString(str);\
		PyObject *item = PySequence_GetItem(seqval, i);\
		stype value = stype(item);\
		resmap.insert(std::pair<std::string, stype>(key, value));\
		Py_DECREF(item);\
		Py_DECREF(str);\
		Py_DECREF(keyobj);\
	}\
	Py_DECREF(seqval);\
	Py_DECREF(seqkeys);\
	return resmap;


// FUNCTIONS MACROS
#define ARRAY_TO_PYOBJ(svalues, sconv, slength)\
	PyObject *svalues##_items[slength];\
	PyObject *svalues##_tupleval = PyTuple_New(slength);\
	for (int i = 0; i < slength; i++) {\
		svalues##_items[i] = Py_BuildValue(sconv, svalues[i]);\
		PyTuple_SetItem(svalues##_tupleval, i, svalues##_items[i]);\
	}

#define DECREF_ARRAY_ITEMS(svalues, slength)\
	for (int i = 0; i < slength; i++)\
		Py_DECREF(svalues##_items[i]);\
	Py_DECREF(svalues##_tupleval);

#define PYTHON_FUNCTION_CALL(sidentifier)\
	PyObject *pyobj = PyObject_CallMethod(pyobjref, sidentifier, NULL);

#define PYTHON_FUNCTION_ARGS_CALL(sidentifier, sconv, ...)\
	PyObject *pyobj = PyObject_CallMethod(pyobjref, sidentifier, sconv, __VA_ARGS__);

#define CLASS_TYPES_RETURN(stype)\
	stype restype(pyobj);\
	Py_DECREF(pyobj);\
	return restype;

#define NONCLASS_TYPES_RETURN(...)\
	Py_DECREF(pyobj);\
	return { __VA_ARGS__ };

#define CREATE_SINGLE_PYOBJ(sidentifier)\
	PyObject *sidentifier##_obj = pyobj;

#define CREATE_MULTIPLE_PYOBJS(...)\
	PyObject __VA_ARGS__;

#define UNPACK_TUPLE_TO_OBJS(sidentifier, scount, ...)\
	PyArg_UnpackTuple(pyobj, sidentifier, 1, scount, __VA_ARGS__);

#define PRIMITIVE_TYPES_CONV(sidentifier, stype, sconv)\
	stype sidentifier##_res = sconv;\

#define CLASS_TYPES_CONV(sidentifier, stype)\
	stype sidentifier##_res(sidentifier##_obj);\

#define STRING_TYPE_CONV(sidentifier)\
	PyObject *sidentifier##_str_obj = PyUnicode_AsUTF8String(sidentifier##_obj);\
	std::string sidentifier##_res(PyBytes_AsString(sidentifier##_str_obj));\
	Py_DECREF(sidentifier##_str_obj);\

#define ENUM_TYPES_CONV(sidentifier, senum)	PyObject *sidentifier##_str_obj = PyUnicode_AsUTF8String(sidentifier##_obj);\
	std::string sidentifier##_str(PyBytes_AsString(sidentifier##_str_obj));\
	senum##_enum sidentifier##_res = static_cast<senum##_enum>(string_to_##senum.at(sidentifier##_str));\
	Py_DECREF(sidentifier##_str_obj);\

#define PRIMITIVE_TYPES_ARRAY_CONV(sidentifier, stype, sconv, slength)\
	std::array<stype, slength> sidentifier##_res;\
	for (int i = 0; i < slength; i++) {\
		PyObject* item = PySequence_GetItem(sidentifier##_obj, i);\
		sidentifier##_res[i] = sconv;\
		Py_DECREF(item);\
	}

#define POD_VECTOR_TYPES_CONV(sidentifier, stype, sconv, slength)\
	V##stype##slength sidentifier##_res;\
	for (int i = 0; i < slength; i++) {\
		PyObject* item = PySequence_GetItem(sidentifier##_obj, i);\
		sidentifier##_res[i] = sconv;\
		Py_DECREF(item);\
	}

class Struct;
class Property;
class BoolProperty;
class IntProperty;
class FloatProperty;
class StringProperty;
class EnumProperty;
class EnumPropertyItem;
class PointerProperty;
class CollectionProperty;
class Function;
class BlenderRNA;
class UnknownType;
class AnyType;
class ID;
class ImagePreview;
class PropertyGroupItem;
class PropertyGroup;
class IDMaterials;
class Library;
class Texture;
class CloudsTexture;
class WoodTexture;
class MarbleTexture;
class MagicTexture;
class BlendTexture;
class StucciTexture;
class NoiseTexture;
class ImageTexture;
class EnvironmentMapTexture;
class MusgraveTexture;
class VoronoiTexture;
class DistortedNoiseTexture;
class PointDensity;
class PointDensityTexture;
class VoxelData;
class VoxelDataTexture;
class OceanTexData;
class OceanTexture;
class TextureSlot;
class EnvironmentMap;
class TexMapping;
class ColorMapping;
class Action;
class ActionFCurves;
class ActionGroups;
class ActionPoseMarkers;
class ActionGroup;
class DopeSheet;
class AnimData;
class NlaTracks;
class AnimDataDrivers;
class KeyingSet;
class KeyingSetPaths;
class KeyingSetPath;
class KeyingSetInfo;
class AnimViz;
class AnimVizOnionSkinning;
class AnimVizMotionPaths;
class MotionPath;
class MotionPathVert;
class Actuator;
class ActionActuator;
class ObjectActuator;
class CameraActuator;
class SoundActuator;
class PropertyActuator;
class ConstraintActuator;
class EditObjectActuator;
class SceneActuator;
class RandomActuator;
class MessageActuator;
class GameActuator;
class VisibilityActuator;
class Filter2DActuator;
class ParentActuator;
class StateActuator;
class ArmatureActuator;
class SteeringActuator;
class MouseActuator;
class Armature;
class ArmatureBones;
class ArmatureEditBones;
class Bone;
class EditBone;
class BoidRule;
class BoidRuleGoal;
class BoidRuleAvoid;
class BoidRuleAvoidCollision;
class BoidRuleFollowLeader;
class BoidRuleAverageSpeed;
class BoidRuleFight;
class BoidState;
class BoidSettings;
class Brush;
class BrushCapabilities;
class SculptToolCapabilities;
class ImapaintToolCapabilities;
class BrushTextureSlot;
class OperatorStrokeElement;
class Camera;
class CameraStereoData;
class ClothSolverResult;
class ClothSettings;
class ClothCollisionSettings;
class CurveMapPoint;
class CurveMap;
class CurveMapPoints;
class CurveMapping;
class ColorRampElement;
class ColorRamp;
class ColorRampElements;
class Histogram;
class Scopes;
class ColorManagedDisplaySettings;
class ColorManagedViewSettings;
class ColorManagedInputColorspaceSettings;
class ColorManagedSequencerColorspaceSettings;
class Constraint;
class ConstraintTarget;
class ChildOfConstraint;
class PythonConstraint;
class StretchToConstraint;
class FollowPathConstraint;
class LockedTrackConstraint;
class ActionConstraint;
class CopyScaleConstraint;
class MaintainVolumeConstraint;
class CopyLocationConstraint;
class CopyRotationConstraint;
class CopyTransformsConstraint;
class FloorConstraint;
class TrackToConstraint;
class KinematicConstraint;
class RigidBodyJointConstraint;
class ClampToConstraint;
class LimitDistanceConstraint;
class LimitScaleConstraint;
class LimitRotationConstraint;
class LimitLocationConstraint;
class TransformConstraint;
class ShrinkwrapConstraint;
class DampedTrackConstraint;
class SplineIKConstraint;
class PivotConstraint;
class FollowTrackConstraint;
class CameraSolverConstraint;
class ObjectSolverConstraint;
class Context;
class Controller;
class ExpressionController;
class PythonController;
class AndController;
class OrController;
class NorController;
class NandController;
class XorController;
class XnorController;
class Curve;
class CurveSplines;
class SurfaceCurve;
class TextCurve;
class TextBox;
class TextCharacterFormat;
class SplinePoint;
class BezierSplinePoint;
class Spline;
class SplinePoints;
class SplineBezierPoints;
class Depsgraph;
class DynamicPaintCanvasSettings;
class DynamicPaintSurfaces;
class DynamicPaintBrushSettings;
class DynamicPaintSurface;
class FCurve;
class FCurveKeyframePoints;
class FCurveModifiers;
class Keyframe;
class FCurveSample;
class DriverTarget;
class DriverVariable;
class Driver;
class ChannelDriverVariables;
class FModifier;
class FModifierGenerator;
class FModifierFunctionGenerator;
class FModifierEnvelope;
class FModifierEnvelopeControlPoints;
class FModifierEnvelopeControlPoint;
class FModifierCycles;
class FModifierPython;
class FModifierLimits;
class FModifierNoise;
class FModifierStepped;
class FluidSettings;
class DomainFluidSettings;
class FluidMeshVertex;
class FluidFluidSettings;
class ObstacleFluidSettings;
class InflowFluidSettings;
class OutflowFluidSettings;
class ParticleFluidSettings;
class ControlFluidSettings;
class GreasePencil;
class GreasePencilLayers;
class GPencilLayer;
class GPencilFrames;
class GPencilFrame;
class GPencilStrokes;
class GPencilStroke;
class GPencilStrokePoints;
class GPencilStrokePoint;
class Group;
class GroupObjects;
class RenderSlot;
class RenderSlots;
class Image;
class ImageUser;
class ImagePackedFile;
class Key;
class ShapeKey;
class ShapeKeyPoint;
class ShapeKeyCurvePoint;
class ShapeKeyBezierPoint;
class Lamp;
class LampTextureSlots;
class PointLamp;
class AreaLamp;
class SpotLamp;
class SunLamp;
class LampSkySettings;
class HemiLamp;
class LampTextureSlot;
class Lattice;
class LatticePoint;
class LineStyleModifier;
class LineStyleColorModifier;
class LineStyleColorModifier_AlongStroke;
class LineStyleColorModifier_DistanceFromCamera;
class LineStyleColorModifier_DistanceFromObject;
class LineStyleColorModifier_Material;
class LineStyleColorModifier_Tangent;
class LineStyleColorModifier_Noise;
class LineStyleColorModifier_CreaseAngle;
class LineStyleColorModifier_Curvature_3D;
class LineStyleAlphaModifier;
class LineStyleAlphaModifier_AlongStroke;
class LineStyleAlphaModifier_DistanceFromCamera;
class LineStyleAlphaModifier_DistanceFromObject;
class LineStyleAlphaModifier_Material;
class LineStyleAlphaModifier_Tangent;
class LineStyleAlphaModifier_Noise;
class LineStyleAlphaModifier_CreaseAngle;
class LineStyleAlphaModifier_Curvature_3D;
class LineStyleThicknessModifier;
class LineStyleThicknessModifier_Tangent;
class LineStyleThicknessModifier_AlongStroke;
class LineStyleThicknessModifier_DistanceFromCamera;
class LineStyleThicknessModifier_DistanceFromObject;
class LineStyleThicknessModifier_Material;
class LineStyleThicknessModifier_Calligraphy;
class LineStyleThicknessModifier_Noise;
class LineStyleThicknessModifier_Curvature_3D;
class LineStyleThicknessModifier_CreaseAngle;
class LineStyleGeometryModifier;
class LineStyleGeometryModifier_Sampling;
class LineStyleGeometryModifier_BezierCurve;
class LineStyleGeometryModifier_SinusDisplacement;
class LineStyleGeometryModifier_SpatialNoise;
class LineStyleGeometryModifier_PerlinNoise1D;
class LineStyleGeometryModifier_PerlinNoise2D;
class LineStyleGeometryModifier_BackboneStretcher;
class LineStyleGeometryModifier_TipRemover;
class LineStyleGeometryModifier_Polygonalization;
class LineStyleGeometryModifier_GuidingLines;
class LineStyleGeometryModifier_Blueprint;
class LineStyleGeometryModifier_2DOffset;
class LineStyleGeometryModifier_2DTransform;
class LineStyleGeometryModifier_Simplification;
class FreestyleLineStyle;
class LineStyleTextureSlots;
class LineStyleColorModifiers;
class LineStyleAlphaModifiers;
class LineStyleThicknessModifiers;
class LineStyleGeometryModifiers;
class LineStyleTextureSlot;
class BlendData;
class BlendDataCameras;
class BlendDataScenes;
class BlendDataObjects;
class BlendDataMaterials;
class BlendDataNodeTrees;
class BlendDataMeshes;
class BlendDataLamps;
class BlendDataLibraries;
class BlendDataScreens;
class BlendDataWindowManagers;
class BlendDataImages;
class BlendDataLattices;
class BlendDataCurves;
class BlendDataMetaBalls;
class BlendDataFonts;
class BlendDataTextures;
class BlendDataBrushes;
class BlendDataWorlds;
class BlendDataGroups;
class BlendDataTexts;
class BlendDataSpeakers;
class BlendDataSounds;
class BlendDataArmatures;
class BlendDataActions;
class BlendDataParticles;
class BlendDataPalettes;
class BlendDataGreasePencils;
class BlendDataMovieClips;
class BlendDataMasks;
class BlendDataLineStyles;
class Material;
class MaterialTextureSlots;
class TexPaintSlot;
class MaterialRaytraceMirror;
class MaterialRaytraceTransparency;
class MaterialVolume;
class MaterialHalo;
class MaterialSubsurfaceScattering;
class MaterialTextureSlot;
class MaterialStrand;
class MaterialPhysics;
class MaterialGameSettings;
class Mesh;
class MeshVertices;
class MeshEdges;
class MeshTessFaces;
class MeshLoops;
class MeshPolygons;
class UVLoopLayers;
class TessfaceUVTextures;
class UVTextures;
class VertexColors;
class LoopColors;
class VertexFloatProperties;
class VertexIntProperties;
class VertexStringProperties;
class PolygonFloatProperties;
class PolygonIntProperties;
class PolygonStringProperties;
class MeshSkinVertexLayer;
class MeshSkinVertex;
class MeshPaintMaskLayer;
class MeshPaintMaskProperty;
class MeshVertex;
class VertexGroupElement;
class MeshEdge;
class MeshTessFace;
class MeshLoop;
class MeshPolygon;
class MeshUVLoopLayer;
class MeshUVLoop;
class MeshTextureFaceLayer;
class MeshTextureFace;
class MeshTexturePolyLayer;
class MeshTexturePoly;
class MeshColorLayer;
class MeshColor;
class MeshLoopColorLayer;
class MeshLoopColor;
class MeshVertexFloatPropertyLayer;
class MeshVertexFloatProperty;
class MeshPolygonFloatPropertyLayer;
class MeshPolygonFloatProperty;
class MeshVertexIntPropertyLayer;
class MeshVertexIntProperty;
class MeshPolygonIntPropertyLayer;
class MeshPolygonIntProperty;
class MeshVertexStringPropertyLayer;
class MeshVertexStringProperty;
class MeshPolygonStringPropertyLayer;
class MeshPolygonStringProperty;
class MetaElement;
class MetaBall;
class MetaBallElements;
class Modifier;
class SubsurfModifier;
class LatticeModifier;
class CurveModifier;
class BuildModifier;
class MirrorModifier;
class DecimateModifier;
class WaveModifier;
class ArmatureModifier;
class HookModifier;
class SoftBodyModifier;
class BooleanModifier;
class ArrayModifier;
class EdgeSplitModifier;
class DisplaceModifier;
class UVProjectModifier;
class UVProjector;
class SmoothModifier;
class CorrectiveSmoothModifier;
class CastModifier;
class MeshDeformModifier;
class ParticleSystemModifier;
class ParticleInstanceModifier;
class ExplodeModifier;
class ClothModifier;
class CollisionModifier;
class BevelModifier;
class ShrinkwrapModifier;
class FluidSimulationModifier;
class MaskModifier;
class SimpleDeformModifier;
class WarpModifier;
class MultiresModifier;
class SurfaceModifier;
class SmokeModifier;
class SolidifyModifier;
class ScrewModifier;
class UVWarpModifier;
class VertexWeightEditModifier;
class VertexWeightMixModifier;
class VertexWeightProximityModifier;
class DynamicPaintModifier;
class OceanModifier;
class RemeshModifier;
class SkinModifier;
class LaplacianSmoothModifier;
class TriangulateModifier;
class MeshCacheModifier;
class LaplacianDeformModifier;
class WireframeModifier;
class DataTransferModifier;
class NormalEditModifier;
class NlaTrack;
class NlaStrips;
class NlaStrip;
class NodeSocket;
class NodeSocketInterface;
class Node;
class NodeInputs;
class NodeOutputs;
class NodeLink;
class NodeInternalSocketTemplate;
class NodeInternal;
class ShaderNode;
class CompositorNode;
class TextureNode;
class NodeTree;
class Nodes;
class NodeLinks;
class NodeTreeInputs;
class NodeTreeOutputs;
class NodeSocketStandard;
class NodeSocketInterfaceStandard;
class NodeSocketFloat;
class NodeSocketInterfaceFloat;
class NodeSocketFloatUnsigned;
class NodeSocketInterfaceFloatUnsigned;
class NodeSocketFloatPercentage;
class NodeSocketInterfaceFloatPercentage;
class NodeSocketFloatFactor;
class NodeSocketInterfaceFloatFactor;
class NodeSocketFloatAngle;
class NodeSocketInterfaceFloatAngle;
class NodeSocketFloatTime;
class NodeSocketInterfaceFloatTime;
class NodeSocketInt;
class NodeSocketInterfaceInt;
class NodeSocketIntUnsigned;
class NodeSocketInterfaceIntUnsigned;
class NodeSocketIntPercentage;
class NodeSocketInterfaceIntPercentage;
class NodeSocketIntFactor;
class NodeSocketInterfaceIntFactor;
class NodeSocketBool;
class NodeSocketInterfaceBool;
class NodeSocketVector;
class NodeSocketInterfaceVector;
class NodeSocketVectorTranslation;
class NodeSocketInterfaceVectorTranslation;
class NodeSocketVectorDirection;
class NodeSocketInterfaceVectorDirection;
class NodeSocketVectorVelocity;
class NodeSocketInterfaceVectorVelocity;
class NodeSocketVectorAcceleration;
class NodeSocketInterfaceVectorAcceleration;
class NodeSocketVectorEuler;
class NodeSocketInterfaceVectorEuler;
class NodeSocketVectorXYZ;
class NodeSocketInterfaceVectorXYZ;
class NodeSocketColor;
class NodeSocketInterfaceColor;
class NodeSocketString;
class NodeSocketInterfaceString;
class NodeSocketShader;
class NodeSocketInterfaceShader;
class NodeSocketVirtual;
class CompositorNodeTree;
class ShaderNodeTree;
class TextureNodeTree;
class NodeFrame;
class NodeGroup;
class NodeGroupInput;
class NodeGroupOutput;
class NodeReroute;
class ShaderNodeOutput;
class ShaderNodeMaterial;
class ShaderNodeRGB;
class ShaderNodeValue;
class ShaderNodeMixRGB;
class ShaderNodeValToRGB;
class ShaderNodeRGBToBW;
class ShaderNodeTexture;
class ShaderNodeNormal;
class ShaderNodeGamma;
class ShaderNodeBrightContrast;
class ShaderNodeGeometry;
class ShaderNodeMapping;
class ShaderNodeVectorCurve;
class ShaderNodeRGBCurve;
class ShaderNodeCameraData;
class ShaderNodeLampData;
class ShaderNodeMath;
class ShaderNodeVectorMath;
class ShaderNodeSqueeze;
class ShaderNodeExtendedMaterial;
class ShaderNodeInvert;
class ShaderNodeSeparateRGB;
class ShaderNodeCombineRGB;
class ShaderNodeHueSaturation;
class ShaderNodeOutputMaterial;
class ShaderNodeOutputLamp;
class ShaderNodeOutputWorld;
class ShaderNodeOutputLineStyle;
class ShaderNodeFresnel;
class ShaderNodeLayerWeight;
class ShaderNodeMixShader;
class ShaderNodeAddShader;
class ShaderNodeAttribute;
class ShaderNodeAmbientOcclusion;
class ShaderNodeBackground;
class ShaderNodeHoldout;
class ShaderNodeBsdfAnisotropic;
class ShaderNodeBsdfDiffuse;
class ShaderNodeBsdfGlossy;
class ShaderNodeBsdfGlass;
class ShaderNodeBsdfRefraction;
class ShaderNodeBsdfTranslucent;
class ShaderNodeBsdfTransparent;
class ShaderNodeBsdfVelvet;
class ShaderNodeBsdfToon;
class ShaderNodeBsdfHair;
class ShaderNodeSubsurfaceScattering;
class ShaderNodeVolumeAbsorption;
class ShaderNodeVolumeScatter;
class ShaderNodeEmission;
class ShaderNodeNewGeometry;
class ShaderNodeLightPath;
class ShaderNodeLightFalloff;
class ShaderNodeObjectInfo;
class ShaderNodeParticleInfo;
class ShaderNodeHairInfo;
class ShaderNodeWireframe;
class ShaderNodeWavelength;
class ShaderNodeBlackbody;
class ShaderNodeBump;
class ShaderNodeNormalMap;
class ShaderNodeTangent;
class ShaderNodeScript;
class ShaderNodeTexImage;
class ShaderNodeTexEnvironment;
class ShaderNodeTexSky;
class ShaderNodeTexGradient;
class ShaderNodeTexNoise;
class ShaderNodeTexMagic;
class ShaderNodeTexWave;
class ShaderNodeTexMusgrave;
class ShaderNodeTexVoronoi;
class ShaderNodeTexChecker;
class ShaderNodeTexBrick;
class ShaderNodeTexCoord;
class ShaderNodeVectorTransform;
class ShaderNodeSeparateHSV;
class ShaderNodeCombineHSV;
class ShaderNodeUVMap;
class ShaderNodeUVAlongStroke;
class ShaderNodeSeparateXYZ;
class ShaderNodeCombineXYZ;
class CompositorNodeViewer;
class CompositorNodeRGB;
class CompositorNodeValue;
class CompositorNodeMixRGB;
class CompositorNodeValToRGB;
class CompositorNodeRGBToBW;
class CompositorNodeNormal;
class CompositorNodeCurveVec;
class CompositorNodeCurveRGB;
class CompositorNodeAlphaOver;
class CompositorNodeBlur;
class CompositorNodeFilter;
class CompositorNodeMapValue;
class CompositorNodeMapRange;
class CompositorNodeTime;
class CompositorNodeVecBlur;
class CompositorNodeSepRGBA;
class CompositorNodeSepHSVA;
class CompositorNodeSetAlpha;
class CompositorNodeHueSat;
class CompositorNodeImage;
class CompositorNodeRLayers;
class CompositorNodeComposite;
class CompositorNodeOutputFile;
class CompositorNodeOutputFileFileSlots;
class CompositorNodeOutputFileLayerSlots;
class CompositorNodeTexture;
class CompositorNodeTranslate;
class CompositorNodeZcombine;
class CompositorNodeCombRGBA;
class CompositorNodeDilateErode;
class CompositorNodeInpaint;
class CompositorNodeDespeckle;
class CompositorNodeRotate;
class CompositorNodeScale;
class CompositorNodeSepYCCA;
class CompositorNodeCombYCCA;
class CompositorNodeSepYUVA;
class CompositorNodeCombYUVA;
class CompositorNodeDiffMatte;
class CompositorNodeColorSpill;
class CompositorNodeChromaMatte;
class CompositorNodeChannelMatte;
class CompositorNodeFlip;
class CompositorNodeSplitViewer;
class CompositorNodeMapUV;
class CompositorNodeIDMask;
class CompositorNodeDoubleEdgeMask;
class CompositorNodeDefocus;
class CompositorNodeDisplace;
class CompositorNodeCombHSVA;
class CompositorNodeMath;
class CompositorNodeLumaMatte;
class CompositorNodeBrightContrast;
class CompositorNodeGamma;
class CompositorNodeInvert;
class CompositorNodeNormalize;
class CompositorNodeCrop;
class CompositorNodeDBlur;
class CompositorNodeBilateralblur;
class CompositorNodePremulKey;
class CompositorNodeGlare;
class CompositorNodeTonemap;
class CompositorNodeLensdist;
class CompositorNodeLevels;
class CompositorNodeColorMatte;
class CompositorNodeDistanceMatte;
class CompositorNodeColorBalance;
class CompositorNodeHueCorrect;
class CompositorNodeMovieClip;
class CompositorNodeTransform;
class CompositorNodeStabilize;
class CompositorNodeMovieDistortion;
class CompositorNodeBoxMask;
class CompositorNodeEllipseMask;
class CompositorNodeBokehImage;
class CompositorNodeBokehBlur;
class CompositorNodeSwitch;
class CompositorNodeSwitchView;
class CompositorNodeColorCorrection;
class CompositorNodeMask;
class CompositorNodeKeyingScreen;
class CompositorNodeKeying;
class CompositorNodeTrackPos;
class CompositorNodePixelate;
class CompositorNodePlaneTrackDeform;
class CompositorNodeCornerPin;
class CompositorNodeSunBeams;
class TextureNodeOutput;
class TextureNodeChecker;
class TextureNodeTexture;
class TextureNodeBricks;
class TextureNodeMath;
class TextureNodeMixRGB;
class TextureNodeRGBToBW;
class TextureNodeValToRGB;
class TextureNodeImage;
class TextureNodeCurveRGB;
class TextureNodeInvert;
class TextureNodeHueSaturation;
class TextureNodeCurveTime;
class TextureNodeRotate;
class TextureNodeViewer;
class TextureNodeTranslate;
class TextureNodeCoordinates;
class TextureNodeDistance;
class TextureNodeCompose;
class TextureNodeDecompose;
class TextureNodeValToNor;
class TextureNodeScale;
class TextureNodeAt;
class TextureNodeTexVoronoi;
class TextureNodeTexBlend;
class TextureNodeTexMagic;
class TextureNodeTexMarble;
class TextureNodeTexClouds;
class TextureNodeTexWood;
class TextureNodeTexMusgrave;
class TextureNodeTexNoise;
class TextureNodeTexStucci;
class TextureNodeTexDistNoise;
class ShaderNodeGroup;
class CompositorNodeGroup;
class TextureNodeGroup;
class NodeCustomGroup;
class NodeOutputFileSlotFile;
class NodeOutputFileSlotLayer;
class NodeInstanceHash;
class Object;
class ObjectModifiers;
class ObjectConstraints;
class VertexGroups;
class ParticleSystems;
class GameObjectSettings;
class ObjectBase;
class VertexGroup;
class MaterialSlot;
class DupliObject;
class LodLevel;
class PointCache;
class PointCaches;
class CollisionSettings;
class EffectorWeights;
class FieldSettings;
class GameSoftBodySettings;
class SoftBodySettings;
class PackedFile;
class PaletteColor;
class Palette;
class PaletteColors;
class ParticleTarget;
class SPHFluidSettings;
class ParticleHairKey;
class ParticleKey;
class ChildParticle;
class Particle;
class ParticleDupliWeight;
class ParticleSystem;
class ParticleSettingsTextureSlot;
class ParticleSettings;
class ParticleSettingsTextureSlots;
class Pose;
class BoneGroups;
class PoseBone;
class PoseBoneConstraints;
class IKParam;
class Itasc;
class BoneGroup;
class GameProperty;
class GameBooleanProperty;
class GameIntProperty;
class GameFloatProperty;
class GameTimerProperty;
class GameStringProperty;
class RenderEngine;
class RenderResult;
class RenderView;
class RenderLayer;
class RenderPasses;
class RenderPass;
class BakePixel;
class RigidBodyWorld;
class RigidBodyObject;
class RigidBodyConstraint;
class Scene;
class SceneBases;
class SceneObjects;
class KeyingSets;
class KeyingSetsAll;
class TimelineMarkers;
class ToolSettings;
class UnifiedPaintSettings;
class MeshStatVis;
class UnitSettings;
class Stereo3dFormat;
class ImageFormatSettings;
class SceneGameData;
class SceneGameRecastData;
class TransformOrientation;
class SelectedUvElement;
class DisplaySafeAreas;
class FFmpegSettings;
class RenderSettings;
class RenderLayers;
class RenderViews;
class BakeSettings;
class SceneRenderLayer;
class FreestyleLineSet;
class FreestyleModuleSettings;
class FreestyleSettings;
class FreestyleModules;
class Linesets;
class GPUSSAOSettings;
class GPUDOFSettings;
class GPUFXSettings;
class SceneRenderView;
class Screen;
class Area;
class AreaSpaces;
class Region;
class View2D;
class PaintCurve;
class Paint;
class Sculpt;
class UvSculpt;
class VertexPaint;
class ImagePaint;
class ParticleEdit;
class ParticleBrush;
class Sensor;
class AlwaysSensor;
class NearSensor;
class MouseSensor;
class KeyboardSensor;
class PropertySensor;
class ArmatureSensor;
class ActuatorSensor;
class DelaySensor;
class CollisionSensor;
class RadarSensor;
class RandomSensor;
class RaySensor;
class MessageSensor;
class JoystickSensor;
class SequenceColorBalanceData;
class SequenceElement;
class SequenceProxy;
class SequenceColorBalance;
class SequenceCrop;
class SequenceTransform;
class Sequence;
class SequenceModifiers;
class SequenceEditor;
class Sequences;
class ImageSequence;
class SequenceElements;
class MetaSequence;
class SceneSequence;
class MovieSequence;
class MovieClipSequence;
class MaskSequence;
class SoundSequence;
class EffectSequence;
class AddSequence;
class AdjustmentSequence;
class AlphaOverSequence;
class AlphaUnderSequence;
class ColorSequence;
class CrossSequence;
class GammaCrossSequence;
class GlowSequence;
class MulticamSequence;
class MultiplySequence;
class OverDropSequence;
class SpeedControlSequence;
class SubtractSequence;
class TransformSequence;
class WipeSequence;
class GaussianBlurSequence;
class TextSequence;
class SequenceModifier;
class ColorBalanceModifier;
class CurvesModifier;
class HueCorrectModifier;
class BrightContrastModifier;
class SmokeDomainSettings;
class SmokeFlowSettings;
class SmokeCollSettings;
class Space;
class SpaceImageEditor;
class SpaceUVEditor;
class SpaceSequenceEditor;
class SpaceTextEditor;
class FileSelectParams;
class FileBrowserFSMenuEntry;
class SpaceFileBrowser;
class SpaceOutliner;
class BackgroundImage;
class SpaceView3D;
class BackgroundImages;
class RegionView3D;
class SpaceProperties;
class SpaceDopeSheetEditor;
class SpaceGraphEditor;
class SpaceNLA;
class SpaceTimeline;
class SpaceConsole;
class ConsoleLine;
class SpaceInfo;
class SpaceUserPreferences;
class NodeTreePath;
class SpaceNodeEditor;
class SpaceNodeEditorPath;
class SpaceLogicEditor;
class SpaceClipEditor;
class Speaker;
class TextLine;
class Text;
class TimelineMarker;
class Sound;
class UILayout;
class Panel;
class UIList;
class Header;
class Menu;
class ThemeFontStyle;
class ThemeStyle;
class ThemeWidgetColors;
class ThemeWidgetStateColors;
class ThemePanelColors;
class ThemeGradientColors;
class ThemeUserInterface;
class ThemeSpaceGeneric;
class ThemeSpaceGradient;
class ThemeSpaceListGeneric;
class ThemeView3D;
class ThemeGraphEditor;
class ThemeFileBrowser;
class ThemeNLAEditor;
class ThemeDopeSheet;
class ThemeImageEditor;
class ThemeSequenceEditor;
class ThemeProperties;
class ThemeTextEditor;
class ThemeTimeline;
class ThemeNodeEditor;
class ThemeOutliner;
class ThemeInfo;
class ThemeUserPreferences;
class ThemeConsole;
class ThemeLogicEditor;
class ThemeClipEditor;
class ThemeBoneColorSet;
class Theme;
class UserSolidLight;
class WalkNavigation;
class UserPreferences;
class Addons;
class PathCompareCollection;
class UserPreferencesView;
class UserPreferencesEdit;
class UserPreferencesInput;
class UserPreferencesFilePaths;
class UserPreferencesSystem;
class Addon;
class AddonPreferences;
class PathCompare;
class VectorFont;
class Operator;
class OperatorProperties;
class OperatorOptions;
class OperatorMousePath;
class OperatorFileListElement;
class Macro;
class OperatorMacro;
class Event;
class Timer;
class UIPopupMenu;
class UIPieMenu;
class Window;
class Stereo3dDisplay;
class WindowManager;
class KeyConfigurations;
class KeyConfig;
class KeyMaps;
class KeyMap;
class KeyMapItems;
class KeyMapItem;
class World;
class WorldTextureSlots;
class WorldLighting;
class WorldMistSettings;
class WorldTextureSlot;
class MovieClip;
class MovieClipProxy;
class MovieClipUser;
class MovieClipScopes;
class MovieTrackingSettings;
class MovieTrackingCamera;
class MovieTrackingMarker;
class MovieTrackingTrack;
class MovieTrackingMarkers;
class MovieTrackingPlaneMarker;
class MovieTrackingPlaneTrack;
class MovieTrackingPlaneMarkers;
class MovieTrackingTracks;
class MovieTrackingPlaneTracks;
class MovieTrackingObjectTracks;
class MovieTrackingObjectPlaneTracks;
class MovieTrackingStabilization;
class MovieTrackingReconstructedCameras;
class MovieReconstructedCamera;
class MovieTrackingReconstruction;
class MovieTrackingObject;
class MovieTrackingDopesheet;
class MovieTracking;
class MovieTrackingObjects;
class MaskParent;
class MaskSplinePointUW;
class MaskSplinePoint;
class MaskSpline;
class MaskSplines;
class MaskSplinePoints;
class MaskLayer;
class Mask;
class MaskLayers;

class pyUniplug {
protected:
	PyObject *pyobjref;
public:
	pyUniplug(PyObject* pyobj) {
		pyobjref = pyobj;
	}

	pyUniplug() {
		pyobjref = PyImport_ImportModule("bpy");
	}

	PyObject* get_pyobjref() {
		return pyobjref;	}

	Context context();
};

class Struct : public pyUniplug {
public:
	Struct(PyObject* pyobj) : pyUniplug(pyobj) {}
	Struct() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string identifier() {
		STRING_TYPE_GETTER("identifier", resstr)
	}

	void identifier(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "identifier", value)
	}

	std::string description() {
		STRING_TYPE_GETTER("description", resstr)
	}

	void description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "description", value)
	}

	std::string translation_context() {
		STRING_TYPE_GETTER("translation_context", resstr)
	}

	void translation_context(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "translation_context", value)
	}

	Struct base_value() {
		CLASS_TYPES_GETTER(Struct, "base")
	}

	Struct nested() {
		CLASS_TYPES_GETTER(Struct, "nested")
	}

	StringProperty name_property();

	std::map<std::string, Property> properties();

	std::map<std::string, Function> functions();
};

class Property : public pyUniplug {
public:
	Property(PyObject* pyobj) : pyUniplug(pyobj) {}
	Property() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string identifier() {
		STRING_TYPE_GETTER("identifier", resstr)
	}

	void identifier(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "identifier", value)
	}

	std::string description() {
		STRING_TYPE_GETTER("description", resstr)
	}

	void description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "description", value)
	}

	std::string translation_context() {
		STRING_TYPE_GETTER("translation_context", resstr)
	}

	void translation_context(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "translation_context", value)
	}

	enum property_type_items_enum {
		property_type_items_BOOLEAN = 0,	
		property_type_items_INT = 1,	
		property_type_items_FLOAT = 2,	
		property_type_items_STRING = 3,	
		property_type_items_ENUM = 4,	
		property_type_items_POINTER = 5,	
		property_type_items_COLLECTION = 6	
	};

	std::map<std::string, int> create_string_to_property_type_items() {
		return {{"BOOLEAN", property_type_items_BOOLEAN}, {"INT", property_type_items_INT}, {"FLOAT", property_type_items_FLOAT}, {"STRING", property_type_items_STRING}, {"ENUM", property_type_items_ENUM}, {"POINTER", property_type_items_POINTER}, {"COLLECTION", property_type_items_COLLECTION}};
	};

	std::map<int, std::string> create_property_type_items_to_string() {
		return {{property_type_items_BOOLEAN, "BOOLEAN"}, {property_type_items_INT, "INT"}, {property_type_items_FLOAT, "FLOAT"}, {property_type_items_STRING, "STRING"}, {property_type_items_ENUM, "ENUM"}, {property_type_items_POINTER, "POINTER"}, {property_type_items_COLLECTION, "COLLECTION"}};
	};

	const std::map<std::string, int> string_to_property_type_items = create_string_to_property_type_items();
	const std::map<int, std::string> property_type_items_to_string = create_property_type_items_to_string();

	property_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<property_type_items_enum>(string_to_property_type_items.at(resstr)))
	}

	void type(property_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", property_type_items_to_string.at(value))
	}

	enum subtype_items_enum {
		subtype_items_NONE = 0,	
		subtype_items_FILE_PATH = 1,	
		subtype_items_DIR_PATH = 2,	
		subtype_items_PIXEL = 12,	
		subtype_items_UNSIGNED = 13,	
		subtype_items_PERCENTAGE = 14,	
		subtype_items_FACTOR = 15,	
		subtype_items_ANGLE = 327696,	
		subtype_items_TIME = 393233,	
		subtype_items_DISTANCE = 65554,	
		subtype_items_COLOR = 20,	
		subtype_items_TRANSLATION = 65557,	
		subtype_items_DIRECTION = 22,	
		subtype_items_MATRIX = 25,	
		subtype_items_EULER = 327706,	
		subtype_items_QUATERNION = 27,	
		subtype_items_XYZ = 29,	
		subtype_items_COLOR_GAMMA = 30,	
		subtype_items_COORDINATES = 31,	
		subtype_items_LAYER = 40,	
		subtype_items_LAYER_MEMBERSHIP = 41	
	};

	std::map<std::string, int> create_string_to_subtype_items() {
		return {{"NONE", subtype_items_NONE}, {"FILE_PATH", subtype_items_FILE_PATH}, {"DIR_PATH", subtype_items_DIR_PATH}, {"PIXEL", subtype_items_PIXEL}, {"UNSIGNED", subtype_items_UNSIGNED}, {"PERCENTAGE", subtype_items_PERCENTAGE}, {"FACTOR", subtype_items_FACTOR}, {"ANGLE", subtype_items_ANGLE}, {"TIME", subtype_items_TIME}, {"DISTANCE", subtype_items_DISTANCE}, {"COLOR", subtype_items_COLOR}, {"TRANSLATION", subtype_items_TRANSLATION}, {"DIRECTION", subtype_items_DIRECTION}, {"MATRIX", subtype_items_MATRIX}, {"EULER", subtype_items_EULER}, {"QUATERNION", subtype_items_QUATERNION}, {"XYZ", subtype_items_XYZ}, {"COLOR_GAMMA", subtype_items_COLOR_GAMMA}, {"COORDINATES", subtype_items_COORDINATES}, {"LAYER", subtype_items_LAYER}, {"LAYER_MEMBERSHIP", subtype_items_LAYER_MEMBERSHIP}};
	};

	std::map<int, std::string> create_subtype_items_to_string() {
		return {{subtype_items_NONE, "NONE"}, {subtype_items_FILE_PATH, "FILE_PATH"}, {subtype_items_DIR_PATH, "DIR_PATH"}, {subtype_items_PIXEL, "PIXEL"}, {subtype_items_UNSIGNED, "UNSIGNED"}, {subtype_items_PERCENTAGE, "PERCENTAGE"}, {subtype_items_FACTOR, "FACTOR"}, {subtype_items_ANGLE, "ANGLE"}, {subtype_items_TIME, "TIME"}, {subtype_items_DISTANCE, "DISTANCE"}, {subtype_items_COLOR, "COLOR"}, {subtype_items_TRANSLATION, "TRANSLATION"}, {subtype_items_DIRECTION, "DIRECTION"}, {subtype_items_MATRIX, "MATRIX"}, {subtype_items_EULER, "EULER"}, {subtype_items_QUATERNION, "QUATERNION"}, {subtype_items_XYZ, "XYZ"}, {subtype_items_COLOR_GAMMA, "COLOR_GAMMA"}, {subtype_items_COORDINATES, "COORDINATES"}, {subtype_items_LAYER, "LAYER"}, {subtype_items_LAYER_MEMBERSHIP, "LAYER_MEMBERSHIP"}};
	};

	const std::map<std::string, int> string_to_subtype_items = create_string_to_subtype_items();
	const std::map<int, std::string> subtype_items_to_string = create_subtype_items_to_string();

	subtype_items_enum subtype() {
		STRING_TYPE_GETTER("subtype", static_cast<subtype_items_enum>(string_to_subtype_items.at(resstr)))
	}

	void subtype(subtype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "subtype", subtype_items_to_string.at(value))
	}

	Struct srna() {
		CLASS_TYPES_GETTER(Struct, "srna")
	}

	enum property_unit_items_enum {
		property_unit_items_NONE = 0,	
		property_unit_items_LENGTH = 65536,	
		property_unit_items_AREA = 131072,	
		property_unit_items_VOLUME = 196608,	
		property_unit_items_ROTATION = 327680,	
		property_unit_items_TIME = 393216,	
		property_unit_items_VELOCITY = 458752,	
		property_unit_items_ACCELERATION = 524288,	
		property_unit_items_CAMERA = 589824	
	};

	std::map<std::string, int> create_string_to_property_unit_items() {
		return {{"NONE", property_unit_items_NONE}, {"LENGTH", property_unit_items_LENGTH}, {"AREA", property_unit_items_AREA}, {"VOLUME", property_unit_items_VOLUME}, {"ROTATION", property_unit_items_ROTATION}, {"TIME", property_unit_items_TIME}, {"VELOCITY", property_unit_items_VELOCITY}, {"ACCELERATION", property_unit_items_ACCELERATION}, {"CAMERA", property_unit_items_CAMERA}};
	};

	std::map<int, std::string> create_property_unit_items_to_string() {
		return {{property_unit_items_NONE, "NONE"}, {property_unit_items_LENGTH, "LENGTH"}, {property_unit_items_AREA, "AREA"}, {property_unit_items_VOLUME, "VOLUME"}, {property_unit_items_ROTATION, "ROTATION"}, {property_unit_items_TIME, "TIME"}, {property_unit_items_VELOCITY, "VELOCITY"}, {property_unit_items_ACCELERATION, "ACCELERATION"}, {property_unit_items_CAMERA, "CAMERA"}};
	};

	const std::map<std::string, int> string_to_property_unit_items = create_string_to_property_unit_items();
	const std::map<int, std::string> property_unit_items_to_string = create_property_unit_items_to_string();

	property_unit_items_enum unit() {
		STRING_TYPE_GETTER("unit", static_cast<property_unit_items_enum>(string_to_property_unit_items.at(resstr)))
	}

	void unit(property_unit_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "unit", property_unit_items_to_string.at(value))
	}

	enum icon_items_enum {
		icon_items_NONE = 0,	
		icon_items_QUESTION = 1,	
		icon_items_ERROR = 2,	
		icon_items_CANCEL = 3,	
		icon_items_TRIA_RIGHT = 4,	
		icon_items_TRIA_DOWN = 5,	
		icon_items_TRIA_LEFT = 6,	
		icon_items_TRIA_UP = 7,	
		icon_items_ARROW_LEFTRIGHT = 8,	
		icon_items_PLUS = 9,	
		icon_items_DISCLOSURE_TRI_DOWN = 10,	
		icon_items_DISCLOSURE_TRI_RIGHT = 11,	
		icon_items_RADIOBUT_OFF = 12,	
		icon_items_RADIOBUT_ON = 13,	
		icon_items_MENU_PANEL = 14,	
		icon_items_BLENDER = 15,	
		icon_items_GRIP = 16,	
		icon_items_DOT = 17,	
		icon_items_COLLAPSEMENU = 18,	
		icon_items_X = 19,	
		icon_items_GO_LEFT = 21,	
		icon_items_PLUG = 22,	
		icon_items_UI = 23,	
		icon_items_NODE = 24,	
		icon_items_NODE_SEL = 25,	
		icon_items_FULLSCREEN = 26,	
		icon_items_SPLITSCREEN = 27,	
		icon_items_RIGHTARROW_THIN = 28,	
		icon_items_BORDERMOVE = 29,	
		icon_items_VIEWZOOM = 30,	
		icon_items_ZOOMIN = 31,	
		icon_items_ZOOMOUT = 32,	
		icon_items_PANEL_CLOSE = 33,	
		icon_items_COPY_ID = 34,	
		icon_items_EYEDROPPER = 35,	
		icon_items_LINK_AREA = 36,	
		icon_items_AUTO = 37,	
		icon_items_CHECKBOX_DEHLT = 38,	
		icon_items_CHECKBOX_HLT = 39,	
		icon_items_UNLOCKED = 40,	
		icon_items_LOCKED = 41,	
		icon_items_UNPINNED = 42,	
		icon_items_PINNED = 43,	
		icon_items_SCREEN_BACK = 44,	
		icon_items_RIGHTARROW = 45,	
		icon_items_DOWNARROW_HLT = 46,	
		icon_items_DOTSUP = 47,	
		icon_items_DOTSDOWN = 48,	
		icon_items_LINK = 49,	
		icon_items_INLINK = 50,	
		icon_items_PLUGIN = 51,	
		icon_items_HELP = 52,	
		icon_items_GHOST_ENABLED = 53,	
		icon_items_COLOR = 54,	
		icon_items_LINKED = 55,	
		icon_items_UNLINKED = 56,	
		icon_items_HAND = 57,	
		icon_items_ZOOM_ALL = 58,	
		icon_items_ZOOM_SELECTED = 59,	
		icon_items_ZOOM_PREVIOUS = 60,	
		icon_items_ZOOM_IN = 61,	
		icon_items_ZOOM_OUT = 62,	
		icon_items_RENDER_REGION = 63,	
		icon_items_BORDER_RECT = 64,	
		icon_items_BORDER_LASSO = 65,	
		icon_items_FREEZE = 66,	
		icon_items_STYLUS_PRESSURE = 67,	
		icon_items_GHOST_DISABLED = 68,	
		icon_items_NEW = 69,	
		icon_items_FILE_TICK = 70,	
		icon_items_QUIT = 71,	
		icon_items_URL = 72,	
		icon_items_RECOVER_LAST = 73,	
		icon_items_FULLSCREEN_ENTER = 75,	
		icon_items_FULLSCREEN_EXIT = 76,	
		icon_items_BLANK1 = 77,	
		icon_items_LAMP = 78,	
		icon_items_MATERIAL = 79,	
		icon_items_TEXTURE = 80,	
		icon_items_ANIM = 81,	
		icon_items_WORLD = 82,	
		icon_items_SCENE = 83,	
		icon_items_EDIT = 84,	
		icon_items_GAME = 85,	
		icon_items_RADIO = 86,	
		icon_items_SCRIPT = 87,	
		icon_items_PARTICLES = 88,	
		icon_items_PHYSICS = 89,	
		icon_items_SPEAKER = 90,	
		icon_items_TEXTURE_SHADED = 91,	
		icon_items_VIEW3D = 104,	
		icon_items_IPO = 105,	
		icon_items_OOPS = 106,	
		icon_items_BUTS = 107,	
		icon_items_FILESEL = 108,	
		icon_items_IMAGE_COL = 109,	
		icon_items_INFO = 110,	
		icon_items_SEQUENCE = 111,	
		icon_items_TEXT = 112,	
		icon_items_IMASEL = 113,	
		icon_items_SOUND = 114,	
		icon_items_ACTION = 115,	
		icon_items_NLA = 116,	
		icon_items_SCRIPTWIN = 117,	
		icon_items_TIME = 118,	
		icon_items_NODETREE = 119,	
		icon_items_LOGIC = 120,	
		icon_items_CONSOLE = 121,	
		icon_items_PREFERENCES = 122,	
		icon_items_CLIP = 123,	
		icon_items_ASSET_MANAGER = 124,	
		icon_items_OBJECT_DATAMODE = 130,	
		icon_items_EDITMODE_HLT = 131,	
		icon_items_FACESEL_HLT = 132,	
		icon_items_VPAINT_HLT = 133,	
		icon_items_TPAINT_HLT = 134,	
		icon_items_WPAINT_HLT = 135,	
		icon_items_SCULPTMODE_HLT = 136,	
		icon_items_POSE_HLT = 137,	
		icon_items_PARTICLEMODE = 138,	
		icon_items_LIGHTPAINT = 139,	
		icon_items_SCENE_DATA = 156,	
		icon_items_RENDERLAYERS = 157,	
		icon_items_WORLD_DATA = 158,	
		icon_items_OBJECT_DATA = 159,	
		icon_items_MESH_DATA = 160,	
		icon_items_CURVE_DATA = 161,	
		icon_items_META_DATA = 162,	
		icon_items_LATTICE_DATA = 163,	
		icon_items_LAMP_DATA = 164,	
		icon_items_MATERIAL_DATA = 165,	
		icon_items_TEXTURE_DATA = 166,	
		icon_items_ANIM_DATA = 167,	
		icon_items_CAMERA_DATA = 168,	
		icon_items_PARTICLE_DATA = 169,	
		icon_items_LIBRARY_DATA_DIRECT = 170,	
		icon_items_GROUP = 171,	
		icon_items_ARMATURE_DATA = 172,	
		icon_items_POSE_DATA = 173,	
		icon_items_BONE_DATA = 174,	
		icon_items_CONSTRAINT = 175,	
		icon_items_SHAPEKEY_DATA = 176,	
		icon_items_CONSTRAINT_BONE = 177,	
		icon_items_CAMERA_STEREO = 178,	
		icon_items_PACKAGE = 179,	
		icon_items_UGLYPACKAGE = 180,	
		icon_items_BRUSH_DATA = 182,	
		icon_items_IMAGE_DATA = 183,	
		icon_items_FILE = 184,	
		icon_items_FCURVE = 185,	
		icon_items_FONT_DATA = 186,	
		icon_items_RENDER_RESULT = 187,	
		icon_items_SURFACE_DATA = 188,	
		icon_items_EMPTY_DATA = 189,	
		icon_items_SETTINGS = 190,	
		icon_items_RENDER_ANIMATION = 191,	
		icon_items_RENDER_STILL = 192,	
		icon_items_LIBRARY_DATA_BROKEN = 193,	
		icon_items_BOIDS = 194,	
		icon_items_STRANDS = 195,	
		icon_items_LIBRARY_DATA_INDIRECT = 196,	
		icon_items_GREASEPENCIL = 197,	
		icon_items_LINE_DATA = 198,	
		icon_items_GROUP_BONE = 200,	
		icon_items_GROUP_VERTEX = 201,	
		icon_items_GROUP_VCOL = 202,	
		icon_items_GROUP_UVS = 203,	
		icon_items_RNA = 206,	
		icon_items_RNA_ADD = 207,	
		icon_items_OUTLINER_OB_EMPTY = 234,	
		icon_items_OUTLINER_OB_MESH = 235,	
		icon_items_OUTLINER_OB_CURVE = 236,	
		icon_items_OUTLINER_OB_LATTICE = 237,	
		icon_items_OUTLINER_OB_META = 238,	
		icon_items_OUTLINER_OB_LAMP = 239,	
		icon_items_OUTLINER_OB_CAMERA = 240,	
		icon_items_OUTLINER_OB_ARMATURE = 241,	
		icon_items_OUTLINER_OB_FONT = 242,	
		icon_items_OUTLINER_OB_SURFACE = 243,	
		icon_items_OUTLINER_OB_SPEAKER = 244,	
		icon_items_RESTRICT_VIEW_OFF = 253,	
		icon_items_RESTRICT_VIEW_ON = 254,	
		icon_items_RESTRICT_SELECT_OFF = 255,	
		icon_items_RESTRICT_SELECT_ON = 256,	
		icon_items_RESTRICT_RENDER_OFF = 257,	
		icon_items_RESTRICT_RENDER_ON = 258,	
		icon_items_OUTLINER_DATA_EMPTY = 260,	
		icon_items_OUTLINER_DATA_MESH = 261,	
		icon_items_OUTLINER_DATA_CURVE = 262,	
		icon_items_OUTLINER_DATA_LATTICE = 263,	
		icon_items_OUTLINER_DATA_META = 264,	
		icon_items_OUTLINER_DATA_LAMP = 265,	
		icon_items_OUTLINER_DATA_CAMERA = 266,	
		icon_items_OUTLINER_DATA_ARMATURE = 267,	
		icon_items_OUTLINER_DATA_FONT = 268,	
		icon_items_OUTLINER_DATA_SURFACE = 269,	
		icon_items_OUTLINER_DATA_SPEAKER = 270,	
		icon_items_OUTLINER_DATA_POSE = 271,	
		icon_items_MESH_PLANE = 286,	
		icon_items_MESH_CUBE = 287,	
		icon_items_MESH_CIRCLE = 288,	
		icon_items_MESH_UVSPHERE = 289,	
		icon_items_MESH_ICOSPHERE = 290,	
		icon_items_MESH_GRID = 291,	
		icon_items_MESH_MONKEY = 292,	
		icon_items_MESH_CYLINDER = 293,	
		icon_items_MESH_TORUS = 294,	
		icon_items_MESH_CONE = 295,	
		icon_items_LAMP_POINT = 298,	
		icon_items_LAMP_SUN = 299,	
		icon_items_LAMP_SPOT = 300,	
		icon_items_LAMP_HEMI = 301,	
		icon_items_LAMP_AREA = 302,	
		icon_items_META_EMPTY = 305,	
		icon_items_META_PLANE = 306,	
		icon_items_META_CUBE = 307,	
		icon_items_META_BALL = 308,	
		icon_items_META_ELLIPSOID = 309,	
		icon_items_META_CAPSULE = 310,	
		icon_items_SURFACE_NCURVE = 312,	
		icon_items_SURFACE_NCIRCLE = 313,	
		icon_items_SURFACE_NSURFACE = 314,	
		icon_items_SURFACE_NCYLINDER = 315,	
		icon_items_SURFACE_NSPHERE = 316,	
		icon_items_SURFACE_NTORUS = 317,	
		icon_items_CURVE_BEZCURVE = 321,	
		icon_items_CURVE_BEZCIRCLE = 322,	
		icon_items_CURVE_NCURVE = 323,	
		icon_items_CURVE_NCIRCLE = 324,	
		icon_items_CURVE_PATH = 325,	
		icon_items_COLOR_RED = 331,	
		icon_items_COLOR_GREEN = 332,	
		icon_items_COLOR_BLUE = 333,	
		icon_items_TRIA_RIGHT_BAR = 334,	
		icon_items_TRIA_DOWN_BAR = 335,	
		icon_items_TRIA_LEFT_BAR = 336,	
		icon_items_TRIA_UP_BAR = 337,	
		icon_items_FORCE_FORCE = 338,	
		icon_items_FORCE_WIND = 339,	
		icon_items_FORCE_VORTEX = 340,	
		icon_items_FORCE_MAGNETIC = 341,	
		icon_items_FORCE_HARMONIC = 342,	
		icon_items_FORCE_CHARGE = 343,	
		icon_items_FORCE_LENNARDJONES = 344,	
		icon_items_FORCE_TEXTURE = 345,	
		icon_items_FORCE_CURVE = 346,	
		icon_items_FORCE_BOID = 347,	
		icon_items_FORCE_TURBULENCE = 348,	
		icon_items_FORCE_DRAG = 349,	
		icon_items_FORCE_SMOKEFLOW = 350,	
		icon_items_MODIFIER = 442,	
		icon_items_MOD_WAVE = 443,	
		icon_items_MOD_BUILD = 444,	
		icon_items_MOD_DECIM = 445,	
		icon_items_MOD_MIRROR = 446,	
		icon_items_MOD_SOFT = 447,	
		icon_items_MOD_SUBSURF = 448,	
		icon_items_HOOK = 449,	
		icon_items_MOD_PHYSICS = 450,	
		icon_items_MOD_PARTICLES = 451,	
		icon_items_MOD_BOOLEAN = 452,	
		icon_items_MOD_EDGESPLIT = 453,	
		icon_items_MOD_ARRAY = 454,	
		icon_items_MOD_UVPROJECT = 455,	
		icon_items_MOD_DISPLACE = 456,	
		icon_items_MOD_CURVE = 457,	
		icon_items_MOD_LATTICE = 458,	
		icon_items_CONSTRAINT_DATA = 459,	
		icon_items_MOD_ARMATURE = 460,	
		icon_items_MOD_SHRINKWRAP = 461,	
		icon_items_MOD_CAST = 462,	
		icon_items_MOD_MESHDEFORM = 463,	
		icon_items_MOD_BEVEL = 464,	
		icon_items_MOD_SMOOTH = 465,	
		icon_items_MOD_SIMPLEDEFORM = 466,	
		icon_items_MOD_MASK = 467,	
		icon_items_MOD_CLOTH = 468,	
		icon_items_MOD_EXPLODE = 469,	
		icon_items_MOD_FLUIDSIM = 470,	
		icon_items_MOD_MULTIRES = 471,	
		icon_items_MOD_SMOKE = 472,	
		icon_items_MOD_SOLIDIFY = 473,	
		icon_items_MOD_SCREW = 474,	
		icon_items_MOD_VERTEX_WEIGHT = 475,	
		icon_items_MOD_DYNAMICPAINT = 476,	
		icon_items_MOD_REMESH = 477,	
		icon_items_MOD_OCEAN = 478,	
		icon_items_MOD_WARP = 479,	
		icon_items_MOD_SKIN = 480,	
		icon_items_MOD_TRIANGULATE = 481,	
		icon_items_MOD_WIREFRAME = 482,	
		icon_items_MOD_DATA_TRANSFER = 483,	
		icon_items_MOD_NORMALEDIT = 484,	
		icon_items_REC = 494,	
		icon_items_PLAY = 495,	
		icon_items_FF = 496,	
		icon_items_REW = 497,	
		icon_items_PAUSE = 498,	
		icon_items_PREV_KEYFRAME = 499,	
		icon_items_NEXT_KEYFRAME = 500,	
		icon_items_PLAY_AUDIO = 501,	
		icon_items_PLAY_REVERSE = 502,	
		icon_items_PREVIEW_RANGE = 503,	
		icon_items_ACTION_TWEAK = 504,	
		icon_items_PMARKER_ACT = 505,	
		icon_items_PMARKER_SEL = 506,	
		icon_items_PMARKER = 507,	
		icon_items_MARKER_HLT = 508,	
		icon_items_MARKER = 509,	
		icon_items_SPACE2 = 510,	
		icon_items_SPACE3 = 511,	
		icon_items_KEYINGSET = 512,	
		icon_items_KEY_DEHLT = 513,	
		icon_items_KEY_HLT = 514,	
		icon_items_MUTE_IPO_OFF = 515,	
		icon_items_MUTE_IPO_ON = 516,	
		icon_items_VISIBLE_IPO_OFF = 517,	
		icon_items_VISIBLE_IPO_ON = 518,	
		icon_items_DRIVER = 519,	
		icon_items_SOLO_OFF = 520,	
		icon_items_SOLO_ON = 521,	
		icon_items_FRAME_PREV = 522,	
		icon_items_FRAME_NEXT = 523,	
		icon_items_NLA_PUSHDOWN = 524,	
		icon_items_IPO_CONSTANT = 525,	
		icon_items_IPO_LINEAR = 526,	
		icon_items_IPO_BEZIER = 527,	
		icon_items_IPO_SINE = 528,	
		icon_items_IPO_QUAD = 529,	
		icon_items_IPO_CUBIC = 530,	
		icon_items_IPO_QUART = 531,	
		icon_items_IPO_QUINT = 532,	
		icon_items_IPO_EXPO = 533,	
		icon_items_IPO_CIRC = 534,	
		icon_items_IPO_BOUNCE = 535,	
		icon_items_IPO_ELASTIC = 536,	
		icon_items_IPO_BACK = 537,	
		icon_items_IPO_EASE_IN = 538,	
		icon_items_IPO_EASE_OUT = 539,	
		icon_items_IPO_EASE_IN_OUT = 540,	
		icon_items_VERTEXSEL = 546,	
		icon_items_EDGESEL = 547,	
		icon_items_FACESEL = 548,	
		icon_items_LOOPSEL = 549,	
		icon_items_ROTATE = 551,	
		icon_items_CURSOR = 552,	
		icon_items_ROTATECOLLECTION = 553,	
		icon_items_ROTATECENTER = 554,	
		icon_items_ROTACTIVE = 555,	
		icon_items_ALIGN = 556,	
		icon_items_SMOOTHCURVE = 558,	
		icon_items_SPHERECURVE = 559,	
		icon_items_ROOTCURVE = 560,	
		icon_items_SHARPCURVE = 561,	
		icon_items_LINCURVE = 562,	
		icon_items_NOCURVE = 563,	
		icon_items_RNDCURVE = 564,	
		icon_items_PROP_OFF = 565,	
		icon_items_PROP_ON = 566,	
		icon_items_PROP_CON = 567,	
		icon_items_SCULPT_DYNTOPO = 568,	
		icon_items_PARTICLE_POINT = 569,	
		icon_items_PARTICLE_TIP = 570,	
		icon_items_PARTICLE_PATH = 571,	
		icon_items_MAN_TRANS = 572,	
		icon_items_MAN_ROT = 573,	
		icon_items_MAN_SCALE = 574,	
		icon_items_MANIPUL = 575,	
		icon_items_SNAP_OFF = 576,	
		icon_items_SNAP_ON = 577,	
		icon_items_SNAP_NORMAL = 578,	
		icon_items_SNAP_INCREMENT = 579,	
		icon_items_SNAP_VERTEX = 580,	
		icon_items_SNAP_EDGE = 581,	
		icon_items_SNAP_FACE = 582,	
		icon_items_SNAP_VOLUME = 583,	
		icon_items_STICKY_UVS_LOC = 585,	
		icon_items_STICKY_UVS_DISABLE = 586,	
		icon_items_STICKY_UVS_VERT = 587,	
		icon_items_CLIPUV_DEHLT = 588,	
		icon_items_CLIPUV_HLT = 589,	
		icon_items_SNAP_PEEL_OBJECT = 590,	
		icon_items_GRID = 591,	
		icon_items_PASTEDOWN = 598,	
		icon_items_COPYDOWN = 599,	
		icon_items_PASTEFLIPUP = 600,	
		icon_items_PASTEFLIPDOWN = 601,	
		icon_items_SNAP_SURFACE = 606,	
		icon_items_AUTOMERGE_ON = 607,	
		icon_items_AUTOMERGE_OFF = 608,	
		icon_items_RETOPO = 609,	
		icon_items_UV_VERTEXSEL = 610,	
		icon_items_UV_EDGESEL = 611,	
		icon_items_UV_FACESEL = 612,	
		icon_items_UV_ISLANDSEL = 613,	
		icon_items_UV_SYNC_SELECT = 614,	
		icon_items_BBOX = 624,	
		icon_items_WIRE = 625,	
		icon_items_SOLID = 626,	
		icon_items_SMOOTH = 627,	
		icon_items_POTATO = 628,	
		icon_items_ORTHO = 630,	
		icon_items_LOCKVIEW_OFF = 633,	
		icon_items_LOCKVIEW_ON = 634,	
		icon_items_AXIS_SIDE = 636,	
		icon_items_AXIS_FRONT = 637,	
		icon_items_AXIS_TOP = 638,	
		icon_items_NDOF_DOM = 639,	
		icon_items_NDOF_TURN = 640,	
		icon_items_NDOF_FLY = 641,	
		icon_items_NDOF_TRANS = 642,	
		icon_items_LAYER_USED = 643,	
		icon_items_LAYER_ACTIVE = 644,	
		icon_items_SORTALPHA = 676,	
		icon_items_SORTBYEXT = 677,	
		icon_items_SORTTIME = 678,	
		icon_items_SORTSIZE = 679,	
		icon_items_LONGDISPLAY = 680,	
		icon_items_SHORTDISPLAY = 681,	
		icon_items_GHOST = 682,	
		icon_items_IMGDISPLAY = 683,	
		icon_items_SAVE_AS = 684,	
		icon_items_SAVE_COPY = 685,	
		icon_items_BOOKMARKS = 686,	
		icon_items_FONTPREVIEW = 687,	
		icon_items_FILTER = 688,	
		icon_items_NEWFOLDER = 689,	
		icon_items_OPEN_RECENT = 690,	
		icon_items_FILE_PARENT = 691,	
		icon_items_FILE_REFRESH = 692,	
		icon_items_FILE_FOLDER = 693,	
		icon_items_FILE_BLANK = 694,	
		icon_items_FILE_BLEND = 695,	
		icon_items_FILE_IMAGE = 696,	
		icon_items_FILE_MOVIE = 697,	
		icon_items_FILE_SCRIPT = 698,	
		icon_items_FILE_SOUND = 699,	
		icon_items_FILE_FONT = 700,	
		icon_items_FILE_TEXT = 701,	
		icon_items_RECOVER_AUTO = 702,	
		icon_items_SAVE_PREFS = 703,	
		icon_items_LINK_BLEND = 704,	
		icon_items_APPEND_BLEND = 705,	
		icon_items_IMPORT = 706,	
		icon_items_EXPORT = 707,	
		icon_items_EXTERNAL_DATA = 708,	
		icon_items_LOAD_FACTORY = 709,	
		icon_items_LOOP_BACK = 715,	
		icon_items_LOOP_FORWARDS = 716,	
		icon_items_BACK = 717,	
		icon_items_FORWARD = 718,	
		icon_items_FILE_HIDDEN = 725,	
		icon_items_FILE_BACKUP = 726,	
		icon_items_DISK_DRIVE = 727,	
		icon_items_MATPLANE = 728,	
		icon_items_MATSPHERE = 729,	
		icon_items_MATCUBE = 730,	
		icon_items_MONKEY = 731,	
		icon_items_HAIR = 732,	
		icon_items_ALIASED = 733,	
		icon_items_ANTIALIASED = 734,	
		icon_items_MAT_SPHERE_SKY = 735,	
		icon_items_WORDWRAP_OFF = 740,	
		icon_items_WORDWRAP_ON = 741,	
		icon_items_SYNTAX_OFF = 742,	
		icon_items_SYNTAX_ON = 743,	
		icon_items_LINENUMBERS_OFF = 744,	
		icon_items_LINENUMBERS_ON = 745,	
		icon_items_SCRIPTPLUGINS = 746,	
		icon_items_SEQ_SEQUENCER = 754,	
		icon_items_SEQ_PREVIEW = 755,	
		icon_items_SEQ_LUMA_WAVEFORM = 756,	
		icon_items_SEQ_CHROMA_SCOPE = 757,	
		icon_items_SEQ_HISTOGRAM = 758,	
		icon_items_SEQ_SPLITVIEW = 759,	
		icon_items_IMAGE_RGB = 763,	
		icon_items_IMAGE_RGB_ALPHA = 764,	
		icon_items_IMAGE_ALPHA = 765,	
		icon_items_IMAGE_ZDEPTH = 766,	
		icon_items_IMAGEFILE = 767,	
		icon_items_BRUSH_ADD = 780,	
		icon_items_BRUSH_BLOB = 781,	
		icon_items_BRUSH_BLUR = 782,	
		icon_items_BRUSH_CLAY = 783,	
		icon_items_BRUSH_CLAY_STRIPS = 784,	
		icon_items_BRUSH_CLONE = 785,	
		icon_items_BRUSH_CREASE = 786,	
		icon_items_BRUSH_DARKEN = 787,	
		icon_items_BRUSH_FILL = 788,	
		icon_items_BRUSH_FLATTEN = 789,	
		icon_items_BRUSH_GRAB = 790,	
		icon_items_BRUSH_INFLATE = 791,	
		icon_items_BRUSH_LAYER = 792,	
		icon_items_BRUSH_LIGHTEN = 793,	
		icon_items_BRUSH_MASK = 794,	
		icon_items_BRUSH_MIX = 795,	
		icon_items_BRUSH_MULTIPLY = 796,	
		icon_items_BRUSH_NUDGE = 797,	
		icon_items_BRUSH_PINCH = 798,	
		icon_items_BRUSH_SCRAPE = 799,	
		icon_items_BRUSH_SCULPT_DRAW = 800,	
		icon_items_BRUSH_SMEAR = 801,	
		icon_items_BRUSH_SMOOTH = 802,	
		icon_items_BRUSH_SNAKE_HOOK = 803,	
		icon_items_BRUSH_SOFTEN = 804,	
		icon_items_BRUSH_SUBTRACT = 805,	
		icon_items_BRUSH_TEXDRAW = 806,	
		icon_items_BRUSH_TEXFILL = 807,	
		icon_items_BRUSH_TEXMASK = 808,	
		icon_items_BRUSH_THUMB = 809,	
		icon_items_BRUSH_ROTATE = 810,	
		icon_items_BRUSH_VERTEXDRAW = 811,	
		icon_items_MATCAP_01 = 812,	
		icon_items_MATCAP_02 = 813,	
		icon_items_MATCAP_03 = 814,	
		icon_items_MATCAP_04 = 815,	
		icon_items_MATCAP_05 = 816,	
		icon_items_MATCAP_06 = 817,	
		icon_items_MATCAP_07 = 818,	
		icon_items_MATCAP_08 = 819,	
		icon_items_MATCAP_09 = 820,	
		icon_items_MATCAP_10 = 821,	
		icon_items_MATCAP_11 = 822,	
		icon_items_MATCAP_12 = 823,	
		icon_items_MATCAP_13 = 824,	
		icon_items_MATCAP_14 = 825,	
		icon_items_MATCAP_15 = 826,	
		icon_items_MATCAP_16 = 827,	
		icon_items_MATCAP_17 = 828,	
		icon_items_MATCAP_18 = 829,	
		icon_items_MATCAP_19 = 830,	
		icon_items_MATCAP_20 = 831,	
		icon_items_MATCAP_21 = 832,	
		icon_items_MATCAP_22 = 833,	
		icon_items_MATCAP_23 = 834,	
		icon_items_MATCAP_24 = 835,	
		icon_items_VIEW3D_VEC = 836,	
		icon_items_EDIT_VEC = 837,	
		icon_items_EDITMODE_VEC_DEHLT = 838,	
		icon_items_EDITMODE_VEC_HLT = 839,	
		icon_items_DISCLOSURE_TRI_RIGHT_VEC = 840,	
		icon_items_DISCLOSURE_TRI_DOWN_VEC = 841,	
		icon_items_MOVE_UP_VEC = 842,	
		icon_items_MOVE_DOWN_VEC = 843,	
		icon_items_X_VEC = 844,	
		icon_items_SMALL_TRI_RIGHT_VEC = 845	
	};

	std::map<std::string, int> create_string_to_icon_items() {
		return {{"NONE", icon_items_NONE}, {"QUESTION", icon_items_QUESTION}, {"ERROR", icon_items_ERROR}, {"CANCEL", icon_items_CANCEL}, {"TRIA_RIGHT", icon_items_TRIA_RIGHT}, {"TRIA_DOWN", icon_items_TRIA_DOWN}, {"TRIA_LEFT", icon_items_TRIA_LEFT}, {"TRIA_UP", icon_items_TRIA_UP}, {"ARROW_LEFTRIGHT", icon_items_ARROW_LEFTRIGHT}, {"PLUS", icon_items_PLUS}, {"DISCLOSURE_TRI_DOWN", icon_items_DISCLOSURE_TRI_DOWN}, {"DISCLOSURE_TRI_RIGHT", icon_items_DISCLOSURE_TRI_RIGHT}, {"RADIOBUT_OFF", icon_items_RADIOBUT_OFF}, {"RADIOBUT_ON", icon_items_RADIOBUT_ON}, {"MENU_PANEL", icon_items_MENU_PANEL}, {"BLENDER", icon_items_BLENDER}, {"GRIP", icon_items_GRIP}, {"DOT", icon_items_DOT}, {"COLLAPSEMENU", icon_items_COLLAPSEMENU}, {"X", icon_items_X}, {"GO_LEFT", icon_items_GO_LEFT}, {"PLUG", icon_items_PLUG}, {"UI", icon_items_UI}, {"NODE", icon_items_NODE}, {"NODE_SEL", icon_items_NODE_SEL}, {"FULLSCREEN", icon_items_FULLSCREEN}, {"SPLITSCREEN", icon_items_SPLITSCREEN}, {"RIGHTARROW_THIN", icon_items_RIGHTARROW_THIN}, {"BORDERMOVE", icon_items_BORDERMOVE}, {"VIEWZOOM", icon_items_VIEWZOOM}, {"ZOOMIN", icon_items_ZOOMIN}, {"ZOOMOUT", icon_items_ZOOMOUT}, {"PANEL_CLOSE", icon_items_PANEL_CLOSE}, {"COPY_ID", icon_items_COPY_ID}, {"EYEDROPPER", icon_items_EYEDROPPER}, {"LINK_AREA", icon_items_LINK_AREA}, {"AUTO", icon_items_AUTO}, {"CHECKBOX_DEHLT", icon_items_CHECKBOX_DEHLT}, {"CHECKBOX_HLT", icon_items_CHECKBOX_HLT}, {"UNLOCKED", icon_items_UNLOCKED}, {"LOCKED", icon_items_LOCKED}, {"UNPINNED", icon_items_UNPINNED}, {"PINNED", icon_items_PINNED}, {"SCREEN_BACK", icon_items_SCREEN_BACK}, {"RIGHTARROW", icon_items_RIGHTARROW}, {"DOWNARROW_HLT", icon_items_DOWNARROW_HLT}, {"DOTSUP", icon_items_DOTSUP}, {"DOTSDOWN", icon_items_DOTSDOWN}, {"LINK", icon_items_LINK}, {"INLINK", icon_items_INLINK}, {"PLUGIN", icon_items_PLUGIN}, {"HELP", icon_items_HELP}, {"GHOST_ENABLED", icon_items_GHOST_ENABLED}, {"COLOR", icon_items_COLOR}, {"LINKED", icon_items_LINKED}, {"UNLINKED", icon_items_UNLINKED}, {"HAND", icon_items_HAND}, {"ZOOM_ALL", icon_items_ZOOM_ALL}, {"ZOOM_SELECTED", icon_items_ZOOM_SELECTED}, {"ZOOM_PREVIOUS", icon_items_ZOOM_PREVIOUS}, {"ZOOM_IN", icon_items_ZOOM_IN}, {"ZOOM_OUT", icon_items_ZOOM_OUT}, {"RENDER_REGION", icon_items_RENDER_REGION}, {"BORDER_RECT", icon_items_BORDER_RECT}, {"BORDER_LASSO", icon_items_BORDER_LASSO}, {"FREEZE", icon_items_FREEZE}, {"STYLUS_PRESSURE", icon_items_STYLUS_PRESSURE}, {"GHOST_DISABLED", icon_items_GHOST_DISABLED}, {"NEW", icon_items_NEW}, {"FILE_TICK", icon_items_FILE_TICK}, {"QUIT", icon_items_QUIT}, {"URL", icon_items_URL}, {"RECOVER_LAST", icon_items_RECOVER_LAST}, {"FULLSCREEN_ENTER", icon_items_FULLSCREEN_ENTER}, {"FULLSCREEN_EXIT", icon_items_FULLSCREEN_EXIT}, {"BLANK1", icon_items_BLANK1}, {"LAMP", icon_items_LAMP}, {"MATERIAL", icon_items_MATERIAL}, {"TEXTURE", icon_items_TEXTURE}, {"ANIM", icon_items_ANIM}, {"WORLD", icon_items_WORLD}, {"SCENE", icon_items_SCENE}, {"EDIT", icon_items_EDIT}, {"GAME", icon_items_GAME}, {"RADIO", icon_items_RADIO}, {"SCRIPT", icon_items_SCRIPT}, {"PARTICLES", icon_items_PARTICLES}, {"PHYSICS", icon_items_PHYSICS}, {"SPEAKER", icon_items_SPEAKER}, {"TEXTURE_SHADED", icon_items_TEXTURE_SHADED}, {"VIEW3D", icon_items_VIEW3D}, {"IPO", icon_items_IPO}, {"OOPS", icon_items_OOPS}, {"BUTS", icon_items_BUTS}, {"FILESEL", icon_items_FILESEL}, {"IMAGE_COL", icon_items_IMAGE_COL}, {"INFO", icon_items_INFO}, {"SEQUENCE", icon_items_SEQUENCE}, {"TEXT", icon_items_TEXT}, {"IMASEL", icon_items_IMASEL}, {"SOUND", icon_items_SOUND}, {"ACTION", icon_items_ACTION}, {"NLA", icon_items_NLA}, {"SCRIPTWIN", icon_items_SCRIPTWIN}, {"TIME", icon_items_TIME}, {"NODETREE", icon_items_NODETREE}, {"LOGIC", icon_items_LOGIC}, {"CONSOLE", icon_items_CONSOLE}, {"PREFERENCES", icon_items_PREFERENCES}, {"CLIP", icon_items_CLIP}, {"ASSET_MANAGER", icon_items_ASSET_MANAGER}, {"OBJECT_DATAMODE", icon_items_OBJECT_DATAMODE}, {"EDITMODE_HLT", icon_items_EDITMODE_HLT}, {"FACESEL_HLT", icon_items_FACESEL_HLT}, {"VPAINT_HLT", icon_items_VPAINT_HLT}, {"TPAINT_HLT", icon_items_TPAINT_HLT}, {"WPAINT_HLT", icon_items_WPAINT_HLT}, {"SCULPTMODE_HLT", icon_items_SCULPTMODE_HLT}, {"POSE_HLT", icon_items_POSE_HLT}, {"PARTICLEMODE", icon_items_PARTICLEMODE}, {"LIGHTPAINT", icon_items_LIGHTPAINT}, {"SCENE_DATA", icon_items_SCENE_DATA}, {"RENDERLAYERS", icon_items_RENDERLAYERS}, {"WORLD_DATA", icon_items_WORLD_DATA}, {"OBJECT_DATA", icon_items_OBJECT_DATA}, {"MESH_DATA", icon_items_MESH_DATA}, {"CURVE_DATA", icon_items_CURVE_DATA}, {"META_DATA", icon_items_META_DATA}, {"LATTICE_DATA", icon_items_LATTICE_DATA}, {"LAMP_DATA", icon_items_LAMP_DATA}, {"MATERIAL_DATA", icon_items_MATERIAL_DATA}, {"TEXTURE_DATA", icon_items_TEXTURE_DATA}, {"ANIM_DATA", icon_items_ANIM_DATA}, {"CAMERA_DATA", icon_items_CAMERA_DATA}, {"PARTICLE_DATA", icon_items_PARTICLE_DATA}, {"LIBRARY_DATA_DIRECT", icon_items_LIBRARY_DATA_DIRECT}, {"GROUP", icon_items_GROUP}, {"ARMATURE_DATA", icon_items_ARMATURE_DATA}, {"POSE_DATA", icon_items_POSE_DATA}, {"BONE_DATA", icon_items_BONE_DATA}, {"CONSTRAINT", icon_items_CONSTRAINT}, {"SHAPEKEY_DATA", icon_items_SHAPEKEY_DATA}, {"CONSTRAINT_BONE", icon_items_CONSTRAINT_BONE}, {"CAMERA_STEREO", icon_items_CAMERA_STEREO}, {"PACKAGE", icon_items_PACKAGE}, {"UGLYPACKAGE", icon_items_UGLYPACKAGE}, {"BRUSH_DATA", icon_items_BRUSH_DATA}, {"IMAGE_DATA", icon_items_IMAGE_DATA}, {"FILE", icon_items_FILE}, {"FCURVE", icon_items_FCURVE}, {"FONT_DATA", icon_items_FONT_DATA}, {"RENDER_RESULT", icon_items_RENDER_RESULT}, {"SURFACE_DATA", icon_items_SURFACE_DATA}, {"EMPTY_DATA", icon_items_EMPTY_DATA}, {"SETTINGS", icon_items_SETTINGS}, {"RENDER_ANIMATION", icon_items_RENDER_ANIMATION}, {"RENDER_STILL", icon_items_RENDER_STILL}, {"LIBRARY_DATA_BROKEN", icon_items_LIBRARY_DATA_BROKEN}, {"BOIDS", icon_items_BOIDS}, {"STRANDS", icon_items_STRANDS}, {"LIBRARY_DATA_INDIRECT", icon_items_LIBRARY_DATA_INDIRECT}, {"GREASEPENCIL", icon_items_GREASEPENCIL}, {"LINE_DATA", icon_items_LINE_DATA}, {"GROUP_BONE", icon_items_GROUP_BONE}, {"GROUP_VERTEX", icon_items_GROUP_VERTEX}, {"GROUP_VCOL", icon_items_GROUP_VCOL}, {"GROUP_UVS", icon_items_GROUP_UVS}, {"RNA", icon_items_RNA}, {"RNA_ADD", icon_items_RNA_ADD}, {"OUTLINER_OB_EMPTY", icon_items_OUTLINER_OB_EMPTY}, {"OUTLINER_OB_MESH", icon_items_OUTLINER_OB_MESH}, {"OUTLINER_OB_CURVE", icon_items_OUTLINER_OB_CURVE}, {"OUTLINER_OB_LATTICE", icon_items_OUTLINER_OB_LATTICE}, {"OUTLINER_OB_META", icon_items_OUTLINER_OB_META}, {"OUTLINER_OB_LAMP", icon_items_OUTLINER_OB_LAMP}, {"OUTLINER_OB_CAMERA", icon_items_OUTLINER_OB_CAMERA}, {"OUTLINER_OB_ARMATURE", icon_items_OUTLINER_OB_ARMATURE}, {"OUTLINER_OB_FONT", icon_items_OUTLINER_OB_FONT}, {"OUTLINER_OB_SURFACE", icon_items_OUTLINER_OB_SURFACE}, {"OUTLINER_OB_SPEAKER", icon_items_OUTLINER_OB_SPEAKER}, {"RESTRICT_VIEW_OFF", icon_items_RESTRICT_VIEW_OFF}, {"RESTRICT_VIEW_ON", icon_items_RESTRICT_VIEW_ON}, {"RESTRICT_SELECT_OFF", icon_items_RESTRICT_SELECT_OFF}, {"RESTRICT_SELECT_ON", icon_items_RESTRICT_SELECT_ON}, {"RESTRICT_RENDER_OFF", icon_items_RESTRICT_RENDER_OFF}, {"RESTRICT_RENDER_ON", icon_items_RESTRICT_RENDER_ON}, {"OUTLINER_DATA_EMPTY", icon_items_OUTLINER_DATA_EMPTY}, {"OUTLINER_DATA_MESH", icon_items_OUTLINER_DATA_MESH}, {"OUTLINER_DATA_CURVE", icon_items_OUTLINER_DATA_CURVE}, {"OUTLINER_DATA_LATTICE", icon_items_OUTLINER_DATA_LATTICE}, {"OUTLINER_DATA_META", icon_items_OUTLINER_DATA_META}, {"OUTLINER_DATA_LAMP", icon_items_OUTLINER_DATA_LAMP}, {"OUTLINER_DATA_CAMERA", icon_items_OUTLINER_DATA_CAMERA}, {"OUTLINER_DATA_ARMATURE", icon_items_OUTLINER_DATA_ARMATURE}, {"OUTLINER_DATA_FONT", icon_items_OUTLINER_DATA_FONT}, {"OUTLINER_DATA_SURFACE", icon_items_OUTLINER_DATA_SURFACE}, {"OUTLINER_DATA_SPEAKER", icon_items_OUTLINER_DATA_SPEAKER}, {"OUTLINER_DATA_POSE", icon_items_OUTLINER_DATA_POSE}, {"MESH_PLANE", icon_items_MESH_PLANE}, {"MESH_CUBE", icon_items_MESH_CUBE}, {"MESH_CIRCLE", icon_items_MESH_CIRCLE}, {"MESH_UVSPHERE", icon_items_MESH_UVSPHERE}, {"MESH_ICOSPHERE", icon_items_MESH_ICOSPHERE}, {"MESH_GRID", icon_items_MESH_GRID}, {"MESH_MONKEY", icon_items_MESH_MONKEY}, {"MESH_CYLINDER", icon_items_MESH_CYLINDER}, {"MESH_TORUS", icon_items_MESH_TORUS}, {"MESH_CONE", icon_items_MESH_CONE}, {"LAMP_POINT", icon_items_LAMP_POINT}, {"LAMP_SUN", icon_items_LAMP_SUN}, {"LAMP_SPOT", icon_items_LAMP_SPOT}, {"LAMP_HEMI", icon_items_LAMP_HEMI}, {"LAMP_AREA", icon_items_LAMP_AREA}, {"META_EMPTY", icon_items_META_EMPTY}, {"META_PLANE", icon_items_META_PLANE}, {"META_CUBE", icon_items_META_CUBE}, {"META_BALL", icon_items_META_BALL}, {"META_ELLIPSOID", icon_items_META_ELLIPSOID}, {"META_CAPSULE", icon_items_META_CAPSULE}, {"SURFACE_NCURVE", icon_items_SURFACE_NCURVE}, {"SURFACE_NCIRCLE", icon_items_SURFACE_NCIRCLE}, {"SURFACE_NSURFACE", icon_items_SURFACE_NSURFACE}, {"SURFACE_NCYLINDER", icon_items_SURFACE_NCYLINDER}, {"SURFACE_NSPHERE", icon_items_SURFACE_NSPHERE}, {"SURFACE_NTORUS", icon_items_SURFACE_NTORUS}, {"CURVE_BEZCURVE", icon_items_CURVE_BEZCURVE}, {"CURVE_BEZCIRCLE", icon_items_CURVE_BEZCIRCLE}, {"CURVE_NCURVE", icon_items_CURVE_NCURVE}, {"CURVE_NCIRCLE", icon_items_CURVE_NCIRCLE}, {"CURVE_PATH", icon_items_CURVE_PATH}, {"COLOR_RED", icon_items_COLOR_RED}, {"COLOR_GREEN", icon_items_COLOR_GREEN}, {"COLOR_BLUE", icon_items_COLOR_BLUE}, {"TRIA_RIGHT_BAR", icon_items_TRIA_RIGHT_BAR}, {"TRIA_DOWN_BAR", icon_items_TRIA_DOWN_BAR}, {"TRIA_LEFT_BAR", icon_items_TRIA_LEFT_BAR}, {"TRIA_UP_BAR", icon_items_TRIA_UP_BAR}, {"FORCE_FORCE", icon_items_FORCE_FORCE}, {"FORCE_WIND", icon_items_FORCE_WIND}, {"FORCE_VORTEX", icon_items_FORCE_VORTEX}, {"FORCE_MAGNETIC", icon_items_FORCE_MAGNETIC}, {"FORCE_HARMONIC", icon_items_FORCE_HARMONIC}, {"FORCE_CHARGE", icon_items_FORCE_CHARGE}, {"FORCE_LENNARDJONES", icon_items_FORCE_LENNARDJONES}, {"FORCE_TEXTURE", icon_items_FORCE_TEXTURE}, {"FORCE_CURVE", icon_items_FORCE_CURVE}, {"FORCE_BOID", icon_items_FORCE_BOID}, {"FORCE_TURBULENCE", icon_items_FORCE_TURBULENCE}, {"FORCE_DRAG", icon_items_FORCE_DRAG}, {"FORCE_SMOKEFLOW", icon_items_FORCE_SMOKEFLOW}, {"MODIFIER", icon_items_MODIFIER}, {"MOD_WAVE", icon_items_MOD_WAVE}, {"MOD_BUILD", icon_items_MOD_BUILD}, {"MOD_DECIM", icon_items_MOD_DECIM}, {"MOD_MIRROR", icon_items_MOD_MIRROR}, {"MOD_SOFT", icon_items_MOD_SOFT}, {"MOD_SUBSURF", icon_items_MOD_SUBSURF}, {"HOOK", icon_items_HOOK}, {"MOD_PHYSICS", icon_items_MOD_PHYSICS}, {"MOD_PARTICLES", icon_items_MOD_PARTICLES}, {"MOD_BOOLEAN", icon_items_MOD_BOOLEAN}, {"MOD_EDGESPLIT", icon_items_MOD_EDGESPLIT}, {"MOD_ARRAY", icon_items_MOD_ARRAY}, {"MOD_UVPROJECT", icon_items_MOD_UVPROJECT}, {"MOD_DISPLACE", icon_items_MOD_DISPLACE}, {"MOD_CURVE", icon_items_MOD_CURVE}, {"MOD_LATTICE", icon_items_MOD_LATTICE}, {"CONSTRAINT_DATA", icon_items_CONSTRAINT_DATA}, {"MOD_ARMATURE", icon_items_MOD_ARMATURE}, {"MOD_SHRINKWRAP", icon_items_MOD_SHRINKWRAP}, {"MOD_CAST", icon_items_MOD_CAST}, {"MOD_MESHDEFORM", icon_items_MOD_MESHDEFORM}, {"MOD_BEVEL", icon_items_MOD_BEVEL}, {"MOD_SMOOTH", icon_items_MOD_SMOOTH}, {"MOD_SIMPLEDEFORM", icon_items_MOD_SIMPLEDEFORM}, {"MOD_MASK", icon_items_MOD_MASK}, {"MOD_CLOTH", icon_items_MOD_CLOTH}, {"MOD_EXPLODE", icon_items_MOD_EXPLODE}, {"MOD_FLUIDSIM", icon_items_MOD_FLUIDSIM}, {"MOD_MULTIRES", icon_items_MOD_MULTIRES}, {"MOD_SMOKE", icon_items_MOD_SMOKE}, {"MOD_SOLIDIFY", icon_items_MOD_SOLIDIFY}, {"MOD_SCREW", icon_items_MOD_SCREW}, {"MOD_VERTEX_WEIGHT", icon_items_MOD_VERTEX_WEIGHT}, {"MOD_DYNAMICPAINT", icon_items_MOD_DYNAMICPAINT}, {"MOD_REMESH", icon_items_MOD_REMESH}, {"MOD_OCEAN", icon_items_MOD_OCEAN}, {"MOD_WARP", icon_items_MOD_WARP}, {"MOD_SKIN", icon_items_MOD_SKIN}, {"MOD_TRIANGULATE", icon_items_MOD_TRIANGULATE}, {"MOD_WIREFRAME", icon_items_MOD_WIREFRAME}, {"MOD_DATA_TRANSFER", icon_items_MOD_DATA_TRANSFER}, {"MOD_NORMALEDIT", icon_items_MOD_NORMALEDIT}, {"REC", icon_items_REC}, {"PLAY", icon_items_PLAY}, {"FF", icon_items_FF}, {"REW", icon_items_REW}, {"PAUSE", icon_items_PAUSE}, {"PREV_KEYFRAME", icon_items_PREV_KEYFRAME}, {"NEXT_KEYFRAME", icon_items_NEXT_KEYFRAME}, {"PLAY_AUDIO", icon_items_PLAY_AUDIO}, {"PLAY_REVERSE", icon_items_PLAY_REVERSE}, {"PREVIEW_RANGE", icon_items_PREVIEW_RANGE}, {"ACTION_TWEAK", icon_items_ACTION_TWEAK}, {"PMARKER_ACT", icon_items_PMARKER_ACT}, {"PMARKER_SEL", icon_items_PMARKER_SEL}, {"PMARKER", icon_items_PMARKER}, {"MARKER_HLT", icon_items_MARKER_HLT}, {"MARKER", icon_items_MARKER}, {"SPACE2", icon_items_SPACE2}, {"SPACE3", icon_items_SPACE3}, {"KEYINGSET", icon_items_KEYINGSET}, {"KEY_DEHLT", icon_items_KEY_DEHLT}, {"KEY_HLT", icon_items_KEY_HLT}, {"MUTE_IPO_OFF", icon_items_MUTE_IPO_OFF}, {"MUTE_IPO_ON", icon_items_MUTE_IPO_ON}, {"VISIBLE_IPO_OFF", icon_items_VISIBLE_IPO_OFF}, {"VISIBLE_IPO_ON", icon_items_VISIBLE_IPO_ON}, {"DRIVER", icon_items_DRIVER}, {"SOLO_OFF", icon_items_SOLO_OFF}, {"SOLO_ON", icon_items_SOLO_ON}, {"FRAME_PREV", icon_items_FRAME_PREV}, {"FRAME_NEXT", icon_items_FRAME_NEXT}, {"NLA_PUSHDOWN", icon_items_NLA_PUSHDOWN}, {"IPO_CONSTANT", icon_items_IPO_CONSTANT}, {"IPO_LINEAR", icon_items_IPO_LINEAR}, {"IPO_BEZIER", icon_items_IPO_BEZIER}, {"IPO_SINE", icon_items_IPO_SINE}, {"IPO_QUAD", icon_items_IPO_QUAD}, {"IPO_CUBIC", icon_items_IPO_CUBIC}, {"IPO_QUART", icon_items_IPO_QUART}, {"IPO_QUINT", icon_items_IPO_QUINT}, {"IPO_EXPO", icon_items_IPO_EXPO}, {"IPO_CIRC", icon_items_IPO_CIRC}, {"IPO_BOUNCE", icon_items_IPO_BOUNCE}, {"IPO_ELASTIC", icon_items_IPO_ELASTIC}, {"IPO_BACK", icon_items_IPO_BACK}, {"IPO_EASE_IN", icon_items_IPO_EASE_IN}, {"IPO_EASE_OUT", icon_items_IPO_EASE_OUT}, {"IPO_EASE_IN_OUT", icon_items_IPO_EASE_IN_OUT}, {"VERTEXSEL", icon_items_VERTEXSEL}, {"EDGESEL", icon_items_EDGESEL}, {"FACESEL", icon_items_FACESEL}, {"LOOPSEL", icon_items_LOOPSEL}, {"ROTATE", icon_items_ROTATE}, {"CURSOR", icon_items_CURSOR}, {"ROTATECOLLECTION", icon_items_ROTATECOLLECTION}, {"ROTATECENTER", icon_items_ROTATECENTER}, {"ROTACTIVE", icon_items_ROTACTIVE}, {"ALIGN", icon_items_ALIGN}, {"SMOOTHCURVE", icon_items_SMOOTHCURVE}, {"SPHERECURVE", icon_items_SPHERECURVE}, {"ROOTCURVE", icon_items_ROOTCURVE}, {"SHARPCURVE", icon_items_SHARPCURVE}, {"LINCURVE", icon_items_LINCURVE}, {"NOCURVE", icon_items_NOCURVE}, {"RNDCURVE", icon_items_RNDCURVE}, {"PROP_OFF", icon_items_PROP_OFF}, {"PROP_ON", icon_items_PROP_ON}, {"PROP_CON", icon_items_PROP_CON}, {"SCULPT_DYNTOPO", icon_items_SCULPT_DYNTOPO}, {"PARTICLE_POINT", icon_items_PARTICLE_POINT}, {"PARTICLE_TIP", icon_items_PARTICLE_TIP}, {"PARTICLE_PATH", icon_items_PARTICLE_PATH}, {"MAN_TRANS", icon_items_MAN_TRANS}, {"MAN_ROT", icon_items_MAN_ROT}, {"MAN_SCALE", icon_items_MAN_SCALE}, {"MANIPUL", icon_items_MANIPUL}, {"SNAP_OFF", icon_items_SNAP_OFF}, {"SNAP_ON", icon_items_SNAP_ON}, {"SNAP_NORMAL", icon_items_SNAP_NORMAL}, {"SNAP_INCREMENT", icon_items_SNAP_INCREMENT}, {"SNAP_VERTEX", icon_items_SNAP_VERTEX}, {"SNAP_EDGE", icon_items_SNAP_EDGE}, {"SNAP_FACE", icon_items_SNAP_FACE}, {"SNAP_VOLUME", icon_items_SNAP_VOLUME}, {"STICKY_UVS_LOC", icon_items_STICKY_UVS_LOC}, {"STICKY_UVS_DISABLE", icon_items_STICKY_UVS_DISABLE}, {"STICKY_UVS_VERT", icon_items_STICKY_UVS_VERT}, {"CLIPUV_DEHLT", icon_items_CLIPUV_DEHLT}, {"CLIPUV_HLT", icon_items_CLIPUV_HLT}, {"SNAP_PEEL_OBJECT", icon_items_SNAP_PEEL_OBJECT}, {"GRID", icon_items_GRID}, {"PASTEDOWN", icon_items_PASTEDOWN}, {"COPYDOWN", icon_items_COPYDOWN}, {"PASTEFLIPUP", icon_items_PASTEFLIPUP}, {"PASTEFLIPDOWN", icon_items_PASTEFLIPDOWN}, {"SNAP_SURFACE", icon_items_SNAP_SURFACE}, {"AUTOMERGE_ON", icon_items_AUTOMERGE_ON}, {"AUTOMERGE_OFF", icon_items_AUTOMERGE_OFF}, {"RETOPO", icon_items_RETOPO}, {"UV_VERTEXSEL", icon_items_UV_VERTEXSEL}, {"UV_EDGESEL", icon_items_UV_EDGESEL}, {"UV_FACESEL", icon_items_UV_FACESEL}, {"UV_ISLANDSEL", icon_items_UV_ISLANDSEL}, {"UV_SYNC_SELECT", icon_items_UV_SYNC_SELECT}, {"BBOX", icon_items_BBOX}, {"WIRE", icon_items_WIRE}, {"SOLID", icon_items_SOLID}, {"SMOOTH", icon_items_SMOOTH}, {"POTATO", icon_items_POTATO}, {"ORTHO", icon_items_ORTHO}, {"LOCKVIEW_OFF", icon_items_LOCKVIEW_OFF}, {"LOCKVIEW_ON", icon_items_LOCKVIEW_ON}, {"AXIS_SIDE", icon_items_AXIS_SIDE}, {"AXIS_FRONT", icon_items_AXIS_FRONT}, {"AXIS_TOP", icon_items_AXIS_TOP}, {"NDOF_DOM", icon_items_NDOF_DOM}, {"NDOF_TURN", icon_items_NDOF_TURN}, {"NDOF_FLY", icon_items_NDOF_FLY}, {"NDOF_TRANS", icon_items_NDOF_TRANS}, {"LAYER_USED", icon_items_LAYER_USED}, {"LAYER_ACTIVE", icon_items_LAYER_ACTIVE}, {"SORTALPHA", icon_items_SORTALPHA}, {"SORTBYEXT", icon_items_SORTBYEXT}, {"SORTTIME", icon_items_SORTTIME}, {"SORTSIZE", icon_items_SORTSIZE}, {"LONGDISPLAY", icon_items_LONGDISPLAY}, {"SHORTDISPLAY", icon_items_SHORTDISPLAY}, {"GHOST", icon_items_GHOST}, {"IMGDISPLAY", icon_items_IMGDISPLAY}, {"SAVE_AS", icon_items_SAVE_AS}, {"SAVE_COPY", icon_items_SAVE_COPY}, {"BOOKMARKS", icon_items_BOOKMARKS}, {"FONTPREVIEW", icon_items_FONTPREVIEW}, {"FILTER", icon_items_FILTER}, {"NEWFOLDER", icon_items_NEWFOLDER}, {"OPEN_RECENT", icon_items_OPEN_RECENT}, {"FILE_PARENT", icon_items_FILE_PARENT}, {"FILE_REFRESH", icon_items_FILE_REFRESH}, {"FILE_FOLDER", icon_items_FILE_FOLDER}, {"FILE_BLANK", icon_items_FILE_BLANK}, {"FILE_BLEND", icon_items_FILE_BLEND}, {"FILE_IMAGE", icon_items_FILE_IMAGE}, {"FILE_MOVIE", icon_items_FILE_MOVIE}, {"FILE_SCRIPT", icon_items_FILE_SCRIPT}, {"FILE_SOUND", icon_items_FILE_SOUND}, {"FILE_FONT", icon_items_FILE_FONT}, {"FILE_TEXT", icon_items_FILE_TEXT}, {"RECOVER_AUTO", icon_items_RECOVER_AUTO}, {"SAVE_PREFS", icon_items_SAVE_PREFS}, {"LINK_BLEND", icon_items_LINK_BLEND}, {"APPEND_BLEND", icon_items_APPEND_BLEND}, {"IMPORT", icon_items_IMPORT}, {"EXPORT", icon_items_EXPORT}, {"EXTERNAL_DATA", icon_items_EXTERNAL_DATA}, {"LOAD_FACTORY", icon_items_LOAD_FACTORY}, {"LOOP_BACK", icon_items_LOOP_BACK}, {"LOOP_FORWARDS", icon_items_LOOP_FORWARDS}, {"BACK", icon_items_BACK}, {"FORWARD", icon_items_FORWARD}, {"FILE_HIDDEN", icon_items_FILE_HIDDEN}, {"FILE_BACKUP", icon_items_FILE_BACKUP}, {"DISK_DRIVE", icon_items_DISK_DRIVE}, {"MATPLANE", icon_items_MATPLANE}, {"MATSPHERE", icon_items_MATSPHERE}, {"MATCUBE", icon_items_MATCUBE}, {"MONKEY", icon_items_MONKEY}, {"HAIR", icon_items_HAIR}, {"ALIASED", icon_items_ALIASED}, {"ANTIALIASED", icon_items_ANTIALIASED}, {"MAT_SPHERE_SKY", icon_items_MAT_SPHERE_SKY}, {"WORDWRAP_OFF", icon_items_WORDWRAP_OFF}, {"WORDWRAP_ON", icon_items_WORDWRAP_ON}, {"SYNTAX_OFF", icon_items_SYNTAX_OFF}, {"SYNTAX_ON", icon_items_SYNTAX_ON}, {"LINENUMBERS_OFF", icon_items_LINENUMBERS_OFF}, {"LINENUMBERS_ON", icon_items_LINENUMBERS_ON}, {"SCRIPTPLUGINS", icon_items_SCRIPTPLUGINS}, {"SEQ_SEQUENCER", icon_items_SEQ_SEQUENCER}, {"SEQ_PREVIEW", icon_items_SEQ_PREVIEW}, {"SEQ_LUMA_WAVEFORM", icon_items_SEQ_LUMA_WAVEFORM}, {"SEQ_CHROMA_SCOPE", icon_items_SEQ_CHROMA_SCOPE}, {"SEQ_HISTOGRAM", icon_items_SEQ_HISTOGRAM}, {"SEQ_SPLITVIEW", icon_items_SEQ_SPLITVIEW}, {"IMAGE_RGB", icon_items_IMAGE_RGB}, {"IMAGE_RGB_ALPHA", icon_items_IMAGE_RGB_ALPHA}, {"IMAGE_ALPHA", icon_items_IMAGE_ALPHA}, {"IMAGE_ZDEPTH", icon_items_IMAGE_ZDEPTH}, {"IMAGEFILE", icon_items_IMAGEFILE}, {"BRUSH_ADD", icon_items_BRUSH_ADD}, {"BRUSH_BLOB", icon_items_BRUSH_BLOB}, {"BRUSH_BLUR", icon_items_BRUSH_BLUR}, {"BRUSH_CLAY", icon_items_BRUSH_CLAY}, {"BRUSH_CLAY_STRIPS", icon_items_BRUSH_CLAY_STRIPS}, {"BRUSH_CLONE", icon_items_BRUSH_CLONE}, {"BRUSH_CREASE", icon_items_BRUSH_CREASE}, {"BRUSH_DARKEN", icon_items_BRUSH_DARKEN}, {"BRUSH_FILL", icon_items_BRUSH_FILL}, {"BRUSH_FLATTEN", icon_items_BRUSH_FLATTEN}, {"BRUSH_GRAB", icon_items_BRUSH_GRAB}, {"BRUSH_INFLATE", icon_items_BRUSH_INFLATE}, {"BRUSH_LAYER", icon_items_BRUSH_LAYER}, {"BRUSH_LIGHTEN", icon_items_BRUSH_LIGHTEN}, {"BRUSH_MASK", icon_items_BRUSH_MASK}, {"BRUSH_MIX", icon_items_BRUSH_MIX}, {"BRUSH_MULTIPLY", icon_items_BRUSH_MULTIPLY}, {"BRUSH_NUDGE", icon_items_BRUSH_NUDGE}, {"BRUSH_PINCH", icon_items_BRUSH_PINCH}, {"BRUSH_SCRAPE", icon_items_BRUSH_SCRAPE}, {"BRUSH_SCULPT_DRAW", icon_items_BRUSH_SCULPT_DRAW}, {"BRUSH_SMEAR", icon_items_BRUSH_SMEAR}, {"BRUSH_SMOOTH", icon_items_BRUSH_SMOOTH}, {"BRUSH_SNAKE_HOOK", icon_items_BRUSH_SNAKE_HOOK}, {"BRUSH_SOFTEN", icon_items_BRUSH_SOFTEN}, {"BRUSH_SUBTRACT", icon_items_BRUSH_SUBTRACT}, {"BRUSH_TEXDRAW", icon_items_BRUSH_TEXDRAW}, {"BRUSH_TEXFILL", icon_items_BRUSH_TEXFILL}, {"BRUSH_TEXMASK", icon_items_BRUSH_TEXMASK}, {"BRUSH_THUMB", icon_items_BRUSH_THUMB}, {"BRUSH_ROTATE", icon_items_BRUSH_ROTATE}, {"BRUSH_VERTEXDRAW", icon_items_BRUSH_VERTEXDRAW}, {"MATCAP_01", icon_items_MATCAP_01}, {"MATCAP_02", icon_items_MATCAP_02}, {"MATCAP_03", icon_items_MATCAP_03}, {"MATCAP_04", icon_items_MATCAP_04}, {"MATCAP_05", icon_items_MATCAP_05}, {"MATCAP_06", icon_items_MATCAP_06}, {"MATCAP_07", icon_items_MATCAP_07}, {"MATCAP_08", icon_items_MATCAP_08}, {"MATCAP_09", icon_items_MATCAP_09}, {"MATCAP_10", icon_items_MATCAP_10}, {"MATCAP_11", icon_items_MATCAP_11}, {"MATCAP_12", icon_items_MATCAP_12}, {"MATCAP_13", icon_items_MATCAP_13}, {"MATCAP_14", icon_items_MATCAP_14}, {"MATCAP_15", icon_items_MATCAP_15}, {"MATCAP_16", icon_items_MATCAP_16}, {"MATCAP_17", icon_items_MATCAP_17}, {"MATCAP_18", icon_items_MATCAP_18}, {"MATCAP_19", icon_items_MATCAP_19}, {"MATCAP_20", icon_items_MATCAP_20}, {"MATCAP_21", icon_items_MATCAP_21}, {"MATCAP_22", icon_items_MATCAP_22}, {"MATCAP_23", icon_items_MATCAP_23}, {"MATCAP_24", icon_items_MATCAP_24}, {"VIEW3D_VEC", icon_items_VIEW3D_VEC}, {"EDIT_VEC", icon_items_EDIT_VEC}, {"EDITMODE_VEC_DEHLT", icon_items_EDITMODE_VEC_DEHLT}, {"EDITMODE_VEC_HLT", icon_items_EDITMODE_VEC_HLT}, {"DISCLOSURE_TRI_RIGHT_VEC", icon_items_DISCLOSURE_TRI_RIGHT_VEC}, {"DISCLOSURE_TRI_DOWN_VEC", icon_items_DISCLOSURE_TRI_DOWN_VEC}, {"MOVE_UP_VEC", icon_items_MOVE_UP_VEC}, {"MOVE_DOWN_VEC", icon_items_MOVE_DOWN_VEC}, {"X_VEC", icon_items_X_VEC}, {"SMALL_TRI_RIGHT_VEC", icon_items_SMALL_TRI_RIGHT_VEC}};
	};

	std::map<int, std::string> create_icon_items_to_string() {
		return {{icon_items_NONE, "NONE"}, {icon_items_QUESTION, "QUESTION"}, {icon_items_ERROR, "ERROR"}, {icon_items_CANCEL, "CANCEL"}, {icon_items_TRIA_RIGHT, "TRIA_RIGHT"}, {icon_items_TRIA_DOWN, "TRIA_DOWN"}, {icon_items_TRIA_LEFT, "TRIA_LEFT"}, {icon_items_TRIA_UP, "TRIA_UP"}, {icon_items_ARROW_LEFTRIGHT, "ARROW_LEFTRIGHT"}, {icon_items_PLUS, "PLUS"}, {icon_items_DISCLOSURE_TRI_DOWN, "DISCLOSURE_TRI_DOWN"}, {icon_items_DISCLOSURE_TRI_RIGHT, "DISCLOSURE_TRI_RIGHT"}, {icon_items_RADIOBUT_OFF, "RADIOBUT_OFF"}, {icon_items_RADIOBUT_ON, "RADIOBUT_ON"}, {icon_items_MENU_PANEL, "MENU_PANEL"}, {icon_items_BLENDER, "BLENDER"}, {icon_items_GRIP, "GRIP"}, {icon_items_DOT, "DOT"}, {icon_items_COLLAPSEMENU, "COLLAPSEMENU"}, {icon_items_X, "X"}, {icon_items_GO_LEFT, "GO_LEFT"}, {icon_items_PLUG, "PLUG"}, {icon_items_UI, "UI"}, {icon_items_NODE, "NODE"}, {icon_items_NODE_SEL, "NODE_SEL"}, {icon_items_FULLSCREEN, "FULLSCREEN"}, {icon_items_SPLITSCREEN, "SPLITSCREEN"}, {icon_items_RIGHTARROW_THIN, "RIGHTARROW_THIN"}, {icon_items_BORDERMOVE, "BORDERMOVE"}, {icon_items_VIEWZOOM, "VIEWZOOM"}, {icon_items_ZOOMIN, "ZOOMIN"}, {icon_items_ZOOMOUT, "ZOOMOUT"}, {icon_items_PANEL_CLOSE, "PANEL_CLOSE"}, {icon_items_COPY_ID, "COPY_ID"}, {icon_items_EYEDROPPER, "EYEDROPPER"}, {icon_items_LINK_AREA, "LINK_AREA"}, {icon_items_AUTO, "AUTO"}, {icon_items_CHECKBOX_DEHLT, "CHECKBOX_DEHLT"}, {icon_items_CHECKBOX_HLT, "CHECKBOX_HLT"}, {icon_items_UNLOCKED, "UNLOCKED"}, {icon_items_LOCKED, "LOCKED"}, {icon_items_UNPINNED, "UNPINNED"}, {icon_items_PINNED, "PINNED"}, {icon_items_SCREEN_BACK, "SCREEN_BACK"}, {icon_items_RIGHTARROW, "RIGHTARROW"}, {icon_items_DOWNARROW_HLT, "DOWNARROW_HLT"}, {icon_items_DOTSUP, "DOTSUP"}, {icon_items_DOTSDOWN, "DOTSDOWN"}, {icon_items_LINK, "LINK"}, {icon_items_INLINK, "INLINK"}, {icon_items_PLUGIN, "PLUGIN"}, {icon_items_HELP, "HELP"}, {icon_items_GHOST_ENABLED, "GHOST_ENABLED"}, {icon_items_COLOR, "COLOR"}, {icon_items_LINKED, "LINKED"}, {icon_items_UNLINKED, "UNLINKED"}, {icon_items_HAND, "HAND"}, {icon_items_ZOOM_ALL, "ZOOM_ALL"}, {icon_items_ZOOM_SELECTED, "ZOOM_SELECTED"}, {icon_items_ZOOM_PREVIOUS, "ZOOM_PREVIOUS"}, {icon_items_ZOOM_IN, "ZOOM_IN"}, {icon_items_ZOOM_OUT, "ZOOM_OUT"}, {icon_items_RENDER_REGION, "RENDER_REGION"}, {icon_items_BORDER_RECT, "BORDER_RECT"}, {icon_items_BORDER_LASSO, "BORDER_LASSO"}, {icon_items_FREEZE, "FREEZE"}, {icon_items_STYLUS_PRESSURE, "STYLUS_PRESSURE"}, {icon_items_GHOST_DISABLED, "GHOST_DISABLED"}, {icon_items_NEW, "NEW"}, {icon_items_FILE_TICK, "FILE_TICK"}, {icon_items_QUIT, "QUIT"}, {icon_items_URL, "URL"}, {icon_items_RECOVER_LAST, "RECOVER_LAST"}, {icon_items_FULLSCREEN_ENTER, "FULLSCREEN_ENTER"}, {icon_items_FULLSCREEN_EXIT, "FULLSCREEN_EXIT"}, {icon_items_BLANK1, "BLANK1"}, {icon_items_LAMP, "LAMP"}, {icon_items_MATERIAL, "MATERIAL"}, {icon_items_TEXTURE, "TEXTURE"}, {icon_items_ANIM, "ANIM"}, {icon_items_WORLD, "WORLD"}, {icon_items_SCENE, "SCENE"}, {icon_items_EDIT, "EDIT"}, {icon_items_GAME, "GAME"}, {icon_items_RADIO, "RADIO"}, {icon_items_SCRIPT, "SCRIPT"}, {icon_items_PARTICLES, "PARTICLES"}, {icon_items_PHYSICS, "PHYSICS"}, {icon_items_SPEAKER, "SPEAKER"}, {icon_items_TEXTURE_SHADED, "TEXTURE_SHADED"}, {icon_items_VIEW3D, "VIEW3D"}, {icon_items_IPO, "IPO"}, {icon_items_OOPS, "OOPS"}, {icon_items_BUTS, "BUTS"}, {icon_items_FILESEL, "FILESEL"}, {icon_items_IMAGE_COL, "IMAGE_COL"}, {icon_items_INFO, "INFO"}, {icon_items_SEQUENCE, "SEQUENCE"}, {icon_items_TEXT, "TEXT"}, {icon_items_IMASEL, "IMASEL"}, {icon_items_SOUND, "SOUND"}, {icon_items_ACTION, "ACTION"}, {icon_items_NLA, "NLA"}, {icon_items_SCRIPTWIN, "SCRIPTWIN"}, {icon_items_TIME, "TIME"}, {icon_items_NODETREE, "NODETREE"}, {icon_items_LOGIC, "LOGIC"}, {icon_items_CONSOLE, "CONSOLE"}, {icon_items_PREFERENCES, "PREFERENCES"}, {icon_items_CLIP, "CLIP"}, {icon_items_ASSET_MANAGER, "ASSET_MANAGER"}, {icon_items_OBJECT_DATAMODE, "OBJECT_DATAMODE"}, {icon_items_EDITMODE_HLT, "EDITMODE_HLT"}, {icon_items_FACESEL_HLT, "FACESEL_HLT"}, {icon_items_VPAINT_HLT, "VPAINT_HLT"}, {icon_items_TPAINT_HLT, "TPAINT_HLT"}, {icon_items_WPAINT_HLT, "WPAINT_HLT"}, {icon_items_SCULPTMODE_HLT, "SCULPTMODE_HLT"}, {icon_items_POSE_HLT, "POSE_HLT"}, {icon_items_PARTICLEMODE, "PARTICLEMODE"}, {icon_items_LIGHTPAINT, "LIGHTPAINT"}, {icon_items_SCENE_DATA, "SCENE_DATA"}, {icon_items_RENDERLAYERS, "RENDERLAYERS"}, {icon_items_WORLD_DATA, "WORLD_DATA"}, {icon_items_OBJECT_DATA, "OBJECT_DATA"}, {icon_items_MESH_DATA, "MESH_DATA"}, {icon_items_CURVE_DATA, "CURVE_DATA"}, {icon_items_META_DATA, "META_DATA"}, {icon_items_LATTICE_DATA, "LATTICE_DATA"}, {icon_items_LAMP_DATA, "LAMP_DATA"}, {icon_items_MATERIAL_DATA, "MATERIAL_DATA"}, {icon_items_TEXTURE_DATA, "TEXTURE_DATA"}, {icon_items_ANIM_DATA, "ANIM_DATA"}, {icon_items_CAMERA_DATA, "CAMERA_DATA"}, {icon_items_PARTICLE_DATA, "PARTICLE_DATA"}, {icon_items_LIBRARY_DATA_DIRECT, "LIBRARY_DATA_DIRECT"}, {icon_items_GROUP, "GROUP"}, {icon_items_ARMATURE_DATA, "ARMATURE_DATA"}, {icon_items_POSE_DATA, "POSE_DATA"}, {icon_items_BONE_DATA, "BONE_DATA"}, {icon_items_CONSTRAINT, "CONSTRAINT"}, {icon_items_SHAPEKEY_DATA, "SHAPEKEY_DATA"}, {icon_items_CONSTRAINT_BONE, "CONSTRAINT_BONE"}, {icon_items_CAMERA_STEREO, "CAMERA_STEREO"}, {icon_items_PACKAGE, "PACKAGE"}, {icon_items_UGLYPACKAGE, "UGLYPACKAGE"}, {icon_items_BRUSH_DATA, "BRUSH_DATA"}, {icon_items_IMAGE_DATA, "IMAGE_DATA"}, {icon_items_FILE, "FILE"}, {icon_items_FCURVE, "FCURVE"}, {icon_items_FONT_DATA, "FONT_DATA"}, {icon_items_RENDER_RESULT, "RENDER_RESULT"}, {icon_items_SURFACE_DATA, "SURFACE_DATA"}, {icon_items_EMPTY_DATA, "EMPTY_DATA"}, {icon_items_SETTINGS, "SETTINGS"}, {icon_items_RENDER_ANIMATION, "RENDER_ANIMATION"}, {icon_items_RENDER_STILL, "RENDER_STILL"}, {icon_items_LIBRARY_DATA_BROKEN, "LIBRARY_DATA_BROKEN"}, {icon_items_BOIDS, "BOIDS"}, {icon_items_STRANDS, "STRANDS"}, {icon_items_LIBRARY_DATA_INDIRECT, "LIBRARY_DATA_INDIRECT"}, {icon_items_GREASEPENCIL, "GREASEPENCIL"}, {icon_items_LINE_DATA, "LINE_DATA"}, {icon_items_GROUP_BONE, "GROUP_BONE"}, {icon_items_GROUP_VERTEX, "GROUP_VERTEX"}, {icon_items_GROUP_VCOL, "GROUP_VCOL"}, {icon_items_GROUP_UVS, "GROUP_UVS"}, {icon_items_RNA, "RNA"}, {icon_items_RNA_ADD, "RNA_ADD"}, {icon_items_OUTLINER_OB_EMPTY, "OUTLINER_OB_EMPTY"}, {icon_items_OUTLINER_OB_MESH, "OUTLINER_OB_MESH"}, {icon_items_OUTLINER_OB_CURVE, "OUTLINER_OB_CURVE"}, {icon_items_OUTLINER_OB_LATTICE, "OUTLINER_OB_LATTICE"}, {icon_items_OUTLINER_OB_META, "OUTLINER_OB_META"}, {icon_items_OUTLINER_OB_LAMP, "OUTLINER_OB_LAMP"}, {icon_items_OUTLINER_OB_CAMERA, "OUTLINER_OB_CAMERA"}, {icon_items_OUTLINER_OB_ARMATURE, "OUTLINER_OB_ARMATURE"}, {icon_items_OUTLINER_OB_FONT, "OUTLINER_OB_FONT"}, {icon_items_OUTLINER_OB_SURFACE, "OUTLINER_OB_SURFACE"}, {icon_items_OUTLINER_OB_SPEAKER, "OUTLINER_OB_SPEAKER"}, {icon_items_RESTRICT_VIEW_OFF, "RESTRICT_VIEW_OFF"}, {icon_items_RESTRICT_VIEW_ON, "RESTRICT_VIEW_ON"}, {icon_items_RESTRICT_SELECT_OFF, "RESTRICT_SELECT_OFF"}, {icon_items_RESTRICT_SELECT_ON, "RESTRICT_SELECT_ON"}, {icon_items_RESTRICT_RENDER_OFF, "RESTRICT_RENDER_OFF"}, {icon_items_RESTRICT_RENDER_ON, "RESTRICT_RENDER_ON"}, {icon_items_OUTLINER_DATA_EMPTY, "OUTLINER_DATA_EMPTY"}, {icon_items_OUTLINER_DATA_MESH, "OUTLINER_DATA_MESH"}, {icon_items_OUTLINER_DATA_CURVE, "OUTLINER_DATA_CURVE"}, {icon_items_OUTLINER_DATA_LATTICE, "OUTLINER_DATA_LATTICE"}, {icon_items_OUTLINER_DATA_META, "OUTLINER_DATA_META"}, {icon_items_OUTLINER_DATA_LAMP, "OUTLINER_DATA_LAMP"}, {icon_items_OUTLINER_DATA_CAMERA, "OUTLINER_DATA_CAMERA"}, {icon_items_OUTLINER_DATA_ARMATURE, "OUTLINER_DATA_ARMATURE"}, {icon_items_OUTLINER_DATA_FONT, "OUTLINER_DATA_FONT"}, {icon_items_OUTLINER_DATA_SURFACE, "OUTLINER_DATA_SURFACE"}, {icon_items_OUTLINER_DATA_SPEAKER, "OUTLINER_DATA_SPEAKER"}, {icon_items_OUTLINER_DATA_POSE, "OUTLINER_DATA_POSE"}, {icon_items_MESH_PLANE, "MESH_PLANE"}, {icon_items_MESH_CUBE, "MESH_CUBE"}, {icon_items_MESH_CIRCLE, "MESH_CIRCLE"}, {icon_items_MESH_UVSPHERE, "MESH_UVSPHERE"}, {icon_items_MESH_ICOSPHERE, "MESH_ICOSPHERE"}, {icon_items_MESH_GRID, "MESH_GRID"}, {icon_items_MESH_MONKEY, "MESH_MONKEY"}, {icon_items_MESH_CYLINDER, "MESH_CYLINDER"}, {icon_items_MESH_TORUS, "MESH_TORUS"}, {icon_items_MESH_CONE, "MESH_CONE"}, {icon_items_LAMP_POINT, "LAMP_POINT"}, {icon_items_LAMP_SUN, "LAMP_SUN"}, {icon_items_LAMP_SPOT, "LAMP_SPOT"}, {icon_items_LAMP_HEMI, "LAMP_HEMI"}, {icon_items_LAMP_AREA, "LAMP_AREA"}, {icon_items_META_EMPTY, "META_EMPTY"}, {icon_items_META_PLANE, "META_PLANE"}, {icon_items_META_CUBE, "META_CUBE"}, {icon_items_META_BALL, "META_BALL"}, {icon_items_META_ELLIPSOID, "META_ELLIPSOID"}, {icon_items_META_CAPSULE, "META_CAPSULE"}, {icon_items_SURFACE_NCURVE, "SURFACE_NCURVE"}, {icon_items_SURFACE_NCIRCLE, "SURFACE_NCIRCLE"}, {icon_items_SURFACE_NSURFACE, "SURFACE_NSURFACE"}, {icon_items_SURFACE_NCYLINDER, "SURFACE_NCYLINDER"}, {icon_items_SURFACE_NSPHERE, "SURFACE_NSPHERE"}, {icon_items_SURFACE_NTORUS, "SURFACE_NTORUS"}, {icon_items_CURVE_BEZCURVE, "CURVE_BEZCURVE"}, {icon_items_CURVE_BEZCIRCLE, "CURVE_BEZCIRCLE"}, {icon_items_CURVE_NCURVE, "CURVE_NCURVE"}, {icon_items_CURVE_NCIRCLE, "CURVE_NCIRCLE"}, {icon_items_CURVE_PATH, "CURVE_PATH"}, {icon_items_COLOR_RED, "COLOR_RED"}, {icon_items_COLOR_GREEN, "COLOR_GREEN"}, {icon_items_COLOR_BLUE, "COLOR_BLUE"}, {icon_items_TRIA_RIGHT_BAR, "TRIA_RIGHT_BAR"}, {icon_items_TRIA_DOWN_BAR, "TRIA_DOWN_BAR"}, {icon_items_TRIA_LEFT_BAR, "TRIA_LEFT_BAR"}, {icon_items_TRIA_UP_BAR, "TRIA_UP_BAR"}, {icon_items_FORCE_FORCE, "FORCE_FORCE"}, {icon_items_FORCE_WIND, "FORCE_WIND"}, {icon_items_FORCE_VORTEX, "FORCE_VORTEX"}, {icon_items_FORCE_MAGNETIC, "FORCE_MAGNETIC"}, {icon_items_FORCE_HARMONIC, "FORCE_HARMONIC"}, {icon_items_FORCE_CHARGE, "FORCE_CHARGE"}, {icon_items_FORCE_LENNARDJONES, "FORCE_LENNARDJONES"}, {icon_items_FORCE_TEXTURE, "FORCE_TEXTURE"}, {icon_items_FORCE_CURVE, "FORCE_CURVE"}, {icon_items_FORCE_BOID, "FORCE_BOID"}, {icon_items_FORCE_TURBULENCE, "FORCE_TURBULENCE"}, {icon_items_FORCE_DRAG, "FORCE_DRAG"}, {icon_items_FORCE_SMOKEFLOW, "FORCE_SMOKEFLOW"}, {icon_items_MODIFIER, "MODIFIER"}, {icon_items_MOD_WAVE, "MOD_WAVE"}, {icon_items_MOD_BUILD, "MOD_BUILD"}, {icon_items_MOD_DECIM, "MOD_DECIM"}, {icon_items_MOD_MIRROR, "MOD_MIRROR"}, {icon_items_MOD_SOFT, "MOD_SOFT"}, {icon_items_MOD_SUBSURF, "MOD_SUBSURF"}, {icon_items_HOOK, "HOOK"}, {icon_items_MOD_PHYSICS, "MOD_PHYSICS"}, {icon_items_MOD_PARTICLES, "MOD_PARTICLES"}, {icon_items_MOD_BOOLEAN, "MOD_BOOLEAN"}, {icon_items_MOD_EDGESPLIT, "MOD_EDGESPLIT"}, {icon_items_MOD_ARRAY, "MOD_ARRAY"}, {icon_items_MOD_UVPROJECT, "MOD_UVPROJECT"}, {icon_items_MOD_DISPLACE, "MOD_DISPLACE"}, {icon_items_MOD_CURVE, "MOD_CURVE"}, {icon_items_MOD_LATTICE, "MOD_LATTICE"}, {icon_items_CONSTRAINT_DATA, "CONSTRAINT_DATA"}, {icon_items_MOD_ARMATURE, "MOD_ARMATURE"}, {icon_items_MOD_SHRINKWRAP, "MOD_SHRINKWRAP"}, {icon_items_MOD_CAST, "MOD_CAST"}, {icon_items_MOD_MESHDEFORM, "MOD_MESHDEFORM"}, {icon_items_MOD_BEVEL, "MOD_BEVEL"}, {icon_items_MOD_SMOOTH, "MOD_SMOOTH"}, {icon_items_MOD_SIMPLEDEFORM, "MOD_SIMPLEDEFORM"}, {icon_items_MOD_MASK, "MOD_MASK"}, {icon_items_MOD_CLOTH, "MOD_CLOTH"}, {icon_items_MOD_EXPLODE, "MOD_EXPLODE"}, {icon_items_MOD_FLUIDSIM, "MOD_FLUIDSIM"}, {icon_items_MOD_MULTIRES, "MOD_MULTIRES"}, {icon_items_MOD_SMOKE, "MOD_SMOKE"}, {icon_items_MOD_SOLIDIFY, "MOD_SOLIDIFY"}, {icon_items_MOD_SCREW, "MOD_SCREW"}, {icon_items_MOD_VERTEX_WEIGHT, "MOD_VERTEX_WEIGHT"}, {icon_items_MOD_DYNAMICPAINT, "MOD_DYNAMICPAINT"}, {icon_items_MOD_REMESH, "MOD_REMESH"}, {icon_items_MOD_OCEAN, "MOD_OCEAN"}, {icon_items_MOD_WARP, "MOD_WARP"}, {icon_items_MOD_SKIN, "MOD_SKIN"}, {icon_items_MOD_TRIANGULATE, "MOD_TRIANGULATE"}, {icon_items_MOD_WIREFRAME, "MOD_WIREFRAME"}, {icon_items_MOD_DATA_TRANSFER, "MOD_DATA_TRANSFER"}, {icon_items_MOD_NORMALEDIT, "MOD_NORMALEDIT"}, {icon_items_REC, "REC"}, {icon_items_PLAY, "PLAY"}, {icon_items_FF, "FF"}, {icon_items_REW, "REW"}, {icon_items_PAUSE, "PAUSE"}, {icon_items_PREV_KEYFRAME, "PREV_KEYFRAME"}, {icon_items_NEXT_KEYFRAME, "NEXT_KEYFRAME"}, {icon_items_PLAY_AUDIO, "PLAY_AUDIO"}, {icon_items_PLAY_REVERSE, "PLAY_REVERSE"}, {icon_items_PREVIEW_RANGE, "PREVIEW_RANGE"}, {icon_items_ACTION_TWEAK, "ACTION_TWEAK"}, {icon_items_PMARKER_ACT, "PMARKER_ACT"}, {icon_items_PMARKER_SEL, "PMARKER_SEL"}, {icon_items_PMARKER, "PMARKER"}, {icon_items_MARKER_HLT, "MARKER_HLT"}, {icon_items_MARKER, "MARKER"}, {icon_items_SPACE2, "SPACE2"}, {icon_items_SPACE3, "SPACE3"}, {icon_items_KEYINGSET, "KEYINGSET"}, {icon_items_KEY_DEHLT, "KEY_DEHLT"}, {icon_items_KEY_HLT, "KEY_HLT"}, {icon_items_MUTE_IPO_OFF, "MUTE_IPO_OFF"}, {icon_items_MUTE_IPO_ON, "MUTE_IPO_ON"}, {icon_items_VISIBLE_IPO_OFF, "VISIBLE_IPO_OFF"}, {icon_items_VISIBLE_IPO_ON, "VISIBLE_IPO_ON"}, {icon_items_DRIVER, "DRIVER"}, {icon_items_SOLO_OFF, "SOLO_OFF"}, {icon_items_SOLO_ON, "SOLO_ON"}, {icon_items_FRAME_PREV, "FRAME_PREV"}, {icon_items_FRAME_NEXT, "FRAME_NEXT"}, {icon_items_NLA_PUSHDOWN, "NLA_PUSHDOWN"}, {icon_items_IPO_CONSTANT, "IPO_CONSTANT"}, {icon_items_IPO_LINEAR, "IPO_LINEAR"}, {icon_items_IPO_BEZIER, "IPO_BEZIER"}, {icon_items_IPO_SINE, "IPO_SINE"}, {icon_items_IPO_QUAD, "IPO_QUAD"}, {icon_items_IPO_CUBIC, "IPO_CUBIC"}, {icon_items_IPO_QUART, "IPO_QUART"}, {icon_items_IPO_QUINT, "IPO_QUINT"}, {icon_items_IPO_EXPO, "IPO_EXPO"}, {icon_items_IPO_CIRC, "IPO_CIRC"}, {icon_items_IPO_BOUNCE, "IPO_BOUNCE"}, {icon_items_IPO_ELASTIC, "IPO_ELASTIC"}, {icon_items_IPO_BACK, "IPO_BACK"}, {icon_items_IPO_EASE_IN, "IPO_EASE_IN"}, {icon_items_IPO_EASE_OUT, "IPO_EASE_OUT"}, {icon_items_IPO_EASE_IN_OUT, "IPO_EASE_IN_OUT"}, {icon_items_VERTEXSEL, "VERTEXSEL"}, {icon_items_EDGESEL, "EDGESEL"}, {icon_items_FACESEL, "FACESEL"}, {icon_items_LOOPSEL, "LOOPSEL"}, {icon_items_ROTATE, "ROTATE"}, {icon_items_CURSOR, "CURSOR"}, {icon_items_ROTATECOLLECTION, "ROTATECOLLECTION"}, {icon_items_ROTATECENTER, "ROTATECENTER"}, {icon_items_ROTACTIVE, "ROTACTIVE"}, {icon_items_ALIGN, "ALIGN"}, {icon_items_SMOOTHCURVE, "SMOOTHCURVE"}, {icon_items_SPHERECURVE, "SPHERECURVE"}, {icon_items_ROOTCURVE, "ROOTCURVE"}, {icon_items_SHARPCURVE, "SHARPCURVE"}, {icon_items_LINCURVE, "LINCURVE"}, {icon_items_NOCURVE, "NOCURVE"}, {icon_items_RNDCURVE, "RNDCURVE"}, {icon_items_PROP_OFF, "PROP_OFF"}, {icon_items_PROP_ON, "PROP_ON"}, {icon_items_PROP_CON, "PROP_CON"}, {icon_items_SCULPT_DYNTOPO, "SCULPT_DYNTOPO"}, {icon_items_PARTICLE_POINT, "PARTICLE_POINT"}, {icon_items_PARTICLE_TIP, "PARTICLE_TIP"}, {icon_items_PARTICLE_PATH, "PARTICLE_PATH"}, {icon_items_MAN_TRANS, "MAN_TRANS"}, {icon_items_MAN_ROT, "MAN_ROT"}, {icon_items_MAN_SCALE, "MAN_SCALE"}, {icon_items_MANIPUL, "MANIPUL"}, {icon_items_SNAP_OFF, "SNAP_OFF"}, {icon_items_SNAP_ON, "SNAP_ON"}, {icon_items_SNAP_NORMAL, "SNAP_NORMAL"}, {icon_items_SNAP_INCREMENT, "SNAP_INCREMENT"}, {icon_items_SNAP_VERTEX, "SNAP_VERTEX"}, {icon_items_SNAP_EDGE, "SNAP_EDGE"}, {icon_items_SNAP_FACE, "SNAP_FACE"}, {icon_items_SNAP_VOLUME, "SNAP_VOLUME"}, {icon_items_STICKY_UVS_LOC, "STICKY_UVS_LOC"}, {icon_items_STICKY_UVS_DISABLE, "STICKY_UVS_DISABLE"}, {icon_items_STICKY_UVS_VERT, "STICKY_UVS_VERT"}, {icon_items_CLIPUV_DEHLT, "CLIPUV_DEHLT"}, {icon_items_CLIPUV_HLT, "CLIPUV_HLT"}, {icon_items_SNAP_PEEL_OBJECT, "SNAP_PEEL_OBJECT"}, {icon_items_GRID, "GRID"}, {icon_items_PASTEDOWN, "PASTEDOWN"}, {icon_items_COPYDOWN, "COPYDOWN"}, {icon_items_PASTEFLIPUP, "PASTEFLIPUP"}, {icon_items_PASTEFLIPDOWN, "PASTEFLIPDOWN"}, {icon_items_SNAP_SURFACE, "SNAP_SURFACE"}, {icon_items_AUTOMERGE_ON, "AUTOMERGE_ON"}, {icon_items_AUTOMERGE_OFF, "AUTOMERGE_OFF"}, {icon_items_RETOPO, "RETOPO"}, {icon_items_UV_VERTEXSEL, "UV_VERTEXSEL"}, {icon_items_UV_EDGESEL, "UV_EDGESEL"}, {icon_items_UV_FACESEL, "UV_FACESEL"}, {icon_items_UV_ISLANDSEL, "UV_ISLANDSEL"}, {icon_items_UV_SYNC_SELECT, "UV_SYNC_SELECT"}, {icon_items_BBOX, "BBOX"}, {icon_items_WIRE, "WIRE"}, {icon_items_SOLID, "SOLID"}, {icon_items_SMOOTH, "SMOOTH"}, {icon_items_POTATO, "POTATO"}, {icon_items_ORTHO, "ORTHO"}, {icon_items_LOCKVIEW_OFF, "LOCKVIEW_OFF"}, {icon_items_LOCKVIEW_ON, "LOCKVIEW_ON"}, {icon_items_AXIS_SIDE, "AXIS_SIDE"}, {icon_items_AXIS_FRONT, "AXIS_FRONT"}, {icon_items_AXIS_TOP, "AXIS_TOP"}, {icon_items_NDOF_DOM, "NDOF_DOM"}, {icon_items_NDOF_TURN, "NDOF_TURN"}, {icon_items_NDOF_FLY, "NDOF_FLY"}, {icon_items_NDOF_TRANS, "NDOF_TRANS"}, {icon_items_LAYER_USED, "LAYER_USED"}, {icon_items_LAYER_ACTIVE, "LAYER_ACTIVE"}, {icon_items_SORTALPHA, "SORTALPHA"}, {icon_items_SORTBYEXT, "SORTBYEXT"}, {icon_items_SORTTIME, "SORTTIME"}, {icon_items_SORTSIZE, "SORTSIZE"}, {icon_items_LONGDISPLAY, "LONGDISPLAY"}, {icon_items_SHORTDISPLAY, "SHORTDISPLAY"}, {icon_items_GHOST, "GHOST"}, {icon_items_IMGDISPLAY, "IMGDISPLAY"}, {icon_items_SAVE_AS, "SAVE_AS"}, {icon_items_SAVE_COPY, "SAVE_COPY"}, {icon_items_BOOKMARKS, "BOOKMARKS"}, {icon_items_FONTPREVIEW, "FONTPREVIEW"}, {icon_items_FILTER, "FILTER"}, {icon_items_NEWFOLDER, "NEWFOLDER"}, {icon_items_OPEN_RECENT, "OPEN_RECENT"}, {icon_items_FILE_PARENT, "FILE_PARENT"}, {icon_items_FILE_REFRESH, "FILE_REFRESH"}, {icon_items_FILE_FOLDER, "FILE_FOLDER"}, {icon_items_FILE_BLANK, "FILE_BLANK"}, {icon_items_FILE_BLEND, "FILE_BLEND"}, {icon_items_FILE_IMAGE, "FILE_IMAGE"}, {icon_items_FILE_MOVIE, "FILE_MOVIE"}, {icon_items_FILE_SCRIPT, "FILE_SCRIPT"}, {icon_items_FILE_SOUND, "FILE_SOUND"}, {icon_items_FILE_FONT, "FILE_FONT"}, {icon_items_FILE_TEXT, "FILE_TEXT"}, {icon_items_RECOVER_AUTO, "RECOVER_AUTO"}, {icon_items_SAVE_PREFS, "SAVE_PREFS"}, {icon_items_LINK_BLEND, "LINK_BLEND"}, {icon_items_APPEND_BLEND, "APPEND_BLEND"}, {icon_items_IMPORT, "IMPORT"}, {icon_items_EXPORT, "EXPORT"}, {icon_items_EXTERNAL_DATA, "EXTERNAL_DATA"}, {icon_items_LOAD_FACTORY, "LOAD_FACTORY"}, {icon_items_LOOP_BACK, "LOOP_BACK"}, {icon_items_LOOP_FORWARDS, "LOOP_FORWARDS"}, {icon_items_BACK, "BACK"}, {icon_items_FORWARD, "FORWARD"}, {icon_items_FILE_HIDDEN, "FILE_HIDDEN"}, {icon_items_FILE_BACKUP, "FILE_BACKUP"}, {icon_items_DISK_DRIVE, "DISK_DRIVE"}, {icon_items_MATPLANE, "MATPLANE"}, {icon_items_MATSPHERE, "MATSPHERE"}, {icon_items_MATCUBE, "MATCUBE"}, {icon_items_MONKEY, "MONKEY"}, {icon_items_HAIR, "HAIR"}, {icon_items_ALIASED, "ALIASED"}, {icon_items_ANTIALIASED, "ANTIALIASED"}, {icon_items_MAT_SPHERE_SKY, "MAT_SPHERE_SKY"}, {icon_items_WORDWRAP_OFF, "WORDWRAP_OFF"}, {icon_items_WORDWRAP_ON, "WORDWRAP_ON"}, {icon_items_SYNTAX_OFF, "SYNTAX_OFF"}, {icon_items_SYNTAX_ON, "SYNTAX_ON"}, {icon_items_LINENUMBERS_OFF, "LINENUMBERS_OFF"}, {icon_items_LINENUMBERS_ON, "LINENUMBERS_ON"}, {icon_items_SCRIPTPLUGINS, "SCRIPTPLUGINS"}, {icon_items_SEQ_SEQUENCER, "SEQ_SEQUENCER"}, {icon_items_SEQ_PREVIEW, "SEQ_PREVIEW"}, {icon_items_SEQ_LUMA_WAVEFORM, "SEQ_LUMA_WAVEFORM"}, {icon_items_SEQ_CHROMA_SCOPE, "SEQ_CHROMA_SCOPE"}, {icon_items_SEQ_HISTOGRAM, "SEQ_HISTOGRAM"}, {icon_items_SEQ_SPLITVIEW, "SEQ_SPLITVIEW"}, {icon_items_IMAGE_RGB, "IMAGE_RGB"}, {icon_items_IMAGE_RGB_ALPHA, "IMAGE_RGB_ALPHA"}, {icon_items_IMAGE_ALPHA, "IMAGE_ALPHA"}, {icon_items_IMAGE_ZDEPTH, "IMAGE_ZDEPTH"}, {icon_items_IMAGEFILE, "IMAGEFILE"}, {icon_items_BRUSH_ADD, "BRUSH_ADD"}, {icon_items_BRUSH_BLOB, "BRUSH_BLOB"}, {icon_items_BRUSH_BLUR, "BRUSH_BLUR"}, {icon_items_BRUSH_CLAY, "BRUSH_CLAY"}, {icon_items_BRUSH_CLAY_STRIPS, "BRUSH_CLAY_STRIPS"}, {icon_items_BRUSH_CLONE, "BRUSH_CLONE"}, {icon_items_BRUSH_CREASE, "BRUSH_CREASE"}, {icon_items_BRUSH_DARKEN, "BRUSH_DARKEN"}, {icon_items_BRUSH_FILL, "BRUSH_FILL"}, {icon_items_BRUSH_FLATTEN, "BRUSH_FLATTEN"}, {icon_items_BRUSH_GRAB, "BRUSH_GRAB"}, {icon_items_BRUSH_INFLATE, "BRUSH_INFLATE"}, {icon_items_BRUSH_LAYER, "BRUSH_LAYER"}, {icon_items_BRUSH_LIGHTEN, "BRUSH_LIGHTEN"}, {icon_items_BRUSH_MASK, "BRUSH_MASK"}, {icon_items_BRUSH_MIX, "BRUSH_MIX"}, {icon_items_BRUSH_MULTIPLY, "BRUSH_MULTIPLY"}, {icon_items_BRUSH_NUDGE, "BRUSH_NUDGE"}, {icon_items_BRUSH_PINCH, "BRUSH_PINCH"}, {icon_items_BRUSH_SCRAPE, "BRUSH_SCRAPE"}, {icon_items_BRUSH_SCULPT_DRAW, "BRUSH_SCULPT_DRAW"}, {icon_items_BRUSH_SMEAR, "BRUSH_SMEAR"}, {icon_items_BRUSH_SMOOTH, "BRUSH_SMOOTH"}, {icon_items_BRUSH_SNAKE_HOOK, "BRUSH_SNAKE_HOOK"}, {icon_items_BRUSH_SOFTEN, "BRUSH_SOFTEN"}, {icon_items_BRUSH_SUBTRACT, "BRUSH_SUBTRACT"}, {icon_items_BRUSH_TEXDRAW, "BRUSH_TEXDRAW"}, {icon_items_BRUSH_TEXFILL, "BRUSH_TEXFILL"}, {icon_items_BRUSH_TEXMASK, "BRUSH_TEXMASK"}, {icon_items_BRUSH_THUMB, "BRUSH_THUMB"}, {icon_items_BRUSH_ROTATE, "BRUSH_ROTATE"}, {icon_items_BRUSH_VERTEXDRAW, "BRUSH_VERTEXDRAW"}, {icon_items_MATCAP_01, "MATCAP_01"}, {icon_items_MATCAP_02, "MATCAP_02"}, {icon_items_MATCAP_03, "MATCAP_03"}, {icon_items_MATCAP_04, "MATCAP_04"}, {icon_items_MATCAP_05, "MATCAP_05"}, {icon_items_MATCAP_06, "MATCAP_06"}, {icon_items_MATCAP_07, "MATCAP_07"}, {icon_items_MATCAP_08, "MATCAP_08"}, {icon_items_MATCAP_09, "MATCAP_09"}, {icon_items_MATCAP_10, "MATCAP_10"}, {icon_items_MATCAP_11, "MATCAP_11"}, {icon_items_MATCAP_12, "MATCAP_12"}, {icon_items_MATCAP_13, "MATCAP_13"}, {icon_items_MATCAP_14, "MATCAP_14"}, {icon_items_MATCAP_15, "MATCAP_15"}, {icon_items_MATCAP_16, "MATCAP_16"}, {icon_items_MATCAP_17, "MATCAP_17"}, {icon_items_MATCAP_18, "MATCAP_18"}, {icon_items_MATCAP_19, "MATCAP_19"}, {icon_items_MATCAP_20, "MATCAP_20"}, {icon_items_MATCAP_21, "MATCAP_21"}, {icon_items_MATCAP_22, "MATCAP_22"}, {icon_items_MATCAP_23, "MATCAP_23"}, {icon_items_MATCAP_24, "MATCAP_24"}, {icon_items_VIEW3D_VEC, "VIEW3D_VEC"}, {icon_items_EDIT_VEC, "EDIT_VEC"}, {icon_items_EDITMODE_VEC_DEHLT, "EDITMODE_VEC_DEHLT"}, {icon_items_EDITMODE_VEC_HLT, "EDITMODE_VEC_HLT"}, {icon_items_DISCLOSURE_TRI_RIGHT_VEC, "DISCLOSURE_TRI_RIGHT_VEC"}, {icon_items_DISCLOSURE_TRI_DOWN_VEC, "DISCLOSURE_TRI_DOWN_VEC"}, {icon_items_MOVE_UP_VEC, "MOVE_UP_VEC"}, {icon_items_MOVE_DOWN_VEC, "MOVE_DOWN_VEC"}, {icon_items_X_VEC, "X_VEC"}, {icon_items_SMALL_TRI_RIGHT_VEC, "SMALL_TRI_RIGHT_VEC"}};
	};

	const std::map<std::string, int> string_to_icon_items = create_string_to_icon_items();
	const std::map<int, std::string> icon_items_to_string = create_icon_items_to_string();

	icon_items_enum icon() {
		STRING_TYPE_GETTER("icon", static_cast<icon_items_enum>(string_to_icon_items.at(resstr)))
	}

	void icon(icon_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "icon", icon_items_to_string.at(value))
	}

	bool is_readonly() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_readonly")
	}

	void is_readonly(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_readonly", value)
	}

	bool is_animatable() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_animatable")
	}

	void is_animatable(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_animatable", value)
	}

	bool is_required() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_required")
	}

	void is_required(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_required", value)
	}

	bool is_argument_optional() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_argument_optional")
	}

	void is_argument_optional(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_argument_optional", value)
	}

	bool is_never_none() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_never_none")
	}

	void is_never_none(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_never_none", value)
	}

	bool is_hidden() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_hidden")
	}

	void is_hidden(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_hidden", value)
	}

	bool is_skip_save() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_skip_save")
	}

	void is_skip_save(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_skip_save", value)
	}

	bool is_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_output")
	}

	void is_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_output", value)
	}

	bool is_registered() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_registered")
	}

	void is_registered(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_registered", value)
	}

	bool is_registered_optional() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_registered_optional")
	}

	void is_registered_optional(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_registered_optional", value)
	}

	bool is_runtime() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_runtime")
	}

	void is_runtime(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_runtime", value)
	}

	bool is_enum_flag() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_enum_flag")
	}

	void is_enum_flag(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_enum_flag", value)
	}

	bool is_library_editable() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_library_editable")
	}

	void is_library_editable(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_library_editable", value)
	}
};

class BoolProperty : public Property {
public:
	BoolProperty(PyObject* pyobj) : Property(pyobj) {}
	BoolProperty() : Property(0) { }

	bool default_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "default")
	}

	void default_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "default", value)
	}

	std::array<bool, 3> default_array() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "default_array", 3)
	}

	void default_array(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "default_array", 3)
	}

	int array_length() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "array_length")
	}

	void array_length(int value) {
		PRIMITIVE_TYPES_SETTER("i", "array_length", value)
	}
};

class IntProperty : public Property {
public:
	IntProperty(PyObject* pyobj) : Property(pyobj) {}
	IntProperty() : Property(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default", value)
	}

	std::array<int, 3> default_array() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "default_array", 3)
	}

	void default_array(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "default_array", 3)
	}

	int array_length() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "array_length")
	}

	void array_length(int value) {
		PRIMITIVE_TYPES_SETTER("i", "array_length", value)
	}

	int hard_min() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "hard_min")
	}

	void hard_min(int value) {
		PRIMITIVE_TYPES_SETTER("i", "hard_min", value)
	}

	int hard_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "hard_max")
	}

	void hard_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "hard_max", value)
	}

	int soft_min() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "soft_min")
	}

	void soft_min(int value) {
		PRIMITIVE_TYPES_SETTER("i", "soft_min", value)
	}

	int soft_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "soft_max")
	}

	void soft_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "soft_max", value)
	}

	int step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "step")
	}

	void step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "step", value)
	}
};

class FloatProperty : public Property {
public:
	FloatProperty(PyObject* pyobj) : Property(pyobj) {}
	FloatProperty() : Property(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default", value)
	}

	VFLOAT3 default_array() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_array", 3)
	}

	void default_array(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_array", 3)
	}

	int array_length() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "array_length")
	}

	void array_length(int value) {
		PRIMITIVE_TYPES_SETTER("i", "array_length", value)
	}

	float hard_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "hard_min")
	}

	void hard_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "hard_min", value)
	}

	float hard_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "hard_max")
	}

	void hard_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "hard_max", value)
	}

	float soft_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "soft_min")
	}

	void soft_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "soft_min", value)
	}

	float soft_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "soft_max")
	}

	void soft_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "soft_max", value)
	}

	float step() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "step")
	}

	void step(float value) {
		PRIMITIVE_TYPES_SETTER("f", "step", value)
	}

	int precision() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "precision")
	}

	void precision(int value) {
		PRIMITIVE_TYPES_SETTER("i", "precision", value)
	}
};

class StringProperty : public Property {
public:
	StringProperty(PyObject* pyobj) : Property(pyobj) {}
	StringProperty() : Property(0) { }

	std::string default_value() {
		STRING_TYPE_GETTER("default", resstr)
	}

	void default_value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "default", value)
	}

	int length_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "length_max")
	}

	void length_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "length_max", value)
	}
};

class EnumProperty : public Property {
public:
	EnumProperty(PyObject* pyobj) : Property(pyobj) {}
	EnumProperty() : Property(0) { }

	enum default_dummy_items_enum {
		default_dummy_items_DUMMY = 0	
	};

	std::map<std::string, int> create_string_to_default_dummy_items() {
		return {{"DUMMY", default_dummy_items_DUMMY}};
	};

	std::map<int, std::string> create_default_dummy_items_to_string() {
		return {{default_dummy_items_DUMMY, "DUMMY"}};
	};

	const std::map<std::string, int> string_to_default_dummy_items = create_string_to_default_dummy_items();
	const std::map<int, std::string> default_dummy_items_to_string = create_default_dummy_items_to_string();

	default_dummy_items_enum default_value() {
		STRING_TYPE_GETTER("default_value", static_cast<default_dummy_items_enum>(string_to_default_dummy_items.at(resstr)))
	}

	void default_value(default_dummy_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "default", default_dummy_items_to_string.at(value))
	}

	default_dummy_items_enum default_flag() {
		STRING_TYPE_GETTER("default_flag", static_cast<default_dummy_items_enum>(string_to_default_dummy_items.at(resstr)))
	}

	void default_flag(default_dummy_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "default_flag", default_dummy_items_to_string.at(value))
	}

	std::map<std::string, EnumPropertyItem> enum_items();
};

class EnumPropertyItem : public pyUniplug {
public:
	EnumPropertyItem(PyObject* pyobj) : pyUniplug(pyobj) {}
	EnumPropertyItem() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string description() {
		STRING_TYPE_GETTER("description", resstr)
	}

	void description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "description", value)
	}

	std::string identifier() {
		STRING_TYPE_GETTER("identifier", resstr)
	}

	void identifier(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "identifier", value)
	}

	int value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "value")
	}

	void value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "value", value)
	}

	enum icon_items_enum {
		icon_items_NONE = 0,	
		icon_items_QUESTION = 1,	
		icon_items_ERROR = 2,	
		icon_items_CANCEL = 3,	
		icon_items_TRIA_RIGHT = 4,	
		icon_items_TRIA_DOWN = 5,	
		icon_items_TRIA_LEFT = 6,	
		icon_items_TRIA_UP = 7,	
		icon_items_ARROW_LEFTRIGHT = 8,	
		icon_items_PLUS = 9,	
		icon_items_DISCLOSURE_TRI_DOWN = 10,	
		icon_items_DISCLOSURE_TRI_RIGHT = 11,	
		icon_items_RADIOBUT_OFF = 12,	
		icon_items_RADIOBUT_ON = 13,	
		icon_items_MENU_PANEL = 14,	
		icon_items_BLENDER = 15,	
		icon_items_GRIP = 16,	
		icon_items_DOT = 17,	
		icon_items_COLLAPSEMENU = 18,	
		icon_items_X = 19,	
		icon_items_GO_LEFT = 21,	
		icon_items_PLUG = 22,	
		icon_items_UI = 23,	
		icon_items_NODE = 24,	
		icon_items_NODE_SEL = 25,	
		icon_items_FULLSCREEN = 26,	
		icon_items_SPLITSCREEN = 27,	
		icon_items_RIGHTARROW_THIN = 28,	
		icon_items_BORDERMOVE = 29,	
		icon_items_VIEWZOOM = 30,	
		icon_items_ZOOMIN = 31,	
		icon_items_ZOOMOUT = 32,	
		icon_items_PANEL_CLOSE = 33,	
		icon_items_COPY_ID = 34,	
		icon_items_EYEDROPPER = 35,	
		icon_items_LINK_AREA = 36,	
		icon_items_AUTO = 37,	
		icon_items_CHECKBOX_DEHLT = 38,	
		icon_items_CHECKBOX_HLT = 39,	
		icon_items_UNLOCKED = 40,	
		icon_items_LOCKED = 41,	
		icon_items_UNPINNED = 42,	
		icon_items_PINNED = 43,	
		icon_items_SCREEN_BACK = 44,	
		icon_items_RIGHTARROW = 45,	
		icon_items_DOWNARROW_HLT = 46,	
		icon_items_DOTSUP = 47,	
		icon_items_DOTSDOWN = 48,	
		icon_items_LINK = 49,	
		icon_items_INLINK = 50,	
		icon_items_PLUGIN = 51,	
		icon_items_HELP = 52,	
		icon_items_GHOST_ENABLED = 53,	
		icon_items_COLOR = 54,	
		icon_items_LINKED = 55,	
		icon_items_UNLINKED = 56,	
		icon_items_HAND = 57,	
		icon_items_ZOOM_ALL = 58,	
		icon_items_ZOOM_SELECTED = 59,	
		icon_items_ZOOM_PREVIOUS = 60,	
		icon_items_ZOOM_IN = 61,	
		icon_items_ZOOM_OUT = 62,	
		icon_items_RENDER_REGION = 63,	
		icon_items_BORDER_RECT = 64,	
		icon_items_BORDER_LASSO = 65,	
		icon_items_FREEZE = 66,	
		icon_items_STYLUS_PRESSURE = 67,	
		icon_items_GHOST_DISABLED = 68,	
		icon_items_NEW = 69,	
		icon_items_FILE_TICK = 70,	
		icon_items_QUIT = 71,	
		icon_items_URL = 72,	
		icon_items_RECOVER_LAST = 73,	
		icon_items_FULLSCREEN_ENTER = 75,	
		icon_items_FULLSCREEN_EXIT = 76,	
		icon_items_BLANK1 = 77,	
		icon_items_LAMP = 78,	
		icon_items_MATERIAL = 79,	
		icon_items_TEXTURE = 80,	
		icon_items_ANIM = 81,	
		icon_items_WORLD = 82,	
		icon_items_SCENE = 83,	
		icon_items_EDIT = 84,	
		icon_items_GAME = 85,	
		icon_items_RADIO = 86,	
		icon_items_SCRIPT = 87,	
		icon_items_PARTICLES = 88,	
		icon_items_PHYSICS = 89,	
		icon_items_SPEAKER = 90,	
		icon_items_TEXTURE_SHADED = 91,	
		icon_items_VIEW3D = 104,	
		icon_items_IPO = 105,	
		icon_items_OOPS = 106,	
		icon_items_BUTS = 107,	
		icon_items_FILESEL = 108,	
		icon_items_IMAGE_COL = 109,	
		icon_items_INFO = 110,	
		icon_items_SEQUENCE = 111,	
		icon_items_TEXT = 112,	
		icon_items_IMASEL = 113,	
		icon_items_SOUND = 114,	
		icon_items_ACTION = 115,	
		icon_items_NLA = 116,	
		icon_items_SCRIPTWIN = 117,	
		icon_items_TIME = 118,	
		icon_items_NODETREE = 119,	
		icon_items_LOGIC = 120,	
		icon_items_CONSOLE = 121,	
		icon_items_PREFERENCES = 122,	
		icon_items_CLIP = 123,	
		icon_items_ASSET_MANAGER = 124,	
		icon_items_OBJECT_DATAMODE = 130,	
		icon_items_EDITMODE_HLT = 131,	
		icon_items_FACESEL_HLT = 132,	
		icon_items_VPAINT_HLT = 133,	
		icon_items_TPAINT_HLT = 134,	
		icon_items_WPAINT_HLT = 135,	
		icon_items_SCULPTMODE_HLT = 136,	
		icon_items_POSE_HLT = 137,	
		icon_items_PARTICLEMODE = 138,	
		icon_items_LIGHTPAINT = 139,	
		icon_items_SCENE_DATA = 156,	
		icon_items_RENDERLAYERS = 157,	
		icon_items_WORLD_DATA = 158,	
		icon_items_OBJECT_DATA = 159,	
		icon_items_MESH_DATA = 160,	
		icon_items_CURVE_DATA = 161,	
		icon_items_META_DATA = 162,	
		icon_items_LATTICE_DATA = 163,	
		icon_items_LAMP_DATA = 164,	
		icon_items_MATERIAL_DATA = 165,	
		icon_items_TEXTURE_DATA = 166,	
		icon_items_ANIM_DATA = 167,	
		icon_items_CAMERA_DATA = 168,	
		icon_items_PARTICLE_DATA = 169,	
		icon_items_LIBRARY_DATA_DIRECT = 170,	
		icon_items_GROUP = 171,	
		icon_items_ARMATURE_DATA = 172,	
		icon_items_POSE_DATA = 173,	
		icon_items_BONE_DATA = 174,	
		icon_items_CONSTRAINT = 175,	
		icon_items_SHAPEKEY_DATA = 176,	
		icon_items_CONSTRAINT_BONE = 177,	
		icon_items_CAMERA_STEREO = 178,	
		icon_items_PACKAGE = 179,	
		icon_items_UGLYPACKAGE = 180,	
		icon_items_BRUSH_DATA = 182,	
		icon_items_IMAGE_DATA = 183,	
		icon_items_FILE = 184,	
		icon_items_FCURVE = 185,	
		icon_items_FONT_DATA = 186,	
		icon_items_RENDER_RESULT = 187,	
		icon_items_SURFACE_DATA = 188,	
		icon_items_EMPTY_DATA = 189,	
		icon_items_SETTINGS = 190,	
		icon_items_RENDER_ANIMATION = 191,	
		icon_items_RENDER_STILL = 192,	
		icon_items_LIBRARY_DATA_BROKEN = 193,	
		icon_items_BOIDS = 194,	
		icon_items_STRANDS = 195,	
		icon_items_LIBRARY_DATA_INDIRECT = 196,	
		icon_items_GREASEPENCIL = 197,	
		icon_items_LINE_DATA = 198,	
		icon_items_GROUP_BONE = 200,	
		icon_items_GROUP_VERTEX = 201,	
		icon_items_GROUP_VCOL = 202,	
		icon_items_GROUP_UVS = 203,	
		icon_items_RNA = 206,	
		icon_items_RNA_ADD = 207,	
		icon_items_OUTLINER_OB_EMPTY = 234,	
		icon_items_OUTLINER_OB_MESH = 235,	
		icon_items_OUTLINER_OB_CURVE = 236,	
		icon_items_OUTLINER_OB_LATTICE = 237,	
		icon_items_OUTLINER_OB_META = 238,	
		icon_items_OUTLINER_OB_LAMP = 239,	
		icon_items_OUTLINER_OB_CAMERA = 240,	
		icon_items_OUTLINER_OB_ARMATURE = 241,	
		icon_items_OUTLINER_OB_FONT = 242,	
		icon_items_OUTLINER_OB_SURFACE = 243,	
		icon_items_OUTLINER_OB_SPEAKER = 244,	
		icon_items_RESTRICT_VIEW_OFF = 253,	
		icon_items_RESTRICT_VIEW_ON = 254,	
		icon_items_RESTRICT_SELECT_OFF = 255,	
		icon_items_RESTRICT_SELECT_ON = 256,	
		icon_items_RESTRICT_RENDER_OFF = 257,	
		icon_items_RESTRICT_RENDER_ON = 258,	
		icon_items_OUTLINER_DATA_EMPTY = 260,	
		icon_items_OUTLINER_DATA_MESH = 261,	
		icon_items_OUTLINER_DATA_CURVE = 262,	
		icon_items_OUTLINER_DATA_LATTICE = 263,	
		icon_items_OUTLINER_DATA_META = 264,	
		icon_items_OUTLINER_DATA_LAMP = 265,	
		icon_items_OUTLINER_DATA_CAMERA = 266,	
		icon_items_OUTLINER_DATA_ARMATURE = 267,	
		icon_items_OUTLINER_DATA_FONT = 268,	
		icon_items_OUTLINER_DATA_SURFACE = 269,	
		icon_items_OUTLINER_DATA_SPEAKER = 270,	
		icon_items_OUTLINER_DATA_POSE = 271,	
		icon_items_MESH_PLANE = 286,	
		icon_items_MESH_CUBE = 287,	
		icon_items_MESH_CIRCLE = 288,	
		icon_items_MESH_UVSPHERE = 289,	
		icon_items_MESH_ICOSPHERE = 290,	
		icon_items_MESH_GRID = 291,	
		icon_items_MESH_MONKEY = 292,	
		icon_items_MESH_CYLINDER = 293,	
		icon_items_MESH_TORUS = 294,	
		icon_items_MESH_CONE = 295,	
		icon_items_LAMP_POINT = 298,	
		icon_items_LAMP_SUN = 299,	
		icon_items_LAMP_SPOT = 300,	
		icon_items_LAMP_HEMI = 301,	
		icon_items_LAMP_AREA = 302,	
		icon_items_META_EMPTY = 305,	
		icon_items_META_PLANE = 306,	
		icon_items_META_CUBE = 307,	
		icon_items_META_BALL = 308,	
		icon_items_META_ELLIPSOID = 309,	
		icon_items_META_CAPSULE = 310,	
		icon_items_SURFACE_NCURVE = 312,	
		icon_items_SURFACE_NCIRCLE = 313,	
		icon_items_SURFACE_NSURFACE = 314,	
		icon_items_SURFACE_NCYLINDER = 315,	
		icon_items_SURFACE_NSPHERE = 316,	
		icon_items_SURFACE_NTORUS = 317,	
		icon_items_CURVE_BEZCURVE = 321,	
		icon_items_CURVE_BEZCIRCLE = 322,	
		icon_items_CURVE_NCURVE = 323,	
		icon_items_CURVE_NCIRCLE = 324,	
		icon_items_CURVE_PATH = 325,	
		icon_items_COLOR_RED = 331,	
		icon_items_COLOR_GREEN = 332,	
		icon_items_COLOR_BLUE = 333,	
		icon_items_TRIA_RIGHT_BAR = 334,	
		icon_items_TRIA_DOWN_BAR = 335,	
		icon_items_TRIA_LEFT_BAR = 336,	
		icon_items_TRIA_UP_BAR = 337,	
		icon_items_FORCE_FORCE = 338,	
		icon_items_FORCE_WIND = 339,	
		icon_items_FORCE_VORTEX = 340,	
		icon_items_FORCE_MAGNETIC = 341,	
		icon_items_FORCE_HARMONIC = 342,	
		icon_items_FORCE_CHARGE = 343,	
		icon_items_FORCE_LENNARDJONES = 344,	
		icon_items_FORCE_TEXTURE = 345,	
		icon_items_FORCE_CURVE = 346,	
		icon_items_FORCE_BOID = 347,	
		icon_items_FORCE_TURBULENCE = 348,	
		icon_items_FORCE_DRAG = 349,	
		icon_items_FORCE_SMOKEFLOW = 350,	
		icon_items_MODIFIER = 442,	
		icon_items_MOD_WAVE = 443,	
		icon_items_MOD_BUILD = 444,	
		icon_items_MOD_DECIM = 445,	
		icon_items_MOD_MIRROR = 446,	
		icon_items_MOD_SOFT = 447,	
		icon_items_MOD_SUBSURF = 448,	
		icon_items_HOOK = 449,	
		icon_items_MOD_PHYSICS = 450,	
		icon_items_MOD_PARTICLES = 451,	
		icon_items_MOD_BOOLEAN = 452,	
		icon_items_MOD_EDGESPLIT = 453,	
		icon_items_MOD_ARRAY = 454,	
		icon_items_MOD_UVPROJECT = 455,	
		icon_items_MOD_DISPLACE = 456,	
		icon_items_MOD_CURVE = 457,	
		icon_items_MOD_LATTICE = 458,	
		icon_items_CONSTRAINT_DATA = 459,	
		icon_items_MOD_ARMATURE = 460,	
		icon_items_MOD_SHRINKWRAP = 461,	
		icon_items_MOD_CAST = 462,	
		icon_items_MOD_MESHDEFORM = 463,	
		icon_items_MOD_BEVEL = 464,	
		icon_items_MOD_SMOOTH = 465,	
		icon_items_MOD_SIMPLEDEFORM = 466,	
		icon_items_MOD_MASK = 467,	
		icon_items_MOD_CLOTH = 468,	
		icon_items_MOD_EXPLODE = 469,	
		icon_items_MOD_FLUIDSIM = 470,	
		icon_items_MOD_MULTIRES = 471,	
		icon_items_MOD_SMOKE = 472,	
		icon_items_MOD_SOLIDIFY = 473,	
		icon_items_MOD_SCREW = 474,	
		icon_items_MOD_VERTEX_WEIGHT = 475,	
		icon_items_MOD_DYNAMICPAINT = 476,	
		icon_items_MOD_REMESH = 477,	
		icon_items_MOD_OCEAN = 478,	
		icon_items_MOD_WARP = 479,	
		icon_items_MOD_SKIN = 480,	
		icon_items_MOD_TRIANGULATE = 481,	
		icon_items_MOD_WIREFRAME = 482,	
		icon_items_MOD_DATA_TRANSFER = 483,	
		icon_items_MOD_NORMALEDIT = 484,	
		icon_items_REC = 494,	
		icon_items_PLAY = 495,	
		icon_items_FF = 496,	
		icon_items_REW = 497,	
		icon_items_PAUSE = 498,	
		icon_items_PREV_KEYFRAME = 499,	
		icon_items_NEXT_KEYFRAME = 500,	
		icon_items_PLAY_AUDIO = 501,	
		icon_items_PLAY_REVERSE = 502,	
		icon_items_PREVIEW_RANGE = 503,	
		icon_items_ACTION_TWEAK = 504,	
		icon_items_PMARKER_ACT = 505,	
		icon_items_PMARKER_SEL = 506,	
		icon_items_PMARKER = 507,	
		icon_items_MARKER_HLT = 508,	
		icon_items_MARKER = 509,	
		icon_items_SPACE2 = 510,	
		icon_items_SPACE3 = 511,	
		icon_items_KEYINGSET = 512,	
		icon_items_KEY_DEHLT = 513,	
		icon_items_KEY_HLT = 514,	
		icon_items_MUTE_IPO_OFF = 515,	
		icon_items_MUTE_IPO_ON = 516,	
		icon_items_VISIBLE_IPO_OFF = 517,	
		icon_items_VISIBLE_IPO_ON = 518,	
		icon_items_DRIVER = 519,	
		icon_items_SOLO_OFF = 520,	
		icon_items_SOLO_ON = 521,	
		icon_items_FRAME_PREV = 522,	
		icon_items_FRAME_NEXT = 523,	
		icon_items_NLA_PUSHDOWN = 524,	
		icon_items_IPO_CONSTANT = 525,	
		icon_items_IPO_LINEAR = 526,	
		icon_items_IPO_BEZIER = 527,	
		icon_items_IPO_SINE = 528,	
		icon_items_IPO_QUAD = 529,	
		icon_items_IPO_CUBIC = 530,	
		icon_items_IPO_QUART = 531,	
		icon_items_IPO_QUINT = 532,	
		icon_items_IPO_EXPO = 533,	
		icon_items_IPO_CIRC = 534,	
		icon_items_IPO_BOUNCE = 535,	
		icon_items_IPO_ELASTIC = 536,	
		icon_items_IPO_BACK = 537,	
		icon_items_IPO_EASE_IN = 538,	
		icon_items_IPO_EASE_OUT = 539,	
		icon_items_IPO_EASE_IN_OUT = 540,	
		icon_items_VERTEXSEL = 546,	
		icon_items_EDGESEL = 547,	
		icon_items_FACESEL = 548,	
		icon_items_LOOPSEL = 549,	
		icon_items_ROTATE = 551,	
		icon_items_CURSOR = 552,	
		icon_items_ROTATECOLLECTION = 553,	
		icon_items_ROTATECENTER = 554,	
		icon_items_ROTACTIVE = 555,	
		icon_items_ALIGN = 556,	
		icon_items_SMOOTHCURVE = 558,	
		icon_items_SPHERECURVE = 559,	
		icon_items_ROOTCURVE = 560,	
		icon_items_SHARPCURVE = 561,	
		icon_items_LINCURVE = 562,	
		icon_items_NOCURVE = 563,	
		icon_items_RNDCURVE = 564,	
		icon_items_PROP_OFF = 565,	
		icon_items_PROP_ON = 566,	
		icon_items_PROP_CON = 567,	
		icon_items_SCULPT_DYNTOPO = 568,	
		icon_items_PARTICLE_POINT = 569,	
		icon_items_PARTICLE_TIP = 570,	
		icon_items_PARTICLE_PATH = 571,	
		icon_items_MAN_TRANS = 572,	
		icon_items_MAN_ROT = 573,	
		icon_items_MAN_SCALE = 574,	
		icon_items_MANIPUL = 575,	
		icon_items_SNAP_OFF = 576,	
		icon_items_SNAP_ON = 577,	
		icon_items_SNAP_NORMAL = 578,	
		icon_items_SNAP_INCREMENT = 579,	
		icon_items_SNAP_VERTEX = 580,	
		icon_items_SNAP_EDGE = 581,	
		icon_items_SNAP_FACE = 582,	
		icon_items_SNAP_VOLUME = 583,	
		icon_items_STICKY_UVS_LOC = 585,	
		icon_items_STICKY_UVS_DISABLE = 586,	
		icon_items_STICKY_UVS_VERT = 587,	
		icon_items_CLIPUV_DEHLT = 588,	
		icon_items_CLIPUV_HLT = 589,	
		icon_items_SNAP_PEEL_OBJECT = 590,	
		icon_items_GRID = 591,	
		icon_items_PASTEDOWN = 598,	
		icon_items_COPYDOWN = 599,	
		icon_items_PASTEFLIPUP = 600,	
		icon_items_PASTEFLIPDOWN = 601,	
		icon_items_SNAP_SURFACE = 606,	
		icon_items_AUTOMERGE_ON = 607,	
		icon_items_AUTOMERGE_OFF = 608,	
		icon_items_RETOPO = 609,	
		icon_items_UV_VERTEXSEL = 610,	
		icon_items_UV_EDGESEL = 611,	
		icon_items_UV_FACESEL = 612,	
		icon_items_UV_ISLANDSEL = 613,	
		icon_items_UV_SYNC_SELECT = 614,	
		icon_items_BBOX = 624,	
		icon_items_WIRE = 625,	
		icon_items_SOLID = 626,	
		icon_items_SMOOTH = 627,	
		icon_items_POTATO = 628,	
		icon_items_ORTHO = 630,	
		icon_items_LOCKVIEW_OFF = 633,	
		icon_items_LOCKVIEW_ON = 634,	
		icon_items_AXIS_SIDE = 636,	
		icon_items_AXIS_FRONT = 637,	
		icon_items_AXIS_TOP = 638,	
		icon_items_NDOF_DOM = 639,	
		icon_items_NDOF_TURN = 640,	
		icon_items_NDOF_FLY = 641,	
		icon_items_NDOF_TRANS = 642,	
		icon_items_LAYER_USED = 643,	
		icon_items_LAYER_ACTIVE = 644,	
		icon_items_SORTALPHA = 676,	
		icon_items_SORTBYEXT = 677,	
		icon_items_SORTTIME = 678,	
		icon_items_SORTSIZE = 679,	
		icon_items_LONGDISPLAY = 680,	
		icon_items_SHORTDISPLAY = 681,	
		icon_items_GHOST = 682,	
		icon_items_IMGDISPLAY = 683,	
		icon_items_SAVE_AS = 684,	
		icon_items_SAVE_COPY = 685,	
		icon_items_BOOKMARKS = 686,	
		icon_items_FONTPREVIEW = 687,	
		icon_items_FILTER = 688,	
		icon_items_NEWFOLDER = 689,	
		icon_items_OPEN_RECENT = 690,	
		icon_items_FILE_PARENT = 691,	
		icon_items_FILE_REFRESH = 692,	
		icon_items_FILE_FOLDER = 693,	
		icon_items_FILE_BLANK = 694,	
		icon_items_FILE_BLEND = 695,	
		icon_items_FILE_IMAGE = 696,	
		icon_items_FILE_MOVIE = 697,	
		icon_items_FILE_SCRIPT = 698,	
		icon_items_FILE_SOUND = 699,	
		icon_items_FILE_FONT = 700,	
		icon_items_FILE_TEXT = 701,	
		icon_items_RECOVER_AUTO = 702,	
		icon_items_SAVE_PREFS = 703,	
		icon_items_LINK_BLEND = 704,	
		icon_items_APPEND_BLEND = 705,	
		icon_items_IMPORT = 706,	
		icon_items_EXPORT = 707,	
		icon_items_EXTERNAL_DATA = 708,	
		icon_items_LOAD_FACTORY = 709,	
		icon_items_LOOP_BACK = 715,	
		icon_items_LOOP_FORWARDS = 716,	
		icon_items_BACK = 717,	
		icon_items_FORWARD = 718,	
		icon_items_FILE_HIDDEN = 725,	
		icon_items_FILE_BACKUP = 726,	
		icon_items_DISK_DRIVE = 727,	
		icon_items_MATPLANE = 728,	
		icon_items_MATSPHERE = 729,	
		icon_items_MATCUBE = 730,	
		icon_items_MONKEY = 731,	
		icon_items_HAIR = 732,	
		icon_items_ALIASED = 733,	
		icon_items_ANTIALIASED = 734,	
		icon_items_MAT_SPHERE_SKY = 735,	
		icon_items_WORDWRAP_OFF = 740,	
		icon_items_WORDWRAP_ON = 741,	
		icon_items_SYNTAX_OFF = 742,	
		icon_items_SYNTAX_ON = 743,	
		icon_items_LINENUMBERS_OFF = 744,	
		icon_items_LINENUMBERS_ON = 745,	
		icon_items_SCRIPTPLUGINS = 746,	
		icon_items_SEQ_SEQUENCER = 754,	
		icon_items_SEQ_PREVIEW = 755,	
		icon_items_SEQ_LUMA_WAVEFORM = 756,	
		icon_items_SEQ_CHROMA_SCOPE = 757,	
		icon_items_SEQ_HISTOGRAM = 758,	
		icon_items_SEQ_SPLITVIEW = 759,	
		icon_items_IMAGE_RGB = 763,	
		icon_items_IMAGE_RGB_ALPHA = 764,	
		icon_items_IMAGE_ALPHA = 765,	
		icon_items_IMAGE_ZDEPTH = 766,	
		icon_items_IMAGEFILE = 767,	
		icon_items_BRUSH_ADD = 780,	
		icon_items_BRUSH_BLOB = 781,	
		icon_items_BRUSH_BLUR = 782,	
		icon_items_BRUSH_CLAY = 783,	
		icon_items_BRUSH_CLAY_STRIPS = 784,	
		icon_items_BRUSH_CLONE = 785,	
		icon_items_BRUSH_CREASE = 786,	
		icon_items_BRUSH_DARKEN = 787,	
		icon_items_BRUSH_FILL = 788,	
		icon_items_BRUSH_FLATTEN = 789,	
		icon_items_BRUSH_GRAB = 790,	
		icon_items_BRUSH_INFLATE = 791,	
		icon_items_BRUSH_LAYER = 792,	
		icon_items_BRUSH_LIGHTEN = 793,	
		icon_items_BRUSH_MASK = 794,	
		icon_items_BRUSH_MIX = 795,	
		icon_items_BRUSH_MULTIPLY = 796,	
		icon_items_BRUSH_NUDGE = 797,	
		icon_items_BRUSH_PINCH = 798,	
		icon_items_BRUSH_SCRAPE = 799,	
		icon_items_BRUSH_SCULPT_DRAW = 800,	
		icon_items_BRUSH_SMEAR = 801,	
		icon_items_BRUSH_SMOOTH = 802,	
		icon_items_BRUSH_SNAKE_HOOK = 803,	
		icon_items_BRUSH_SOFTEN = 804,	
		icon_items_BRUSH_SUBTRACT = 805,	
		icon_items_BRUSH_TEXDRAW = 806,	
		icon_items_BRUSH_TEXFILL = 807,	
		icon_items_BRUSH_TEXMASK = 808,	
		icon_items_BRUSH_THUMB = 809,	
		icon_items_BRUSH_ROTATE = 810,	
		icon_items_BRUSH_VERTEXDRAW = 811,	
		icon_items_MATCAP_01 = 812,	
		icon_items_MATCAP_02 = 813,	
		icon_items_MATCAP_03 = 814,	
		icon_items_MATCAP_04 = 815,	
		icon_items_MATCAP_05 = 816,	
		icon_items_MATCAP_06 = 817,	
		icon_items_MATCAP_07 = 818,	
		icon_items_MATCAP_08 = 819,	
		icon_items_MATCAP_09 = 820,	
		icon_items_MATCAP_10 = 821,	
		icon_items_MATCAP_11 = 822,	
		icon_items_MATCAP_12 = 823,	
		icon_items_MATCAP_13 = 824,	
		icon_items_MATCAP_14 = 825,	
		icon_items_MATCAP_15 = 826,	
		icon_items_MATCAP_16 = 827,	
		icon_items_MATCAP_17 = 828,	
		icon_items_MATCAP_18 = 829,	
		icon_items_MATCAP_19 = 830,	
		icon_items_MATCAP_20 = 831,	
		icon_items_MATCAP_21 = 832,	
		icon_items_MATCAP_22 = 833,	
		icon_items_MATCAP_23 = 834,	
		icon_items_MATCAP_24 = 835,	
		icon_items_VIEW3D_VEC = 836,	
		icon_items_EDIT_VEC = 837,	
		icon_items_EDITMODE_VEC_DEHLT = 838,	
		icon_items_EDITMODE_VEC_HLT = 839,	
		icon_items_DISCLOSURE_TRI_RIGHT_VEC = 840,	
		icon_items_DISCLOSURE_TRI_DOWN_VEC = 841,	
		icon_items_MOVE_UP_VEC = 842,	
		icon_items_MOVE_DOWN_VEC = 843,	
		icon_items_X_VEC = 844,	
		icon_items_SMALL_TRI_RIGHT_VEC = 845	
	};

	std::map<std::string, int> create_string_to_icon_items() {
		return {{"NONE", icon_items_NONE}, {"QUESTION", icon_items_QUESTION}, {"ERROR", icon_items_ERROR}, {"CANCEL", icon_items_CANCEL}, {"TRIA_RIGHT", icon_items_TRIA_RIGHT}, {"TRIA_DOWN", icon_items_TRIA_DOWN}, {"TRIA_LEFT", icon_items_TRIA_LEFT}, {"TRIA_UP", icon_items_TRIA_UP}, {"ARROW_LEFTRIGHT", icon_items_ARROW_LEFTRIGHT}, {"PLUS", icon_items_PLUS}, {"DISCLOSURE_TRI_DOWN", icon_items_DISCLOSURE_TRI_DOWN}, {"DISCLOSURE_TRI_RIGHT", icon_items_DISCLOSURE_TRI_RIGHT}, {"RADIOBUT_OFF", icon_items_RADIOBUT_OFF}, {"RADIOBUT_ON", icon_items_RADIOBUT_ON}, {"MENU_PANEL", icon_items_MENU_PANEL}, {"BLENDER", icon_items_BLENDER}, {"GRIP", icon_items_GRIP}, {"DOT", icon_items_DOT}, {"COLLAPSEMENU", icon_items_COLLAPSEMENU}, {"X", icon_items_X}, {"GO_LEFT", icon_items_GO_LEFT}, {"PLUG", icon_items_PLUG}, {"UI", icon_items_UI}, {"NODE", icon_items_NODE}, {"NODE_SEL", icon_items_NODE_SEL}, {"FULLSCREEN", icon_items_FULLSCREEN}, {"SPLITSCREEN", icon_items_SPLITSCREEN}, {"RIGHTARROW_THIN", icon_items_RIGHTARROW_THIN}, {"BORDERMOVE", icon_items_BORDERMOVE}, {"VIEWZOOM", icon_items_VIEWZOOM}, {"ZOOMIN", icon_items_ZOOMIN}, {"ZOOMOUT", icon_items_ZOOMOUT}, {"PANEL_CLOSE", icon_items_PANEL_CLOSE}, {"COPY_ID", icon_items_COPY_ID}, {"EYEDROPPER", icon_items_EYEDROPPER}, {"LINK_AREA", icon_items_LINK_AREA}, {"AUTO", icon_items_AUTO}, {"CHECKBOX_DEHLT", icon_items_CHECKBOX_DEHLT}, {"CHECKBOX_HLT", icon_items_CHECKBOX_HLT}, {"UNLOCKED", icon_items_UNLOCKED}, {"LOCKED", icon_items_LOCKED}, {"UNPINNED", icon_items_UNPINNED}, {"PINNED", icon_items_PINNED}, {"SCREEN_BACK", icon_items_SCREEN_BACK}, {"RIGHTARROW", icon_items_RIGHTARROW}, {"DOWNARROW_HLT", icon_items_DOWNARROW_HLT}, {"DOTSUP", icon_items_DOTSUP}, {"DOTSDOWN", icon_items_DOTSDOWN}, {"LINK", icon_items_LINK}, {"INLINK", icon_items_INLINK}, {"PLUGIN", icon_items_PLUGIN}, {"HELP", icon_items_HELP}, {"GHOST_ENABLED", icon_items_GHOST_ENABLED}, {"COLOR", icon_items_COLOR}, {"LINKED", icon_items_LINKED}, {"UNLINKED", icon_items_UNLINKED}, {"HAND", icon_items_HAND}, {"ZOOM_ALL", icon_items_ZOOM_ALL}, {"ZOOM_SELECTED", icon_items_ZOOM_SELECTED}, {"ZOOM_PREVIOUS", icon_items_ZOOM_PREVIOUS}, {"ZOOM_IN", icon_items_ZOOM_IN}, {"ZOOM_OUT", icon_items_ZOOM_OUT}, {"RENDER_REGION", icon_items_RENDER_REGION}, {"BORDER_RECT", icon_items_BORDER_RECT}, {"BORDER_LASSO", icon_items_BORDER_LASSO}, {"FREEZE", icon_items_FREEZE}, {"STYLUS_PRESSURE", icon_items_STYLUS_PRESSURE}, {"GHOST_DISABLED", icon_items_GHOST_DISABLED}, {"NEW", icon_items_NEW}, {"FILE_TICK", icon_items_FILE_TICK}, {"QUIT", icon_items_QUIT}, {"URL", icon_items_URL}, {"RECOVER_LAST", icon_items_RECOVER_LAST}, {"FULLSCREEN_ENTER", icon_items_FULLSCREEN_ENTER}, {"FULLSCREEN_EXIT", icon_items_FULLSCREEN_EXIT}, {"BLANK1", icon_items_BLANK1}, {"LAMP", icon_items_LAMP}, {"MATERIAL", icon_items_MATERIAL}, {"TEXTURE", icon_items_TEXTURE}, {"ANIM", icon_items_ANIM}, {"WORLD", icon_items_WORLD}, {"SCENE", icon_items_SCENE}, {"EDIT", icon_items_EDIT}, {"GAME", icon_items_GAME}, {"RADIO", icon_items_RADIO}, {"SCRIPT", icon_items_SCRIPT}, {"PARTICLES", icon_items_PARTICLES}, {"PHYSICS", icon_items_PHYSICS}, {"SPEAKER", icon_items_SPEAKER}, {"TEXTURE_SHADED", icon_items_TEXTURE_SHADED}, {"VIEW3D", icon_items_VIEW3D}, {"IPO", icon_items_IPO}, {"OOPS", icon_items_OOPS}, {"BUTS", icon_items_BUTS}, {"FILESEL", icon_items_FILESEL}, {"IMAGE_COL", icon_items_IMAGE_COL}, {"INFO", icon_items_INFO}, {"SEQUENCE", icon_items_SEQUENCE}, {"TEXT", icon_items_TEXT}, {"IMASEL", icon_items_IMASEL}, {"SOUND", icon_items_SOUND}, {"ACTION", icon_items_ACTION}, {"NLA", icon_items_NLA}, {"SCRIPTWIN", icon_items_SCRIPTWIN}, {"TIME", icon_items_TIME}, {"NODETREE", icon_items_NODETREE}, {"LOGIC", icon_items_LOGIC}, {"CONSOLE", icon_items_CONSOLE}, {"PREFERENCES", icon_items_PREFERENCES}, {"CLIP", icon_items_CLIP}, {"ASSET_MANAGER", icon_items_ASSET_MANAGER}, {"OBJECT_DATAMODE", icon_items_OBJECT_DATAMODE}, {"EDITMODE_HLT", icon_items_EDITMODE_HLT}, {"FACESEL_HLT", icon_items_FACESEL_HLT}, {"VPAINT_HLT", icon_items_VPAINT_HLT}, {"TPAINT_HLT", icon_items_TPAINT_HLT}, {"WPAINT_HLT", icon_items_WPAINT_HLT}, {"SCULPTMODE_HLT", icon_items_SCULPTMODE_HLT}, {"POSE_HLT", icon_items_POSE_HLT}, {"PARTICLEMODE", icon_items_PARTICLEMODE}, {"LIGHTPAINT", icon_items_LIGHTPAINT}, {"SCENE_DATA", icon_items_SCENE_DATA}, {"RENDERLAYERS", icon_items_RENDERLAYERS}, {"WORLD_DATA", icon_items_WORLD_DATA}, {"OBJECT_DATA", icon_items_OBJECT_DATA}, {"MESH_DATA", icon_items_MESH_DATA}, {"CURVE_DATA", icon_items_CURVE_DATA}, {"META_DATA", icon_items_META_DATA}, {"LATTICE_DATA", icon_items_LATTICE_DATA}, {"LAMP_DATA", icon_items_LAMP_DATA}, {"MATERIAL_DATA", icon_items_MATERIAL_DATA}, {"TEXTURE_DATA", icon_items_TEXTURE_DATA}, {"ANIM_DATA", icon_items_ANIM_DATA}, {"CAMERA_DATA", icon_items_CAMERA_DATA}, {"PARTICLE_DATA", icon_items_PARTICLE_DATA}, {"LIBRARY_DATA_DIRECT", icon_items_LIBRARY_DATA_DIRECT}, {"GROUP", icon_items_GROUP}, {"ARMATURE_DATA", icon_items_ARMATURE_DATA}, {"POSE_DATA", icon_items_POSE_DATA}, {"BONE_DATA", icon_items_BONE_DATA}, {"CONSTRAINT", icon_items_CONSTRAINT}, {"SHAPEKEY_DATA", icon_items_SHAPEKEY_DATA}, {"CONSTRAINT_BONE", icon_items_CONSTRAINT_BONE}, {"CAMERA_STEREO", icon_items_CAMERA_STEREO}, {"PACKAGE", icon_items_PACKAGE}, {"UGLYPACKAGE", icon_items_UGLYPACKAGE}, {"BRUSH_DATA", icon_items_BRUSH_DATA}, {"IMAGE_DATA", icon_items_IMAGE_DATA}, {"FILE", icon_items_FILE}, {"FCURVE", icon_items_FCURVE}, {"FONT_DATA", icon_items_FONT_DATA}, {"RENDER_RESULT", icon_items_RENDER_RESULT}, {"SURFACE_DATA", icon_items_SURFACE_DATA}, {"EMPTY_DATA", icon_items_EMPTY_DATA}, {"SETTINGS", icon_items_SETTINGS}, {"RENDER_ANIMATION", icon_items_RENDER_ANIMATION}, {"RENDER_STILL", icon_items_RENDER_STILL}, {"LIBRARY_DATA_BROKEN", icon_items_LIBRARY_DATA_BROKEN}, {"BOIDS", icon_items_BOIDS}, {"STRANDS", icon_items_STRANDS}, {"LIBRARY_DATA_INDIRECT", icon_items_LIBRARY_DATA_INDIRECT}, {"GREASEPENCIL", icon_items_GREASEPENCIL}, {"LINE_DATA", icon_items_LINE_DATA}, {"GROUP_BONE", icon_items_GROUP_BONE}, {"GROUP_VERTEX", icon_items_GROUP_VERTEX}, {"GROUP_VCOL", icon_items_GROUP_VCOL}, {"GROUP_UVS", icon_items_GROUP_UVS}, {"RNA", icon_items_RNA}, {"RNA_ADD", icon_items_RNA_ADD}, {"OUTLINER_OB_EMPTY", icon_items_OUTLINER_OB_EMPTY}, {"OUTLINER_OB_MESH", icon_items_OUTLINER_OB_MESH}, {"OUTLINER_OB_CURVE", icon_items_OUTLINER_OB_CURVE}, {"OUTLINER_OB_LATTICE", icon_items_OUTLINER_OB_LATTICE}, {"OUTLINER_OB_META", icon_items_OUTLINER_OB_META}, {"OUTLINER_OB_LAMP", icon_items_OUTLINER_OB_LAMP}, {"OUTLINER_OB_CAMERA", icon_items_OUTLINER_OB_CAMERA}, {"OUTLINER_OB_ARMATURE", icon_items_OUTLINER_OB_ARMATURE}, {"OUTLINER_OB_FONT", icon_items_OUTLINER_OB_FONT}, {"OUTLINER_OB_SURFACE", icon_items_OUTLINER_OB_SURFACE}, {"OUTLINER_OB_SPEAKER", icon_items_OUTLINER_OB_SPEAKER}, {"RESTRICT_VIEW_OFF", icon_items_RESTRICT_VIEW_OFF}, {"RESTRICT_VIEW_ON", icon_items_RESTRICT_VIEW_ON}, {"RESTRICT_SELECT_OFF", icon_items_RESTRICT_SELECT_OFF}, {"RESTRICT_SELECT_ON", icon_items_RESTRICT_SELECT_ON}, {"RESTRICT_RENDER_OFF", icon_items_RESTRICT_RENDER_OFF}, {"RESTRICT_RENDER_ON", icon_items_RESTRICT_RENDER_ON}, {"OUTLINER_DATA_EMPTY", icon_items_OUTLINER_DATA_EMPTY}, {"OUTLINER_DATA_MESH", icon_items_OUTLINER_DATA_MESH}, {"OUTLINER_DATA_CURVE", icon_items_OUTLINER_DATA_CURVE}, {"OUTLINER_DATA_LATTICE", icon_items_OUTLINER_DATA_LATTICE}, {"OUTLINER_DATA_META", icon_items_OUTLINER_DATA_META}, {"OUTLINER_DATA_LAMP", icon_items_OUTLINER_DATA_LAMP}, {"OUTLINER_DATA_CAMERA", icon_items_OUTLINER_DATA_CAMERA}, {"OUTLINER_DATA_ARMATURE", icon_items_OUTLINER_DATA_ARMATURE}, {"OUTLINER_DATA_FONT", icon_items_OUTLINER_DATA_FONT}, {"OUTLINER_DATA_SURFACE", icon_items_OUTLINER_DATA_SURFACE}, {"OUTLINER_DATA_SPEAKER", icon_items_OUTLINER_DATA_SPEAKER}, {"OUTLINER_DATA_POSE", icon_items_OUTLINER_DATA_POSE}, {"MESH_PLANE", icon_items_MESH_PLANE}, {"MESH_CUBE", icon_items_MESH_CUBE}, {"MESH_CIRCLE", icon_items_MESH_CIRCLE}, {"MESH_UVSPHERE", icon_items_MESH_UVSPHERE}, {"MESH_ICOSPHERE", icon_items_MESH_ICOSPHERE}, {"MESH_GRID", icon_items_MESH_GRID}, {"MESH_MONKEY", icon_items_MESH_MONKEY}, {"MESH_CYLINDER", icon_items_MESH_CYLINDER}, {"MESH_TORUS", icon_items_MESH_TORUS}, {"MESH_CONE", icon_items_MESH_CONE}, {"LAMP_POINT", icon_items_LAMP_POINT}, {"LAMP_SUN", icon_items_LAMP_SUN}, {"LAMP_SPOT", icon_items_LAMP_SPOT}, {"LAMP_HEMI", icon_items_LAMP_HEMI}, {"LAMP_AREA", icon_items_LAMP_AREA}, {"META_EMPTY", icon_items_META_EMPTY}, {"META_PLANE", icon_items_META_PLANE}, {"META_CUBE", icon_items_META_CUBE}, {"META_BALL", icon_items_META_BALL}, {"META_ELLIPSOID", icon_items_META_ELLIPSOID}, {"META_CAPSULE", icon_items_META_CAPSULE}, {"SURFACE_NCURVE", icon_items_SURFACE_NCURVE}, {"SURFACE_NCIRCLE", icon_items_SURFACE_NCIRCLE}, {"SURFACE_NSURFACE", icon_items_SURFACE_NSURFACE}, {"SURFACE_NCYLINDER", icon_items_SURFACE_NCYLINDER}, {"SURFACE_NSPHERE", icon_items_SURFACE_NSPHERE}, {"SURFACE_NTORUS", icon_items_SURFACE_NTORUS}, {"CURVE_BEZCURVE", icon_items_CURVE_BEZCURVE}, {"CURVE_BEZCIRCLE", icon_items_CURVE_BEZCIRCLE}, {"CURVE_NCURVE", icon_items_CURVE_NCURVE}, {"CURVE_NCIRCLE", icon_items_CURVE_NCIRCLE}, {"CURVE_PATH", icon_items_CURVE_PATH}, {"COLOR_RED", icon_items_COLOR_RED}, {"COLOR_GREEN", icon_items_COLOR_GREEN}, {"COLOR_BLUE", icon_items_COLOR_BLUE}, {"TRIA_RIGHT_BAR", icon_items_TRIA_RIGHT_BAR}, {"TRIA_DOWN_BAR", icon_items_TRIA_DOWN_BAR}, {"TRIA_LEFT_BAR", icon_items_TRIA_LEFT_BAR}, {"TRIA_UP_BAR", icon_items_TRIA_UP_BAR}, {"FORCE_FORCE", icon_items_FORCE_FORCE}, {"FORCE_WIND", icon_items_FORCE_WIND}, {"FORCE_VORTEX", icon_items_FORCE_VORTEX}, {"FORCE_MAGNETIC", icon_items_FORCE_MAGNETIC}, {"FORCE_HARMONIC", icon_items_FORCE_HARMONIC}, {"FORCE_CHARGE", icon_items_FORCE_CHARGE}, {"FORCE_LENNARDJONES", icon_items_FORCE_LENNARDJONES}, {"FORCE_TEXTURE", icon_items_FORCE_TEXTURE}, {"FORCE_CURVE", icon_items_FORCE_CURVE}, {"FORCE_BOID", icon_items_FORCE_BOID}, {"FORCE_TURBULENCE", icon_items_FORCE_TURBULENCE}, {"FORCE_DRAG", icon_items_FORCE_DRAG}, {"FORCE_SMOKEFLOW", icon_items_FORCE_SMOKEFLOW}, {"MODIFIER", icon_items_MODIFIER}, {"MOD_WAVE", icon_items_MOD_WAVE}, {"MOD_BUILD", icon_items_MOD_BUILD}, {"MOD_DECIM", icon_items_MOD_DECIM}, {"MOD_MIRROR", icon_items_MOD_MIRROR}, {"MOD_SOFT", icon_items_MOD_SOFT}, {"MOD_SUBSURF", icon_items_MOD_SUBSURF}, {"HOOK", icon_items_HOOK}, {"MOD_PHYSICS", icon_items_MOD_PHYSICS}, {"MOD_PARTICLES", icon_items_MOD_PARTICLES}, {"MOD_BOOLEAN", icon_items_MOD_BOOLEAN}, {"MOD_EDGESPLIT", icon_items_MOD_EDGESPLIT}, {"MOD_ARRAY", icon_items_MOD_ARRAY}, {"MOD_UVPROJECT", icon_items_MOD_UVPROJECT}, {"MOD_DISPLACE", icon_items_MOD_DISPLACE}, {"MOD_CURVE", icon_items_MOD_CURVE}, {"MOD_LATTICE", icon_items_MOD_LATTICE}, {"CONSTRAINT_DATA", icon_items_CONSTRAINT_DATA}, {"MOD_ARMATURE", icon_items_MOD_ARMATURE}, {"MOD_SHRINKWRAP", icon_items_MOD_SHRINKWRAP}, {"MOD_CAST", icon_items_MOD_CAST}, {"MOD_MESHDEFORM", icon_items_MOD_MESHDEFORM}, {"MOD_BEVEL", icon_items_MOD_BEVEL}, {"MOD_SMOOTH", icon_items_MOD_SMOOTH}, {"MOD_SIMPLEDEFORM", icon_items_MOD_SIMPLEDEFORM}, {"MOD_MASK", icon_items_MOD_MASK}, {"MOD_CLOTH", icon_items_MOD_CLOTH}, {"MOD_EXPLODE", icon_items_MOD_EXPLODE}, {"MOD_FLUIDSIM", icon_items_MOD_FLUIDSIM}, {"MOD_MULTIRES", icon_items_MOD_MULTIRES}, {"MOD_SMOKE", icon_items_MOD_SMOKE}, {"MOD_SOLIDIFY", icon_items_MOD_SOLIDIFY}, {"MOD_SCREW", icon_items_MOD_SCREW}, {"MOD_VERTEX_WEIGHT", icon_items_MOD_VERTEX_WEIGHT}, {"MOD_DYNAMICPAINT", icon_items_MOD_DYNAMICPAINT}, {"MOD_REMESH", icon_items_MOD_REMESH}, {"MOD_OCEAN", icon_items_MOD_OCEAN}, {"MOD_WARP", icon_items_MOD_WARP}, {"MOD_SKIN", icon_items_MOD_SKIN}, {"MOD_TRIANGULATE", icon_items_MOD_TRIANGULATE}, {"MOD_WIREFRAME", icon_items_MOD_WIREFRAME}, {"MOD_DATA_TRANSFER", icon_items_MOD_DATA_TRANSFER}, {"MOD_NORMALEDIT", icon_items_MOD_NORMALEDIT}, {"REC", icon_items_REC}, {"PLAY", icon_items_PLAY}, {"FF", icon_items_FF}, {"REW", icon_items_REW}, {"PAUSE", icon_items_PAUSE}, {"PREV_KEYFRAME", icon_items_PREV_KEYFRAME}, {"NEXT_KEYFRAME", icon_items_NEXT_KEYFRAME}, {"PLAY_AUDIO", icon_items_PLAY_AUDIO}, {"PLAY_REVERSE", icon_items_PLAY_REVERSE}, {"PREVIEW_RANGE", icon_items_PREVIEW_RANGE}, {"ACTION_TWEAK", icon_items_ACTION_TWEAK}, {"PMARKER_ACT", icon_items_PMARKER_ACT}, {"PMARKER_SEL", icon_items_PMARKER_SEL}, {"PMARKER", icon_items_PMARKER}, {"MARKER_HLT", icon_items_MARKER_HLT}, {"MARKER", icon_items_MARKER}, {"SPACE2", icon_items_SPACE2}, {"SPACE3", icon_items_SPACE3}, {"KEYINGSET", icon_items_KEYINGSET}, {"KEY_DEHLT", icon_items_KEY_DEHLT}, {"KEY_HLT", icon_items_KEY_HLT}, {"MUTE_IPO_OFF", icon_items_MUTE_IPO_OFF}, {"MUTE_IPO_ON", icon_items_MUTE_IPO_ON}, {"VISIBLE_IPO_OFF", icon_items_VISIBLE_IPO_OFF}, {"VISIBLE_IPO_ON", icon_items_VISIBLE_IPO_ON}, {"DRIVER", icon_items_DRIVER}, {"SOLO_OFF", icon_items_SOLO_OFF}, {"SOLO_ON", icon_items_SOLO_ON}, {"FRAME_PREV", icon_items_FRAME_PREV}, {"FRAME_NEXT", icon_items_FRAME_NEXT}, {"NLA_PUSHDOWN", icon_items_NLA_PUSHDOWN}, {"IPO_CONSTANT", icon_items_IPO_CONSTANT}, {"IPO_LINEAR", icon_items_IPO_LINEAR}, {"IPO_BEZIER", icon_items_IPO_BEZIER}, {"IPO_SINE", icon_items_IPO_SINE}, {"IPO_QUAD", icon_items_IPO_QUAD}, {"IPO_CUBIC", icon_items_IPO_CUBIC}, {"IPO_QUART", icon_items_IPO_QUART}, {"IPO_QUINT", icon_items_IPO_QUINT}, {"IPO_EXPO", icon_items_IPO_EXPO}, {"IPO_CIRC", icon_items_IPO_CIRC}, {"IPO_BOUNCE", icon_items_IPO_BOUNCE}, {"IPO_ELASTIC", icon_items_IPO_ELASTIC}, {"IPO_BACK", icon_items_IPO_BACK}, {"IPO_EASE_IN", icon_items_IPO_EASE_IN}, {"IPO_EASE_OUT", icon_items_IPO_EASE_OUT}, {"IPO_EASE_IN_OUT", icon_items_IPO_EASE_IN_OUT}, {"VERTEXSEL", icon_items_VERTEXSEL}, {"EDGESEL", icon_items_EDGESEL}, {"FACESEL", icon_items_FACESEL}, {"LOOPSEL", icon_items_LOOPSEL}, {"ROTATE", icon_items_ROTATE}, {"CURSOR", icon_items_CURSOR}, {"ROTATECOLLECTION", icon_items_ROTATECOLLECTION}, {"ROTATECENTER", icon_items_ROTATECENTER}, {"ROTACTIVE", icon_items_ROTACTIVE}, {"ALIGN", icon_items_ALIGN}, {"SMOOTHCURVE", icon_items_SMOOTHCURVE}, {"SPHERECURVE", icon_items_SPHERECURVE}, {"ROOTCURVE", icon_items_ROOTCURVE}, {"SHARPCURVE", icon_items_SHARPCURVE}, {"LINCURVE", icon_items_LINCURVE}, {"NOCURVE", icon_items_NOCURVE}, {"RNDCURVE", icon_items_RNDCURVE}, {"PROP_OFF", icon_items_PROP_OFF}, {"PROP_ON", icon_items_PROP_ON}, {"PROP_CON", icon_items_PROP_CON}, {"SCULPT_DYNTOPO", icon_items_SCULPT_DYNTOPO}, {"PARTICLE_POINT", icon_items_PARTICLE_POINT}, {"PARTICLE_TIP", icon_items_PARTICLE_TIP}, {"PARTICLE_PATH", icon_items_PARTICLE_PATH}, {"MAN_TRANS", icon_items_MAN_TRANS}, {"MAN_ROT", icon_items_MAN_ROT}, {"MAN_SCALE", icon_items_MAN_SCALE}, {"MANIPUL", icon_items_MANIPUL}, {"SNAP_OFF", icon_items_SNAP_OFF}, {"SNAP_ON", icon_items_SNAP_ON}, {"SNAP_NORMAL", icon_items_SNAP_NORMAL}, {"SNAP_INCREMENT", icon_items_SNAP_INCREMENT}, {"SNAP_VERTEX", icon_items_SNAP_VERTEX}, {"SNAP_EDGE", icon_items_SNAP_EDGE}, {"SNAP_FACE", icon_items_SNAP_FACE}, {"SNAP_VOLUME", icon_items_SNAP_VOLUME}, {"STICKY_UVS_LOC", icon_items_STICKY_UVS_LOC}, {"STICKY_UVS_DISABLE", icon_items_STICKY_UVS_DISABLE}, {"STICKY_UVS_VERT", icon_items_STICKY_UVS_VERT}, {"CLIPUV_DEHLT", icon_items_CLIPUV_DEHLT}, {"CLIPUV_HLT", icon_items_CLIPUV_HLT}, {"SNAP_PEEL_OBJECT", icon_items_SNAP_PEEL_OBJECT}, {"GRID", icon_items_GRID}, {"PASTEDOWN", icon_items_PASTEDOWN}, {"COPYDOWN", icon_items_COPYDOWN}, {"PASTEFLIPUP", icon_items_PASTEFLIPUP}, {"PASTEFLIPDOWN", icon_items_PASTEFLIPDOWN}, {"SNAP_SURFACE", icon_items_SNAP_SURFACE}, {"AUTOMERGE_ON", icon_items_AUTOMERGE_ON}, {"AUTOMERGE_OFF", icon_items_AUTOMERGE_OFF}, {"RETOPO", icon_items_RETOPO}, {"UV_VERTEXSEL", icon_items_UV_VERTEXSEL}, {"UV_EDGESEL", icon_items_UV_EDGESEL}, {"UV_FACESEL", icon_items_UV_FACESEL}, {"UV_ISLANDSEL", icon_items_UV_ISLANDSEL}, {"UV_SYNC_SELECT", icon_items_UV_SYNC_SELECT}, {"BBOX", icon_items_BBOX}, {"WIRE", icon_items_WIRE}, {"SOLID", icon_items_SOLID}, {"SMOOTH", icon_items_SMOOTH}, {"POTATO", icon_items_POTATO}, {"ORTHO", icon_items_ORTHO}, {"LOCKVIEW_OFF", icon_items_LOCKVIEW_OFF}, {"LOCKVIEW_ON", icon_items_LOCKVIEW_ON}, {"AXIS_SIDE", icon_items_AXIS_SIDE}, {"AXIS_FRONT", icon_items_AXIS_FRONT}, {"AXIS_TOP", icon_items_AXIS_TOP}, {"NDOF_DOM", icon_items_NDOF_DOM}, {"NDOF_TURN", icon_items_NDOF_TURN}, {"NDOF_FLY", icon_items_NDOF_FLY}, {"NDOF_TRANS", icon_items_NDOF_TRANS}, {"LAYER_USED", icon_items_LAYER_USED}, {"LAYER_ACTIVE", icon_items_LAYER_ACTIVE}, {"SORTALPHA", icon_items_SORTALPHA}, {"SORTBYEXT", icon_items_SORTBYEXT}, {"SORTTIME", icon_items_SORTTIME}, {"SORTSIZE", icon_items_SORTSIZE}, {"LONGDISPLAY", icon_items_LONGDISPLAY}, {"SHORTDISPLAY", icon_items_SHORTDISPLAY}, {"GHOST", icon_items_GHOST}, {"IMGDISPLAY", icon_items_IMGDISPLAY}, {"SAVE_AS", icon_items_SAVE_AS}, {"SAVE_COPY", icon_items_SAVE_COPY}, {"BOOKMARKS", icon_items_BOOKMARKS}, {"FONTPREVIEW", icon_items_FONTPREVIEW}, {"FILTER", icon_items_FILTER}, {"NEWFOLDER", icon_items_NEWFOLDER}, {"OPEN_RECENT", icon_items_OPEN_RECENT}, {"FILE_PARENT", icon_items_FILE_PARENT}, {"FILE_REFRESH", icon_items_FILE_REFRESH}, {"FILE_FOLDER", icon_items_FILE_FOLDER}, {"FILE_BLANK", icon_items_FILE_BLANK}, {"FILE_BLEND", icon_items_FILE_BLEND}, {"FILE_IMAGE", icon_items_FILE_IMAGE}, {"FILE_MOVIE", icon_items_FILE_MOVIE}, {"FILE_SCRIPT", icon_items_FILE_SCRIPT}, {"FILE_SOUND", icon_items_FILE_SOUND}, {"FILE_FONT", icon_items_FILE_FONT}, {"FILE_TEXT", icon_items_FILE_TEXT}, {"RECOVER_AUTO", icon_items_RECOVER_AUTO}, {"SAVE_PREFS", icon_items_SAVE_PREFS}, {"LINK_BLEND", icon_items_LINK_BLEND}, {"APPEND_BLEND", icon_items_APPEND_BLEND}, {"IMPORT", icon_items_IMPORT}, {"EXPORT", icon_items_EXPORT}, {"EXTERNAL_DATA", icon_items_EXTERNAL_DATA}, {"LOAD_FACTORY", icon_items_LOAD_FACTORY}, {"LOOP_BACK", icon_items_LOOP_BACK}, {"LOOP_FORWARDS", icon_items_LOOP_FORWARDS}, {"BACK", icon_items_BACK}, {"FORWARD", icon_items_FORWARD}, {"FILE_HIDDEN", icon_items_FILE_HIDDEN}, {"FILE_BACKUP", icon_items_FILE_BACKUP}, {"DISK_DRIVE", icon_items_DISK_DRIVE}, {"MATPLANE", icon_items_MATPLANE}, {"MATSPHERE", icon_items_MATSPHERE}, {"MATCUBE", icon_items_MATCUBE}, {"MONKEY", icon_items_MONKEY}, {"HAIR", icon_items_HAIR}, {"ALIASED", icon_items_ALIASED}, {"ANTIALIASED", icon_items_ANTIALIASED}, {"MAT_SPHERE_SKY", icon_items_MAT_SPHERE_SKY}, {"WORDWRAP_OFF", icon_items_WORDWRAP_OFF}, {"WORDWRAP_ON", icon_items_WORDWRAP_ON}, {"SYNTAX_OFF", icon_items_SYNTAX_OFF}, {"SYNTAX_ON", icon_items_SYNTAX_ON}, {"LINENUMBERS_OFF", icon_items_LINENUMBERS_OFF}, {"LINENUMBERS_ON", icon_items_LINENUMBERS_ON}, {"SCRIPTPLUGINS", icon_items_SCRIPTPLUGINS}, {"SEQ_SEQUENCER", icon_items_SEQ_SEQUENCER}, {"SEQ_PREVIEW", icon_items_SEQ_PREVIEW}, {"SEQ_LUMA_WAVEFORM", icon_items_SEQ_LUMA_WAVEFORM}, {"SEQ_CHROMA_SCOPE", icon_items_SEQ_CHROMA_SCOPE}, {"SEQ_HISTOGRAM", icon_items_SEQ_HISTOGRAM}, {"SEQ_SPLITVIEW", icon_items_SEQ_SPLITVIEW}, {"IMAGE_RGB", icon_items_IMAGE_RGB}, {"IMAGE_RGB_ALPHA", icon_items_IMAGE_RGB_ALPHA}, {"IMAGE_ALPHA", icon_items_IMAGE_ALPHA}, {"IMAGE_ZDEPTH", icon_items_IMAGE_ZDEPTH}, {"IMAGEFILE", icon_items_IMAGEFILE}, {"BRUSH_ADD", icon_items_BRUSH_ADD}, {"BRUSH_BLOB", icon_items_BRUSH_BLOB}, {"BRUSH_BLUR", icon_items_BRUSH_BLUR}, {"BRUSH_CLAY", icon_items_BRUSH_CLAY}, {"BRUSH_CLAY_STRIPS", icon_items_BRUSH_CLAY_STRIPS}, {"BRUSH_CLONE", icon_items_BRUSH_CLONE}, {"BRUSH_CREASE", icon_items_BRUSH_CREASE}, {"BRUSH_DARKEN", icon_items_BRUSH_DARKEN}, {"BRUSH_FILL", icon_items_BRUSH_FILL}, {"BRUSH_FLATTEN", icon_items_BRUSH_FLATTEN}, {"BRUSH_GRAB", icon_items_BRUSH_GRAB}, {"BRUSH_INFLATE", icon_items_BRUSH_INFLATE}, {"BRUSH_LAYER", icon_items_BRUSH_LAYER}, {"BRUSH_LIGHTEN", icon_items_BRUSH_LIGHTEN}, {"BRUSH_MASK", icon_items_BRUSH_MASK}, {"BRUSH_MIX", icon_items_BRUSH_MIX}, {"BRUSH_MULTIPLY", icon_items_BRUSH_MULTIPLY}, {"BRUSH_NUDGE", icon_items_BRUSH_NUDGE}, {"BRUSH_PINCH", icon_items_BRUSH_PINCH}, {"BRUSH_SCRAPE", icon_items_BRUSH_SCRAPE}, {"BRUSH_SCULPT_DRAW", icon_items_BRUSH_SCULPT_DRAW}, {"BRUSH_SMEAR", icon_items_BRUSH_SMEAR}, {"BRUSH_SMOOTH", icon_items_BRUSH_SMOOTH}, {"BRUSH_SNAKE_HOOK", icon_items_BRUSH_SNAKE_HOOK}, {"BRUSH_SOFTEN", icon_items_BRUSH_SOFTEN}, {"BRUSH_SUBTRACT", icon_items_BRUSH_SUBTRACT}, {"BRUSH_TEXDRAW", icon_items_BRUSH_TEXDRAW}, {"BRUSH_TEXFILL", icon_items_BRUSH_TEXFILL}, {"BRUSH_TEXMASK", icon_items_BRUSH_TEXMASK}, {"BRUSH_THUMB", icon_items_BRUSH_THUMB}, {"BRUSH_ROTATE", icon_items_BRUSH_ROTATE}, {"BRUSH_VERTEXDRAW", icon_items_BRUSH_VERTEXDRAW}, {"MATCAP_01", icon_items_MATCAP_01}, {"MATCAP_02", icon_items_MATCAP_02}, {"MATCAP_03", icon_items_MATCAP_03}, {"MATCAP_04", icon_items_MATCAP_04}, {"MATCAP_05", icon_items_MATCAP_05}, {"MATCAP_06", icon_items_MATCAP_06}, {"MATCAP_07", icon_items_MATCAP_07}, {"MATCAP_08", icon_items_MATCAP_08}, {"MATCAP_09", icon_items_MATCAP_09}, {"MATCAP_10", icon_items_MATCAP_10}, {"MATCAP_11", icon_items_MATCAP_11}, {"MATCAP_12", icon_items_MATCAP_12}, {"MATCAP_13", icon_items_MATCAP_13}, {"MATCAP_14", icon_items_MATCAP_14}, {"MATCAP_15", icon_items_MATCAP_15}, {"MATCAP_16", icon_items_MATCAP_16}, {"MATCAP_17", icon_items_MATCAP_17}, {"MATCAP_18", icon_items_MATCAP_18}, {"MATCAP_19", icon_items_MATCAP_19}, {"MATCAP_20", icon_items_MATCAP_20}, {"MATCAP_21", icon_items_MATCAP_21}, {"MATCAP_22", icon_items_MATCAP_22}, {"MATCAP_23", icon_items_MATCAP_23}, {"MATCAP_24", icon_items_MATCAP_24}, {"VIEW3D_VEC", icon_items_VIEW3D_VEC}, {"EDIT_VEC", icon_items_EDIT_VEC}, {"EDITMODE_VEC_DEHLT", icon_items_EDITMODE_VEC_DEHLT}, {"EDITMODE_VEC_HLT", icon_items_EDITMODE_VEC_HLT}, {"DISCLOSURE_TRI_RIGHT_VEC", icon_items_DISCLOSURE_TRI_RIGHT_VEC}, {"DISCLOSURE_TRI_DOWN_VEC", icon_items_DISCLOSURE_TRI_DOWN_VEC}, {"MOVE_UP_VEC", icon_items_MOVE_UP_VEC}, {"MOVE_DOWN_VEC", icon_items_MOVE_DOWN_VEC}, {"X_VEC", icon_items_X_VEC}, {"SMALL_TRI_RIGHT_VEC", icon_items_SMALL_TRI_RIGHT_VEC}};
	};

	std::map<int, std::string> create_icon_items_to_string() {
		return {{icon_items_NONE, "NONE"}, {icon_items_QUESTION, "QUESTION"}, {icon_items_ERROR, "ERROR"}, {icon_items_CANCEL, "CANCEL"}, {icon_items_TRIA_RIGHT, "TRIA_RIGHT"}, {icon_items_TRIA_DOWN, "TRIA_DOWN"}, {icon_items_TRIA_LEFT, "TRIA_LEFT"}, {icon_items_TRIA_UP, "TRIA_UP"}, {icon_items_ARROW_LEFTRIGHT, "ARROW_LEFTRIGHT"}, {icon_items_PLUS, "PLUS"}, {icon_items_DISCLOSURE_TRI_DOWN, "DISCLOSURE_TRI_DOWN"}, {icon_items_DISCLOSURE_TRI_RIGHT, "DISCLOSURE_TRI_RIGHT"}, {icon_items_RADIOBUT_OFF, "RADIOBUT_OFF"}, {icon_items_RADIOBUT_ON, "RADIOBUT_ON"}, {icon_items_MENU_PANEL, "MENU_PANEL"}, {icon_items_BLENDER, "BLENDER"}, {icon_items_GRIP, "GRIP"}, {icon_items_DOT, "DOT"}, {icon_items_COLLAPSEMENU, "COLLAPSEMENU"}, {icon_items_X, "X"}, {icon_items_GO_LEFT, "GO_LEFT"}, {icon_items_PLUG, "PLUG"}, {icon_items_UI, "UI"}, {icon_items_NODE, "NODE"}, {icon_items_NODE_SEL, "NODE_SEL"}, {icon_items_FULLSCREEN, "FULLSCREEN"}, {icon_items_SPLITSCREEN, "SPLITSCREEN"}, {icon_items_RIGHTARROW_THIN, "RIGHTARROW_THIN"}, {icon_items_BORDERMOVE, "BORDERMOVE"}, {icon_items_VIEWZOOM, "VIEWZOOM"}, {icon_items_ZOOMIN, "ZOOMIN"}, {icon_items_ZOOMOUT, "ZOOMOUT"}, {icon_items_PANEL_CLOSE, "PANEL_CLOSE"}, {icon_items_COPY_ID, "COPY_ID"}, {icon_items_EYEDROPPER, "EYEDROPPER"}, {icon_items_LINK_AREA, "LINK_AREA"}, {icon_items_AUTO, "AUTO"}, {icon_items_CHECKBOX_DEHLT, "CHECKBOX_DEHLT"}, {icon_items_CHECKBOX_HLT, "CHECKBOX_HLT"}, {icon_items_UNLOCKED, "UNLOCKED"}, {icon_items_LOCKED, "LOCKED"}, {icon_items_UNPINNED, "UNPINNED"}, {icon_items_PINNED, "PINNED"}, {icon_items_SCREEN_BACK, "SCREEN_BACK"}, {icon_items_RIGHTARROW, "RIGHTARROW"}, {icon_items_DOWNARROW_HLT, "DOWNARROW_HLT"}, {icon_items_DOTSUP, "DOTSUP"}, {icon_items_DOTSDOWN, "DOTSDOWN"}, {icon_items_LINK, "LINK"}, {icon_items_INLINK, "INLINK"}, {icon_items_PLUGIN, "PLUGIN"}, {icon_items_HELP, "HELP"}, {icon_items_GHOST_ENABLED, "GHOST_ENABLED"}, {icon_items_COLOR, "COLOR"}, {icon_items_LINKED, "LINKED"}, {icon_items_UNLINKED, "UNLINKED"}, {icon_items_HAND, "HAND"}, {icon_items_ZOOM_ALL, "ZOOM_ALL"}, {icon_items_ZOOM_SELECTED, "ZOOM_SELECTED"}, {icon_items_ZOOM_PREVIOUS, "ZOOM_PREVIOUS"}, {icon_items_ZOOM_IN, "ZOOM_IN"}, {icon_items_ZOOM_OUT, "ZOOM_OUT"}, {icon_items_RENDER_REGION, "RENDER_REGION"}, {icon_items_BORDER_RECT, "BORDER_RECT"}, {icon_items_BORDER_LASSO, "BORDER_LASSO"}, {icon_items_FREEZE, "FREEZE"}, {icon_items_STYLUS_PRESSURE, "STYLUS_PRESSURE"}, {icon_items_GHOST_DISABLED, "GHOST_DISABLED"}, {icon_items_NEW, "NEW"}, {icon_items_FILE_TICK, "FILE_TICK"}, {icon_items_QUIT, "QUIT"}, {icon_items_URL, "URL"}, {icon_items_RECOVER_LAST, "RECOVER_LAST"}, {icon_items_FULLSCREEN_ENTER, "FULLSCREEN_ENTER"}, {icon_items_FULLSCREEN_EXIT, "FULLSCREEN_EXIT"}, {icon_items_BLANK1, "BLANK1"}, {icon_items_LAMP, "LAMP"}, {icon_items_MATERIAL, "MATERIAL"}, {icon_items_TEXTURE, "TEXTURE"}, {icon_items_ANIM, "ANIM"}, {icon_items_WORLD, "WORLD"}, {icon_items_SCENE, "SCENE"}, {icon_items_EDIT, "EDIT"}, {icon_items_GAME, "GAME"}, {icon_items_RADIO, "RADIO"}, {icon_items_SCRIPT, "SCRIPT"}, {icon_items_PARTICLES, "PARTICLES"}, {icon_items_PHYSICS, "PHYSICS"}, {icon_items_SPEAKER, "SPEAKER"}, {icon_items_TEXTURE_SHADED, "TEXTURE_SHADED"}, {icon_items_VIEW3D, "VIEW3D"}, {icon_items_IPO, "IPO"}, {icon_items_OOPS, "OOPS"}, {icon_items_BUTS, "BUTS"}, {icon_items_FILESEL, "FILESEL"}, {icon_items_IMAGE_COL, "IMAGE_COL"}, {icon_items_INFO, "INFO"}, {icon_items_SEQUENCE, "SEQUENCE"}, {icon_items_TEXT, "TEXT"}, {icon_items_IMASEL, "IMASEL"}, {icon_items_SOUND, "SOUND"}, {icon_items_ACTION, "ACTION"}, {icon_items_NLA, "NLA"}, {icon_items_SCRIPTWIN, "SCRIPTWIN"}, {icon_items_TIME, "TIME"}, {icon_items_NODETREE, "NODETREE"}, {icon_items_LOGIC, "LOGIC"}, {icon_items_CONSOLE, "CONSOLE"}, {icon_items_PREFERENCES, "PREFERENCES"}, {icon_items_CLIP, "CLIP"}, {icon_items_ASSET_MANAGER, "ASSET_MANAGER"}, {icon_items_OBJECT_DATAMODE, "OBJECT_DATAMODE"}, {icon_items_EDITMODE_HLT, "EDITMODE_HLT"}, {icon_items_FACESEL_HLT, "FACESEL_HLT"}, {icon_items_VPAINT_HLT, "VPAINT_HLT"}, {icon_items_TPAINT_HLT, "TPAINT_HLT"}, {icon_items_WPAINT_HLT, "WPAINT_HLT"}, {icon_items_SCULPTMODE_HLT, "SCULPTMODE_HLT"}, {icon_items_POSE_HLT, "POSE_HLT"}, {icon_items_PARTICLEMODE, "PARTICLEMODE"}, {icon_items_LIGHTPAINT, "LIGHTPAINT"}, {icon_items_SCENE_DATA, "SCENE_DATA"}, {icon_items_RENDERLAYERS, "RENDERLAYERS"}, {icon_items_WORLD_DATA, "WORLD_DATA"}, {icon_items_OBJECT_DATA, "OBJECT_DATA"}, {icon_items_MESH_DATA, "MESH_DATA"}, {icon_items_CURVE_DATA, "CURVE_DATA"}, {icon_items_META_DATA, "META_DATA"}, {icon_items_LATTICE_DATA, "LATTICE_DATA"}, {icon_items_LAMP_DATA, "LAMP_DATA"}, {icon_items_MATERIAL_DATA, "MATERIAL_DATA"}, {icon_items_TEXTURE_DATA, "TEXTURE_DATA"}, {icon_items_ANIM_DATA, "ANIM_DATA"}, {icon_items_CAMERA_DATA, "CAMERA_DATA"}, {icon_items_PARTICLE_DATA, "PARTICLE_DATA"}, {icon_items_LIBRARY_DATA_DIRECT, "LIBRARY_DATA_DIRECT"}, {icon_items_GROUP, "GROUP"}, {icon_items_ARMATURE_DATA, "ARMATURE_DATA"}, {icon_items_POSE_DATA, "POSE_DATA"}, {icon_items_BONE_DATA, "BONE_DATA"}, {icon_items_CONSTRAINT, "CONSTRAINT"}, {icon_items_SHAPEKEY_DATA, "SHAPEKEY_DATA"}, {icon_items_CONSTRAINT_BONE, "CONSTRAINT_BONE"}, {icon_items_CAMERA_STEREO, "CAMERA_STEREO"}, {icon_items_PACKAGE, "PACKAGE"}, {icon_items_UGLYPACKAGE, "UGLYPACKAGE"}, {icon_items_BRUSH_DATA, "BRUSH_DATA"}, {icon_items_IMAGE_DATA, "IMAGE_DATA"}, {icon_items_FILE, "FILE"}, {icon_items_FCURVE, "FCURVE"}, {icon_items_FONT_DATA, "FONT_DATA"}, {icon_items_RENDER_RESULT, "RENDER_RESULT"}, {icon_items_SURFACE_DATA, "SURFACE_DATA"}, {icon_items_EMPTY_DATA, "EMPTY_DATA"}, {icon_items_SETTINGS, "SETTINGS"}, {icon_items_RENDER_ANIMATION, "RENDER_ANIMATION"}, {icon_items_RENDER_STILL, "RENDER_STILL"}, {icon_items_LIBRARY_DATA_BROKEN, "LIBRARY_DATA_BROKEN"}, {icon_items_BOIDS, "BOIDS"}, {icon_items_STRANDS, "STRANDS"}, {icon_items_LIBRARY_DATA_INDIRECT, "LIBRARY_DATA_INDIRECT"}, {icon_items_GREASEPENCIL, "GREASEPENCIL"}, {icon_items_LINE_DATA, "LINE_DATA"}, {icon_items_GROUP_BONE, "GROUP_BONE"}, {icon_items_GROUP_VERTEX, "GROUP_VERTEX"}, {icon_items_GROUP_VCOL, "GROUP_VCOL"}, {icon_items_GROUP_UVS, "GROUP_UVS"}, {icon_items_RNA, "RNA"}, {icon_items_RNA_ADD, "RNA_ADD"}, {icon_items_OUTLINER_OB_EMPTY, "OUTLINER_OB_EMPTY"}, {icon_items_OUTLINER_OB_MESH, "OUTLINER_OB_MESH"}, {icon_items_OUTLINER_OB_CURVE, "OUTLINER_OB_CURVE"}, {icon_items_OUTLINER_OB_LATTICE, "OUTLINER_OB_LATTICE"}, {icon_items_OUTLINER_OB_META, "OUTLINER_OB_META"}, {icon_items_OUTLINER_OB_LAMP, "OUTLINER_OB_LAMP"}, {icon_items_OUTLINER_OB_CAMERA, "OUTLINER_OB_CAMERA"}, {icon_items_OUTLINER_OB_ARMATURE, "OUTLINER_OB_ARMATURE"}, {icon_items_OUTLINER_OB_FONT, "OUTLINER_OB_FONT"}, {icon_items_OUTLINER_OB_SURFACE, "OUTLINER_OB_SURFACE"}, {icon_items_OUTLINER_OB_SPEAKER, "OUTLINER_OB_SPEAKER"}, {icon_items_RESTRICT_VIEW_OFF, "RESTRICT_VIEW_OFF"}, {icon_items_RESTRICT_VIEW_ON, "RESTRICT_VIEW_ON"}, {icon_items_RESTRICT_SELECT_OFF, "RESTRICT_SELECT_OFF"}, {icon_items_RESTRICT_SELECT_ON, "RESTRICT_SELECT_ON"}, {icon_items_RESTRICT_RENDER_OFF, "RESTRICT_RENDER_OFF"}, {icon_items_RESTRICT_RENDER_ON, "RESTRICT_RENDER_ON"}, {icon_items_OUTLINER_DATA_EMPTY, "OUTLINER_DATA_EMPTY"}, {icon_items_OUTLINER_DATA_MESH, "OUTLINER_DATA_MESH"}, {icon_items_OUTLINER_DATA_CURVE, "OUTLINER_DATA_CURVE"}, {icon_items_OUTLINER_DATA_LATTICE, "OUTLINER_DATA_LATTICE"}, {icon_items_OUTLINER_DATA_META, "OUTLINER_DATA_META"}, {icon_items_OUTLINER_DATA_LAMP, "OUTLINER_DATA_LAMP"}, {icon_items_OUTLINER_DATA_CAMERA, "OUTLINER_DATA_CAMERA"}, {icon_items_OUTLINER_DATA_ARMATURE, "OUTLINER_DATA_ARMATURE"}, {icon_items_OUTLINER_DATA_FONT, "OUTLINER_DATA_FONT"}, {icon_items_OUTLINER_DATA_SURFACE, "OUTLINER_DATA_SURFACE"}, {icon_items_OUTLINER_DATA_SPEAKER, "OUTLINER_DATA_SPEAKER"}, {icon_items_OUTLINER_DATA_POSE, "OUTLINER_DATA_POSE"}, {icon_items_MESH_PLANE, "MESH_PLANE"}, {icon_items_MESH_CUBE, "MESH_CUBE"}, {icon_items_MESH_CIRCLE, "MESH_CIRCLE"}, {icon_items_MESH_UVSPHERE, "MESH_UVSPHERE"}, {icon_items_MESH_ICOSPHERE, "MESH_ICOSPHERE"}, {icon_items_MESH_GRID, "MESH_GRID"}, {icon_items_MESH_MONKEY, "MESH_MONKEY"}, {icon_items_MESH_CYLINDER, "MESH_CYLINDER"}, {icon_items_MESH_TORUS, "MESH_TORUS"}, {icon_items_MESH_CONE, "MESH_CONE"}, {icon_items_LAMP_POINT, "LAMP_POINT"}, {icon_items_LAMP_SUN, "LAMP_SUN"}, {icon_items_LAMP_SPOT, "LAMP_SPOT"}, {icon_items_LAMP_HEMI, "LAMP_HEMI"}, {icon_items_LAMP_AREA, "LAMP_AREA"}, {icon_items_META_EMPTY, "META_EMPTY"}, {icon_items_META_PLANE, "META_PLANE"}, {icon_items_META_CUBE, "META_CUBE"}, {icon_items_META_BALL, "META_BALL"}, {icon_items_META_ELLIPSOID, "META_ELLIPSOID"}, {icon_items_META_CAPSULE, "META_CAPSULE"}, {icon_items_SURFACE_NCURVE, "SURFACE_NCURVE"}, {icon_items_SURFACE_NCIRCLE, "SURFACE_NCIRCLE"}, {icon_items_SURFACE_NSURFACE, "SURFACE_NSURFACE"}, {icon_items_SURFACE_NCYLINDER, "SURFACE_NCYLINDER"}, {icon_items_SURFACE_NSPHERE, "SURFACE_NSPHERE"}, {icon_items_SURFACE_NTORUS, "SURFACE_NTORUS"}, {icon_items_CURVE_BEZCURVE, "CURVE_BEZCURVE"}, {icon_items_CURVE_BEZCIRCLE, "CURVE_BEZCIRCLE"}, {icon_items_CURVE_NCURVE, "CURVE_NCURVE"}, {icon_items_CURVE_NCIRCLE, "CURVE_NCIRCLE"}, {icon_items_CURVE_PATH, "CURVE_PATH"}, {icon_items_COLOR_RED, "COLOR_RED"}, {icon_items_COLOR_GREEN, "COLOR_GREEN"}, {icon_items_COLOR_BLUE, "COLOR_BLUE"}, {icon_items_TRIA_RIGHT_BAR, "TRIA_RIGHT_BAR"}, {icon_items_TRIA_DOWN_BAR, "TRIA_DOWN_BAR"}, {icon_items_TRIA_LEFT_BAR, "TRIA_LEFT_BAR"}, {icon_items_TRIA_UP_BAR, "TRIA_UP_BAR"}, {icon_items_FORCE_FORCE, "FORCE_FORCE"}, {icon_items_FORCE_WIND, "FORCE_WIND"}, {icon_items_FORCE_VORTEX, "FORCE_VORTEX"}, {icon_items_FORCE_MAGNETIC, "FORCE_MAGNETIC"}, {icon_items_FORCE_HARMONIC, "FORCE_HARMONIC"}, {icon_items_FORCE_CHARGE, "FORCE_CHARGE"}, {icon_items_FORCE_LENNARDJONES, "FORCE_LENNARDJONES"}, {icon_items_FORCE_TEXTURE, "FORCE_TEXTURE"}, {icon_items_FORCE_CURVE, "FORCE_CURVE"}, {icon_items_FORCE_BOID, "FORCE_BOID"}, {icon_items_FORCE_TURBULENCE, "FORCE_TURBULENCE"}, {icon_items_FORCE_DRAG, "FORCE_DRAG"}, {icon_items_FORCE_SMOKEFLOW, "FORCE_SMOKEFLOW"}, {icon_items_MODIFIER, "MODIFIER"}, {icon_items_MOD_WAVE, "MOD_WAVE"}, {icon_items_MOD_BUILD, "MOD_BUILD"}, {icon_items_MOD_DECIM, "MOD_DECIM"}, {icon_items_MOD_MIRROR, "MOD_MIRROR"}, {icon_items_MOD_SOFT, "MOD_SOFT"}, {icon_items_MOD_SUBSURF, "MOD_SUBSURF"}, {icon_items_HOOK, "HOOK"}, {icon_items_MOD_PHYSICS, "MOD_PHYSICS"}, {icon_items_MOD_PARTICLES, "MOD_PARTICLES"}, {icon_items_MOD_BOOLEAN, "MOD_BOOLEAN"}, {icon_items_MOD_EDGESPLIT, "MOD_EDGESPLIT"}, {icon_items_MOD_ARRAY, "MOD_ARRAY"}, {icon_items_MOD_UVPROJECT, "MOD_UVPROJECT"}, {icon_items_MOD_DISPLACE, "MOD_DISPLACE"}, {icon_items_MOD_CURVE, "MOD_CURVE"}, {icon_items_MOD_LATTICE, "MOD_LATTICE"}, {icon_items_CONSTRAINT_DATA, "CONSTRAINT_DATA"}, {icon_items_MOD_ARMATURE, "MOD_ARMATURE"}, {icon_items_MOD_SHRINKWRAP, "MOD_SHRINKWRAP"}, {icon_items_MOD_CAST, "MOD_CAST"}, {icon_items_MOD_MESHDEFORM, "MOD_MESHDEFORM"}, {icon_items_MOD_BEVEL, "MOD_BEVEL"}, {icon_items_MOD_SMOOTH, "MOD_SMOOTH"}, {icon_items_MOD_SIMPLEDEFORM, "MOD_SIMPLEDEFORM"}, {icon_items_MOD_MASK, "MOD_MASK"}, {icon_items_MOD_CLOTH, "MOD_CLOTH"}, {icon_items_MOD_EXPLODE, "MOD_EXPLODE"}, {icon_items_MOD_FLUIDSIM, "MOD_FLUIDSIM"}, {icon_items_MOD_MULTIRES, "MOD_MULTIRES"}, {icon_items_MOD_SMOKE, "MOD_SMOKE"}, {icon_items_MOD_SOLIDIFY, "MOD_SOLIDIFY"}, {icon_items_MOD_SCREW, "MOD_SCREW"}, {icon_items_MOD_VERTEX_WEIGHT, "MOD_VERTEX_WEIGHT"}, {icon_items_MOD_DYNAMICPAINT, "MOD_DYNAMICPAINT"}, {icon_items_MOD_REMESH, "MOD_REMESH"}, {icon_items_MOD_OCEAN, "MOD_OCEAN"}, {icon_items_MOD_WARP, "MOD_WARP"}, {icon_items_MOD_SKIN, "MOD_SKIN"}, {icon_items_MOD_TRIANGULATE, "MOD_TRIANGULATE"}, {icon_items_MOD_WIREFRAME, "MOD_WIREFRAME"}, {icon_items_MOD_DATA_TRANSFER, "MOD_DATA_TRANSFER"}, {icon_items_MOD_NORMALEDIT, "MOD_NORMALEDIT"}, {icon_items_REC, "REC"}, {icon_items_PLAY, "PLAY"}, {icon_items_FF, "FF"}, {icon_items_REW, "REW"}, {icon_items_PAUSE, "PAUSE"}, {icon_items_PREV_KEYFRAME, "PREV_KEYFRAME"}, {icon_items_NEXT_KEYFRAME, "NEXT_KEYFRAME"}, {icon_items_PLAY_AUDIO, "PLAY_AUDIO"}, {icon_items_PLAY_REVERSE, "PLAY_REVERSE"}, {icon_items_PREVIEW_RANGE, "PREVIEW_RANGE"}, {icon_items_ACTION_TWEAK, "ACTION_TWEAK"}, {icon_items_PMARKER_ACT, "PMARKER_ACT"}, {icon_items_PMARKER_SEL, "PMARKER_SEL"}, {icon_items_PMARKER, "PMARKER"}, {icon_items_MARKER_HLT, "MARKER_HLT"}, {icon_items_MARKER, "MARKER"}, {icon_items_SPACE2, "SPACE2"}, {icon_items_SPACE3, "SPACE3"}, {icon_items_KEYINGSET, "KEYINGSET"}, {icon_items_KEY_DEHLT, "KEY_DEHLT"}, {icon_items_KEY_HLT, "KEY_HLT"}, {icon_items_MUTE_IPO_OFF, "MUTE_IPO_OFF"}, {icon_items_MUTE_IPO_ON, "MUTE_IPO_ON"}, {icon_items_VISIBLE_IPO_OFF, "VISIBLE_IPO_OFF"}, {icon_items_VISIBLE_IPO_ON, "VISIBLE_IPO_ON"}, {icon_items_DRIVER, "DRIVER"}, {icon_items_SOLO_OFF, "SOLO_OFF"}, {icon_items_SOLO_ON, "SOLO_ON"}, {icon_items_FRAME_PREV, "FRAME_PREV"}, {icon_items_FRAME_NEXT, "FRAME_NEXT"}, {icon_items_NLA_PUSHDOWN, "NLA_PUSHDOWN"}, {icon_items_IPO_CONSTANT, "IPO_CONSTANT"}, {icon_items_IPO_LINEAR, "IPO_LINEAR"}, {icon_items_IPO_BEZIER, "IPO_BEZIER"}, {icon_items_IPO_SINE, "IPO_SINE"}, {icon_items_IPO_QUAD, "IPO_QUAD"}, {icon_items_IPO_CUBIC, "IPO_CUBIC"}, {icon_items_IPO_QUART, "IPO_QUART"}, {icon_items_IPO_QUINT, "IPO_QUINT"}, {icon_items_IPO_EXPO, "IPO_EXPO"}, {icon_items_IPO_CIRC, "IPO_CIRC"}, {icon_items_IPO_BOUNCE, "IPO_BOUNCE"}, {icon_items_IPO_ELASTIC, "IPO_ELASTIC"}, {icon_items_IPO_BACK, "IPO_BACK"}, {icon_items_IPO_EASE_IN, "IPO_EASE_IN"}, {icon_items_IPO_EASE_OUT, "IPO_EASE_OUT"}, {icon_items_IPO_EASE_IN_OUT, "IPO_EASE_IN_OUT"}, {icon_items_VERTEXSEL, "VERTEXSEL"}, {icon_items_EDGESEL, "EDGESEL"}, {icon_items_FACESEL, "FACESEL"}, {icon_items_LOOPSEL, "LOOPSEL"}, {icon_items_ROTATE, "ROTATE"}, {icon_items_CURSOR, "CURSOR"}, {icon_items_ROTATECOLLECTION, "ROTATECOLLECTION"}, {icon_items_ROTATECENTER, "ROTATECENTER"}, {icon_items_ROTACTIVE, "ROTACTIVE"}, {icon_items_ALIGN, "ALIGN"}, {icon_items_SMOOTHCURVE, "SMOOTHCURVE"}, {icon_items_SPHERECURVE, "SPHERECURVE"}, {icon_items_ROOTCURVE, "ROOTCURVE"}, {icon_items_SHARPCURVE, "SHARPCURVE"}, {icon_items_LINCURVE, "LINCURVE"}, {icon_items_NOCURVE, "NOCURVE"}, {icon_items_RNDCURVE, "RNDCURVE"}, {icon_items_PROP_OFF, "PROP_OFF"}, {icon_items_PROP_ON, "PROP_ON"}, {icon_items_PROP_CON, "PROP_CON"}, {icon_items_SCULPT_DYNTOPO, "SCULPT_DYNTOPO"}, {icon_items_PARTICLE_POINT, "PARTICLE_POINT"}, {icon_items_PARTICLE_TIP, "PARTICLE_TIP"}, {icon_items_PARTICLE_PATH, "PARTICLE_PATH"}, {icon_items_MAN_TRANS, "MAN_TRANS"}, {icon_items_MAN_ROT, "MAN_ROT"}, {icon_items_MAN_SCALE, "MAN_SCALE"}, {icon_items_MANIPUL, "MANIPUL"}, {icon_items_SNAP_OFF, "SNAP_OFF"}, {icon_items_SNAP_ON, "SNAP_ON"}, {icon_items_SNAP_NORMAL, "SNAP_NORMAL"}, {icon_items_SNAP_INCREMENT, "SNAP_INCREMENT"}, {icon_items_SNAP_VERTEX, "SNAP_VERTEX"}, {icon_items_SNAP_EDGE, "SNAP_EDGE"}, {icon_items_SNAP_FACE, "SNAP_FACE"}, {icon_items_SNAP_VOLUME, "SNAP_VOLUME"}, {icon_items_STICKY_UVS_LOC, "STICKY_UVS_LOC"}, {icon_items_STICKY_UVS_DISABLE, "STICKY_UVS_DISABLE"}, {icon_items_STICKY_UVS_VERT, "STICKY_UVS_VERT"}, {icon_items_CLIPUV_DEHLT, "CLIPUV_DEHLT"}, {icon_items_CLIPUV_HLT, "CLIPUV_HLT"}, {icon_items_SNAP_PEEL_OBJECT, "SNAP_PEEL_OBJECT"}, {icon_items_GRID, "GRID"}, {icon_items_PASTEDOWN, "PASTEDOWN"}, {icon_items_COPYDOWN, "COPYDOWN"}, {icon_items_PASTEFLIPUP, "PASTEFLIPUP"}, {icon_items_PASTEFLIPDOWN, "PASTEFLIPDOWN"}, {icon_items_SNAP_SURFACE, "SNAP_SURFACE"}, {icon_items_AUTOMERGE_ON, "AUTOMERGE_ON"}, {icon_items_AUTOMERGE_OFF, "AUTOMERGE_OFF"}, {icon_items_RETOPO, "RETOPO"}, {icon_items_UV_VERTEXSEL, "UV_VERTEXSEL"}, {icon_items_UV_EDGESEL, "UV_EDGESEL"}, {icon_items_UV_FACESEL, "UV_FACESEL"}, {icon_items_UV_ISLANDSEL, "UV_ISLANDSEL"}, {icon_items_UV_SYNC_SELECT, "UV_SYNC_SELECT"}, {icon_items_BBOX, "BBOX"}, {icon_items_WIRE, "WIRE"}, {icon_items_SOLID, "SOLID"}, {icon_items_SMOOTH, "SMOOTH"}, {icon_items_POTATO, "POTATO"}, {icon_items_ORTHO, "ORTHO"}, {icon_items_LOCKVIEW_OFF, "LOCKVIEW_OFF"}, {icon_items_LOCKVIEW_ON, "LOCKVIEW_ON"}, {icon_items_AXIS_SIDE, "AXIS_SIDE"}, {icon_items_AXIS_FRONT, "AXIS_FRONT"}, {icon_items_AXIS_TOP, "AXIS_TOP"}, {icon_items_NDOF_DOM, "NDOF_DOM"}, {icon_items_NDOF_TURN, "NDOF_TURN"}, {icon_items_NDOF_FLY, "NDOF_FLY"}, {icon_items_NDOF_TRANS, "NDOF_TRANS"}, {icon_items_LAYER_USED, "LAYER_USED"}, {icon_items_LAYER_ACTIVE, "LAYER_ACTIVE"}, {icon_items_SORTALPHA, "SORTALPHA"}, {icon_items_SORTBYEXT, "SORTBYEXT"}, {icon_items_SORTTIME, "SORTTIME"}, {icon_items_SORTSIZE, "SORTSIZE"}, {icon_items_LONGDISPLAY, "LONGDISPLAY"}, {icon_items_SHORTDISPLAY, "SHORTDISPLAY"}, {icon_items_GHOST, "GHOST"}, {icon_items_IMGDISPLAY, "IMGDISPLAY"}, {icon_items_SAVE_AS, "SAVE_AS"}, {icon_items_SAVE_COPY, "SAVE_COPY"}, {icon_items_BOOKMARKS, "BOOKMARKS"}, {icon_items_FONTPREVIEW, "FONTPREVIEW"}, {icon_items_FILTER, "FILTER"}, {icon_items_NEWFOLDER, "NEWFOLDER"}, {icon_items_OPEN_RECENT, "OPEN_RECENT"}, {icon_items_FILE_PARENT, "FILE_PARENT"}, {icon_items_FILE_REFRESH, "FILE_REFRESH"}, {icon_items_FILE_FOLDER, "FILE_FOLDER"}, {icon_items_FILE_BLANK, "FILE_BLANK"}, {icon_items_FILE_BLEND, "FILE_BLEND"}, {icon_items_FILE_IMAGE, "FILE_IMAGE"}, {icon_items_FILE_MOVIE, "FILE_MOVIE"}, {icon_items_FILE_SCRIPT, "FILE_SCRIPT"}, {icon_items_FILE_SOUND, "FILE_SOUND"}, {icon_items_FILE_FONT, "FILE_FONT"}, {icon_items_FILE_TEXT, "FILE_TEXT"}, {icon_items_RECOVER_AUTO, "RECOVER_AUTO"}, {icon_items_SAVE_PREFS, "SAVE_PREFS"}, {icon_items_LINK_BLEND, "LINK_BLEND"}, {icon_items_APPEND_BLEND, "APPEND_BLEND"}, {icon_items_IMPORT, "IMPORT"}, {icon_items_EXPORT, "EXPORT"}, {icon_items_EXTERNAL_DATA, "EXTERNAL_DATA"}, {icon_items_LOAD_FACTORY, "LOAD_FACTORY"}, {icon_items_LOOP_BACK, "LOOP_BACK"}, {icon_items_LOOP_FORWARDS, "LOOP_FORWARDS"}, {icon_items_BACK, "BACK"}, {icon_items_FORWARD, "FORWARD"}, {icon_items_FILE_HIDDEN, "FILE_HIDDEN"}, {icon_items_FILE_BACKUP, "FILE_BACKUP"}, {icon_items_DISK_DRIVE, "DISK_DRIVE"}, {icon_items_MATPLANE, "MATPLANE"}, {icon_items_MATSPHERE, "MATSPHERE"}, {icon_items_MATCUBE, "MATCUBE"}, {icon_items_MONKEY, "MONKEY"}, {icon_items_HAIR, "HAIR"}, {icon_items_ALIASED, "ALIASED"}, {icon_items_ANTIALIASED, "ANTIALIASED"}, {icon_items_MAT_SPHERE_SKY, "MAT_SPHERE_SKY"}, {icon_items_WORDWRAP_OFF, "WORDWRAP_OFF"}, {icon_items_WORDWRAP_ON, "WORDWRAP_ON"}, {icon_items_SYNTAX_OFF, "SYNTAX_OFF"}, {icon_items_SYNTAX_ON, "SYNTAX_ON"}, {icon_items_LINENUMBERS_OFF, "LINENUMBERS_OFF"}, {icon_items_LINENUMBERS_ON, "LINENUMBERS_ON"}, {icon_items_SCRIPTPLUGINS, "SCRIPTPLUGINS"}, {icon_items_SEQ_SEQUENCER, "SEQ_SEQUENCER"}, {icon_items_SEQ_PREVIEW, "SEQ_PREVIEW"}, {icon_items_SEQ_LUMA_WAVEFORM, "SEQ_LUMA_WAVEFORM"}, {icon_items_SEQ_CHROMA_SCOPE, "SEQ_CHROMA_SCOPE"}, {icon_items_SEQ_HISTOGRAM, "SEQ_HISTOGRAM"}, {icon_items_SEQ_SPLITVIEW, "SEQ_SPLITVIEW"}, {icon_items_IMAGE_RGB, "IMAGE_RGB"}, {icon_items_IMAGE_RGB_ALPHA, "IMAGE_RGB_ALPHA"}, {icon_items_IMAGE_ALPHA, "IMAGE_ALPHA"}, {icon_items_IMAGE_ZDEPTH, "IMAGE_ZDEPTH"}, {icon_items_IMAGEFILE, "IMAGEFILE"}, {icon_items_BRUSH_ADD, "BRUSH_ADD"}, {icon_items_BRUSH_BLOB, "BRUSH_BLOB"}, {icon_items_BRUSH_BLUR, "BRUSH_BLUR"}, {icon_items_BRUSH_CLAY, "BRUSH_CLAY"}, {icon_items_BRUSH_CLAY_STRIPS, "BRUSH_CLAY_STRIPS"}, {icon_items_BRUSH_CLONE, "BRUSH_CLONE"}, {icon_items_BRUSH_CREASE, "BRUSH_CREASE"}, {icon_items_BRUSH_DARKEN, "BRUSH_DARKEN"}, {icon_items_BRUSH_FILL, "BRUSH_FILL"}, {icon_items_BRUSH_FLATTEN, "BRUSH_FLATTEN"}, {icon_items_BRUSH_GRAB, "BRUSH_GRAB"}, {icon_items_BRUSH_INFLATE, "BRUSH_INFLATE"}, {icon_items_BRUSH_LAYER, "BRUSH_LAYER"}, {icon_items_BRUSH_LIGHTEN, "BRUSH_LIGHTEN"}, {icon_items_BRUSH_MASK, "BRUSH_MASK"}, {icon_items_BRUSH_MIX, "BRUSH_MIX"}, {icon_items_BRUSH_MULTIPLY, "BRUSH_MULTIPLY"}, {icon_items_BRUSH_NUDGE, "BRUSH_NUDGE"}, {icon_items_BRUSH_PINCH, "BRUSH_PINCH"}, {icon_items_BRUSH_SCRAPE, "BRUSH_SCRAPE"}, {icon_items_BRUSH_SCULPT_DRAW, "BRUSH_SCULPT_DRAW"}, {icon_items_BRUSH_SMEAR, "BRUSH_SMEAR"}, {icon_items_BRUSH_SMOOTH, "BRUSH_SMOOTH"}, {icon_items_BRUSH_SNAKE_HOOK, "BRUSH_SNAKE_HOOK"}, {icon_items_BRUSH_SOFTEN, "BRUSH_SOFTEN"}, {icon_items_BRUSH_SUBTRACT, "BRUSH_SUBTRACT"}, {icon_items_BRUSH_TEXDRAW, "BRUSH_TEXDRAW"}, {icon_items_BRUSH_TEXFILL, "BRUSH_TEXFILL"}, {icon_items_BRUSH_TEXMASK, "BRUSH_TEXMASK"}, {icon_items_BRUSH_THUMB, "BRUSH_THUMB"}, {icon_items_BRUSH_ROTATE, "BRUSH_ROTATE"}, {icon_items_BRUSH_VERTEXDRAW, "BRUSH_VERTEXDRAW"}, {icon_items_MATCAP_01, "MATCAP_01"}, {icon_items_MATCAP_02, "MATCAP_02"}, {icon_items_MATCAP_03, "MATCAP_03"}, {icon_items_MATCAP_04, "MATCAP_04"}, {icon_items_MATCAP_05, "MATCAP_05"}, {icon_items_MATCAP_06, "MATCAP_06"}, {icon_items_MATCAP_07, "MATCAP_07"}, {icon_items_MATCAP_08, "MATCAP_08"}, {icon_items_MATCAP_09, "MATCAP_09"}, {icon_items_MATCAP_10, "MATCAP_10"}, {icon_items_MATCAP_11, "MATCAP_11"}, {icon_items_MATCAP_12, "MATCAP_12"}, {icon_items_MATCAP_13, "MATCAP_13"}, {icon_items_MATCAP_14, "MATCAP_14"}, {icon_items_MATCAP_15, "MATCAP_15"}, {icon_items_MATCAP_16, "MATCAP_16"}, {icon_items_MATCAP_17, "MATCAP_17"}, {icon_items_MATCAP_18, "MATCAP_18"}, {icon_items_MATCAP_19, "MATCAP_19"}, {icon_items_MATCAP_20, "MATCAP_20"}, {icon_items_MATCAP_21, "MATCAP_21"}, {icon_items_MATCAP_22, "MATCAP_22"}, {icon_items_MATCAP_23, "MATCAP_23"}, {icon_items_MATCAP_24, "MATCAP_24"}, {icon_items_VIEW3D_VEC, "VIEW3D_VEC"}, {icon_items_EDIT_VEC, "EDIT_VEC"}, {icon_items_EDITMODE_VEC_DEHLT, "EDITMODE_VEC_DEHLT"}, {icon_items_EDITMODE_VEC_HLT, "EDITMODE_VEC_HLT"}, {icon_items_DISCLOSURE_TRI_RIGHT_VEC, "DISCLOSURE_TRI_RIGHT_VEC"}, {icon_items_DISCLOSURE_TRI_DOWN_VEC, "DISCLOSURE_TRI_DOWN_VEC"}, {icon_items_MOVE_UP_VEC, "MOVE_UP_VEC"}, {icon_items_MOVE_DOWN_VEC, "MOVE_DOWN_VEC"}, {icon_items_X_VEC, "X_VEC"}, {icon_items_SMALL_TRI_RIGHT_VEC, "SMALL_TRI_RIGHT_VEC"}};
	};

	const std::map<std::string, int> string_to_icon_items = create_string_to_icon_items();
	const std::map<int, std::string> icon_items_to_string = create_icon_items_to_string();

	icon_items_enum icon() {
		STRING_TYPE_GETTER("icon", static_cast<icon_items_enum>(string_to_icon_items.at(resstr)))
	}

	void icon(icon_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "icon", icon_items_to_string.at(value))
	}
};

class PointerProperty : public Property {
public:
	PointerProperty(PyObject* pyobj) : Property(pyobj) {}
	PointerProperty() : Property(0) { }

	Struct fixed_type() {
		CLASS_TYPES_GETTER(Struct, "fixed_type")
	}
};

class CollectionProperty : public Property {
public:
	CollectionProperty(PyObject* pyobj) : Property(pyobj) {}
	CollectionProperty() : Property(0) { }

	Struct fixed_type() {
		CLASS_TYPES_GETTER(Struct, "fixed_type")
	}
};

class Function : public pyUniplug {
public:
	Function(PyObject* pyobj) : pyUniplug(pyobj) {}
	Function() : pyUniplug(0) { }

	std::string identifier() {
		STRING_TYPE_GETTER("identifier", resstr)
	}

	void identifier(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "identifier", value)
	}

	std::string description() {
		STRING_TYPE_GETTER("description", resstr)
	}

	void description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "description", value)
	}

	std::map<std::string, Property> parameters() {
		MAP_TYPE_GETTER("parameters", Property)
	}

	bool is_registered() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_registered")
	}

	void is_registered(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_registered", value)
	}

	bool is_registered_optional() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_registered_optional")
	}

	void is_registered_optional(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_registered_optional", value)
	}

	bool use_self() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_self")
	}

	void use_self(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_self", value)
	}

	bool use_self_type() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_self_type")
	}

	void use_self_type(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_self_type", value)
	}
};

class BlenderRNA : public pyUniplug {
public:
	BlenderRNA(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlenderRNA() : pyUniplug(0) { }

	std::map<std::string, Struct> structs() {
		MAP_TYPE_GETTER("structs", Struct)
	}
};

class UnknownType : public pyUniplug {
public:
	UnknownType(PyObject* pyobj) : pyUniplug(pyobj) {}
	UnknownType() : pyUniplug(0) { }

};

class AnyType : public pyUniplug {
public:
	AnyType(PyObject* pyobj) : pyUniplug(pyobj) {}
	AnyType() : pyUniplug(0) { }

};

class ID : public pyUniplug {
public:
	ID(PyObject* pyobj) : pyUniplug(pyobj) {}
	ID() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	int users() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "users")
	}

	void users(int value) {
		PRIMITIVE_TYPES_SETTER("i", "users", value)
	}

	bool use_fake_user() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fake_user")
	}

	void use_fake_user(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fake_user", value)
	}

	bool tag() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "tag")
	}

	void tag(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "tag", value)
	}

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	bool is_updated_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated_data")
	}

	void is_updated_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated_data", value)
	}

	bool is_library_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_library_indirect")
	}

	void is_library_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_library_indirect", value)
	}

	Library library();

	ID copy() {
		PYTHON_FUNCTION_CALL("copy")
		CLASS_TYPES_RETURN(ID)
	}

	void user_clear() {
		PYTHON_FUNCTION_CALL("user_clear")
	}

	AnimData animation_data_create();

	void animation_data_clear() {
		PYTHON_FUNCTION_CALL("animation_data_clear")
	}

	enum items_enum {
		items_OBJECT = 1,	
		items_DATA = 2,	
		items_TIME = 4	
	};

	std::map<std::string, int> create_string_to_items() {
		return {{"OBJECT", items_OBJECT}, {"DATA", items_DATA}, {"TIME", items_TIME}};
	};

	std::map<int, std::string> create_items_to_string() {
		return {{items_OBJECT, "OBJECT"}, {items_DATA, "DATA"}, {items_TIME, "TIME"}};
	};

	const std::map<std::string, int> string_to_items = create_string_to_items();
	const std::map<int, std::string> items_to_string = create_items_to_string();

	void update_tag(items_enum refresh) {
		PYTHON_FUNCTION_ARGS_CALL("update_tag", "s", items_to_string.at(refresh))
	}
};

class ImagePreview : public pyUniplug {
public:
	ImagePreview(PyObject* pyobj) : pyUniplug(pyobj) {}
	ImagePreview() : pyUniplug(0) { }

	bool is_image_custom() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_image_custom")
	}

	void is_image_custom(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_image_custom", value)
	}

	std::array<int, 2> image_size() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "image_size", 2)
	}

	void image_size(int values[2]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "image_size", 2)
	}

	std::vector<int> image_pixels() {
		PRIMITIVE_TYPES_VECTOR_GETTER(int, PyLong_AsLong(item), "image_pixels")
	}

	void image_pixels(int values[]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "image_pixels", sizeof(values)/sizeof(values[0]))
	}

	bool is_icon_custom() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_icon_custom")
	}

	void is_icon_custom(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_icon_custom", value)
	}

	std::array<int, 2> icon_size() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "icon_size", 2)
	}

	void icon_size(int values[2]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "icon_size", 2)
	}

	std::vector<int> icon_pixels() {
		PRIMITIVE_TYPES_VECTOR_GETTER(int, PyLong_AsLong(item), "icon_pixels")
	}

	void icon_pixels(int values[]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "icon_pixels", sizeof(values)/sizeof(values[0]))
	}

	int icon_id() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "icon_id")
	}

	void icon_id(int value) {
		PRIMITIVE_TYPES_SETTER("i", "icon_id", value)
	}

	void reload() {
		PYTHON_FUNCTION_CALL("reload")
	}
};

class PropertyGroupItem : public pyUniplug {
public:
	PropertyGroupItem(PyObject* pyobj) : pyUniplug(pyobj) {}
	PropertyGroupItem() : pyUniplug(0) { }

	std::string string_value() {
		STRING_TYPE_GETTER("string", resstr)
	}

	void string_value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "string", value)
	}

	int int_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "int")
	}

	void int_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "int", value)
	}

	std::array<int, 1> int_array() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "int_array", 1)
	}

	void int_array(int values[1]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "int_array", 1)
	}

	float float_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "float")
	}

	void float_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "float", value)
	}

	std::array<float, 1> float_array() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "float_array", 1)
	}

	void float_array(float values[1]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "float_array", 1)
	}

	float double_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "double")
	}

	void double_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "double", value)
	}

	std::array<float, 1> double_array() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "double_array", 1)
	}

	void double_array(float values[1]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "double_array", 1)
	}

	PropertyGroup group();

	std::map<std::string, PropertyGroup> collection();

	std::map<std::string, PropertyGroup> idp_array();
};

class PropertyGroup : public pyUniplug {
public:
	PropertyGroup(PyObject* pyobj) : pyUniplug(pyobj) {}
	PropertyGroup() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class Library : public ID {
public:
	Library(PyObject* pyobj) : ID(pyobj) {}
	Library() : ID(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	Library parent() {
		CLASS_TYPES_GETTER(Library, "parent")
	}

	PackedFile packed_file();
};

class Texture : public ID {
public:
	Texture(PyObject* pyobj) : ID(pyobj) {}
	Texture() : ID(0) { }

	enum texture_type_items_enum {
		texture_type_items_NONE = 0,	
		texture_type_items_BLEND = 5,	
		texture_type_items_CLOUDS = 1,	
		texture_type_items_DISTORTED_NOISE = 13,	
		texture_type_items_ENVIRONMENT_MAP = 10,	
		texture_type_items_IMAGE = 8,	
		texture_type_items_MAGIC = 4,	
		texture_type_items_MARBLE = 3,	
		texture_type_items_MUSGRAVE = 11,	
		texture_type_items_NOISE = 7,	
		texture_type_items_OCEAN = 16,	
		texture_type_items_POINT_DENSITY = 14,	
		texture_type_items_STUCCI = 6,	
		texture_type_items_VORONOI = 12,	
		texture_type_items_VOXEL_DATA = 15,	
		texture_type_items_WOOD = 2	
	};

	std::map<std::string, int> create_string_to_texture_type_items() {
		return {{"NONE", texture_type_items_NONE}, {"BLEND", texture_type_items_BLEND}, {"CLOUDS", texture_type_items_CLOUDS}, {"DISTORTED_NOISE", texture_type_items_DISTORTED_NOISE}, {"ENVIRONMENT_MAP", texture_type_items_ENVIRONMENT_MAP}, {"IMAGE", texture_type_items_IMAGE}, {"MAGIC", texture_type_items_MAGIC}, {"MARBLE", texture_type_items_MARBLE}, {"MUSGRAVE", texture_type_items_MUSGRAVE}, {"NOISE", texture_type_items_NOISE}, {"OCEAN", texture_type_items_OCEAN}, {"POINT_DENSITY", texture_type_items_POINT_DENSITY}, {"STUCCI", texture_type_items_STUCCI}, {"VORONOI", texture_type_items_VORONOI}, {"VOXEL_DATA", texture_type_items_VOXEL_DATA}, {"WOOD", texture_type_items_WOOD}};
	};

	std::map<int, std::string> create_texture_type_items_to_string() {
		return {{texture_type_items_NONE, "NONE"}, {texture_type_items_BLEND, "BLEND"}, {texture_type_items_CLOUDS, "CLOUDS"}, {texture_type_items_DISTORTED_NOISE, "DISTORTED_NOISE"}, {texture_type_items_ENVIRONMENT_MAP, "ENVIRONMENT_MAP"}, {texture_type_items_IMAGE, "IMAGE"}, {texture_type_items_MAGIC, "MAGIC"}, {texture_type_items_MARBLE, "MARBLE"}, {texture_type_items_MUSGRAVE, "MUSGRAVE"}, {texture_type_items_NOISE, "NOISE"}, {texture_type_items_OCEAN, "OCEAN"}, {texture_type_items_POINT_DENSITY, "POINT_DENSITY"}, {texture_type_items_STUCCI, "STUCCI"}, {texture_type_items_VORONOI, "VORONOI"}, {texture_type_items_VOXEL_DATA, "VOXEL_DATA"}, {texture_type_items_WOOD, "WOOD"}};
	};

	const std::map<std::string, int> string_to_texture_type_items = create_string_to_texture_type_items();
	const std::map<int, std::string> texture_type_items_to_string = create_texture_type_items_to_string();

	texture_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<texture_type_items_enum>(string_to_texture_type_items.at(resstr)))
	}

	void type(texture_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", texture_type_items_to_string.at(value))
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool use_color_ramp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_color_ramp")
	}

	void use_color_ramp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_color_ramp", value)
	}

	ColorRamp color_ramp();

	float intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "intensity")
	}

	void intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "intensity", value)
	}

	float contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "contrast")
	}

	void contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "contrast", value)
	}

	float saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "saturation")
	}

	void saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "saturation", value)
	}

	float factor_red() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor_red")
	}

	void factor_red(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor_red", value)
	}

	float factor_green() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor_green")
	}

	void factor_green(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor_green", value)
	}

	float factor_blue() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor_blue")
	}

	void factor_blue(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor_blue", value)
	}

	bool use_preview_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preview_alpha")
	}

	void use_preview_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preview_alpha", value)
	}

	bool use_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_nodes")
	}

	void use_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_nodes", value)
	}

	NodeTree node_tree();

	AnimData animation_data();

	VFLOAT4 evaluate(VFLOAT3 value) {
		ARRAY_TO_PYOBJ(value, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("evaluate", "O", value_tupleval)
		DECREF_ARRAY_ITEMS(value, 3)
		CREATE_SINGLE_PYOBJ(result)
		POD_VECTOR_TYPES_CONV(result, FLOAT, (float)PyFloat_AsDouble(item), 4)
		NONCLASS_TYPES_RETURN(result_res)
	}
};

class CloudsTexture : public Texture {
public:
	CloudsTexture(PyObject* pyobj) : Texture(pyobj) {}
	CloudsTexture() : Texture(0) { }

	float noise_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_scale")
	}

	void noise_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_scale", value)
	}

	int noise_depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "noise_depth")
	}

	void noise_depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "noise_depth", value)
	}

	enum prop_noise_basis_items_enum {
		prop_noise_basis_items_BLENDER_ORIGINAL = 0,	
		prop_noise_basis_items_ORIGINAL_PERLIN = 1,	
		prop_noise_basis_items_IMPROVED_PERLIN = 2,	
		prop_noise_basis_items_VORONOI_F1 = 3,	
		prop_noise_basis_items_VORONOI_F2 = 4,	
		prop_noise_basis_items_VORONOI_F3 = 5,	
		prop_noise_basis_items_VORONOI_F4 = 6,	
		prop_noise_basis_items_VORONOI_F2_F1 = 7,	
		prop_noise_basis_items_VORONOI_CRACKLE = 8,	
		prop_noise_basis_items_CELL_NOISE = 14	
	};

	std::map<std::string, int> create_string_to_prop_noise_basis_items() {
		return {{"BLENDER_ORIGINAL", prop_noise_basis_items_BLENDER_ORIGINAL}, {"ORIGINAL_PERLIN", prop_noise_basis_items_ORIGINAL_PERLIN}, {"IMPROVED_PERLIN", prop_noise_basis_items_IMPROVED_PERLIN}, {"VORONOI_F1", prop_noise_basis_items_VORONOI_F1}, {"VORONOI_F2", prop_noise_basis_items_VORONOI_F2}, {"VORONOI_F3", prop_noise_basis_items_VORONOI_F3}, {"VORONOI_F4", prop_noise_basis_items_VORONOI_F4}, {"VORONOI_F2_F1", prop_noise_basis_items_VORONOI_F2_F1}, {"VORONOI_CRACKLE", prop_noise_basis_items_VORONOI_CRACKLE}, {"CELL_NOISE", prop_noise_basis_items_CELL_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_basis_items_to_string() {
		return {{prop_noise_basis_items_BLENDER_ORIGINAL, "BLENDER_ORIGINAL"}, {prop_noise_basis_items_ORIGINAL_PERLIN, "ORIGINAL_PERLIN"}, {prop_noise_basis_items_IMPROVED_PERLIN, "IMPROVED_PERLIN"}, {prop_noise_basis_items_VORONOI_F1, "VORONOI_F1"}, {prop_noise_basis_items_VORONOI_F2, "VORONOI_F2"}, {prop_noise_basis_items_VORONOI_F3, "VORONOI_F3"}, {prop_noise_basis_items_VORONOI_F4, "VORONOI_F4"}, {prop_noise_basis_items_VORONOI_F2_F1, "VORONOI_F2_F1"}, {prop_noise_basis_items_VORONOI_CRACKLE, "VORONOI_CRACKLE"}, {prop_noise_basis_items_CELL_NOISE, "CELL_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_basis_items = create_string_to_prop_noise_basis_items();
	const std::map<int, std::string> prop_noise_basis_items_to_string = create_prop_noise_basis_items_to_string();

	prop_noise_basis_items_enum noise_basis() {
		STRING_TYPE_GETTER("noise_basis", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_basis(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis", prop_noise_basis_items_to_string.at(value))
	}

	enum prop_noise_type_enum {
		prop_noise_type_SOFT_NOISE = 0,	
		prop_noise_type_HARD_NOISE = 1	
	};

	std::map<std::string, int> create_string_to_prop_noise_type() {
		return {{"SOFT_NOISE", prop_noise_type_SOFT_NOISE}, {"HARD_NOISE", prop_noise_type_HARD_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_type_to_string() {
		return {{prop_noise_type_SOFT_NOISE, "SOFT_NOISE"}, {prop_noise_type_HARD_NOISE, "HARD_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_type = create_string_to_prop_noise_type();
	const std::map<int, std::string> prop_noise_type_to_string = create_prop_noise_type_to_string();

	prop_noise_type_enum noise_type() {
		STRING_TYPE_GETTER("noise_type", static_cast<prop_noise_type_enum>(string_to_prop_noise_type.at(resstr)))
	}

	void noise_type(prop_noise_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_type", prop_noise_type_to_string.at(value))
	}

	enum prop_clouds_stype_enum {
		prop_clouds_stype_GRAYSCALE = 0,	
		prop_clouds_stype_COLOR = 1	
	};

	std::map<std::string, int> create_string_to_prop_clouds_stype() {
		return {{"GRAYSCALE", prop_clouds_stype_GRAYSCALE}, {"COLOR", prop_clouds_stype_COLOR}};
	};

	std::map<int, std::string> create_prop_clouds_stype_to_string() {
		return {{prop_clouds_stype_GRAYSCALE, "GRAYSCALE"}, {prop_clouds_stype_COLOR, "COLOR"}};
	};

	const std::map<std::string, int> string_to_prop_clouds_stype = create_string_to_prop_clouds_stype();
	const std::map<int, std::string> prop_clouds_stype_to_string = create_prop_clouds_stype_to_string();

	prop_clouds_stype_enum cloud_type() {
		STRING_TYPE_GETTER("cloud_type", static_cast<prop_clouds_stype_enum>(string_to_prop_clouds_stype.at(resstr)))
	}

	void cloud_type(prop_clouds_stype_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "cloud_type", prop_clouds_stype_to_string.at(value))
	}

	float nabla() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "nabla")
	}

	void nabla(float value) {
		PRIMITIVE_TYPES_SETTER("f", "nabla", value)
	}
};

class WoodTexture : public Texture {
public:
	WoodTexture(PyObject* pyobj) : Texture(pyobj) {}
	WoodTexture() : Texture(0) { }

	float noise_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_scale")
	}

	void noise_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_scale", value)
	}

	float turbulence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbulence")
	}

	void turbulence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbulence", value)
	}

	enum prop_noise_basis_items_enum {
		prop_noise_basis_items_BLENDER_ORIGINAL = 0,	
		prop_noise_basis_items_ORIGINAL_PERLIN = 1,	
		prop_noise_basis_items_IMPROVED_PERLIN = 2,	
		prop_noise_basis_items_VORONOI_F1 = 3,	
		prop_noise_basis_items_VORONOI_F2 = 4,	
		prop_noise_basis_items_VORONOI_F3 = 5,	
		prop_noise_basis_items_VORONOI_F4 = 6,	
		prop_noise_basis_items_VORONOI_F2_F1 = 7,	
		prop_noise_basis_items_VORONOI_CRACKLE = 8,	
		prop_noise_basis_items_CELL_NOISE = 14	
	};

	std::map<std::string, int> create_string_to_prop_noise_basis_items() {
		return {{"BLENDER_ORIGINAL", prop_noise_basis_items_BLENDER_ORIGINAL}, {"ORIGINAL_PERLIN", prop_noise_basis_items_ORIGINAL_PERLIN}, {"IMPROVED_PERLIN", prop_noise_basis_items_IMPROVED_PERLIN}, {"VORONOI_F1", prop_noise_basis_items_VORONOI_F1}, {"VORONOI_F2", prop_noise_basis_items_VORONOI_F2}, {"VORONOI_F3", prop_noise_basis_items_VORONOI_F3}, {"VORONOI_F4", prop_noise_basis_items_VORONOI_F4}, {"VORONOI_F2_F1", prop_noise_basis_items_VORONOI_F2_F1}, {"VORONOI_CRACKLE", prop_noise_basis_items_VORONOI_CRACKLE}, {"CELL_NOISE", prop_noise_basis_items_CELL_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_basis_items_to_string() {
		return {{prop_noise_basis_items_BLENDER_ORIGINAL, "BLENDER_ORIGINAL"}, {prop_noise_basis_items_ORIGINAL_PERLIN, "ORIGINAL_PERLIN"}, {prop_noise_basis_items_IMPROVED_PERLIN, "IMPROVED_PERLIN"}, {prop_noise_basis_items_VORONOI_F1, "VORONOI_F1"}, {prop_noise_basis_items_VORONOI_F2, "VORONOI_F2"}, {prop_noise_basis_items_VORONOI_F3, "VORONOI_F3"}, {prop_noise_basis_items_VORONOI_F4, "VORONOI_F4"}, {prop_noise_basis_items_VORONOI_F2_F1, "VORONOI_F2_F1"}, {prop_noise_basis_items_VORONOI_CRACKLE, "VORONOI_CRACKLE"}, {prop_noise_basis_items_CELL_NOISE, "CELL_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_basis_items = create_string_to_prop_noise_basis_items();
	const std::map<int, std::string> prop_noise_basis_items_to_string = create_prop_noise_basis_items_to_string();

	prop_noise_basis_items_enum noise_basis() {
		STRING_TYPE_GETTER("noise_basis", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_basis(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis", prop_noise_basis_items_to_string.at(value))
	}

	enum prop_noise_type_enum {
		prop_noise_type_SOFT_NOISE = 0,	
		prop_noise_type_HARD_NOISE = 1	
	};

	std::map<std::string, int> create_string_to_prop_noise_type() {
		return {{"SOFT_NOISE", prop_noise_type_SOFT_NOISE}, {"HARD_NOISE", prop_noise_type_HARD_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_type_to_string() {
		return {{prop_noise_type_SOFT_NOISE, "SOFT_NOISE"}, {prop_noise_type_HARD_NOISE, "HARD_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_type = create_string_to_prop_noise_type();
	const std::map<int, std::string> prop_noise_type_to_string = create_prop_noise_type_to_string();

	prop_noise_type_enum noise_type() {
		STRING_TYPE_GETTER("noise_type", static_cast<prop_noise_type_enum>(string_to_prop_noise_type.at(resstr)))
	}

	void noise_type(prop_noise_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_type", prop_noise_type_to_string.at(value))
	}

	enum prop_wood_stype_enum {
		prop_wood_stype_BANDS = 0,	
		prop_wood_stype_RINGS = 1,	
		prop_wood_stype_BANDNOISE = 2,	
		prop_wood_stype_RINGNOISE = 3	
	};

	std::map<std::string, int> create_string_to_prop_wood_stype() {
		return {{"BANDS", prop_wood_stype_BANDS}, {"RINGS", prop_wood_stype_RINGS}, {"BANDNOISE", prop_wood_stype_BANDNOISE}, {"RINGNOISE", prop_wood_stype_RINGNOISE}};
	};

	std::map<int, std::string> create_prop_wood_stype_to_string() {
		return {{prop_wood_stype_BANDS, "BANDS"}, {prop_wood_stype_RINGS, "RINGS"}, {prop_wood_stype_BANDNOISE, "BANDNOISE"}, {prop_wood_stype_RINGNOISE, "RINGNOISE"}};
	};

	const std::map<std::string, int> string_to_prop_wood_stype = create_string_to_prop_wood_stype();
	const std::map<int, std::string> prop_wood_stype_to_string = create_prop_wood_stype_to_string();

	prop_wood_stype_enum wood_type() {
		STRING_TYPE_GETTER("wood_type", static_cast<prop_wood_stype_enum>(string_to_prop_wood_stype.at(resstr)))
	}

	void wood_type(prop_wood_stype_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "wood_type", prop_wood_stype_to_string.at(value))
	}

	enum prop_wood_noisebasis2_enum {
		prop_wood_noisebasis2_SIN = 0,	
		prop_wood_noisebasis2_SAW = 1,	
		prop_wood_noisebasis2_TRI = 2	
	};

	std::map<std::string, int> create_string_to_prop_wood_noisebasis2() {
		return {{"SIN", prop_wood_noisebasis2_SIN}, {"SAW", prop_wood_noisebasis2_SAW}, {"TRI", prop_wood_noisebasis2_TRI}};
	};

	std::map<int, std::string> create_prop_wood_noisebasis2_to_string() {
		return {{prop_wood_noisebasis2_SIN, "SIN"}, {prop_wood_noisebasis2_SAW, "SAW"}, {prop_wood_noisebasis2_TRI, "TRI"}};
	};

	const std::map<std::string, int> string_to_prop_wood_noisebasis2 = create_string_to_prop_wood_noisebasis2();
	const std::map<int, std::string> prop_wood_noisebasis2_to_string = create_prop_wood_noisebasis2_to_string();

	prop_wood_noisebasis2_enum noise_basis_2() {
		STRING_TYPE_GETTER("noise_basis_2", static_cast<prop_wood_noisebasis2_enum>(string_to_prop_wood_noisebasis2.at(resstr)))
	}

	void noise_basis_2(prop_wood_noisebasis2_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis_2", prop_wood_noisebasis2_to_string.at(value))
	}

	float nabla() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "nabla")
	}

	void nabla(float value) {
		PRIMITIVE_TYPES_SETTER("f", "nabla", value)
	}
};

class MarbleTexture : public Texture {
public:
	MarbleTexture(PyObject* pyobj) : Texture(pyobj) {}
	MarbleTexture() : Texture(0) { }

	float noise_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_scale")
	}

	void noise_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_scale", value)
	}

	float turbulence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbulence")
	}

	void turbulence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbulence", value)
	}

	int noise_depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "noise_depth")
	}

	void noise_depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "noise_depth", value)
	}

	enum prop_noise_type_enum {
		prop_noise_type_SOFT_NOISE = 0,	
		prop_noise_type_HARD_NOISE = 1	
	};

	std::map<std::string, int> create_string_to_prop_noise_type() {
		return {{"SOFT_NOISE", prop_noise_type_SOFT_NOISE}, {"HARD_NOISE", prop_noise_type_HARD_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_type_to_string() {
		return {{prop_noise_type_SOFT_NOISE, "SOFT_NOISE"}, {prop_noise_type_HARD_NOISE, "HARD_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_type = create_string_to_prop_noise_type();
	const std::map<int, std::string> prop_noise_type_to_string = create_prop_noise_type_to_string();

	prop_noise_type_enum noise_type() {
		STRING_TYPE_GETTER("noise_type", static_cast<prop_noise_type_enum>(string_to_prop_noise_type.at(resstr)))
	}

	void noise_type(prop_noise_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_type", prop_noise_type_to_string.at(value))
	}

	enum prop_marble_stype_enum {
		prop_marble_stype_SOFT = 0,	
		prop_marble_stype_SHARP = 1,	
		prop_marble_stype_SHARPER = 2	
	};

	std::map<std::string, int> create_string_to_prop_marble_stype() {
		return {{"SOFT", prop_marble_stype_SOFT}, {"SHARP", prop_marble_stype_SHARP}, {"SHARPER", prop_marble_stype_SHARPER}};
	};

	std::map<int, std::string> create_prop_marble_stype_to_string() {
		return {{prop_marble_stype_SOFT, "SOFT"}, {prop_marble_stype_SHARP, "SHARP"}, {prop_marble_stype_SHARPER, "SHARPER"}};
	};

	const std::map<std::string, int> string_to_prop_marble_stype = create_string_to_prop_marble_stype();
	const std::map<int, std::string> prop_marble_stype_to_string = create_prop_marble_stype_to_string();

	prop_marble_stype_enum marble_type() {
		STRING_TYPE_GETTER("marble_type", static_cast<prop_marble_stype_enum>(string_to_prop_marble_stype.at(resstr)))
	}

	void marble_type(prop_marble_stype_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "marble_type", prop_marble_stype_to_string.at(value))
	}

	enum prop_noise_basis_items_enum {
		prop_noise_basis_items_BLENDER_ORIGINAL = 0,	
		prop_noise_basis_items_ORIGINAL_PERLIN = 1,	
		prop_noise_basis_items_IMPROVED_PERLIN = 2,	
		prop_noise_basis_items_VORONOI_F1 = 3,	
		prop_noise_basis_items_VORONOI_F2 = 4,	
		prop_noise_basis_items_VORONOI_F3 = 5,	
		prop_noise_basis_items_VORONOI_F4 = 6,	
		prop_noise_basis_items_VORONOI_F2_F1 = 7,	
		prop_noise_basis_items_VORONOI_CRACKLE = 8,	
		prop_noise_basis_items_CELL_NOISE = 14	
	};

	std::map<std::string, int> create_string_to_prop_noise_basis_items() {
		return {{"BLENDER_ORIGINAL", prop_noise_basis_items_BLENDER_ORIGINAL}, {"ORIGINAL_PERLIN", prop_noise_basis_items_ORIGINAL_PERLIN}, {"IMPROVED_PERLIN", prop_noise_basis_items_IMPROVED_PERLIN}, {"VORONOI_F1", prop_noise_basis_items_VORONOI_F1}, {"VORONOI_F2", prop_noise_basis_items_VORONOI_F2}, {"VORONOI_F3", prop_noise_basis_items_VORONOI_F3}, {"VORONOI_F4", prop_noise_basis_items_VORONOI_F4}, {"VORONOI_F2_F1", prop_noise_basis_items_VORONOI_F2_F1}, {"VORONOI_CRACKLE", prop_noise_basis_items_VORONOI_CRACKLE}, {"CELL_NOISE", prop_noise_basis_items_CELL_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_basis_items_to_string() {
		return {{prop_noise_basis_items_BLENDER_ORIGINAL, "BLENDER_ORIGINAL"}, {prop_noise_basis_items_ORIGINAL_PERLIN, "ORIGINAL_PERLIN"}, {prop_noise_basis_items_IMPROVED_PERLIN, "IMPROVED_PERLIN"}, {prop_noise_basis_items_VORONOI_F1, "VORONOI_F1"}, {prop_noise_basis_items_VORONOI_F2, "VORONOI_F2"}, {prop_noise_basis_items_VORONOI_F3, "VORONOI_F3"}, {prop_noise_basis_items_VORONOI_F4, "VORONOI_F4"}, {prop_noise_basis_items_VORONOI_F2_F1, "VORONOI_F2_F1"}, {prop_noise_basis_items_VORONOI_CRACKLE, "VORONOI_CRACKLE"}, {prop_noise_basis_items_CELL_NOISE, "CELL_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_basis_items = create_string_to_prop_noise_basis_items();
	const std::map<int, std::string> prop_noise_basis_items_to_string = create_prop_noise_basis_items_to_string();

	prop_noise_basis_items_enum noise_basis() {
		STRING_TYPE_GETTER("noise_basis", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_basis(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis", prop_noise_basis_items_to_string.at(value))
	}

	enum prop_marble_noisebasis2_enum {
		prop_marble_noisebasis2_SIN = 0,	
		prop_marble_noisebasis2_SAW = 1,	
		prop_marble_noisebasis2_TRI = 2	
	};

	std::map<std::string, int> create_string_to_prop_marble_noisebasis2() {
		return {{"SIN", prop_marble_noisebasis2_SIN}, {"SAW", prop_marble_noisebasis2_SAW}, {"TRI", prop_marble_noisebasis2_TRI}};
	};

	std::map<int, std::string> create_prop_marble_noisebasis2_to_string() {
		return {{prop_marble_noisebasis2_SIN, "SIN"}, {prop_marble_noisebasis2_SAW, "SAW"}, {prop_marble_noisebasis2_TRI, "TRI"}};
	};

	const std::map<std::string, int> string_to_prop_marble_noisebasis2 = create_string_to_prop_marble_noisebasis2();
	const std::map<int, std::string> prop_marble_noisebasis2_to_string = create_prop_marble_noisebasis2_to_string();

	prop_marble_noisebasis2_enum noise_basis_2() {
		STRING_TYPE_GETTER("noise_basis_2", static_cast<prop_marble_noisebasis2_enum>(string_to_prop_marble_noisebasis2.at(resstr)))
	}

	void noise_basis_2(prop_marble_noisebasis2_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis_2", prop_marble_noisebasis2_to_string.at(value))
	}

	float nabla() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "nabla")
	}

	void nabla(float value) {
		PRIMITIVE_TYPES_SETTER("f", "nabla", value)
	}
};

class MagicTexture : public Texture {
public:
	MagicTexture(PyObject* pyobj) : Texture(pyobj) {}
	MagicTexture() : Texture(0) { }

	float turbulence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbulence")
	}

	void turbulence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbulence", value)
	}

	int noise_depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "noise_depth")
	}

	void noise_depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "noise_depth", value)
	}
};

class BlendTexture : public Texture {
public:
	BlendTexture(PyObject* pyobj) : Texture(pyobj) {}
	BlendTexture() : Texture(0) { }

	enum prop_blend_progression_enum {
		prop_blend_progression_LINEAR = 0,	
		prop_blend_progression_QUADRATIC = 1,	
		prop_blend_progression_EASING = 2,	
		prop_blend_progression_DIAGONAL = 3,	
		prop_blend_progression_SPHERICAL = 4,	
		prop_blend_progression_QUADRATIC_SPHERE = 5,	
		prop_blend_progression_RADIAL = 6	
	};

	std::map<std::string, int> create_string_to_prop_blend_progression() {
		return {{"LINEAR", prop_blend_progression_LINEAR}, {"QUADRATIC", prop_blend_progression_QUADRATIC}, {"EASING", prop_blend_progression_EASING}, {"DIAGONAL", prop_blend_progression_DIAGONAL}, {"SPHERICAL", prop_blend_progression_SPHERICAL}, {"QUADRATIC_SPHERE", prop_blend_progression_QUADRATIC_SPHERE}, {"RADIAL", prop_blend_progression_RADIAL}};
	};

	std::map<int, std::string> create_prop_blend_progression_to_string() {
		return {{prop_blend_progression_LINEAR, "LINEAR"}, {prop_blend_progression_QUADRATIC, "QUADRATIC"}, {prop_blend_progression_EASING, "EASING"}, {prop_blend_progression_DIAGONAL, "DIAGONAL"}, {prop_blend_progression_SPHERICAL, "SPHERICAL"}, {prop_blend_progression_QUADRATIC_SPHERE, "QUADRATIC_SPHERE"}, {prop_blend_progression_RADIAL, "RADIAL"}};
	};

	const std::map<std::string, int> string_to_prop_blend_progression = create_string_to_prop_blend_progression();
	const std::map<int, std::string> prop_blend_progression_to_string = create_prop_blend_progression_to_string();

	prop_blend_progression_enum progression() {
		STRING_TYPE_GETTER("progression", static_cast<prop_blend_progression_enum>(string_to_prop_blend_progression.at(resstr)))
	}

	void progression(prop_blend_progression_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "progression", prop_blend_progression_to_string.at(value))
	}

	enum prop_flip_axis_items_enum {
		prop_flip_axis_items_HORIZONTAL = 0,	
		prop_flip_axis_items_VERTICAL = 2	
	};

	std::map<std::string, int> create_string_to_prop_flip_axis_items() {
		return {{"HORIZONTAL", prop_flip_axis_items_HORIZONTAL}, {"VERTICAL", prop_flip_axis_items_VERTICAL}};
	};

	std::map<int, std::string> create_prop_flip_axis_items_to_string() {
		return {{prop_flip_axis_items_HORIZONTAL, "HORIZONTAL"}, {prop_flip_axis_items_VERTICAL, "VERTICAL"}};
	};

	const std::map<std::string, int> string_to_prop_flip_axis_items = create_string_to_prop_flip_axis_items();
	const std::map<int, std::string> prop_flip_axis_items_to_string = create_prop_flip_axis_items_to_string();

	prop_flip_axis_items_enum use_flip_axis() {
		STRING_TYPE_GETTER("use_flip_axis", static_cast<prop_flip_axis_items_enum>(string_to_prop_flip_axis_items.at(resstr)))
	}

	void use_flip_axis(prop_flip_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "use_flip_axis", prop_flip_axis_items_to_string.at(value))
	}
};

class StucciTexture : public Texture {
public:
	StucciTexture(PyObject* pyobj) : Texture(pyobj) {}
	StucciTexture() : Texture(0) { }

	float turbulence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbulence")
	}

	void turbulence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbulence", value)
	}

	enum prop_noise_basis_items_enum {
		prop_noise_basis_items_BLENDER_ORIGINAL = 0,	
		prop_noise_basis_items_ORIGINAL_PERLIN = 1,	
		prop_noise_basis_items_IMPROVED_PERLIN = 2,	
		prop_noise_basis_items_VORONOI_F1 = 3,	
		prop_noise_basis_items_VORONOI_F2 = 4,	
		prop_noise_basis_items_VORONOI_F3 = 5,	
		prop_noise_basis_items_VORONOI_F4 = 6,	
		prop_noise_basis_items_VORONOI_F2_F1 = 7,	
		prop_noise_basis_items_VORONOI_CRACKLE = 8,	
		prop_noise_basis_items_CELL_NOISE = 14	
	};

	std::map<std::string, int> create_string_to_prop_noise_basis_items() {
		return {{"BLENDER_ORIGINAL", prop_noise_basis_items_BLENDER_ORIGINAL}, {"ORIGINAL_PERLIN", prop_noise_basis_items_ORIGINAL_PERLIN}, {"IMPROVED_PERLIN", prop_noise_basis_items_IMPROVED_PERLIN}, {"VORONOI_F1", prop_noise_basis_items_VORONOI_F1}, {"VORONOI_F2", prop_noise_basis_items_VORONOI_F2}, {"VORONOI_F3", prop_noise_basis_items_VORONOI_F3}, {"VORONOI_F4", prop_noise_basis_items_VORONOI_F4}, {"VORONOI_F2_F1", prop_noise_basis_items_VORONOI_F2_F1}, {"VORONOI_CRACKLE", prop_noise_basis_items_VORONOI_CRACKLE}, {"CELL_NOISE", prop_noise_basis_items_CELL_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_basis_items_to_string() {
		return {{prop_noise_basis_items_BLENDER_ORIGINAL, "BLENDER_ORIGINAL"}, {prop_noise_basis_items_ORIGINAL_PERLIN, "ORIGINAL_PERLIN"}, {prop_noise_basis_items_IMPROVED_PERLIN, "IMPROVED_PERLIN"}, {prop_noise_basis_items_VORONOI_F1, "VORONOI_F1"}, {prop_noise_basis_items_VORONOI_F2, "VORONOI_F2"}, {prop_noise_basis_items_VORONOI_F3, "VORONOI_F3"}, {prop_noise_basis_items_VORONOI_F4, "VORONOI_F4"}, {prop_noise_basis_items_VORONOI_F2_F1, "VORONOI_F2_F1"}, {prop_noise_basis_items_VORONOI_CRACKLE, "VORONOI_CRACKLE"}, {prop_noise_basis_items_CELL_NOISE, "CELL_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_basis_items = create_string_to_prop_noise_basis_items();
	const std::map<int, std::string> prop_noise_basis_items_to_string = create_prop_noise_basis_items_to_string();

	prop_noise_basis_items_enum noise_basis() {
		STRING_TYPE_GETTER("noise_basis", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_basis(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis", prop_noise_basis_items_to_string.at(value))
	}

	float noise_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_scale")
	}

	void noise_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_scale", value)
	}

	enum prop_noise_type_enum {
		prop_noise_type_SOFT_NOISE = 0,	
		prop_noise_type_HARD_NOISE = 1	
	};

	std::map<std::string, int> create_string_to_prop_noise_type() {
		return {{"SOFT_NOISE", prop_noise_type_SOFT_NOISE}, {"HARD_NOISE", prop_noise_type_HARD_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_type_to_string() {
		return {{prop_noise_type_SOFT_NOISE, "SOFT_NOISE"}, {prop_noise_type_HARD_NOISE, "HARD_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_type = create_string_to_prop_noise_type();
	const std::map<int, std::string> prop_noise_type_to_string = create_prop_noise_type_to_string();

	prop_noise_type_enum noise_type() {
		STRING_TYPE_GETTER("noise_type", static_cast<prop_noise_type_enum>(string_to_prop_noise_type.at(resstr)))
	}

	void noise_type(prop_noise_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_type", prop_noise_type_to_string.at(value))
	}

	enum prop_stucci_stype_enum {
		prop_stucci_stype_PLASTIC = 0,	
		prop_stucci_stype_WALL_IN = 1,	
		prop_stucci_stype_WALL_OUT = 2	
	};

	std::map<std::string, int> create_string_to_prop_stucci_stype() {
		return {{"PLASTIC", prop_stucci_stype_PLASTIC}, {"WALL_IN", prop_stucci_stype_WALL_IN}, {"WALL_OUT", prop_stucci_stype_WALL_OUT}};
	};

	std::map<int, std::string> create_prop_stucci_stype_to_string() {
		return {{prop_stucci_stype_PLASTIC, "PLASTIC"}, {prop_stucci_stype_WALL_IN, "WALL_IN"}, {prop_stucci_stype_WALL_OUT, "WALL_OUT"}};
	};

	const std::map<std::string, int> string_to_prop_stucci_stype = create_string_to_prop_stucci_stype();
	const std::map<int, std::string> prop_stucci_stype_to_string = create_prop_stucci_stype_to_string();

	prop_stucci_stype_enum stucci_type() {
		STRING_TYPE_GETTER("stucci_type", static_cast<prop_stucci_stype_enum>(string_to_prop_stucci_stype.at(resstr)))
	}

	void stucci_type(prop_stucci_stype_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "stucci_type", prop_stucci_stype_to_string.at(value))
	}
};

class NoiseTexture : public Texture {
public:
	NoiseTexture(PyObject* pyobj) : Texture(pyobj) {}
	NoiseTexture() : Texture(0) { }
};

class ImageTexture : public Texture {
public:
	ImageTexture(PyObject* pyobj) : Texture(pyobj) {}
	ImageTexture() : Texture(0) { }

	bool use_interpolation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_interpolation")
	}

	void use_interpolation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_interpolation", value)
	}

	bool use_flip_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_axis")
	}

	void use_flip_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_axis", value)
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool use_calculate_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_calculate_alpha")
	}

	void use_calculate_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_calculate_alpha", value)
	}

	bool invert_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_alpha")
	}

	void invert_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_alpha", value)
	}

	bool use_mipmap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mipmap")
	}

	void use_mipmap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mipmap", value)
	}

	bool use_mipmap_gauss() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mipmap_gauss")
	}

	void use_mipmap_gauss(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mipmap_gauss", value)
	}

	enum texture_filter_items_enum {
		texture_filter_items_BOX = 0,	
		texture_filter_items_EWA = 1,	
		texture_filter_items_FELINE = 2,	
		texture_filter_items_AREA = 3	
	};

	std::map<std::string, int> create_string_to_texture_filter_items() {
		return {{"BOX", texture_filter_items_BOX}, {"EWA", texture_filter_items_EWA}, {"FELINE", texture_filter_items_FELINE}, {"AREA", texture_filter_items_AREA}};
	};

	std::map<int, std::string> create_texture_filter_items_to_string() {
		return {{texture_filter_items_BOX, "BOX"}, {texture_filter_items_EWA, "EWA"}, {texture_filter_items_FELINE, "FELINE"}, {texture_filter_items_AREA, "AREA"}};
	};

	const std::map<std::string, int> string_to_texture_filter_items = create_string_to_texture_filter_items();
	const std::map<int, std::string> texture_filter_items_to_string = create_texture_filter_items_to_string();

	texture_filter_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<texture_filter_items_enum>(string_to_texture_filter_items.at(resstr)))
	}

	void filter_type(texture_filter_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", texture_filter_items_to_string.at(value))
	}

	int filter_probes() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "filter_probes")
	}

	void filter_probes(int value) {
		PRIMITIVE_TYPES_SETTER("i", "filter_probes", value)
	}

	int filter_eccentricity() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "filter_eccentricity")
	}

	void filter_eccentricity(int value) {
		PRIMITIVE_TYPES_SETTER("i", "filter_eccentricity", value)
	}

	bool use_filter_size_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_size_min")
	}

	void use_filter_size_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_size_min", value)
	}

	float filter_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "filter_size")
	}

	void filter_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "filter_size", value)
	}

	enum prop_image_extension_enum {
		prop_image_extension_EXTEND = 1,	
		prop_image_extension_CLIP = 2,	
		prop_image_extension_CLIP_CUBE = 4,	
		prop_image_extension_REPEAT = 3,	
		prop_image_extension_CHECKER = 5	
	};

	std::map<std::string, int> create_string_to_prop_image_extension() {
		return {{"EXTEND", prop_image_extension_EXTEND}, {"CLIP", prop_image_extension_CLIP}, {"CLIP_CUBE", prop_image_extension_CLIP_CUBE}, {"REPEAT", prop_image_extension_REPEAT}, {"CHECKER", prop_image_extension_CHECKER}};
	};

	std::map<int, std::string> create_prop_image_extension_to_string() {
		return {{prop_image_extension_EXTEND, "EXTEND"}, {prop_image_extension_CLIP, "CLIP"}, {prop_image_extension_CLIP_CUBE, "CLIP_CUBE"}, {prop_image_extension_REPEAT, "REPEAT"}, {prop_image_extension_CHECKER, "CHECKER"}};
	};

	const std::map<std::string, int> string_to_prop_image_extension = create_string_to_prop_image_extension();
	const std::map<int, std::string> prop_image_extension_to_string = create_prop_image_extension_to_string();

	prop_image_extension_enum extension() {
		STRING_TYPE_GETTER("extension", static_cast<prop_image_extension_enum>(string_to_prop_image_extension.at(resstr)))
	}

	void extension(prop_image_extension_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "extension", prop_image_extension_to_string.at(value))
	}

	int repeat_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "repeat_x")
	}

	void repeat_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "repeat_x", value)
	}

	int repeat_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "repeat_y")
	}

	void repeat_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "repeat_y", value)
	}

	bool use_mirror_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_x")
	}

	void use_mirror_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_x", value)
	}

	bool use_mirror_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_y")
	}

	void use_mirror_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_y", value)
	}

	bool use_checker_odd() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_checker_odd")
	}

	void use_checker_odd(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_checker_odd", value)
	}

	bool use_checker_even() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_checker_even")
	}

	void use_checker_even(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_checker_even", value)
	}

	float checker_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "checker_distance")
	}

	void checker_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "checker_distance", value)
	}

	float crop_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crop_min_x")
	}

	void crop_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crop_min_x", value)
	}

	float crop_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crop_min_y")
	}

	void crop_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crop_min_y", value)
	}

	float crop_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crop_max_x")
	}

	void crop_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crop_max_x", value)
	}

	float crop_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crop_max_y")
	}

	void crop_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crop_max_y", value)
	}

	Image image();

	ImageUser image_user();

	bool use_normal_map() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal_map")
	}

	void use_normal_map(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal_map", value)
	}

	bool use_derivative_map() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_derivative_map")
	}

	void use_derivative_map(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_derivative_map", value)
	}
};

class EnvironmentMapTexture : public Texture {
public:
	EnvironmentMapTexture(PyObject* pyobj) : Texture(pyobj) {}
	EnvironmentMapTexture() : Texture(0) { }

	Image image();

	ImageUser image_user();

	bool use_mipmap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mipmap")
	}

	void use_mipmap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mipmap", value)
	}

	bool use_mipmap_gauss() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mipmap_gauss")
	}

	void use_mipmap_gauss(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mipmap_gauss", value)
	}

	enum texture_filter_items_enum {
		texture_filter_items_BOX = 0,	
		texture_filter_items_EWA = 1,	
		texture_filter_items_FELINE = 2,	
		texture_filter_items_AREA = 3	
	};

	std::map<std::string, int> create_string_to_texture_filter_items() {
		return {{"BOX", texture_filter_items_BOX}, {"EWA", texture_filter_items_EWA}, {"FELINE", texture_filter_items_FELINE}, {"AREA", texture_filter_items_AREA}};
	};

	std::map<int, std::string> create_texture_filter_items_to_string() {
		return {{texture_filter_items_BOX, "BOX"}, {texture_filter_items_EWA, "EWA"}, {texture_filter_items_FELINE, "FELINE"}, {texture_filter_items_AREA, "AREA"}};
	};

	const std::map<std::string, int> string_to_texture_filter_items = create_string_to_texture_filter_items();
	const std::map<int, std::string> texture_filter_items_to_string = create_texture_filter_items_to_string();

	texture_filter_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<texture_filter_items_enum>(string_to_texture_filter_items.at(resstr)))
	}

	void filter_type(texture_filter_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", texture_filter_items_to_string.at(value))
	}

	int filter_probes() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "filter_probes")
	}

	void filter_probes(int value) {
		PRIMITIVE_TYPES_SETTER("i", "filter_probes", value)
	}

	int filter_eccentricity() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "filter_eccentricity")
	}

	void filter_eccentricity(int value) {
		PRIMITIVE_TYPES_SETTER("i", "filter_eccentricity", value)
	}

	bool use_filter_size_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_size_min")
	}

	void use_filter_size_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_size_min", value)
	}

	float filter_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "filter_size")
	}

	void filter_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "filter_size", value)
	}

	EnvironmentMap environment_map();
};

class MusgraveTexture : public Texture {
public:
	MusgraveTexture(PyObject* pyobj) : Texture(pyobj) {}
	MusgraveTexture() : Texture(0) { }

	enum prop_musgrave_type_enum {
		prop_musgrave_type_MULTIFRACTAL = 0,	
		prop_musgrave_type_RIDGED_MULTIFRACTAL = 1,	
		prop_musgrave_type_HYBRID_MULTIFRACTAL = 2,	
		prop_musgrave_type_FBM = 3,	
		prop_musgrave_type_HETERO_TERRAIN = 4	
	};

	std::map<std::string, int> create_string_to_prop_musgrave_type() {
		return {{"MULTIFRACTAL", prop_musgrave_type_MULTIFRACTAL}, {"RIDGED_MULTIFRACTAL", prop_musgrave_type_RIDGED_MULTIFRACTAL}, {"HYBRID_MULTIFRACTAL", prop_musgrave_type_HYBRID_MULTIFRACTAL}, {"FBM", prop_musgrave_type_FBM}, {"HETERO_TERRAIN", prop_musgrave_type_HETERO_TERRAIN}};
	};

	std::map<int, std::string> create_prop_musgrave_type_to_string() {
		return {{prop_musgrave_type_MULTIFRACTAL, "MULTIFRACTAL"}, {prop_musgrave_type_RIDGED_MULTIFRACTAL, "RIDGED_MULTIFRACTAL"}, {prop_musgrave_type_HYBRID_MULTIFRACTAL, "HYBRID_MULTIFRACTAL"}, {prop_musgrave_type_FBM, "FBM"}, {prop_musgrave_type_HETERO_TERRAIN, "HETERO_TERRAIN"}};
	};

	const std::map<std::string, int> string_to_prop_musgrave_type = create_string_to_prop_musgrave_type();
	const std::map<int, std::string> prop_musgrave_type_to_string = create_prop_musgrave_type_to_string();

	prop_musgrave_type_enum musgrave_type() {
		STRING_TYPE_GETTER("musgrave_type", static_cast<prop_musgrave_type_enum>(string_to_prop_musgrave_type.at(resstr)))
	}

	void musgrave_type(prop_musgrave_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "musgrave_type", prop_musgrave_type_to_string.at(value))
	}

	float dimension_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dimension_max")
	}

	void dimension_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dimension_max", value)
	}

	float lacunarity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lacunarity")
	}

	void lacunarity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lacunarity", value)
	}

	float octaves() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "octaves")
	}

	void octaves(float value) {
		PRIMITIVE_TYPES_SETTER("f", "octaves", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	float gain() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gain")
	}

	void gain(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gain", value)
	}

	float noise_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_intensity")
	}

	void noise_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_intensity", value)
	}

	float noise_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_scale")
	}

	void noise_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_scale", value)
	}

	enum prop_noise_basis_items_enum {
		prop_noise_basis_items_BLENDER_ORIGINAL = 0,	
		prop_noise_basis_items_ORIGINAL_PERLIN = 1,	
		prop_noise_basis_items_IMPROVED_PERLIN = 2,	
		prop_noise_basis_items_VORONOI_F1 = 3,	
		prop_noise_basis_items_VORONOI_F2 = 4,	
		prop_noise_basis_items_VORONOI_F3 = 5,	
		prop_noise_basis_items_VORONOI_F4 = 6,	
		prop_noise_basis_items_VORONOI_F2_F1 = 7,	
		prop_noise_basis_items_VORONOI_CRACKLE = 8,	
		prop_noise_basis_items_CELL_NOISE = 14	
	};

	std::map<std::string, int> create_string_to_prop_noise_basis_items() {
		return {{"BLENDER_ORIGINAL", prop_noise_basis_items_BLENDER_ORIGINAL}, {"ORIGINAL_PERLIN", prop_noise_basis_items_ORIGINAL_PERLIN}, {"IMPROVED_PERLIN", prop_noise_basis_items_IMPROVED_PERLIN}, {"VORONOI_F1", prop_noise_basis_items_VORONOI_F1}, {"VORONOI_F2", prop_noise_basis_items_VORONOI_F2}, {"VORONOI_F3", prop_noise_basis_items_VORONOI_F3}, {"VORONOI_F4", prop_noise_basis_items_VORONOI_F4}, {"VORONOI_F2_F1", prop_noise_basis_items_VORONOI_F2_F1}, {"VORONOI_CRACKLE", prop_noise_basis_items_VORONOI_CRACKLE}, {"CELL_NOISE", prop_noise_basis_items_CELL_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_basis_items_to_string() {
		return {{prop_noise_basis_items_BLENDER_ORIGINAL, "BLENDER_ORIGINAL"}, {prop_noise_basis_items_ORIGINAL_PERLIN, "ORIGINAL_PERLIN"}, {prop_noise_basis_items_IMPROVED_PERLIN, "IMPROVED_PERLIN"}, {prop_noise_basis_items_VORONOI_F1, "VORONOI_F1"}, {prop_noise_basis_items_VORONOI_F2, "VORONOI_F2"}, {prop_noise_basis_items_VORONOI_F3, "VORONOI_F3"}, {prop_noise_basis_items_VORONOI_F4, "VORONOI_F4"}, {prop_noise_basis_items_VORONOI_F2_F1, "VORONOI_F2_F1"}, {prop_noise_basis_items_VORONOI_CRACKLE, "VORONOI_CRACKLE"}, {prop_noise_basis_items_CELL_NOISE, "CELL_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_basis_items = create_string_to_prop_noise_basis_items();
	const std::map<int, std::string> prop_noise_basis_items_to_string = create_prop_noise_basis_items_to_string();

	prop_noise_basis_items_enum noise_basis() {
		STRING_TYPE_GETTER("noise_basis", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_basis(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis", prop_noise_basis_items_to_string.at(value))
	}

	float nabla() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "nabla")
	}

	void nabla(float value) {
		PRIMITIVE_TYPES_SETTER("f", "nabla", value)
	}
};

class VoronoiTexture : public Texture {
public:
	VoronoiTexture(PyObject* pyobj) : Texture(pyobj) {}
	VoronoiTexture() : Texture(0) { }

	float weight_1() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight_1")
	}

	void weight_1(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight_1", value)
	}

	float weight_2() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight_2")
	}

	void weight_2(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight_2", value)
	}

	float weight_3() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight_3")
	}

	void weight_3(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight_3", value)
	}

	float weight_4() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight_4")
	}

	void weight_4(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight_4", value)
	}

	float minkovsky_exponent() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "minkovsky_exponent")
	}

	void minkovsky_exponent(float value) {
		PRIMITIVE_TYPES_SETTER("f", "minkovsky_exponent", value)
	}

	enum prop_distance_metric_items_enum {
		prop_distance_metric_items_DISTANCE = 0,	
		prop_distance_metric_items_DISTANCE_SQUARED = 1,	
		prop_distance_metric_items_MANHATTAN = 2,	
		prop_distance_metric_items_CHEBYCHEV = 3,	
		prop_distance_metric_items_MINKOVSKY_HALF = 4,	
		prop_distance_metric_items_MINKOVSKY_FOUR = 5,	
		prop_distance_metric_items_MINKOVSKY = 6	
	};

	std::map<std::string, int> create_string_to_prop_distance_metric_items() {
		return {{"DISTANCE", prop_distance_metric_items_DISTANCE}, {"DISTANCE_SQUARED", prop_distance_metric_items_DISTANCE_SQUARED}, {"MANHATTAN", prop_distance_metric_items_MANHATTAN}, {"CHEBYCHEV", prop_distance_metric_items_CHEBYCHEV}, {"MINKOVSKY_HALF", prop_distance_metric_items_MINKOVSKY_HALF}, {"MINKOVSKY_FOUR", prop_distance_metric_items_MINKOVSKY_FOUR}, {"MINKOVSKY", prop_distance_metric_items_MINKOVSKY}};
	};

	std::map<int, std::string> create_prop_distance_metric_items_to_string() {
		return {{prop_distance_metric_items_DISTANCE, "DISTANCE"}, {prop_distance_metric_items_DISTANCE_SQUARED, "DISTANCE_SQUARED"}, {prop_distance_metric_items_MANHATTAN, "MANHATTAN"}, {prop_distance_metric_items_CHEBYCHEV, "CHEBYCHEV"}, {prop_distance_metric_items_MINKOVSKY_HALF, "MINKOVSKY_HALF"}, {prop_distance_metric_items_MINKOVSKY_FOUR, "MINKOVSKY_FOUR"}, {prop_distance_metric_items_MINKOVSKY, "MINKOVSKY"}};
	};

	const std::map<std::string, int> string_to_prop_distance_metric_items = create_string_to_prop_distance_metric_items();
	const std::map<int, std::string> prop_distance_metric_items_to_string = create_prop_distance_metric_items_to_string();

	prop_distance_metric_items_enum distance_metric() {
		STRING_TYPE_GETTER("distance_metric", static_cast<prop_distance_metric_items_enum>(string_to_prop_distance_metric_items.at(resstr)))
	}

	void distance_metric(prop_distance_metric_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distance_metric", prop_distance_metric_items_to_string.at(value))
	}

	enum prop_coloring_items_enum {
		prop_coloring_items_INTENSITY = 0,	
		prop_coloring_items_POSITION = 1,	
		prop_coloring_items_POSITION_OUTLINE = 2,	
		prop_coloring_items_POSITION_OUTLINE_INTENSITY = 3	
	};

	std::map<std::string, int> create_string_to_prop_coloring_items() {
		return {{"INTENSITY", prop_coloring_items_INTENSITY}, {"POSITION", prop_coloring_items_POSITION}, {"POSITION_OUTLINE", prop_coloring_items_POSITION_OUTLINE}, {"POSITION_OUTLINE_INTENSITY", prop_coloring_items_POSITION_OUTLINE_INTENSITY}};
	};

	std::map<int, std::string> create_prop_coloring_items_to_string() {
		return {{prop_coloring_items_INTENSITY, "INTENSITY"}, {prop_coloring_items_POSITION, "POSITION"}, {prop_coloring_items_POSITION_OUTLINE, "POSITION_OUTLINE"}, {prop_coloring_items_POSITION_OUTLINE_INTENSITY, "POSITION_OUTLINE_INTENSITY"}};
	};

	const std::map<std::string, int> string_to_prop_coloring_items = create_string_to_prop_coloring_items();
	const std::map<int, std::string> prop_coloring_items_to_string = create_prop_coloring_items_to_string();

	prop_coloring_items_enum color_mode() {
		STRING_TYPE_GETTER("color_mode", static_cast<prop_coloring_items_enum>(string_to_prop_coloring_items.at(resstr)))
	}

	void color_mode(prop_coloring_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_mode", prop_coloring_items_to_string.at(value))
	}

	float noise_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_intensity")
	}

	void noise_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_intensity", value)
	}

	float noise_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_scale")
	}

	void noise_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_scale", value)
	}

	float nabla() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "nabla")
	}

	void nabla(float value) {
		PRIMITIVE_TYPES_SETTER("f", "nabla", value)
	}
};

class DistortedNoiseTexture : public Texture {
public:
	DistortedNoiseTexture(PyObject* pyobj) : Texture(pyobj) {}
	DistortedNoiseTexture() : Texture(0) { }

	float distortion() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distortion")
	}

	void distortion(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distortion", value)
	}

	float noise_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise_scale")
	}

	void noise_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise_scale", value)
	}

	enum prop_noise_basis_items_enum {
		prop_noise_basis_items_BLENDER_ORIGINAL = 0,	
		prop_noise_basis_items_ORIGINAL_PERLIN = 1,	
		prop_noise_basis_items_IMPROVED_PERLIN = 2,	
		prop_noise_basis_items_VORONOI_F1 = 3,	
		prop_noise_basis_items_VORONOI_F2 = 4,	
		prop_noise_basis_items_VORONOI_F3 = 5,	
		prop_noise_basis_items_VORONOI_F4 = 6,	
		prop_noise_basis_items_VORONOI_F2_F1 = 7,	
		prop_noise_basis_items_VORONOI_CRACKLE = 8,	
		prop_noise_basis_items_CELL_NOISE = 14	
	};

	std::map<std::string, int> create_string_to_prop_noise_basis_items() {
		return {{"BLENDER_ORIGINAL", prop_noise_basis_items_BLENDER_ORIGINAL}, {"ORIGINAL_PERLIN", prop_noise_basis_items_ORIGINAL_PERLIN}, {"IMPROVED_PERLIN", prop_noise_basis_items_IMPROVED_PERLIN}, {"VORONOI_F1", prop_noise_basis_items_VORONOI_F1}, {"VORONOI_F2", prop_noise_basis_items_VORONOI_F2}, {"VORONOI_F3", prop_noise_basis_items_VORONOI_F3}, {"VORONOI_F4", prop_noise_basis_items_VORONOI_F4}, {"VORONOI_F2_F1", prop_noise_basis_items_VORONOI_F2_F1}, {"VORONOI_CRACKLE", prop_noise_basis_items_VORONOI_CRACKLE}, {"CELL_NOISE", prop_noise_basis_items_CELL_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_basis_items_to_string() {
		return {{prop_noise_basis_items_BLENDER_ORIGINAL, "BLENDER_ORIGINAL"}, {prop_noise_basis_items_ORIGINAL_PERLIN, "ORIGINAL_PERLIN"}, {prop_noise_basis_items_IMPROVED_PERLIN, "IMPROVED_PERLIN"}, {prop_noise_basis_items_VORONOI_F1, "VORONOI_F1"}, {prop_noise_basis_items_VORONOI_F2, "VORONOI_F2"}, {prop_noise_basis_items_VORONOI_F3, "VORONOI_F3"}, {prop_noise_basis_items_VORONOI_F4, "VORONOI_F4"}, {prop_noise_basis_items_VORONOI_F2_F1, "VORONOI_F2_F1"}, {prop_noise_basis_items_VORONOI_CRACKLE, "VORONOI_CRACKLE"}, {prop_noise_basis_items_CELL_NOISE, "CELL_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_basis_items = create_string_to_prop_noise_basis_items();
	const std::map<int, std::string> prop_noise_basis_items_to_string = create_prop_noise_basis_items_to_string();

	prop_noise_basis_items_enum noise_basis() {
		STRING_TYPE_GETTER("noise_basis", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_basis(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis", prop_noise_basis_items_to_string.at(value))
	}

	prop_noise_basis_items_enum noise_distortion() {
		STRING_TYPE_GETTER("noise_distortion", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_distortion(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_distortion", prop_noise_basis_items_to_string.at(value))
	}

	float nabla() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "nabla")
	}

	void nabla(float value) {
		PRIMITIVE_TYPES_SETTER("f", "nabla", value)
	}
};

class PointDensity : public pyUniplug {
public:
	PointDensity(PyObject* pyobj) : pyUniplug(pyobj) {}
	PointDensity() : pyUniplug(0) { }

	enum point_source_items_enum {
		point_source_items_PARTICLE_SYSTEM = 0,	
		point_source_items_OBJECT = 1	
	};

	std::map<std::string, int> create_string_to_point_source_items() {
		return {{"PARTICLE_SYSTEM", point_source_items_PARTICLE_SYSTEM}, {"OBJECT", point_source_items_OBJECT}};
	};

	std::map<int, std::string> create_point_source_items_to_string() {
		return {{point_source_items_PARTICLE_SYSTEM, "PARTICLE_SYSTEM"}, {point_source_items_OBJECT, "OBJECT"}};
	};

	const std::map<std::string, int> string_to_point_source_items = create_string_to_point_source_items();
	const std::map<int, std::string> point_source_items_to_string = create_point_source_items_to_string();

	point_source_items_enum point_source() {
		STRING_TYPE_GETTER("point_source", static_cast<point_source_items_enum>(string_to_point_source_items.at(resstr)))
	}

	void point_source(point_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "point_source", point_source_items_to_string.at(value))
	}

	Object object_value();

	ParticleSystem particle_system();

	enum particle_cache_items_enum {
		particle_cache_items_OBJECT_LOCATION = 0,	
		particle_cache_items_OBJECT_SPACE = 1,	
		particle_cache_items_WORLD_SPACE = 2	
	};

	std::map<std::string, int> create_string_to_particle_cache_items() {
		return {{"OBJECT_LOCATION", particle_cache_items_OBJECT_LOCATION}, {"OBJECT_SPACE", particle_cache_items_OBJECT_SPACE}, {"WORLD_SPACE", particle_cache_items_WORLD_SPACE}};
	};

	std::map<int, std::string> create_particle_cache_items_to_string() {
		return {{particle_cache_items_OBJECT_LOCATION, "OBJECT_LOCATION"}, {particle_cache_items_OBJECT_SPACE, "OBJECT_SPACE"}, {particle_cache_items_WORLD_SPACE, "WORLD_SPACE"}};
	};

	const std::map<std::string, int> string_to_particle_cache_items = create_string_to_particle_cache_items();
	const std::map<int, std::string> particle_cache_items_to_string = create_particle_cache_items_to_string();

	particle_cache_items_enum particle_cache_space() {
		STRING_TYPE_GETTER("particle_cache_space", static_cast<particle_cache_items_enum>(string_to_particle_cache_items.at(resstr)))
	}

	void particle_cache_space(particle_cache_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "particle_cache_space", particle_cache_items_to_string.at(value))
	}

	enum vertex_cache_items_enum {
		vertex_cache_items_OBJECT_LOCATION = 0,	
		vertex_cache_items_OBJECT_SPACE = 1,	
		vertex_cache_items_WORLD_SPACE = 2	
	};

	std::map<std::string, int> create_string_to_vertex_cache_items() {
		return {{"OBJECT_LOCATION", vertex_cache_items_OBJECT_LOCATION}, {"OBJECT_SPACE", vertex_cache_items_OBJECT_SPACE}, {"WORLD_SPACE", vertex_cache_items_WORLD_SPACE}};
	};

	std::map<int, std::string> create_vertex_cache_items_to_string() {
		return {{vertex_cache_items_OBJECT_LOCATION, "OBJECT_LOCATION"}, {vertex_cache_items_OBJECT_SPACE, "OBJECT_SPACE"}, {vertex_cache_items_WORLD_SPACE, "WORLD_SPACE"}};
	};

	const std::map<std::string, int> string_to_vertex_cache_items = create_string_to_vertex_cache_items();
	const std::map<int, std::string> vertex_cache_items_to_string = create_vertex_cache_items_to_string();

	vertex_cache_items_enum vertex_cache_space() {
		STRING_TYPE_GETTER("vertex_cache_space", static_cast<vertex_cache_items_enum>(string_to_vertex_cache_items.at(resstr)))
	}

	void vertex_cache_space(vertex_cache_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_cache_space", vertex_cache_items_to_string.at(value))
	}

	float radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radius")
	}

	void radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radius", value)
	}

	enum falloff_items_enum {
		falloff_items_STANDARD = 0,	
		falloff_items_SMOOTH = 1,	
		falloff_items_SOFT = 2,	
		falloff_items_CONSTANT = 3,	
		falloff_items_ROOT = 4,	
		falloff_items_PARTICLE_AGE = 5,	
		falloff_items_PARTICLE_VELOCITY = 6	
	};

	std::map<std::string, int> create_string_to_falloff_items() {
		return {{"STANDARD", falloff_items_STANDARD}, {"SMOOTH", falloff_items_SMOOTH}, {"SOFT", falloff_items_SOFT}, {"CONSTANT", falloff_items_CONSTANT}, {"ROOT", falloff_items_ROOT}, {"PARTICLE_AGE", falloff_items_PARTICLE_AGE}, {"PARTICLE_VELOCITY", falloff_items_PARTICLE_VELOCITY}};
	};

	std::map<int, std::string> create_falloff_items_to_string() {
		return {{falloff_items_STANDARD, "STANDARD"}, {falloff_items_SMOOTH, "SMOOTH"}, {falloff_items_SOFT, "SOFT"}, {falloff_items_CONSTANT, "CONSTANT"}, {falloff_items_ROOT, "ROOT"}, {falloff_items_PARTICLE_AGE, "PARTICLE_AGE"}, {falloff_items_PARTICLE_VELOCITY, "PARTICLE_VELOCITY"}};
	};

	const std::map<std::string, int> string_to_falloff_items = create_string_to_falloff_items();
	const std::map<int, std::string> falloff_items_to_string = create_falloff_items_to_string();

	falloff_items_enum falloff() {
		STRING_TYPE_GETTER("falloff", static_cast<falloff_items_enum>(string_to_falloff_items.at(resstr)))
	}

	void falloff(falloff_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff", falloff_items_to_string.at(value))
	}

	float falloff_soft() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff_soft")
	}

	void falloff_soft(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff_soft", value)
	}

	enum color_source_items_enum {
		color_source_items_CONSTANT = 0,	
		color_source_items_PARTICLE_AGE = 1,	
		color_source_items_PARTICLE_SPEED = 2,	
		color_source_items_PARTICLE_VELOCITY = 3	
	};

	std::map<std::string, int> create_string_to_color_source_items() {
		return {{"CONSTANT", color_source_items_CONSTANT}, {"PARTICLE_AGE", color_source_items_PARTICLE_AGE}, {"PARTICLE_SPEED", color_source_items_PARTICLE_SPEED}, {"PARTICLE_VELOCITY", color_source_items_PARTICLE_VELOCITY}};
	};

	std::map<int, std::string> create_color_source_items_to_string() {
		return {{color_source_items_CONSTANT, "CONSTANT"}, {color_source_items_PARTICLE_AGE, "PARTICLE_AGE"}, {color_source_items_PARTICLE_SPEED, "PARTICLE_SPEED"}, {color_source_items_PARTICLE_VELOCITY, "PARTICLE_VELOCITY"}};
	};

	const std::map<std::string, int> string_to_color_source_items = create_string_to_color_source_items();
	const std::map<int, std::string> color_source_items_to_string = create_color_source_items_to_string();

	color_source_items_enum color_source() {
		STRING_TYPE_GETTER("color_source", static_cast<color_source_items_enum>(string_to_color_source_items.at(resstr)))
	}

	void color_source(color_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_source", color_source_items_to_string.at(value))
	}

	float speed_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "speed_scale")
	}

	void speed_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "speed_scale", value)
	}

	float falloff_speed_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff_speed_scale")
	}

	void falloff_speed_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff_speed_scale", value)
	}

	ColorRamp color_ramp();

	CurveMapping falloff_curve();

	bool use_falloff_curve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_falloff_curve")
	}

	void use_falloff_curve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_falloff_curve", value)
	}

	bool use_turbulence() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_turbulence")
	}

	void use_turbulence(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_turbulence", value)
	}

	float turbulence_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbulence_scale")
	}

	void turbulence_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbulence_scale", value)
	}

	float turbulence_strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbulence_strength")
	}

	void turbulence_strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbulence_strength", value)
	}

	int turbulence_depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "turbulence_depth")
	}

	void turbulence_depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "turbulence_depth", value)
	}

	enum turbulence_influence_items_enum {
		turbulence_influence_items_STATIC = 0,	
		turbulence_influence_items_PARTICLE_VELOCITY = 1,	
		turbulence_influence_items_PARTICLE_AGE = 2,	
		turbulence_influence_items_GLOBAL_TIME = 3	
	};

	std::map<std::string, int> create_string_to_turbulence_influence_items() {
		return {{"STATIC", turbulence_influence_items_STATIC}, {"PARTICLE_VELOCITY", turbulence_influence_items_PARTICLE_VELOCITY}, {"PARTICLE_AGE", turbulence_influence_items_PARTICLE_AGE}, {"GLOBAL_TIME", turbulence_influence_items_GLOBAL_TIME}};
	};

	std::map<int, std::string> create_turbulence_influence_items_to_string() {
		return {{turbulence_influence_items_STATIC, "STATIC"}, {turbulence_influence_items_PARTICLE_VELOCITY, "PARTICLE_VELOCITY"}, {turbulence_influence_items_PARTICLE_AGE, "PARTICLE_AGE"}, {turbulence_influence_items_GLOBAL_TIME, "GLOBAL_TIME"}};
	};

	const std::map<std::string, int> string_to_turbulence_influence_items = create_string_to_turbulence_influence_items();
	const std::map<int, std::string> turbulence_influence_items_to_string = create_turbulence_influence_items_to_string();

	turbulence_influence_items_enum turbulence_influence() {
		STRING_TYPE_GETTER("turbulence_influence", static_cast<turbulence_influence_items_enum>(string_to_turbulence_influence_items.at(resstr)))
	}

	void turbulence_influence(turbulence_influence_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "turbulence_influence", turbulence_influence_items_to_string.at(value))
	}

	enum prop_noise_basis_items_enum {
		prop_noise_basis_items_BLENDER_ORIGINAL = 0,	
		prop_noise_basis_items_ORIGINAL_PERLIN = 1,	
		prop_noise_basis_items_IMPROVED_PERLIN = 2,	
		prop_noise_basis_items_VORONOI_F1 = 3,	
		prop_noise_basis_items_VORONOI_F2 = 4,	
		prop_noise_basis_items_VORONOI_F3 = 5,	
		prop_noise_basis_items_VORONOI_F4 = 6,	
		prop_noise_basis_items_VORONOI_F2_F1 = 7,	
		prop_noise_basis_items_VORONOI_CRACKLE = 8,	
		prop_noise_basis_items_CELL_NOISE = 14	
	};

	std::map<std::string, int> create_string_to_prop_noise_basis_items() {
		return {{"BLENDER_ORIGINAL", prop_noise_basis_items_BLENDER_ORIGINAL}, {"ORIGINAL_PERLIN", prop_noise_basis_items_ORIGINAL_PERLIN}, {"IMPROVED_PERLIN", prop_noise_basis_items_IMPROVED_PERLIN}, {"VORONOI_F1", prop_noise_basis_items_VORONOI_F1}, {"VORONOI_F2", prop_noise_basis_items_VORONOI_F2}, {"VORONOI_F3", prop_noise_basis_items_VORONOI_F3}, {"VORONOI_F4", prop_noise_basis_items_VORONOI_F4}, {"VORONOI_F2_F1", prop_noise_basis_items_VORONOI_F2_F1}, {"VORONOI_CRACKLE", prop_noise_basis_items_VORONOI_CRACKLE}, {"CELL_NOISE", prop_noise_basis_items_CELL_NOISE}};
	};

	std::map<int, std::string> create_prop_noise_basis_items_to_string() {
		return {{prop_noise_basis_items_BLENDER_ORIGINAL, "BLENDER_ORIGINAL"}, {prop_noise_basis_items_ORIGINAL_PERLIN, "ORIGINAL_PERLIN"}, {prop_noise_basis_items_IMPROVED_PERLIN, "IMPROVED_PERLIN"}, {prop_noise_basis_items_VORONOI_F1, "VORONOI_F1"}, {prop_noise_basis_items_VORONOI_F2, "VORONOI_F2"}, {prop_noise_basis_items_VORONOI_F3, "VORONOI_F3"}, {prop_noise_basis_items_VORONOI_F4, "VORONOI_F4"}, {prop_noise_basis_items_VORONOI_F2_F1, "VORONOI_F2_F1"}, {prop_noise_basis_items_VORONOI_CRACKLE, "VORONOI_CRACKLE"}, {prop_noise_basis_items_CELL_NOISE, "CELL_NOISE"}};
	};

	const std::map<std::string, int> string_to_prop_noise_basis_items = create_string_to_prop_noise_basis_items();
	const std::map<int, std::string> prop_noise_basis_items_to_string = create_prop_noise_basis_items_to_string();

	prop_noise_basis_items_enum noise_basis() {
		STRING_TYPE_GETTER("noise_basis", static_cast<prop_noise_basis_items_enum>(string_to_prop_noise_basis_items.at(resstr)))
	}

	void noise_basis(prop_noise_basis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_basis", prop_noise_basis_items_to_string.at(value))
	}
};

class PointDensityTexture : public Texture {
public:
	PointDensityTexture(PyObject* pyobj) : Texture(pyobj) {}
	PointDensityTexture() : Texture(0) { }

	PointDensity point_density() {
		CLASS_TYPES_GETTER(PointDensity, "point_density")
	}
};

class VoxelData : public pyUniplug {
public:
	VoxelData(PyObject* pyobj) : pyUniplug(pyobj) {}
	VoxelData() : pyUniplug(0) { }

	enum interpolation_type_items_enum {
		interpolation_type_items_NEREASTNEIGHBOR = 0,	
		interpolation_type_items_TRILINEAR = 1,	
		interpolation_type_items_QUADRATIC = 2,	
		interpolation_type_items_TRICUBIC_CATROM = 3,	
		interpolation_type_items_TRICUBIC_BSPLINE = 4	
	};

	std::map<std::string, int> create_string_to_interpolation_type_items() {
		return {{"NEREASTNEIGHBOR", interpolation_type_items_NEREASTNEIGHBOR}, {"TRILINEAR", interpolation_type_items_TRILINEAR}, {"QUADRATIC", interpolation_type_items_QUADRATIC}, {"TRICUBIC_CATROM", interpolation_type_items_TRICUBIC_CATROM}, {"TRICUBIC_BSPLINE", interpolation_type_items_TRICUBIC_BSPLINE}};
	};

	std::map<int, std::string> create_interpolation_type_items_to_string() {
		return {{interpolation_type_items_NEREASTNEIGHBOR, "NEREASTNEIGHBOR"}, {interpolation_type_items_TRILINEAR, "TRILINEAR"}, {interpolation_type_items_QUADRATIC, "QUADRATIC"}, {interpolation_type_items_TRICUBIC_CATROM, "TRICUBIC_CATROM"}, {interpolation_type_items_TRICUBIC_BSPLINE, "TRICUBIC_BSPLINE"}};
	};

	const std::map<std::string, int> string_to_interpolation_type_items = create_string_to_interpolation_type_items();
	const std::map<int, std::string> interpolation_type_items_to_string = create_interpolation_type_items_to_string();

	interpolation_type_items_enum interpolation() {
		STRING_TYPE_GETTER("interpolation", static_cast<interpolation_type_items_enum>(string_to_interpolation_type_items.at(resstr)))
	}

	void interpolation(interpolation_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation", interpolation_type_items_to_string.at(value))
	}

	enum smoked_type_items_enum {
		smoked_type_items_SMOKEDENSITY = 0,	
		smoked_type_items_SMOKEFLAME = 3,	
		smoked_type_items_SMOKEHEAT = 1,	
		smoked_type_items_SMOKEVEL = 2	
	};

	std::map<std::string, int> create_string_to_smoked_type_items() {
		return {{"SMOKEDENSITY", smoked_type_items_SMOKEDENSITY}, {"SMOKEFLAME", smoked_type_items_SMOKEFLAME}, {"SMOKEHEAT", smoked_type_items_SMOKEHEAT}, {"SMOKEVEL", smoked_type_items_SMOKEVEL}};
	};

	std::map<int, std::string> create_smoked_type_items_to_string() {
		return {{smoked_type_items_SMOKEDENSITY, "SMOKEDENSITY"}, {smoked_type_items_SMOKEFLAME, "SMOKEFLAME"}, {smoked_type_items_SMOKEHEAT, "SMOKEHEAT"}, {smoked_type_items_SMOKEVEL, "SMOKEVEL"}};
	};

	const std::map<std::string, int> string_to_smoked_type_items = create_string_to_smoked_type_items();
	const std::map<int, std::string> smoked_type_items_to_string = create_smoked_type_items_to_string();

	smoked_type_items_enum smoke_data_type() {
		STRING_TYPE_GETTER("smoke_data_type", static_cast<smoked_type_items_enum>(string_to_smoked_type_items.at(resstr)))
	}

	void smoke_data_type(smoked_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "smoke_data_type", smoked_type_items_to_string.at(value))
	}

	enum hair_type_items_enum {
		hair_type_items_HAIRDENSITY = 0,	
		hair_type_items_HAIRRESTDENSITY = 3,	
		hair_type_items_HAIRVELOCITY = 1,	
		hair_type_items_HAIRENERGY = 2	
	};

	std::map<std::string, int> create_string_to_hair_type_items() {
		return {{"HAIRDENSITY", hair_type_items_HAIRDENSITY}, {"HAIRRESTDENSITY", hair_type_items_HAIRRESTDENSITY}, {"HAIRVELOCITY", hair_type_items_HAIRVELOCITY}, {"HAIRENERGY", hair_type_items_HAIRENERGY}};
	};

	std::map<int, std::string> create_hair_type_items_to_string() {
		return {{hair_type_items_HAIRDENSITY, "HAIRDENSITY"}, {hair_type_items_HAIRRESTDENSITY, "HAIRRESTDENSITY"}, {hair_type_items_HAIRVELOCITY, "HAIRVELOCITY"}, {hair_type_items_HAIRENERGY, "HAIRENERGY"}};
	};

	const std::map<std::string, int> string_to_hair_type_items = create_string_to_hair_type_items();
	const std::map<int, std::string> hair_type_items_to_string = create_hair_type_items_to_string();

	hair_type_items_enum hair_data_type() {
		STRING_TYPE_GETTER("hair_data_type", static_cast<hair_type_items_enum>(string_to_hair_type_items.at(resstr)))
	}

	void hair_data_type(hair_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "hair_data_type", hair_type_items_to_string.at(value))
	}

	enum voxeldata_extension_enum {
		voxeldata_extension_EXTEND = 1,	
		voxeldata_extension_CLIP = 2,	
		voxeldata_extension_REPEAT = 3	
	};

	std::map<std::string, int> create_string_to_voxeldata_extension() {
		return {{"EXTEND", voxeldata_extension_EXTEND}, {"CLIP", voxeldata_extension_CLIP}, {"REPEAT", voxeldata_extension_REPEAT}};
	};

	std::map<int, std::string> create_voxeldata_extension_to_string() {
		return {{voxeldata_extension_EXTEND, "EXTEND"}, {voxeldata_extension_CLIP, "CLIP"}, {voxeldata_extension_REPEAT, "REPEAT"}};
	};

	const std::map<std::string, int> string_to_voxeldata_extension = create_string_to_voxeldata_extension();
	const std::map<int, std::string> voxeldata_extension_to_string = create_voxeldata_extension_to_string();

	voxeldata_extension_enum extension() {
		STRING_TYPE_GETTER("extension", static_cast<voxeldata_extension_enum>(string_to_voxeldata_extension.at(resstr)))
	}

	void extension(voxeldata_extension_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "extension", voxeldata_extension_to_string.at(value))
	}

	float intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "intensity")
	}

	void intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "intensity", value)
	}

	enum file_format_items_enum {
		file_format_items_BLENDER_VOXEL = 0,	
		file_format_items_RAW_8BIT = 1,	
		file_format_items_IMAGE_SEQUENCE = 3,	
		file_format_items_SMOKE = 4,	
		file_format_items_HAIR = 5	
	};

	std::map<std::string, int> create_string_to_file_format_items() {
		return {{"BLENDER_VOXEL", file_format_items_BLENDER_VOXEL}, {"RAW_8BIT", file_format_items_RAW_8BIT}, {"IMAGE_SEQUENCE", file_format_items_IMAGE_SEQUENCE}, {"SMOKE", file_format_items_SMOKE}, {"HAIR", file_format_items_HAIR}};
	};

	std::map<int, std::string> create_file_format_items_to_string() {
		return {{file_format_items_BLENDER_VOXEL, "BLENDER_VOXEL"}, {file_format_items_RAW_8BIT, "RAW_8BIT"}, {file_format_items_IMAGE_SEQUENCE, "IMAGE_SEQUENCE"}, {file_format_items_SMOKE, "SMOKE"}, {file_format_items_HAIR, "HAIR"}};
	};

	const std::map<std::string, int> string_to_file_format_items = create_string_to_file_format_items();
	const std::map<int, std::string> file_format_items_to_string = create_file_format_items_to_string();

	file_format_items_enum file_format() {
		STRING_TYPE_GETTER("file_format", static_cast<file_format_items_enum>(string_to_file_format_items.at(resstr)))
	}

	void file_format(file_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "file_format", file_format_items_to_string.at(value))
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	std::array<int, 3> resolution() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "resolution", 3)
	}

	void resolution(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "resolution", 3)
	}

	bool use_still_frame() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_still_frame")
	}

	void use_still_frame(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_still_frame", value)
	}

	int still_frame() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "still_frame")
	}

	void still_frame(int value) {
		PRIMITIVE_TYPES_SETTER("i", "still_frame", value)
	}

	Object domain_object();
};

class VoxelDataTexture : public Texture {
public:
	VoxelDataTexture(PyObject* pyobj) : Texture(pyobj) {}
	VoxelDataTexture() : Texture(0) { }

	VoxelData voxel_data() {
		CLASS_TYPES_GETTER(VoxelData, "voxel_data")
	}

	Image image();

	ImageUser image_user();
};

class OceanTexData : public pyUniplug {
public:
	OceanTexData(PyObject* pyobj) : pyUniplug(pyobj) {}
	OceanTexData() : pyUniplug(0) { }

	enum ocean_output_items_enum {
		ocean_output_items_DISPLACEMENT = 1,	
		ocean_output_items_FOAM = 2,	
		ocean_output_items_JPLUS = 3,	
		ocean_output_items_EMINUS = 4,	
		ocean_output_items_EPLUS = 5	
	};

	std::map<std::string, int> create_string_to_ocean_output_items() {
		return {{"DISPLACEMENT", ocean_output_items_DISPLACEMENT}, {"FOAM", ocean_output_items_FOAM}, {"JPLUS", ocean_output_items_JPLUS}, {"EMINUS", ocean_output_items_EMINUS}, {"EPLUS", ocean_output_items_EPLUS}};
	};

	std::map<int, std::string> create_ocean_output_items_to_string() {
		return {{ocean_output_items_DISPLACEMENT, "DISPLACEMENT"}, {ocean_output_items_FOAM, "FOAM"}, {ocean_output_items_JPLUS, "JPLUS"}, {ocean_output_items_EMINUS, "EMINUS"}, {ocean_output_items_EPLUS, "EPLUS"}};
	};

	const std::map<std::string, int> string_to_ocean_output_items = create_string_to_ocean_output_items();
	const std::map<int, std::string> ocean_output_items_to_string = create_ocean_output_items_to_string();

	ocean_output_items_enum output() {
		STRING_TYPE_GETTER("output", static_cast<ocean_output_items_enum>(string_to_ocean_output_items.at(resstr)))
	}

	void output(ocean_output_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "output", ocean_output_items_to_string.at(value))
	}

	Object ocean_object();
};

class OceanTexture : public Texture {
public:
	OceanTexture(PyObject* pyobj) : Texture(pyobj) {}
	OceanTexture() : Texture(0) { }

	OceanTexData ocean() {
		CLASS_TYPES_GETTER(OceanTexData, "ocean")
	}
};

class TextureSlot : public pyUniplug {
public:
	TextureSlot(PyObject* pyobj) : pyUniplug(pyobj) {}
	TextureSlot() : pyUniplug(0) { }

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	VFLOAT3 offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "offset", 3)
	}

	void offset(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset", 3)
	}

	VFLOAT3 scale() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scale", 3)
	}

	void scale(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scale", 3)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	enum blend_type_items_enum {
		blend_type_items_MIX = 0,	
		blend_type_items_ADD = 2,	
		blend_type_items_SUBTRACT = 3,	
		blend_type_items_MULTIPLY = 1,	
		blend_type_items_SCREEN = 8,	
		blend_type_items_OVERLAY = 9,	
		blend_type_items_DIFFERENCE = 6,	
		blend_type_items_DIVIDE = 4,	
		blend_type_items_DARKEN = 5,	
		blend_type_items_LIGHTEN = 7,	
		blend_type_items_HUE = 10,	
		blend_type_items_SATURATION = 11,	
		blend_type_items_VALUE = 12,	
		blend_type_items_COLOR = 13,	
		blend_type_items_SOFT_LIGHT = 15,	
		blend_type_items_LINEAR_LIGHT = 16	
	};

	std::map<std::string, int> create_string_to_blend_type_items() {
		return {{"MIX", blend_type_items_MIX}, {"ADD", blend_type_items_ADD}, {"SUBTRACT", blend_type_items_SUBTRACT}, {"MULTIPLY", blend_type_items_MULTIPLY}, {"SCREEN", blend_type_items_SCREEN}, {"OVERLAY", blend_type_items_OVERLAY}, {"DIFFERENCE", blend_type_items_DIFFERENCE}, {"DIVIDE", blend_type_items_DIVIDE}, {"DARKEN", blend_type_items_DARKEN}, {"LIGHTEN", blend_type_items_LIGHTEN}, {"HUE", blend_type_items_HUE}, {"SATURATION", blend_type_items_SATURATION}, {"VALUE", blend_type_items_VALUE}, {"COLOR", blend_type_items_COLOR}, {"SOFT_LIGHT", blend_type_items_SOFT_LIGHT}, {"LINEAR_LIGHT", blend_type_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_blend_type_items_to_string() {
		return {{blend_type_items_MIX, "MIX"}, {blend_type_items_ADD, "ADD"}, {blend_type_items_SUBTRACT, "SUBTRACT"}, {blend_type_items_MULTIPLY, "MULTIPLY"}, {blend_type_items_SCREEN, "SCREEN"}, {blend_type_items_OVERLAY, "OVERLAY"}, {blend_type_items_DIFFERENCE, "DIFFERENCE"}, {blend_type_items_DIVIDE, "DIVIDE"}, {blend_type_items_DARKEN, "DARKEN"}, {blend_type_items_LIGHTEN, "LIGHTEN"}, {blend_type_items_HUE, "HUE"}, {blend_type_items_SATURATION, "SATURATION"}, {blend_type_items_VALUE, "VALUE"}, {blend_type_items_COLOR, "COLOR"}, {blend_type_items_SOFT_LIGHT, "SOFT_LIGHT"}, {blend_type_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_blend_type_items = create_string_to_blend_type_items();
	const std::map<int, std::string> blend_type_items_to_string = create_blend_type_items_to_string();

	blend_type_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<blend_type_items_enum>(string_to_blend_type_items.at(resstr)))
	}

	void blend_type(blend_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", blend_type_items_to_string.at(value))
	}

	bool use_stencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stencil")
	}

	void use_stencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stencil", value)
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	bool use_rgb_to_intensity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rgb_to_intensity")
	}

	void use_rgb_to_intensity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rgb_to_intensity", value)
	}

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}

	enum output_node_items_enum {
		output_node_items_DUMMY = 0	
	};

	std::map<std::string, int> create_string_to_output_node_items() {
		return {{"DUMMY", output_node_items_DUMMY}};
	};

	std::map<int, std::string> create_output_node_items_to_string() {
		return {{output_node_items_DUMMY, "DUMMY"}};
	};

	const std::map<std::string, int> string_to_output_node_items = create_string_to_output_node_items();
	const std::map<int, std::string> output_node_items_to_string = create_output_node_items_to_string();

	output_node_items_enum output_node() {
		STRING_TYPE_GETTER("output_node", static_cast<output_node_items_enum>(string_to_output_node_items.at(resstr)))
	}

	void output_node(output_node_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "output_node", output_node_items_to_string.at(value))
	}
};

class EnvironmentMap : public pyUniplug {
public:
	EnvironmentMap(PyObject* pyobj) : pyUniplug(pyobj) {}
	EnvironmentMap() : pyUniplug(0) { }

	enum prop_source_items_enum {
		prop_source_items_STATIC = 0,	
		prop_source_items_ANIMATED = 1,	
		prop_source_items_IMAGE_FILE = 2	
	};

	std::map<std::string, int> create_string_to_prop_source_items() {
		return {{"STATIC", prop_source_items_STATIC}, {"ANIMATED", prop_source_items_ANIMATED}, {"IMAGE_FILE", prop_source_items_IMAGE_FILE}};
	};

	std::map<int, std::string> create_prop_source_items_to_string() {
		return {{prop_source_items_STATIC, "STATIC"}, {prop_source_items_ANIMATED, "ANIMATED"}, {prop_source_items_IMAGE_FILE, "IMAGE_FILE"}};
	};

	const std::map<std::string, int> string_to_prop_source_items = create_string_to_prop_source_items();
	const std::map<int, std::string> prop_source_items_to_string = create_prop_source_items_to_string();

	prop_source_items_enum source() {
		STRING_TYPE_GETTER("source", static_cast<prop_source_items_enum>(string_to_prop_source_items.at(resstr)))
	}

	void source(prop_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "source", prop_source_items_to_string.at(value))
	}

	Object viewpoint_object();

	enum prop_mapping_items_enum {
		prop_mapping_items_CUBE = 0,	
		prop_mapping_items_PLANE = 1	
	};

	std::map<std::string, int> create_string_to_prop_mapping_items() {
		return {{"CUBE", prop_mapping_items_CUBE}, {"PLANE", prop_mapping_items_PLANE}};
	};

	std::map<int, std::string> create_prop_mapping_items_to_string() {
		return {{prop_mapping_items_CUBE, "CUBE"}, {prop_mapping_items_PLANE, "PLANE"}};
	};

	const std::map<std::string, int> string_to_prop_mapping_items = create_string_to_prop_mapping_items();
	const std::map<int, std::string> prop_mapping_items_to_string = create_prop_mapping_items_to_string();

	prop_mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<prop_mapping_items_enum>(string_to_prop_mapping_items.at(resstr)))
	}

	void mapping(prop_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", prop_mapping_items_to_string.at(value))
	}

	float clip_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_start")
	}

	void clip_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_start", value)
	}

	float clip_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_end")
	}

	void clip_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_end", value)
	}

	float zoom() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "zoom")
	}

	void zoom(float value) {
		PRIMITIVE_TYPES_SETTER("f", "zoom", value)
	}

	std::array<bool, 20> layers_ignore() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_ignore", 20)
	}

	void layers_ignore(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_ignore", 20)
	}

	int resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution")
	}

	void resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution", value)
	}

	int depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "depth")
	}

	void depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "depth", value)
	}

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void save(const std::string filepath, Scene scene, float layout[12]);
};

class TexMapping : public pyUniplug {
public:
	TexMapping(PyObject* pyobj) : pyUniplug(pyobj) {}
	TexMapping() : pyUniplug(0) { }

	enum prop_vect_type_items_enum {
		prop_vect_type_items_TEXTURE = 1,	
		prop_vect_type_items_POINT = 0,	
		prop_vect_type_items_VECTOR = 2,	
		prop_vect_type_items_NORMAL = 3	
	};

	std::map<std::string, int> create_string_to_prop_vect_type_items() {
		return {{"TEXTURE", prop_vect_type_items_TEXTURE}, {"POINT", prop_vect_type_items_POINT}, {"VECTOR", prop_vect_type_items_VECTOR}, {"NORMAL", prop_vect_type_items_NORMAL}};
	};

	std::map<int, std::string> create_prop_vect_type_items_to_string() {
		return {{prop_vect_type_items_TEXTURE, "TEXTURE"}, {prop_vect_type_items_POINT, "POINT"}, {prop_vect_type_items_VECTOR, "VECTOR"}, {prop_vect_type_items_NORMAL, "NORMAL"}};
	};

	const std::map<std::string, int> string_to_prop_vect_type_items = create_string_to_prop_vect_type_items();
	const std::map<int, std::string> prop_vect_type_items_to_string = create_prop_vect_type_items_to_string();

	prop_vect_type_items_enum vector_type() {
		STRING_TYPE_GETTER("vector_type", static_cast<prop_vect_type_items_enum>(string_to_prop_vect_type_items.at(resstr)))
	}

	void vector_type(prop_vect_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vector_type", prop_vect_type_items_to_string.at(value))
	}

	VFLOAT3 translation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "translation", 3)
	}

	void translation(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "translation", 3)
	}

	VFLOAT3 rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation", 3)
	}

	void rotation(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation", 3)
	}

	VFLOAT3 scale() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scale", 3)
	}

	void scale(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scale", 3)
	}

	VFLOAT3 min() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "min", 3)
	}

	void min(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "min", 3)
	}

	VFLOAT3 max() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "max", 3)
	}

	void max(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "max", 3)
	}

	bool use_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min")
	}

	void use_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min", value)
	}

	bool use_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max")
	}

	void use_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max", value)
	}

	enum prop_xyz_mapping_items_enum {
		prop_xyz_mapping_items_NONE = 0,	
		prop_xyz_mapping_items_X = 1,	
		prop_xyz_mapping_items_Y = 2,	
		prop_xyz_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_xyz_mapping_items() {
		return {{"NONE", prop_xyz_mapping_items_NONE}, {"X", prop_xyz_mapping_items_X}, {"Y", prop_xyz_mapping_items_Y}, {"Z", prop_xyz_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_xyz_mapping_items_to_string() {
		return {{prop_xyz_mapping_items_NONE, "NONE"}, {prop_xyz_mapping_items_X, "X"}, {prop_xyz_mapping_items_Y, "Y"}, {prop_xyz_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_xyz_mapping_items = create_string_to_prop_xyz_mapping_items();
	const std::map<int, std::string> prop_xyz_mapping_items_to_string = create_prop_xyz_mapping_items_to_string();

	prop_xyz_mapping_items_enum mapping_x() {
		STRING_TYPE_GETTER("mapping_x", static_cast<prop_xyz_mapping_items_enum>(string_to_prop_xyz_mapping_items.at(resstr)))
	}

	void mapping_x(prop_xyz_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_x", prop_xyz_mapping_items_to_string.at(value))
	}

	prop_xyz_mapping_items_enum mapping_y() {
		STRING_TYPE_GETTER("mapping_y", static_cast<prop_xyz_mapping_items_enum>(string_to_prop_xyz_mapping_items.at(resstr)))
	}

	void mapping_y(prop_xyz_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_y", prop_xyz_mapping_items_to_string.at(value))
	}

	prop_xyz_mapping_items_enum mapping_z() {
		STRING_TYPE_GETTER("mapping_z", static_cast<prop_xyz_mapping_items_enum>(string_to_prop_xyz_mapping_items.at(resstr)))
	}

	void mapping_z(prop_xyz_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_z", prop_xyz_mapping_items_to_string.at(value))
	}

	enum prop_mapping_items_enum {
		prop_mapping_items_FLAT = 0,	
		prop_mapping_items_CUBE = 1,	
		prop_mapping_items_TUBE = 2,	
		prop_mapping_items_SPHERE = 3	
	};

	std::map<std::string, int> create_string_to_prop_mapping_items() {
		return {{"FLAT", prop_mapping_items_FLAT}, {"CUBE", prop_mapping_items_CUBE}, {"TUBE", prop_mapping_items_TUBE}, {"SPHERE", prop_mapping_items_SPHERE}};
	};

	std::map<int, std::string> create_prop_mapping_items_to_string() {
		return {{prop_mapping_items_FLAT, "FLAT"}, {prop_mapping_items_CUBE, "CUBE"}, {prop_mapping_items_TUBE, "TUBE"}, {prop_mapping_items_SPHERE, "SPHERE"}};
	};

	const std::map<std::string, int> string_to_prop_mapping_items = create_string_to_prop_mapping_items();
	const std::map<int, std::string> prop_mapping_items_to_string = create_prop_mapping_items_to_string();

	prop_mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<prop_mapping_items_enum>(string_to_prop_mapping_items.at(resstr)))
	}

	void mapping(prop_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", prop_mapping_items_to_string.at(value))
	}
};

class ColorMapping : public pyUniplug {
public:
	ColorMapping(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorMapping() : pyUniplug(0) { }

	bool use_color_ramp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_color_ramp")
	}

	void use_color_ramp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_color_ramp", value)
	}

	ColorRamp color_ramp();

	float brightness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "brightness")
	}

	void brightness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "brightness", value)
	}

	float contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "contrast")
	}

	void contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "contrast", value)
	}

	float saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "saturation")
	}

	void saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "saturation", value)
	}

	enum blend_type_items_enum {
		blend_type_items_MIX = 0,	
		blend_type_items_ADD = 2,	
		blend_type_items_SUBTRACT = 3,	
		blend_type_items_MULTIPLY = 1,	
		blend_type_items_SCREEN = 8,	
		blend_type_items_OVERLAY = 9,	
		blend_type_items_DIFFERENCE = 6,	
		blend_type_items_DIVIDE = 4,	
		blend_type_items_DARKEN = 5,	
		blend_type_items_LIGHTEN = 7,	
		blend_type_items_HUE = 10,	
		blend_type_items_SATURATION = 11,	
		blend_type_items_VALUE = 12,	
		blend_type_items_COLOR = 13,	
		blend_type_items_SOFT_LIGHT = 15,	
		blend_type_items_LINEAR_LIGHT = 16	
	};

	std::map<std::string, int> create_string_to_blend_type_items() {
		return {{"MIX", blend_type_items_MIX}, {"ADD", blend_type_items_ADD}, {"SUBTRACT", blend_type_items_SUBTRACT}, {"MULTIPLY", blend_type_items_MULTIPLY}, {"SCREEN", blend_type_items_SCREEN}, {"OVERLAY", blend_type_items_OVERLAY}, {"DIFFERENCE", blend_type_items_DIFFERENCE}, {"DIVIDE", blend_type_items_DIVIDE}, {"DARKEN", blend_type_items_DARKEN}, {"LIGHTEN", blend_type_items_LIGHTEN}, {"HUE", blend_type_items_HUE}, {"SATURATION", blend_type_items_SATURATION}, {"VALUE", blend_type_items_VALUE}, {"COLOR", blend_type_items_COLOR}, {"SOFT_LIGHT", blend_type_items_SOFT_LIGHT}, {"LINEAR_LIGHT", blend_type_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_blend_type_items_to_string() {
		return {{blend_type_items_MIX, "MIX"}, {blend_type_items_ADD, "ADD"}, {blend_type_items_SUBTRACT, "SUBTRACT"}, {blend_type_items_MULTIPLY, "MULTIPLY"}, {blend_type_items_SCREEN, "SCREEN"}, {blend_type_items_OVERLAY, "OVERLAY"}, {blend_type_items_DIFFERENCE, "DIFFERENCE"}, {blend_type_items_DIVIDE, "DIVIDE"}, {blend_type_items_DARKEN, "DARKEN"}, {blend_type_items_LIGHTEN, "LIGHTEN"}, {blend_type_items_HUE, "HUE"}, {blend_type_items_SATURATION, "SATURATION"}, {blend_type_items_VALUE, "VALUE"}, {blend_type_items_COLOR, "COLOR"}, {blend_type_items_SOFT_LIGHT, "SOFT_LIGHT"}, {blend_type_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_blend_type_items = create_string_to_blend_type_items();
	const std::map<int, std::string> blend_type_items_to_string = create_blend_type_items_to_string();

	blend_type_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<blend_type_items_enum>(string_to_blend_type_items.at(resstr)))
	}

	void blend_type(blend_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", blend_type_items_to_string.at(value))
	}

	VFLOAT3 blend_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "blend_color", 3)
	}

	void blend_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "blend_color", 3)
	}

	float blend_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_factor")
	}

	void blend_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_factor", value)
	}
};

class IDMaterials : public pyUniplug {
public:
	IDMaterials(PyObject* pyobj) : pyUniplug(pyobj) {}
	IDMaterials() : pyUniplug(0) { }

	void append(Material material);

	Material pop(int index = -1, bool update_data = false);

	void clear(bool update_data = false) {
		PYTHON_FUNCTION_ARGS_CALL("clear", "i", update_data)
	}
};

class ActionFCurves : public pyUniplug {
public:
	ActionFCurves(PyObject* pyobj) : pyUniplug(pyobj) {}
	ActionFCurves() : pyUniplug(0) { }

	FCurve create(const std::string data_path, int index = 0, const std::string action_group = NULL);

	void remove(FCurve fcurve);
};

class ActionGroups : public pyUniplug {
public:
	ActionGroups(PyObject* pyobj) : pyUniplug(pyobj) {}
	ActionGroups() : pyUniplug(0) { }

	ActionGroup create(const std::string name);

	void remove(ActionGroup action_group);
};

class ActionPoseMarkers : public pyUniplug {
public:
	ActionPoseMarkers(PyObject* pyobj) : pyUniplug(pyobj) {}
	ActionPoseMarkers() : pyUniplug(0) { }

	TimelineMarker active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	TimelineMarker create(const std::string name);

	void remove(TimelineMarker marker);
};

class NlaTracks : public pyUniplug {
public:
	NlaTracks(PyObject* pyobj) : pyUniplug(pyobj) {}
	NlaTracks() : pyUniplug(0) { }

	NlaTrack active();

	NlaTrack create(NlaTrack prev);

	void remove(NlaTrack track);
};

class AnimDataDrivers : public pyUniplug {
public:
	AnimDataDrivers(PyObject* pyobj) : pyUniplug(pyobj) {}
	AnimDataDrivers() : pyUniplug(0) { }

	FCurve from_existing(FCurve src_driver);
};

class KeyingSetPaths : public pyUniplug {
public:
	KeyingSetPaths(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyingSetPaths() : pyUniplug(0) { }

	KeyingSetPath active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	enum keyingset_path_grouping_items_enum {
		keyingset_path_grouping_items_NAMED = 0,	
		keyingset_path_grouping_items_NONE = 1,	
		keyingset_path_grouping_items_KEYINGSET = 2	
	};

	std::map<std::string, int> create_string_to_keyingset_path_grouping_items() {
		return {{"NAMED", keyingset_path_grouping_items_NAMED}, {"NONE", keyingset_path_grouping_items_NONE}, {"KEYINGSET", keyingset_path_grouping_items_KEYINGSET}};
	};

	std::map<int, std::string> create_keyingset_path_grouping_items_to_string() {
		return {{keyingset_path_grouping_items_NAMED, "NAMED"}, {keyingset_path_grouping_items_NONE, "NONE"}, {keyingset_path_grouping_items_KEYINGSET, "KEYINGSET"}};
	};

	const std::map<std::string, int> string_to_keyingset_path_grouping_items = create_string_to_keyingset_path_grouping_items();
	const std::map<int, std::string> keyingset_path_grouping_items_to_string = create_keyingset_path_grouping_items_to_string();

	KeyingSetPath add(ID target_id, const std::string data_path, int index = -1, keyingset_path_grouping_items_enum group_method = keyingset_path_grouping_items_KEYINGSET, const std::string group_name = NULL);

	void remove(KeyingSetPath path);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class ArmatureBones : public pyUniplug {
public:
	ArmatureBones(PyObject* pyobj) : pyUniplug(pyobj) {}
	ArmatureBones() : pyUniplug(0) { }

	Bone active();
};

class ArmatureEditBones : public pyUniplug {
public:
	ArmatureEditBones(PyObject* pyobj) : pyUniplug(pyobj) {}
	ArmatureEditBones() : pyUniplug(0) { }

	EditBone active();

	EditBone create(const std::string name);

	void remove(EditBone bone);
};

class CurveMapPoints : public pyUniplug {
public:
	CurveMapPoints(PyObject* pyobj) : pyUniplug(pyobj) {}
	CurveMapPoints() : pyUniplug(0) { }

	CurveMapPoint create(float position, float value);

	void remove(CurveMapPoint point);
};

class ColorRampElements : public pyUniplug {
public:
	ColorRampElements(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorRampElements() : pyUniplug(0) { }

	ColorRampElement create(float position);

	void remove(ColorRampElement element);
};

class CurveSplines : public pyUniplug {
public:
	CurveSplines(PyObject* pyobj) : pyUniplug(pyobj) {}
	CurveSplines() : pyUniplug(0) { }

	Spline active();

	enum curve_type_items_enum {
		curve_type_items_POLY = 0,	
		curve_type_items_BEZIER = 1,	
		curve_type_items_BSPLINE = 2,	
		curve_type_items_CARDINAL = 3,	
		curve_type_items_NURBS = 4	
	};

	std::map<std::string, int> create_string_to_curve_type_items() {
		return {{"POLY", curve_type_items_POLY}, {"BEZIER", curve_type_items_BEZIER}, {"BSPLINE", curve_type_items_BSPLINE}, {"CARDINAL", curve_type_items_CARDINAL}, {"NURBS", curve_type_items_NURBS}};
	};

	std::map<int, std::string> create_curve_type_items_to_string() {
		return {{curve_type_items_POLY, "POLY"}, {curve_type_items_BEZIER, "BEZIER"}, {curve_type_items_BSPLINE, "BSPLINE"}, {curve_type_items_CARDINAL, "CARDINAL"}, {curve_type_items_NURBS, "NURBS"}};
	};

	const std::map<std::string, int> string_to_curve_type_items = create_string_to_curve_type_items();
	const std::map<int, std::string> curve_type_items_to_string = create_curve_type_items_to_string();

	Spline create(curve_type_items_enum type);

	void remove(Spline spline);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class SplinePoints : public pyUniplug {
public:
	SplinePoints(PyObject* pyobj) : pyUniplug(pyobj) {}
	SplinePoints() : pyUniplug(0) { }

	void add(int count = 1) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}
};

class SplineBezierPoints : public pyUniplug {
public:
	SplineBezierPoints(PyObject* pyobj) : pyUniplug(pyobj) {}
	SplineBezierPoints() : pyUniplug(0) { }

	void add(int count = 1) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}
};

class DynamicPaintSurfaces : public pyUniplug {
public:
	DynamicPaintSurfaces(PyObject* pyobj) : pyUniplug(pyobj) {}
	DynamicPaintSurfaces() : pyUniplug(0) { }

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	DynamicPaintSurface active();
};

class FCurveKeyframePoints : public pyUniplug {
public:
	FCurveKeyframePoints(PyObject* pyobj) : pyUniplug(pyobj) {}
	FCurveKeyframePoints() : pyUniplug(0) { }

	enum items_enum {
		items_REPLACE = 16,	
		items_NEEDED = 1,	
		items_FAST = 4	
	};

	std::map<std::string, int> create_string_to_items() {
		return {{"REPLACE", items_REPLACE}, {"NEEDED", items_NEEDED}, {"FAST", items_FAST}};
	};

	std::map<int, std::string> create_items_to_string() {
		return {{items_REPLACE, "REPLACE"}, {items_NEEDED, "NEEDED"}, {items_FAST, "FAST"}};
	};

	const std::map<std::string, int> string_to_items = create_string_to_items();
	const std::map<int, std::string> items_to_string = create_items_to_string();

	Keyframe insert(float frame, float value, items_enum options);

	void add(int count = 1) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}

	void remove(Keyframe keyframe, bool fast = false);
};

class FCurveModifiers : public pyUniplug {
public:
	FCurveModifiers(PyObject* pyobj) : pyUniplug(pyobj) {}
	FCurveModifiers() : pyUniplug(0) { }

	FModifier active();

	enum fmodifier_type_items_enum {
		fmodifier_type_items_NULL = 0,	
		fmodifier_type_items_GENERATOR = 1,	
		fmodifier_type_items_FNGENERATOR = 2,	
		fmodifier_type_items_ENVELOPE = 3,	
		fmodifier_type_items_CYCLES = 4,	
		fmodifier_type_items_NOISE = 5,	
		fmodifier_type_items_PYTHON = 7,	
		fmodifier_type_items_LIMITS = 8,	
		fmodifier_type_items_STEPPED = 9	
	};

	std::map<std::string, int> create_string_to_fmodifier_type_items() {
		return {{"NULL", fmodifier_type_items_NULL}, {"GENERATOR", fmodifier_type_items_GENERATOR}, {"FNGENERATOR", fmodifier_type_items_FNGENERATOR}, {"ENVELOPE", fmodifier_type_items_ENVELOPE}, {"CYCLES", fmodifier_type_items_CYCLES}, {"NOISE", fmodifier_type_items_NOISE}, {"PYTHON", fmodifier_type_items_PYTHON}, {"LIMITS", fmodifier_type_items_LIMITS}, {"STEPPED", fmodifier_type_items_STEPPED}};
	};

	std::map<int, std::string> create_fmodifier_type_items_to_string() {
		return {{fmodifier_type_items_NULL, "NULL"}, {fmodifier_type_items_GENERATOR, "GENERATOR"}, {fmodifier_type_items_FNGENERATOR, "FNGENERATOR"}, {fmodifier_type_items_ENVELOPE, "ENVELOPE"}, {fmodifier_type_items_CYCLES, "CYCLES"}, {fmodifier_type_items_NOISE, "NOISE"}, {fmodifier_type_items_PYTHON, "PYTHON"}, {fmodifier_type_items_LIMITS, "LIMITS"}, {fmodifier_type_items_STEPPED, "STEPPED"}};
	};

	const std::map<std::string, int> string_to_fmodifier_type_items = create_string_to_fmodifier_type_items();
	const std::map<int, std::string> fmodifier_type_items_to_string = create_fmodifier_type_items_to_string();

	FModifier create(fmodifier_type_items_enum type);

	void remove(FModifier modifier);
};

class ChannelDriverVariables : public pyUniplug {
public:
	ChannelDriverVariables(PyObject* pyobj) : pyUniplug(pyobj) {}
	ChannelDriverVariables() : pyUniplug(0) { }

	DriverVariable create();

	void remove(DriverVariable variable);
};

class FModifierEnvelopeControlPoints : public pyUniplug {
public:
	FModifierEnvelopeControlPoints(PyObject* pyobj) : pyUniplug(pyobj) {}
	FModifierEnvelopeControlPoints() : pyUniplug(0) { }

	FModifierEnvelopeControlPoint add(float frame);

	void remove(FModifierEnvelopeControlPoint point);
};

class GreasePencilLayers : public pyUniplug {
public:
	GreasePencilLayers(PyObject* pyobj) : pyUniplug(pyobj) {}
	GreasePencilLayers() : pyUniplug(0) { }

	GPencilLayer active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	GPencilLayer create(const std::string name, bool set_active = false);

	void remove(GPencilLayer layer);
};

class GPencilFrames : public pyUniplug {
public:
	GPencilFrames(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPencilFrames() : pyUniplug(0) { }

	GPencilFrame create(int frame_number);

	void remove(GPencilFrame frame);

	GPencilFrame copy(GPencilFrame source);
};

class GPencilStrokes : public pyUniplug {
public:
	GPencilStrokes(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPencilStrokes() : pyUniplug(0) { }

	GPencilStroke create();

	void remove(GPencilStroke stroke);
};

class GPencilStrokePoints : public pyUniplug {
public:
	GPencilStrokePoints(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPencilStrokePoints() : pyUniplug(0) { }

	void add(int count = 1) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}

	void pop(int index = -1) {
		PYTHON_FUNCTION_ARGS_CALL("pop", "i", index)
	}
};

class GroupObjects : public pyUniplug {
public:
	GroupObjects(PyObject* pyobj) : pyUniplug(pyobj) {}
	GroupObjects() : pyUniplug(0) { }

	void link(Object object_value);

	void unlink(Object object_value);
};

class RenderSlots : public pyUniplug {
public:
	RenderSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderSlots() : pyUniplug(0) { }

	RenderSlot active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}
};

class LampTextureSlots : public pyUniplug {
public:
	LampTextureSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	LampTextureSlots() : pyUniplug(0) { }

	LampTextureSlot add();

	LampTextureSlot create(int index);

	void clear(int index) {
		PYTHON_FUNCTION_ARGS_CALL("clear", "i", index)
	}
};

class LineStyleTextureSlots : public pyUniplug {
public:
	LineStyleTextureSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	LineStyleTextureSlots() : pyUniplug(0) { }

	LineStyleTextureSlot add();

	LineStyleTextureSlot create(int index);

	void clear(int index) {
		PYTHON_FUNCTION_ARGS_CALL("clear", "i", index)
	}
};

class LineStyleColorModifiers : public pyUniplug {
public:
	LineStyleColorModifiers(PyObject* pyobj) : pyUniplug(pyobj) {}
	LineStyleColorModifiers() : pyUniplug(0) { }

	enum linestyle_color_modifier_type_items_enum {
		linestyle_color_modifier_type_items_ALONG_STROKE = 1,	
		linestyle_color_modifier_type_items_CREASE_ANGLE = 21,	
		linestyle_color_modifier_type_items_CURVATURE_3D = 23,	
		linestyle_color_modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		linestyle_color_modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		linestyle_color_modifier_type_items_MATERIAL = 4,	
		linestyle_color_modifier_type_items_NOISE = 20,	
		linestyle_color_modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_linestyle_color_modifier_type_items() {
		return {{"ALONG_STROKE", linestyle_color_modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", linestyle_color_modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", linestyle_color_modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", linestyle_color_modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", linestyle_color_modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", linestyle_color_modifier_type_items_MATERIAL}, {"NOISE", linestyle_color_modifier_type_items_NOISE}, {"TANGENT", linestyle_color_modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_linestyle_color_modifier_type_items_to_string() {
		return {{linestyle_color_modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {linestyle_color_modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {linestyle_color_modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {linestyle_color_modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {linestyle_color_modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {linestyle_color_modifier_type_items_MATERIAL, "MATERIAL"}, {linestyle_color_modifier_type_items_NOISE, "NOISE"}, {linestyle_color_modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_linestyle_color_modifier_type_items = create_string_to_linestyle_color_modifier_type_items();
	const std::map<int, std::string> linestyle_color_modifier_type_items_to_string = create_linestyle_color_modifier_type_items_to_string();

	LineStyleColorModifier create(const std::string name, linestyle_color_modifier_type_items_enum type);

	void remove(LineStyleColorModifier modifier);
};

class LineStyleAlphaModifiers : public pyUniplug {
public:
	LineStyleAlphaModifiers(PyObject* pyobj) : pyUniplug(pyobj) {}
	LineStyleAlphaModifiers() : pyUniplug(0) { }

	enum linestyle_alpha_modifier_type_items_enum {
		linestyle_alpha_modifier_type_items_ALONG_STROKE = 1,	
		linestyle_alpha_modifier_type_items_CREASE_ANGLE = 21,	
		linestyle_alpha_modifier_type_items_CURVATURE_3D = 23,	
		linestyle_alpha_modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		linestyle_alpha_modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		linestyle_alpha_modifier_type_items_MATERIAL = 4,	
		linestyle_alpha_modifier_type_items_NOISE = 20,	
		linestyle_alpha_modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_linestyle_alpha_modifier_type_items() {
		return {{"ALONG_STROKE", linestyle_alpha_modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", linestyle_alpha_modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", linestyle_alpha_modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", linestyle_alpha_modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", linestyle_alpha_modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", linestyle_alpha_modifier_type_items_MATERIAL}, {"NOISE", linestyle_alpha_modifier_type_items_NOISE}, {"TANGENT", linestyle_alpha_modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_linestyle_alpha_modifier_type_items_to_string() {
		return {{linestyle_alpha_modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {linestyle_alpha_modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {linestyle_alpha_modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {linestyle_alpha_modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {linestyle_alpha_modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {linestyle_alpha_modifier_type_items_MATERIAL, "MATERIAL"}, {linestyle_alpha_modifier_type_items_NOISE, "NOISE"}, {linestyle_alpha_modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_linestyle_alpha_modifier_type_items = create_string_to_linestyle_alpha_modifier_type_items();
	const std::map<int, std::string> linestyle_alpha_modifier_type_items_to_string = create_linestyle_alpha_modifier_type_items_to_string();

	LineStyleAlphaModifier create(const std::string name, linestyle_alpha_modifier_type_items_enum type);

	void remove(LineStyleAlphaModifier modifier);
};

class LineStyleThicknessModifiers : public pyUniplug {
public:
	LineStyleThicknessModifiers(PyObject* pyobj) : pyUniplug(pyobj) {}
	LineStyleThicknessModifiers() : pyUniplug(0) { }

	enum linestyle_thickness_modifier_type_items_enum {
		linestyle_thickness_modifier_type_items_ALONG_STROKE = 1,	
		linestyle_thickness_modifier_type_items_CALLIGRAPHY = 13,	
		linestyle_thickness_modifier_type_items_CREASE_ANGLE = 21,	
		linestyle_thickness_modifier_type_items_CURVATURE_3D = 23,	
		linestyle_thickness_modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		linestyle_thickness_modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		linestyle_thickness_modifier_type_items_MATERIAL = 4,	
		linestyle_thickness_modifier_type_items_NOISE = 20,	
		linestyle_thickness_modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_linestyle_thickness_modifier_type_items() {
		return {{"ALONG_STROKE", linestyle_thickness_modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", linestyle_thickness_modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", linestyle_thickness_modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", linestyle_thickness_modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", linestyle_thickness_modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", linestyle_thickness_modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", linestyle_thickness_modifier_type_items_MATERIAL}, {"NOISE", linestyle_thickness_modifier_type_items_NOISE}, {"TANGENT", linestyle_thickness_modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_linestyle_thickness_modifier_type_items_to_string() {
		return {{linestyle_thickness_modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {linestyle_thickness_modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {linestyle_thickness_modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {linestyle_thickness_modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {linestyle_thickness_modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {linestyle_thickness_modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {linestyle_thickness_modifier_type_items_MATERIAL, "MATERIAL"}, {linestyle_thickness_modifier_type_items_NOISE, "NOISE"}, {linestyle_thickness_modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_linestyle_thickness_modifier_type_items = create_string_to_linestyle_thickness_modifier_type_items();
	const std::map<int, std::string> linestyle_thickness_modifier_type_items_to_string = create_linestyle_thickness_modifier_type_items_to_string();

	LineStyleThicknessModifier create(const std::string name, linestyle_thickness_modifier_type_items_enum type);

	void remove(LineStyleThicknessModifier modifier);
};

class LineStyleGeometryModifiers : public pyUniplug {
public:
	LineStyleGeometryModifiers(PyObject* pyobj) : pyUniplug(pyobj) {}
	LineStyleGeometryModifiers() : pyUniplug(0) { }

	enum linestyle_geometry_modifier_type_items_enum {
		linestyle_geometry_modifier_type_items_2D_OFFSET = 17,	
		linestyle_geometry_modifier_type_items_2D_TRANSFORM = 18,	
		linestyle_geometry_modifier_type_items_BACKBONE_STRETCHER = 11,	
		linestyle_geometry_modifier_type_items_BEZIER_CURVE = 6,	
		linestyle_geometry_modifier_type_items_BLUEPRINT = 16,	
		linestyle_geometry_modifier_type_items_GUIDING_LINES = 15,	
		linestyle_geometry_modifier_type_items_PERLIN_NOISE_1D = 9,	
		linestyle_geometry_modifier_type_items_PERLIN_NOISE_2D = 10,	
		linestyle_geometry_modifier_type_items_POLYGONIZATION = 14,	
		linestyle_geometry_modifier_type_items_SAMPLING = 5,	
		linestyle_geometry_modifier_type_items_SIMPLIFICATION = 22,	
		linestyle_geometry_modifier_type_items_SINUS_DISPLACEMENT = 7,	
		linestyle_geometry_modifier_type_items_SPATIAL_NOISE = 8,	
		linestyle_geometry_modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_linestyle_geometry_modifier_type_items() {
		return {{"2D_OFFSET", linestyle_geometry_modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", linestyle_geometry_modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", linestyle_geometry_modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", linestyle_geometry_modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", linestyle_geometry_modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", linestyle_geometry_modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", linestyle_geometry_modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", linestyle_geometry_modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", linestyle_geometry_modifier_type_items_POLYGONIZATION}, {"SAMPLING", linestyle_geometry_modifier_type_items_SAMPLING}, {"SIMPLIFICATION", linestyle_geometry_modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", linestyle_geometry_modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", linestyle_geometry_modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", linestyle_geometry_modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_linestyle_geometry_modifier_type_items_to_string() {
		return {{linestyle_geometry_modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {linestyle_geometry_modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {linestyle_geometry_modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {linestyle_geometry_modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {linestyle_geometry_modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {linestyle_geometry_modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {linestyle_geometry_modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {linestyle_geometry_modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {linestyle_geometry_modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {linestyle_geometry_modifier_type_items_SAMPLING, "SAMPLING"}, {linestyle_geometry_modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {linestyle_geometry_modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {linestyle_geometry_modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {linestyle_geometry_modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_linestyle_geometry_modifier_type_items = create_string_to_linestyle_geometry_modifier_type_items();
	const std::map<int, std::string> linestyle_geometry_modifier_type_items_to_string = create_linestyle_geometry_modifier_type_items_to_string();

	LineStyleGeometryModifier create(const std::string name, linestyle_geometry_modifier_type_items_enum type);

	void remove(LineStyleGeometryModifier modifier);
};

class BlendDataCameras : public pyUniplug {
public:
	BlendDataCameras(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataCameras() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Camera create(const std::string name);

	void remove(Camera camera);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataScenes : public pyUniplug {
public:
	BlendDataScenes(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataScenes() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Scene create(const std::string name);

	void remove(Scene scene);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataObjects : public pyUniplug {
public:
	BlendDataObjects(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataObjects() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Object create(const std::string name, ID object_data);

	void remove(Object object_value);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataMaterials : public pyUniplug {
public:
	BlendDataMaterials(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataMaterials() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Material create(const std::string name);

	void remove(Material material);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataNodeTrees : public pyUniplug {
public:
	BlendDataNodeTrees(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataNodeTrees() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	enum dummy_items_enum {
		dummy_items_DUMMY = 0	
	};

	std::map<std::string, int> create_string_to_dummy_items() {
		return {{"DUMMY", dummy_items_DUMMY}};
	};

	std::map<int, std::string> create_dummy_items_to_string() {
		return {{dummy_items_DUMMY, "DUMMY"}};
	};

	const std::map<std::string, int> string_to_dummy_items = create_string_to_dummy_items();
	const std::map<int, std::string> dummy_items_to_string = create_dummy_items_to_string();

	NodeTree create(const std::string name, dummy_items_enum type);

	void remove(NodeTree tree);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataMeshes : public pyUniplug {
public:
	BlendDataMeshes(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataMeshes() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Mesh create(const std::string name);

	enum mesh_type_items_enum {
		mesh_type_items_PREVIEW = 1,	
		mesh_type_items_RENDER = 2	
	};

	std::map<std::string, int> create_string_to_mesh_type_items() {
		return {{"PREVIEW", mesh_type_items_PREVIEW}, {"RENDER", mesh_type_items_RENDER}};
	};

	std::map<int, std::string> create_mesh_type_items_to_string() {
		return {{mesh_type_items_PREVIEW, "PREVIEW"}, {mesh_type_items_RENDER, "RENDER"}};
	};

	const std::map<std::string, int> string_to_mesh_type_items = create_string_to_mesh_type_items();
	const std::map<int, std::string> mesh_type_items_to_string = create_mesh_type_items_to_string();

	Mesh new_from_object(Scene scene, Object object_value, bool apply_modifiers, mesh_type_items_enum settings, bool calc_tessface = true, bool calc_undeformed = false);

	void remove(Mesh mesh);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataLamps : public pyUniplug {
public:
	BlendDataLamps(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataLamps() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	enum lamp_type_items_enum {
		lamp_type_items_POINT = 0,	
		lamp_type_items_SUN = 1,	
		lamp_type_items_SPOT = 2,	
		lamp_type_items_HEMI = 3,	
		lamp_type_items_AREA = 4	
	};

	std::map<std::string, int> create_string_to_lamp_type_items() {
		return {{"POINT", lamp_type_items_POINT}, {"SUN", lamp_type_items_SUN}, {"SPOT", lamp_type_items_SPOT}, {"HEMI", lamp_type_items_HEMI}, {"AREA", lamp_type_items_AREA}};
	};

	std::map<int, std::string> create_lamp_type_items_to_string() {
		return {{lamp_type_items_POINT, "POINT"}, {lamp_type_items_SUN, "SUN"}, {lamp_type_items_SPOT, "SPOT"}, {lamp_type_items_HEMI, "HEMI"}, {lamp_type_items_AREA, "AREA"}};
	};

	const std::map<std::string, int> string_to_lamp_type_items = create_string_to_lamp_type_items();
	const std::map<int, std::string> lamp_type_items_to_string = create_lamp_type_items_to_string();

	Lamp create(const std::string name, lamp_type_items_enum type);

	void remove(Lamp lamp);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataLibraries : public pyUniplug {
public:
	BlendDataLibraries(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataLibraries() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataScreens : public pyUniplug {
public:
	BlendDataScreens(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataScreens() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataWindowManagers : public pyUniplug {
public:
	BlendDataWindowManagers(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataWindowManagers() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataImages : public pyUniplug {
public:
	BlendDataImages(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataImages() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Image create(const std::string name, int width, int height, bool alpha = false, bool float_buffer = false, bool stereo3d = false);

	Image load(const std::string filepath);

	void remove(Image image);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataLattices : public pyUniplug {
public:
	BlendDataLattices(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataLattices() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Lattice create(const std::string name);

	void remove(Lattice lattice);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataCurves : public pyUniplug {
public:
	BlendDataCurves(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataCurves() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	enum object_type_curve_items_enum {
		object_type_curve_items_CURVE = 2,	
		object_type_curve_items_SURFACE = 3,	
		object_type_curve_items_FONT = 4	
	};

	std::map<std::string, int> create_string_to_object_type_curve_items() {
		return {{"CURVE", object_type_curve_items_CURVE}, {"SURFACE", object_type_curve_items_SURFACE}, {"FONT", object_type_curve_items_FONT}};
	};

	std::map<int, std::string> create_object_type_curve_items_to_string() {
		return {{object_type_curve_items_CURVE, "CURVE"}, {object_type_curve_items_SURFACE, "SURFACE"}, {object_type_curve_items_FONT, "FONT"}};
	};

	const std::map<std::string, int> string_to_object_type_curve_items = create_string_to_object_type_curve_items();
	const std::map<int, std::string> object_type_curve_items_to_string = create_object_type_curve_items_to_string();

	Curve create(const std::string name, object_type_curve_items_enum type);

	void remove(Curve curve);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataMetaBalls : public pyUniplug {
public:
	BlendDataMetaBalls(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataMetaBalls() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	MetaBall create(const std::string name);

	void remove(MetaBall metaball);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataFonts : public pyUniplug {
public:
	BlendDataFonts(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataFonts() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	VectorFont load(const std::string filepath);

	void remove(VectorFont vfont);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataTextures : public pyUniplug {
public:
	BlendDataTextures(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataTextures() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	enum texture_type_items_enum {
		texture_type_items_NONE = 0,	
		texture_type_items_BLEND = 5,	
		texture_type_items_CLOUDS = 1,	
		texture_type_items_DISTORTED_NOISE = 13,	
		texture_type_items_ENVIRONMENT_MAP = 10,	
		texture_type_items_IMAGE = 8,	
		texture_type_items_MAGIC = 4,	
		texture_type_items_MARBLE = 3,	
		texture_type_items_MUSGRAVE = 11,	
		texture_type_items_NOISE = 7,	
		texture_type_items_OCEAN = 16,	
		texture_type_items_POINT_DENSITY = 14,	
		texture_type_items_STUCCI = 6,	
		texture_type_items_VORONOI = 12,	
		texture_type_items_VOXEL_DATA = 15,	
		texture_type_items_WOOD = 2	
	};

	std::map<std::string, int> create_string_to_texture_type_items() {
		return {{"NONE", texture_type_items_NONE}, {"BLEND", texture_type_items_BLEND}, {"CLOUDS", texture_type_items_CLOUDS}, {"DISTORTED_NOISE", texture_type_items_DISTORTED_NOISE}, {"ENVIRONMENT_MAP", texture_type_items_ENVIRONMENT_MAP}, {"IMAGE", texture_type_items_IMAGE}, {"MAGIC", texture_type_items_MAGIC}, {"MARBLE", texture_type_items_MARBLE}, {"MUSGRAVE", texture_type_items_MUSGRAVE}, {"NOISE", texture_type_items_NOISE}, {"OCEAN", texture_type_items_OCEAN}, {"POINT_DENSITY", texture_type_items_POINT_DENSITY}, {"STUCCI", texture_type_items_STUCCI}, {"VORONOI", texture_type_items_VORONOI}, {"VOXEL_DATA", texture_type_items_VOXEL_DATA}, {"WOOD", texture_type_items_WOOD}};
	};

	std::map<int, std::string> create_texture_type_items_to_string() {
		return {{texture_type_items_NONE, "NONE"}, {texture_type_items_BLEND, "BLEND"}, {texture_type_items_CLOUDS, "CLOUDS"}, {texture_type_items_DISTORTED_NOISE, "DISTORTED_NOISE"}, {texture_type_items_ENVIRONMENT_MAP, "ENVIRONMENT_MAP"}, {texture_type_items_IMAGE, "IMAGE"}, {texture_type_items_MAGIC, "MAGIC"}, {texture_type_items_MARBLE, "MARBLE"}, {texture_type_items_MUSGRAVE, "MUSGRAVE"}, {texture_type_items_NOISE, "NOISE"}, {texture_type_items_OCEAN, "OCEAN"}, {texture_type_items_POINT_DENSITY, "POINT_DENSITY"}, {texture_type_items_STUCCI, "STUCCI"}, {texture_type_items_VORONOI, "VORONOI"}, {texture_type_items_VOXEL_DATA, "VOXEL_DATA"}, {texture_type_items_WOOD, "WOOD"}};
	};

	const std::map<std::string, int> string_to_texture_type_items = create_string_to_texture_type_items();
	const std::map<int, std::string> texture_type_items_to_string = create_texture_type_items_to_string();

	Texture create(const std::string name, texture_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, texture_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(Texture)
	}

	void remove(Texture texture) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", texture.get_pyobjref())
	}

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataBrushes : public pyUniplug {
public:
	BlendDataBrushes(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataBrushes() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Brush create(const std::string name);

	void remove(Brush brush);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataWorlds : public pyUniplug {
public:
	BlendDataWorlds(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataWorlds() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	World create(const std::string name);

	void remove(World world);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataGroups : public pyUniplug {
public:
	BlendDataGroups(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataGroups() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Group create(const std::string name);

	void remove(Group group);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataTexts : public pyUniplug {
public:
	BlendDataTexts(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataTexts() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Text create(const std::string name);

	void remove(Text text);

	Text load(const std::string filepath, bool internal = false);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataSpeakers : public pyUniplug {
public:
	BlendDataSpeakers(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataSpeakers() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Speaker create(const std::string name);

	void remove(Speaker speaker);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataSounds : public pyUniplug {
public:
	BlendDataSounds(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataSounds() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Sound load(const std::string filepath);

	void remove(Sound sound);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataArmatures : public pyUniplug {
public:
	BlendDataArmatures(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataArmatures() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Armature create(const std::string name);

	void remove(Armature armature);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataActions : public pyUniplug {
public:
	BlendDataActions(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataActions() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Action create(const std::string name);

	void remove(Action action);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataParticles : public pyUniplug {
public:
	BlendDataParticles(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataParticles() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	ParticleSettings create(const std::string name);

	void remove(ParticleSettings particle);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataPalettes : public pyUniplug {
public:
	BlendDataPalettes(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataPalettes() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	Palette create(const std::string name);

	void remove(Palette palette);

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}
};

class BlendDataGreasePencils : public pyUniplug {
public:
	BlendDataGreasePencils(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataGreasePencils() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}

	GreasePencil create(const std::string name);

	void remove(GreasePencil grease_pencil);
};

class BlendDataMovieClips : public pyUniplug {
public:
	BlendDataMovieClips(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataMovieClips() : pyUniplug(0) { }

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}

	void remove(MovieClip clip);

	MovieClip load(const std::string filepath);
};

class BlendDataMasks : public pyUniplug {
public:
	BlendDataMasks(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataMasks() : pyUniplug(0) { }

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}

	Mask create(const std::string name = NULL);

	void remove(Mask mask);
};

class BlendDataLineStyles : public pyUniplug {
public:
	BlendDataLineStyles(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendDataLineStyles() : pyUniplug(0) { }

	bool is_updated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_updated")
	}

	void is_updated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_updated", value)
	}

	void tag(bool value) {
		PYTHON_FUNCTION_ARGS_CALL("tag", "i", value)
	}

	FreestyleLineStyle create(const std::string name);

	void remove(FreestyleLineStyle linestyle);
};

class MaterialTextureSlots : public pyUniplug {
public:
	MaterialTextureSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialTextureSlots() : pyUniplug(0) { }

	MaterialTextureSlot add();

	MaterialTextureSlot create(int index);

	void clear(int index) {
		PYTHON_FUNCTION_ARGS_CALL("clear", "i", index)
	}
};

class MeshVertices : public pyUniplug {
public:
	MeshVertices(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertices() : pyUniplug(0) { }

	void add(int count = 0) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}
};

class MeshEdges : public pyUniplug {
public:
	MeshEdges(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshEdges() : pyUniplug(0) { }

	void add(int count = 0) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}
};

class MeshTessFaces : public pyUniplug {
public:
	MeshTessFaces(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshTessFaces() : pyUniplug(0) { }

	int active() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active")
	}

	void active(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	void add(int count = 0) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}
};

class MeshLoops : public pyUniplug {
public:
	MeshLoops(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshLoops() : pyUniplug(0) { }

	void add(int count = 0) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}
};

class MeshPolygons : public pyUniplug {
public:
	MeshPolygons(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygons() : pyUniplug(0) { }

	int active() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active")
	}

	void active(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	void add(int count = 0) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}
};

class UVLoopLayers : public pyUniplug {
public:
	UVLoopLayers(PyObject* pyobj) : pyUniplug(pyobj) {}
	UVLoopLayers() : pyUniplug(0) { }

	MeshUVLoopLayer active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}
};

class TessfaceUVTextures : public pyUniplug {
public:
	TessfaceUVTextures(PyObject* pyobj) : pyUniplug(pyobj) {}
	TessfaceUVTextures() : pyUniplug(0) { }

	MeshTextureFaceLayer active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	MeshTextureFaceLayer create(const std::string name = "UVMap");
};

class UVTextures : public pyUniplug {
public:
	UVTextures(PyObject* pyobj) : pyUniplug(pyobj) {}
	UVTextures() : pyUniplug(0) { }

	MeshTexturePolyLayer active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	MeshTexturePolyLayer create(const std::string name = "UVMap");

	void remove(MeshTexturePolyLayer layer);
};

class VertexColors : public pyUniplug {
public:
	VertexColors(PyObject* pyobj) : pyUniplug(pyobj) {}
	VertexColors() : pyUniplug(0) { }

	MeshColorLayer active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	MeshColorLayer create(const std::string name = "Col");
};

class LoopColors : public pyUniplug {
public:
	LoopColors(PyObject* pyobj) : pyUniplug(pyobj) {}
	LoopColors() : pyUniplug(0) { }

	MeshLoopColorLayer active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	MeshLoopColorLayer create(const std::string name = "Col");

	void remove(MeshLoopColorLayer layer);
};

class VertexFloatProperties : public pyUniplug {
public:
	VertexFloatProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	VertexFloatProperties() : pyUniplug(0) { }

	MeshVertexFloatPropertyLayer create(const std::string name = "Float Prop");
};

class VertexIntProperties : public pyUniplug {
public:
	VertexIntProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	VertexIntProperties() : pyUniplug(0) { }

	MeshVertexIntPropertyLayer create(const std::string name = "Int Prop");
};

class VertexStringProperties : public pyUniplug {
public:
	VertexStringProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	VertexStringProperties() : pyUniplug(0) { }

	MeshVertexStringPropertyLayer create(const std::string name = "String Prop");
};

class PolygonFloatProperties : public pyUniplug {
public:
	PolygonFloatProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	PolygonFloatProperties() : pyUniplug(0) { }

	MeshPolygonFloatPropertyLayer create(const std::string name = "Float Prop");
};

class PolygonIntProperties : public pyUniplug {
public:
	PolygonIntProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	PolygonIntProperties() : pyUniplug(0) { }

	MeshPolygonIntPropertyLayer create(const std::string name = "Int Prop");
};

class PolygonStringProperties : public pyUniplug {
public:
	PolygonStringProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	PolygonStringProperties() : pyUniplug(0) { }

	MeshPolygonStringPropertyLayer create(const std::string name = "String Prop");
};

class MetaBallElements : public pyUniplug {
public:
	MetaBallElements(PyObject* pyobj) : pyUniplug(pyobj) {}
	MetaBallElements() : pyUniplug(0) { }

	MetaElement active();

	enum metaelem_type_items_enum {
		metaelem_type_items_BALL = 0,	
		metaelem_type_items_CAPSULE = 4,	
		metaelem_type_items_PLANE = 5,	
		metaelem_type_items_ELLIPSOID = 6,	
		metaelem_type_items_CUBE = 7	
	};

	std::map<std::string, int> create_string_to_metaelem_type_items() {
		return {{"BALL", metaelem_type_items_BALL}, {"CAPSULE", metaelem_type_items_CAPSULE}, {"PLANE", metaelem_type_items_PLANE}, {"ELLIPSOID", metaelem_type_items_ELLIPSOID}, {"CUBE", metaelem_type_items_CUBE}};
	};

	std::map<int, std::string> create_metaelem_type_items_to_string() {
		return {{metaelem_type_items_BALL, "BALL"}, {metaelem_type_items_CAPSULE, "CAPSULE"}, {metaelem_type_items_PLANE, "PLANE"}, {metaelem_type_items_ELLIPSOID, "ELLIPSOID"}, {metaelem_type_items_CUBE, "CUBE"}};
	};

	const std::map<std::string, int> string_to_metaelem_type_items = create_string_to_metaelem_type_items();
	const std::map<int, std::string> metaelem_type_items_to_string = create_metaelem_type_items_to_string();

	MetaElement create(metaelem_type_items_enum type = metaelem_type_items_BALL);

	void remove(MetaElement element);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class NlaStrips : public pyUniplug {
public:
	NlaStrips(PyObject* pyobj) : pyUniplug(pyobj) {}
	NlaStrips() : pyUniplug(0) { }

	NlaStrip create(const std::string name, int start, Action action);

	void remove(NlaStrip strip);
};

class NodeInputs : public pyUniplug {
public:
	NodeInputs(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeInputs() : pyUniplug(0) { }

	NodeSocket create(const std::string type, const std::string name, const std::string identifier = NULL);

	void remove(NodeSocket socket);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void move(int from_index, int to_index) {
		PYTHON_FUNCTION_ARGS_CALL("move", "ii", from_index, to_index)
	}
};

class NodeOutputs : public pyUniplug {
public:
	NodeOutputs(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeOutputs() : pyUniplug(0) { }

	NodeSocket create(const std::string type, const std::string name, const std::string identifier = NULL);

	void remove(NodeSocket socket);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void move(int from_index, int to_index) {
		PYTHON_FUNCTION_ARGS_CALL("move", "ii", from_index, to_index)
	}
};

class Nodes : public pyUniplug {
public:
	Nodes(PyObject* pyobj) : pyUniplug(pyobj) {}
	Nodes() : pyUniplug(0) { }

	Node active();

	Node create(const std::string type);

	void remove(Node node);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class NodeLinks : public pyUniplug {
public:
	NodeLinks(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeLinks() : pyUniplug(0) { }

	NodeLink create(NodeSocket input, NodeSocket output, bool verify_limits = true);

	void remove(NodeLink link);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class NodeTreeInputs : public pyUniplug {
public:
	NodeTreeInputs(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeTreeInputs() : pyUniplug(0) { }

	NodeSocketInterface create(const std::string type, const std::string name);

	void remove(NodeSocketInterface socket);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void move(int from_index, int to_index) {
		PYTHON_FUNCTION_ARGS_CALL("move", "ii", from_index, to_index)
	}
};

class NodeTreeOutputs : public pyUniplug {
public:
	NodeTreeOutputs(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeTreeOutputs() : pyUniplug(0) { }

	NodeSocketInterface create(const std::string type, const std::string name);

	void remove(NodeSocketInterface socket);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void move(int from_index, int to_index) {
		PYTHON_FUNCTION_ARGS_CALL("move", "ii", from_index, to_index)
	}
};

class CompositorNodeOutputFileFileSlots : public pyUniplug {
public:
	CompositorNodeOutputFileFileSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	CompositorNodeOutputFileFileSlots() : pyUniplug(0) { }

	NodeSocket create(const std::string name);

	void remove(NodeSocket socket);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void move(int from_index, int to_index) {
		PYTHON_FUNCTION_ARGS_CALL("move", "ii", from_index, to_index)
	}
};

class CompositorNodeOutputFileLayerSlots : public pyUniplug {
public:
	CompositorNodeOutputFileLayerSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	CompositorNodeOutputFileLayerSlots() : pyUniplug(0) { }

	NodeSocket create(const std::string name);

	void remove(NodeSocket socket);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void move(int from_index, int to_index) {
		PYTHON_FUNCTION_ARGS_CALL("move", "ii", from_index, to_index)
	}
};

class ObjectModifiers : public pyUniplug {
public:
	ObjectModifiers(PyObject* pyobj) : pyUniplug(pyobj) {}
	ObjectModifiers() : pyUniplug(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_DATA_TRANSFER = 49,	
		modifier_type_items_MESH_CACHE = 46,	
		modifier_type_items_NORMAL_EDIT = 50,	
		modifier_type_items_UV_PROJECT = 15,	
		modifier_type_items_UV_WARP = 45,	
		modifier_type_items_VERTEX_WEIGHT_EDIT = 36,	
		modifier_type_items_VERTEX_WEIGHT_MIX = 37,	
		modifier_type_items_VERTEX_WEIGHT_PROXIMITY = 38,	
		modifier_type_items_ARRAY = 12,	
		modifier_type_items_BEVEL = 24,	
		modifier_type_items_BOOLEAN = 11,	
		modifier_type_items_BUILD = 4,	
		modifier_type_items_DECIMATE = 6,	
		modifier_type_items_EDGE_SPLIT = 13,	
		modifier_type_items_MASK = 27,	
		modifier_type_items_MIRROR = 5,	
		modifier_type_items_MULTIRES = 29,	
		modifier_type_items_REMESH = 41,	
		modifier_type_items_SCREW = 34,	
		modifier_type_items_SKIN = 42,	
		modifier_type_items_SOLIDIFY = 33,	
		modifier_type_items_SUBSURF = 1,	
		modifier_type_items_TRIANGULATE = 44,	
		modifier_type_items_WIREFRAME = 48,	
		modifier_type_items_ARMATURE = 8,	
		modifier_type_items_CAST = 17,	
		modifier_type_items_CORRECTIVE_SMOOTH = 51,	
		modifier_type_items_CURVE = 3,	
		modifier_type_items_DISPLACE = 14,	
		modifier_type_items_HOOK = 9,	
		modifier_type_items_LAPLACIANSMOOTH = 43,	
		modifier_type_items_LAPLACIANDEFORM = 47,	
		modifier_type_items_LATTICE = 2,	
		modifier_type_items_MESH_DEFORM = 18,	
		modifier_type_items_SHRINKWRAP = 25,	
		modifier_type_items_SIMPLE_DEFORM = 28,	
		modifier_type_items_SMOOTH = 16,	
		modifier_type_items_WARP = 35,	
		modifier_type_items_WAVE = 7,	
		modifier_type_items_CLOTH = 22,	
		modifier_type_items_COLLISION = 23,	
		modifier_type_items_DYNAMIC_PAINT = 40,	
		modifier_type_items_EXPLODE = 21,	
		modifier_type_items_FLUID_SIMULATION = 26,	
		modifier_type_items_OCEAN = 39,	
		modifier_type_items_PARTICLE_INSTANCE = 20,	
		modifier_type_items_PARTICLE_SYSTEM = 19,	
		modifier_type_items_SMOKE = 31,	
		modifier_type_items_SOFT_BODY = 10,	
		modifier_type_items_SURFACE = 30	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"DATA_TRANSFER", modifier_type_items_DATA_TRANSFER}, {"MESH_CACHE", modifier_type_items_MESH_CACHE}, {"NORMAL_EDIT", modifier_type_items_NORMAL_EDIT}, {"UV_PROJECT", modifier_type_items_UV_PROJECT}, {"UV_WARP", modifier_type_items_UV_WARP}, {"VERTEX_WEIGHT_EDIT", modifier_type_items_VERTEX_WEIGHT_EDIT}, {"VERTEX_WEIGHT_MIX", modifier_type_items_VERTEX_WEIGHT_MIX}, {"VERTEX_WEIGHT_PROXIMITY", modifier_type_items_VERTEX_WEIGHT_PROXIMITY}, {"ARRAY", modifier_type_items_ARRAY}, {"BEVEL", modifier_type_items_BEVEL}, {"BOOLEAN", modifier_type_items_BOOLEAN}, {"BUILD", modifier_type_items_BUILD}, {"DECIMATE", modifier_type_items_DECIMATE}, {"EDGE_SPLIT", modifier_type_items_EDGE_SPLIT}, {"MASK", modifier_type_items_MASK}, {"MIRROR", modifier_type_items_MIRROR}, {"MULTIRES", modifier_type_items_MULTIRES}, {"REMESH", modifier_type_items_REMESH}, {"SCREW", modifier_type_items_SCREW}, {"SKIN", modifier_type_items_SKIN}, {"SOLIDIFY", modifier_type_items_SOLIDIFY}, {"SUBSURF", modifier_type_items_SUBSURF}, {"TRIANGULATE", modifier_type_items_TRIANGULATE}, {"WIREFRAME", modifier_type_items_WIREFRAME}, {"ARMATURE", modifier_type_items_ARMATURE}, {"CAST", modifier_type_items_CAST}, {"CORRECTIVE_SMOOTH", modifier_type_items_CORRECTIVE_SMOOTH}, {"CURVE", modifier_type_items_CURVE}, {"DISPLACE", modifier_type_items_DISPLACE}, {"HOOK", modifier_type_items_HOOK}, {"LAPLACIANSMOOTH", modifier_type_items_LAPLACIANSMOOTH}, {"LAPLACIANDEFORM", modifier_type_items_LAPLACIANDEFORM}, {"LATTICE", modifier_type_items_LATTICE}, {"MESH_DEFORM", modifier_type_items_MESH_DEFORM}, {"SHRINKWRAP", modifier_type_items_SHRINKWRAP}, {"SIMPLE_DEFORM", modifier_type_items_SIMPLE_DEFORM}, {"SMOOTH", modifier_type_items_SMOOTH}, {"WARP", modifier_type_items_WARP}, {"WAVE", modifier_type_items_WAVE}, {"CLOTH", modifier_type_items_CLOTH}, {"COLLISION", modifier_type_items_COLLISION}, {"DYNAMIC_PAINT", modifier_type_items_DYNAMIC_PAINT}, {"EXPLODE", modifier_type_items_EXPLODE}, {"FLUID_SIMULATION", modifier_type_items_FLUID_SIMULATION}, {"OCEAN", modifier_type_items_OCEAN}, {"PARTICLE_INSTANCE", modifier_type_items_PARTICLE_INSTANCE}, {"PARTICLE_SYSTEM", modifier_type_items_PARTICLE_SYSTEM}, {"SMOKE", modifier_type_items_SMOKE}, {"SOFT_BODY", modifier_type_items_SOFT_BODY}, {"SURFACE", modifier_type_items_SURFACE}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_DATA_TRANSFER, "DATA_TRANSFER"}, {modifier_type_items_MESH_CACHE, "MESH_CACHE"}, {modifier_type_items_NORMAL_EDIT, "NORMAL_EDIT"}, {modifier_type_items_UV_PROJECT, "UV_PROJECT"}, {modifier_type_items_UV_WARP, "UV_WARP"}, {modifier_type_items_VERTEX_WEIGHT_EDIT, "VERTEX_WEIGHT_EDIT"}, {modifier_type_items_VERTEX_WEIGHT_MIX, "VERTEX_WEIGHT_MIX"}, {modifier_type_items_VERTEX_WEIGHT_PROXIMITY, "VERTEX_WEIGHT_PROXIMITY"}, {modifier_type_items_ARRAY, "ARRAY"}, {modifier_type_items_BEVEL, "BEVEL"}, {modifier_type_items_BOOLEAN, "BOOLEAN"}, {modifier_type_items_BUILD, "BUILD"}, {modifier_type_items_DECIMATE, "DECIMATE"}, {modifier_type_items_EDGE_SPLIT, "EDGE_SPLIT"}, {modifier_type_items_MASK, "MASK"}, {modifier_type_items_MIRROR, "MIRROR"}, {modifier_type_items_MULTIRES, "MULTIRES"}, {modifier_type_items_REMESH, "REMESH"}, {modifier_type_items_SCREW, "SCREW"}, {modifier_type_items_SKIN, "SKIN"}, {modifier_type_items_SOLIDIFY, "SOLIDIFY"}, {modifier_type_items_SUBSURF, "SUBSURF"}, {modifier_type_items_TRIANGULATE, "TRIANGULATE"}, {modifier_type_items_WIREFRAME, "WIREFRAME"}, {modifier_type_items_ARMATURE, "ARMATURE"}, {modifier_type_items_CAST, "CAST"}, {modifier_type_items_CORRECTIVE_SMOOTH, "CORRECTIVE_SMOOTH"}, {modifier_type_items_CURVE, "CURVE"}, {modifier_type_items_DISPLACE, "DISPLACE"}, {modifier_type_items_HOOK, "HOOK"}, {modifier_type_items_LAPLACIANSMOOTH, "LAPLACIANSMOOTH"}, {modifier_type_items_LAPLACIANDEFORM, "LAPLACIANDEFORM"}, {modifier_type_items_LATTICE, "LATTICE"}, {modifier_type_items_MESH_DEFORM, "MESH_DEFORM"}, {modifier_type_items_SHRINKWRAP, "SHRINKWRAP"}, {modifier_type_items_SIMPLE_DEFORM, "SIMPLE_DEFORM"}, {modifier_type_items_SMOOTH, "SMOOTH"}, {modifier_type_items_WARP, "WARP"}, {modifier_type_items_WAVE, "WAVE"}, {modifier_type_items_CLOTH, "CLOTH"}, {modifier_type_items_COLLISION, "COLLISION"}, {modifier_type_items_DYNAMIC_PAINT, "DYNAMIC_PAINT"}, {modifier_type_items_EXPLODE, "EXPLODE"}, {modifier_type_items_FLUID_SIMULATION, "FLUID_SIMULATION"}, {modifier_type_items_OCEAN, "OCEAN"}, {modifier_type_items_PARTICLE_INSTANCE, "PARTICLE_INSTANCE"}, {modifier_type_items_PARTICLE_SYSTEM, "PARTICLE_SYSTEM"}, {modifier_type_items_SMOKE, "SMOKE"}, {modifier_type_items_SOFT_BODY, "SOFT_BODY"}, {modifier_type_items_SURFACE, "SURFACE"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	Modifier create(const std::string name, modifier_type_items_enum type);

	void remove(Modifier modifier);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class ObjectConstraints : public pyUniplug {
public:
	ObjectConstraints(PyObject* pyobj) : pyUniplug(pyobj) {}
	ObjectConstraints() : pyUniplug(0) { }

	Constraint active();

	enum constraint_type_items_enum {
		constraint_type_items_CAMERA_SOLVER = 27,	
		constraint_type_items_FOLLOW_TRACK = 26,	
		constraint_type_items_OBJECT_SOLVER = 28,	
		constraint_type_items_COPY_LOCATION = 9,	
		constraint_type_items_COPY_ROTATION = 8,	
		constraint_type_items_COPY_SCALE = 10,	
		constraint_type_items_COPY_TRANSFORMS = 23,	
		constraint_type_items_LIMIT_DISTANCE = 14,	
		constraint_type_items_LIMIT_LOCATION = 6,	
		constraint_type_items_LIMIT_ROTATION = 5,	
		constraint_type_items_LIMIT_SCALE = 7,	
		constraint_type_items_MAINTAIN_VOLUME = 24,	
		constraint_type_items_TRANSFORM = 19,	
		constraint_type_items_CLAMP_TO = 18,	
		constraint_type_items_DAMPED_TRACK = 21,	
		constraint_type_items_IK = 3,	
		constraint_type_items_LOCKED_TRACK = 13,	
		constraint_type_items_SPLINE_IK = 22,	
		constraint_type_items_STRETCH_TO = 15,	
		constraint_type_items_TRACK_TO = 2,	
		constraint_type_items_ACTION = 12,	
		constraint_type_items_CHILD_OF = 1,	
		constraint_type_items_FLOOR = 16,	
		constraint_type_items_FOLLOW_PATH = 4,	
		constraint_type_items_PIVOT = 25,	
		constraint_type_items_RIGID_BODY_JOINT = 17,	
		constraint_type_items_SHRINKWRAP = 20	
	};

	std::map<std::string, int> create_string_to_constraint_type_items() {
		return {{"CAMERA_SOLVER", constraint_type_items_CAMERA_SOLVER}, {"FOLLOW_TRACK", constraint_type_items_FOLLOW_TRACK}, {"OBJECT_SOLVER", constraint_type_items_OBJECT_SOLVER}, {"COPY_LOCATION", constraint_type_items_COPY_LOCATION}, {"COPY_ROTATION", constraint_type_items_COPY_ROTATION}, {"COPY_SCALE", constraint_type_items_COPY_SCALE}, {"COPY_TRANSFORMS", constraint_type_items_COPY_TRANSFORMS}, {"LIMIT_DISTANCE", constraint_type_items_LIMIT_DISTANCE}, {"LIMIT_LOCATION", constraint_type_items_LIMIT_LOCATION}, {"LIMIT_ROTATION", constraint_type_items_LIMIT_ROTATION}, {"LIMIT_SCALE", constraint_type_items_LIMIT_SCALE}, {"MAINTAIN_VOLUME", constraint_type_items_MAINTAIN_VOLUME}, {"TRANSFORM", constraint_type_items_TRANSFORM}, {"CLAMP_TO", constraint_type_items_CLAMP_TO}, {"DAMPED_TRACK", constraint_type_items_DAMPED_TRACK}, {"IK", constraint_type_items_IK}, {"LOCKED_TRACK", constraint_type_items_LOCKED_TRACK}, {"SPLINE_IK", constraint_type_items_SPLINE_IK}, {"STRETCH_TO", constraint_type_items_STRETCH_TO}, {"TRACK_TO", constraint_type_items_TRACK_TO}, {"ACTION", constraint_type_items_ACTION}, {"CHILD_OF", constraint_type_items_CHILD_OF}, {"FLOOR", constraint_type_items_FLOOR}, {"FOLLOW_PATH", constraint_type_items_FOLLOW_PATH}, {"PIVOT", constraint_type_items_PIVOT}, {"RIGID_BODY_JOINT", constraint_type_items_RIGID_BODY_JOINT}, {"SHRINKWRAP", constraint_type_items_SHRINKWRAP}};
	};

	std::map<int, std::string> create_constraint_type_items_to_string() {
		return {{constraint_type_items_CAMERA_SOLVER, "CAMERA_SOLVER"}, {constraint_type_items_FOLLOW_TRACK, "FOLLOW_TRACK"}, {constraint_type_items_OBJECT_SOLVER, "OBJECT_SOLVER"}, {constraint_type_items_COPY_LOCATION, "COPY_LOCATION"}, {constraint_type_items_COPY_ROTATION, "COPY_ROTATION"}, {constraint_type_items_COPY_SCALE, "COPY_SCALE"}, {constraint_type_items_COPY_TRANSFORMS, "COPY_TRANSFORMS"}, {constraint_type_items_LIMIT_DISTANCE, "LIMIT_DISTANCE"}, {constraint_type_items_LIMIT_LOCATION, "LIMIT_LOCATION"}, {constraint_type_items_LIMIT_ROTATION, "LIMIT_ROTATION"}, {constraint_type_items_LIMIT_SCALE, "LIMIT_SCALE"}, {constraint_type_items_MAINTAIN_VOLUME, "MAINTAIN_VOLUME"}, {constraint_type_items_TRANSFORM, "TRANSFORM"}, {constraint_type_items_CLAMP_TO, "CLAMP_TO"}, {constraint_type_items_DAMPED_TRACK, "DAMPED_TRACK"}, {constraint_type_items_IK, "IK"}, {constraint_type_items_LOCKED_TRACK, "LOCKED_TRACK"}, {constraint_type_items_SPLINE_IK, "SPLINE_IK"}, {constraint_type_items_STRETCH_TO, "STRETCH_TO"}, {constraint_type_items_TRACK_TO, "TRACK_TO"}, {constraint_type_items_ACTION, "ACTION"}, {constraint_type_items_CHILD_OF, "CHILD_OF"}, {constraint_type_items_FLOOR, "FLOOR"}, {constraint_type_items_FOLLOW_PATH, "FOLLOW_PATH"}, {constraint_type_items_PIVOT, "PIVOT"}, {constraint_type_items_RIGID_BODY_JOINT, "RIGID_BODY_JOINT"}, {constraint_type_items_SHRINKWRAP, "SHRINKWRAP"}};
	};

	const std::map<std::string, int> string_to_constraint_type_items = create_string_to_constraint_type_items();
	const std::map<int, std::string> constraint_type_items_to_string = create_constraint_type_items_to_string();

	Constraint create(constraint_type_items_enum type);

	void remove(Constraint constraint);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class VertexGroups : public pyUniplug {
public:
	VertexGroups(PyObject* pyobj) : pyUniplug(pyobj) {}
	VertexGroups() : pyUniplug(0) { }

	VertexGroup active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	VertexGroup create(const std::string name = "Group");

	void remove(VertexGroup group);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class ParticleSystems : public pyUniplug {
public:
	ParticleSystems(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleSystems() : pyUniplug(0) { }

	ParticleSystem active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}
};

class PointCaches : public pyUniplug {
public:
	PointCaches(PyObject* pyobj) : pyUniplug(pyobj) {}
	PointCaches() : pyUniplug(0) { }

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}
};

class PaletteColors : public pyUniplug {
public:
	PaletteColors(PyObject* pyobj) : pyUniplug(pyobj) {}
	PaletteColors() : pyUniplug(0) { }

	PaletteColor active();

	PaletteColor create();

	void remove(PaletteColor color);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class ParticleSettingsTextureSlots : public pyUniplug {
public:
	ParticleSettingsTextureSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleSettingsTextureSlots() : pyUniplug(0) { }

	ParticleSettingsTextureSlot add();

	ParticleSettingsTextureSlot create(int index);

	void clear(int index) {
		PYTHON_FUNCTION_ARGS_CALL("clear", "i", index)
	}
};

class BoneGroups : public pyUniplug {
public:
	BoneGroups(PyObject* pyobj) : pyUniplug(pyobj) {}
	BoneGroups() : pyUniplug(0) { }

	BoneGroup active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	BoneGroup create(const std::string name = "Group");

	void remove(BoneGroup group);
};

class PoseBoneConstraints : public pyUniplug {
public:
	PoseBoneConstraints(PyObject* pyobj) : pyUniplug(pyobj) {}
	PoseBoneConstraints() : pyUniplug(0) { }

	Constraint active();

	enum constraint_type_items_enum {
		constraint_type_items_CAMERA_SOLVER = 27,	
		constraint_type_items_FOLLOW_TRACK = 26,	
		constraint_type_items_OBJECT_SOLVER = 28,	
		constraint_type_items_COPY_LOCATION = 9,	
		constraint_type_items_COPY_ROTATION = 8,	
		constraint_type_items_COPY_SCALE = 10,	
		constraint_type_items_COPY_TRANSFORMS = 23,	
		constraint_type_items_LIMIT_DISTANCE = 14,	
		constraint_type_items_LIMIT_LOCATION = 6,	
		constraint_type_items_LIMIT_ROTATION = 5,	
		constraint_type_items_LIMIT_SCALE = 7,	
		constraint_type_items_MAINTAIN_VOLUME = 24,	
		constraint_type_items_TRANSFORM = 19,	
		constraint_type_items_CLAMP_TO = 18,	
		constraint_type_items_DAMPED_TRACK = 21,	
		constraint_type_items_IK = 3,	
		constraint_type_items_LOCKED_TRACK = 13,	
		constraint_type_items_SPLINE_IK = 22,	
		constraint_type_items_STRETCH_TO = 15,	
		constraint_type_items_TRACK_TO = 2,	
		constraint_type_items_ACTION = 12,	
		constraint_type_items_CHILD_OF = 1,	
		constraint_type_items_FLOOR = 16,	
		constraint_type_items_FOLLOW_PATH = 4,	
		constraint_type_items_PIVOT = 25,	
		constraint_type_items_RIGID_BODY_JOINT = 17,	
		constraint_type_items_SHRINKWRAP = 20	
	};

	std::map<std::string, int> create_string_to_constraint_type_items() {
		return {{"CAMERA_SOLVER", constraint_type_items_CAMERA_SOLVER}, {"FOLLOW_TRACK", constraint_type_items_FOLLOW_TRACK}, {"OBJECT_SOLVER", constraint_type_items_OBJECT_SOLVER}, {"COPY_LOCATION", constraint_type_items_COPY_LOCATION}, {"COPY_ROTATION", constraint_type_items_COPY_ROTATION}, {"COPY_SCALE", constraint_type_items_COPY_SCALE}, {"COPY_TRANSFORMS", constraint_type_items_COPY_TRANSFORMS}, {"LIMIT_DISTANCE", constraint_type_items_LIMIT_DISTANCE}, {"LIMIT_LOCATION", constraint_type_items_LIMIT_LOCATION}, {"LIMIT_ROTATION", constraint_type_items_LIMIT_ROTATION}, {"LIMIT_SCALE", constraint_type_items_LIMIT_SCALE}, {"MAINTAIN_VOLUME", constraint_type_items_MAINTAIN_VOLUME}, {"TRANSFORM", constraint_type_items_TRANSFORM}, {"CLAMP_TO", constraint_type_items_CLAMP_TO}, {"DAMPED_TRACK", constraint_type_items_DAMPED_TRACK}, {"IK", constraint_type_items_IK}, {"LOCKED_TRACK", constraint_type_items_LOCKED_TRACK}, {"SPLINE_IK", constraint_type_items_SPLINE_IK}, {"STRETCH_TO", constraint_type_items_STRETCH_TO}, {"TRACK_TO", constraint_type_items_TRACK_TO}, {"ACTION", constraint_type_items_ACTION}, {"CHILD_OF", constraint_type_items_CHILD_OF}, {"FLOOR", constraint_type_items_FLOOR}, {"FOLLOW_PATH", constraint_type_items_FOLLOW_PATH}, {"PIVOT", constraint_type_items_PIVOT}, {"RIGID_BODY_JOINT", constraint_type_items_RIGID_BODY_JOINT}, {"SHRINKWRAP", constraint_type_items_SHRINKWRAP}};
	};

	std::map<int, std::string> create_constraint_type_items_to_string() {
		return {{constraint_type_items_CAMERA_SOLVER, "CAMERA_SOLVER"}, {constraint_type_items_FOLLOW_TRACK, "FOLLOW_TRACK"}, {constraint_type_items_OBJECT_SOLVER, "OBJECT_SOLVER"}, {constraint_type_items_COPY_LOCATION, "COPY_LOCATION"}, {constraint_type_items_COPY_ROTATION, "COPY_ROTATION"}, {constraint_type_items_COPY_SCALE, "COPY_SCALE"}, {constraint_type_items_COPY_TRANSFORMS, "COPY_TRANSFORMS"}, {constraint_type_items_LIMIT_DISTANCE, "LIMIT_DISTANCE"}, {constraint_type_items_LIMIT_LOCATION, "LIMIT_LOCATION"}, {constraint_type_items_LIMIT_ROTATION, "LIMIT_ROTATION"}, {constraint_type_items_LIMIT_SCALE, "LIMIT_SCALE"}, {constraint_type_items_MAINTAIN_VOLUME, "MAINTAIN_VOLUME"}, {constraint_type_items_TRANSFORM, "TRANSFORM"}, {constraint_type_items_CLAMP_TO, "CLAMP_TO"}, {constraint_type_items_DAMPED_TRACK, "DAMPED_TRACK"}, {constraint_type_items_IK, "IK"}, {constraint_type_items_LOCKED_TRACK, "LOCKED_TRACK"}, {constraint_type_items_SPLINE_IK, "SPLINE_IK"}, {constraint_type_items_STRETCH_TO, "STRETCH_TO"}, {constraint_type_items_TRACK_TO, "TRACK_TO"}, {constraint_type_items_ACTION, "ACTION"}, {constraint_type_items_CHILD_OF, "CHILD_OF"}, {constraint_type_items_FLOOR, "FLOOR"}, {constraint_type_items_FOLLOW_PATH, "FOLLOW_PATH"}, {constraint_type_items_PIVOT, "PIVOT"}, {constraint_type_items_RIGID_BODY_JOINT, "RIGID_BODY_JOINT"}, {constraint_type_items_SHRINKWRAP, "SHRINKWRAP"}};
	};

	const std::map<std::string, int> string_to_constraint_type_items = create_string_to_constraint_type_items();
	const std::map<int, std::string> constraint_type_items_to_string = create_constraint_type_items_to_string();

	Constraint create(constraint_type_items_enum type);

	void remove(Constraint constraint);
};

class RenderPasses : public pyUniplug {
public:
	RenderPasses(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderPasses() : pyUniplug(0) { }

	enum render_pass_type_items_enum {
		render_pass_type_items_COMBINED = 1,	
		render_pass_type_items_Z = 2,	
		render_pass_type_items_COLOR = 4,	
		render_pass_type_items_DIFFUSE = 8,	
		render_pass_type_items_SPECULAR = 16,	
		render_pass_type_items_SHADOW = 32,	
		render_pass_type_items_AO = 64,	
		render_pass_type_items_REFLECTION = 128,	
		render_pass_type_items_NORMAL = 256,	
		render_pass_type_items_VECTOR = 512,	
		render_pass_type_items_REFRACTION = 1024,	
		render_pass_type_items_OBJECT_INDEX = 2048,	
		render_pass_type_items_UV = 4096,	
		render_pass_type_items_MIST = 16384,	
		render_pass_type_items_EMIT = 65536,	
		render_pass_type_items_ENVIRONMENT = 131072,	
		render_pass_type_items_MATERIAL_INDEX = 262144,	
		render_pass_type_items_DIFFUSE_DIRECT = 524288,	
		render_pass_type_items_DIFFUSE_INDIRECT = 1048576,	
		render_pass_type_items_DIFFUSE_COLOR = 2097152,	
		render_pass_type_items_GLOSSY_DIRECT = 4194304,	
		render_pass_type_items_GLOSSY_INDIRECT = 8388608,	
		render_pass_type_items_GLOSSY_COLOR = 16777216,	
		render_pass_type_items_TRANSMISSION_DIRECT = 33554432,	
		render_pass_type_items_TRANSMISSION_INDIRECT = 67108864,	
		render_pass_type_items_TRANSMISSION_COLOR = 134217728,	
		render_pass_type_items_SUBSURFACE_DIRECT = 268435456,	
		render_pass_type_items_SUBSURFACE_INDIRECT = 536870912,	
		render_pass_type_items_SUBSURFACE_COLOR = 1073741824	
	};

	std::map<std::string, int> create_string_to_render_pass_type_items() {
		return {{"COMBINED", render_pass_type_items_COMBINED}, {"Z", render_pass_type_items_Z}, {"COLOR", render_pass_type_items_COLOR}, {"DIFFUSE", render_pass_type_items_DIFFUSE}, {"SPECULAR", render_pass_type_items_SPECULAR}, {"SHADOW", render_pass_type_items_SHADOW}, {"AO", render_pass_type_items_AO}, {"REFLECTION", render_pass_type_items_REFLECTION}, {"NORMAL", render_pass_type_items_NORMAL}, {"VECTOR", render_pass_type_items_VECTOR}, {"REFRACTION", render_pass_type_items_REFRACTION}, {"OBJECT_INDEX", render_pass_type_items_OBJECT_INDEX}, {"UV", render_pass_type_items_UV}, {"MIST", render_pass_type_items_MIST}, {"EMIT", render_pass_type_items_EMIT}, {"ENVIRONMENT", render_pass_type_items_ENVIRONMENT}, {"MATERIAL_INDEX", render_pass_type_items_MATERIAL_INDEX}, {"DIFFUSE_DIRECT", render_pass_type_items_DIFFUSE_DIRECT}, {"DIFFUSE_INDIRECT", render_pass_type_items_DIFFUSE_INDIRECT}, {"DIFFUSE_COLOR", render_pass_type_items_DIFFUSE_COLOR}, {"GLOSSY_DIRECT", render_pass_type_items_GLOSSY_DIRECT}, {"GLOSSY_INDIRECT", render_pass_type_items_GLOSSY_INDIRECT}, {"GLOSSY_COLOR", render_pass_type_items_GLOSSY_COLOR}, {"TRANSMISSION_DIRECT", render_pass_type_items_TRANSMISSION_DIRECT}, {"TRANSMISSION_INDIRECT", render_pass_type_items_TRANSMISSION_INDIRECT}, {"TRANSMISSION_COLOR", render_pass_type_items_TRANSMISSION_COLOR}, {"SUBSURFACE_DIRECT", render_pass_type_items_SUBSURFACE_DIRECT}, {"SUBSURFACE_INDIRECT", render_pass_type_items_SUBSURFACE_INDIRECT}, {"SUBSURFACE_COLOR", render_pass_type_items_SUBSURFACE_COLOR}};
	};

	std::map<int, std::string> create_render_pass_type_items_to_string() {
		return {{render_pass_type_items_COMBINED, "COMBINED"}, {render_pass_type_items_Z, "Z"}, {render_pass_type_items_COLOR, "COLOR"}, {render_pass_type_items_DIFFUSE, "DIFFUSE"}, {render_pass_type_items_SPECULAR, "SPECULAR"}, {render_pass_type_items_SHADOW, "SHADOW"}, {render_pass_type_items_AO, "AO"}, {render_pass_type_items_REFLECTION, "REFLECTION"}, {render_pass_type_items_NORMAL, "NORMAL"}, {render_pass_type_items_VECTOR, "VECTOR"}, {render_pass_type_items_REFRACTION, "REFRACTION"}, {render_pass_type_items_OBJECT_INDEX, "OBJECT_INDEX"}, {render_pass_type_items_UV, "UV"}, {render_pass_type_items_MIST, "MIST"}, {render_pass_type_items_EMIT, "EMIT"}, {render_pass_type_items_ENVIRONMENT, "ENVIRONMENT"}, {render_pass_type_items_MATERIAL_INDEX, "MATERIAL_INDEX"}, {render_pass_type_items_DIFFUSE_DIRECT, "DIFFUSE_DIRECT"}, {render_pass_type_items_DIFFUSE_INDIRECT, "DIFFUSE_INDIRECT"}, {render_pass_type_items_DIFFUSE_COLOR, "DIFFUSE_COLOR"}, {render_pass_type_items_GLOSSY_DIRECT, "GLOSSY_DIRECT"}, {render_pass_type_items_GLOSSY_INDIRECT, "GLOSSY_INDIRECT"}, {render_pass_type_items_GLOSSY_COLOR, "GLOSSY_COLOR"}, {render_pass_type_items_TRANSMISSION_DIRECT, "TRANSMISSION_DIRECT"}, {render_pass_type_items_TRANSMISSION_INDIRECT, "TRANSMISSION_INDIRECT"}, {render_pass_type_items_TRANSMISSION_COLOR, "TRANSMISSION_COLOR"}, {render_pass_type_items_SUBSURFACE_DIRECT, "SUBSURFACE_DIRECT"}, {render_pass_type_items_SUBSURFACE_INDIRECT, "SUBSURFACE_INDIRECT"}, {render_pass_type_items_SUBSURFACE_COLOR, "SUBSURFACE_COLOR"}};
	};

	const std::map<std::string, int> string_to_render_pass_type_items = create_string_to_render_pass_type_items();
	const std::map<int, std::string> render_pass_type_items_to_string = create_render_pass_type_items_to_string();

	RenderPass find_by_type(render_pass_type_items_enum pass_type, const std::string view);
};

class SceneBases : public pyUniplug {
public:
	SceneBases(PyObject* pyobj) : pyUniplug(pyobj) {}
	SceneBases() : pyUniplug(0) { }

	ObjectBase active();
};

class SceneObjects : public pyUniplug {
public:
	SceneObjects(PyObject* pyobj) : pyUniplug(pyobj) {}
	SceneObjects() : pyUniplug(0) { }

	Object active();

	ObjectBase link(Object object_value);

	void unlink(Object object_value);
};

class KeyingSets : public pyUniplug {
public:
	KeyingSets(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyingSets() : pyUniplug(0) { }

	KeyingSet active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	KeyingSet create(const std::string idname = "KeyingSet", const std::string name = "KeyingSet");
};

class KeyingSetsAll : public pyUniplug {
public:
	KeyingSetsAll(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyingSetsAll() : pyUniplug(0) { }

	KeyingSet active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}
};

class TimelineMarkers : public pyUniplug {
public:
	TimelineMarkers(PyObject* pyobj) : pyUniplug(pyobj) {}
	TimelineMarkers() : pyUniplug(0) { }

	TimelineMarker create(const std::string name, int frame = 1);

	void remove(TimelineMarker marker);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class RenderLayers : public pyUniplug {
public:
	RenderLayers(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderLayers() : pyUniplug(0) { }

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	SceneRenderLayer active();

	SceneRenderLayer create(const std::string name);

	void remove(SceneRenderLayer layer);
};

class RenderViews : public pyUniplug {
public:
	RenderViews(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderViews() : pyUniplug(0) { }

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	SceneRenderView active();

	SceneRenderView create(const std::string name);

	void remove(SceneRenderView view);
};

class FreestyleModules : public pyUniplug {
public:
	FreestyleModules(PyObject* pyobj) : pyUniplug(pyobj) {}
	FreestyleModules() : pyUniplug(0) { }

	FreestyleModuleSettings create();

	void remove(FreestyleModuleSettings module);
};

class Linesets : public pyUniplug {
public:
	Linesets(PyObject* pyobj) : pyUniplug(pyobj) {}
	Linesets() : pyUniplug(0) { }

	FreestyleLineSet active();

	int active_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_index")
	}

	void active_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_index", value)
	}

	FreestyleLineSet create(const std::string name);

	void remove(FreestyleLineSet lineset);
};

class AreaSpaces : public pyUniplug {
public:
	AreaSpaces(PyObject* pyobj) : pyUniplug(pyobj) {}
	AreaSpaces() : pyUniplug(0) { }

	Space active();
};

class SequenceModifiers : public pyUniplug {
public:
	SequenceModifiers(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceModifiers() : pyUniplug(0) { }

	enum sequence_modifier_type_items_enum {
		sequence_modifier_type_items_COLOR_BALANCE = 1,	
		sequence_modifier_type_items_CURVES = 2,	
		sequence_modifier_type_items_HUE_CORRECT = 3,	
		sequence_modifier_type_items_BRIGHT_CONTRAST = 4,	
		sequence_modifier_type_items_MASK = 5	
	};

	std::map<std::string, int> create_string_to_sequence_modifier_type_items() {
		return {{"COLOR_BALANCE", sequence_modifier_type_items_COLOR_BALANCE}, {"CURVES", sequence_modifier_type_items_CURVES}, {"HUE_CORRECT", sequence_modifier_type_items_HUE_CORRECT}, {"BRIGHT_CONTRAST", sequence_modifier_type_items_BRIGHT_CONTRAST}, {"MASK", sequence_modifier_type_items_MASK}};
	};

	std::map<int, std::string> create_sequence_modifier_type_items_to_string() {
		return {{sequence_modifier_type_items_COLOR_BALANCE, "COLOR_BALANCE"}, {sequence_modifier_type_items_CURVES, "CURVES"}, {sequence_modifier_type_items_HUE_CORRECT, "HUE_CORRECT"}, {sequence_modifier_type_items_BRIGHT_CONTRAST, "BRIGHT_CONTRAST"}, {sequence_modifier_type_items_MASK, "MASK"}};
	};

	const std::map<std::string, int> string_to_sequence_modifier_type_items = create_string_to_sequence_modifier_type_items();
	const std::map<int, std::string> sequence_modifier_type_items_to_string = create_sequence_modifier_type_items_to_string();

	SequenceModifier create(const std::string name, sequence_modifier_type_items_enum type);

	void remove(SequenceModifier modifier);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class Sequences : public pyUniplug {
public:
	Sequences(PyObject* pyobj) : pyUniplug(pyobj) {}
	Sequences() : pyUniplug(0) { }

	Sequence new_clip(const std::string name, MovieClip clip, int channel, int frame_start);

	Sequence new_mask(const std::string name, Mask mask, int channel, int frame_start);

	Sequence new_scene(const std::string name, Scene scene, int channel, int frame_start);

	Sequence new_image(const std::string name, const std::string filepath, int channel, int frame_start);

	Sequence new_movie(const std::string name, const std::string filepath, int channel, int frame_start);

	Sequence new_sound(const std::string name, const std::string filepath, int channel, int frame_start);

	enum seq_effect_items_enum {
		seq_effect_items_CROSS = 8,	
		seq_effect_items_ADD = 9,	
		seq_effect_items_SUBTRACT = 10,	
		seq_effect_items_ALPHA_OVER = 11,	
		seq_effect_items_ALPHA_UNDER = 12,	
		seq_effect_items_GAMMA_CROSS = 13,	
		seq_effect_items_MULTIPLY = 14,	
		seq_effect_items_OVER_DROP = 15,	
		seq_effect_items_WIPE = 25,	
		seq_effect_items_GLOW = 26,	
		seq_effect_items_TRANSFORM = 27,	
		seq_effect_items_COLOR = 28,	
		seq_effect_items_SPEED = 29,	
		seq_effect_items_MULTICAM = 30,	
		seq_effect_items_ADJUSTMENT = 31,	
		seq_effect_items_GAUSSIAN_BLUR = 40,	
		seq_effect_items_TEXT = 41	
	};

	std::map<std::string, int> create_string_to_seq_effect_items() {
		return {{"CROSS", seq_effect_items_CROSS}, {"ADD", seq_effect_items_ADD}, {"SUBTRACT", seq_effect_items_SUBTRACT}, {"ALPHA_OVER", seq_effect_items_ALPHA_OVER}, {"ALPHA_UNDER", seq_effect_items_ALPHA_UNDER}, {"GAMMA_CROSS", seq_effect_items_GAMMA_CROSS}, {"MULTIPLY", seq_effect_items_MULTIPLY}, {"OVER_DROP", seq_effect_items_OVER_DROP}, {"WIPE", seq_effect_items_WIPE}, {"GLOW", seq_effect_items_GLOW}, {"TRANSFORM", seq_effect_items_TRANSFORM}, {"COLOR", seq_effect_items_COLOR}, {"SPEED", seq_effect_items_SPEED}, {"MULTICAM", seq_effect_items_MULTICAM}, {"ADJUSTMENT", seq_effect_items_ADJUSTMENT}, {"GAUSSIAN_BLUR", seq_effect_items_GAUSSIAN_BLUR}, {"TEXT", seq_effect_items_TEXT}};
	};

	std::map<int, std::string> create_seq_effect_items_to_string() {
		return {{seq_effect_items_CROSS, "CROSS"}, {seq_effect_items_ADD, "ADD"}, {seq_effect_items_SUBTRACT, "SUBTRACT"}, {seq_effect_items_ALPHA_OVER, "ALPHA_OVER"}, {seq_effect_items_ALPHA_UNDER, "ALPHA_UNDER"}, {seq_effect_items_GAMMA_CROSS, "GAMMA_CROSS"}, {seq_effect_items_MULTIPLY, "MULTIPLY"}, {seq_effect_items_OVER_DROP, "OVER_DROP"}, {seq_effect_items_WIPE, "WIPE"}, {seq_effect_items_GLOW, "GLOW"}, {seq_effect_items_TRANSFORM, "TRANSFORM"}, {seq_effect_items_COLOR, "COLOR"}, {seq_effect_items_SPEED, "SPEED"}, {seq_effect_items_MULTICAM, "MULTICAM"}, {seq_effect_items_ADJUSTMENT, "ADJUSTMENT"}, {seq_effect_items_GAUSSIAN_BLUR, "GAUSSIAN_BLUR"}, {seq_effect_items_TEXT, "TEXT"}};
	};

	const std::map<std::string, int> string_to_seq_effect_items = create_string_to_seq_effect_items();
	const std::map<int, std::string> seq_effect_items_to_string = create_seq_effect_items_to_string();

	Sequence new_effect(const std::string name, seq_effect_items_enum type, int channel, int frame_start, int frame_end, Sequence seq1, Sequence seq2, Sequence seq3);

	void remove(Sequence sequence);
};

class SequenceElements : public pyUniplug {
public:
	SequenceElements(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceElements() : pyUniplug(0) { }

	SequenceElement append(const std::string filename);

	void pop(int index) {
		PYTHON_FUNCTION_ARGS_CALL("pop", "i", index)
	}
};

class BackgroundImages : public pyUniplug {
public:
	BackgroundImages(PyObject* pyobj) : pyUniplug(pyobj) {}
	BackgroundImages() : pyUniplug(0) { }

	BackgroundImage create();

	void remove(BackgroundImage image);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class SpaceNodeEditorPath : public pyUniplug {
public:
	SpaceNodeEditorPath(PyObject* pyobj) : pyUniplug(pyobj) {}
	SpaceNodeEditorPath() : pyUniplug(0) { }

	std::string to_string() {
		STRING_TYPE_GETTER("to_string", resstr)
	}

	void to_string(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "to_string", value)
	}

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void start(NodeTree node_tree);

	void append(NodeTree node_tree, Node node);

	void pop() {
		PYTHON_FUNCTION_CALL("pop")
	}
};

class Addons : public pyUniplug {
public:
	Addons(PyObject* pyobj) : pyUniplug(pyobj) {}
	Addons() : pyUniplug(0) { }

	Addon create();

	void remove(Addon addon);
};

class PathCompareCollection : public pyUniplug {
public:
	PathCompareCollection(PyObject* pyobj) : pyUniplug(pyobj) {}
	PathCompareCollection() : pyUniplug(0) { }

	PathCompare create();

	void remove(PathCompare pathcmp);
};

class KeyConfigurations : public pyUniplug {
public:
	KeyConfigurations(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyConfigurations() : pyUniplug(0) { }

	KeyConfig active();

	KeyConfig default_value();

	KeyConfig addon();

	KeyConfig user();

	KeyConfig create(const std::string name);

	void remove(KeyConfig keyconfig);
};

class KeyMaps : public pyUniplug {
public:
	KeyMaps(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyMaps() : pyUniplug(0) { }

	enum space_type_items_enum {
		space_type_items_EMPTY = 0,	
		space_type_items_VIEW_3D = 1,	
		space_type_items_TIMELINE = 15,	
		space_type_items_GRAPH_EDITOR = 2,	
		space_type_items_DOPESHEET_EDITOR = 12,	
		space_type_items_NLA_EDITOR = 13,	
		space_type_items_IMAGE_EDITOR = 6,	
		space_type_items_SEQUENCE_EDITOR = 8,	
		space_type_items_CLIP_EDITOR = 20,	
		space_type_items_TEXT_EDITOR = 9,	
		space_type_items_NODE_EDITOR = 16,	
		space_type_items_LOGIC_EDITOR = 17,	
		space_type_items_PROPERTIES = 4,	
		space_type_items_OUTLINER = 3,	
		space_type_items_USER_PREFERENCES = 19,	
		space_type_items_INFO = 7,	
		space_type_items_FILE_BROWSER = 5,	
		space_type_items_CONSOLE = 18	
	};

	std::map<std::string, int> create_string_to_space_type_items() {
		return {{"EMPTY", space_type_items_EMPTY}, {"VIEW_3D", space_type_items_VIEW_3D}, {"TIMELINE", space_type_items_TIMELINE}, {"GRAPH_EDITOR", space_type_items_GRAPH_EDITOR}, {"DOPESHEET_EDITOR", space_type_items_DOPESHEET_EDITOR}, {"NLA_EDITOR", space_type_items_NLA_EDITOR}, {"IMAGE_EDITOR", space_type_items_IMAGE_EDITOR}, {"SEQUENCE_EDITOR", space_type_items_SEQUENCE_EDITOR}, {"CLIP_EDITOR", space_type_items_CLIP_EDITOR}, {"TEXT_EDITOR", space_type_items_TEXT_EDITOR}, {"NODE_EDITOR", space_type_items_NODE_EDITOR}, {"LOGIC_EDITOR", space_type_items_LOGIC_EDITOR}, {"PROPERTIES", space_type_items_PROPERTIES}, {"OUTLINER", space_type_items_OUTLINER}, {"USER_PREFERENCES", space_type_items_USER_PREFERENCES}, {"INFO", space_type_items_INFO}, {"FILE_BROWSER", space_type_items_FILE_BROWSER}, {"CONSOLE", space_type_items_CONSOLE}};
	};

	std::map<int, std::string> create_space_type_items_to_string() {
		return {{space_type_items_EMPTY, "EMPTY"}, {space_type_items_VIEW_3D, "VIEW_3D"}, {space_type_items_TIMELINE, "TIMELINE"}, {space_type_items_GRAPH_EDITOR, "GRAPH_EDITOR"}, {space_type_items_DOPESHEET_EDITOR, "DOPESHEET_EDITOR"}, {space_type_items_NLA_EDITOR, "NLA_EDITOR"}, {space_type_items_IMAGE_EDITOR, "IMAGE_EDITOR"}, {space_type_items_SEQUENCE_EDITOR, "SEQUENCE_EDITOR"}, {space_type_items_CLIP_EDITOR, "CLIP_EDITOR"}, {space_type_items_TEXT_EDITOR, "TEXT_EDITOR"}, {space_type_items_NODE_EDITOR, "NODE_EDITOR"}, {space_type_items_LOGIC_EDITOR, "LOGIC_EDITOR"}, {space_type_items_PROPERTIES, "PROPERTIES"}, {space_type_items_OUTLINER, "OUTLINER"}, {space_type_items_USER_PREFERENCES, "USER_PREFERENCES"}, {space_type_items_INFO, "INFO"}, {space_type_items_FILE_BROWSER, "FILE_BROWSER"}, {space_type_items_CONSOLE, "CONSOLE"}};
	};

	const std::map<std::string, int> string_to_space_type_items = create_string_to_space_type_items();
	const std::map<int, std::string> space_type_items_to_string = create_space_type_items_to_string();

	enum region_type_items_enum {
		region_type_items_WINDOW = 0,	
		region_type_items_HEADER = 1,	
		region_type_items_CHANNELS = 2,	
		region_type_items_TEMPORARY = 3,	
		region_type_items_UI = 4,	
		region_type_items_TOOLS = 5,	
		region_type_items_TOOL_PROPS = 6,	
		region_type_items_PREVIEW = 7	
	};

	std::map<std::string, int> create_string_to_region_type_items() {
		return {{"WINDOW", region_type_items_WINDOW}, {"HEADER", region_type_items_HEADER}, {"CHANNELS", region_type_items_CHANNELS}, {"TEMPORARY", region_type_items_TEMPORARY}, {"UI", region_type_items_UI}, {"TOOLS", region_type_items_TOOLS}, {"TOOL_PROPS", region_type_items_TOOL_PROPS}, {"PREVIEW", region_type_items_PREVIEW}};
	};

	std::map<int, std::string> create_region_type_items_to_string() {
		return {{region_type_items_WINDOW, "WINDOW"}, {region_type_items_HEADER, "HEADER"}, {region_type_items_CHANNELS, "CHANNELS"}, {region_type_items_TEMPORARY, "TEMPORARY"}, {region_type_items_UI, "UI"}, {region_type_items_TOOLS, "TOOLS"}, {region_type_items_TOOL_PROPS, "TOOL_PROPS"}, {region_type_items_PREVIEW, "PREVIEW"}};
	};

	const std::map<std::string, int> string_to_region_type_items = create_string_to_region_type_items();
	const std::map<int, std::string> region_type_items_to_string = create_region_type_items_to_string();

	KeyMap create(const std::string name, space_type_items_enum space_type = space_type_items_EMPTY, region_type_items_enum region_type = region_type_items_WINDOW, bool modal = false);

	void remove(KeyMap keymap);

	KeyMap find(const std::string name, space_type_items_enum space_type = space_type_items_EMPTY, region_type_items_enum region_type = region_type_items_WINDOW);

	KeyMap find_modal(const std::string name);
};

class KeyMapItems : public pyUniplug {
public:
	KeyMapItems(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyMapItems() : pyUniplug(0) { }

	enum event_type_items_enum {
		event_type_items_NONE = 0,	
		event_type_items_LEFTMOUSE = 1,	
		event_type_items_MIDDLEMOUSE = 2,	
		event_type_items_RIGHTMOUSE = 3,	
		event_type_items_BUTTON4MOUSE = 7,	
		event_type_items_BUTTON5MOUSE = 8,	
		event_type_items_BUTTON6MOUSE = 18,	
		event_type_items_BUTTON7MOUSE = 19,	
		event_type_items_ACTIONMOUSE = 5,	
		event_type_items_SELECTMOUSE = 6,	
		event_type_items_MOUSEMOVE = 4,	
		event_type_items_INBETWEEN_MOUSEMOVE = 17,	
		event_type_items_TRACKPADPAN = 14,	
		event_type_items_TRACKPADZOOM = 15,	
		event_type_items_MOUSEROTATE = 16,	
		event_type_items_WHEELUPMOUSE = 10,	
		event_type_items_WHEELDOWNMOUSE = 11,	
		event_type_items_WHEELINMOUSE = 12,	
		event_type_items_WHEELOUTMOUSE = 13,	
		event_type_items_EVT_TWEAK_L = 20482,	
		event_type_items_EVT_TWEAK_M = 20483,	
		event_type_items_EVT_TWEAK_R = 20484,	
		event_type_items_EVT_TWEAK_A = 20485,	
		event_type_items_EVT_TWEAK_S = 20486,	
		event_type_items_A = 97,	
		event_type_items_B = 98,	
		event_type_items_C = 99,	
		event_type_items_D = 100,	
		event_type_items_E = 101,	
		event_type_items_F = 102,	
		event_type_items_G = 103,	
		event_type_items_H = 104,	
		event_type_items_I = 105,	
		event_type_items_J = 106,	
		event_type_items_K = 107,	
		event_type_items_L = 108,	
		event_type_items_M = 109,	
		event_type_items_N = 110,	
		event_type_items_O = 111,	
		event_type_items_P = 112,	
		event_type_items_Q = 113,	
		event_type_items_R = 114,	
		event_type_items_S = 115,	
		event_type_items_T = 116,	
		event_type_items_U = 117,	
		event_type_items_V = 118,	
		event_type_items_W = 119,	
		event_type_items_X = 120,	
		event_type_items_Y = 121,	
		event_type_items_Z = 122,	
		event_type_items_ZERO = 48,	
		event_type_items_ONE = 49,	
		event_type_items_TWO = 50,	
		event_type_items_THREE = 51,	
		event_type_items_FOUR = 52,	
		event_type_items_FIVE = 53,	
		event_type_items_SIX = 54,	
		event_type_items_SEVEN = 55,	
		event_type_items_EIGHT = 56,	
		event_type_items_NINE = 57,	
		event_type_items_LEFT_CTRL = 212,	
		event_type_items_LEFT_ALT = 213,	
		event_type_items_LEFT_SHIFT = 217,	
		event_type_items_RIGHT_ALT = 214,	
		event_type_items_RIGHT_CTRL = 215,	
		event_type_items_RIGHT_SHIFT = 216,	
		event_type_items_OSKEY = 172,	
		event_type_items_GRLESS = 173,	
		event_type_items_ESC = 218,	
		event_type_items_TAB = 219,	
		event_type_items_RET = 220,	
		event_type_items_SPACE = 221,	
		event_type_items_LINE_FEED = 222,	
		event_type_items_BACK_SPACE = 223,	
		event_type_items_DEL = 224,	
		event_type_items_SEMI_COLON = 225,	
		event_type_items_PERIOD = 226,	
		event_type_items_COMMA = 227,	
		event_type_items_QUOTE = 228,	
		event_type_items_ACCENT_GRAVE = 229,	
		event_type_items_MINUS = 230,	
		event_type_items_SLASH = 232,	
		event_type_items_BACK_SLASH = 233,	
		event_type_items_EQUAL = 234,	
		event_type_items_LEFT_BRACKET = 235,	
		event_type_items_RIGHT_BRACKET = 236,	
		event_type_items_LEFT_ARROW = 137,	
		event_type_items_DOWN_ARROW = 138,	
		event_type_items_RIGHT_ARROW = 139,	
		event_type_items_UP_ARROW = 140,	
		event_type_items_NUMPAD_2 = 152,	
		event_type_items_NUMPAD_4 = 154,	
		event_type_items_NUMPAD_6 = 156,	
		event_type_items_NUMPAD_8 = 158,	
		event_type_items_NUMPAD_1 = 151,	
		event_type_items_NUMPAD_3 = 153,	
		event_type_items_NUMPAD_5 = 155,	
		event_type_items_NUMPAD_7 = 157,	
		event_type_items_NUMPAD_9 = 159,	
		event_type_items_NUMPAD_PERIOD = 199,	
		event_type_items_NUMPAD_SLASH = 161,	
		event_type_items_NUMPAD_ASTERIX = 160,	
		event_type_items_NUMPAD_0 = 150,	
		event_type_items_NUMPAD_MINUS = 162,	
		event_type_items_NUMPAD_ENTER = 163,	
		event_type_items_NUMPAD_PLUS = 164,	
		event_type_items_F1 = 300,	
		event_type_items_F2 = 301,	
		event_type_items_F3 = 302,	
		event_type_items_F4 = 303,	
		event_type_items_F5 = 304,	
		event_type_items_F6 = 305,	
		event_type_items_F7 = 306,	
		event_type_items_F8 = 307,	
		event_type_items_F9 = 308,	
		event_type_items_F10 = 309,	
		event_type_items_F11 = 310,	
		event_type_items_F12 = 311,	
		event_type_items_F13 = 312,	
		event_type_items_F14 = 313,	
		event_type_items_F15 = 314,	
		event_type_items_F16 = 315,	
		event_type_items_F17 = 316,	
		event_type_items_F18 = 317,	
		event_type_items_F19 = 318,	
		event_type_items_PAUSE = 165,	
		event_type_items_INSERT = 166,	
		event_type_items_HOME = 167,	
		event_type_items_PAGE_UP = 168,	
		event_type_items_PAGE_DOWN = 169,	
		event_type_items_END = 170,	
		event_type_items_MEDIA_PLAY = 174,	
		event_type_items_MEDIA_STOP = 175,	
		event_type_items_MEDIA_FIRST = 176,	
		event_type_items_MEDIA_LAST = 177,	
		event_type_items_TEXTINPUT = -2,	
		event_type_items_WINDOW_DEACTIVATE = 260,	
		event_type_items_TIMER = 272,	
		event_type_items_TIMER0 = 273,	
		event_type_items_TIMER1 = 274,	
		event_type_items_TIMER2 = 275,	
		event_type_items_TIMER_JOBS = 276,	
		event_type_items_TIMER_AUTOSAVE = 277,	
		event_type_items_TIMER_REPORT = 278,	
		event_type_items_TIMERREGION = 279,	
		event_type_items_NDOF_MOTION = 400,	
		event_type_items_NDOF_BUTTON_MENU = 401,	
		event_type_items_NDOF_BUTTON_FIT = 402,	
		event_type_items_NDOF_BUTTON_TOP = 403,	
		event_type_items_NDOF_BUTTON_BOTTOM = 404,	
		event_type_items_NDOF_BUTTON_LEFT = 405,	
		event_type_items_NDOF_BUTTON_RIGHT = 406,	
		event_type_items_NDOF_BUTTON_FRONT = 407,	
		event_type_items_NDOF_BUTTON_BACK = 408,	
		event_type_items_NDOF_BUTTON_ISO1 = 409,	
		event_type_items_NDOF_BUTTON_ISO2 = 410,	
		event_type_items_NDOF_BUTTON_ROLL_CW = 411,	
		event_type_items_NDOF_BUTTON_ROLL_CCW = 412,	
		event_type_items_NDOF_BUTTON_SPIN_CW = 413,	
		event_type_items_NDOF_BUTTON_SPIN_CCW = 414,	
		event_type_items_NDOF_BUTTON_TILT_CW = 415,	
		event_type_items_NDOF_BUTTON_TILT_CCW = 416,	
		event_type_items_NDOF_BUTTON_ROTATE = 417,	
		event_type_items_NDOF_BUTTON_PANZOOM = 418,	
		event_type_items_NDOF_BUTTON_DOMINANT = 419,	
		event_type_items_NDOF_BUTTON_PLUS = 420,	
		event_type_items_NDOF_BUTTON_MINUS = 421,	
		event_type_items_NDOF_BUTTON_ESC = 422,	
		event_type_items_NDOF_BUTTON_ALT = 423,	
		event_type_items_NDOF_BUTTON_SHIFT = 424,	
		event_type_items_NDOF_BUTTON_CTRL = 425,	
		event_type_items_NDOF_BUTTON_1 = 426,	
		event_type_items_NDOF_BUTTON_2 = 427,	
		event_type_items_NDOF_BUTTON_3 = 428,	
		event_type_items_NDOF_BUTTON_4 = 429,	
		event_type_items_NDOF_BUTTON_5 = 430,	
		event_type_items_NDOF_BUTTON_6 = 431,	
		event_type_items_NDOF_BUTTON_7 = 432,	
		event_type_items_NDOF_BUTTON_8 = 433,	
		event_type_items_NDOF_BUTTON_9 = 434,	
		event_type_items_NDOF_BUTTON_10 = 435,	
		event_type_items_NDOF_BUTTON_A = 436,	
		event_type_items_NDOF_BUTTON_B = 437,	
		event_type_items_NDOF_BUTTON_C = 438	
	};

	std::map<std::string, int> create_string_to_event_type_items() {
		return {{"NONE", event_type_items_NONE}, {"LEFTMOUSE", event_type_items_LEFTMOUSE}, {"MIDDLEMOUSE", event_type_items_MIDDLEMOUSE}, {"RIGHTMOUSE", event_type_items_RIGHTMOUSE}, {"BUTTON4MOUSE", event_type_items_BUTTON4MOUSE}, {"BUTTON5MOUSE", event_type_items_BUTTON5MOUSE}, {"BUTTON6MOUSE", event_type_items_BUTTON6MOUSE}, {"BUTTON7MOUSE", event_type_items_BUTTON7MOUSE}, {"ACTIONMOUSE", event_type_items_ACTIONMOUSE}, {"SELECTMOUSE", event_type_items_SELECTMOUSE}, {"MOUSEMOVE", event_type_items_MOUSEMOVE}, {"INBETWEEN_MOUSEMOVE", event_type_items_INBETWEEN_MOUSEMOVE}, {"TRACKPADPAN", event_type_items_TRACKPADPAN}, {"TRACKPADZOOM", event_type_items_TRACKPADZOOM}, {"MOUSEROTATE", event_type_items_MOUSEROTATE}, {"WHEELUPMOUSE", event_type_items_WHEELUPMOUSE}, {"WHEELDOWNMOUSE", event_type_items_WHEELDOWNMOUSE}, {"WHEELINMOUSE", event_type_items_WHEELINMOUSE}, {"WHEELOUTMOUSE", event_type_items_WHEELOUTMOUSE}, {"EVT_TWEAK_L", event_type_items_EVT_TWEAK_L}, {"EVT_TWEAK_M", event_type_items_EVT_TWEAK_M}, {"EVT_TWEAK_R", event_type_items_EVT_TWEAK_R}, {"EVT_TWEAK_A", event_type_items_EVT_TWEAK_A}, {"EVT_TWEAK_S", event_type_items_EVT_TWEAK_S}, {"A", event_type_items_A}, {"B", event_type_items_B}, {"C", event_type_items_C}, {"D", event_type_items_D}, {"E", event_type_items_E}, {"F", event_type_items_F}, {"G", event_type_items_G}, {"H", event_type_items_H}, {"I", event_type_items_I}, {"J", event_type_items_J}, {"K", event_type_items_K}, {"L", event_type_items_L}, {"M", event_type_items_M}, {"N", event_type_items_N}, {"O", event_type_items_O}, {"P", event_type_items_P}, {"Q", event_type_items_Q}, {"R", event_type_items_R}, {"S", event_type_items_S}, {"T", event_type_items_T}, {"U", event_type_items_U}, {"V", event_type_items_V}, {"W", event_type_items_W}, {"X", event_type_items_X}, {"Y", event_type_items_Y}, {"Z", event_type_items_Z}, {"ZERO", event_type_items_ZERO}, {"ONE", event_type_items_ONE}, {"TWO", event_type_items_TWO}, {"THREE", event_type_items_THREE}, {"FOUR", event_type_items_FOUR}, {"FIVE", event_type_items_FIVE}, {"SIX", event_type_items_SIX}, {"SEVEN", event_type_items_SEVEN}, {"EIGHT", event_type_items_EIGHT}, {"NINE", event_type_items_NINE}, {"LEFT_CTRL", event_type_items_LEFT_CTRL}, {"LEFT_ALT", event_type_items_LEFT_ALT}, {"LEFT_SHIFT", event_type_items_LEFT_SHIFT}, {"RIGHT_ALT", event_type_items_RIGHT_ALT}, {"RIGHT_CTRL", event_type_items_RIGHT_CTRL}, {"RIGHT_SHIFT", event_type_items_RIGHT_SHIFT}, {"OSKEY", event_type_items_OSKEY}, {"GRLESS", event_type_items_GRLESS}, {"ESC", event_type_items_ESC}, {"TAB", event_type_items_TAB}, {"RET", event_type_items_RET}, {"SPACE", event_type_items_SPACE}, {"LINE_FEED", event_type_items_LINE_FEED}, {"BACK_SPACE", event_type_items_BACK_SPACE}, {"DEL", event_type_items_DEL}, {"SEMI_COLON", event_type_items_SEMI_COLON}, {"PERIOD", event_type_items_PERIOD}, {"COMMA", event_type_items_COMMA}, {"QUOTE", event_type_items_QUOTE}, {"ACCENT_GRAVE", event_type_items_ACCENT_GRAVE}, {"MINUS", event_type_items_MINUS}, {"SLASH", event_type_items_SLASH}, {"BACK_SLASH", event_type_items_BACK_SLASH}, {"EQUAL", event_type_items_EQUAL}, {"LEFT_BRACKET", event_type_items_LEFT_BRACKET}, {"RIGHT_BRACKET", event_type_items_RIGHT_BRACKET}, {"LEFT_ARROW", event_type_items_LEFT_ARROW}, {"DOWN_ARROW", event_type_items_DOWN_ARROW}, {"RIGHT_ARROW", event_type_items_RIGHT_ARROW}, {"UP_ARROW", event_type_items_UP_ARROW}, {"NUMPAD_2", event_type_items_NUMPAD_2}, {"NUMPAD_4", event_type_items_NUMPAD_4}, {"NUMPAD_6", event_type_items_NUMPAD_6}, {"NUMPAD_8", event_type_items_NUMPAD_8}, {"NUMPAD_1", event_type_items_NUMPAD_1}, {"NUMPAD_3", event_type_items_NUMPAD_3}, {"NUMPAD_5", event_type_items_NUMPAD_5}, {"NUMPAD_7", event_type_items_NUMPAD_7}, {"NUMPAD_9", event_type_items_NUMPAD_9}, {"NUMPAD_PERIOD", event_type_items_NUMPAD_PERIOD}, {"NUMPAD_SLASH", event_type_items_NUMPAD_SLASH}, {"NUMPAD_ASTERIX", event_type_items_NUMPAD_ASTERIX}, {"NUMPAD_0", event_type_items_NUMPAD_0}, {"NUMPAD_MINUS", event_type_items_NUMPAD_MINUS}, {"NUMPAD_ENTER", event_type_items_NUMPAD_ENTER}, {"NUMPAD_PLUS", event_type_items_NUMPAD_PLUS}, {"F1", event_type_items_F1}, {"F2", event_type_items_F2}, {"F3", event_type_items_F3}, {"F4", event_type_items_F4}, {"F5", event_type_items_F5}, {"F6", event_type_items_F6}, {"F7", event_type_items_F7}, {"F8", event_type_items_F8}, {"F9", event_type_items_F9}, {"F10", event_type_items_F10}, {"F11", event_type_items_F11}, {"F12", event_type_items_F12}, {"F13", event_type_items_F13}, {"F14", event_type_items_F14}, {"F15", event_type_items_F15}, {"F16", event_type_items_F16}, {"F17", event_type_items_F17}, {"F18", event_type_items_F18}, {"F19", event_type_items_F19}, {"PAUSE", event_type_items_PAUSE}, {"INSERT", event_type_items_INSERT}, {"HOME", event_type_items_HOME}, {"PAGE_UP", event_type_items_PAGE_UP}, {"PAGE_DOWN", event_type_items_PAGE_DOWN}, {"END", event_type_items_END}, {"MEDIA_PLAY", event_type_items_MEDIA_PLAY}, {"MEDIA_STOP", event_type_items_MEDIA_STOP}, {"MEDIA_FIRST", event_type_items_MEDIA_FIRST}, {"MEDIA_LAST", event_type_items_MEDIA_LAST}, {"TEXTINPUT", event_type_items_TEXTINPUT}, {"WINDOW_DEACTIVATE", event_type_items_WINDOW_DEACTIVATE}, {"TIMER", event_type_items_TIMER}, {"TIMER0", event_type_items_TIMER0}, {"TIMER1", event_type_items_TIMER1}, {"TIMER2", event_type_items_TIMER2}, {"TIMER_JOBS", event_type_items_TIMER_JOBS}, {"TIMER_AUTOSAVE", event_type_items_TIMER_AUTOSAVE}, {"TIMER_REPORT", event_type_items_TIMER_REPORT}, {"TIMERREGION", event_type_items_TIMERREGION}, {"NDOF_MOTION", event_type_items_NDOF_MOTION}, {"NDOF_BUTTON_MENU", event_type_items_NDOF_BUTTON_MENU}, {"NDOF_BUTTON_FIT", event_type_items_NDOF_BUTTON_FIT}, {"NDOF_BUTTON_TOP", event_type_items_NDOF_BUTTON_TOP}, {"NDOF_BUTTON_BOTTOM", event_type_items_NDOF_BUTTON_BOTTOM}, {"NDOF_BUTTON_LEFT", event_type_items_NDOF_BUTTON_LEFT}, {"NDOF_BUTTON_RIGHT", event_type_items_NDOF_BUTTON_RIGHT}, {"NDOF_BUTTON_FRONT", event_type_items_NDOF_BUTTON_FRONT}, {"NDOF_BUTTON_BACK", event_type_items_NDOF_BUTTON_BACK}, {"NDOF_BUTTON_ISO1", event_type_items_NDOF_BUTTON_ISO1}, {"NDOF_BUTTON_ISO2", event_type_items_NDOF_BUTTON_ISO2}, {"NDOF_BUTTON_ROLL_CW", event_type_items_NDOF_BUTTON_ROLL_CW}, {"NDOF_BUTTON_ROLL_CCW", event_type_items_NDOF_BUTTON_ROLL_CCW}, {"NDOF_BUTTON_SPIN_CW", event_type_items_NDOF_BUTTON_SPIN_CW}, {"NDOF_BUTTON_SPIN_CCW", event_type_items_NDOF_BUTTON_SPIN_CCW}, {"NDOF_BUTTON_TILT_CW", event_type_items_NDOF_BUTTON_TILT_CW}, {"NDOF_BUTTON_TILT_CCW", event_type_items_NDOF_BUTTON_TILT_CCW}, {"NDOF_BUTTON_ROTATE", event_type_items_NDOF_BUTTON_ROTATE}, {"NDOF_BUTTON_PANZOOM", event_type_items_NDOF_BUTTON_PANZOOM}, {"NDOF_BUTTON_DOMINANT", event_type_items_NDOF_BUTTON_DOMINANT}, {"NDOF_BUTTON_PLUS", event_type_items_NDOF_BUTTON_PLUS}, {"NDOF_BUTTON_MINUS", event_type_items_NDOF_BUTTON_MINUS}, {"NDOF_BUTTON_ESC", event_type_items_NDOF_BUTTON_ESC}, {"NDOF_BUTTON_ALT", event_type_items_NDOF_BUTTON_ALT}, {"NDOF_BUTTON_SHIFT", event_type_items_NDOF_BUTTON_SHIFT}, {"NDOF_BUTTON_CTRL", event_type_items_NDOF_BUTTON_CTRL}, {"NDOF_BUTTON_1", event_type_items_NDOF_BUTTON_1}, {"NDOF_BUTTON_2", event_type_items_NDOF_BUTTON_2}, {"NDOF_BUTTON_3", event_type_items_NDOF_BUTTON_3}, {"NDOF_BUTTON_4", event_type_items_NDOF_BUTTON_4}, {"NDOF_BUTTON_5", event_type_items_NDOF_BUTTON_5}, {"NDOF_BUTTON_6", event_type_items_NDOF_BUTTON_6}, {"NDOF_BUTTON_7", event_type_items_NDOF_BUTTON_7}, {"NDOF_BUTTON_8", event_type_items_NDOF_BUTTON_8}, {"NDOF_BUTTON_9", event_type_items_NDOF_BUTTON_9}, {"NDOF_BUTTON_10", event_type_items_NDOF_BUTTON_10}, {"NDOF_BUTTON_A", event_type_items_NDOF_BUTTON_A}, {"NDOF_BUTTON_B", event_type_items_NDOF_BUTTON_B}, {"NDOF_BUTTON_C", event_type_items_NDOF_BUTTON_C}};
	};

	std::map<int, std::string> create_event_type_items_to_string() {
		return {{event_type_items_NONE, "NONE"}, {event_type_items_LEFTMOUSE, "LEFTMOUSE"}, {event_type_items_MIDDLEMOUSE, "MIDDLEMOUSE"}, {event_type_items_RIGHTMOUSE, "RIGHTMOUSE"}, {event_type_items_BUTTON4MOUSE, "BUTTON4MOUSE"}, {event_type_items_BUTTON5MOUSE, "BUTTON5MOUSE"}, {event_type_items_BUTTON6MOUSE, "BUTTON6MOUSE"}, {event_type_items_BUTTON7MOUSE, "BUTTON7MOUSE"}, {event_type_items_ACTIONMOUSE, "ACTIONMOUSE"}, {event_type_items_SELECTMOUSE, "SELECTMOUSE"}, {event_type_items_MOUSEMOVE, "MOUSEMOVE"}, {event_type_items_INBETWEEN_MOUSEMOVE, "INBETWEEN_MOUSEMOVE"}, {event_type_items_TRACKPADPAN, "TRACKPADPAN"}, {event_type_items_TRACKPADZOOM, "TRACKPADZOOM"}, {event_type_items_MOUSEROTATE, "MOUSEROTATE"}, {event_type_items_WHEELUPMOUSE, "WHEELUPMOUSE"}, {event_type_items_WHEELDOWNMOUSE, "WHEELDOWNMOUSE"}, {event_type_items_WHEELINMOUSE, "WHEELINMOUSE"}, {event_type_items_WHEELOUTMOUSE, "WHEELOUTMOUSE"}, {event_type_items_EVT_TWEAK_L, "EVT_TWEAK_L"}, {event_type_items_EVT_TWEAK_M, "EVT_TWEAK_M"}, {event_type_items_EVT_TWEAK_R, "EVT_TWEAK_R"}, {event_type_items_EVT_TWEAK_A, "EVT_TWEAK_A"}, {event_type_items_EVT_TWEAK_S, "EVT_TWEAK_S"}, {event_type_items_A, "A"}, {event_type_items_B, "B"}, {event_type_items_C, "C"}, {event_type_items_D, "D"}, {event_type_items_E, "E"}, {event_type_items_F, "F"}, {event_type_items_G, "G"}, {event_type_items_H, "H"}, {event_type_items_I, "I"}, {event_type_items_J, "J"}, {event_type_items_K, "K"}, {event_type_items_L, "L"}, {event_type_items_M, "M"}, {event_type_items_N, "N"}, {event_type_items_O, "O"}, {event_type_items_P, "P"}, {event_type_items_Q, "Q"}, {event_type_items_R, "R"}, {event_type_items_S, "S"}, {event_type_items_T, "T"}, {event_type_items_U, "U"}, {event_type_items_V, "V"}, {event_type_items_W, "W"}, {event_type_items_X, "X"}, {event_type_items_Y, "Y"}, {event_type_items_Z, "Z"}, {event_type_items_ZERO, "ZERO"}, {event_type_items_ONE, "ONE"}, {event_type_items_TWO, "TWO"}, {event_type_items_THREE, "THREE"}, {event_type_items_FOUR, "FOUR"}, {event_type_items_FIVE, "FIVE"}, {event_type_items_SIX, "SIX"}, {event_type_items_SEVEN, "SEVEN"}, {event_type_items_EIGHT, "EIGHT"}, {event_type_items_NINE, "NINE"}, {event_type_items_LEFT_CTRL, "LEFT_CTRL"}, {event_type_items_LEFT_ALT, "LEFT_ALT"}, {event_type_items_LEFT_SHIFT, "LEFT_SHIFT"}, {event_type_items_RIGHT_ALT, "RIGHT_ALT"}, {event_type_items_RIGHT_CTRL, "RIGHT_CTRL"}, {event_type_items_RIGHT_SHIFT, "RIGHT_SHIFT"}, {event_type_items_OSKEY, "OSKEY"}, {event_type_items_GRLESS, "GRLESS"}, {event_type_items_ESC, "ESC"}, {event_type_items_TAB, "TAB"}, {event_type_items_RET, "RET"}, {event_type_items_SPACE, "SPACE"}, {event_type_items_LINE_FEED, "LINE_FEED"}, {event_type_items_BACK_SPACE, "BACK_SPACE"}, {event_type_items_DEL, "DEL"}, {event_type_items_SEMI_COLON, "SEMI_COLON"}, {event_type_items_PERIOD, "PERIOD"}, {event_type_items_COMMA, "COMMA"}, {event_type_items_QUOTE, "QUOTE"}, {event_type_items_ACCENT_GRAVE, "ACCENT_GRAVE"}, {event_type_items_MINUS, "MINUS"}, {event_type_items_SLASH, "SLASH"}, {event_type_items_BACK_SLASH, "BACK_SLASH"}, {event_type_items_EQUAL, "EQUAL"}, {event_type_items_LEFT_BRACKET, "LEFT_BRACKET"}, {event_type_items_RIGHT_BRACKET, "RIGHT_BRACKET"}, {event_type_items_LEFT_ARROW, "LEFT_ARROW"}, {event_type_items_DOWN_ARROW, "DOWN_ARROW"}, {event_type_items_RIGHT_ARROW, "RIGHT_ARROW"}, {event_type_items_UP_ARROW, "UP_ARROW"}, {event_type_items_NUMPAD_2, "NUMPAD_2"}, {event_type_items_NUMPAD_4, "NUMPAD_4"}, {event_type_items_NUMPAD_6, "NUMPAD_6"}, {event_type_items_NUMPAD_8, "NUMPAD_8"}, {event_type_items_NUMPAD_1, "NUMPAD_1"}, {event_type_items_NUMPAD_3, "NUMPAD_3"}, {event_type_items_NUMPAD_5, "NUMPAD_5"}, {event_type_items_NUMPAD_7, "NUMPAD_7"}, {event_type_items_NUMPAD_9, "NUMPAD_9"}, {event_type_items_NUMPAD_PERIOD, "NUMPAD_PERIOD"}, {event_type_items_NUMPAD_SLASH, "NUMPAD_SLASH"}, {event_type_items_NUMPAD_ASTERIX, "NUMPAD_ASTERIX"}, {event_type_items_NUMPAD_0, "NUMPAD_0"}, {event_type_items_NUMPAD_MINUS, "NUMPAD_MINUS"}, {event_type_items_NUMPAD_ENTER, "NUMPAD_ENTER"}, {event_type_items_NUMPAD_PLUS, "NUMPAD_PLUS"}, {event_type_items_F1, "F1"}, {event_type_items_F2, "F2"}, {event_type_items_F3, "F3"}, {event_type_items_F4, "F4"}, {event_type_items_F5, "F5"}, {event_type_items_F6, "F6"}, {event_type_items_F7, "F7"}, {event_type_items_F8, "F8"}, {event_type_items_F9, "F9"}, {event_type_items_F10, "F10"}, {event_type_items_F11, "F11"}, {event_type_items_F12, "F12"}, {event_type_items_F13, "F13"}, {event_type_items_F14, "F14"}, {event_type_items_F15, "F15"}, {event_type_items_F16, "F16"}, {event_type_items_F17, "F17"}, {event_type_items_F18, "F18"}, {event_type_items_F19, "F19"}, {event_type_items_PAUSE, "PAUSE"}, {event_type_items_INSERT, "INSERT"}, {event_type_items_HOME, "HOME"}, {event_type_items_PAGE_UP, "PAGE_UP"}, {event_type_items_PAGE_DOWN, "PAGE_DOWN"}, {event_type_items_END, "END"}, {event_type_items_MEDIA_PLAY, "MEDIA_PLAY"}, {event_type_items_MEDIA_STOP, "MEDIA_STOP"}, {event_type_items_MEDIA_FIRST, "MEDIA_FIRST"}, {event_type_items_MEDIA_LAST, "MEDIA_LAST"}, {event_type_items_TEXTINPUT, "TEXTINPUT"}, {event_type_items_WINDOW_DEACTIVATE, "WINDOW_DEACTIVATE"}, {event_type_items_TIMER, "TIMER"}, {event_type_items_TIMER0, "TIMER0"}, {event_type_items_TIMER1, "TIMER1"}, {event_type_items_TIMER2, "TIMER2"}, {event_type_items_TIMER_JOBS, "TIMER_JOBS"}, {event_type_items_TIMER_AUTOSAVE, "TIMER_AUTOSAVE"}, {event_type_items_TIMER_REPORT, "TIMER_REPORT"}, {event_type_items_TIMERREGION, "TIMERREGION"}, {event_type_items_NDOF_MOTION, "NDOF_MOTION"}, {event_type_items_NDOF_BUTTON_MENU, "NDOF_BUTTON_MENU"}, {event_type_items_NDOF_BUTTON_FIT, "NDOF_BUTTON_FIT"}, {event_type_items_NDOF_BUTTON_TOP, "NDOF_BUTTON_TOP"}, {event_type_items_NDOF_BUTTON_BOTTOM, "NDOF_BUTTON_BOTTOM"}, {event_type_items_NDOF_BUTTON_LEFT, "NDOF_BUTTON_LEFT"}, {event_type_items_NDOF_BUTTON_RIGHT, "NDOF_BUTTON_RIGHT"}, {event_type_items_NDOF_BUTTON_FRONT, "NDOF_BUTTON_FRONT"}, {event_type_items_NDOF_BUTTON_BACK, "NDOF_BUTTON_BACK"}, {event_type_items_NDOF_BUTTON_ISO1, "NDOF_BUTTON_ISO1"}, {event_type_items_NDOF_BUTTON_ISO2, "NDOF_BUTTON_ISO2"}, {event_type_items_NDOF_BUTTON_ROLL_CW, "NDOF_BUTTON_ROLL_CW"}, {event_type_items_NDOF_BUTTON_ROLL_CCW, "NDOF_BUTTON_ROLL_CCW"}, {event_type_items_NDOF_BUTTON_SPIN_CW, "NDOF_BUTTON_SPIN_CW"}, {event_type_items_NDOF_BUTTON_SPIN_CCW, "NDOF_BUTTON_SPIN_CCW"}, {event_type_items_NDOF_BUTTON_TILT_CW, "NDOF_BUTTON_TILT_CW"}, {event_type_items_NDOF_BUTTON_TILT_CCW, "NDOF_BUTTON_TILT_CCW"}, {event_type_items_NDOF_BUTTON_ROTATE, "NDOF_BUTTON_ROTATE"}, {event_type_items_NDOF_BUTTON_PANZOOM, "NDOF_BUTTON_PANZOOM"}, {event_type_items_NDOF_BUTTON_DOMINANT, "NDOF_BUTTON_DOMINANT"}, {event_type_items_NDOF_BUTTON_PLUS, "NDOF_BUTTON_PLUS"}, {event_type_items_NDOF_BUTTON_MINUS, "NDOF_BUTTON_MINUS"}, {event_type_items_NDOF_BUTTON_ESC, "NDOF_BUTTON_ESC"}, {event_type_items_NDOF_BUTTON_ALT, "NDOF_BUTTON_ALT"}, {event_type_items_NDOF_BUTTON_SHIFT, "NDOF_BUTTON_SHIFT"}, {event_type_items_NDOF_BUTTON_CTRL, "NDOF_BUTTON_CTRL"}, {event_type_items_NDOF_BUTTON_1, "NDOF_BUTTON_1"}, {event_type_items_NDOF_BUTTON_2, "NDOF_BUTTON_2"}, {event_type_items_NDOF_BUTTON_3, "NDOF_BUTTON_3"}, {event_type_items_NDOF_BUTTON_4, "NDOF_BUTTON_4"}, {event_type_items_NDOF_BUTTON_5, "NDOF_BUTTON_5"}, {event_type_items_NDOF_BUTTON_6, "NDOF_BUTTON_6"}, {event_type_items_NDOF_BUTTON_7, "NDOF_BUTTON_7"}, {event_type_items_NDOF_BUTTON_8, "NDOF_BUTTON_8"}, {event_type_items_NDOF_BUTTON_9, "NDOF_BUTTON_9"}, {event_type_items_NDOF_BUTTON_10, "NDOF_BUTTON_10"}, {event_type_items_NDOF_BUTTON_A, "NDOF_BUTTON_A"}, {event_type_items_NDOF_BUTTON_B, "NDOF_BUTTON_B"}, {event_type_items_NDOF_BUTTON_C, "NDOF_BUTTON_C"}};
	};

	const std::map<std::string, int> string_to_event_type_items = create_string_to_event_type_items();
	const std::map<int, std::string> event_type_items_to_string = create_event_type_items_to_string();

	enum event_value_items_enum {
		event_value_items_ANY = -1,	
		event_value_items_NOTHING = 0,	
		event_value_items_PRESS = 1,	
		event_value_items_RELEASE = 2,	
		event_value_items_CLICK = 3,	
		event_value_items_DOUBLE_CLICK = 4,	
		event_value_items_NORTH = 1,	
		event_value_items_NORTH_EAST = 2,	
		event_value_items_EAST = 3,	
		event_value_items_SOUTH_EAST = 4,	
		event_value_items_SOUTH = 5,	
		event_value_items_SOUTH_WEST = 6,	
		event_value_items_WEST = 7,	
		event_value_items_NORTH_WEST = 8	
	};

	std::map<std::string, int> create_string_to_event_value_items() {
		return {{"ANY", event_value_items_ANY}, {"NOTHING", event_value_items_NOTHING}, {"PRESS", event_value_items_PRESS}, {"RELEASE", event_value_items_RELEASE}, {"CLICK", event_value_items_CLICK}, {"DOUBLE_CLICK", event_value_items_DOUBLE_CLICK}, {"NORTH", event_value_items_NORTH}, {"NORTH_EAST", event_value_items_NORTH_EAST}, {"EAST", event_value_items_EAST}, {"SOUTH_EAST", event_value_items_SOUTH_EAST}, {"SOUTH", event_value_items_SOUTH}, {"SOUTH_WEST", event_value_items_SOUTH_WEST}, {"WEST", event_value_items_WEST}, {"NORTH_WEST", event_value_items_NORTH_WEST}};
	};

	std::map<int, std::string> create_event_value_items_to_string() {
		return {{event_value_items_ANY, "ANY"}, {event_value_items_NOTHING, "NOTHING"}, {event_value_items_PRESS, "PRESS"}, {event_value_items_RELEASE, "RELEASE"}, {event_value_items_CLICK, "CLICK"}, {event_value_items_DOUBLE_CLICK, "DOUBLE_CLICK"}, {event_value_items_NORTH, "NORTH"}, {event_value_items_NORTH_EAST, "NORTH_EAST"}, {event_value_items_EAST, "EAST"}, {event_value_items_SOUTH_EAST, "SOUTH_EAST"}, {event_value_items_SOUTH, "SOUTH"}, {event_value_items_SOUTH_WEST, "SOUTH_WEST"}, {event_value_items_WEST, "WEST"}, {event_value_items_NORTH_WEST, "NORTH_WEST"}};
	};

	const std::map<std::string, int> string_to_event_value_items = create_string_to_event_value_items();
	const std::map<int, std::string> event_value_items_to_string = create_event_value_items_to_string();

	KeyMapItem create(const std::string idname, event_type_items_enum type, event_value_items_enum value, bool any = false, bool shift = false, bool ctrl = false, bool alt = false, bool oskey = false, event_type_items_enum key_modifier = event_type_items_NONE, bool head = false);

	KeyMapItem new_modal(const std::string propvalue, event_type_items_enum type, event_value_items_enum value, bool any = false, bool shift = false, bool ctrl = false, bool alt = false, bool oskey = false, event_type_items_enum key_modifier = event_type_items_NONE);

	void remove(KeyMapItem item);

	KeyMapItem from_id(int id);
};

class WorldTextureSlots : public pyUniplug {
public:
	WorldTextureSlots(PyObject* pyobj) : pyUniplug(pyobj) {}
	WorldTextureSlots() : pyUniplug(0) { }

	WorldTextureSlot add();

	WorldTextureSlot create(int index);

	void clear(int index) {
		PYTHON_FUNCTION_ARGS_CALL("clear", "i", index)
	}
};

class MovieTrackingMarkers : public pyUniplug {
public:
	MovieTrackingMarkers(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingMarkers() : pyUniplug(0) { }

	MovieTrackingMarker find_frame(int frame, bool exact = true);

	MovieTrackingMarker insert_frame(int frame, VFLOAT2 co);

	void delete_frame(int frame) {
		PYTHON_FUNCTION_ARGS_CALL("delete_frame", "i", frame)
	}
};

class MovieTrackingPlaneMarkers : public pyUniplug {
public:
	MovieTrackingPlaneMarkers(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingPlaneMarkers() : pyUniplug(0) { }

	MovieTrackingPlaneMarker find_frame(int frame, bool exact = true);

	MovieTrackingPlaneMarker insert_frame(int frame);

	void delete_frame(int frame) {
		PYTHON_FUNCTION_ARGS_CALL("delete_frame", "i", frame)
	}
};

class MovieTrackingTracks : public pyUniplug {
public:
	MovieTrackingTracks(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingTracks() : pyUniplug(0) { }

	MovieTrackingTrack active();

	MovieTrackingTrack create(const std::string name = NULL, int frame = 1);
};

class MovieTrackingPlaneTracks : public pyUniplug {
public:
	MovieTrackingPlaneTracks(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingPlaneTracks() : pyUniplug(0) { }

	MovieTrackingPlaneTrack active();
};

class MovieTrackingObjectTracks : public pyUniplug {
public:
	MovieTrackingObjectTracks(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingObjectTracks() : pyUniplug(0) { }

	MovieTrackingTrack active();

	MovieTrackingTrack create(const std::string name = NULL, int frame = 1);
};

class MovieTrackingObjectPlaneTracks : public pyUniplug {
public:
	MovieTrackingObjectPlaneTracks(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingObjectPlaneTracks() : pyUniplug(0) { }

	MovieTrackingTrack active();
};

class MovieTrackingReconstructedCameras : public pyUniplug {
public:
	MovieTrackingReconstructedCameras(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingReconstructedCameras() : pyUniplug(0) { }

	MovieReconstructedCamera find_frame(int frame = 1);

	VFLOAT16 matrix_from_frame(int frame = 1) {
		PYTHON_FUNCTION_ARGS_CALL("matrix_from_frame", "i", frame)
		CREATE_SINGLE_PYOBJ(matrix)
		POD_VECTOR_TYPES_CONV(matrix, FLOAT, (float)PyFloat_AsDouble(item), 16)
		NONCLASS_TYPES_RETURN(matrix_res)
	}
};

class MovieTrackingObjects : public pyUniplug {
public:
	MovieTrackingObjects(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingObjects() : pyUniplug(0) { }

	MovieTrackingObject active();

	MovieTrackingObject create(const std::string name);

	void remove(MovieTrackingObject object_value);
};

class MaskSplines : public pyUniplug {
public:
	MaskSplines(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskSplines() : pyUniplug(0) { }

	MaskSpline active();

	MaskSplinePoint active_point();

	MaskSpline create();

	void remove(MaskSpline spline);
};

class MaskSplinePoints : public pyUniplug {
public:
	MaskSplinePoints(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskSplinePoints() : pyUniplug(0) { }

	void add(int count = 1) {
		PYTHON_FUNCTION_ARGS_CALL("add", "i", count)
	}

	void remove(MaskSplinePoint point);
};

class MaskLayers : public pyUniplug {
public:
	MaskLayers(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskLayers() : pyUniplug(0) { }

	MaskLayer active();

	MaskLayer create(const std::string name = NULL);

	void remove(MaskLayer layer);

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class Action : public ID {
public:
	Action(PyObject* pyobj) : ID(pyobj) {}
	Action() : ID(0) { }

	std::map<std::string, FCurve> fcurves();

	std::map<std::string, ActionGroup> groups();

	std::map<std::string, TimelineMarker> pose_markers();

	VFLOAT2 frame_range() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_range", 2)
	}

	void frame_range(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_range", 2)
	}

	enum id_type_items_enum {
		id_type_items_ACTION = 17217,	
		id_type_items_ARMATURE = 21057,	
		id_type_items_BRUSH = 21058,	
		id_type_items_CAMERA = 16707,	
		id_type_items_CURVE = 21827,	
		id_type_items_FONT = 18006,	
		id_type_items_GREASEPENCIL = 17479,	
		id_type_items_GROUP = 21063,	
		id_type_items_IMAGE = 19785,	
		id_type_items_KEY = 17739,	
		id_type_items_LAMP = 16716,	
		id_type_items_LIBRARY = 18764,	
		id_type_items_LINESTYLE = 21324,	
		id_type_items_LATTICE = 21580,	
		id_type_items_MASK = 21325,	
		id_type_items_MATERIAL = 16717,	
		id_type_items_META = 16973,	
		id_type_items_MESH = 17741,	
		id_type_items_MOVIECLIP = 17229,	
		id_type_items_NODETREE = 21582,	
		id_type_items_OBJECT = 16975,	
		id_type_items_PAINTCURVE = 17232,	
		id_type_items_PALETTE = 19536,	
		id_type_items_PARTICLE = 16720,	
		id_type_items_SCENE = 17235,	
		id_type_items_SCREEN = 21075,	
		id_type_items_SOUND = 20307,	
		id_type_items_SPEAKER = 19283,	
		id_type_items_TEXT = 22612,	
		id_type_items_TEXTURE = 17748,	
		id_type_items_WINDOWMANAGER = 19799,	
		id_type_items_WORLD = 20311	
	};

	std::map<std::string, int> create_string_to_id_type_items() {
		return {{"ACTION", id_type_items_ACTION}, {"ARMATURE", id_type_items_ARMATURE}, {"BRUSH", id_type_items_BRUSH}, {"CAMERA", id_type_items_CAMERA}, {"CURVE", id_type_items_CURVE}, {"FONT", id_type_items_FONT}, {"GREASEPENCIL", id_type_items_GREASEPENCIL}, {"GROUP", id_type_items_GROUP}, {"IMAGE", id_type_items_IMAGE}, {"KEY", id_type_items_KEY}, {"LAMP", id_type_items_LAMP}, {"LIBRARY", id_type_items_LIBRARY}, {"LINESTYLE", id_type_items_LINESTYLE}, {"LATTICE", id_type_items_LATTICE}, {"MASK", id_type_items_MASK}, {"MATERIAL", id_type_items_MATERIAL}, {"META", id_type_items_META}, {"MESH", id_type_items_MESH}, {"MOVIECLIP", id_type_items_MOVIECLIP}, {"NODETREE", id_type_items_NODETREE}, {"OBJECT", id_type_items_OBJECT}, {"PAINTCURVE", id_type_items_PAINTCURVE}, {"PALETTE", id_type_items_PALETTE}, {"PARTICLE", id_type_items_PARTICLE}, {"SCENE", id_type_items_SCENE}, {"SCREEN", id_type_items_SCREEN}, {"SOUND", id_type_items_SOUND}, {"SPEAKER", id_type_items_SPEAKER}, {"TEXT", id_type_items_TEXT}, {"TEXTURE", id_type_items_TEXTURE}, {"WINDOWMANAGER", id_type_items_WINDOWMANAGER}, {"WORLD", id_type_items_WORLD}};
	};

	std::map<int, std::string> create_id_type_items_to_string() {
		return {{id_type_items_ACTION, "ACTION"}, {id_type_items_ARMATURE, "ARMATURE"}, {id_type_items_BRUSH, "BRUSH"}, {id_type_items_CAMERA, "CAMERA"}, {id_type_items_CURVE, "CURVE"}, {id_type_items_FONT, "FONT"}, {id_type_items_GREASEPENCIL, "GREASEPENCIL"}, {id_type_items_GROUP, "GROUP"}, {id_type_items_IMAGE, "IMAGE"}, {id_type_items_KEY, "KEY"}, {id_type_items_LAMP, "LAMP"}, {id_type_items_LIBRARY, "LIBRARY"}, {id_type_items_LINESTYLE, "LINESTYLE"}, {id_type_items_LATTICE, "LATTICE"}, {id_type_items_MASK, "MASK"}, {id_type_items_MATERIAL, "MATERIAL"}, {id_type_items_META, "META"}, {id_type_items_MESH, "MESH"}, {id_type_items_MOVIECLIP, "MOVIECLIP"}, {id_type_items_NODETREE, "NODETREE"}, {id_type_items_OBJECT, "OBJECT"}, {id_type_items_PAINTCURVE, "PAINTCURVE"}, {id_type_items_PALETTE, "PALETTE"}, {id_type_items_PARTICLE, "PARTICLE"}, {id_type_items_SCENE, "SCENE"}, {id_type_items_SCREEN, "SCREEN"}, {id_type_items_SOUND, "SOUND"}, {id_type_items_SPEAKER, "SPEAKER"}, {id_type_items_TEXT, "TEXT"}, {id_type_items_TEXTURE, "TEXTURE"}, {id_type_items_WINDOWMANAGER, "WINDOWMANAGER"}, {id_type_items_WORLD, "WORLD"}};
	};

	const std::map<std::string, int> string_to_id_type_items = create_string_to_id_type_items();
	const std::map<int, std::string> id_type_items_to_string = create_id_type_items_to_string();

	id_type_items_enum id_root() {
		STRING_TYPE_GETTER("id_root", static_cast<id_type_items_enum>(string_to_id_type_items.at(resstr)))
	}

	void id_root(id_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "id_root", id_type_items_to_string.at(value))
	}
};

class ActionGroup : public pyUniplug {
public:
	ActionGroup(PyObject* pyobj) : pyUniplug(pyobj) {}
	ActionGroup() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, FCurve> channels();

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool lock_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock")
	}

	void lock_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock", value)
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	enum color_sets_items_enum {
		color_sets_items_DEFAULT = 0,	
		color_sets_items_THEME01 = 1,	
		color_sets_items_THEME02 = 2,	
		color_sets_items_THEME03 = 3,	
		color_sets_items_THEME04 = 4,	
		color_sets_items_THEME05 = 5,	
		color_sets_items_THEME06 = 6,	
		color_sets_items_THEME07 = 7,	
		color_sets_items_THEME08 = 8,	
		color_sets_items_THEME09 = 9,	
		color_sets_items_THEME10 = 10,	
		color_sets_items_THEME11 = 11,	
		color_sets_items_THEME12 = 12,	
		color_sets_items_THEME13 = 13,	
		color_sets_items_THEME14 = 14,	
		color_sets_items_THEME15 = 15,	
		color_sets_items_THEME16 = 16,	
		color_sets_items_THEME17 = 17,	
		color_sets_items_THEME18 = 18,	
		color_sets_items_THEME19 = 19,	
		color_sets_items_THEME20 = 20,	
		color_sets_items_CUSTOM = -1	
	};

	std::map<std::string, int> create_string_to_color_sets_items() {
		return {{"DEFAULT", color_sets_items_DEFAULT}, {"THEME01", color_sets_items_THEME01}, {"THEME02", color_sets_items_THEME02}, {"THEME03", color_sets_items_THEME03}, {"THEME04", color_sets_items_THEME04}, {"THEME05", color_sets_items_THEME05}, {"THEME06", color_sets_items_THEME06}, {"THEME07", color_sets_items_THEME07}, {"THEME08", color_sets_items_THEME08}, {"THEME09", color_sets_items_THEME09}, {"THEME10", color_sets_items_THEME10}, {"THEME11", color_sets_items_THEME11}, {"THEME12", color_sets_items_THEME12}, {"THEME13", color_sets_items_THEME13}, {"THEME14", color_sets_items_THEME14}, {"THEME15", color_sets_items_THEME15}, {"THEME16", color_sets_items_THEME16}, {"THEME17", color_sets_items_THEME17}, {"THEME18", color_sets_items_THEME18}, {"THEME19", color_sets_items_THEME19}, {"THEME20", color_sets_items_THEME20}, {"CUSTOM", color_sets_items_CUSTOM}};
	};

	std::map<int, std::string> create_color_sets_items_to_string() {
		return {{color_sets_items_DEFAULT, "DEFAULT"}, {color_sets_items_THEME01, "THEME01"}, {color_sets_items_THEME02, "THEME02"}, {color_sets_items_THEME03, "THEME03"}, {color_sets_items_THEME04, "THEME04"}, {color_sets_items_THEME05, "THEME05"}, {color_sets_items_THEME06, "THEME06"}, {color_sets_items_THEME07, "THEME07"}, {color_sets_items_THEME08, "THEME08"}, {color_sets_items_THEME09, "THEME09"}, {color_sets_items_THEME10, "THEME10"}, {color_sets_items_THEME11, "THEME11"}, {color_sets_items_THEME12, "THEME12"}, {color_sets_items_THEME13, "THEME13"}, {color_sets_items_THEME14, "THEME14"}, {color_sets_items_THEME15, "THEME15"}, {color_sets_items_THEME16, "THEME16"}, {color_sets_items_THEME17, "THEME17"}, {color_sets_items_THEME18, "THEME18"}, {color_sets_items_THEME19, "THEME19"}, {color_sets_items_THEME20, "THEME20"}, {color_sets_items_CUSTOM, "CUSTOM"}};
	};

	const std::map<std::string, int> string_to_color_sets_items = create_string_to_color_sets_items();
	const std::map<int, std::string> color_sets_items_to_string = create_color_sets_items_to_string();

	color_sets_items_enum color_set() {
		STRING_TYPE_GETTER("color_set", static_cast<color_sets_items_enum>(string_to_color_sets_items.at(resstr)))
	}

	void color_set(color_sets_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_set", color_sets_items_to_string.at(value))
	}

	bool is_custom_color_set() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_custom_color_set")
	}

	void is_custom_color_set(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_custom_color_set", value)
	}

	ThemeBoneColorSet colors();
};

class DopeSheet : public pyUniplug {
public:
	DopeSheet(PyObject* pyobj) : pyUniplug(pyobj) {}
	DopeSheet() : pyUniplug(0) { }

	ID source() {
		CLASS_TYPES_GETTER(ID, "source")
	}

	bool show_datablock_filters() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_datablock_filters")
	}

	void show_datablock_filters(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_datablock_filters", value)
	}

	bool show_only_selected() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_selected")
	}

	void show_only_selected(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_selected", value)
	}

	bool show_hidden() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_hidden")
	}

	void show_hidden(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_hidden", value)
	}

	bool show_only_errors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_errors")
	}

	void show_only_errors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_errors", value)
	}

	bool show_only_group_objects() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_group_objects")
	}

	void show_only_group_objects(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_group_objects", value)
	}

	Group filter_group();

	bool show_only_matching_fcurves() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_matching_fcurves")
	}

	void show_only_matching_fcurves(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_matching_fcurves", value)
	}

	std::string filter_fcurve_name() {
		STRING_TYPE_GETTER("filter_fcurve_name", resstr)
	}

	void filter_fcurve_name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_fcurve_name", value)
	}

	bool use_filter_text() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_text")
	}

	void use_filter_text(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_text", value)
	}

	std::string filter_text() {
		STRING_TYPE_GETTER("filter_text", resstr)
	}

	void filter_text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_text", value)
	}

	bool show_missing_nla() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_missing_nla")
	}

	void show_missing_nla(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_missing_nla", value)
	}

	bool show_summary() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_summary")
	}

	void show_summary(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_summary", value)
	}

	bool show_expanded_summary() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded_summary")
	}

	void show_expanded_summary(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded_summary", value)
	}

	bool show_transforms() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_transforms")
	}

	void show_transforms(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_transforms", value)
	}

	bool show_shapekeys() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_shapekeys")
	}

	void show_shapekeys(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_shapekeys", value)
	}

	bool show_modifiers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_modifiers")
	}

	void show_modifiers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_modifiers", value)
	}

	bool show_meshes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_meshes")
	}

	void show_meshes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_meshes", value)
	}

	bool show_lattices() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_lattices")
	}

	void show_lattices(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_lattices", value)
	}

	bool show_cameras() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_cameras")
	}

	void show_cameras(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_cameras", value)
	}

	bool show_materials() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_materials")
	}

	void show_materials(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_materials", value)
	}

	bool show_lamps() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_lamps")
	}

	void show_lamps(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_lamps", value)
	}

	bool show_linestyles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_linestyles")
	}

	void show_linestyles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_linestyles", value)
	}

	bool show_textures() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_textures")
	}

	void show_textures(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_textures", value)
	}

	bool show_curves() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_curves")
	}

	void show_curves(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_curves", value)
	}

	bool show_worlds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_worlds")
	}

	void show_worlds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_worlds", value)
	}

	bool show_scenes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_scenes")
	}

	void show_scenes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_scenes", value)
	}

	bool show_particles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_particles")
	}

	void show_particles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_particles", value)
	}

	bool show_metaballs() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_metaballs")
	}

	void show_metaballs(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_metaballs", value)
	}

	bool show_armatures() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_armatures")
	}

	void show_armatures(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_armatures", value)
	}

	bool show_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_nodes")
	}

	void show_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_nodes", value)
	}

	bool show_speakers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_speakers")
	}

	void show_speakers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_speakers", value)
	}

	bool show_gpencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_gpencil")
	}

	void show_gpencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_gpencil", value)
	}
};

class AnimData : public pyUniplug {
public:
	AnimData(PyObject* pyobj) : pyUniplug(pyobj) {}
	AnimData() : pyUniplug(0) { }

	std::map<std::string, NlaTrack> nla_tracks();

	Action action() {
		CLASS_TYPES_GETTER(Action, "action")
	}

	enum nla_mode_extend_items_enum {
		nla_mode_extend_items_NOTHING = 2,	
		nla_mode_extend_items_HOLD = 0,	
		nla_mode_extend_items_HOLD_FORWARD = 1	
	};

	std::map<std::string, int> create_string_to_nla_mode_extend_items() {
		return {{"NOTHING", nla_mode_extend_items_NOTHING}, {"HOLD", nla_mode_extend_items_HOLD}, {"HOLD_FORWARD", nla_mode_extend_items_HOLD_FORWARD}};
	};

	std::map<int, std::string> create_nla_mode_extend_items_to_string() {
		return {{nla_mode_extend_items_NOTHING, "NOTHING"}, {nla_mode_extend_items_HOLD, "HOLD"}, {nla_mode_extend_items_HOLD_FORWARD, "HOLD_FORWARD"}};
	};

	const std::map<std::string, int> string_to_nla_mode_extend_items = create_string_to_nla_mode_extend_items();
	const std::map<int, std::string> nla_mode_extend_items_to_string = create_nla_mode_extend_items_to_string();

	nla_mode_extend_items_enum action_extrapolation() {
		STRING_TYPE_GETTER("action_extrapolation", static_cast<nla_mode_extend_items_enum>(string_to_nla_mode_extend_items.at(resstr)))
	}

	void action_extrapolation(nla_mode_extend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "action_extrapolation", nla_mode_extend_items_to_string.at(value))
	}

	enum nla_mode_blend_items_enum {
		nla_mode_blend_items_REPLACE = 0,	
		nla_mode_blend_items_ADD = 1,	
		nla_mode_blend_items_SUBTRACT = 2,	
		nla_mode_blend_items_MULTIPLY = 3	
	};

	std::map<std::string, int> create_string_to_nla_mode_blend_items() {
		return {{"REPLACE", nla_mode_blend_items_REPLACE}, {"ADD", nla_mode_blend_items_ADD}, {"SUBTRACT", nla_mode_blend_items_SUBTRACT}, {"MULTIPLY", nla_mode_blend_items_MULTIPLY}};
	};

	std::map<int, std::string> create_nla_mode_blend_items_to_string() {
		return {{nla_mode_blend_items_REPLACE, "REPLACE"}, {nla_mode_blend_items_ADD, "ADD"}, {nla_mode_blend_items_SUBTRACT, "SUBTRACT"}, {nla_mode_blend_items_MULTIPLY, "MULTIPLY"}};
	};

	const std::map<std::string, int> string_to_nla_mode_blend_items = create_string_to_nla_mode_blend_items();
	const std::map<int, std::string> nla_mode_blend_items_to_string = create_nla_mode_blend_items_to_string();

	nla_mode_blend_items_enum action_blend_type() {
		STRING_TYPE_GETTER("action_blend_type", static_cast<nla_mode_blend_items_enum>(string_to_nla_mode_blend_items.at(resstr)))
	}

	void action_blend_type(nla_mode_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "action_blend_type", nla_mode_blend_items_to_string.at(value))
	}

	float action_influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "action_influence")
	}

	void action_influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "action_influence", value)
	}

	std::map<std::string, FCurve> drivers();

	bool use_nla() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_nla")
	}

	void use_nla(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_nla", value)
	}
};

class KeyingSet : public pyUniplug {
public:
	KeyingSet(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyingSet() : pyUniplug(0) { }

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_description() {
		STRING_TYPE_GETTER("bl_description", resstr)
	}

	void bl_description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_description", value)
	}

	KeyingSetInfo type_info();

	std::map<std::string, KeyingSetPath> paths();

	bool is_path_absolute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_path_absolute")
	}

	void is_path_absolute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_path_absolute", value)
	}

	bool use_insertkey_override_needed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_override_needed")
	}

	void use_insertkey_override_needed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_override_needed", value)
	}

	bool use_insertkey_override_visual() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_override_visual")
	}

	void use_insertkey_override_visual(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_override_visual", value)
	}

	bool use_insertkey_override_xyz_to_rgb() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_override_xyz_to_rgb")
	}

	void use_insertkey_override_xyz_to_rgb(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_override_xyz_to_rgb", value)
	}

	bool use_insertkey_needed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_needed")
	}

	void use_insertkey_needed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_needed", value)
	}

	bool use_insertkey_visual() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_visual")
	}

	void use_insertkey_visual(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_visual", value)
	}

	bool use_insertkey_xyz_to_rgb() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_xyz_to_rgb")
	}

	void use_insertkey_xyz_to_rgb(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_xyz_to_rgb", value)
	}

	void refresh() {
		PYTHON_FUNCTION_CALL("refresh")
	}
};

class KeyingSetPath : public pyUniplug {
public:
	KeyingSetPath(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyingSetPath() : pyUniplug(0) { }

	ID id() {
		CLASS_TYPES_GETTER(ID, "id")
	}

	enum id_type_items_enum {
		id_type_items_ACTION = 17217,	
		id_type_items_ARMATURE = 21057,	
		id_type_items_BRUSH = 21058,	
		id_type_items_CAMERA = 16707,	
		id_type_items_CURVE = 21827,	
		id_type_items_FONT = 18006,	
		id_type_items_GREASEPENCIL = 17479,	
		id_type_items_GROUP = 21063,	
		id_type_items_IMAGE = 19785,	
		id_type_items_KEY = 17739,	
		id_type_items_LAMP = 16716,	
		id_type_items_LIBRARY = 18764,	
		id_type_items_LINESTYLE = 21324,	
		id_type_items_LATTICE = 21580,	
		id_type_items_MASK = 21325,	
		id_type_items_MATERIAL = 16717,	
		id_type_items_META = 16973,	
		id_type_items_MESH = 17741,	
		id_type_items_MOVIECLIP = 17229,	
		id_type_items_NODETREE = 21582,	
		id_type_items_OBJECT = 16975,	
		id_type_items_PAINTCURVE = 17232,	
		id_type_items_PALETTE = 19536,	
		id_type_items_PARTICLE = 16720,	
		id_type_items_SCENE = 17235,	
		id_type_items_SCREEN = 21075,	
		id_type_items_SOUND = 20307,	
		id_type_items_SPEAKER = 19283,	
		id_type_items_TEXT = 22612,	
		id_type_items_TEXTURE = 17748,	
		id_type_items_WINDOWMANAGER = 19799,	
		id_type_items_WORLD = 20311	
	};

	std::map<std::string, int> create_string_to_id_type_items() {
		return {{"ACTION", id_type_items_ACTION}, {"ARMATURE", id_type_items_ARMATURE}, {"BRUSH", id_type_items_BRUSH}, {"CAMERA", id_type_items_CAMERA}, {"CURVE", id_type_items_CURVE}, {"FONT", id_type_items_FONT}, {"GREASEPENCIL", id_type_items_GREASEPENCIL}, {"GROUP", id_type_items_GROUP}, {"IMAGE", id_type_items_IMAGE}, {"KEY", id_type_items_KEY}, {"LAMP", id_type_items_LAMP}, {"LIBRARY", id_type_items_LIBRARY}, {"LINESTYLE", id_type_items_LINESTYLE}, {"LATTICE", id_type_items_LATTICE}, {"MASK", id_type_items_MASK}, {"MATERIAL", id_type_items_MATERIAL}, {"META", id_type_items_META}, {"MESH", id_type_items_MESH}, {"MOVIECLIP", id_type_items_MOVIECLIP}, {"NODETREE", id_type_items_NODETREE}, {"OBJECT", id_type_items_OBJECT}, {"PAINTCURVE", id_type_items_PAINTCURVE}, {"PALETTE", id_type_items_PALETTE}, {"PARTICLE", id_type_items_PARTICLE}, {"SCENE", id_type_items_SCENE}, {"SCREEN", id_type_items_SCREEN}, {"SOUND", id_type_items_SOUND}, {"SPEAKER", id_type_items_SPEAKER}, {"TEXT", id_type_items_TEXT}, {"TEXTURE", id_type_items_TEXTURE}, {"WINDOWMANAGER", id_type_items_WINDOWMANAGER}, {"WORLD", id_type_items_WORLD}};
	};

	std::map<int, std::string> create_id_type_items_to_string() {
		return {{id_type_items_ACTION, "ACTION"}, {id_type_items_ARMATURE, "ARMATURE"}, {id_type_items_BRUSH, "BRUSH"}, {id_type_items_CAMERA, "CAMERA"}, {id_type_items_CURVE, "CURVE"}, {id_type_items_FONT, "FONT"}, {id_type_items_GREASEPENCIL, "GREASEPENCIL"}, {id_type_items_GROUP, "GROUP"}, {id_type_items_IMAGE, "IMAGE"}, {id_type_items_KEY, "KEY"}, {id_type_items_LAMP, "LAMP"}, {id_type_items_LIBRARY, "LIBRARY"}, {id_type_items_LINESTYLE, "LINESTYLE"}, {id_type_items_LATTICE, "LATTICE"}, {id_type_items_MASK, "MASK"}, {id_type_items_MATERIAL, "MATERIAL"}, {id_type_items_META, "META"}, {id_type_items_MESH, "MESH"}, {id_type_items_MOVIECLIP, "MOVIECLIP"}, {id_type_items_NODETREE, "NODETREE"}, {id_type_items_OBJECT, "OBJECT"}, {id_type_items_PAINTCURVE, "PAINTCURVE"}, {id_type_items_PALETTE, "PALETTE"}, {id_type_items_PARTICLE, "PARTICLE"}, {id_type_items_SCENE, "SCENE"}, {id_type_items_SCREEN, "SCREEN"}, {id_type_items_SOUND, "SOUND"}, {id_type_items_SPEAKER, "SPEAKER"}, {id_type_items_TEXT, "TEXT"}, {id_type_items_TEXTURE, "TEXTURE"}, {id_type_items_WINDOWMANAGER, "WINDOWMANAGER"}, {id_type_items_WORLD, "WORLD"}};
	};

	const std::map<std::string, int> string_to_id_type_items = create_string_to_id_type_items();
	const std::map<int, std::string> id_type_items_to_string = create_id_type_items_to_string();

	id_type_items_enum id_type() {
		STRING_TYPE_GETTER("id_type", static_cast<id_type_items_enum>(string_to_id_type_items.at(resstr)))
	}

	void id_type(id_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "id_type", id_type_items_to_string.at(value))
	}

	std::string group() {
		STRING_TYPE_GETTER("group", resstr)
	}

	void group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "group", value)
	}

	enum keyingset_path_grouping_items_enum {
		keyingset_path_grouping_items_NAMED = 0,	
		keyingset_path_grouping_items_NONE = 1,	
		keyingset_path_grouping_items_KEYINGSET = 2	
	};

	std::map<std::string, int> create_string_to_keyingset_path_grouping_items() {
		return {{"NAMED", keyingset_path_grouping_items_NAMED}, {"NONE", keyingset_path_grouping_items_NONE}, {"KEYINGSET", keyingset_path_grouping_items_KEYINGSET}};
	};

	std::map<int, std::string> create_keyingset_path_grouping_items_to_string() {
		return {{keyingset_path_grouping_items_NAMED, "NAMED"}, {keyingset_path_grouping_items_NONE, "NONE"}, {keyingset_path_grouping_items_KEYINGSET, "KEYINGSET"}};
	};

	const std::map<std::string, int> string_to_keyingset_path_grouping_items = create_string_to_keyingset_path_grouping_items();
	const std::map<int, std::string> keyingset_path_grouping_items_to_string = create_keyingset_path_grouping_items_to_string();

	keyingset_path_grouping_items_enum group_method() {
		STRING_TYPE_GETTER("group_method", static_cast<keyingset_path_grouping_items_enum>(string_to_keyingset_path_grouping_items.at(resstr)))
	}

	void group_method(keyingset_path_grouping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "group_method", keyingset_path_grouping_items_to_string.at(value))
	}

	std::string data_path() {
		STRING_TYPE_GETTER("data_path", resstr)
	}

	void data_path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "data_path", value)
	}

	int array_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "array_index")
	}

	void array_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "array_index", value)
	}

	bool use_entire_array() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_entire_array")
	}

	void use_entire_array(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_entire_array", value)
	}

	bool use_insertkey_override_needed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_override_needed")
	}

	void use_insertkey_override_needed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_override_needed", value)
	}

	bool use_insertkey_override_visual() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_override_visual")
	}

	void use_insertkey_override_visual(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_override_visual", value)
	}

	bool use_insertkey_override_xyz_to_rgb() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_override_xyz_to_rgb")
	}

	void use_insertkey_override_xyz_to_rgb(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_override_xyz_to_rgb", value)
	}

	bool use_insertkey_needed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_needed")
	}

	void use_insertkey_needed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_needed", value)
	}

	bool use_insertkey_visual() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_visual")
	}

	void use_insertkey_visual(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_visual", value)
	}

	bool use_insertkey_xyz_to_rgb() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_xyz_to_rgb")
	}

	void use_insertkey_xyz_to_rgb(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_xyz_to_rgb", value)
	}
};

class KeyingSetInfo : public pyUniplug {
public:
	KeyingSetInfo(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyingSetInfo() : pyUniplug(0) { }

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_description() {
		STRING_TYPE_GETTER("bl_description", resstr)
	}

	void bl_description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_description", value)
	}

	enum keying_flag_items_enum {
		keying_flag_items_INSERTKEY_NEEDED = 1,	
		keying_flag_items_INSERTKEY_VISUAL = 2,	
		keying_flag_items_INSERTKEY_XYZ_TO_RGB = 32	
	};

	std::map<std::string, int> create_string_to_keying_flag_items() {
		return {{"INSERTKEY_NEEDED", keying_flag_items_INSERTKEY_NEEDED}, {"INSERTKEY_VISUAL", keying_flag_items_INSERTKEY_VISUAL}, {"INSERTKEY_XYZ_TO_RGB", keying_flag_items_INSERTKEY_XYZ_TO_RGB}};
	};

	std::map<int, std::string> create_keying_flag_items_to_string() {
		return {{keying_flag_items_INSERTKEY_NEEDED, "INSERTKEY_NEEDED"}, {keying_flag_items_INSERTKEY_VISUAL, "INSERTKEY_VISUAL"}, {keying_flag_items_INSERTKEY_XYZ_TO_RGB, "INSERTKEY_XYZ_TO_RGB"}};
	};

	const std::map<std::string, int> string_to_keying_flag_items = create_string_to_keying_flag_items();
	const std::map<int, std::string> keying_flag_items_to_string = create_keying_flag_items_to_string();

	keying_flag_items_enum bl_options() {
		STRING_TYPE_GETTER("bl_options", static_cast<keying_flag_items_enum>(string_to_keying_flag_items.at(resstr)))
	}

	void bl_options(keying_flag_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_options", keying_flag_items_to_string.at(value))
	}

};

class AnimViz : public pyUniplug {
public:
	AnimViz(PyObject* pyobj) : pyUniplug(pyobj) {}
	AnimViz() : pyUniplug(0) { }

	AnimVizOnionSkinning onion_skin_frames();

	AnimVizMotionPaths motion_path();
};

class AnimVizOnionSkinning : public pyUniplug {
public:
	AnimVizOnionSkinning(PyObject* pyobj) : pyUniplug(pyobj) {}
	AnimVizOnionSkinning() : pyUniplug(0) { }

	enum prop_type_items_enum {
		prop_type_items_NONE = 0,	
		prop_type_items_CURRENT_FRAME = 1,	
		prop_type_items_RANGE = 2,	
		prop_type_items_KEYS = 3	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"NONE", prop_type_items_NONE}, {"CURRENT_FRAME", prop_type_items_CURRENT_FRAME}, {"RANGE", prop_type_items_RANGE}, {"KEYS", prop_type_items_KEYS}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_NONE, "NONE"}, {prop_type_items_CURRENT_FRAME, "CURRENT_FRAME"}, {prop_type_items_RANGE, "RANGE"}, {prop_type_items_KEYS, "KEYS"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	bool show_only_selected() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_selected")
	}

	void show_only_selected(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_selected", value)
	}

	int frame_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_step")
	}

	void frame_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_step", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	int frame_before() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_before")
	}

	void frame_before(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_before", value)
	}

	int frame_after() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_after")
	}

	void frame_after(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_after", value)
	}
};

class AnimVizMotionPaths : public pyUniplug {
public:
	AnimVizMotionPaths(PyObject* pyobj) : pyUniplug(pyobj) {}
	AnimVizMotionPaths() : pyUniplug(0) { }

	enum prop_type_items_enum {
		prop_type_items_CURRENT_FRAME = 1,	
		prop_type_items_RANGE = 0	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"CURRENT_FRAME", prop_type_items_CURRENT_FRAME}, {"RANGE", prop_type_items_RANGE}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_CURRENT_FRAME, "CURRENT_FRAME"}, {prop_type_items_RANGE, "RANGE"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	enum motionpath_bake_location_items_enum {
		motionpath_bake_location_items_HEADS = 2,	
		motionpath_bake_location_items_TAILS = 0	
	};

	std::map<std::string, int> create_string_to_motionpath_bake_location_items() {
		return {{"HEADS", motionpath_bake_location_items_HEADS}, {"TAILS", motionpath_bake_location_items_TAILS}};
	};

	std::map<int, std::string> create_motionpath_bake_location_items_to_string() {
		return {{motionpath_bake_location_items_HEADS, "HEADS"}, {motionpath_bake_location_items_TAILS, "TAILS"}};
	};

	const std::map<std::string, int> string_to_motionpath_bake_location_items = create_string_to_motionpath_bake_location_items();
	const std::map<int, std::string> motionpath_bake_location_items_to_string = create_motionpath_bake_location_items_to_string();

	motionpath_bake_location_items_enum bake_location() {
		STRING_TYPE_GETTER("bake_location", static_cast<motionpath_bake_location_items_enum>(string_to_motionpath_bake_location_items.at(resstr)))
	}

	void bake_location(motionpath_bake_location_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bake_location", motionpath_bake_location_items_to_string.at(value))
	}

	bool show_frame_numbers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_frame_numbers")
	}

	void show_frame_numbers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_frame_numbers", value)
	}

	bool show_keyframe_highlight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_keyframe_highlight")
	}

	void show_keyframe_highlight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_keyframe_highlight", value)
	}

	bool show_keyframe_numbers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_keyframe_numbers")
	}

	void show_keyframe_numbers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_keyframe_numbers", value)
	}

	bool show_keyframe_action_all() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_keyframe_action_all")
	}

	void show_keyframe_action_all(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_keyframe_action_all", value)
	}

	int frame_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_step")
	}

	void frame_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_step", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	int frame_before() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_before")
	}

	void frame_before(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_before", value)
	}

	int frame_after() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_after")
	}

	void frame_after(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_after", value)
	}
};

class MotionPath : public pyUniplug {
public:
	MotionPath(PyObject* pyobj) : pyUniplug(pyobj) {}
	MotionPath() : pyUniplug(0) { }

	std::map<std::string, MotionPathVert> points();

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	int length() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "length")
	}

	void length(int value) {
		PRIMITIVE_TYPES_SETTER("i", "length", value)
	}

	bool use_bone_head() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bone_head")
	}

	void use_bone_head(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bone_head", value)
	}

	bool is_modified() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_modified")
	}

	void is_modified(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_modified", value)
	}
};

class MotionPathVert : public pyUniplug {
public:
	MotionPathVert(PyObject* pyobj) : pyUniplug(pyobj) {}
	MotionPathVert() : pyUniplug(0) { }

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}
};

class Actuator : public pyUniplug {
public:
	Actuator(PyObject* pyobj) : pyUniplug(pyobj) {}
	Actuator() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum actuator_type_items_enum {
		actuator_type_items_ACTION = 15,	
		actuator_type_items_ARMATURE = 23,	
		actuator_type_items_CAMERA = 3,	
		actuator_type_items_CONSTRAINT = 9,	
		actuator_type_items_EDIT_OBJECT = 10,	
		actuator_type_items_FILTER_2D = 19,	
		actuator_type_items_GAME = 17,	
		actuator_type_items_MESSAGE = 14,	
		actuator_type_items_MOTION = 0,	
		actuator_type_items_MOUSE = 25,	
		actuator_type_items_PARENT = 20,	
		actuator_type_items_PROPERTY = 6,	
		actuator_type_items_RANDOM = 13,	
		actuator_type_items_SCENE = 11,	
		actuator_type_items_SOUND = 5,	
		actuator_type_items_STATE = 22,	
		actuator_type_items_STEERING = 24,	
		actuator_type_items_VISIBILITY = 18	
	};

	std::map<std::string, int> create_string_to_actuator_type_items() {
		return {{"ACTION", actuator_type_items_ACTION}, {"ARMATURE", actuator_type_items_ARMATURE}, {"CAMERA", actuator_type_items_CAMERA}, {"CONSTRAINT", actuator_type_items_CONSTRAINT}, {"EDIT_OBJECT", actuator_type_items_EDIT_OBJECT}, {"FILTER_2D", actuator_type_items_FILTER_2D}, {"GAME", actuator_type_items_GAME}, {"MESSAGE", actuator_type_items_MESSAGE}, {"MOTION", actuator_type_items_MOTION}, {"MOUSE", actuator_type_items_MOUSE}, {"PARENT", actuator_type_items_PARENT}, {"PROPERTY", actuator_type_items_PROPERTY}, {"RANDOM", actuator_type_items_RANDOM}, {"SCENE", actuator_type_items_SCENE}, {"SOUND", actuator_type_items_SOUND}, {"STATE", actuator_type_items_STATE}, {"STEERING", actuator_type_items_STEERING}, {"VISIBILITY", actuator_type_items_VISIBILITY}};
	};

	std::map<int, std::string> create_actuator_type_items_to_string() {
		return {{actuator_type_items_ACTION, "ACTION"}, {actuator_type_items_ARMATURE, "ARMATURE"}, {actuator_type_items_CAMERA, "CAMERA"}, {actuator_type_items_CONSTRAINT, "CONSTRAINT"}, {actuator_type_items_EDIT_OBJECT, "EDIT_OBJECT"}, {actuator_type_items_FILTER_2D, "FILTER_2D"}, {actuator_type_items_GAME, "GAME"}, {actuator_type_items_MESSAGE, "MESSAGE"}, {actuator_type_items_MOTION, "MOTION"}, {actuator_type_items_MOUSE, "MOUSE"}, {actuator_type_items_PARENT, "PARENT"}, {actuator_type_items_PROPERTY, "PROPERTY"}, {actuator_type_items_RANDOM, "RANDOM"}, {actuator_type_items_SCENE, "SCENE"}, {actuator_type_items_SOUND, "SOUND"}, {actuator_type_items_STATE, "STATE"}, {actuator_type_items_STEERING, "STEERING"}, {actuator_type_items_VISIBILITY, "VISIBILITY"}};
	};

	const std::map<std::string, int> string_to_actuator_type_items = create_string_to_actuator_type_items();
	const std::map<int, std::string> actuator_type_items_to_string = create_actuator_type_items_to_string();

	actuator_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<actuator_type_items_enum>(string_to_actuator_type_items.at(resstr)))
	}

	void type(actuator_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", actuator_type_items_to_string.at(value))
	}

	bool pin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "pin")
	}

	void pin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "pin", value)
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	void link(Controller controller);

	void unlink(Controller controller);
};

class ActionActuator : public Actuator {
public:
	ActionActuator(PyObject* pyobj) : Actuator(pyobj) {}
	ActionActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_PLAY = 0,	
		prop_type_items_PINGPONG = 1,	
		prop_type_items_FLIPPER = 2,	
		prop_type_items_LOOPSTOP = 3,	
		prop_type_items_LOOPEND = 4,	
		prop_type_items_PROPERTY = 6	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"PLAY", prop_type_items_PLAY}, {"PINGPONG", prop_type_items_PINGPONG}, {"FLIPPER", prop_type_items_FLIPPER}, {"LOOPSTOP", prop_type_items_LOOPSTOP}, {"LOOPEND", prop_type_items_LOOPEND}, {"PROPERTY", prop_type_items_PROPERTY}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_PLAY, "PLAY"}, {prop_type_items_PINGPONG, "PINGPONG"}, {prop_type_items_FLIPPER, "FLIPPER"}, {prop_type_items_LOOPSTOP, "LOOPSTOP"}, {prop_type_items_LOOPEND, "LOOPEND"}, {prop_type_items_PROPERTY, "PROPERTY"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum play_mode() {
		STRING_TYPE_GETTER("play_mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void play_mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "play_mode", prop_type_items_to_string.at(value))
	}

	Action action() {
		CLASS_TYPES_GETTER(Action, "action")
	}

	bool use_continue_last_frame() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_continue_last_frame")
	}

	void use_continue_last_frame(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_continue_last_frame", value)
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	float frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_start")
	}

	void frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_start", value)
	}

	float frame_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_end")
	}

	void frame_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_end", value)
	}

	int frame_blend_in() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_blend_in")
	}

	void frame_blend_in(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_blend_in", value)
	}

	int priority() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "priority")
	}

	void priority(int value) {
		PRIMITIVE_TYPES_SETTER("i", "priority", value)
	}

	int layer() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "layer")
	}

	void layer(int value) {
		PRIMITIVE_TYPES_SETTER("i", "layer", value)
	}

	float layer_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "layer_weight")
	}

	void layer_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "layer_weight", value)
	}

	std::string frame_property() {
		STRING_TYPE_GETTER("frame_property", resstr)
	}

	void frame_property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "frame_property", value)
	}

	bool use_additive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_additive")
	}

	void use_additive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_additive", value)
	}

	bool use_force() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_force")
	}

	void use_force(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_force", value)
	}

	bool use_local() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local")
	}

	void use_local(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local", value)
	}

	bool apply_to_children() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "apply_to_children")
	}

	void apply_to_children(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "apply_to_children", value)
	}

	enum prop_blend_items_enum {
		prop_blend_items_BLEND = 0,	
		prop_blend_items_ADD = 1	
	};

	std::map<std::string, int> create_string_to_prop_blend_items() {
		return {{"BLEND", prop_blend_items_BLEND}, {"ADD", prop_blend_items_ADD}};
	};

	std::map<int, std::string> create_prop_blend_items_to_string() {
		return {{prop_blend_items_BLEND, "BLEND"}, {prop_blend_items_ADD, "ADD"}};
	};

	const std::map<std::string, int> string_to_prop_blend_items = create_string_to_prop_blend_items();
	const std::map<int, std::string> prop_blend_items_to_string = create_prop_blend_items_to_string();

	prop_blend_items_enum blend_mode() {
		STRING_TYPE_GETTER("blend_mode", static_cast<prop_blend_items_enum>(string_to_prop_blend_items.at(resstr)))
	}

	void blend_mode(prop_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_mode", prop_blend_items_to_string.at(value))
	}
};

class ObjectActuator : public Actuator {
public:
	ObjectActuator(PyObject* pyobj) : Actuator(pyobj) {}
	ObjectActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_OBJECT_NORMAL = 0,	
		prop_type_items_OBJECT_SERVO = 1,	
		prop_type_items_OBJECT_CHARACTER = 2	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"OBJECT_NORMAL", prop_type_items_OBJECT_NORMAL}, {"OBJECT_SERVO", prop_type_items_OBJECT_SERVO}, {"OBJECT_CHARACTER", prop_type_items_OBJECT_CHARACTER}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_OBJECT_NORMAL, "OBJECT_NORMAL"}, {prop_type_items_OBJECT_SERVO, "OBJECT_SERVO"}, {prop_type_items_OBJECT_CHARACTER, "OBJECT_CHARACTER"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	Object reference_object();

	int damping() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "damping")
	}

	void damping(int value) {
		PRIMITIVE_TYPES_SETTER("i", "damping", value)
	}

	float proportional_coefficient() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "proportional_coefficient")
	}

	void proportional_coefficient(float value) {
		PRIMITIVE_TYPES_SETTER("f", "proportional_coefficient", value)
	}

	float integral_coefficient() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "integral_coefficient")
	}

	void integral_coefficient(float value) {
		PRIMITIVE_TYPES_SETTER("f", "integral_coefficient", value)
	}

	float derivate_coefficient() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "derivate_coefficient")
	}

	void derivate_coefficient(float value) {
		PRIMITIVE_TYPES_SETTER("f", "derivate_coefficient", value)
	}

	float force_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "force_max_x")
	}

	void force_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "force_max_x", value)
	}

	float force_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "force_min_x")
	}

	void force_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "force_min_x", value)
	}

	float force_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "force_max_y")
	}

	void force_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "force_max_y", value)
	}

	float force_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "force_min_y")
	}

	void force_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "force_min_y", value)
	}

	float force_max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "force_max_z")
	}

	void force_max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "force_max_z", value)
	}

	float force_min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "force_min_z")
	}

	void force_min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "force_min_z", value)
	}

	VFLOAT3 offset_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "offset_location", 3)
	}

	void offset_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset_location", 3)
	}

	VFLOAT3 offset_rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "offset_rotation", 3)
	}

	void offset_rotation(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset_rotation", 3)
	}

	VFLOAT3 force() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "force", 3)
	}

	void force(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "force", 3)
	}

	VFLOAT3 torque() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "torque", 3)
	}

	void torque(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "torque", 3)
	}

	VFLOAT3 linear_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "linear_velocity", 3)
	}

	void linear_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "linear_velocity", 3)
	}

	VFLOAT3 angular_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "angular_velocity", 3)
	}

	void angular_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "angular_velocity", 3)
	}

	bool use_local_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_location")
	}

	void use_local_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_location", value)
	}

	bool use_local_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_rotation")
	}

	void use_local_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_rotation", value)
	}

	bool use_local_force() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_force")
	}

	void use_local_force(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_force", value)
	}

	bool use_local_torque() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_torque")
	}

	void use_local_torque(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_torque", value)
	}

	bool use_local_linear_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_linear_velocity")
	}

	void use_local_linear_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_linear_velocity", value)
	}

	bool use_local_angular_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_angular_velocity")
	}

	void use_local_angular_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_angular_velocity", value)
	}

	bool use_add_linear_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_add_linear_velocity")
	}

	void use_add_linear_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_add_linear_velocity", value)
	}

	bool use_add_character_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_add_character_location")
	}

	void use_add_character_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_add_character_location", value)
	}

	bool use_servo_limit_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_servo_limit_x")
	}

	void use_servo_limit_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_servo_limit_x", value)
	}

	bool use_servo_limit_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_servo_limit_y")
	}

	void use_servo_limit_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_servo_limit_y", value)
	}

	bool use_servo_limit_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_servo_limit_z")
	}

	void use_servo_limit_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_servo_limit_z", value)
	}

	bool use_character_jump() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_character_jump")
	}

	void use_character_jump(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_character_jump", value)
	}
};

class CameraActuator : public Actuator {
public:
	CameraActuator(PyObject* pyobj) : Actuator(pyobj) {}
	CameraActuator() : Actuator(0) { }

	Object object_value();

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	float min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min")
	}

	void min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min", value)
	}

	float max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max")
	}

	void max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max", value)
	}

	float damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping")
	}

	void damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping", value)
	}

	enum prop_axis_items_enum {
		prop_axis_items_POS_X = 0,	
		prop_axis_items_POS_Y = 1,	
		prop_axis_items_NEG_X = 3,	
		prop_axis_items_NEG_Y = 4	
	};

	std::map<std::string, int> create_string_to_prop_axis_items() {
		return {{"POS_X", prop_axis_items_POS_X}, {"POS_Y", prop_axis_items_POS_Y}, {"NEG_X", prop_axis_items_NEG_X}, {"NEG_Y", prop_axis_items_NEG_Y}};
	};

	std::map<int, std::string> create_prop_axis_items_to_string() {
		return {{prop_axis_items_POS_X, "POS_X"}, {prop_axis_items_POS_Y, "POS_Y"}, {prop_axis_items_NEG_X, "NEG_X"}, {prop_axis_items_NEG_Y, "NEG_Y"}};
	};

	const std::map<std::string, int> string_to_prop_axis_items = create_string_to_prop_axis_items();
	const std::map<int, std::string> prop_axis_items_to_string = create_prop_axis_items_to_string();

	prop_axis_items_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<prop_axis_items_enum>(string_to_prop_axis_items.at(resstr)))
	}

	void axis(prop_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", prop_axis_items_to_string.at(value))
	}
};

class SoundActuator : public Actuator {
public:
	SoundActuator(PyObject* pyobj) : Actuator(pyobj) {}
	SoundActuator() : Actuator(0) { }

	Sound sound();

	enum prop_type_items_enum {
		prop_type_items_PLAYSTOP = 0,	
		prop_type_items_PLAYEND = 1,	
		prop_type_items_LOOPSTOP = 2,	
		prop_type_items_LOOPEND = 3,	
		prop_type_items_LOOPBIDIRECTIONAL = 4,	
		prop_type_items_LOOPBIDIRECTIONALSTOP = 5	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"PLAYSTOP", prop_type_items_PLAYSTOP}, {"PLAYEND", prop_type_items_PLAYEND}, {"LOOPSTOP", prop_type_items_LOOPSTOP}, {"LOOPEND", prop_type_items_LOOPEND}, {"LOOPBIDIRECTIONAL", prop_type_items_LOOPBIDIRECTIONAL}, {"LOOPBIDIRECTIONALSTOP", prop_type_items_LOOPBIDIRECTIONALSTOP}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_PLAYSTOP, "PLAYSTOP"}, {prop_type_items_PLAYEND, "PLAYEND"}, {prop_type_items_LOOPSTOP, "LOOPSTOP"}, {prop_type_items_LOOPEND, "LOOPEND"}, {prop_type_items_LOOPBIDIRECTIONAL, "LOOPBIDIRECTIONAL"}, {prop_type_items_LOOPBIDIRECTIONALSTOP, "LOOPBIDIRECTIONALSTOP"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	float volume() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume")
	}

	void volume(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume", value)
	}

	float pitch() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pitch")
	}

	void pitch(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pitch", value)
	}

	float gain_3d_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gain_3d_min")
	}

	void gain_3d_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gain_3d_min", value)
	}

	float gain_3d_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gain_3d_max")
	}

	void gain_3d_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gain_3d_max", value)
	}

	float distance_3d_reference() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_3d_reference")
	}

	void distance_3d_reference(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_3d_reference", value)
	}

	float distance_3d_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_3d_max")
	}

	void distance_3d_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_3d_max", value)
	}

	float rolloff_factor_3d() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rolloff_factor_3d")
	}

	void rolloff_factor_3d(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rolloff_factor_3d", value)
	}

	float cone_outer_gain_3d() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cone_outer_gain_3d")
	}

	void cone_outer_gain_3d(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cone_outer_gain_3d", value)
	}

	float cone_outer_angle_3d() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cone_outer_angle_3d")
	}

	void cone_outer_angle_3d(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cone_outer_angle_3d", value)
	}

	float cone_inner_angle_3d() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cone_inner_angle_3d")
	}

	void cone_inner_angle_3d(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cone_inner_angle_3d", value)
	}

	bool use_sound_3d() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sound_3d")
	}

	void use_sound_3d(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sound_3d", value)
	}
};

class PropertyActuator : public Actuator {
public:
	PropertyActuator(PyObject* pyobj) : Actuator(pyobj) {}
	PropertyActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_ASSIGN = 0,	
		prop_type_items_ADD = 1,	
		prop_type_items_COPY = 2,	
		prop_type_items_TOGGLE = 3,	
		prop_type_items_LEVEL = 4	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"ASSIGN", prop_type_items_ASSIGN}, {"ADD", prop_type_items_ADD}, {"COPY", prop_type_items_COPY}, {"TOGGLE", prop_type_items_TOGGLE}, {"LEVEL", prop_type_items_LEVEL}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_ASSIGN, "ASSIGN"}, {prop_type_items_ADD, "ADD"}, {prop_type_items_COPY, "COPY"}, {prop_type_items_TOGGLE, "TOGGLE"}, {prop_type_items_LEVEL, "LEVEL"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	std::string value() {
		STRING_TYPE_GETTER("value", resstr)
	}

	void value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "value", value)
	}

	Object object_value();

	std::string object_property() {
		STRING_TYPE_GETTER("object_property", resstr)
	}

	void object_property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "object_property", value)
	}
};

class ConstraintActuator : public Actuator {
public:
	ConstraintActuator(PyObject* pyobj) : Actuator(pyobj) {}
	ConstraintActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_LOC = 0,	
		prop_type_items_DIST = 1,	
		prop_type_items_ORI = 2,	
		prop_type_items_FH = 3	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"LOC", prop_type_items_LOC}, {"DIST", prop_type_items_DIST}, {"ORI", prop_type_items_ORI}, {"FH", prop_type_items_FH}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_LOC, "LOC"}, {prop_type_items_DIST, "DIST"}, {prop_type_items_ORI, "ORI"}, {prop_type_items_FH, "FH"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	enum prop_limit_items_enum {
		prop_limit_items_NONE = 0,	
		prop_limit_items_LOCX = 1,	
		prop_limit_items_LOCY = 2,	
		prop_limit_items_LOCZ = 4	
	};

	std::map<std::string, int> create_string_to_prop_limit_items() {
		return {{"NONE", prop_limit_items_NONE}, {"LOCX", prop_limit_items_LOCX}, {"LOCY", prop_limit_items_LOCY}, {"LOCZ", prop_limit_items_LOCZ}};
	};

	std::map<int, std::string> create_prop_limit_items_to_string() {
		return {{prop_limit_items_NONE, "NONE"}, {prop_limit_items_LOCX, "LOCX"}, {prop_limit_items_LOCY, "LOCY"}, {prop_limit_items_LOCZ, "LOCZ"}};
	};

	const std::map<std::string, int> string_to_prop_limit_items = create_string_to_prop_limit_items();
	const std::map<int, std::string> prop_limit_items_to_string = create_prop_limit_items_to_string();

	prop_limit_items_enum limit() {
		STRING_TYPE_GETTER("limit", static_cast<prop_limit_items_enum>(string_to_prop_limit_items.at(resstr)))
	}

	void limit(prop_limit_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit", prop_limit_items_to_string.at(value))
	}

	enum prop_direction_items_enum {
		prop_direction_items_NONE = 0,	
		prop_direction_items_DIRPX = 1,	
		prop_direction_items_DIRPY = 2,	
		prop_direction_items_DIRPZ = 4,	
		prop_direction_items_DIRNX = 8,	
		prop_direction_items_DIRNY = 16,	
		prop_direction_items_DIRNZ = 32	
	};

	std::map<std::string, int> create_string_to_prop_direction_items() {
		return {{"NONE", prop_direction_items_NONE}, {"DIRPX", prop_direction_items_DIRPX}, {"DIRPY", prop_direction_items_DIRPY}, {"DIRPZ", prop_direction_items_DIRPZ}, {"DIRNX", prop_direction_items_DIRNX}, {"DIRNY", prop_direction_items_DIRNY}, {"DIRNZ", prop_direction_items_DIRNZ}};
	};

	std::map<int, std::string> create_prop_direction_items_to_string() {
		return {{prop_direction_items_NONE, "NONE"}, {prop_direction_items_DIRPX, "DIRPX"}, {prop_direction_items_DIRPY, "DIRPY"}, {prop_direction_items_DIRPZ, "DIRPZ"}, {prop_direction_items_DIRNX, "DIRNX"}, {prop_direction_items_DIRNY, "DIRNY"}, {prop_direction_items_DIRNZ, "DIRNZ"}};
	};

	const std::map<std::string, int> string_to_prop_direction_items = create_string_to_prop_direction_items();
	const std::map<int, std::string> prop_direction_items_to_string = create_prop_direction_items_to_string();

	prop_direction_items_enum direction() {
		STRING_TYPE_GETTER("direction", static_cast<prop_direction_items_enum>(string_to_prop_direction_items.at(resstr)))
	}

	void direction(prop_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "direction", prop_direction_items_to_string.at(value))
	}

	prop_direction_items_enum direction_axis() {
		STRING_TYPE_GETTER("direction_axis", static_cast<prop_direction_items_enum>(string_to_prop_direction_items.at(resstr)))
	}

	void direction_axis(prop_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "direction_axis", prop_direction_items_to_string.at(value))
	}

	float limit_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_min")
	}

	void limit_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_min", value)
	}

	float limit_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_max")
	}

	void limit_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_max", value)
	}

	int damping() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "damping")
	}

	void damping(int value) {
		PRIMITIVE_TYPES_SETTER("i", "damping", value)
	}

	float range() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range")
	}

	void range(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	std::string material() {
		STRING_TYPE_GETTER("material", resstr)
	}

	void material(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "material", value)
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	int time() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "time")
	}

	void time(int value) {
		PRIMITIVE_TYPES_SETTER("i", "time", value)
	}

	int damping_rotation() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "damping_rotation")
	}

	void damping_rotation(int value) {
		PRIMITIVE_TYPES_SETTER("i", "damping_rotation", value)
	}

	enum prop_direction_pos_items_enum {
		prop_direction_pos_items_NONE = 0,	
		prop_direction_pos_items_DIRPX = 1,	
		prop_direction_pos_items_DIRPY = 2,	
		prop_direction_pos_items_DIRPZ = 4	
	};

	std::map<std::string, int> create_string_to_prop_direction_pos_items() {
		return {{"NONE", prop_direction_pos_items_NONE}, {"DIRPX", prop_direction_pos_items_DIRPX}, {"DIRPY", prop_direction_pos_items_DIRPY}, {"DIRPZ", prop_direction_pos_items_DIRPZ}};
	};

	std::map<int, std::string> create_prop_direction_pos_items_to_string() {
		return {{prop_direction_pos_items_NONE, "NONE"}, {prop_direction_pos_items_DIRPX, "DIRPX"}, {prop_direction_pos_items_DIRPY, "DIRPY"}, {prop_direction_pos_items_DIRPZ, "DIRPZ"}};
	};

	const std::map<std::string, int> string_to_prop_direction_pos_items = create_string_to_prop_direction_pos_items();
	const std::map<int, std::string> prop_direction_pos_items_to_string = create_prop_direction_pos_items_to_string();

	prop_direction_pos_items_enum direction_axis_pos() {
		STRING_TYPE_GETTER("direction_axis_pos", static_cast<prop_direction_pos_items_enum>(string_to_prop_direction_pos_items.at(resstr)))
	}

	void direction_axis_pos(prop_direction_pos_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "direction_axis_pos", prop_direction_pos_items_to_string.at(value))
	}

	VFLOAT3 rotation_max() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation_max", 3)
	}

	void rotation_max(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_max", 3)
	}

	float angle_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_min")
	}

	void angle_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_min", value)
	}

	float angle_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_max")
	}

	void angle_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_max", value)
	}

	float fh_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fh_height")
	}

	void fh_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fh_height", value)
	}

	float fh_force() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fh_force")
	}

	void fh_force(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fh_force", value)
	}

	float fh_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fh_damping")
	}

	void fh_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fh_damping", value)
	}

	bool use_force_distance() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_force_distance")
	}

	void use_force_distance(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_force_distance", value)
	}

	bool use_local() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local")
	}

	void use_local(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local", value)
	}

	bool use_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal")
	}

	void use_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal", value)
	}

	bool use_persistent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_persistent")
	}

	void use_persistent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_persistent", value)
	}

	bool use_material_detect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_material_detect")
	}

	void use_material_detect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_material_detect", value)
	}

	bool use_fh_paralel_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fh_paralel_axis")
	}

	void use_fh_paralel_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fh_paralel_axis", value)
	}

	bool use_fh_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fh_normal")
	}

	void use_fh_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fh_normal", value)
	}
};

class EditObjectActuator : public Actuator {
public:
	EditObjectActuator(PyObject* pyobj) : Actuator(pyobj) {}
	EditObjectActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_ADDOBJECT = 0,	
		prop_type_items_ENDOBJECT = 1,	
		prop_type_items_REPLACEMESH = 2,	
		prop_type_items_TRACKTO = 3,	
		prop_type_items_DYNAMICS = 4	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"ADDOBJECT", prop_type_items_ADDOBJECT}, {"ENDOBJECT", prop_type_items_ENDOBJECT}, {"REPLACEMESH", prop_type_items_REPLACEMESH}, {"TRACKTO", prop_type_items_TRACKTO}, {"DYNAMICS", prop_type_items_DYNAMICS}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_ADDOBJECT, "ADDOBJECT"}, {prop_type_items_ENDOBJECT, "ENDOBJECT"}, {prop_type_items_REPLACEMESH, "REPLACEMESH"}, {prop_type_items_TRACKTO, "TRACKTO"}, {prop_type_items_DYNAMICS, "DYNAMICS"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	enum prop_dyn_items_enum {
		prop_dyn_items_RESTOREDYN = 0,	
		prop_dyn_items_SUSPENDDYN = 1,	
		prop_dyn_items_ENABLERIGIDBODY = 2,	
		prop_dyn_items_DISABLERIGIDBODY = 3,	
		prop_dyn_items_SETMASS = 4	
	};

	std::map<std::string, int> create_string_to_prop_dyn_items() {
		return {{"RESTOREDYN", prop_dyn_items_RESTOREDYN}, {"SUSPENDDYN", prop_dyn_items_SUSPENDDYN}, {"ENABLERIGIDBODY", prop_dyn_items_ENABLERIGIDBODY}, {"DISABLERIGIDBODY", prop_dyn_items_DISABLERIGIDBODY}, {"SETMASS", prop_dyn_items_SETMASS}};
	};

	std::map<int, std::string> create_prop_dyn_items_to_string() {
		return {{prop_dyn_items_RESTOREDYN, "RESTOREDYN"}, {prop_dyn_items_SUSPENDDYN, "SUSPENDDYN"}, {prop_dyn_items_ENABLERIGIDBODY, "ENABLERIGIDBODY"}, {prop_dyn_items_DISABLERIGIDBODY, "DISABLERIGIDBODY"}, {prop_dyn_items_SETMASS, "SETMASS"}};
	};

	const std::map<std::string, int> string_to_prop_dyn_items = create_string_to_prop_dyn_items();
	const std::map<int, std::string> prop_dyn_items_to_string = create_prop_dyn_items_to_string();

	prop_dyn_items_enum dynamic_operation() {
		STRING_TYPE_GETTER("dynamic_operation", static_cast<prop_dyn_items_enum>(string_to_prop_dyn_items.at(resstr)))
	}

	void dynamic_operation(prop_dyn_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "dynamic_operation", prop_dyn_items_to_string.at(value))
	}

	enum prop_up_axis_items_enum {
		prop_up_axis_items_UPAXISX = 0,	
		prop_up_axis_items_UPAXISY = 1,	
		prop_up_axis_items_UPAXISZ = 2	
	};

	std::map<std::string, int> create_string_to_prop_up_axis_items() {
		return {{"UPAXISX", prop_up_axis_items_UPAXISX}, {"UPAXISY", prop_up_axis_items_UPAXISY}, {"UPAXISZ", prop_up_axis_items_UPAXISZ}};
	};

	std::map<int, std::string> create_prop_up_axis_items_to_string() {
		return {{prop_up_axis_items_UPAXISX, "UPAXISX"}, {prop_up_axis_items_UPAXISY, "UPAXISY"}, {prop_up_axis_items_UPAXISZ, "UPAXISZ"}};
	};

	const std::map<std::string, int> string_to_prop_up_axis_items = create_string_to_prop_up_axis_items();
	const std::map<int, std::string> prop_up_axis_items_to_string = create_prop_up_axis_items_to_string();

	prop_up_axis_items_enum up_axis() {
		STRING_TYPE_GETTER("up_axis", static_cast<prop_up_axis_items_enum>(string_to_prop_up_axis_items.at(resstr)))
	}

	void up_axis(prop_up_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "up_axis", prop_up_axis_items_to_string.at(value))
	}

	enum prop_track_axis_items_enum {
		prop_track_axis_items_TRACKAXISX = 0,	
		prop_track_axis_items_TRACKAXISY = 1,	
		prop_track_axis_items_TRACKAXISZ = 2,	
		prop_track_axis_items_TRACKAXISNEGX = 3,	
		prop_track_axis_items_TRACKAXISNEGY = 4,	
		prop_track_axis_items_TRACKAXISNEGZ = 5	
	};

	std::map<std::string, int> create_string_to_prop_track_axis_items() {
		return {{"TRACKAXISX", prop_track_axis_items_TRACKAXISX}, {"TRACKAXISY", prop_track_axis_items_TRACKAXISY}, {"TRACKAXISZ", prop_track_axis_items_TRACKAXISZ}, {"TRACKAXISNEGX", prop_track_axis_items_TRACKAXISNEGX}, {"TRACKAXISNEGY", prop_track_axis_items_TRACKAXISNEGY}, {"TRACKAXISNEGZ", prop_track_axis_items_TRACKAXISNEGZ}};
	};

	std::map<int, std::string> create_prop_track_axis_items_to_string() {
		return {{prop_track_axis_items_TRACKAXISX, "TRACKAXISX"}, {prop_track_axis_items_TRACKAXISY, "TRACKAXISY"}, {prop_track_axis_items_TRACKAXISZ, "TRACKAXISZ"}, {prop_track_axis_items_TRACKAXISNEGX, "TRACKAXISNEGX"}, {prop_track_axis_items_TRACKAXISNEGY, "TRACKAXISNEGY"}, {prop_track_axis_items_TRACKAXISNEGZ, "TRACKAXISNEGZ"}};
	};

	const std::map<std::string, int> string_to_prop_track_axis_items = create_string_to_prop_track_axis_items();
	const std::map<int, std::string> prop_track_axis_items_to_string = create_prop_track_axis_items_to_string();

	prop_track_axis_items_enum track_axis() {
		STRING_TYPE_GETTER("track_axis", static_cast<prop_track_axis_items_enum>(string_to_prop_track_axis_items.at(resstr)))
	}

	void track_axis(prop_track_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "track_axis", prop_track_axis_items_to_string.at(value))
	}

	Object object_value();

	Object track_object();

	Mesh mesh();

	int time() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "time")
	}

	void time(int value) {
		PRIMITIVE_TYPES_SETTER("i", "time", value)
	}

	float mass() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mass")
	}

	void mass(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mass", value)
	}

	VFLOAT3 linear_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "linear_velocity", 3)
	}

	void linear_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "linear_velocity", 3)
	}

	VFLOAT3 angular_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "angular_velocity", 3)
	}

	void angular_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "angular_velocity", 3)
	}

	bool use_local_linear_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_linear_velocity")
	}

	void use_local_linear_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_linear_velocity", value)
	}

	bool use_local_angular_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_angular_velocity")
	}

	void use_local_angular_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_angular_velocity", value)
	}

	bool use_replace_display_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_replace_display_mesh")
	}

	void use_replace_display_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_replace_display_mesh", value)
	}

	bool use_replace_physics_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_replace_physics_mesh")
	}

	void use_replace_physics_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_replace_physics_mesh", value)
	}

	bool use_3d_tracking() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_3d_tracking")
	}

	void use_3d_tracking(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_3d_tracking", value)
	}
};

class SceneActuator : public Actuator {
public:
	SceneActuator(PyObject* pyobj) : Actuator(pyobj) {}
	SceneActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_RESTART = 0,	
		prop_type_items_SET = 1,	
		prop_type_items_CAMERA = 2,	
		prop_type_items_ADDFRONT = 3,	
		prop_type_items_ADDBACK = 4,	
		prop_type_items_REMOVE = 5,	
		prop_type_items_SUSPEND = 6,	
		prop_type_items_RESUME = 7	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"RESTART", prop_type_items_RESTART}, {"SET", prop_type_items_SET}, {"CAMERA", prop_type_items_CAMERA}, {"ADDFRONT", prop_type_items_ADDFRONT}, {"ADDBACK", prop_type_items_ADDBACK}, {"REMOVE", prop_type_items_REMOVE}, {"SUSPEND", prop_type_items_SUSPEND}, {"RESUME", prop_type_items_RESUME}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_RESTART, "RESTART"}, {prop_type_items_SET, "SET"}, {prop_type_items_CAMERA, "CAMERA"}, {prop_type_items_ADDFRONT, "ADDFRONT"}, {prop_type_items_ADDBACK, "ADDBACK"}, {prop_type_items_REMOVE, "REMOVE"}, {prop_type_items_SUSPEND, "SUSPEND"}, {prop_type_items_RESUME, "RESUME"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	Object camera();

	Scene scene();
};

class RandomActuator : public Actuator {
public:
	RandomActuator(PyObject* pyobj) : Actuator(pyobj) {}
	RandomActuator() : Actuator(0) { }

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	enum prop_distribution_items_enum {
		prop_distribution_items_BOOL_CONSTANT = 0,	
		prop_distribution_items_BOOL_UNIFORM = 1,	
		prop_distribution_items_BOOL_BERNOUILLI = 2,	
		prop_distribution_items_INT_CONSTANT = 3,	
		prop_distribution_items_INT_UNIFORM = 4,	
		prop_distribution_items_INT_POISSON = 5,	
		prop_distribution_items_FLOAT_CONSTANT = 6,	
		prop_distribution_items_FLOAT_UNIFORM = 7,	
		prop_distribution_items_FLOAT_NORMAL = 8,	
		prop_distribution_items_FLOAT_NEGATIVE_EXPONENTIAL = 9	
	};

	std::map<std::string, int> create_string_to_prop_distribution_items() {
		return {{"BOOL_CONSTANT", prop_distribution_items_BOOL_CONSTANT}, {"BOOL_UNIFORM", prop_distribution_items_BOOL_UNIFORM}, {"BOOL_BERNOUILLI", prop_distribution_items_BOOL_BERNOUILLI}, {"INT_CONSTANT", prop_distribution_items_INT_CONSTANT}, {"INT_UNIFORM", prop_distribution_items_INT_UNIFORM}, {"INT_POISSON", prop_distribution_items_INT_POISSON}, {"FLOAT_CONSTANT", prop_distribution_items_FLOAT_CONSTANT}, {"FLOAT_UNIFORM", prop_distribution_items_FLOAT_UNIFORM}, {"FLOAT_NORMAL", prop_distribution_items_FLOAT_NORMAL}, {"FLOAT_NEGATIVE_EXPONENTIAL", prop_distribution_items_FLOAT_NEGATIVE_EXPONENTIAL}};
	};

	std::map<int, std::string> create_prop_distribution_items_to_string() {
		return {{prop_distribution_items_BOOL_CONSTANT, "BOOL_CONSTANT"}, {prop_distribution_items_BOOL_UNIFORM, "BOOL_UNIFORM"}, {prop_distribution_items_BOOL_BERNOUILLI, "BOOL_BERNOUILLI"}, {prop_distribution_items_INT_CONSTANT, "INT_CONSTANT"}, {prop_distribution_items_INT_UNIFORM, "INT_UNIFORM"}, {prop_distribution_items_INT_POISSON, "INT_POISSON"}, {prop_distribution_items_FLOAT_CONSTANT, "FLOAT_CONSTANT"}, {prop_distribution_items_FLOAT_UNIFORM, "FLOAT_UNIFORM"}, {prop_distribution_items_FLOAT_NORMAL, "FLOAT_NORMAL"}, {prop_distribution_items_FLOAT_NEGATIVE_EXPONENTIAL, "FLOAT_NEGATIVE_EXPONENTIAL"}};
	};

	const std::map<std::string, int> string_to_prop_distribution_items = create_string_to_prop_distribution_items();
	const std::map<int, std::string> prop_distribution_items_to_string = create_prop_distribution_items_to_string();

	prop_distribution_items_enum distribution() {
		STRING_TYPE_GETTER("distribution", static_cast<prop_distribution_items_enum>(string_to_prop_distribution_items.at(resstr)))
	}

	void distribution(prop_distribution_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distribution", prop_distribution_items_to_string.at(value))
	}

	bool use_always_true() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_always_true")
	}

	void use_always_true(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_always_true", value)
	}

	float chance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "chance")
	}

	void chance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "chance", value)
	}

	int int_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "int_value")
	}

	void int_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "int_value", value)
	}

	int int_min() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "int_min")
	}

	void int_min(int value) {
		PRIMITIVE_TYPES_SETTER("i", "int_min", value)
	}

	int int_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "int_max")
	}

	void int_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "int_max", value)
	}

	float int_mean() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "int_mean")
	}

	void int_mean(float value) {
		PRIMITIVE_TYPES_SETTER("f", "int_mean", value)
	}

	float float_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "float_value")
	}

	void float_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "float_value", value)
	}

	float float_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "float_min")
	}

	void float_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "float_min", value)
	}

	float float_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "float_max")
	}

	void float_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "float_max", value)
	}

	float float_mean() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "float_mean")
	}

	void float_mean(float value) {
		PRIMITIVE_TYPES_SETTER("f", "float_mean", value)
	}

	float standard_derivation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "standard_derivation")
	}

	void standard_derivation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "standard_derivation", value)
	}

	float half_life_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "half_life_time")
	}

	void half_life_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "half_life_time", value)
	}
};

class MessageActuator : public Actuator {
public:
	MessageActuator(PyObject* pyobj) : Actuator(pyobj) {}
	MessageActuator() : Actuator(0) { }

	std::string to_property() {
		STRING_TYPE_GETTER("to_property", resstr)
	}

	void to_property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "to_property", value)
	}

	std::string subject() {
		STRING_TYPE_GETTER("subject", resstr)
	}

	void subject(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subject", value)
	}

	enum prop_body_type_items_enum {
		prop_body_type_items_TEXT = 0,	
		prop_body_type_items_PROPERTY = 1	
	};

	std::map<std::string, int> create_string_to_prop_body_type_items() {
		return {{"TEXT", prop_body_type_items_TEXT}, {"PROPERTY", prop_body_type_items_PROPERTY}};
	};

	std::map<int, std::string> create_prop_body_type_items_to_string() {
		return {{prop_body_type_items_TEXT, "TEXT"}, {prop_body_type_items_PROPERTY, "PROPERTY"}};
	};

	const std::map<std::string, int> string_to_prop_body_type_items = create_string_to_prop_body_type_items();
	const std::map<int, std::string> prop_body_type_items_to_string = create_prop_body_type_items_to_string();

	prop_body_type_items_enum body_type() {
		STRING_TYPE_GETTER("body_type", static_cast<prop_body_type_items_enum>(string_to_prop_body_type_items.at(resstr)))
	}

	void body_type(prop_body_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "body_type", prop_body_type_items_to_string.at(value))
	}

	std::string body_message() {
		STRING_TYPE_GETTER("body_message", resstr)
	}

	void body_message(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "body_message", value)
	}

	std::string body_property() {
		STRING_TYPE_GETTER("body_property", resstr)
	}

	void body_property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "body_property", value)
	}
};

class GameActuator : public Actuator {
public:
	GameActuator(PyObject* pyobj) : Actuator(pyobj) {}
	GameActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_START = 0,	
		prop_type_items_RESTART = 2,	
		prop_type_items_QUIT = 3,	
		prop_type_items_SAVECFG = 4,	
		prop_type_items_LOADCFG = 5	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"START", prop_type_items_START}, {"RESTART", prop_type_items_RESTART}, {"QUIT", prop_type_items_QUIT}, {"SAVECFG", prop_type_items_SAVECFG}, {"LOADCFG", prop_type_items_LOADCFG}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_START, "START"}, {prop_type_items_RESTART, "RESTART"}, {prop_type_items_QUIT, "QUIT"}, {prop_type_items_SAVECFG, "SAVECFG"}, {prop_type_items_LOADCFG, "LOADCFG"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	std::string filename() {
		STRING_TYPE_GETTER("filename", resstr)
	}

	void filename(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filename", value)
	}
};

class VisibilityActuator : public Actuator {
public:
	VisibilityActuator(PyObject* pyobj) : Actuator(pyobj) {}
	VisibilityActuator() : Actuator(0) { }

	bool use_visible() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_visible")
	}

	void use_visible(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_visible", value)
	}

	bool use_occlusion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_occlusion")
	}

	void use_occlusion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_occlusion", value)
	}

	bool apply_to_children() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "apply_to_children")
	}

	void apply_to_children(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "apply_to_children", value)
	}
};

class Filter2DActuator : public Actuator {
public:
	Filter2DActuator(PyObject* pyobj) : Actuator(pyobj) {}
	Filter2DActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_ENABLE = -2,	
		prop_type_items_DISABLE = -1,	
		prop_type_items_REMOVE = 0,	
		prop_type_items_MOTIONBLUR = 1,	
		prop_type_items_BLUR = 2,	
		prop_type_items_SHARPEN = 3,	
		prop_type_items_DILATION = 4,	
		prop_type_items_EROSION = 5,	
		prop_type_items_LAPLACIAN = 6,	
		prop_type_items_SOBEL = 7,	
		prop_type_items_PREWITT = 8,	
		prop_type_items_GRAYSCALE = 9,	
		prop_type_items_SEPIA = 10,	
		prop_type_items_INVERT = 11,	
		prop_type_items_CUSTOMFILTER = 12	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"ENABLE", prop_type_items_ENABLE}, {"DISABLE", prop_type_items_DISABLE}, {"REMOVE", prop_type_items_REMOVE}, {"MOTIONBLUR", prop_type_items_MOTIONBLUR}, {"BLUR", prop_type_items_BLUR}, {"SHARPEN", prop_type_items_SHARPEN}, {"DILATION", prop_type_items_DILATION}, {"EROSION", prop_type_items_EROSION}, {"LAPLACIAN", prop_type_items_LAPLACIAN}, {"SOBEL", prop_type_items_SOBEL}, {"PREWITT", prop_type_items_PREWITT}, {"GRAYSCALE", prop_type_items_GRAYSCALE}, {"SEPIA", prop_type_items_SEPIA}, {"INVERT", prop_type_items_INVERT}, {"CUSTOMFILTER", prop_type_items_CUSTOMFILTER}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_ENABLE, "ENABLE"}, {prop_type_items_DISABLE, "DISABLE"}, {prop_type_items_REMOVE, "REMOVE"}, {prop_type_items_MOTIONBLUR, "MOTIONBLUR"}, {prop_type_items_BLUR, "BLUR"}, {prop_type_items_SHARPEN, "SHARPEN"}, {prop_type_items_DILATION, "DILATION"}, {prop_type_items_EROSION, "EROSION"}, {prop_type_items_LAPLACIAN, "LAPLACIAN"}, {prop_type_items_SOBEL, "SOBEL"}, {prop_type_items_PREWITT, "PREWITT"}, {prop_type_items_GRAYSCALE, "GRAYSCALE"}, {prop_type_items_SEPIA, "SEPIA"}, {prop_type_items_INVERT, "INVERT"}, {prop_type_items_CUSTOMFILTER, "CUSTOMFILTER"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	Text glsl_shader();

	int filter_pass() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "filter_pass")
	}

	void filter_pass(int value) {
		PRIMITIVE_TYPES_SETTER("i", "filter_pass", value)
	}

	float motion_blur_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motion_blur_factor")
	}

	void motion_blur_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motion_blur_factor", value)
	}

	bool use_motion_blur() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_motion_blur")
	}

	void use_motion_blur(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_motion_blur", value)
	}
};

class ParentActuator : public Actuator {
public:
	ParentActuator(PyObject* pyobj) : Actuator(pyobj) {}
	ParentActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_SETPARENT = 0,	
		prop_type_items_REMOVEPARENT = 1	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"SETPARENT", prop_type_items_SETPARENT}, {"REMOVEPARENT", prop_type_items_REMOVEPARENT}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_SETPARENT, "SETPARENT"}, {prop_type_items_REMOVEPARENT, "REMOVEPARENT"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	Object object_value();

	bool use_compound() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_compound")
	}

	void use_compound(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_compound", value)
	}

	bool use_ghost() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ghost")
	}

	void use_ghost(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ghost", value)
	}
};

class StateActuator : public Actuator {
public:
	StateActuator(PyObject* pyobj) : Actuator(pyobj) {}
	StateActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_SET = 0,	
		prop_type_items_ADD = 1,	
		prop_type_items_REMOVE = 2,	
		prop_type_items_CHANGE = 3	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"SET", prop_type_items_SET}, {"ADD", prop_type_items_ADD}, {"REMOVE", prop_type_items_REMOVE}, {"CHANGE", prop_type_items_CHANGE}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_SET, "SET"}, {prop_type_items_ADD, "ADD"}, {prop_type_items_REMOVE, "REMOVE"}, {prop_type_items_CHANGE, "CHANGE"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum operation() {
		STRING_TYPE_GETTER("operation", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void operation(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "operation", prop_type_items_to_string.at(value))
	}

	std::array<bool, 30> states() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "states", 30)
	}

	void states(bool values[30]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "states", 30)
	}
};

class ArmatureActuator : public Actuator {
public:
	ArmatureActuator(PyObject* pyobj) : Actuator(pyobj) {}
	ArmatureActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_RUN = 0,	
		prop_type_items_ENABLE = 1,	
		prop_type_items_DISABLE = 2,	
		prop_type_items_SETTARGET = 3,	
		prop_type_items_SETWEIGHT = 4,	
		prop_type_items_SETINFLUENCE = 5	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"RUN", prop_type_items_RUN}, {"ENABLE", prop_type_items_ENABLE}, {"DISABLE", prop_type_items_DISABLE}, {"SETTARGET", prop_type_items_SETTARGET}, {"SETWEIGHT", prop_type_items_SETWEIGHT}, {"SETINFLUENCE", prop_type_items_SETINFLUENCE}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_RUN, "RUN"}, {prop_type_items_ENABLE, "ENABLE"}, {prop_type_items_DISABLE, "DISABLE"}, {prop_type_items_SETTARGET, "SETTARGET"}, {prop_type_items_SETWEIGHT, "SETWEIGHT"}, {prop_type_items_SETINFLUENCE, "SETINFLUENCE"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	std::string bone() {
		STRING_TYPE_GETTER("bone", resstr)
	}

	void bone(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bone", value)
	}

	std::string constraint() {
		STRING_TYPE_GETTER("constraint", resstr)
	}

	void constraint(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "constraint", value)
	}

	Object target();

	Object secondary_target();

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}
};

class SteeringActuator : public Actuator {
public:
	SteeringActuator(PyObject* pyobj) : Actuator(pyobj) {}
	SteeringActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_SEEK = 0,	
		prop_type_items_FLEE = 1,	
		prop_type_items_PATHFOLLOWING = 2	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"SEEK", prop_type_items_SEEK}, {"FLEE", prop_type_items_FLEE}, {"PATHFOLLOWING", prop_type_items_PATHFOLLOWING}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_SEEK, "SEEK"}, {prop_type_items_FLEE, "FLEE"}, {prop_type_items_PATHFOLLOWING, "PATHFOLLOWING"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	float velocity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity")
	}

	void velocity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity", value)
	}

	float acceleration() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "acceleration")
	}

	void acceleration(float value) {
		PRIMITIVE_TYPES_SETTER("f", "acceleration", value)
	}

	float turn_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turn_speed")
	}

	void turn_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turn_speed", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	Object target();

	bool self_terminated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "self_terminated")
	}

	void self_terminated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "self_terminated", value)
	}

	bool show_visualization() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_visualization")
	}

	void show_visualization(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_visualization", value)
	}

	int update_period() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "update_period")
	}

	void update_period(int value) {
		PRIMITIVE_TYPES_SETTER("i", "update_period", value)
	}

	Object navmesh();

	bool facing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "facing")
	}

	void facing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "facing", value)
	}

	enum facingaxis_items_enum {
		facingaxis_items_X = 1,	
		facingaxis_items_Y = 2,	
		facingaxis_items_Z = 3,	
		facingaxis_items_NEG_X = 4,	
		facingaxis_items_NEG_Y = 5,	
		facingaxis_items_NEG_Z = 6	
	};

	std::map<std::string, int> create_string_to_facingaxis_items() {
		return {{"X", facingaxis_items_X}, {"Y", facingaxis_items_Y}, {"Z", facingaxis_items_Z}, {"NEG_X", facingaxis_items_NEG_X}, {"NEG_Y", facingaxis_items_NEG_Y}, {"NEG_Z", facingaxis_items_NEG_Z}};
	};

	std::map<int, std::string> create_facingaxis_items_to_string() {
		return {{facingaxis_items_X, "X"}, {facingaxis_items_Y, "Y"}, {facingaxis_items_Z, "Z"}, {facingaxis_items_NEG_X, "NEG_X"}, {facingaxis_items_NEG_Y, "NEG_Y"}, {facingaxis_items_NEG_Z, "NEG_Z"}};
	};

	const std::map<std::string, int> string_to_facingaxis_items = create_string_to_facingaxis_items();
	const std::map<int, std::string> facingaxis_items_to_string = create_facingaxis_items_to_string();

	facingaxis_items_enum facing_axis() {
		STRING_TYPE_GETTER("facing_axis", static_cast<facingaxis_items_enum>(string_to_facingaxis_items.at(resstr)))
	}

	void facing_axis(facingaxis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "facing_axis", facingaxis_items_to_string.at(value))
	}

	bool normal_up() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "normal_up")
	}

	void normal_up(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "normal_up", value)
	}

	bool lock_z_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_z_velocity")
	}

	void lock_z_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_z_velocity", value)
	}
};

class MouseActuator : public Actuator {
public:
	MouseActuator(PyObject* pyobj) : Actuator(pyobj) {}
	MouseActuator() : Actuator(0) { }

	enum prop_type_items_enum {
		prop_type_items_VISIBILITY = 0,	
		prop_type_items_LOOK = 1	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"VISIBILITY", prop_type_items_VISIBILITY}, {"LOOK", prop_type_items_LOOK}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_VISIBILITY, "VISIBILITY"}, {prop_type_items_LOOK, "LOOK"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_type_items_to_string.at(value))
	}

	bool visible() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "visible")
	}

	void visible(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "visible", value)
	}

	bool use_axis_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_axis_x")
	}

	void use_axis_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_axis_x", value)
	}

	bool use_axis_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_axis_y")
	}

	void use_axis_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_axis_y", value)
	}

	bool reset_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "reset_x")
	}

	void reset_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "reset_x", value)
	}

	bool reset_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "reset_y")
	}

	void reset_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "reset_y", value)
	}

	bool local_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "local_x")
	}

	void local_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "local_x", value)
	}

	bool local_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "local_y")
	}

	void local_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "local_y", value)
	}

	float threshold_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold_x")
	}

	void threshold_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold_x", value)
	}

	float threshold_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold_y")
	}

	void threshold_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold_y", value)
	}

	enum prop_object_axis_items_enum {
		prop_object_axis_items_OBJECT_AXIS_X = 0,	
		prop_object_axis_items_OBJECT_AXIS_Y = 1,	
		prop_object_axis_items_OBJECT_AXIS_Z = 2	
	};

	std::map<std::string, int> create_string_to_prop_object_axis_items() {
		return {{"OBJECT_AXIS_X", prop_object_axis_items_OBJECT_AXIS_X}, {"OBJECT_AXIS_Y", prop_object_axis_items_OBJECT_AXIS_Y}, {"OBJECT_AXIS_Z", prop_object_axis_items_OBJECT_AXIS_Z}};
	};

	std::map<int, std::string> create_prop_object_axis_items_to_string() {
		return {{prop_object_axis_items_OBJECT_AXIS_X, "OBJECT_AXIS_X"}, {prop_object_axis_items_OBJECT_AXIS_Y, "OBJECT_AXIS_Y"}, {prop_object_axis_items_OBJECT_AXIS_Z, "OBJECT_AXIS_Z"}};
	};

	const std::map<std::string, int> string_to_prop_object_axis_items = create_string_to_prop_object_axis_items();
	const std::map<int, std::string> prop_object_axis_items_to_string = create_prop_object_axis_items_to_string();

	prop_object_axis_items_enum object_axis_x() {
		STRING_TYPE_GETTER("object_axis_x", static_cast<prop_object_axis_items_enum>(string_to_prop_object_axis_items.at(resstr)))
	}

	void object_axis_x(prop_object_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "object_axis_x", prop_object_axis_items_to_string.at(value))
	}

	prop_object_axis_items_enum object_axis_y() {
		STRING_TYPE_GETTER("object_axis_y", static_cast<prop_object_axis_items_enum>(string_to_prop_object_axis_items.at(resstr)))
	}

	void object_axis_y(prop_object_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "object_axis_y", prop_object_axis_items_to_string.at(value))
	}

	float sensitivity_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sensitivity_x")
	}

	void sensitivity_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sensitivity_x", value)
	}

	float sensitivity_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sensitivity_y")
	}

	void sensitivity_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sensitivity_y", value)
	}

	float min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_x")
	}

	void min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_x", value)
	}

	float max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_x")
	}

	void max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_x", value)
	}

	float min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_y")
	}

	void min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_y", value)
	}

	float max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_y")
	}

	void max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_y", value)
	}
};

class Armature : public ID {
public:
	Armature(PyObject* pyobj) : ID(pyobj) {}
	Armature() : ID(0) { }

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	std::map<std::string, Bone> bones();

	std::map<std::string, EditBone> edit_bones();

	enum prop_pose_position_items_enum {
		prop_pose_position_items_POSE = 0,	
		prop_pose_position_items_REST = 1	
	};

	std::map<std::string, int> create_string_to_prop_pose_position_items() {
		return {{"POSE", prop_pose_position_items_POSE}, {"REST", prop_pose_position_items_REST}};
	};

	std::map<int, std::string> create_prop_pose_position_items_to_string() {
		return {{prop_pose_position_items_POSE, "POSE"}, {prop_pose_position_items_REST, "REST"}};
	};

	const std::map<std::string, int> string_to_prop_pose_position_items = create_string_to_prop_pose_position_items();
	const std::map<int, std::string> prop_pose_position_items_to_string = create_prop_pose_position_items_to_string();

	prop_pose_position_items_enum pose_position() {
		STRING_TYPE_GETTER("pose_position", static_cast<prop_pose_position_items_enum>(string_to_prop_pose_position_items.at(resstr)))
	}

	void pose_position(prop_pose_position_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pose_position", prop_pose_position_items_to_string.at(value))
	}

	enum prop_drawtype_items_enum {
		prop_drawtype_items_OCTAHEDRAL = 0,	
		prop_drawtype_items_STICK = 1,	
		prop_drawtype_items_BBONE = 2,	
		prop_drawtype_items_ENVELOPE = 3,	
		prop_drawtype_items_WIRE = 4	
	};

	std::map<std::string, int> create_string_to_prop_drawtype_items() {
		return {{"OCTAHEDRAL", prop_drawtype_items_OCTAHEDRAL}, {"STICK", prop_drawtype_items_STICK}, {"BBONE", prop_drawtype_items_BBONE}, {"ENVELOPE", prop_drawtype_items_ENVELOPE}, {"WIRE", prop_drawtype_items_WIRE}};
	};

	std::map<int, std::string> create_prop_drawtype_items_to_string() {
		return {{prop_drawtype_items_OCTAHEDRAL, "OCTAHEDRAL"}, {prop_drawtype_items_STICK, "STICK"}, {prop_drawtype_items_BBONE, "BBONE"}, {prop_drawtype_items_ENVELOPE, "ENVELOPE"}, {prop_drawtype_items_WIRE, "WIRE"}};
	};

	const std::map<std::string, int> string_to_prop_drawtype_items = create_string_to_prop_drawtype_items();
	const std::map<int, std::string> prop_drawtype_items_to_string = create_prop_drawtype_items_to_string();

	prop_drawtype_items_enum draw_type() {
		STRING_TYPE_GETTER("draw_type", static_cast<prop_drawtype_items_enum>(string_to_prop_drawtype_items.at(resstr)))
	}

	void draw_type(prop_drawtype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_type", prop_drawtype_items_to_string.at(value))
	}

	enum prop_vdeformer_enum {
		prop_vdeformer_BLENDER = 0,	
		prop_vdeformer_BGE_CPU = 1	
	};

	std::map<std::string, int> create_string_to_prop_vdeformer() {
		return {{"BLENDER", prop_vdeformer_BLENDER}, {"BGE_CPU", prop_vdeformer_BGE_CPU}};
	};

	std::map<int, std::string> create_prop_vdeformer_to_string() {
		return {{prop_vdeformer_BLENDER, "BLENDER"}, {prop_vdeformer_BGE_CPU, "BGE_CPU"}};
	};

	const std::map<std::string, int> string_to_prop_vdeformer = create_string_to_prop_vdeformer();
	const std::map<int, std::string> prop_vdeformer_to_string = create_prop_vdeformer_to_string();

	prop_vdeformer_enum deform_method() {
		STRING_TYPE_GETTER("deform_method", static_cast<prop_vdeformer_enum>(string_to_prop_vdeformer.at(resstr)))
	}

	void deform_method(prop_vdeformer_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "deform_method", prop_vdeformer_to_string.at(value))
	}

	enum prop_ghost_type_items_enum {
		prop_ghost_type_items_CURRENT_FRAME = 0,	
		prop_ghost_type_items_RANGE = 1,	
		prop_ghost_type_items_KEYS = 2	
	};

	std::map<std::string, int> create_string_to_prop_ghost_type_items() {
		return {{"CURRENT_FRAME", prop_ghost_type_items_CURRENT_FRAME}, {"RANGE", prop_ghost_type_items_RANGE}, {"KEYS", prop_ghost_type_items_KEYS}};
	};

	std::map<int, std::string> create_prop_ghost_type_items_to_string() {
		return {{prop_ghost_type_items_CURRENT_FRAME, "CURRENT_FRAME"}, {prop_ghost_type_items_RANGE, "RANGE"}, {prop_ghost_type_items_KEYS, "KEYS"}};
	};

	const std::map<std::string, int> string_to_prop_ghost_type_items = create_string_to_prop_ghost_type_items();
	const std::map<int, std::string> prop_ghost_type_items_to_string = create_prop_ghost_type_items_to_string();

	prop_ghost_type_items_enum ghost_type() {
		STRING_TYPE_GETTER("ghost_type", static_cast<prop_ghost_type_items_enum>(string_to_prop_ghost_type_items.at(resstr)))
	}

	void ghost_type(prop_ghost_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ghost_type", prop_ghost_type_items_to_string.at(value))
	}

	std::array<bool, 32> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 32)
	}

	void layers(bool values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 32)
	}

	std::array<bool, 32> layers_protected() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_protected", 32)
	}

	void layers_protected(bool values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_protected", 32)
	}

	bool show_axes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_axes")
	}

	void show_axes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_axes", value)
	}

	bool show_names() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_names")
	}

	void show_names(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_names", value)
	}

	bool use_deform_delay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deform_delay")
	}

	void use_deform_delay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deform_delay", value)
	}

	bool use_mirror_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_x")
	}

	void use_mirror_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_x", value)
	}

	bool use_auto_ik() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_ik")
	}

	void use_auto_ik(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_ik", value)
	}

	bool show_bone_custom_shapes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_bone_custom_shapes")
	}

	void show_bone_custom_shapes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_bone_custom_shapes", value)
	}

	bool show_group_colors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_group_colors")
	}

	void show_group_colors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_group_colors", value)
	}

	bool show_only_ghost_selected() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_ghost_selected")
	}

	void show_only_ghost_selected(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_ghost_selected", value)
	}

	int ghost_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "ghost_step")
	}

	void ghost_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "ghost_step", value)
	}

	int ghost_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "ghost_size")
	}

	void ghost_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "ghost_size", value)
	}

	int ghost_frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "ghost_frame_start")
	}

	void ghost_frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "ghost_frame_start", value)
	}

	int ghost_frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "ghost_frame_end")
	}

	void ghost_frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "ghost_frame_end", value)
	}

	bool is_editmode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_editmode")
	}

	void is_editmode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_editmode", value)
	}

	void transform(VFLOAT16 matrix) {
		ARRAY_TO_PYOBJ(matrix, "O", 16)
		PYTHON_FUNCTION_ARGS_CALL("transform", "O", matrix_tupleval)
		DECREF_ARRAY_ITEMS(matrix, 16)
	}
};

class Bone : public pyUniplug {
public:
	Bone(PyObject* pyobj) : pyUniplug(pyobj) {}
	Bone() : pyUniplug(0) { }

	Bone parent() {
		CLASS_TYPES_GETTER(Bone, "parent")
	}

	std::map<std::string, Bone> children() {
		MAP_TYPE_GETTER("children", Bone)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::array<bool, 32> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 32)
	}

	void layers(bool values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 32)
	}

	bool use_connect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_connect")
	}

	void use_connect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_connect", value)
	}

	bool use_inherit_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_inherit_rotation")
	}

	void use_inherit_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_inherit_rotation", value)
	}

	bool use_envelope_multiply() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_envelope_multiply")
	}

	void use_envelope_multiply(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_envelope_multiply", value)
	}

	bool use_deform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deform")
	}

	void use_deform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deform", value)
	}

	bool use_inherit_scale() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_inherit_scale")
	}

	void use_inherit_scale(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_inherit_scale", value)
	}

	bool use_local_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_location")
	}

	void use_local_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_location", value)
	}

	bool use_relative_parent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative_parent")
	}

	void use_relative_parent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative_parent", value)
	}

	bool show_wire() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_wire")
	}

	void show_wire(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_wire", value)
	}

	bool use_cyclic_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic_offset")
	}

	void use_cyclic_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic_offset", value)
	}

	bool hide_select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_select")
	}

	void hide_select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_select", value)
	}

	float envelope_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "envelope_distance")
	}

	void envelope_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "envelope_distance", value)
	}

	float envelope_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "envelope_weight")
	}

	void envelope_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "envelope_weight", value)
	}

	float head_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_radius")
	}

	void head_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_radius", value)
	}

	float tail_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tail_radius")
	}

	void tail_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tail_radius", value)
	}

	int bbone_segments() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bbone_segments")
	}

	void bbone_segments(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bbone_segments", value)
	}

	float bbone_in() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_in")
	}

	void bbone_in(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_in", value)
	}

	float bbone_out() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_out")
	}

	void bbone_out(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_out", value)
	}

	float bbone_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_x")
	}

	void bbone_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_x", value)
	}

	float bbone_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_z")
	}

	void bbone_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_z", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool select_head() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_head")
	}

	void select_head(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_head", value)
	}

	bool select_tail() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_tail")
	}

	void select_tail(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_tail", value)
	}

	std::array<float, 9> matrix() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "matrix", 9)
	}

	void matrix(float values[9]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix", 9)
	}

	VFLOAT16 matrix_local() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix_local", 16)
	}

	void matrix_local(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix_local", 16)
	}

	VFLOAT3 tail() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tail", 3)
	}

	void tail(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tail", 3)
	}

	VFLOAT3 tail_local() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tail_local", 3)
	}

	void tail_local(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tail_local", 3)
	}

	VFLOAT3 head() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "head", 3)
	}

	void head(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "head", 3)
	}

	VFLOAT3 head_local() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "head_local", 3)
	}

	void head_local(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "head_local", 3)
	}

	float evaluate_envelope(VFLOAT3 point) {
		ARRAY_TO_PYOBJ(point, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("evaluate_envelope", "O", point_tupleval)
		DECREF_ARRAY_ITEMS(point, 3)
		CREATE_SINGLE_PYOBJ(factor)
		PRIMITIVE_TYPES_CONV(factor, float, (float)PyFloat_AsDouble(factor_obj))
		NONCLASS_TYPES_RETURN(factor_res)
	}
};

class EditBone : public pyUniplug {
public:
	EditBone(PyObject* pyobj) : pyUniplug(pyobj) {}
	EditBone() : pyUniplug(0) { }

	EditBone parent() {
		CLASS_TYPES_GETTER(EditBone, "parent")
	}

	float roll() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roll")
	}

	void roll(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roll", value)
	}

	VFLOAT3 head() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "head", 3)
	}

	void head(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "head", 3)
	}

	VFLOAT3 tail() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tail", 3)
	}

	void tail(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tail", 3)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::array<bool, 32> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 32)
	}

	void layers(bool values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 32)
	}

	bool use_connect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_connect")
	}

	void use_connect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_connect", value)
	}

	bool use_inherit_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_inherit_rotation")
	}

	void use_inherit_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_inherit_rotation", value)
	}

	bool use_envelope_multiply() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_envelope_multiply")
	}

	void use_envelope_multiply(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_envelope_multiply", value)
	}

	bool use_deform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deform")
	}

	void use_deform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deform", value)
	}

	bool use_inherit_scale() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_inherit_scale")
	}

	void use_inherit_scale(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_inherit_scale", value)
	}

	bool use_local_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_location")
	}

	void use_local_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_location", value)
	}

	bool use_relative_parent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative_parent")
	}

	void use_relative_parent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative_parent", value)
	}

	bool show_wire() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_wire")
	}

	void show_wire(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_wire", value)
	}

	bool use_cyclic_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic_offset")
	}

	void use_cyclic_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic_offset", value)
	}

	bool hide_select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_select")
	}

	void hide_select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_select", value)
	}

	float envelope_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "envelope_distance")
	}

	void envelope_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "envelope_distance", value)
	}

	float envelope_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "envelope_weight")
	}

	void envelope_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "envelope_weight", value)
	}

	float head_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_radius")
	}

	void head_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_radius", value)
	}

	float tail_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tail_radius")
	}

	void tail_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tail_radius", value)
	}

	int bbone_segments() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bbone_segments")
	}

	void bbone_segments(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bbone_segments", value)
	}

	float bbone_in() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_in")
	}

	void bbone_in(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_in", value)
	}

	float bbone_out() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_out")
	}

	void bbone_out(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_out", value)
	}

	float bbone_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_x")
	}

	void bbone_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_x", value)
	}

	float bbone_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bbone_z")
	}

	void bbone_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bbone_z", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool lock_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock")
	}

	void lock_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool select_head() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_head")
	}

	void select_head(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_head", value)
	}

	bool select_tail() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_tail")
	}

	void select_tail(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_tail", value)
	}

	VFLOAT16 matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix", 16)
	}

	void matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix", 16)
	}

	void align_roll(VFLOAT3 vector) {
		ARRAY_TO_PYOBJ(vector, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("align_roll", "O", vector_tupleval)
		DECREF_ARRAY_ITEMS(vector, 3)
	}
};

class BoidRule : public pyUniplug {
public:
	BoidRule(PyObject* pyobj) : pyUniplug(pyobj) {}
	BoidRule() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum boidrule_type_items_enum {
		boidrule_type_items_GOAL = 1,	
		boidrule_type_items_AVOID = 2,	
		boidrule_type_items_AVOID_COLLISION = 3,	
		boidrule_type_items_SEPARATE = 4,	
		boidrule_type_items_FLOCK = 5,	
		boidrule_type_items_FOLLOW_LEADER = 6,	
		boidrule_type_items_AVERAGE_SPEED = 7,	
		boidrule_type_items_FIGHT = 8	
	};

	std::map<std::string, int> create_string_to_boidrule_type_items() {
		return {{"GOAL", boidrule_type_items_GOAL}, {"AVOID", boidrule_type_items_AVOID}, {"AVOID_COLLISION", boidrule_type_items_AVOID_COLLISION}, {"SEPARATE", boidrule_type_items_SEPARATE}, {"FLOCK", boidrule_type_items_FLOCK}, {"FOLLOW_LEADER", boidrule_type_items_FOLLOW_LEADER}, {"AVERAGE_SPEED", boidrule_type_items_AVERAGE_SPEED}, {"FIGHT", boidrule_type_items_FIGHT}};
	};

	std::map<int, std::string> create_boidrule_type_items_to_string() {
		return {{boidrule_type_items_GOAL, "GOAL"}, {boidrule_type_items_AVOID, "AVOID"}, {boidrule_type_items_AVOID_COLLISION, "AVOID_COLLISION"}, {boidrule_type_items_SEPARATE, "SEPARATE"}, {boidrule_type_items_FLOCK, "FLOCK"}, {boidrule_type_items_FOLLOW_LEADER, "FOLLOW_LEADER"}, {boidrule_type_items_AVERAGE_SPEED, "AVERAGE_SPEED"}, {boidrule_type_items_FIGHT, "FIGHT"}};
	};

	const std::map<std::string, int> string_to_boidrule_type_items = create_string_to_boidrule_type_items();
	const std::map<int, std::string> boidrule_type_items_to_string = create_boidrule_type_items_to_string();

	boidrule_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<boidrule_type_items_enum>(string_to_boidrule_type_items.at(resstr)))
	}

	void type(boidrule_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", boidrule_type_items_to_string.at(value))
	}

	bool use_in_air() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_in_air")
	}

	void use_in_air(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_in_air", value)
	}

	bool use_on_land() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_on_land")
	}

	void use_on_land(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_on_land", value)
	}
};

class BoidRuleGoal : public BoidRule {
public:
	BoidRuleGoal(PyObject* pyobj) : BoidRule(pyobj) {}
	BoidRuleGoal() : BoidRule(0) { }

	Object object_value();

	bool use_predict() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_predict")
	}

	void use_predict(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_predict", value)
	}
};

class BoidRuleAvoid : public BoidRule {
public:
	BoidRuleAvoid(PyObject* pyobj) : BoidRule(pyobj) {}
	BoidRuleAvoid() : BoidRule(0) { }

	Object object_value();

	bool use_predict() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_predict")
	}

	void use_predict(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_predict", value)
	}

	float fear_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fear_factor")
	}

	void fear_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fear_factor", value)
	}
};

class BoidRuleAvoidCollision : public BoidRule {
public:
	BoidRuleAvoidCollision(PyObject* pyobj) : BoidRule(pyobj) {}
	BoidRuleAvoidCollision() : BoidRule(0) { }

	bool use_avoid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_avoid")
	}

	void use_avoid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_avoid", value)
	}

	bool use_avoid_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_avoid_collision")
	}

	void use_avoid_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_avoid_collision", value)
	}

	float look_ahead() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "look_ahead")
	}

	void look_ahead(float value) {
		PRIMITIVE_TYPES_SETTER("f", "look_ahead", value)
	}
};

class BoidRuleFollowLeader : public BoidRule {
public:
	BoidRuleFollowLeader(PyObject* pyobj) : BoidRule(pyobj) {}
	BoidRuleFollowLeader() : BoidRule(0) { }

	Object object_value();

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	int queue_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "queue_count")
	}

	void queue_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "queue_count", value)
	}

	bool use_line() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_line")
	}

	void use_line(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_line", value)
	}
};

class BoidRuleAverageSpeed : public BoidRule {
public:
	BoidRuleAverageSpeed(PyObject* pyobj) : BoidRule(pyobj) {}
	BoidRuleAverageSpeed() : BoidRule(0) { }

	float wander() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wander")
	}

	void wander(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wander", value)
	}

	float level() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "level")
	}

	void level(float value) {
		PRIMITIVE_TYPES_SETTER("f", "level", value)
	}

	float speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "speed")
	}

	void speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "speed", value)
	}
};

class BoidRuleFight : public BoidRule {
public:
	BoidRuleFight(PyObject* pyobj) : BoidRule(pyobj) {}
	BoidRuleFight() : BoidRule(0) { }

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	float flee_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flee_distance")
	}

	void flee_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flee_distance", value)
	}
};

class BoidState : public pyUniplug {
public:
	BoidState(PyObject* pyobj) : pyUniplug(pyobj) {}
	BoidState() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum boidruleset_type_items_enum {
		boidruleset_type_items_FUZZY = 0,	
		boidruleset_type_items_RANDOM = 1,	
		boidruleset_type_items_AVERAGE = 2	
	};

	std::map<std::string, int> create_string_to_boidruleset_type_items() {
		return {{"FUZZY", boidruleset_type_items_FUZZY}, {"RANDOM", boidruleset_type_items_RANDOM}, {"AVERAGE", boidruleset_type_items_AVERAGE}};
	};

	std::map<int, std::string> create_boidruleset_type_items_to_string() {
		return {{boidruleset_type_items_FUZZY, "FUZZY"}, {boidruleset_type_items_RANDOM, "RANDOM"}, {boidruleset_type_items_AVERAGE, "AVERAGE"}};
	};

	const std::map<std::string, int> string_to_boidruleset_type_items = create_string_to_boidruleset_type_items();
	const std::map<int, std::string> boidruleset_type_items_to_string = create_boidruleset_type_items_to_string();

	boidruleset_type_items_enum ruleset_type() {
		STRING_TYPE_GETTER("ruleset_type", static_cast<boidruleset_type_items_enum>(string_to_boidruleset_type_items.at(resstr)))
	}

	void ruleset_type(boidruleset_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ruleset_type", boidruleset_type_items_to_string.at(value))
	}

	std::map<std::string, BoidRule> rules() {
		MAP_TYPE_GETTER("rules", BoidRule)
	}

	BoidRule active_boid_rule() {
		CLASS_TYPES_GETTER(BoidRule, "active_boid_rule")
	}

	int active_boid_rule_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_boid_rule_index")
	}

	void active_boid_rule_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_boid_rule_index", value)
	}

	float rule_fuzzy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rule_fuzzy")
	}

	void rule_fuzzy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rule_fuzzy", value)
	}

	float volume() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume")
	}

	void volume(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume", value)
	}

	float falloff() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff")
	}

	void falloff(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff", value)
	}
};

class BoidSettings : public pyUniplug {
public:
	BoidSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	BoidSettings() : pyUniplug(0) { }

	float land_smooth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "land_smooth")
	}

	void land_smooth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "land_smooth", value)
	}

	float bank() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bank")
	}

	void bank(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bank", value)
	}

	float pitch() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pitch")
	}

	void pitch(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pitch", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	std::map<std::string, BoidState> states() {
		MAP_TYPE_GETTER("states", BoidState)
	}

	BoidRule active_boid_state() {
		CLASS_TYPES_GETTER(BoidRule, "active_boid_state")
	}

	int active_boid_state_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_boid_state_index")
	}

	void active_boid_state_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_boid_state_index", value)
	}

	float health() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "health")
	}

	void health(float value) {
		PRIMITIVE_TYPES_SETTER("f", "health", value)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	float aggression() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "aggression")
	}

	void aggression(float value) {
		PRIMITIVE_TYPES_SETTER("f", "aggression", value)
	}

	float accuracy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "accuracy")
	}

	void accuracy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "accuracy", value)
	}

	float range() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range")
	}

	void range(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range", value)
	}

	float air_speed_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "air_speed_min")
	}

	void air_speed_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "air_speed_min", value)
	}

	float air_speed_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "air_speed_max")
	}

	void air_speed_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "air_speed_max", value)
	}

	float air_acc_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "air_acc_max")
	}

	void air_acc_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "air_acc_max", value)
	}

	float air_ave_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "air_ave_max")
	}

	void air_ave_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "air_ave_max", value)
	}

	float air_personal_space() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "air_personal_space")
	}

	void air_personal_space(float value) {
		PRIMITIVE_TYPES_SETTER("f", "air_personal_space", value)
	}

	float land_jump_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "land_jump_speed")
	}

	void land_jump_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "land_jump_speed", value)
	}

	float land_speed_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "land_speed_max")
	}

	void land_speed_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "land_speed_max", value)
	}

	float land_acc_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "land_acc_max")
	}

	void land_acc_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "land_acc_max", value)
	}

	float land_ave_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "land_ave_max")
	}

	void land_ave_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "land_ave_max", value)
	}

	float land_personal_space() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "land_personal_space")
	}

	void land_personal_space(float value) {
		PRIMITIVE_TYPES_SETTER("f", "land_personal_space", value)
	}

	float land_stick_force() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "land_stick_force")
	}

	void land_stick_force(float value) {
		PRIMITIVE_TYPES_SETTER("f", "land_stick_force", value)
	}

	bool use_flight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flight")
	}

	void use_flight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flight", value)
	}

	bool use_land() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_land")
	}

	void use_land(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_land", value)
	}

	bool use_climb() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_climb")
	}

	void use_climb(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_climb", value)
	}
};

class Brush : public ID {
public:
	Brush(PyObject* pyobj) : ID(pyobj) {}
	Brush() : ID(0) { }

	enum prop_blend_items_enum {
		prop_blend_items_MIX = 0,	
		prop_blend_items_ADD = 1,	
		prop_blend_items_SUB = 2,	
		prop_blend_items_MUL = 3,	
		prop_blend_items_LIGHTEN = 4,	
		prop_blend_items_DARKEN = 5,	
		prop_blend_items_ERASE_ALPHA = 6,	
		prop_blend_items_ADD_ALPHA = 7,	
		prop_blend_items_OVERLAY = 8,	
		prop_blend_items_HARDLIGHT = 9,	
		prop_blend_items_COLORBURN = 10,	
		prop_blend_items_LINEARBURN = 11,	
		prop_blend_items_COLORDODGE = 12,	
		prop_blend_items_SCREEN = 13,	
		prop_blend_items_SOFTLIGHT = 14,	
		prop_blend_items_PINLIGHT = 15,	
		prop_blend_items_VIVIDLIGHT = 16,	
		prop_blend_items_LINEARLIGHT = 17,	
		prop_blend_items_DIFFERENCE = 18,	
		prop_blend_items_EXCLUSION = 19,	
		prop_blend_items_HUE = 20,	
		prop_blend_items_SATURATION = 21,	
		prop_blend_items_LUMINOSITY = 22,	
		prop_blend_items_COLOR = 23	
	};

	std::map<std::string, int> create_string_to_prop_blend_items() {
		return {{"MIX", prop_blend_items_MIX}, {"ADD", prop_blend_items_ADD}, {"SUB", prop_blend_items_SUB}, {"MUL", prop_blend_items_MUL}, {"LIGHTEN", prop_blend_items_LIGHTEN}, {"DARKEN", prop_blend_items_DARKEN}, {"ERASE_ALPHA", prop_blend_items_ERASE_ALPHA}, {"ADD_ALPHA", prop_blend_items_ADD_ALPHA}, {"OVERLAY", prop_blend_items_OVERLAY}, {"HARDLIGHT", prop_blend_items_HARDLIGHT}, {"COLORBURN", prop_blend_items_COLORBURN}, {"LINEARBURN", prop_blend_items_LINEARBURN}, {"COLORDODGE", prop_blend_items_COLORDODGE}, {"SCREEN", prop_blend_items_SCREEN}, {"SOFTLIGHT", prop_blend_items_SOFTLIGHT}, {"PINLIGHT", prop_blend_items_PINLIGHT}, {"VIVIDLIGHT", prop_blend_items_VIVIDLIGHT}, {"LINEARLIGHT", prop_blend_items_LINEARLIGHT}, {"DIFFERENCE", prop_blend_items_DIFFERENCE}, {"EXCLUSION", prop_blend_items_EXCLUSION}, {"HUE", prop_blend_items_HUE}, {"SATURATION", prop_blend_items_SATURATION}, {"LUMINOSITY", prop_blend_items_LUMINOSITY}, {"COLOR", prop_blend_items_COLOR}};
	};

	std::map<int, std::string> create_prop_blend_items_to_string() {
		return {{prop_blend_items_MIX, "MIX"}, {prop_blend_items_ADD, "ADD"}, {prop_blend_items_SUB, "SUB"}, {prop_blend_items_MUL, "MUL"}, {prop_blend_items_LIGHTEN, "LIGHTEN"}, {prop_blend_items_DARKEN, "DARKEN"}, {prop_blend_items_ERASE_ALPHA, "ERASE_ALPHA"}, {prop_blend_items_ADD_ALPHA, "ADD_ALPHA"}, {prop_blend_items_OVERLAY, "OVERLAY"}, {prop_blend_items_HARDLIGHT, "HARDLIGHT"}, {prop_blend_items_COLORBURN, "COLORBURN"}, {prop_blend_items_LINEARBURN, "LINEARBURN"}, {prop_blend_items_COLORDODGE, "COLORDODGE"}, {prop_blend_items_SCREEN, "SCREEN"}, {prop_blend_items_SOFTLIGHT, "SOFTLIGHT"}, {prop_blend_items_PINLIGHT, "PINLIGHT"}, {prop_blend_items_VIVIDLIGHT, "VIVIDLIGHT"}, {prop_blend_items_LINEARLIGHT, "LINEARLIGHT"}, {prop_blend_items_DIFFERENCE, "DIFFERENCE"}, {prop_blend_items_EXCLUSION, "EXCLUSION"}, {prop_blend_items_HUE, "HUE"}, {prop_blend_items_SATURATION, "SATURATION"}, {prop_blend_items_LUMINOSITY, "LUMINOSITY"}, {prop_blend_items_COLOR, "COLOR"}};
	};

	const std::map<std::string, int> string_to_prop_blend_items = create_string_to_prop_blend_items();
	const std::map<int, std::string> prop_blend_items_to_string = create_prop_blend_items_to_string();

	prop_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<prop_blend_items_enum>(string_to_prop_blend_items.at(resstr)))
	}

	void blend(prop_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", prop_blend_items_to_string.at(value))
	}

	enum brush_sculpt_tool_items_enum {
		brush_sculpt_tool_items_BLOB = 17,	
		brush_sculpt_tool_items_CLAY = 8,	
		brush_sculpt_tool_items_CLAY_STRIPS = 18,	
		brush_sculpt_tool_items_CREASE = 16,	
		brush_sculpt_tool_items_DRAW = 1,	
		brush_sculpt_tool_items_FILL = 9,	
		brush_sculpt_tool_items_FLATTEN = 7,	
		brush_sculpt_tool_items_GRAB = 5,	
		brush_sculpt_tool_items_INFLATE = 4,	
		brush_sculpt_tool_items_LAYER = 6,	
		brush_sculpt_tool_items_MASK = 19,	
		brush_sculpt_tool_items_NUDGE = 11,	
		brush_sculpt_tool_items_PINCH = 3,	
		brush_sculpt_tool_items_ROTATE = 14,	
		brush_sculpt_tool_items_SCRAPE = 10,	
		brush_sculpt_tool_items_SIMPLIFY = 15,	
		brush_sculpt_tool_items_SMOOTH = 2,	
		brush_sculpt_tool_items_SNAKE_HOOK = 13,	
		brush_sculpt_tool_items_THUMB = 12	
	};

	std::map<std::string, int> create_string_to_brush_sculpt_tool_items() {
		return {{"BLOB", brush_sculpt_tool_items_BLOB}, {"CLAY", brush_sculpt_tool_items_CLAY}, {"CLAY_STRIPS", brush_sculpt_tool_items_CLAY_STRIPS}, {"CREASE", brush_sculpt_tool_items_CREASE}, {"DRAW", brush_sculpt_tool_items_DRAW}, {"FILL", brush_sculpt_tool_items_FILL}, {"FLATTEN", brush_sculpt_tool_items_FLATTEN}, {"GRAB", brush_sculpt_tool_items_GRAB}, {"INFLATE", brush_sculpt_tool_items_INFLATE}, {"LAYER", brush_sculpt_tool_items_LAYER}, {"MASK", brush_sculpt_tool_items_MASK}, {"NUDGE", brush_sculpt_tool_items_NUDGE}, {"PINCH", brush_sculpt_tool_items_PINCH}, {"ROTATE", brush_sculpt_tool_items_ROTATE}, {"SCRAPE", brush_sculpt_tool_items_SCRAPE}, {"SIMPLIFY", brush_sculpt_tool_items_SIMPLIFY}, {"SMOOTH", brush_sculpt_tool_items_SMOOTH}, {"SNAKE_HOOK", brush_sculpt_tool_items_SNAKE_HOOK}, {"THUMB", brush_sculpt_tool_items_THUMB}};
	};

	std::map<int, std::string> create_brush_sculpt_tool_items_to_string() {
		return {{brush_sculpt_tool_items_BLOB, "BLOB"}, {brush_sculpt_tool_items_CLAY, "CLAY"}, {brush_sculpt_tool_items_CLAY_STRIPS, "CLAY_STRIPS"}, {brush_sculpt_tool_items_CREASE, "CREASE"}, {brush_sculpt_tool_items_DRAW, "DRAW"}, {brush_sculpt_tool_items_FILL, "FILL"}, {brush_sculpt_tool_items_FLATTEN, "FLATTEN"}, {brush_sculpt_tool_items_GRAB, "GRAB"}, {brush_sculpt_tool_items_INFLATE, "INFLATE"}, {brush_sculpt_tool_items_LAYER, "LAYER"}, {brush_sculpt_tool_items_MASK, "MASK"}, {brush_sculpt_tool_items_NUDGE, "NUDGE"}, {brush_sculpt_tool_items_PINCH, "PINCH"}, {brush_sculpt_tool_items_ROTATE, "ROTATE"}, {brush_sculpt_tool_items_SCRAPE, "SCRAPE"}, {brush_sculpt_tool_items_SIMPLIFY, "SIMPLIFY"}, {brush_sculpt_tool_items_SMOOTH, "SMOOTH"}, {brush_sculpt_tool_items_SNAKE_HOOK, "SNAKE_HOOK"}, {brush_sculpt_tool_items_THUMB, "THUMB"}};
	};

	const std::map<std::string, int> string_to_brush_sculpt_tool_items = create_string_to_brush_sculpt_tool_items();
	const std::map<int, std::string> brush_sculpt_tool_items_to_string = create_brush_sculpt_tool_items_to_string();

	brush_sculpt_tool_items_enum sculpt_tool() {
		STRING_TYPE_GETTER("sculpt_tool", static_cast<brush_sculpt_tool_items_enum>(string_to_brush_sculpt_tool_items.at(resstr)))
	}

	void sculpt_tool(brush_sculpt_tool_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sculpt_tool", brush_sculpt_tool_items_to_string.at(value))
	}

	enum brush_vertex_tool_items_enum {
		brush_vertex_tool_items_MIX = 0,	
		brush_vertex_tool_items_ADD = 1,	
		brush_vertex_tool_items_SUB = 2,	
		brush_vertex_tool_items_MUL = 3,	
		brush_vertex_tool_items_BLUR = 4,	
		brush_vertex_tool_items_LIGHTEN = 5,	
		brush_vertex_tool_items_DARKEN = 6	
	};

	std::map<std::string, int> create_string_to_brush_vertex_tool_items() {
		return {{"MIX", brush_vertex_tool_items_MIX}, {"ADD", brush_vertex_tool_items_ADD}, {"SUB", brush_vertex_tool_items_SUB}, {"MUL", brush_vertex_tool_items_MUL}, {"BLUR", brush_vertex_tool_items_BLUR}, {"LIGHTEN", brush_vertex_tool_items_LIGHTEN}, {"DARKEN", brush_vertex_tool_items_DARKEN}};
	};

	std::map<int, std::string> create_brush_vertex_tool_items_to_string() {
		return {{brush_vertex_tool_items_MIX, "MIX"}, {brush_vertex_tool_items_ADD, "ADD"}, {brush_vertex_tool_items_SUB, "SUB"}, {brush_vertex_tool_items_MUL, "MUL"}, {brush_vertex_tool_items_BLUR, "BLUR"}, {brush_vertex_tool_items_LIGHTEN, "LIGHTEN"}, {brush_vertex_tool_items_DARKEN, "DARKEN"}};
	};

	const std::map<std::string, int> string_to_brush_vertex_tool_items = create_string_to_brush_vertex_tool_items();
	const std::map<int, std::string> brush_vertex_tool_items_to_string = create_brush_vertex_tool_items_to_string();

	brush_vertex_tool_items_enum vertex_tool() {
		STRING_TYPE_GETTER("vertex_tool", static_cast<brush_vertex_tool_items_enum>(string_to_brush_vertex_tool_items.at(resstr)))
	}

	void vertex_tool(brush_vertex_tool_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_tool", brush_vertex_tool_items_to_string.at(value))
	}

	enum brush_image_tool_items_enum {
		brush_image_tool_items_DRAW = 0,	
		brush_image_tool_items_SOFTEN = 1,	
		brush_image_tool_items_SMEAR = 2,	
		brush_image_tool_items_CLONE = 3,	
		brush_image_tool_items_FILL = 4,	
		brush_image_tool_items_MASK = 5	
	};

	std::map<std::string, int> create_string_to_brush_image_tool_items() {
		return {{"DRAW", brush_image_tool_items_DRAW}, {"SOFTEN", brush_image_tool_items_SOFTEN}, {"SMEAR", brush_image_tool_items_SMEAR}, {"CLONE", brush_image_tool_items_CLONE}, {"FILL", brush_image_tool_items_FILL}, {"MASK", brush_image_tool_items_MASK}};
	};

	std::map<int, std::string> create_brush_image_tool_items_to_string() {
		return {{brush_image_tool_items_DRAW, "DRAW"}, {brush_image_tool_items_SOFTEN, "SOFTEN"}, {brush_image_tool_items_SMEAR, "SMEAR"}, {brush_image_tool_items_CLONE, "CLONE"}, {brush_image_tool_items_FILL, "FILL"}, {brush_image_tool_items_MASK, "MASK"}};
	};

	const std::map<std::string, int> string_to_brush_image_tool_items = create_string_to_brush_image_tool_items();
	const std::map<int, std::string> brush_image_tool_items_to_string = create_brush_image_tool_items_to_string();

	brush_image_tool_items_enum image_tool() {
		STRING_TYPE_GETTER("image_tool", static_cast<brush_image_tool_items_enum>(string_to_brush_image_tool_items.at(resstr)))
	}

	void image_tool(brush_image_tool_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "image_tool", brush_image_tool_items_to_string.at(value))
	}

	enum prop_direction_items_enum {
		prop_direction_items_ADD = 0,	
		prop_direction_items_SUBTRACT = 512	
	};

	std::map<std::string, int> create_string_to_prop_direction_items() {
		return {{"ADD", prop_direction_items_ADD}, {"SUBTRACT", prop_direction_items_SUBTRACT}};
	};

	std::map<int, std::string> create_prop_direction_items_to_string() {
		return {{prop_direction_items_ADD, "ADD"}, {prop_direction_items_SUBTRACT, "SUBTRACT"}};
	};

	const std::map<std::string, int> string_to_prop_direction_items = create_string_to_prop_direction_items();
	const std::map<int, std::string> prop_direction_items_to_string = create_prop_direction_items_to_string();

	prop_direction_items_enum direction() {
		STRING_TYPE_GETTER("direction", static_cast<prop_direction_items_enum>(string_to_prop_direction_items.at(resstr)))
	}

	void direction(prop_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "direction", prop_direction_items_to_string.at(value))
	}

	enum sculpt_stroke_method_items_enum {
		sculpt_stroke_method_items_DOTS = 0,	
		sculpt_stroke_method_items_DRAG_DOT = 8388608,	
		sculpt_stroke_method_items_SPACE = 1024,	
		sculpt_stroke_method_items_AIRBRUSH = 1,	
		sculpt_stroke_method_items_ANCHORED = 256,	
		sculpt_stroke_method_items_LINE = 536870912,	
		sculpt_stroke_method_items_CURVE = -2147483648	
	};

	std::map<std::string, int> create_string_to_sculpt_stroke_method_items() {
		return {{"DOTS", sculpt_stroke_method_items_DOTS}, {"DRAG_DOT", sculpt_stroke_method_items_DRAG_DOT}, {"SPACE", sculpt_stroke_method_items_SPACE}, {"AIRBRUSH", sculpt_stroke_method_items_AIRBRUSH}, {"ANCHORED", sculpt_stroke_method_items_ANCHORED}, {"LINE", sculpt_stroke_method_items_LINE}, {"CURVE", sculpt_stroke_method_items_CURVE}};
	};

	std::map<int, std::string> create_sculpt_stroke_method_items_to_string() {
		return {{sculpt_stroke_method_items_DOTS, "DOTS"}, {sculpt_stroke_method_items_DRAG_DOT, "DRAG_DOT"}, {sculpt_stroke_method_items_SPACE, "SPACE"}, {sculpt_stroke_method_items_AIRBRUSH, "AIRBRUSH"}, {sculpt_stroke_method_items_ANCHORED, "ANCHORED"}, {sculpt_stroke_method_items_LINE, "LINE"}, {sculpt_stroke_method_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_sculpt_stroke_method_items = create_string_to_sculpt_stroke_method_items();
	const std::map<int, std::string> sculpt_stroke_method_items_to_string = create_sculpt_stroke_method_items_to_string();

	sculpt_stroke_method_items_enum stroke_method() {
		STRING_TYPE_GETTER("stroke_method", static_cast<sculpt_stroke_method_items_enum>(string_to_sculpt_stroke_method_items.at(resstr)))
	}

	void stroke_method(sculpt_stroke_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "stroke_method", sculpt_stroke_method_items_to_string.at(value))
	}

	enum brush_sculpt_plane_items_enum {
		brush_sculpt_plane_items_AREA = 0,	
		brush_sculpt_plane_items_VIEW = 1,	
		brush_sculpt_plane_items_X = 2,	
		brush_sculpt_plane_items_Y = 3,	
		brush_sculpt_plane_items_Z = 4	
	};

	std::map<std::string, int> create_string_to_brush_sculpt_plane_items() {
		return {{"AREA", brush_sculpt_plane_items_AREA}, {"VIEW", brush_sculpt_plane_items_VIEW}, {"X", brush_sculpt_plane_items_X}, {"Y", brush_sculpt_plane_items_Y}, {"Z", brush_sculpt_plane_items_Z}};
	};

	std::map<int, std::string> create_brush_sculpt_plane_items_to_string() {
		return {{brush_sculpt_plane_items_AREA, "AREA"}, {brush_sculpt_plane_items_VIEW, "VIEW"}, {brush_sculpt_plane_items_X, "X"}, {brush_sculpt_plane_items_Y, "Y"}, {brush_sculpt_plane_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_brush_sculpt_plane_items = create_string_to_brush_sculpt_plane_items();
	const std::map<int, std::string> brush_sculpt_plane_items_to_string = create_brush_sculpt_plane_items_to_string();

	brush_sculpt_plane_items_enum sculpt_plane() {
		STRING_TYPE_GETTER("sculpt_plane", static_cast<brush_sculpt_plane_items_enum>(string_to_brush_sculpt_plane_items.at(resstr)))
	}

	void sculpt_plane(brush_sculpt_plane_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sculpt_plane", brush_sculpt_plane_items_to_string.at(value))
	}

	enum brush_mask_tool_items_enum {
		brush_mask_tool_items_DRAW = 0,	
		brush_mask_tool_items_SMOOTH = 1	
	};

	std::map<std::string, int> create_string_to_brush_mask_tool_items() {
		return {{"DRAW", brush_mask_tool_items_DRAW}, {"SMOOTH", brush_mask_tool_items_SMOOTH}};
	};

	std::map<int, std::string> create_brush_mask_tool_items_to_string() {
		return {{brush_mask_tool_items_DRAW, "DRAW"}, {brush_mask_tool_items_SMOOTH, "SMOOTH"}};
	};

	const std::map<std::string, int> string_to_brush_mask_tool_items = create_string_to_brush_mask_tool_items();
	const std::map<int, std::string> brush_mask_tool_items_to_string = create_brush_mask_tool_items_to_string();

	brush_mask_tool_items_enum mask_tool() {
		STRING_TYPE_GETTER("mask_tool", static_cast<brush_mask_tool_items_enum>(string_to_brush_mask_tool_items.at(resstr)))
	}

	void mask_tool(brush_mask_tool_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tool", brush_mask_tool_items_to_string.at(value))
	}

	int size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size")
	}

	void size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size", value)
	}

	float unprojected_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "unprojected_radius")
	}

	void unprojected_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "unprojected_radius", value)
	}

	float jitter() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "jitter")
	}

	void jitter(float value) {
		PRIMITIVE_TYPES_SETTER("f", "jitter", value)
	}

	int jitter_absolute() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "jitter_absolute")
	}

	void jitter_absolute(int value) {
		PRIMITIVE_TYPES_SETTER("i", "jitter_absolute", value)
	}

	int spacing() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "spacing")
	}

	void spacing(int value) {
		PRIMITIVE_TYPES_SETTER("i", "spacing", value)
	}

	int grad_spacing() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grad_spacing")
	}

	void grad_spacing(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grad_spacing", value)
	}

	int smooth_stroke_radius() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "smooth_stroke_radius")
	}

	void smooth_stroke_radius(int value) {
		PRIMITIVE_TYPES_SETTER("i", "smooth_stroke_radius", value)
	}

	float smooth_stroke_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "smooth_stroke_factor")
	}

	void smooth_stroke_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "smooth_stroke_factor", value)
	}

	float rate() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rate")
	}

	void rate(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rate", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	VFLOAT3 secondary_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "secondary_color", 3)
	}

	void secondary_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "secondary_color", 3)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	float plane_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "plane_offset")
	}

	void plane_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "plane_offset", value)
	}

	float plane_trim() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "plane_trim")
	}

	void plane_trim(float value) {
		PRIMITIVE_TYPES_SETTER("f", "plane_trim", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	float texture_sample_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "texture_sample_bias")
	}

	void texture_sample_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "texture_sample_bias", value)
	}

	float normal_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "normal_weight")
	}

	void normal_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "normal_weight", value)
	}

	float crease_pinch_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crease_pinch_factor")
	}

	void crease_pinch_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crease_pinch_factor", value)
	}

	float auto_smooth_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "auto_smooth_factor")
	}

	void auto_smooth_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "auto_smooth_factor", value)
	}

	VFLOAT2 stencil_pos() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "stencil_pos", 2)
	}

	void stencil_pos(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "stencil_pos", 2)
	}

	VFLOAT2 stencil_dimension() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "stencil_dimension", 2)
	}

	void stencil_dimension(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "stencil_dimension", 2)
	}

	VFLOAT2 mask_stencil_pos() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "mask_stencil_pos", 2)
	}

	void mask_stencil_pos(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "mask_stencil_pos", 2)
	}

	VFLOAT2 mask_stencil_dimension() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "mask_stencil_dimension", 2)
	}

	void mask_stencil_dimension(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "mask_stencil_dimension", 2)
	}

	float sharp_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sharp_threshold")
	}

	void sharp_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sharp_threshold", value)
	}

	float fill_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fill_threshold")
	}

	void fill_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fill_threshold", value)
	}

	int blur_kernel_radius() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "blur_kernel_radius")
	}

	void blur_kernel_radius(int value) {
		PRIMITIVE_TYPES_SETTER("i", "blur_kernel_radius", value)
	}

	enum brush_blur_mode_items_enum {
		brush_blur_mode_items_BOX = 1,	
		brush_blur_mode_items_GAUSSIAN = 0	
	};

	std::map<std::string, int> create_string_to_brush_blur_mode_items() {
		return {{"BOX", brush_blur_mode_items_BOX}, {"GAUSSIAN", brush_blur_mode_items_GAUSSIAN}};
	};

	std::map<int, std::string> create_brush_blur_mode_items_to_string() {
		return {{brush_blur_mode_items_BOX, "BOX"}, {brush_blur_mode_items_GAUSSIAN, "GAUSSIAN"}};
	};

	const std::map<std::string, int> string_to_brush_blur_mode_items = create_string_to_brush_blur_mode_items();
	const std::map<int, std::string> brush_blur_mode_items_to_string = create_brush_blur_mode_items_to_string();

	brush_blur_mode_items_enum blur_mode() {
		STRING_TYPE_GETTER("blur_mode", static_cast<brush_blur_mode_items_enum>(string_to_brush_blur_mode_items.at(resstr)))
	}

	void blur_mode(brush_blur_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blur_mode", brush_blur_mode_items_to_string.at(value))
	}

	bool use_airbrush() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_airbrush")
	}

	void use_airbrush(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_airbrush", value)
	}

	bool use_original_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_original_normal")
	}

	void use_original_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_original_normal", value)
	}

	bool use_wrap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_wrap")
	}

	void use_wrap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_wrap", value)
	}

	bool use_pressure_strength() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pressure_strength")
	}

	void use_pressure_strength(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pressure_strength", value)
	}

	bool use_offset_pressure() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_offset_pressure")
	}

	void use_offset_pressure(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_offset_pressure", value)
	}

	bool use_pressure_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pressure_size")
	}

	void use_pressure_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pressure_size", value)
	}

	bool use_gradient() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_gradient")
	}

	void use_gradient(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_gradient", value)
	}

	bool use_pressure_jitter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pressure_jitter")
	}

	void use_pressure_jitter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pressure_jitter", value)
	}

	bool use_pressure_spacing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pressure_spacing")
	}

	void use_pressure_spacing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pressure_spacing", value)
	}

	enum brush_mask_pressure_items_enum {
		brush_mask_pressure_items_NONE = 0,	
		brush_mask_pressure_items_RAMP = 2,	
		brush_mask_pressure_items_CUTOFF = 4	
	};

	std::map<std::string, int> create_string_to_brush_mask_pressure_items() {
		return {{"NONE", brush_mask_pressure_items_NONE}, {"RAMP", brush_mask_pressure_items_RAMP}, {"CUTOFF", brush_mask_pressure_items_CUTOFF}};
	};

	std::map<int, std::string> create_brush_mask_pressure_items_to_string() {
		return {{brush_mask_pressure_items_NONE, "NONE"}, {brush_mask_pressure_items_RAMP, "RAMP"}, {brush_mask_pressure_items_CUTOFF, "CUTOFF"}};
	};

	const std::map<std::string, int> string_to_brush_mask_pressure_items = create_string_to_brush_mask_pressure_items();
	const std::map<int, std::string> brush_mask_pressure_items_to_string = create_brush_mask_pressure_items_to_string();

	brush_mask_pressure_items_enum use_pressure_masking() {
		STRING_TYPE_GETTER("use_pressure_masking", static_cast<brush_mask_pressure_items_enum>(string_to_brush_mask_pressure_items.at(resstr)))
	}

	void use_pressure_masking(brush_mask_pressure_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "use_pressure_masking", brush_mask_pressure_items_to_string.at(value))
	}

	bool use_inverse_smooth_pressure() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_inverse_smooth_pressure")
	}

	void use_inverse_smooth_pressure(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_inverse_smooth_pressure", value)
	}

	bool use_relative_jitter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative_jitter")
	}

	void use_relative_jitter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative_jitter", value)
	}

	bool use_plane_trim() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_plane_trim")
	}

	void use_plane_trim(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_plane_trim", value)
	}

	bool use_frontface() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_frontface")
	}

	void use_frontface(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_frontface", value)
	}

	bool use_anchor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_anchor")
	}

	void use_anchor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_anchor", value)
	}

	bool use_space() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_space")
	}

	void use_space(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_space", value)
	}

	bool use_line() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_line")
	}

	void use_line(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_line", value)
	}

	bool use_curve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_curve")
	}

	void use_curve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_curve", value)
	}

	bool use_smooth_stroke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth_stroke")
	}

	void use_smooth_stroke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth_stroke", value)
	}

	bool use_persistent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_persistent")
	}

	void use_persistent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_persistent", value)
	}

	bool use_accumulate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_accumulate")
	}

	void use_accumulate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_accumulate", value)
	}

	bool use_space_attenuation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_space_attenuation")
	}

	void use_space_attenuation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_space_attenuation", value)
	}

	bool use_adaptive_space() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_adaptive_space")
	}

	void use_adaptive_space(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_adaptive_space", value)
	}

	bool use_locked_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_locked_size")
	}

	void use_locked_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_locked_size", value)
	}

	bool use_edge_to_edge() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_to_edge")
	}

	void use_edge_to_edge(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_to_edge", value)
	}

	bool use_restore_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_restore_mesh")
	}

	void use_restore_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_restore_mesh", value)
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	CurveMapping curve();

	PaintCurve paint_curve();

	ColorRamp gradient();

	enum brush_gradient_items_enum {
		brush_gradient_items_PRESSURE = 0,	
		brush_gradient_items_SPACING_REPEAT = 1,	
		brush_gradient_items_SPACING_CLAMP = 2	
	};

	std::map<std::string, int> create_string_to_brush_gradient_items() {
		return {{"PRESSURE", brush_gradient_items_PRESSURE}, {"SPACING_REPEAT", brush_gradient_items_SPACING_REPEAT}, {"SPACING_CLAMP", brush_gradient_items_SPACING_CLAMP}};
	};

	std::map<int, std::string> create_brush_gradient_items_to_string() {
		return {{brush_gradient_items_PRESSURE, "PRESSURE"}, {brush_gradient_items_SPACING_REPEAT, "SPACING_REPEAT"}, {brush_gradient_items_SPACING_CLAMP, "SPACING_CLAMP"}};
	};

	const std::map<std::string, int> string_to_brush_gradient_items = create_string_to_brush_gradient_items();
	const std::map<int, std::string> brush_gradient_items_to_string = create_brush_gradient_items_to_string();

	brush_gradient_items_enum gradient_stroke_mode() {
		STRING_TYPE_GETTER("gradient_stroke_mode", static_cast<brush_gradient_items_enum>(string_to_brush_gradient_items.at(resstr)))
	}

	void gradient_stroke_mode(brush_gradient_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "gradient_stroke_mode", brush_gradient_items_to_string.at(value))
	}

	enum brush_gradient_fill_items_enum {
		brush_gradient_fill_items_LINEAR = 0,	
		brush_gradient_fill_items_RADIAL = 1	
	};

	std::map<std::string, int> create_string_to_brush_gradient_fill_items() {
		return {{"LINEAR", brush_gradient_fill_items_LINEAR}, {"RADIAL", brush_gradient_fill_items_RADIAL}};
	};

	std::map<int, std::string> create_brush_gradient_fill_items_to_string() {
		return {{brush_gradient_fill_items_LINEAR, "LINEAR"}, {brush_gradient_fill_items_RADIAL, "RADIAL"}};
	};

	const std::map<std::string, int> string_to_brush_gradient_fill_items = create_string_to_brush_gradient_fill_items();
	const std::map<int, std::string> brush_gradient_fill_items_to_string = create_brush_gradient_fill_items_to_string();

	brush_gradient_fill_items_enum gradient_fill_mode() {
		STRING_TYPE_GETTER("gradient_fill_mode", static_cast<brush_gradient_fill_items_enum>(string_to_brush_gradient_fill_items.at(resstr)))
	}

	void gradient_fill_mode(brush_gradient_fill_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "gradient_fill_mode", brush_gradient_fill_items_to_string.at(value))
	}

	bool use_primary_overlay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_primary_overlay")
	}

	void use_primary_overlay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_primary_overlay", value)
	}

	bool use_secondary_overlay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_secondary_overlay")
	}

	void use_secondary_overlay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_secondary_overlay", value)
	}

	bool use_cursor_overlay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cursor_overlay")
	}

	void use_cursor_overlay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cursor_overlay", value)
	}

	bool use_cursor_overlay_override() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cursor_overlay_override")
	}

	void use_cursor_overlay_override(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cursor_overlay_override", value)
	}

	bool use_primary_overlay_override() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_primary_overlay_override")
	}

	void use_primary_overlay_override(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_primary_overlay_override", value)
	}

	bool use_secondary_overlay_override() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_secondary_overlay_override")
	}

	void use_secondary_overlay_override(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_secondary_overlay_override", value)
	}

	bool use_paint_sculpt() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_paint_sculpt")
	}

	void use_paint_sculpt(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_paint_sculpt", value)
	}

	bool use_paint_vertex() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_paint_vertex")
	}

	void use_paint_vertex(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_paint_vertex", value)
	}

	bool use_paint_weight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_paint_weight")
	}

	void use_paint_weight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_paint_weight", value)
	}

	bool use_paint_image() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_paint_image")
	}

	void use_paint_image(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_paint_image", value)
	}

	BrushTextureSlot texture_slot();

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	BrushTextureSlot mask_texture_slot();

	Texture mask_texture() {
		CLASS_TYPES_GETTER(Texture, "mask_texture")
	}

	int texture_overlay_alpha() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "texture_overlay_alpha")
	}

	void texture_overlay_alpha(int value) {
		PRIMITIVE_TYPES_SETTER("i", "texture_overlay_alpha", value)
	}

	int mask_overlay_alpha() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mask_overlay_alpha")
	}

	void mask_overlay_alpha(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mask_overlay_alpha", value)
	}

	int cursor_overlay_alpha() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "cursor_overlay_alpha")
	}

	void cursor_overlay_alpha(int value) {
		PRIMITIVE_TYPES_SETTER("i", "cursor_overlay_alpha", value)
	}

	VFLOAT3 cursor_color_add() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor_color_add", 3)
	}

	void cursor_color_add(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor_color_add", 3)
	}

	VFLOAT3 cursor_color_subtract() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor_color_subtract", 3)
	}

	void cursor_color_subtract(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor_color_subtract", 3)
	}

	bool use_custom_icon() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_custom_icon")
	}

	void use_custom_icon(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_custom_icon", value)
	}

	std::string icon_filepath() {
		STRING_TYPE_GETTER("icon_filepath", resstr)
	}

	void icon_filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "icon_filepath", value)
	}

	Image clone_image();

	float clone_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clone_alpha")
	}

	void clone_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clone_alpha", value)
	}

	VFLOAT2 clone_offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "clone_offset", 2)
	}

	void clone_offset(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "clone_offset", 2)
	}

	BrushCapabilities brush_capabilities();

	SculptToolCapabilities sculpt_capabilities();

	ImapaintToolCapabilities image_paint_capabilities();
};

class BrushCapabilities : public pyUniplug {
public:
	BrushCapabilities(PyObject* pyobj) : pyUniplug(pyobj) {}
	BrushCapabilities() : pyUniplug(0) { }

	bool has_overlay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_overlay")
	}

	void has_overlay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_overlay", value)
	}

	bool has_random_texture_angle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_random_texture_angle")
	}

	void has_random_texture_angle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_random_texture_angle", value)
	}

	bool has_spacing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_spacing")
	}

	void has_spacing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_spacing", value)
	}

	bool has_smooth_stroke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_smooth_stroke")
	}

	void has_smooth_stroke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_smooth_stroke", value)
	}
};

class SculptToolCapabilities : public pyUniplug {
public:
	SculptToolCapabilities(PyObject* pyobj) : pyUniplug(pyobj) {}
	SculptToolCapabilities() : pyUniplug(0) { }

	bool has_accumulate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_accumulate")
	}

	void has_accumulate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_accumulate", value)
	}

	bool has_auto_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_auto_smooth")
	}

	void has_auto_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_auto_smooth", value)
	}

	bool has_height() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_height")
	}

	void has_height(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_height", value)
	}

	bool has_jitter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_jitter")
	}

	void has_jitter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_jitter", value)
	}

	bool has_normal_weight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_normal_weight")
	}

	void has_normal_weight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_normal_weight", value)
	}

	bool has_persistence() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_persistence")
	}

	void has_persistence(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_persistence", value)
	}

	bool has_pinch_factor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_pinch_factor")
	}

	void has_pinch_factor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_pinch_factor", value)
	}

	bool has_plane_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_plane_offset")
	}

	void has_plane_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_plane_offset", value)
	}

	bool has_random_texture_angle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_random_texture_angle")
	}

	void has_random_texture_angle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_random_texture_angle", value)
	}

	bool has_sculpt_plane() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_sculpt_plane")
	}

	void has_sculpt_plane(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_sculpt_plane", value)
	}

	bool has_secondary_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_secondary_color")
	}

	void has_secondary_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_secondary_color", value)
	}

	bool has_smooth_stroke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_smooth_stroke")
	}

	void has_smooth_stroke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_smooth_stroke", value)
	}

	bool has_space_attenuation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_space_attenuation")
	}

	void has_space_attenuation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_space_attenuation", value)
	}

	bool has_strength_pressure() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_strength_pressure")
	}

	void has_strength_pressure(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_strength_pressure", value)
	}

	bool has_gravity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_gravity")
	}

	void has_gravity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_gravity", value)
	}
};

class ImapaintToolCapabilities : public pyUniplug {
public:
	ImapaintToolCapabilities(PyObject* pyobj) : pyUniplug(pyobj) {}
	ImapaintToolCapabilities() : pyUniplug(0) { }

	bool has_accumulate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_accumulate")
	}

	void has_accumulate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_accumulate", value)
	}

	bool has_space_attenuation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_space_attenuation")
	}

	void has_space_attenuation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_space_attenuation", value)
	}

	bool has_radius() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_radius")
	}

	void has_radius(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_radius", value)
	}
};

class BrushTextureSlot : public TextureSlot {
public:
	BrushTextureSlot(PyObject* pyobj) : TextureSlot(pyobj) {}
	BrushTextureSlot() : TextureSlot(0) { }

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	enum prop_map_mode_items_enum {
		prop_map_mode_items_VIEW_PLANE = 0,	
		prop_map_mode_items_AREA_PLANE = 3,	
		prop_map_mode_items_TILED = 1,	
		prop_map_mode_items_3D = 2,	
		prop_map_mode_items_RANDOM = 4,	
		prop_map_mode_items_STENCIL = 5	
	};

	std::map<std::string, int> create_string_to_prop_map_mode_items() {
		return {{"VIEW_PLANE", prop_map_mode_items_VIEW_PLANE}, {"AREA_PLANE", prop_map_mode_items_AREA_PLANE}, {"TILED", prop_map_mode_items_TILED}, {"3D", prop_map_mode_items_3D}, {"RANDOM", prop_map_mode_items_RANDOM}, {"STENCIL", prop_map_mode_items_STENCIL}};
	};

	std::map<int, std::string> create_prop_map_mode_items_to_string() {
		return {{prop_map_mode_items_VIEW_PLANE, "VIEW_PLANE"}, {prop_map_mode_items_AREA_PLANE, "AREA_PLANE"}, {prop_map_mode_items_TILED, "TILED"}, {prop_map_mode_items_3D, "3D"}, {prop_map_mode_items_RANDOM, "RANDOM"}, {prop_map_mode_items_STENCIL, "STENCIL"}};
	};

	const std::map<std::string, int> string_to_prop_map_mode_items = create_string_to_prop_map_mode_items();
	const std::map<int, std::string> prop_map_mode_items_to_string = create_prop_map_mode_items_to_string();

	prop_map_mode_items_enum map_mode() {
		STRING_TYPE_GETTER("map_mode", static_cast<prop_map_mode_items_enum>(string_to_prop_map_mode_items.at(resstr)))
	}

	void map_mode(prop_map_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "map_mode", prop_map_mode_items_to_string.at(value))
	}

	enum prop_tex_paint_map_mode_items_enum {
		prop_tex_paint_map_mode_items_VIEW_PLANE = 0,	
		prop_tex_paint_map_mode_items_TILED = 1,	
		prop_tex_paint_map_mode_items_3D = 2,	
		prop_tex_paint_map_mode_items_RANDOM = 4,	
		prop_tex_paint_map_mode_items_STENCIL = 5	
	};

	std::map<std::string, int> create_string_to_prop_tex_paint_map_mode_items() {
		return {{"VIEW_PLANE", prop_tex_paint_map_mode_items_VIEW_PLANE}, {"TILED", prop_tex_paint_map_mode_items_TILED}, {"3D", prop_tex_paint_map_mode_items_3D}, {"RANDOM", prop_tex_paint_map_mode_items_RANDOM}, {"STENCIL", prop_tex_paint_map_mode_items_STENCIL}};
	};

	std::map<int, std::string> create_prop_tex_paint_map_mode_items_to_string() {
		return {{prop_tex_paint_map_mode_items_VIEW_PLANE, "VIEW_PLANE"}, {prop_tex_paint_map_mode_items_TILED, "TILED"}, {prop_tex_paint_map_mode_items_3D, "3D"}, {prop_tex_paint_map_mode_items_RANDOM, "RANDOM"}, {prop_tex_paint_map_mode_items_STENCIL, "STENCIL"}};
	};

	const std::map<std::string, int> string_to_prop_tex_paint_map_mode_items = create_string_to_prop_tex_paint_map_mode_items();
	const std::map<int, std::string> prop_tex_paint_map_mode_items_to_string = create_prop_tex_paint_map_mode_items_to_string();

	prop_tex_paint_map_mode_items_enum tex_paint_map_mode() {
		STRING_TYPE_GETTER("tex_paint_map_mode", static_cast<prop_tex_paint_map_mode_items_enum>(string_to_prop_tex_paint_map_mode_items.at(resstr)))
	}

	void tex_paint_map_mode(prop_tex_paint_map_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "tex_paint_map_mode", prop_tex_paint_map_mode_items_to_string.at(value))
	}

	enum prop_mask_paint_map_mode_items_enum {
		prop_mask_paint_map_mode_items_VIEW_PLANE = 0,	
		prop_mask_paint_map_mode_items_TILED = 1,	
		prop_mask_paint_map_mode_items_RANDOM = 4,	
		prop_mask_paint_map_mode_items_STENCIL = 5	
	};

	std::map<std::string, int> create_string_to_prop_mask_paint_map_mode_items() {
		return {{"VIEW_PLANE", prop_mask_paint_map_mode_items_VIEW_PLANE}, {"TILED", prop_mask_paint_map_mode_items_TILED}, {"RANDOM", prop_mask_paint_map_mode_items_RANDOM}, {"STENCIL", prop_mask_paint_map_mode_items_STENCIL}};
	};

	std::map<int, std::string> create_prop_mask_paint_map_mode_items_to_string() {
		return {{prop_mask_paint_map_mode_items_VIEW_PLANE, "VIEW_PLANE"}, {prop_mask_paint_map_mode_items_TILED, "TILED"}, {prop_mask_paint_map_mode_items_RANDOM, "RANDOM"}, {prop_mask_paint_map_mode_items_STENCIL, "STENCIL"}};
	};

	const std::map<std::string, int> string_to_prop_mask_paint_map_mode_items = create_string_to_prop_mask_paint_map_mode_items();
	const std::map<int, std::string> prop_mask_paint_map_mode_items_to_string = create_prop_mask_paint_map_mode_items_to_string();

	prop_mask_paint_map_mode_items_enum mask_map_mode() {
		STRING_TYPE_GETTER("mask_map_mode", static_cast<prop_mask_paint_map_mode_items_enum>(string_to_prop_mask_paint_map_mode_items.at(resstr)))
	}

	void mask_map_mode(prop_mask_paint_map_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_map_mode", prop_mask_paint_map_mode_items_to_string.at(value))
	}

	bool use_rake() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rake")
	}

	void use_rake(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rake", value)
	}

	bool use_random() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_random")
	}

	void use_random(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_random", value)
	}

	float random_angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "random_angle")
	}

	void random_angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "random_angle", value)
	}

	bool has_texture_angle_source() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_texture_angle_source")
	}

	void has_texture_angle_source(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_texture_angle_source", value)
	}

	bool has_random_texture_angle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_random_texture_angle")
	}

	void has_random_texture_angle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_random_texture_angle", value)
	}

	bool has_texture_angle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_texture_angle")
	}

	void has_texture_angle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_texture_angle", value)
	}
};

class OperatorStrokeElement : public PropertyGroup {
public:
	OperatorStrokeElement(PyObject* pyobj) : PropertyGroup(pyobj) {}
	OperatorStrokeElement() : PropertyGroup(0) { }

	VFLOAT3 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 3)
	}

	void location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 3)
	}

	VFLOAT2 mouse() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "mouse", 2)
	}

	void mouse(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "mouse", 2)
	}

	float pressure() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pressure")
	}

	void pressure(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pressure", value)
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	bool pen_flip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "pen_flip")
	}

	void pen_flip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "pen_flip", value)
	}

	float time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time")
	}

	void time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time", value)
	}

	bool is_start() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_start")
	}

	void is_start(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_start", value)
	}
};

class Camera : public ID {
public:
	Camera(PyObject* pyobj) : ID(pyobj) {}
	Camera() : ID(0) { }

	enum prop_type_items_enum {
		prop_type_items_PERSP = 0,	
		prop_type_items_ORTHO = 1,	
		prop_type_items_PANO = 2	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"PERSP", prop_type_items_PERSP}, {"ORTHO", prop_type_items_ORTHO}, {"PANO", prop_type_items_PANO}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_PERSP, "PERSP"}, {prop_type_items_ORTHO, "ORTHO"}, {prop_type_items_PANO, "PANO"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	enum prop_draw_type_extra_items_enum {
		prop_draw_type_extra_items_CENTER = 1,	
		prop_draw_type_extra_items_CENTER_DIAGONAL = 2,	
		prop_draw_type_extra_items_THIRDS = 4,	
		prop_draw_type_extra_items_GOLDEN = 8,	
		prop_draw_type_extra_items_GOLDEN_TRIANGLE_A = 16,	
		prop_draw_type_extra_items_GOLDEN_TRIANGLE_B = 32,	
		prop_draw_type_extra_items_HARMONY_TRIANGLE_A = 64,	
		prop_draw_type_extra_items_HARMONY_TRIANGLE_B = 128	
	};

	std::map<std::string, int> create_string_to_prop_draw_type_extra_items() {
		return {{"CENTER", prop_draw_type_extra_items_CENTER}, {"CENTER_DIAGONAL", prop_draw_type_extra_items_CENTER_DIAGONAL}, {"THIRDS", prop_draw_type_extra_items_THIRDS}, {"GOLDEN", prop_draw_type_extra_items_GOLDEN}, {"GOLDEN_TRIANGLE_A", prop_draw_type_extra_items_GOLDEN_TRIANGLE_A}, {"GOLDEN_TRIANGLE_B", prop_draw_type_extra_items_GOLDEN_TRIANGLE_B}, {"HARMONY_TRIANGLE_A", prop_draw_type_extra_items_HARMONY_TRIANGLE_A}, {"HARMONY_TRIANGLE_B", prop_draw_type_extra_items_HARMONY_TRIANGLE_B}};
	};

	std::map<int, std::string> create_prop_draw_type_extra_items_to_string() {
		return {{prop_draw_type_extra_items_CENTER, "CENTER"}, {prop_draw_type_extra_items_CENTER_DIAGONAL, "CENTER_DIAGONAL"}, {prop_draw_type_extra_items_THIRDS, "THIRDS"}, {prop_draw_type_extra_items_GOLDEN, "GOLDEN"}, {prop_draw_type_extra_items_GOLDEN_TRIANGLE_A, "GOLDEN_TRIANGLE_A"}, {prop_draw_type_extra_items_GOLDEN_TRIANGLE_B, "GOLDEN_TRIANGLE_B"}, {prop_draw_type_extra_items_HARMONY_TRIANGLE_A, "HARMONY_TRIANGLE_A"}, {prop_draw_type_extra_items_HARMONY_TRIANGLE_B, "HARMONY_TRIANGLE_B"}};
	};

	const std::map<std::string, int> string_to_prop_draw_type_extra_items = create_string_to_prop_draw_type_extra_items();
	const std::map<int, std::string> prop_draw_type_extra_items_to_string = create_prop_draw_type_extra_items_to_string();

	prop_draw_type_extra_items_enum show_guide() {
		STRING_TYPE_GETTER("show_guide", static_cast<prop_draw_type_extra_items_enum>(string_to_prop_draw_type_extra_items.at(resstr)))
	}

	void show_guide(prop_draw_type_extra_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "show_guide", prop_draw_type_extra_items_to_string.at(value))
	}

	enum sensor_fit_items_enum {
		sensor_fit_items_AUTO = 0,	
		sensor_fit_items_HORIZONTAL = 1,	
		sensor_fit_items_VERTICAL = 2	
	};

	std::map<std::string, int> create_string_to_sensor_fit_items() {
		return {{"AUTO", sensor_fit_items_AUTO}, {"HORIZONTAL", sensor_fit_items_HORIZONTAL}, {"VERTICAL", sensor_fit_items_VERTICAL}};
	};

	std::map<int, std::string> create_sensor_fit_items_to_string() {
		return {{sensor_fit_items_AUTO, "AUTO"}, {sensor_fit_items_HORIZONTAL, "HORIZONTAL"}, {sensor_fit_items_VERTICAL, "VERTICAL"}};
	};

	const std::map<std::string, int> string_to_sensor_fit_items = create_string_to_sensor_fit_items();
	const std::map<int, std::string> sensor_fit_items_to_string = create_sensor_fit_items_to_string();

	sensor_fit_items_enum sensor_fit() {
		STRING_TYPE_GETTER("sensor_fit", static_cast<sensor_fit_items_enum>(string_to_sensor_fit_items.at(resstr)))
	}

	void sensor_fit(sensor_fit_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sensor_fit", sensor_fit_items_to_string.at(value))
	}

	float passepartout_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "passepartout_alpha")
	}

	void passepartout_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "passepartout_alpha", value)
	}

	float angle_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_x")
	}

	void angle_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_x", value)
	}

	float angle_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_y")
	}

	void angle_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_y", value)
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	float clip_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_start")
	}

	void clip_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_start", value)
	}

	float clip_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_end")
	}

	void clip_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_end", value)
	}

	float lens() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lens")
	}

	void lens(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lens", value)
	}

	float sensor_width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sensor_width")
	}

	void sensor_width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sensor_width", value)
	}

	float sensor_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sensor_height")
	}

	void sensor_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sensor_height", value)
	}

	float ortho_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ortho_scale")
	}

	void ortho_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ortho_scale", value)
	}

	float draw_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "draw_size")
	}

	void draw_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "draw_size", value)
	}

	float shift_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shift_x")
	}

	void shift_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shift_x", value)
	}

	float shift_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shift_y")
	}

	void shift_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shift_y", value)
	}

	float dof_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dof_distance")
	}

	void dof_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dof_distance", value)
	}

	CameraStereoData stereo();

	bool show_limits() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_limits")
	}

	void show_limits(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_limits", value)
	}

	bool show_mist() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_mist")
	}

	void show_mist(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_mist", value)
	}

	bool show_passepartout() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_passepartout")
	}

	void show_passepartout(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_passepartout", value)
	}

	bool show_safe_areas() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_safe_areas")
	}

	void show_safe_areas(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_safe_areas", value)
	}

	bool show_safe_center() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_safe_center")
	}

	void show_safe_center(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_safe_center", value)
	}

	bool show_name() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_name")
	}

	void show_name(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_name", value)
	}

	bool show_sensor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sensor")
	}

	void show_sensor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sensor", value)
	}

	enum prop_lens_unit_items_enum {
		prop_lens_unit_items_MILLIMETERS = 0,	
		prop_lens_unit_items_FOV = 32	
	};

	std::map<std::string, int> create_string_to_prop_lens_unit_items() {
		return {{"MILLIMETERS", prop_lens_unit_items_MILLIMETERS}, {"FOV", prop_lens_unit_items_FOV}};
	};

	std::map<int, std::string> create_prop_lens_unit_items_to_string() {
		return {{prop_lens_unit_items_MILLIMETERS, "MILLIMETERS"}, {prop_lens_unit_items_FOV, "FOV"}};
	};

	const std::map<std::string, int> string_to_prop_lens_unit_items = create_string_to_prop_lens_unit_items();
	const std::map<int, std::string> prop_lens_unit_items_to_string = create_prop_lens_unit_items_to_string();

	prop_lens_unit_items_enum lens_unit() {
		STRING_TYPE_GETTER("lens_unit", static_cast<prop_lens_unit_items_enum>(string_to_prop_lens_unit_items.at(resstr)))
	}

	void lens_unit(prop_lens_unit_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "lens_unit", prop_lens_unit_items_to_string.at(value))
	}

	Object dof_object();

	GPUDOFSettings gpu_dof();

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	struct view_frame_result {
		VFLOAT3 result_1;
		VFLOAT3 result_2;
		VFLOAT3 result_3;
		VFLOAT3 result_4;
	};

	view_frame_result view_frame(Scene scene);
};

class CameraStereoData : public pyUniplug {
public:
	CameraStereoData(PyObject* pyobj) : pyUniplug(pyobj) {}
	CameraStereoData() : pyUniplug(0) { }

	enum convergence_mode_items_enum {
		convergence_mode_items_OFFAXIS = 0,	
		convergence_mode_items_PARALLEL = 1,	
		convergence_mode_items_TOE = 2	
	};

	std::map<std::string, int> create_string_to_convergence_mode_items() {
		return {{"OFFAXIS", convergence_mode_items_OFFAXIS}, {"PARALLEL", convergence_mode_items_PARALLEL}, {"TOE", convergence_mode_items_TOE}};
	};

	std::map<int, std::string> create_convergence_mode_items_to_string() {
		return {{convergence_mode_items_OFFAXIS, "OFFAXIS"}, {convergence_mode_items_PARALLEL, "PARALLEL"}, {convergence_mode_items_TOE, "TOE"}};
	};

	const std::map<std::string, int> string_to_convergence_mode_items = create_string_to_convergence_mode_items();
	const std::map<int, std::string> convergence_mode_items_to_string = create_convergence_mode_items_to_string();

	convergence_mode_items_enum convergence_mode() {
		STRING_TYPE_GETTER("convergence_mode", static_cast<convergence_mode_items_enum>(string_to_convergence_mode_items.at(resstr)))
	}

	void convergence_mode(convergence_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "convergence_mode", convergence_mode_items_to_string.at(value))
	}

	enum pivot_items_enum {
		pivot_items_LEFT = 0,	
		pivot_items_RIGHT = 1,	
		pivot_items_CENTER = 2	
	};

	std::map<std::string, int> create_string_to_pivot_items() {
		return {{"LEFT", pivot_items_LEFT}, {"RIGHT", pivot_items_RIGHT}, {"CENTER", pivot_items_CENTER}};
	};

	std::map<int, std::string> create_pivot_items_to_string() {
		return {{pivot_items_LEFT, "LEFT"}, {pivot_items_RIGHT, "RIGHT"}, {pivot_items_CENTER, "CENTER"}};
	};

	const std::map<std::string, int> string_to_pivot_items = create_string_to_pivot_items();
	const std::map<int, std::string> pivot_items_to_string = create_pivot_items_to_string();

	pivot_items_enum pivot() {
		STRING_TYPE_GETTER("pivot", static_cast<pivot_items_enum>(string_to_pivot_items.at(resstr)))
	}

	void pivot(pivot_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pivot", pivot_items_to_string.at(value))
	}

	float interocular_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "interocular_distance")
	}

	void interocular_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "interocular_distance", value)
	}

	float convergence_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "convergence_distance")
	}

	void convergence_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "convergence_distance", value)
	}
};

class ClothSolverResult : public pyUniplug {
public:
	ClothSolverResult(PyObject* pyobj) : pyUniplug(pyobj) {}
	ClothSolverResult() : pyUniplug(0) { }

	enum status_items_enum {
		status_items_SUCCESS = 1,	
		status_items_NUMERICAL_ISSUE = 2,	
		status_items_NO_CONVERGENCE = 4,	
		status_items_INVALID_INPUT = 8	
	};

	std::map<std::string, int> create_string_to_status_items() {
		return {{"SUCCESS", status_items_SUCCESS}, {"NUMERICAL_ISSUE", status_items_NUMERICAL_ISSUE}, {"NO_CONVERGENCE", status_items_NO_CONVERGENCE}, {"INVALID_INPUT", status_items_INVALID_INPUT}};
	};

	std::map<int, std::string> create_status_items_to_string() {
		return {{status_items_SUCCESS, "SUCCESS"}, {status_items_NUMERICAL_ISSUE, "NUMERICAL_ISSUE"}, {status_items_NO_CONVERGENCE, "NO_CONVERGENCE"}, {status_items_INVALID_INPUT, "INVALID_INPUT"}};
	};

	const std::map<std::string, int> string_to_status_items = create_string_to_status_items();
	const std::map<int, std::string> status_items_to_string = create_status_items_to_string();

	status_items_enum status() {
		STRING_TYPE_GETTER("status", static_cast<status_items_enum>(string_to_status_items.at(resstr)))
	}

	void status(status_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "status", status_items_to_string.at(value))
	}

	float max_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_error")
	}

	void max_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_error", value)
	}

	float min_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_error")
	}

	void min_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_error", value)
	}

	float avg_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "avg_error")
	}

	void avg_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "avg_error", value)
	}

	int max_iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_iterations")
	}

	void max_iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_iterations", value)
	}

	int min_iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_iterations")
	}

	void min_iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_iterations", value)
	}

	float avg_iterations() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "avg_iterations")
	}

	void avg_iterations(float value) {
		PRIMITIVE_TYPES_SETTER("f", "avg_iterations", value)
	}
};

class ClothSettings : public pyUniplug {
public:
	ClothSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ClothSettings() : pyUniplug(0) { }

	float goal_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_min")
	}

	void goal_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_min", value)
	}

	float goal_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_max")
	}

	void goal_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_max", value)
	}

	float goal_default() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_default")
	}

	void goal_default(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_default", value)
	}

	float goal_spring() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_spring")
	}

	void goal_spring(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_spring", value)
	}

	float goal_friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_friction")
	}

	void goal_friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_friction", value)
	}

	float internal_friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "internal_friction")
	}

	void internal_friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "internal_friction", value)
	}

	float collider_friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "collider_friction")
	}

	void collider_friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "collider_friction", value)
	}

	float density_target() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "density_target")
	}

	void density_target(float value) {
		PRIMITIVE_TYPES_SETTER("f", "density_target", value)
	}

	float density_strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "density_strength")
	}

	void density_strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "density_strength", value)
	}

	float mass() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mass")
	}

	void mass(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mass", value)
	}

	std::string vertex_group_mass() {
		STRING_TYPE_GETTER("vertex_group_mass", resstr)
	}

	void vertex_group_mass(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_mass", value)
	}

	VFLOAT3 gravity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gravity", 3)
	}

	void gravity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gravity", 3)
	}

	float air_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "air_damping")
	}

	void air_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "air_damping", value)
	}

	float vel_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "vel_damping")
	}

	void vel_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "vel_damping", value)
	}

	bool use_pin_cloth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pin_cloth")
	}

	void use_pin_cloth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pin_cloth", value)
	}

	float pin_stiffness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pin_stiffness")
	}

	void pin_stiffness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pin_stiffness", value)
	}

	int quality() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "quality")
	}

	void quality(int value) {
		PRIMITIVE_TYPES_SETTER("i", "quality", value)
	}

	std::string vertex_group_shrink() {
		STRING_TYPE_GETTER("vertex_group_shrink", resstr)
	}

	void vertex_group_shrink(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_shrink", value)
	}

	float shrink_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shrink_min")
	}

	void shrink_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shrink_min", value)
	}

	float shrink_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shrink_max")
	}

	void shrink_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shrink_max", value)
	}

	float voxel_cell_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "voxel_cell_size")
	}

	void voxel_cell_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "voxel_cell_size", value)
	}

	bool use_stiffness_scale() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stiffness_scale")
	}

	void use_stiffness_scale(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stiffness_scale", value)
	}

	float spring_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_damping")
	}

	void spring_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_damping", value)
	}

	float structural_stiffness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "structural_stiffness")
	}

	void structural_stiffness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "structural_stiffness", value)
	}

	float structural_stiffness_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "structural_stiffness_max")
	}

	void structural_stiffness_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "structural_stiffness_max", value)
	}

	float sewing_force_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sewing_force_max")
	}

	void sewing_force_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sewing_force_max", value)
	}

	std::string vertex_group_structural_stiffness() {
		STRING_TYPE_GETTER("vertex_group_structural_stiffness", resstr)
	}

	void vertex_group_structural_stiffness(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_structural_stiffness", value)
	}

	float bending_stiffness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bending_stiffness")
	}

	void bending_stiffness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bending_stiffness", value)
	}

	float bending_stiffness_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bending_stiffness_max")
	}

	void bending_stiffness_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bending_stiffness_max", value)
	}

	float bending_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bending_damping")
	}

	void bending_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bending_damping", value)
	}

	bool use_sewing_springs() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sewing_springs")
	}

	void use_sewing_springs(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sewing_springs", value)
	}

	std::string vertex_group_bending() {
		STRING_TYPE_GETTER("vertex_group_bending", resstr)
	}

	void vertex_group_bending(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_bending", value)
	}

	EffectorWeights effector_weights();

	ShapeKey rest_shape_key();
};

class ClothCollisionSettings : public pyUniplug {
public:
	ClothCollisionSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ClothCollisionSettings() : pyUniplug(0) { }

	bool use_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_collision")
	}

	void use_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_collision", value)
	}

	float repel_force() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "repel_force")
	}

	void repel_force(float value) {
		PRIMITIVE_TYPES_SETTER("f", "repel_force", value)
	}

	float distance_repel() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_repel")
	}

	void distance_repel(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_repel", value)
	}

	float distance_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_min")
	}

	void distance_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_min", value)
	}

	float friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "friction")
	}

	void friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "friction", value)
	}

	float damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping")
	}

	void damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping", value)
	}

	int collision_quality() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "collision_quality")
	}

	void collision_quality(int value) {
		PRIMITIVE_TYPES_SETTER("i", "collision_quality", value)
	}

	bool use_self_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_self_collision")
	}

	void use_self_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_self_collision", value)
	}

	float self_distance_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "self_distance_min")
	}

	void self_distance_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "self_distance_min", value)
	}

	float self_friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "self_friction")
	}

	void self_friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "self_friction", value)
	}

	int self_collision_quality() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "self_collision_quality")
	}

	void self_collision_quality(int value) {
		PRIMITIVE_TYPES_SETTER("i", "self_collision_quality", value)
	}

	Group group();

	std::string vertex_group_self_collisions() {
		STRING_TYPE_GETTER("vertex_group_self_collisions", resstr)
	}

	void vertex_group_self_collisions(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_self_collisions", value)
	}
};

class CurveMapPoint : public pyUniplug {
public:
	CurveMapPoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	CurveMapPoint() : pyUniplug(0) { }

	VFLOAT2 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 2)
	}

	void location(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 2)
	}

	enum prop_handle_type_items_enum {
		prop_handle_type_items_AUTO = 0,	
		prop_handle_type_items_VECTOR = 2	
	};

	std::map<std::string, int> create_string_to_prop_handle_type_items() {
		return {{"AUTO", prop_handle_type_items_AUTO}, {"VECTOR", prop_handle_type_items_VECTOR}};
	};

	std::map<int, std::string> create_prop_handle_type_items_to_string() {
		return {{prop_handle_type_items_AUTO, "AUTO"}, {prop_handle_type_items_VECTOR, "VECTOR"}};
	};

	const std::map<std::string, int> string_to_prop_handle_type_items = create_string_to_prop_handle_type_items();
	const std::map<int, std::string> prop_handle_type_items_to_string = create_prop_handle_type_items_to_string();

	prop_handle_type_items_enum handle_type() {
		STRING_TYPE_GETTER("handle_type", static_cast<prop_handle_type_items_enum>(string_to_prop_handle_type_items.at(resstr)))
	}

	void handle_type(prop_handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_type", prop_handle_type_items_to_string.at(value))
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}
};

class CurveMap : public pyUniplug {
public:
	CurveMap(PyObject* pyobj) : pyUniplug(pyobj) {}
	CurveMap() : pyUniplug(0) { }

	enum prop_extend_items_enum {
		prop_extend_items_HORIZONTAL = 0,	
		prop_extend_items_EXTRAPOLATED = 1	
	};

	std::map<std::string, int> create_string_to_prop_extend_items() {
		return {{"HORIZONTAL", prop_extend_items_HORIZONTAL}, {"EXTRAPOLATED", prop_extend_items_EXTRAPOLATED}};
	};

	std::map<int, std::string> create_prop_extend_items_to_string() {
		return {{prop_extend_items_HORIZONTAL, "HORIZONTAL"}, {prop_extend_items_EXTRAPOLATED, "EXTRAPOLATED"}};
	};

	const std::map<std::string, int> string_to_prop_extend_items = create_string_to_prop_extend_items();
	const std::map<int, std::string> prop_extend_items_to_string = create_prop_extend_items_to_string();

	prop_extend_items_enum extend() {
		STRING_TYPE_GETTER("extend", static_cast<prop_extend_items_enum>(string_to_prop_extend_items.at(resstr)))
	}

	void extend(prop_extend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "extend", prop_extend_items_to_string.at(value))
	}

	std::map<std::string, CurveMapPoint> points() {
		MAP_TYPE_GETTER("points", CurveMapPoint)
	}

	float evaluate(float position) {
		PYTHON_FUNCTION_ARGS_CALL("evaluate", "f", position)
		CREATE_SINGLE_PYOBJ(value)
		PRIMITIVE_TYPES_CONV(value, float, (float)PyFloat_AsDouble(value_obj))
		NONCLASS_TYPES_RETURN(value_res)
	}
};

class CurveMapping : public pyUniplug {
public:
	CurveMapping(PyObject* pyobj) : pyUniplug(pyobj) {}
	CurveMapping() : pyUniplug(0) { }

	bool use_clip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clip")
	}

	void use_clip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clip", value)
	}

	float clip_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_min_x")
	}

	void clip_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_min_x", value)
	}

	float clip_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_min_y")
	}

	void clip_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_min_y", value)
	}

	float clip_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_max_x")
	}

	void clip_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_max_x", value)
	}

	float clip_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_max_y")
	}

	void clip_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_max_y", value)
	}

	std::map<std::string, CurveMap> curves() {
		MAP_TYPE_GETTER("curves", CurveMap)
	}

	VFLOAT3 black_level() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "black_level", 3)
	}

	void black_level(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "black_level", 3)
	}

	VFLOAT3 white_level() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "white_level", 3)
	}

	void white_level(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "white_level", 3)
	}

	void update() {
		PYTHON_FUNCTION_CALL("update")
	}

	void initialize() {
		PYTHON_FUNCTION_CALL("initialize")
	}
};

class ColorRampElement : public pyUniplug {
public:
	ColorRampElement(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorRampElement() : pyUniplug(0) { }

	VFLOAT4 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 4)
	}

	void color(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 4)
	}

	float alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha")
	}

	void alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha", value)
	}

	float position() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "position")
	}

	void position(float value) {
		PRIMITIVE_TYPES_SETTER("f", "position", value)
	}
};

class ColorRamp : public pyUniplug {
public:
	ColorRamp(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorRamp() : pyUniplug(0) { }

	std::map<std::string, ColorRampElement> elements() {
		MAP_TYPE_GETTER("elements", ColorRampElement)
	}

	enum prop_interpolation_items_enum {
		prop_interpolation_items_EASE = 1,	
		prop_interpolation_items_CARDINAL = 3,	
		prop_interpolation_items_LINEAR = 0,	
		prop_interpolation_items_B_SPLINE = 2,	
		prop_interpolation_items_CONSTANT = 4	
	};

	std::map<std::string, int> create_string_to_prop_interpolation_items() {
		return {{"EASE", prop_interpolation_items_EASE}, {"CARDINAL", prop_interpolation_items_CARDINAL}, {"LINEAR", prop_interpolation_items_LINEAR}, {"B_SPLINE", prop_interpolation_items_B_SPLINE}, {"CONSTANT", prop_interpolation_items_CONSTANT}};
	};

	std::map<int, std::string> create_prop_interpolation_items_to_string() {
		return {{prop_interpolation_items_EASE, "EASE"}, {prop_interpolation_items_CARDINAL, "CARDINAL"}, {prop_interpolation_items_LINEAR, "LINEAR"}, {prop_interpolation_items_B_SPLINE, "B_SPLINE"}, {prop_interpolation_items_CONSTANT, "CONSTANT"}};
	};

	const std::map<std::string, int> string_to_prop_interpolation_items = create_string_to_prop_interpolation_items();
	const std::map<int, std::string> prop_interpolation_items_to_string = create_prop_interpolation_items_to_string();

	prop_interpolation_items_enum interpolation() {
		STRING_TYPE_GETTER("interpolation", static_cast<prop_interpolation_items_enum>(string_to_prop_interpolation_items.at(resstr)))
	}

	void interpolation(prop_interpolation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation", prop_interpolation_items_to_string.at(value))
	}

	enum prop_hsv_items_enum {
		prop_hsv_items_NEAR = 0,	
		prop_hsv_items_FAR = 1,	
		prop_hsv_items_CW = 2,	
		prop_hsv_items_CCW = 3	
	};

	std::map<std::string, int> create_string_to_prop_hsv_items() {
		return {{"NEAR", prop_hsv_items_NEAR}, {"FAR", prop_hsv_items_FAR}, {"CW", prop_hsv_items_CW}, {"CCW", prop_hsv_items_CCW}};
	};

	std::map<int, std::string> create_prop_hsv_items_to_string() {
		return {{prop_hsv_items_NEAR, "NEAR"}, {prop_hsv_items_FAR, "FAR"}, {prop_hsv_items_CW, "CW"}, {prop_hsv_items_CCW, "CCW"}};
	};

	const std::map<std::string, int> string_to_prop_hsv_items = create_string_to_prop_hsv_items();
	const std::map<int, std::string> prop_hsv_items_to_string = create_prop_hsv_items_to_string();

	prop_hsv_items_enum hue_interpolation() {
		STRING_TYPE_GETTER("hue_interpolation", static_cast<prop_hsv_items_enum>(string_to_prop_hsv_items.at(resstr)))
	}

	void hue_interpolation(prop_hsv_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "hue_interpolation", prop_hsv_items_to_string.at(value))
	}

	enum prop_mode_items_enum {
		prop_mode_items_RGB = 0,	
		prop_mode_items_HSV = 1,	
		prop_mode_items_HSL = 2	
	};

	std::map<std::string, int> create_string_to_prop_mode_items() {
		return {{"RGB", prop_mode_items_RGB}, {"HSV", prop_mode_items_HSV}, {"HSL", prop_mode_items_HSL}};
	};

	std::map<int, std::string> create_prop_mode_items_to_string() {
		return {{prop_mode_items_RGB, "RGB"}, {prop_mode_items_HSV, "HSV"}, {prop_mode_items_HSL, "HSL"}};
	};

	const std::map<std::string, int> string_to_prop_mode_items = create_string_to_prop_mode_items();
	const std::map<int, std::string> prop_mode_items_to_string = create_prop_mode_items_to_string();

	prop_mode_items_enum color_mode() {
		STRING_TYPE_GETTER("color_mode", static_cast<prop_mode_items_enum>(string_to_prop_mode_items.at(resstr)))
	}

	void color_mode(prop_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_mode", prop_mode_items_to_string.at(value))
	}

	VFLOAT4 evaluate(float position) {
		PYTHON_FUNCTION_ARGS_CALL("evaluate", "f", position)
		CREATE_SINGLE_PYOBJ(color)
		POD_VECTOR_TYPES_CONV(color, FLOAT, (float)PyFloat_AsDouble(item), 4)
		NONCLASS_TYPES_RETURN(color_res)
	}
};

class Histogram : public pyUniplug {
public:
	Histogram(PyObject* pyobj) : pyUniplug(pyobj) {}
	Histogram() : pyUniplug(0) { }

	enum prop_mode_items_enum {
		prop_mode_items_LUMA = 0,	
		prop_mode_items_RGB = 1,	
		prop_mode_items_R = 2,	
		prop_mode_items_G = 3,	
		prop_mode_items_B = 4,	
		prop_mode_items_A = 5	
	};

	std::map<std::string, int> create_string_to_prop_mode_items() {
		return {{"LUMA", prop_mode_items_LUMA}, {"RGB", prop_mode_items_RGB}, {"R", prop_mode_items_R}, {"G", prop_mode_items_G}, {"B", prop_mode_items_B}, {"A", prop_mode_items_A}};
	};

	std::map<int, std::string> create_prop_mode_items_to_string() {
		return {{prop_mode_items_LUMA, "LUMA"}, {prop_mode_items_RGB, "RGB"}, {prop_mode_items_R, "R"}, {prop_mode_items_G, "G"}, {prop_mode_items_B, "B"}, {prop_mode_items_A, "A"}};
	};

	const std::map<std::string, int> string_to_prop_mode_items = create_string_to_prop_mode_items();
	const std::map<int, std::string> prop_mode_items_to_string = create_prop_mode_items_to_string();

	prop_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_mode_items_enum>(string_to_prop_mode_items.at(resstr)))
	}

	void mode(prop_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_mode_items_to_string.at(value))
	}

	bool show_line() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_line")
	}

	void show_line(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_line", value)
	}
};

class Scopes : public pyUniplug {
public:
	Scopes(PyObject* pyobj) : pyUniplug(pyobj) {}
	Scopes() : pyUniplug(0) { }

	bool use_full_resolution() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_full_resolution")
	}

	void use_full_resolution(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_full_resolution", value)
	}

	float accuracy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "accuracy")
	}

	void accuracy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "accuracy", value)
	}

	Histogram histogram() {
		CLASS_TYPES_GETTER(Histogram, "histogram")
	}

	enum prop_wavefrm_mode_items_enum {
		prop_wavefrm_mode_items_LUMA = 0,	
		prop_wavefrm_mode_items_RGB = 1,	
		prop_wavefrm_mode_items_YCBCR601 = 2,	
		prop_wavefrm_mode_items_YCBCR709 = 3,	
		prop_wavefrm_mode_items_YCBCRJPG = 4	
	};

	std::map<std::string, int> create_string_to_prop_wavefrm_mode_items() {
		return {{"LUMA", prop_wavefrm_mode_items_LUMA}, {"RGB", prop_wavefrm_mode_items_RGB}, {"YCBCR601", prop_wavefrm_mode_items_YCBCR601}, {"YCBCR709", prop_wavefrm_mode_items_YCBCR709}, {"YCBCRJPG", prop_wavefrm_mode_items_YCBCRJPG}};
	};

	std::map<int, std::string> create_prop_wavefrm_mode_items_to_string() {
		return {{prop_wavefrm_mode_items_LUMA, "LUMA"}, {prop_wavefrm_mode_items_RGB, "RGB"}, {prop_wavefrm_mode_items_YCBCR601, "YCBCR601"}, {prop_wavefrm_mode_items_YCBCR709, "YCBCR709"}, {prop_wavefrm_mode_items_YCBCRJPG, "YCBCRJPG"}};
	};

	const std::map<std::string, int> string_to_prop_wavefrm_mode_items = create_string_to_prop_wavefrm_mode_items();
	const std::map<int, std::string> prop_wavefrm_mode_items_to_string = create_prop_wavefrm_mode_items_to_string();

	prop_wavefrm_mode_items_enum waveform_mode() {
		STRING_TYPE_GETTER("waveform_mode", static_cast<prop_wavefrm_mode_items_enum>(string_to_prop_wavefrm_mode_items.at(resstr)))
	}

	void waveform_mode(prop_wavefrm_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "waveform_mode", prop_wavefrm_mode_items_to_string.at(value))
	}

	float waveform_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "waveform_alpha")
	}

	void waveform_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "waveform_alpha", value)
	}

	float vectorscope_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "vectorscope_alpha")
	}

	void vectorscope_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "vectorscope_alpha", value)
	}
};

class ColorManagedDisplaySettings : public pyUniplug {
public:
	ColorManagedDisplaySettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorManagedDisplaySettings() : pyUniplug(0) { }

	enum display_device_items_enum {
		display_device_items_DEFAULT = 0	
	};

	std::map<std::string, int> create_string_to_display_device_items() {
		return {{"DEFAULT", display_device_items_DEFAULT}};
	};

	std::map<int, std::string> create_display_device_items_to_string() {
		return {{display_device_items_DEFAULT, "DEFAULT"}};
	};

	const std::map<std::string, int> string_to_display_device_items = create_string_to_display_device_items();
	const std::map<int, std::string> display_device_items_to_string = create_display_device_items_to_string();

	display_device_items_enum display_device() {
		STRING_TYPE_GETTER("display_device", static_cast<display_device_items_enum>(string_to_display_device_items.at(resstr)))
	}

	void display_device(display_device_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "display_device", display_device_items_to_string.at(value))
	}
};

class ColorManagedViewSettings : public pyUniplug {
public:
	ColorManagedViewSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorManagedViewSettings() : pyUniplug(0) { }

	enum look_items_enum {
		look_items_NONE = 0	
	};

	std::map<std::string, int> create_string_to_look_items() {
		return {{"NONE", look_items_NONE}};
	};

	std::map<int, std::string> create_look_items_to_string() {
		return {{look_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_look_items = create_string_to_look_items();
	const std::map<int, std::string> look_items_to_string = create_look_items_to_string();

	look_items_enum look() {
		STRING_TYPE_GETTER("look", static_cast<look_items_enum>(string_to_look_items.at(resstr)))
	}

	void look(look_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "look", look_items_to_string.at(value))
	}

	enum view_transform_items_enum {
		view_transform_items_NONE = 0	
	};

	std::map<std::string, int> create_string_to_view_transform_items() {
		return {{"NONE", view_transform_items_NONE}};
	};

	std::map<int, std::string> create_view_transform_items_to_string() {
		return {{view_transform_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_view_transform_items = create_string_to_view_transform_items();
	const std::map<int, std::string> view_transform_items_to_string = create_view_transform_items_to_string();

	view_transform_items_enum view_transform() {
		STRING_TYPE_GETTER("view_transform", static_cast<view_transform_items_enum>(string_to_view_transform_items.at(resstr)))
	}

	void view_transform(view_transform_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_transform", view_transform_items_to_string.at(value))
	}

	float exposure() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "exposure")
	}

	void exposure(float value) {
		PRIMITIVE_TYPES_SETTER("f", "exposure", value)
	}

	float gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gamma")
	}

	void gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gamma", value)
	}

	CurveMapping curve_mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "curve_mapping")
	}

	bool use_curve_mapping() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_curve_mapping")
	}

	void use_curve_mapping(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_curve_mapping", value)
	}
};

class ColorManagedInputColorspaceSettings : public pyUniplug {
public:
	ColorManagedInputColorspaceSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorManagedInputColorspaceSettings() : pyUniplug(0) { }

	enum color_space_items_enum {
		color_space_items_NONE = 0	
	};

	std::map<std::string, int> create_string_to_color_space_items() {
		return {{"NONE", color_space_items_NONE}};
	};

	std::map<int, std::string> create_color_space_items_to_string() {
		return {{color_space_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_color_space_items = create_string_to_color_space_items();
	const std::map<int, std::string> color_space_items_to_string = create_color_space_items_to_string();

	color_space_items_enum name() {
		STRING_TYPE_GETTER("name", static_cast<color_space_items_enum>(string_to_color_space_items.at(resstr)))
	}

	void name(color_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "name", color_space_items_to_string.at(value))
	}
};

class ColorManagedSequencerColorspaceSettings : public pyUniplug {
public:
	ColorManagedSequencerColorspaceSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ColorManagedSequencerColorspaceSettings() : pyUniplug(0) { }

	enum color_space_items_enum {
		color_space_items_NONE = 0	
	};

	std::map<std::string, int> create_string_to_color_space_items() {
		return {{"NONE", color_space_items_NONE}};
	};

	std::map<int, std::string> create_color_space_items_to_string() {
		return {{color_space_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_color_space_items = create_string_to_color_space_items();
	const std::map<int, std::string> color_space_items_to_string = create_color_space_items_to_string();

	color_space_items_enum name() {
		STRING_TYPE_GETTER("name", static_cast<color_space_items_enum>(string_to_color_space_items.at(resstr)))
	}

	void name(color_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "name", color_space_items_to_string.at(value))
	}
};

class Constraint : public pyUniplug {
public:
	Constraint(PyObject* pyobj) : pyUniplug(pyobj) {}
	Constraint() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum constraint_type_items_enum {
		constraint_type_items_CAMERA_SOLVER = 27,	
		constraint_type_items_FOLLOW_TRACK = 26,	
		constraint_type_items_OBJECT_SOLVER = 28,	
		constraint_type_items_COPY_LOCATION = 9,	
		constraint_type_items_COPY_ROTATION = 8,	
		constraint_type_items_COPY_SCALE = 10,	
		constraint_type_items_COPY_TRANSFORMS = 23,	
		constraint_type_items_LIMIT_DISTANCE = 14,	
		constraint_type_items_LIMIT_LOCATION = 6,	
		constraint_type_items_LIMIT_ROTATION = 5,	
		constraint_type_items_LIMIT_SCALE = 7,	
		constraint_type_items_MAINTAIN_VOLUME = 24,	
		constraint_type_items_TRANSFORM = 19,	
		constraint_type_items_CLAMP_TO = 18,	
		constraint_type_items_DAMPED_TRACK = 21,	
		constraint_type_items_IK = 3,	
		constraint_type_items_LOCKED_TRACK = 13,	
		constraint_type_items_SPLINE_IK = 22,	
		constraint_type_items_STRETCH_TO = 15,	
		constraint_type_items_TRACK_TO = 2,	
		constraint_type_items_ACTION = 12,	
		constraint_type_items_CHILD_OF = 1,	
		constraint_type_items_FLOOR = 16,	
		constraint_type_items_FOLLOW_PATH = 4,	
		constraint_type_items_PIVOT = 25,	
		constraint_type_items_RIGID_BODY_JOINT = 17,	
		constraint_type_items_SHRINKWRAP = 20	
	};

	std::map<std::string, int> create_string_to_constraint_type_items() {
		return {{"CAMERA_SOLVER", constraint_type_items_CAMERA_SOLVER}, {"FOLLOW_TRACK", constraint_type_items_FOLLOW_TRACK}, {"OBJECT_SOLVER", constraint_type_items_OBJECT_SOLVER}, {"COPY_LOCATION", constraint_type_items_COPY_LOCATION}, {"COPY_ROTATION", constraint_type_items_COPY_ROTATION}, {"COPY_SCALE", constraint_type_items_COPY_SCALE}, {"COPY_TRANSFORMS", constraint_type_items_COPY_TRANSFORMS}, {"LIMIT_DISTANCE", constraint_type_items_LIMIT_DISTANCE}, {"LIMIT_LOCATION", constraint_type_items_LIMIT_LOCATION}, {"LIMIT_ROTATION", constraint_type_items_LIMIT_ROTATION}, {"LIMIT_SCALE", constraint_type_items_LIMIT_SCALE}, {"MAINTAIN_VOLUME", constraint_type_items_MAINTAIN_VOLUME}, {"TRANSFORM", constraint_type_items_TRANSFORM}, {"CLAMP_TO", constraint_type_items_CLAMP_TO}, {"DAMPED_TRACK", constraint_type_items_DAMPED_TRACK}, {"IK", constraint_type_items_IK}, {"LOCKED_TRACK", constraint_type_items_LOCKED_TRACK}, {"SPLINE_IK", constraint_type_items_SPLINE_IK}, {"STRETCH_TO", constraint_type_items_STRETCH_TO}, {"TRACK_TO", constraint_type_items_TRACK_TO}, {"ACTION", constraint_type_items_ACTION}, {"CHILD_OF", constraint_type_items_CHILD_OF}, {"FLOOR", constraint_type_items_FLOOR}, {"FOLLOW_PATH", constraint_type_items_FOLLOW_PATH}, {"PIVOT", constraint_type_items_PIVOT}, {"RIGID_BODY_JOINT", constraint_type_items_RIGID_BODY_JOINT}, {"SHRINKWRAP", constraint_type_items_SHRINKWRAP}};
	};

	std::map<int, std::string> create_constraint_type_items_to_string() {
		return {{constraint_type_items_CAMERA_SOLVER, "CAMERA_SOLVER"}, {constraint_type_items_FOLLOW_TRACK, "FOLLOW_TRACK"}, {constraint_type_items_OBJECT_SOLVER, "OBJECT_SOLVER"}, {constraint_type_items_COPY_LOCATION, "COPY_LOCATION"}, {constraint_type_items_COPY_ROTATION, "COPY_ROTATION"}, {constraint_type_items_COPY_SCALE, "COPY_SCALE"}, {constraint_type_items_COPY_TRANSFORMS, "COPY_TRANSFORMS"}, {constraint_type_items_LIMIT_DISTANCE, "LIMIT_DISTANCE"}, {constraint_type_items_LIMIT_LOCATION, "LIMIT_LOCATION"}, {constraint_type_items_LIMIT_ROTATION, "LIMIT_ROTATION"}, {constraint_type_items_LIMIT_SCALE, "LIMIT_SCALE"}, {constraint_type_items_MAINTAIN_VOLUME, "MAINTAIN_VOLUME"}, {constraint_type_items_TRANSFORM, "TRANSFORM"}, {constraint_type_items_CLAMP_TO, "CLAMP_TO"}, {constraint_type_items_DAMPED_TRACK, "DAMPED_TRACK"}, {constraint_type_items_IK, "IK"}, {constraint_type_items_LOCKED_TRACK, "LOCKED_TRACK"}, {constraint_type_items_SPLINE_IK, "SPLINE_IK"}, {constraint_type_items_STRETCH_TO, "STRETCH_TO"}, {constraint_type_items_TRACK_TO, "TRACK_TO"}, {constraint_type_items_ACTION, "ACTION"}, {constraint_type_items_CHILD_OF, "CHILD_OF"}, {constraint_type_items_FLOOR, "FLOOR"}, {constraint_type_items_FOLLOW_PATH, "FOLLOW_PATH"}, {constraint_type_items_PIVOT, "PIVOT"}, {constraint_type_items_RIGID_BODY_JOINT, "RIGID_BODY_JOINT"}, {constraint_type_items_SHRINKWRAP, "SHRINKWRAP"}};
	};

	const std::map<std::string, int> string_to_constraint_type_items = create_string_to_constraint_type_items();
	const std::map<int, std::string> constraint_type_items_to_string = create_constraint_type_items_to_string();

	constraint_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<constraint_type_items_enum>(string_to_constraint_type_items.at(resstr)))
	}

	void type(constraint_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", constraint_type_items_to_string.at(value))
	}

	enum owner_space_pchan_items_enum {
		owner_space_pchan_items_WORLD = 0,	
		owner_space_pchan_items_POSE = 2,	
		owner_space_pchan_items_LOCAL_WITH_PARENT = 3,	
		owner_space_pchan_items_LOCAL = 1	
	};

	std::map<std::string, int> create_string_to_owner_space_pchan_items() {
		return {{"WORLD", owner_space_pchan_items_WORLD}, {"POSE", owner_space_pchan_items_POSE}, {"LOCAL_WITH_PARENT", owner_space_pchan_items_LOCAL_WITH_PARENT}, {"LOCAL", owner_space_pchan_items_LOCAL}};
	};

	std::map<int, std::string> create_owner_space_pchan_items_to_string() {
		return {{owner_space_pchan_items_WORLD, "WORLD"}, {owner_space_pchan_items_POSE, "POSE"}, {owner_space_pchan_items_LOCAL_WITH_PARENT, "LOCAL_WITH_PARENT"}, {owner_space_pchan_items_LOCAL, "LOCAL"}};
	};

	const std::map<std::string, int> string_to_owner_space_pchan_items = create_string_to_owner_space_pchan_items();
	const std::map<int, std::string> owner_space_pchan_items_to_string = create_owner_space_pchan_items_to_string();

	owner_space_pchan_items_enum owner_space() {
		STRING_TYPE_GETTER("owner_space", static_cast<owner_space_pchan_items_enum>(string_to_owner_space_pchan_items.at(resstr)))
	}

	void owner_space(owner_space_pchan_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "owner_space", owner_space_pchan_items_to_string.at(value))
	}

	enum target_space_pchan_items_enum {
		target_space_pchan_items_WORLD = 0,	
		target_space_pchan_items_POSE = 2,	
		target_space_pchan_items_LOCAL_WITH_PARENT = 3,	
		target_space_pchan_items_LOCAL = 1	
	};

	std::map<std::string, int> create_string_to_target_space_pchan_items() {
		return {{"WORLD", target_space_pchan_items_WORLD}, {"POSE", target_space_pchan_items_POSE}, {"LOCAL_WITH_PARENT", target_space_pchan_items_LOCAL_WITH_PARENT}, {"LOCAL", target_space_pchan_items_LOCAL}};
	};

	std::map<int, std::string> create_target_space_pchan_items_to_string() {
		return {{target_space_pchan_items_WORLD, "WORLD"}, {target_space_pchan_items_POSE, "POSE"}, {target_space_pchan_items_LOCAL_WITH_PARENT, "LOCAL_WITH_PARENT"}, {target_space_pchan_items_LOCAL, "LOCAL"}};
	};

	const std::map<std::string, int> string_to_target_space_pchan_items = create_string_to_target_space_pchan_items();
	const std::map<int, std::string> target_space_pchan_items_to_string = create_target_space_pchan_items_to_string();

	target_space_pchan_items_enum target_space() {
		STRING_TYPE_GETTER("target_space", static_cast<target_space_pchan_items_enum>(string_to_target_space_pchan_items.at(resstr)))
	}

	void target_space(target_space_pchan_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "target_space", target_space_pchan_items_to_string.at(value))
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool is_proxy_local() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_proxy_local")
	}

	void is_proxy_local(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_proxy_local", value)
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	float error_location() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "error_location")
	}

	void error_location(float value) {
		PRIMITIVE_TYPES_SETTER("f", "error_location", value)
	}

	float error_rotation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "error_rotation")
	}

	void error_rotation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "error_rotation", value)
	}
};

class ConstraintTarget : public pyUniplug {
public:
	ConstraintTarget(PyObject* pyobj) : pyUniplug(pyobj) {}
	ConstraintTarget() : pyUniplug(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}
};

class ChildOfConstraint : public Constraint {
public:
	ChildOfConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	ChildOfConstraint() : Constraint(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	bool use_location_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_location_x")
	}

	void use_location_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_location_x", value)
	}

	bool use_location_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_location_y")
	}

	void use_location_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_location_y", value)
	}

	bool use_location_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_location_z")
	}

	void use_location_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_location_z", value)
	}

	bool use_rotation_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotation_x")
	}

	void use_rotation_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotation_x", value)
	}

	bool use_rotation_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotation_y")
	}

	void use_rotation_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotation_y", value)
	}

	bool use_rotation_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotation_z")
	}

	void use_rotation_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotation_z", value)
	}

	bool use_scale_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_scale_x")
	}

	void use_scale_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_scale_x", value)
	}

	bool use_scale_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_scale_y")
	}

	void use_scale_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_scale_y", value)
	}

	bool use_scale_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_scale_z")
	}

	void use_scale_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_scale_z", value)
	}

	VFLOAT16 inverse_matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inverse_matrix", 16)
	}

	void inverse_matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inverse_matrix", 16)
	}
};

class PythonConstraint : public Constraint {
public:
	PythonConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	PythonConstraint() : Constraint(0) { }

	std::map<std::string, ConstraintTarget> targets() {
		MAP_TYPE_GETTER("targets", ConstraintTarget)
	}

	int target_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "target_count")
	}

	void target_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "target_count", value)
	}

	Text text();

	bool use_targets() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_targets")
	}

	void use_targets(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_targets", value)
	}

	bool has_script_error() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_script_error")
	}

	void has_script_error(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_script_error", value)
	}
};

class StretchToConstraint : public Constraint {
public:
	StretchToConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	StretchToConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	enum volume_items_enum {
		volume_items_VOLUME_XZX = 0,	
		volume_items_VOLUME_X = 1,	
		volume_items_VOLUME_Z = 2,	
		volume_items_NO_VOLUME = 3	
	};

	std::map<std::string, int> create_string_to_volume_items() {
		return {{"VOLUME_XZX", volume_items_VOLUME_XZX}, {"VOLUME_X", volume_items_VOLUME_X}, {"VOLUME_Z", volume_items_VOLUME_Z}, {"NO_VOLUME", volume_items_NO_VOLUME}};
	};

	std::map<int, std::string> create_volume_items_to_string() {
		return {{volume_items_VOLUME_XZX, "VOLUME_XZX"}, {volume_items_VOLUME_X, "VOLUME_X"}, {volume_items_VOLUME_Z, "VOLUME_Z"}, {volume_items_NO_VOLUME, "NO_VOLUME"}};
	};

	const std::map<std::string, int> string_to_volume_items = create_string_to_volume_items();
	const std::map<int, std::string> volume_items_to_string = create_volume_items_to_string();

	volume_items_enum volume() {
		STRING_TYPE_GETTER("volume", static_cast<volume_items_enum>(string_to_volume_items.at(resstr)))
	}

	void volume(volume_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "volume", volume_items_to_string.at(value))
	}

	enum plane_items_enum {
		plane_items_PLANE_X = 0,	
		plane_items_PLANE_Z = 2	
	};

	std::map<std::string, int> create_string_to_plane_items() {
		return {{"PLANE_X", plane_items_PLANE_X}, {"PLANE_Z", plane_items_PLANE_Z}};
	};

	std::map<int, std::string> create_plane_items_to_string() {
		return {{plane_items_PLANE_X, "PLANE_X"}, {plane_items_PLANE_Z, "PLANE_Z"}};
	};

	const std::map<std::string, int> string_to_plane_items = create_string_to_plane_items();
	const std::map<int, std::string> plane_items_to_string = create_plane_items_to_string();

	plane_items_enum keep_axis() {
		STRING_TYPE_GETTER("keep_axis", static_cast<plane_items_enum>(string_to_plane_items.at(resstr)))
	}

	void keep_axis(plane_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "keep_axis", plane_items_to_string.at(value))
	}

	float rest_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rest_length")
	}

	void rest_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rest_length", value)
	}

	float bulge() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge")
	}

	void bulge(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge", value)
	}

	bool use_bulge_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bulge_min")
	}

	void use_bulge_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bulge_min", value)
	}

	bool use_bulge_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bulge_max")
	}

	void use_bulge_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bulge_max", value)
	}

	float bulge_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge_min")
	}

	void bulge_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge_min", value)
	}

	float bulge_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge_max")
	}

	void bulge_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge_max", value)
	}

	float bulge_smooth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge_smooth")
	}

	void bulge_smooth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge_smooth", value)
	}
};

class FollowPathConstraint : public Constraint {
public:
	FollowPathConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	FollowPathConstraint() : Constraint(0) { }

	Object target();

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	float offset_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_factor")
	}

	void offset_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_factor", value)
	}

	enum forwardpath_items_enum {
		forwardpath_items_FORWARD_X = 0,	
		forwardpath_items_FORWARD_Y = 1,	
		forwardpath_items_FORWARD_Z = 2,	
		forwardpath_items_TRACK_NEGATIVE_X = 3,	
		forwardpath_items_TRACK_NEGATIVE_Y = 4,	
		forwardpath_items_TRACK_NEGATIVE_Z = 5	
	};

	std::map<std::string, int> create_string_to_forwardpath_items() {
		return {{"FORWARD_X", forwardpath_items_FORWARD_X}, {"FORWARD_Y", forwardpath_items_FORWARD_Y}, {"FORWARD_Z", forwardpath_items_FORWARD_Z}, {"TRACK_NEGATIVE_X", forwardpath_items_TRACK_NEGATIVE_X}, {"TRACK_NEGATIVE_Y", forwardpath_items_TRACK_NEGATIVE_Y}, {"TRACK_NEGATIVE_Z", forwardpath_items_TRACK_NEGATIVE_Z}};
	};

	std::map<int, std::string> create_forwardpath_items_to_string() {
		return {{forwardpath_items_FORWARD_X, "FORWARD_X"}, {forwardpath_items_FORWARD_Y, "FORWARD_Y"}, {forwardpath_items_FORWARD_Z, "FORWARD_Z"}, {forwardpath_items_TRACK_NEGATIVE_X, "TRACK_NEGATIVE_X"}, {forwardpath_items_TRACK_NEGATIVE_Y, "TRACK_NEGATIVE_Y"}, {forwardpath_items_TRACK_NEGATIVE_Z, "TRACK_NEGATIVE_Z"}};
	};

	const std::map<std::string, int> string_to_forwardpath_items = create_string_to_forwardpath_items();
	const std::map<int, std::string> forwardpath_items_to_string = create_forwardpath_items_to_string();

	forwardpath_items_enum forward_axis() {
		STRING_TYPE_GETTER("forward_axis", static_cast<forwardpath_items_enum>(string_to_forwardpath_items.at(resstr)))
	}

	void forward_axis(forwardpath_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "forward_axis", forwardpath_items_to_string.at(value))
	}

	enum pathup_items_enum {
		pathup_items_UP_X = 0,	
		pathup_items_UP_Y = 1,	
		pathup_items_UP_Z = 2	
	};

	std::map<std::string, int> create_string_to_pathup_items() {
		return {{"UP_X", pathup_items_UP_X}, {"UP_Y", pathup_items_UP_Y}, {"UP_Z", pathup_items_UP_Z}};
	};

	std::map<int, std::string> create_pathup_items_to_string() {
		return {{pathup_items_UP_X, "UP_X"}, {pathup_items_UP_Y, "UP_Y"}, {pathup_items_UP_Z, "UP_Z"}};
	};

	const std::map<std::string, int> string_to_pathup_items = create_string_to_pathup_items();
	const std::map<int, std::string> pathup_items_to_string = create_pathup_items_to_string();

	pathup_items_enum up_axis() {
		STRING_TYPE_GETTER("up_axis", static_cast<pathup_items_enum>(string_to_pathup_items.at(resstr)))
	}

	void up_axis(pathup_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "up_axis", pathup_items_to_string.at(value))
	}

	bool use_curve_follow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_curve_follow")
	}

	void use_curve_follow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_curve_follow", value)
	}

	bool use_fixed_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fixed_location")
	}

	void use_fixed_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fixed_location", value)
	}

	bool use_curve_radius() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_curve_radius")
	}

	void use_curve_radius(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_curve_radius", value)
	}
};

class LockedTrackConstraint : public Constraint {
public:
	LockedTrackConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	LockedTrackConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	enum locktrack_items_enum {
		locktrack_items_TRACK_X = 0,	
		locktrack_items_TRACK_Y = 1,	
		locktrack_items_TRACK_Z = 2,	
		locktrack_items_TRACK_NEGATIVE_X = 3,	
		locktrack_items_TRACK_NEGATIVE_Y = 4,	
		locktrack_items_TRACK_NEGATIVE_Z = 5	
	};

	std::map<std::string, int> create_string_to_locktrack_items() {
		return {{"TRACK_X", locktrack_items_TRACK_X}, {"TRACK_Y", locktrack_items_TRACK_Y}, {"TRACK_Z", locktrack_items_TRACK_Z}, {"TRACK_NEGATIVE_X", locktrack_items_TRACK_NEGATIVE_X}, {"TRACK_NEGATIVE_Y", locktrack_items_TRACK_NEGATIVE_Y}, {"TRACK_NEGATIVE_Z", locktrack_items_TRACK_NEGATIVE_Z}};
	};

	std::map<int, std::string> create_locktrack_items_to_string() {
		return {{locktrack_items_TRACK_X, "TRACK_X"}, {locktrack_items_TRACK_Y, "TRACK_Y"}, {locktrack_items_TRACK_Z, "TRACK_Z"}, {locktrack_items_TRACK_NEGATIVE_X, "TRACK_NEGATIVE_X"}, {locktrack_items_TRACK_NEGATIVE_Y, "TRACK_NEGATIVE_Y"}, {locktrack_items_TRACK_NEGATIVE_Z, "TRACK_NEGATIVE_Z"}};
	};

	const std::map<std::string, int> string_to_locktrack_items = create_string_to_locktrack_items();
	const std::map<int, std::string> locktrack_items_to_string = create_locktrack_items_to_string();

	locktrack_items_enum track_axis() {
		STRING_TYPE_GETTER("track_axis", static_cast<locktrack_items_enum>(string_to_locktrack_items.at(resstr)))
	}

	void track_axis(locktrack_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "track_axis", locktrack_items_to_string.at(value))
	}

	enum lock_items_enum {
		lock_items_LOCK_X = 0,	
		lock_items_LOCK_Y = 1,	
		lock_items_LOCK_Z = 2	
	};

	std::map<std::string, int> create_string_to_lock_items() {
		return {{"LOCK_X", lock_items_LOCK_X}, {"LOCK_Y", lock_items_LOCK_Y}, {"LOCK_Z", lock_items_LOCK_Z}};
	};

	std::map<int, std::string> create_lock_items_to_string() {
		return {{lock_items_LOCK_X, "LOCK_X"}, {lock_items_LOCK_Y, "LOCK_Y"}, {lock_items_LOCK_Z, "LOCK_Z"}};
	};

	const std::map<std::string, int> string_to_lock_items = create_string_to_lock_items();
	const std::map<int, std::string> lock_items_to_string = create_lock_items_to_string();

	lock_items_enum lock_axis() {
		STRING_TYPE_GETTER("lock_axis", static_cast<lock_items_enum>(string_to_lock_items.at(resstr)))
	}

	void lock_axis(lock_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "lock_axis", lock_items_to_string.at(value))
	}
};

class ActionConstraint : public Constraint {
public:
	ActionConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	ActionConstraint() : Constraint(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	enum transform_channel_items_enum {
		transform_channel_items_LOCATION_X = 20,	
		transform_channel_items_LOCATION_Y = 21,	
		transform_channel_items_LOCATION_Z = 22,	
		transform_channel_items_ROTATION_X = 0,	
		transform_channel_items_ROTATION_Y = 1,	
		transform_channel_items_ROTATION_Z = 2,	
		transform_channel_items_SCALE_X = 10,	
		transform_channel_items_SCALE_Y = 11,	
		transform_channel_items_SCALE_Z = 12	
	};

	std::map<std::string, int> create_string_to_transform_channel_items() {
		return {{"LOCATION_X", transform_channel_items_LOCATION_X}, {"LOCATION_Y", transform_channel_items_LOCATION_Y}, {"LOCATION_Z", transform_channel_items_LOCATION_Z}, {"ROTATION_X", transform_channel_items_ROTATION_X}, {"ROTATION_Y", transform_channel_items_ROTATION_Y}, {"ROTATION_Z", transform_channel_items_ROTATION_Z}, {"SCALE_X", transform_channel_items_SCALE_X}, {"SCALE_Y", transform_channel_items_SCALE_Y}, {"SCALE_Z", transform_channel_items_SCALE_Z}};
	};

	std::map<int, std::string> create_transform_channel_items_to_string() {
		return {{transform_channel_items_LOCATION_X, "LOCATION_X"}, {transform_channel_items_LOCATION_Y, "LOCATION_Y"}, {transform_channel_items_LOCATION_Z, "LOCATION_Z"}, {transform_channel_items_ROTATION_X, "ROTATION_X"}, {transform_channel_items_ROTATION_Y, "ROTATION_Y"}, {transform_channel_items_ROTATION_Z, "ROTATION_Z"}, {transform_channel_items_SCALE_X, "SCALE_X"}, {transform_channel_items_SCALE_Y, "SCALE_Y"}, {transform_channel_items_SCALE_Z, "SCALE_Z"}};
	};

	const std::map<std::string, int> string_to_transform_channel_items = create_string_to_transform_channel_items();
	const std::map<int, std::string> transform_channel_items_to_string = create_transform_channel_items_to_string();

	transform_channel_items_enum transform_channel() {
		STRING_TYPE_GETTER("transform_channel", static_cast<transform_channel_items_enum>(string_to_transform_channel_items.at(resstr)))
	}

	void transform_channel(transform_channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "transform_channel", transform_channel_items_to_string.at(value))
	}

	Action action() {
		CLASS_TYPES_GETTER(Action, "action")
	}

	bool use_bone_object_action() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bone_object_action")
	}

	void use_bone_object_action(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bone_object_action", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	float max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max")
	}

	void max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max", value)
	}

	float min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min")
	}

	void min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min", value)
	}
};

class CopyScaleConstraint : public Constraint {
public:
	CopyScaleConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	CopyScaleConstraint() : Constraint(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z")
	}

	void use_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z", value)
	}

	bool use_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_offset")
	}

	void use_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_offset", value)
	}
};

class MaintainVolumeConstraint : public Constraint {
public:
	MaintainVolumeConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	MaintainVolumeConstraint() : Constraint(0) { }

	enum volume_items_enum {
		volume_items_SAMEVOL_X = 0,	
		volume_items_SAMEVOL_Y = 1,	
		volume_items_SAMEVOL_Z = 2	
	};

	std::map<std::string, int> create_string_to_volume_items() {
		return {{"SAMEVOL_X", volume_items_SAMEVOL_X}, {"SAMEVOL_Y", volume_items_SAMEVOL_Y}, {"SAMEVOL_Z", volume_items_SAMEVOL_Z}};
	};

	std::map<int, std::string> create_volume_items_to_string() {
		return {{volume_items_SAMEVOL_X, "SAMEVOL_X"}, {volume_items_SAMEVOL_Y, "SAMEVOL_Y"}, {volume_items_SAMEVOL_Z, "SAMEVOL_Z"}};
	};

	const std::map<std::string, int> string_to_volume_items = create_string_to_volume_items();
	const std::map<int, std::string> volume_items_to_string = create_volume_items_to_string();

	volume_items_enum free_axis() {
		STRING_TYPE_GETTER("free_axis", static_cast<volume_items_enum>(string_to_volume_items.at(resstr)))
	}

	void free_axis(volume_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "free_axis", volume_items_to_string.at(value))
	}

	float volume() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume")
	}

	void volume(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume", value)
	}
};

class CopyLocationConstraint : public Constraint {
public:
	CopyLocationConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	CopyLocationConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z")
	}

	void use_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z", value)
	}

	bool invert_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_x")
	}

	void invert_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_x", value)
	}

	bool invert_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_y")
	}

	void invert_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_y", value)
	}

	bool invert_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_z")
	}

	void invert_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_z", value)
	}

	bool use_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_offset")
	}

	void use_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_offset", value)
	}
};

class CopyRotationConstraint : public Constraint {
public:
	CopyRotationConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	CopyRotationConstraint() : Constraint(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z")
	}

	void use_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z", value)
	}

	bool invert_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_x")
	}

	void invert_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_x", value)
	}

	bool invert_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_y")
	}

	void invert_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_y", value)
	}

	bool invert_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_z")
	}

	void invert_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_z", value)
	}

	bool use_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_offset")
	}

	void use_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_offset", value)
	}
};

class CopyTransformsConstraint : public Constraint {
public:
	CopyTransformsConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	CopyTransformsConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}
};

class FloorConstraint : public Constraint {
public:
	FloorConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	FloorConstraint() : Constraint(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	enum minmax_items_enum {
		minmax_items_FLOOR_X = 0,	
		minmax_items_FLOOR_Y = 1,	
		minmax_items_FLOOR_Z = 2,	
		minmax_items_FLOOR_NEGATIVE_X = 3,	
		minmax_items_FLOOR_NEGATIVE_Y = 4,	
		minmax_items_FLOOR_NEGATIVE_Z = 5	
	};

	std::map<std::string, int> create_string_to_minmax_items() {
		return {{"FLOOR_X", minmax_items_FLOOR_X}, {"FLOOR_Y", minmax_items_FLOOR_Y}, {"FLOOR_Z", minmax_items_FLOOR_Z}, {"FLOOR_NEGATIVE_X", minmax_items_FLOOR_NEGATIVE_X}, {"FLOOR_NEGATIVE_Y", minmax_items_FLOOR_NEGATIVE_Y}, {"FLOOR_NEGATIVE_Z", minmax_items_FLOOR_NEGATIVE_Z}};
	};

	std::map<int, std::string> create_minmax_items_to_string() {
		return {{minmax_items_FLOOR_X, "FLOOR_X"}, {minmax_items_FLOOR_Y, "FLOOR_Y"}, {minmax_items_FLOOR_Z, "FLOOR_Z"}, {minmax_items_FLOOR_NEGATIVE_X, "FLOOR_NEGATIVE_X"}, {minmax_items_FLOOR_NEGATIVE_Y, "FLOOR_NEGATIVE_Y"}, {minmax_items_FLOOR_NEGATIVE_Z, "FLOOR_NEGATIVE_Z"}};
	};

	const std::map<std::string, int> string_to_minmax_items = create_string_to_minmax_items();
	const std::map<int, std::string> minmax_items_to_string = create_minmax_items_to_string();

	minmax_items_enum floor_location() {
		STRING_TYPE_GETTER("floor_location", static_cast<minmax_items_enum>(string_to_minmax_items.at(resstr)))
	}

	void floor_location(minmax_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "floor_location", minmax_items_to_string.at(value))
	}

	bool use_sticky() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sticky")
	}

	void use_sticky(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sticky", value)
	}

	bool use_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotation")
	}

	void use_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotation", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}
};

class TrackToConstraint : public Constraint {
public:
	TrackToConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	TrackToConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	enum track_items_enum {
		track_items_TRACK_X = 0,	
		track_items_TRACK_Y = 1,	
		track_items_TRACK_Z = 2,	
		track_items_TRACK_NEGATIVE_X = 3,	
		track_items_TRACK_NEGATIVE_Y = 4,	
		track_items_TRACK_NEGATIVE_Z = 5	
	};

	std::map<std::string, int> create_string_to_track_items() {
		return {{"TRACK_X", track_items_TRACK_X}, {"TRACK_Y", track_items_TRACK_Y}, {"TRACK_Z", track_items_TRACK_Z}, {"TRACK_NEGATIVE_X", track_items_TRACK_NEGATIVE_X}, {"TRACK_NEGATIVE_Y", track_items_TRACK_NEGATIVE_Y}, {"TRACK_NEGATIVE_Z", track_items_TRACK_NEGATIVE_Z}};
	};

	std::map<int, std::string> create_track_items_to_string() {
		return {{track_items_TRACK_X, "TRACK_X"}, {track_items_TRACK_Y, "TRACK_Y"}, {track_items_TRACK_Z, "TRACK_Z"}, {track_items_TRACK_NEGATIVE_X, "TRACK_NEGATIVE_X"}, {track_items_TRACK_NEGATIVE_Y, "TRACK_NEGATIVE_Y"}, {track_items_TRACK_NEGATIVE_Z, "TRACK_NEGATIVE_Z"}};
	};

	const std::map<std::string, int> string_to_track_items = create_string_to_track_items();
	const std::map<int, std::string> track_items_to_string = create_track_items_to_string();

	track_items_enum track_axis() {
		STRING_TYPE_GETTER("track_axis", static_cast<track_items_enum>(string_to_track_items.at(resstr)))
	}

	void track_axis(track_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "track_axis", track_items_to_string.at(value))
	}

	enum up_items_enum {
		up_items_UP_X = 0,	
		up_items_UP_Y = 1,	
		up_items_UP_Z = 2	
	};

	std::map<std::string, int> create_string_to_up_items() {
		return {{"UP_X", up_items_UP_X}, {"UP_Y", up_items_UP_Y}, {"UP_Z", up_items_UP_Z}};
	};

	std::map<int, std::string> create_up_items_to_string() {
		return {{up_items_UP_X, "UP_X"}, {up_items_UP_Y, "UP_Y"}, {up_items_UP_Z, "UP_Z"}};
	};

	const std::map<std::string, int> string_to_up_items = create_string_to_up_items();
	const std::map<int, std::string> up_items_to_string = create_up_items_to_string();

	up_items_enum up_axis() {
		STRING_TYPE_GETTER("up_axis", static_cast<up_items_enum>(string_to_up_items.at(resstr)))
	}

	void up_axis(up_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "up_axis", up_items_to_string.at(value))
	}

	bool use_target_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_target_z")
	}

	void use_target_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_target_z", value)
	}
};

class KinematicConstraint : public Constraint {
public:
	KinematicConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	KinematicConstraint() : Constraint(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	Object pole_target();

	std::string pole_subtarget() {
		STRING_TYPE_GETTER("pole_subtarget", resstr)
	}

	void pole_subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "pole_subtarget", value)
	}

	float pole_angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pole_angle")
	}

	void pole_angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pole_angle", value)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	float orient_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "orient_weight")
	}

	void orient_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "orient_weight", value)
	}

	int chain_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "chain_count")
	}

	void chain_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "chain_count", value)
	}

	bool use_tail() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tail")
	}

	void use_tail(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tail", value)
	}

	enum constraint_ik_axisref_items_enum {
		constraint_ik_axisref_items_BONE = 0,	
		constraint_ik_axisref_items_TARGET = 16384	
	};

	std::map<std::string, int> create_string_to_constraint_ik_axisref_items() {
		return {{"BONE", constraint_ik_axisref_items_BONE}, {"TARGET", constraint_ik_axisref_items_TARGET}};
	};

	std::map<int, std::string> create_constraint_ik_axisref_items_to_string() {
		return {{constraint_ik_axisref_items_BONE, "BONE"}, {constraint_ik_axisref_items_TARGET, "TARGET"}};
	};

	const std::map<std::string, int> string_to_constraint_ik_axisref_items = create_string_to_constraint_ik_axisref_items();
	const std::map<int, std::string> constraint_ik_axisref_items_to_string = create_constraint_ik_axisref_items_to_string();

	constraint_ik_axisref_items_enum reference_axis() {
		STRING_TYPE_GETTER("reference_axis", static_cast<constraint_ik_axisref_items_enum>(string_to_constraint_ik_axisref_items.at(resstr)))
	}

	void reference_axis(constraint_ik_axisref_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "reference_axis", constraint_ik_axisref_items_to_string.at(value))
	}

	bool use_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_location")
	}

	void use_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_location", value)
	}

	bool lock_location_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_location_x")
	}

	void lock_location_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_location_x", value)
	}

	bool lock_location_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_location_y")
	}

	void lock_location_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_location_y", value)
	}

	bool lock_location_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_location_z")
	}

	void lock_location_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_location_z", value)
	}

	bool use_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotation")
	}

	void use_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotation", value)
	}

	bool lock_rotation_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_x")
	}

	void lock_rotation_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_x", value)
	}

	bool lock_rotation_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_y")
	}

	void lock_rotation_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_y", value)
	}

	bool lock_rotation_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_z")
	}

	void lock_rotation_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_z", value)
	}

	bool use_stretch() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stretch")
	}

	void use_stretch(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stretch", value)
	}

	enum constraint_ik_type_items_enum {
		constraint_ik_type_items_COPY_POSE = 0,	
		constraint_ik_type_items_DISTANCE = 1	
	};

	std::map<std::string, int> create_string_to_constraint_ik_type_items() {
		return {{"COPY_POSE", constraint_ik_type_items_COPY_POSE}, {"DISTANCE", constraint_ik_type_items_DISTANCE}};
	};

	std::map<int, std::string> create_constraint_ik_type_items_to_string() {
		return {{constraint_ik_type_items_COPY_POSE, "COPY_POSE"}, {constraint_ik_type_items_DISTANCE, "DISTANCE"}};
	};

	const std::map<std::string, int> string_to_constraint_ik_type_items = create_string_to_constraint_ik_type_items();
	const std::map<int, std::string> constraint_ik_type_items_to_string = create_constraint_ik_type_items_to_string();

	constraint_ik_type_items_enum ik_type() {
		STRING_TYPE_GETTER("ik_type", static_cast<constraint_ik_type_items_enum>(string_to_constraint_ik_type_items.at(resstr)))
	}

	void ik_type(constraint_ik_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ik_type", constraint_ik_type_items_to_string.at(value))
	}

	enum constraint_distance_items_enum {
		constraint_distance_items_LIMITDIST_INSIDE = 0,	
		constraint_distance_items_LIMITDIST_OUTSIDE = 1,	
		constraint_distance_items_LIMITDIST_ONSURFACE = 2	
	};

	std::map<std::string, int> create_string_to_constraint_distance_items() {
		return {{"LIMITDIST_INSIDE", constraint_distance_items_LIMITDIST_INSIDE}, {"LIMITDIST_OUTSIDE", constraint_distance_items_LIMITDIST_OUTSIDE}, {"LIMITDIST_ONSURFACE", constraint_distance_items_LIMITDIST_ONSURFACE}};
	};

	std::map<int, std::string> create_constraint_distance_items_to_string() {
		return {{constraint_distance_items_LIMITDIST_INSIDE, "LIMITDIST_INSIDE"}, {constraint_distance_items_LIMITDIST_OUTSIDE, "LIMITDIST_OUTSIDE"}, {constraint_distance_items_LIMITDIST_ONSURFACE, "LIMITDIST_ONSURFACE"}};
	};

	const std::map<std::string, int> string_to_constraint_distance_items = create_string_to_constraint_distance_items();
	const std::map<int, std::string> constraint_distance_items_to_string = create_constraint_distance_items_to_string();

	constraint_distance_items_enum limit_mode() {
		STRING_TYPE_GETTER("limit_mode", static_cast<constraint_distance_items_enum>(string_to_constraint_distance_items.at(resstr)))
	}

	void limit_mode(constraint_distance_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit_mode", constraint_distance_items_to_string.at(value))
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}
};

class RigidBodyJointConstraint : public Constraint {
public:
	RigidBodyJointConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	RigidBodyJointConstraint() : Constraint(0) { }

	Object target();

	Object child();

	enum pivot_items_enum {
		pivot_items_BALL = 1,	
		pivot_items_HINGE = 2,	
		pivot_items_CONE_TWIST = 4,	
		pivot_items_GENERIC_6_DOF = 12	
	};

	std::map<std::string, int> create_string_to_pivot_items() {
		return {{"BALL", pivot_items_BALL}, {"HINGE", pivot_items_HINGE}, {"CONE_TWIST", pivot_items_CONE_TWIST}, {"GENERIC_6_DOF", pivot_items_GENERIC_6_DOF}};
	};

	std::map<int, std::string> create_pivot_items_to_string() {
		return {{pivot_items_BALL, "BALL"}, {pivot_items_HINGE, "HINGE"}, {pivot_items_CONE_TWIST, "CONE_TWIST"}, {pivot_items_GENERIC_6_DOF, "GENERIC_6_DOF"}};
	};

	const std::map<std::string, int> string_to_pivot_items = create_string_to_pivot_items();
	const std::map<int, std::string> pivot_items_to_string = create_pivot_items_to_string();

	pivot_items_enum pivot_type() {
		STRING_TYPE_GETTER("pivot_type", static_cast<pivot_items_enum>(string_to_pivot_items.at(resstr)))
	}

	void pivot_type(pivot_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pivot_type", pivot_items_to_string.at(value))
	}

	float pivot_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pivot_x")
	}

	void pivot_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pivot_x", value)
	}

	float pivot_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pivot_y")
	}

	void pivot_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pivot_y", value)
	}

	float pivot_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pivot_z")
	}

	void pivot_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pivot_z", value)
	}

	float axis_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "axis_x")
	}

	void axis_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "axis_x", value)
	}

	float axis_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "axis_y")
	}

	void axis_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "axis_y", value)
	}

	float axis_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "axis_z")
	}

	void axis_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "axis_z", value)
	}

	bool use_linked_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_linked_collision")
	}

	void use_linked_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_linked_collision", value)
	}

	bool show_pivot() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_pivot")
	}

	void show_pivot(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_pivot", value)
	}

	float limit_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_min_x")
	}

	void limit_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_min_x", value)
	}

	float limit_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_min_y")
	}

	void limit_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_min_y", value)
	}

	float limit_min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_min_z")
	}

	void limit_min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_min_z", value)
	}

	float limit_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_max_x")
	}

	void limit_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_max_x", value)
	}

	float limit_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_max_y")
	}

	void limit_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_max_y", value)
	}

	float limit_max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_max_z")
	}

	void limit_max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_max_z", value)
	}

	float limit_angle_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_angle_min_x")
	}

	void limit_angle_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_angle_min_x", value)
	}

	float limit_angle_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_angle_min_y")
	}

	void limit_angle_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_angle_min_y", value)
	}

	float limit_angle_min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_angle_min_z")
	}

	void limit_angle_min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_angle_min_z", value)
	}

	float limit_angle_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_angle_max_x")
	}

	void limit_angle_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_angle_max_x", value)
	}

	float limit_angle_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_angle_max_y")
	}

	void limit_angle_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_angle_max_y", value)
	}

	float limit_angle_max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_angle_max_z")
	}

	void limit_angle_max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_angle_max_z", value)
	}

	bool use_limit_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_x")
	}

	void use_limit_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_x", value)
	}

	bool use_limit_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_y")
	}

	void use_limit_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_y", value)
	}

	bool use_limit_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_z")
	}

	void use_limit_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_z", value)
	}

	bool use_angular_limit_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_angular_limit_x")
	}

	void use_angular_limit_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_angular_limit_x", value)
	}

	bool use_angular_limit_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_angular_limit_y")
	}

	void use_angular_limit_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_angular_limit_y", value)
	}

	bool use_angular_limit_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_angular_limit_z")
	}

	void use_angular_limit_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_angular_limit_z", value)
	}
};

class ClampToConstraint : public Constraint {
public:
	ClampToConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	ClampToConstraint() : Constraint(0) { }

	Object target();

	enum clamp_items_enum {
		clamp_items_CLAMPTO_AUTO = 0,	
		clamp_items_CLAMPTO_X = 1,	
		clamp_items_CLAMPTO_Y = 2,	
		clamp_items_CLAMPTO_Z = 3	
	};

	std::map<std::string, int> create_string_to_clamp_items() {
		return {{"CLAMPTO_AUTO", clamp_items_CLAMPTO_AUTO}, {"CLAMPTO_X", clamp_items_CLAMPTO_X}, {"CLAMPTO_Y", clamp_items_CLAMPTO_Y}, {"CLAMPTO_Z", clamp_items_CLAMPTO_Z}};
	};

	std::map<int, std::string> create_clamp_items_to_string() {
		return {{clamp_items_CLAMPTO_AUTO, "CLAMPTO_AUTO"}, {clamp_items_CLAMPTO_X, "CLAMPTO_X"}, {clamp_items_CLAMPTO_Y, "CLAMPTO_Y"}, {clamp_items_CLAMPTO_Z, "CLAMPTO_Z"}};
	};

	const std::map<std::string, int> string_to_clamp_items = create_string_to_clamp_items();
	const std::map<int, std::string> clamp_items_to_string = create_clamp_items_to_string();

	clamp_items_enum main_axis() {
		STRING_TYPE_GETTER("main_axis", static_cast<clamp_items_enum>(string_to_clamp_items.at(resstr)))
	}

	void main_axis(clamp_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "main_axis", clamp_items_to_string.at(value))
	}

	bool use_cyclic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic")
	}

	void use_cyclic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic", value)
	}
};

class LimitDistanceConstraint : public Constraint {
public:
	LimitDistanceConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	LimitDistanceConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	enum constraint_distance_items_enum {
		constraint_distance_items_LIMITDIST_INSIDE = 0,	
		constraint_distance_items_LIMITDIST_OUTSIDE = 1,	
		constraint_distance_items_LIMITDIST_ONSURFACE = 2	
	};

	std::map<std::string, int> create_string_to_constraint_distance_items() {
		return {{"LIMITDIST_INSIDE", constraint_distance_items_LIMITDIST_INSIDE}, {"LIMITDIST_OUTSIDE", constraint_distance_items_LIMITDIST_OUTSIDE}, {"LIMITDIST_ONSURFACE", constraint_distance_items_LIMITDIST_ONSURFACE}};
	};

	std::map<int, std::string> create_constraint_distance_items_to_string() {
		return {{constraint_distance_items_LIMITDIST_INSIDE, "LIMITDIST_INSIDE"}, {constraint_distance_items_LIMITDIST_OUTSIDE, "LIMITDIST_OUTSIDE"}, {constraint_distance_items_LIMITDIST_ONSURFACE, "LIMITDIST_ONSURFACE"}};
	};

	const std::map<std::string, int> string_to_constraint_distance_items = create_string_to_constraint_distance_items();
	const std::map<int, std::string> constraint_distance_items_to_string = create_constraint_distance_items_to_string();

	constraint_distance_items_enum limit_mode() {
		STRING_TYPE_GETTER("limit_mode", static_cast<constraint_distance_items_enum>(string_to_constraint_distance_items.at(resstr)))
	}

	void limit_mode(constraint_distance_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit_mode", constraint_distance_items_to_string.at(value))
	}

	bool use_transform_limit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_transform_limit")
	}

	void use_transform_limit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_transform_limit", value)
	}
};

class LimitScaleConstraint : public Constraint {
public:
	LimitScaleConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	LimitScaleConstraint() : Constraint(0) { }

	bool use_min_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_x")
	}

	void use_min_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_x", value)
	}

	bool use_min_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_y")
	}

	void use_min_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_y", value)
	}

	bool use_min_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_z")
	}

	void use_min_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_z", value)
	}

	bool use_max_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_x")
	}

	void use_max_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_x", value)
	}

	bool use_max_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_y")
	}

	void use_max_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_y", value)
	}

	bool use_max_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_z")
	}

	void use_max_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_z", value)
	}

	float min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_x")
	}

	void min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_x", value)
	}

	float min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_y")
	}

	void min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_y", value)
	}

	float min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_z")
	}

	void min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_z", value)
	}

	float max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_x")
	}

	void max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_x", value)
	}

	float max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_y")
	}

	void max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_y", value)
	}

	float max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_z")
	}

	void max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_z", value)
	}

	bool use_transform_limit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_transform_limit")
	}

	void use_transform_limit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_transform_limit", value)
	}
};

class LimitRotationConstraint : public Constraint {
public:
	LimitRotationConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	LimitRotationConstraint() : Constraint(0) { }

	bool use_limit_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_x")
	}

	void use_limit_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_x", value)
	}

	bool use_limit_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_y")
	}

	void use_limit_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_y", value)
	}

	bool use_limit_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_z")
	}

	void use_limit_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_z", value)
	}

	float min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_x")
	}

	void min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_x", value)
	}

	float min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_y")
	}

	void min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_y", value)
	}

	float min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_z")
	}

	void min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_z", value)
	}

	float max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_x")
	}

	void max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_x", value)
	}

	float max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_y")
	}

	void max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_y", value)
	}

	float max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_z")
	}

	void max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_z", value)
	}

	bool use_transform_limit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_transform_limit")
	}

	void use_transform_limit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_transform_limit", value)
	}
};

class LimitLocationConstraint : public Constraint {
public:
	LimitLocationConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	LimitLocationConstraint() : Constraint(0) { }

	bool use_min_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_x")
	}

	void use_min_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_x", value)
	}

	bool use_min_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_y")
	}

	void use_min_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_y", value)
	}

	bool use_min_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_z")
	}

	void use_min_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_z", value)
	}

	bool use_max_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_x")
	}

	void use_max_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_x", value)
	}

	bool use_max_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_y")
	}

	void use_max_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_y", value)
	}

	bool use_max_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_z")
	}

	void use_max_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_z", value)
	}

	float min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_x")
	}

	void min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_x", value)
	}

	float min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_y")
	}

	void min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_y", value)
	}

	float min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_z")
	}

	void min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_z", value)
	}

	float max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_x")
	}

	void max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_x", value)
	}

	float max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_y")
	}

	void max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_y", value)
	}

	float max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_z")
	}

	void max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_z", value)
	}

	bool use_transform_limit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_transform_limit")
	}

	void use_transform_limit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_transform_limit", value)
	}
};

class TransformConstraint : public Constraint {
public:
	TransformConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	TransformConstraint() : Constraint(0) { }

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	enum transform_items_enum {
		transform_items_LOCATION = 0,	
		transform_items_ROTATION = 1,	
		transform_items_SCALE = 2	
	};

	std::map<std::string, int> create_string_to_transform_items() {
		return {{"LOCATION", transform_items_LOCATION}, {"ROTATION", transform_items_ROTATION}, {"SCALE", transform_items_SCALE}};
	};

	std::map<int, std::string> create_transform_items_to_string() {
		return {{transform_items_LOCATION, "LOCATION"}, {transform_items_ROTATION, "ROTATION"}, {transform_items_SCALE, "SCALE"}};
	};

	const std::map<std::string, int> string_to_transform_items = create_string_to_transform_items();
	const std::map<int, std::string> transform_items_to_string = create_transform_items_to_string();

	transform_items_enum map_from() {
		STRING_TYPE_GETTER("map_from", static_cast<transform_items_enum>(string_to_transform_items.at(resstr)))
	}

	void map_from(transform_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "map_from", transform_items_to_string.at(value))
	}

	transform_items_enum map_to() {
		STRING_TYPE_GETTER("map_to", static_cast<transform_items_enum>(string_to_transform_items.at(resstr)))
	}

	void map_to(transform_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "map_to", transform_items_to_string.at(value))
	}

	enum axis_map_items_enum {
		axis_map_items_X = 0,	
		axis_map_items_Y = 1,	
		axis_map_items_Z = 2	
	};

	std::map<std::string, int> create_string_to_axis_map_items() {
		return {{"X", axis_map_items_X}, {"Y", axis_map_items_Y}, {"Z", axis_map_items_Z}};
	};

	std::map<int, std::string> create_axis_map_items_to_string() {
		return {{axis_map_items_X, "X"}, {axis_map_items_Y, "Y"}, {axis_map_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_axis_map_items = create_string_to_axis_map_items();
	const std::map<int, std::string> axis_map_items_to_string = create_axis_map_items_to_string();

	axis_map_items_enum map_to_x_from() {
		STRING_TYPE_GETTER("map_to_x_from", static_cast<axis_map_items_enum>(string_to_axis_map_items.at(resstr)))
	}

	void map_to_x_from(axis_map_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "map_to_x_from", axis_map_items_to_string.at(value))
	}

	axis_map_items_enum map_to_y_from() {
		STRING_TYPE_GETTER("map_to_y_from", static_cast<axis_map_items_enum>(string_to_axis_map_items.at(resstr)))
	}

	void map_to_y_from(axis_map_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "map_to_y_from", axis_map_items_to_string.at(value))
	}

	axis_map_items_enum map_to_z_from() {
		STRING_TYPE_GETTER("map_to_z_from", static_cast<axis_map_items_enum>(string_to_axis_map_items.at(resstr)))
	}

	void map_to_z_from(axis_map_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "map_to_z_from", axis_map_items_to_string.at(value))
	}

	bool use_motion_extrapolate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_motion_extrapolate")
	}

	void use_motion_extrapolate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_motion_extrapolate", value)
	}

	float from_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_x")
	}

	void from_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_x", value)
	}

	float from_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_y")
	}

	void from_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_y", value)
	}

	float from_min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_z")
	}

	void from_min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_z", value)
	}

	float from_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_x")
	}

	void from_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_x", value)
	}

	float from_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_y")
	}

	void from_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_y", value)
	}

	float from_max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_z")
	}

	void from_max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_z", value)
	}

	float to_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_x")
	}

	void to_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_x", value)
	}

	float to_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_y")
	}

	void to_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_y", value)
	}

	float to_min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_z")
	}

	void to_min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_z", value)
	}

	float to_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_x")
	}

	void to_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_x", value)
	}

	float to_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_y")
	}

	void to_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_y", value)
	}

	float to_max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_z")
	}

	void to_max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_z", value)
	}

	float from_min_x_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_x_rot")
	}

	void from_min_x_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_x_rot", value)
	}

	float from_min_y_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_y_rot")
	}

	void from_min_y_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_y_rot", value)
	}

	float from_min_z_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_z_rot")
	}

	void from_min_z_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_z_rot", value)
	}

	float from_max_x_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_x_rot")
	}

	void from_max_x_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_x_rot", value)
	}

	float from_max_y_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_y_rot")
	}

	void from_max_y_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_y_rot", value)
	}

	float from_max_z_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_z_rot")
	}

	void from_max_z_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_z_rot", value)
	}

	float to_min_x_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_x_rot")
	}

	void to_min_x_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_x_rot", value)
	}

	float to_min_y_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_y_rot")
	}

	void to_min_y_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_y_rot", value)
	}

	float to_min_z_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_z_rot")
	}

	void to_min_z_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_z_rot", value)
	}

	float to_max_x_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_x_rot")
	}

	void to_max_x_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_x_rot", value)
	}

	float to_max_y_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_y_rot")
	}

	void to_max_y_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_y_rot", value)
	}

	float to_max_z_rot() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_z_rot")
	}

	void to_max_z_rot(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_z_rot", value)
	}

	float from_min_x_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_x_scale")
	}

	void from_min_x_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_x_scale", value)
	}

	float from_min_y_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_y_scale")
	}

	void from_min_y_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_y_scale", value)
	}

	float from_min_z_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_min_z_scale")
	}

	void from_min_z_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_min_z_scale", value)
	}

	float from_max_x_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_x_scale")
	}

	void from_max_x_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_x_scale", value)
	}

	float from_max_y_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_y_scale")
	}

	void from_max_y_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_y_scale", value)
	}

	float from_max_z_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "from_max_z_scale")
	}

	void from_max_z_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "from_max_z_scale", value)
	}

	float to_min_x_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_x_scale")
	}

	void to_min_x_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_x_scale", value)
	}

	float to_min_y_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_y_scale")
	}

	void to_min_y_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_y_scale", value)
	}

	float to_min_z_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_min_z_scale")
	}

	void to_min_z_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_min_z_scale", value)
	}

	float to_max_x_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_x_scale")
	}

	void to_max_x_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_x_scale", value)
	}

	float to_max_y_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_y_scale")
	}

	void to_max_y_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_y_scale", value)
	}

	float to_max_z_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "to_max_z_scale")
	}

	void to_max_z_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "to_max_z_scale", value)
	}
};

class ShrinkwrapConstraint : public Constraint {
public:
	ShrinkwrapConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	ShrinkwrapConstraint() : Constraint(0) { }

	Object target();

	enum type_items_enum {
		type_items_NEAREST_SURFACE = 0,	
		type_items_PROJECT = 1,	
		type_items_NEAREST_VERTEX = 2	
	};

	std::map<std::string, int> create_string_to_type_items() {
		return {{"NEAREST_SURFACE", type_items_NEAREST_SURFACE}, {"PROJECT", type_items_PROJECT}, {"NEAREST_VERTEX", type_items_NEAREST_VERTEX}};
	};

	std::map<int, std::string> create_type_items_to_string() {
		return {{type_items_NEAREST_SURFACE, "NEAREST_SURFACE"}, {type_items_PROJECT, "PROJECT"}, {type_items_NEAREST_VERTEX, "NEAREST_VERTEX"}};
	};

	const std::map<std::string, int> string_to_type_items = create_string_to_type_items();
	const std::map<int, std::string> type_items_to_string = create_type_items_to_string();

	type_items_enum shrinkwrap_type() {
		STRING_TYPE_GETTER("shrinkwrap_type", static_cast<type_items_enum>(string_to_type_items.at(resstr)))
	}

	void shrinkwrap_type(type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shrinkwrap_type", type_items_to_string.at(value))
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	enum object_axis_items_enum {
		object_axis_items_POS_X = 0,	
		object_axis_items_POS_Y = 1,	
		object_axis_items_POS_Z = 2,	
		object_axis_items_NEG_X = 3,	
		object_axis_items_NEG_Y = 4,	
		object_axis_items_NEG_Z = 5	
	};

	std::map<std::string, int> create_string_to_object_axis_items() {
		return {{"POS_X", object_axis_items_POS_X}, {"POS_Y", object_axis_items_POS_Y}, {"POS_Z", object_axis_items_POS_Z}, {"NEG_X", object_axis_items_NEG_X}, {"NEG_Y", object_axis_items_NEG_Y}, {"NEG_Z", object_axis_items_NEG_Z}};
	};

	std::map<int, std::string> create_object_axis_items_to_string() {
		return {{object_axis_items_POS_X, "POS_X"}, {object_axis_items_POS_Y, "POS_Y"}, {object_axis_items_POS_Z, "POS_Z"}, {object_axis_items_NEG_X, "NEG_X"}, {object_axis_items_NEG_Y, "NEG_Y"}, {object_axis_items_NEG_Z, "NEG_Z"}};
	};

	const std::map<std::string, int> string_to_object_axis_items = create_string_to_object_axis_items();
	const std::map<int, std::string> object_axis_items_to_string = create_object_axis_items_to_string();

	object_axis_items_enum project_axis() {
		STRING_TYPE_GETTER("project_axis", static_cast<object_axis_items_enum>(string_to_object_axis_items.at(resstr)))
	}

	void project_axis(object_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "project_axis", object_axis_items_to_string.at(value))
	}

	enum owner_space_pchan_items_enum {
		owner_space_pchan_items_WORLD = 0,	
		owner_space_pchan_items_POSE = 2,	
		owner_space_pchan_items_LOCAL_WITH_PARENT = 3,	
		owner_space_pchan_items_LOCAL = 1	
	};

	std::map<std::string, int> create_string_to_owner_space_pchan_items() {
		return {{"WORLD", owner_space_pchan_items_WORLD}, {"POSE", owner_space_pchan_items_POSE}, {"LOCAL_WITH_PARENT", owner_space_pchan_items_LOCAL_WITH_PARENT}, {"LOCAL", owner_space_pchan_items_LOCAL}};
	};

	std::map<int, std::string> create_owner_space_pchan_items_to_string() {
		return {{owner_space_pchan_items_WORLD, "WORLD"}, {owner_space_pchan_items_POSE, "POSE"}, {owner_space_pchan_items_LOCAL_WITH_PARENT, "LOCAL_WITH_PARENT"}, {owner_space_pchan_items_LOCAL, "LOCAL"}};
	};

	const std::map<std::string, int> string_to_owner_space_pchan_items = create_string_to_owner_space_pchan_items();
	const std::map<int, std::string> owner_space_pchan_items_to_string = create_owner_space_pchan_items_to_string();

	owner_space_pchan_items_enum project_axis_space() {
		STRING_TYPE_GETTER("project_axis_space", static_cast<owner_space_pchan_items_enum>(string_to_owner_space_pchan_items.at(resstr)))
	}

	void project_axis_space(owner_space_pchan_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "project_axis_space", owner_space_pchan_items_to_string.at(value))
	}

	float project_limit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "project_limit")
	}

	void project_limit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "project_limit", value)
	}
};

class DampedTrackConstraint : public Constraint {
public:
	DampedTrackConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	DampedTrackConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	enum damptrack_items_enum {
		damptrack_items_TRACK_X = 0,	
		damptrack_items_TRACK_Y = 1,	
		damptrack_items_TRACK_Z = 2,	
		damptrack_items_TRACK_NEGATIVE_X = 3,	
		damptrack_items_TRACK_NEGATIVE_Y = 4,	
		damptrack_items_TRACK_NEGATIVE_Z = 5	
	};

	std::map<std::string, int> create_string_to_damptrack_items() {
		return {{"TRACK_X", damptrack_items_TRACK_X}, {"TRACK_Y", damptrack_items_TRACK_Y}, {"TRACK_Z", damptrack_items_TRACK_Z}, {"TRACK_NEGATIVE_X", damptrack_items_TRACK_NEGATIVE_X}, {"TRACK_NEGATIVE_Y", damptrack_items_TRACK_NEGATIVE_Y}, {"TRACK_NEGATIVE_Z", damptrack_items_TRACK_NEGATIVE_Z}};
	};

	std::map<int, std::string> create_damptrack_items_to_string() {
		return {{damptrack_items_TRACK_X, "TRACK_X"}, {damptrack_items_TRACK_Y, "TRACK_Y"}, {damptrack_items_TRACK_Z, "TRACK_Z"}, {damptrack_items_TRACK_NEGATIVE_X, "TRACK_NEGATIVE_X"}, {damptrack_items_TRACK_NEGATIVE_Y, "TRACK_NEGATIVE_Y"}, {damptrack_items_TRACK_NEGATIVE_Z, "TRACK_NEGATIVE_Z"}};
	};

	const std::map<std::string, int> string_to_damptrack_items = create_string_to_damptrack_items();
	const std::map<int, std::string> damptrack_items_to_string = create_damptrack_items_to_string();

	damptrack_items_enum track_axis() {
		STRING_TYPE_GETTER("track_axis", static_cast<damptrack_items_enum>(string_to_damptrack_items.at(resstr)))
	}

	void track_axis(damptrack_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "track_axis", damptrack_items_to_string.at(value))
	}
};

class SplineIKConstraint : public Constraint {
public:
	SplineIKConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	SplineIKConstraint() : Constraint(0) { }

	Object target();

	int chain_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "chain_count")
	}

	void chain_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "chain_count", value)
	}

	std::array<float, 32> joint_bindings() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "joint_bindings", 32)
	}

	void joint_bindings(float values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "joint_bindings", 32)
	}

	bool use_chain_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_chain_offset")
	}

	void use_chain_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_chain_offset", value)
	}

	bool use_even_divisions() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_even_divisions")
	}

	void use_even_divisions(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_even_divisions", value)
	}

	bool use_y_stretch() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y_stretch")
	}

	void use_y_stretch(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y_stretch", value)
	}

	bool use_curve_radius() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_curve_radius")
	}

	void use_curve_radius(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_curve_radius", value)
	}

	enum splineik_xz_scale_mode_enum {
		splineik_xz_scale_mode_NONE = 0,	
		splineik_xz_scale_mode_BONE_ORIGINAL = 1,	
		splineik_xz_scale_mode_INVERSE_PRESERVE = 2,	
		splineik_xz_scale_mode_VOLUME_PRESERVE = 3	
	};

	std::map<std::string, int> create_string_to_splineik_xz_scale_mode() {
		return {{"NONE", splineik_xz_scale_mode_NONE}, {"BONE_ORIGINAL", splineik_xz_scale_mode_BONE_ORIGINAL}, {"INVERSE_PRESERVE", splineik_xz_scale_mode_INVERSE_PRESERVE}, {"VOLUME_PRESERVE", splineik_xz_scale_mode_VOLUME_PRESERVE}};
	};

	std::map<int, std::string> create_splineik_xz_scale_mode_to_string() {
		return {{splineik_xz_scale_mode_NONE, "NONE"}, {splineik_xz_scale_mode_BONE_ORIGINAL, "BONE_ORIGINAL"}, {splineik_xz_scale_mode_INVERSE_PRESERVE, "INVERSE_PRESERVE"}, {splineik_xz_scale_mode_VOLUME_PRESERVE, "VOLUME_PRESERVE"}};
	};

	const std::map<std::string, int> string_to_splineik_xz_scale_mode = create_string_to_splineik_xz_scale_mode();
	const std::map<int, std::string> splineik_xz_scale_mode_to_string = create_splineik_xz_scale_mode_to_string();

	splineik_xz_scale_mode_enum xz_scale_mode() {
		STRING_TYPE_GETTER("xz_scale_mode", static_cast<splineik_xz_scale_mode_enum>(string_to_splineik_xz_scale_mode.at(resstr)))
	}

	void xz_scale_mode(splineik_xz_scale_mode_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "xz_scale_mode", splineik_xz_scale_mode_to_string.at(value))
	}

	float bulge() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge")
	}

	void bulge(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge", value)
	}

	bool use_bulge_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bulge_min")
	}

	void use_bulge_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bulge_min", value)
	}

	bool use_bulge_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bulge_max")
	}

	void use_bulge_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bulge_max", value)
	}

	float bulge_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge_min")
	}

	void bulge_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge_min", value)
	}

	float bulge_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge_max")
	}

	void bulge_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge_max", value)
	}

	float bulge_smooth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bulge_smooth")
	}

	void bulge_smooth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bulge_smooth", value)
	}
};

class PivotConstraint : public Constraint {
public:
	PivotConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	PivotConstraint() : Constraint(0) { }

	float head_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "head_tail")
	}

	void head_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "head_tail", value)
	}

	Object target();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	bool use_relative_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative_location")
	}

	void use_relative_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative_location", value)
	}

	VFLOAT3 offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "offset", 3)
	}

	void offset(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset", 3)
	}

	enum pivot_rotAxis_items_enum {
		pivot_rotAxis_items_ALWAYS_ACTIVE = -1,	
		pivot_rotAxis_items_NX = 0,	
		pivot_rotAxis_items_NY = 1,	
		pivot_rotAxis_items_NZ = 2,	
		pivot_rotAxis_items_X = 3,	
		pivot_rotAxis_items_Y = 4,	
		pivot_rotAxis_items_Z = 5	
	};

	std::map<std::string, int> create_string_to_pivot_rotAxis_items() {
		return {{"ALWAYS_ACTIVE", pivot_rotAxis_items_ALWAYS_ACTIVE}, {"NX", pivot_rotAxis_items_NX}, {"NY", pivot_rotAxis_items_NY}, {"NZ", pivot_rotAxis_items_NZ}, {"X", pivot_rotAxis_items_X}, {"Y", pivot_rotAxis_items_Y}, {"Z", pivot_rotAxis_items_Z}};
	};

	std::map<int, std::string> create_pivot_rotAxis_items_to_string() {
		return {{pivot_rotAxis_items_ALWAYS_ACTIVE, "ALWAYS_ACTIVE"}, {pivot_rotAxis_items_NX, "NX"}, {pivot_rotAxis_items_NY, "NY"}, {pivot_rotAxis_items_NZ, "NZ"}, {pivot_rotAxis_items_X, "X"}, {pivot_rotAxis_items_Y, "Y"}, {pivot_rotAxis_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_pivot_rotAxis_items = create_string_to_pivot_rotAxis_items();
	const std::map<int, std::string> pivot_rotAxis_items_to_string = create_pivot_rotAxis_items_to_string();

	pivot_rotAxis_items_enum rotation_range() {
		STRING_TYPE_GETTER("rotation_range", static_cast<pivot_rotAxis_items_enum>(string_to_pivot_rotAxis_items.at(resstr)))
	}

	void rotation_range(pivot_rotAxis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "rotation_range", pivot_rotAxis_items_to_string.at(value))
	}
};

class FollowTrackConstraint : public Constraint {
public:
	FollowTrackConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	FollowTrackConstraint() : Constraint(0) { }

	MovieClip clip();

	std::string track() {
		STRING_TYPE_GETTER("track", resstr)
	}

	void track(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "track", value)
	}

	bool use_active_clip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_active_clip")
	}

	void use_active_clip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_active_clip", value)
	}

	bool use_3d_position() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_3d_position")
	}

	void use_3d_position(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_3d_position", value)
	}

	std::string object_value() {
		STRING_TYPE_GETTER("object", resstr)
	}

	void object_value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "object", value)
	}

	Object camera();

	Object depth_object();

	enum frame_method_items_enum {
		frame_method_items_STRETCH = 0,	
		frame_method_items_FIT = 1,	
		frame_method_items_CROP = 2	
	};

	std::map<std::string, int> create_string_to_frame_method_items() {
		return {{"STRETCH", frame_method_items_STRETCH}, {"FIT", frame_method_items_FIT}, {"CROP", frame_method_items_CROP}};
	};

	std::map<int, std::string> create_frame_method_items_to_string() {
		return {{frame_method_items_STRETCH, "STRETCH"}, {frame_method_items_FIT, "FIT"}, {frame_method_items_CROP, "CROP"}};
	};

	const std::map<std::string, int> string_to_frame_method_items = create_string_to_frame_method_items();
	const std::map<int, std::string> frame_method_items_to_string = create_frame_method_items_to_string();

	frame_method_items_enum frame_method() {
		STRING_TYPE_GETTER("frame_method", static_cast<frame_method_items_enum>(string_to_frame_method_items.at(resstr)))
	}

	void frame_method(frame_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "frame_method", frame_method_items_to_string.at(value))
	}

	bool use_undistorted_position() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_undistorted_position")
	}

	void use_undistorted_position(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_undistorted_position", value)
	}
};

class CameraSolverConstraint : public Constraint {
public:
	CameraSolverConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	CameraSolverConstraint() : Constraint(0) { }

	MovieClip clip();

	bool use_active_clip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_active_clip")
	}

	void use_active_clip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_active_clip", value)
	}
};

class ObjectSolverConstraint : public Constraint {
public:
	ObjectSolverConstraint(PyObject* pyobj) : Constraint(pyobj) {}
	ObjectSolverConstraint() : Constraint(0) { }

	MovieClip clip();

	bool use_active_clip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_active_clip")
	}

	void use_active_clip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_active_clip", value)
	}

	std::string object_value() {
		STRING_TYPE_GETTER("object", resstr)
	}

	void object_value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "object", value)
	}

	Object camera();
};

class Context : public pyUniplug {
public:
	Context(PyObject* pyobj) : pyUniplug(pyobj) {}
	Context() : pyUniplug(0) { }

	WindowManager window_manager();

	Window window();

	Screen screen();

	Area area();

	Space space_data();

	Region region();

	RegionView3D region_data();

	BlendData blend_data();

	Scene scene();

	ToolSettings tool_settings();

	UserPreferences user_preferences();

	enum mode_items_enum {
		mode_items_EDIT_MESH = 0,	
		mode_items_EDIT_CURVE = 1,	
		mode_items_EDIT_SURFACE = 2,	
		mode_items_EDIT_TEXT = 3,	
		mode_items_EDIT_ARMATURE = 4,	
		mode_items_EDIT_METABALL = 5,	
		mode_items_EDIT_LATTICE = 6,	
		mode_items_POSE = 7,	
		mode_items_SCULPT = 8,	
		mode_items_PAINT_WEIGHT = 9,	
		mode_items_PAINT_VERTEX = 10,	
		mode_items_PAINT_TEXTURE = 11,	
		mode_items_PARTICLE = 12,	
		mode_items_OBJECT = 13	
	};

	std::map<std::string, int> create_string_to_mode_items() {
		return {{"EDIT_MESH", mode_items_EDIT_MESH}, {"EDIT_CURVE", mode_items_EDIT_CURVE}, {"EDIT_SURFACE", mode_items_EDIT_SURFACE}, {"EDIT_TEXT", mode_items_EDIT_TEXT}, {"EDIT_ARMATURE", mode_items_EDIT_ARMATURE}, {"EDIT_METABALL", mode_items_EDIT_METABALL}, {"EDIT_LATTICE", mode_items_EDIT_LATTICE}, {"POSE", mode_items_POSE}, {"SCULPT", mode_items_SCULPT}, {"PAINT_WEIGHT", mode_items_PAINT_WEIGHT}, {"PAINT_VERTEX", mode_items_PAINT_VERTEX}, {"PAINT_TEXTURE", mode_items_PAINT_TEXTURE}, {"PARTICLE", mode_items_PARTICLE}, {"OBJECT", mode_items_OBJECT}};
	};

	std::map<int, std::string> create_mode_items_to_string() {
		return {{mode_items_EDIT_MESH, "EDIT_MESH"}, {mode_items_EDIT_CURVE, "EDIT_CURVE"}, {mode_items_EDIT_SURFACE, "EDIT_SURFACE"}, {mode_items_EDIT_TEXT, "EDIT_TEXT"}, {mode_items_EDIT_ARMATURE, "EDIT_ARMATURE"}, {mode_items_EDIT_METABALL, "EDIT_METABALL"}, {mode_items_EDIT_LATTICE, "EDIT_LATTICE"}, {mode_items_POSE, "POSE"}, {mode_items_SCULPT, "SCULPT"}, {mode_items_PAINT_WEIGHT, "PAINT_WEIGHT"}, {mode_items_PAINT_VERTEX, "PAINT_VERTEX"}, {mode_items_PAINT_TEXTURE, "PAINT_TEXTURE"}, {mode_items_PARTICLE, "PARTICLE"}, {mode_items_OBJECT, "OBJECT"}};
	};

	const std::map<std::string, int> string_to_mode_items = create_string_to_mode_items();
	const std::map<int, std::string> mode_items_to_string = create_mode_items_to_string();

	mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<mode_items_enum>(string_to_mode_items.at(resstr)))
	}

	void mode(mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", mode_items_to_string.at(value))
	}
};

class Controller : public pyUniplug {
public:
	Controller(PyObject* pyobj) : pyUniplug(pyobj) {}
	Controller() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum controller_type_items_enum {
		controller_type_items_LOGIC_AND = 0,	
		controller_type_items_LOGIC_OR = 1,	
		controller_type_items_LOGIC_NAND = 4,	
		controller_type_items_LOGIC_NOR = 5,	
		controller_type_items_LOGIC_XOR = 6,	
		controller_type_items_LOGIC_XNOR = 7,	
		controller_type_items_EXPRESSION = 2,	
		controller_type_items_PYTHON = 3	
	};

	std::map<std::string, int> create_string_to_controller_type_items() {
		return {{"LOGIC_AND", controller_type_items_LOGIC_AND}, {"LOGIC_OR", controller_type_items_LOGIC_OR}, {"LOGIC_NAND", controller_type_items_LOGIC_NAND}, {"LOGIC_NOR", controller_type_items_LOGIC_NOR}, {"LOGIC_XOR", controller_type_items_LOGIC_XOR}, {"LOGIC_XNOR", controller_type_items_LOGIC_XNOR}, {"EXPRESSION", controller_type_items_EXPRESSION}, {"PYTHON", controller_type_items_PYTHON}};
	};

	std::map<int, std::string> create_controller_type_items_to_string() {
		return {{controller_type_items_LOGIC_AND, "LOGIC_AND"}, {controller_type_items_LOGIC_OR, "LOGIC_OR"}, {controller_type_items_LOGIC_NAND, "LOGIC_NAND"}, {controller_type_items_LOGIC_NOR, "LOGIC_NOR"}, {controller_type_items_LOGIC_XOR, "LOGIC_XOR"}, {controller_type_items_LOGIC_XNOR, "LOGIC_XNOR"}, {controller_type_items_EXPRESSION, "EXPRESSION"}, {controller_type_items_PYTHON, "PYTHON"}};
	};

	const std::map<std::string, int> string_to_controller_type_items = create_string_to_controller_type_items();
	const std::map<int, std::string> controller_type_items_to_string = create_controller_type_items_to_string();

	controller_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<controller_type_items_enum>(string_to_controller_type_items.at(resstr)))
	}

	void type(controller_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", controller_type_items_to_string.at(value))
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool use_priority() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_priority")
	}

	void use_priority(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_priority", value)
	}

	std::map<std::string, Actuator> actuators() {
		MAP_TYPE_GETTER("actuators", Actuator)
	}

	int states() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "states")
	}

	void states(int value) {
		PRIMITIVE_TYPES_SETTER("i", "states", value)
	}

	void link(Sensor sensor, Actuator actuator);

	void unlink(Sensor sensor, Actuator actuator);
};

class ExpressionController : public Controller {
public:
	ExpressionController(PyObject* pyobj) : Controller(pyobj) {}
	ExpressionController() : Controller(0) { }

	std::string expression() {
		STRING_TYPE_GETTER("expression", resstr)
	}

	void expression(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "expression", value)
	}
};

class PythonController : public Controller {
public:
	PythonController(PyObject* pyobj) : Controller(pyobj) {}
	PythonController() : Controller(0) { }

	enum python_controller_modes_enum {
		python_controller_modes_SCRIPT = 0,	
		python_controller_modes_MODULE = 1	
	};

	std::map<std::string, int> create_string_to_python_controller_modes() {
		return {{"SCRIPT", python_controller_modes_SCRIPT}, {"MODULE", python_controller_modes_MODULE}};
	};

	std::map<int, std::string> create_python_controller_modes_to_string() {
		return {{python_controller_modes_SCRIPT, "SCRIPT"}, {python_controller_modes_MODULE, "MODULE"}};
	};

	const std::map<std::string, int> string_to_python_controller_modes = create_string_to_python_controller_modes();
	const std::map<int, std::string> python_controller_modes_to_string = create_python_controller_modes_to_string();

	python_controller_modes_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<python_controller_modes_enum>(string_to_python_controller_modes.at(resstr)))
	}

	void mode(python_controller_modes_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", python_controller_modes_to_string.at(value))
	}

	Text text();

	std::string module() {
		STRING_TYPE_GETTER("module", resstr)
	}

	void module(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "module", value)
	}

	bool use_debug() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_debug")
	}

	void use_debug(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_debug", value)
	}
};

class AndController : public Controller {
public:
	AndController(PyObject* pyobj) : Controller(pyobj) {}
	AndController() : Controller(0) { }
};

class OrController : public Controller {
public:
	OrController(PyObject* pyobj) : Controller(pyobj) {}
	OrController() : Controller(0) { }
};

class NorController : public Controller {
public:
	NorController(PyObject* pyobj) : Controller(pyobj) {}
	NorController() : Controller(0) { }
};

class NandController : public Controller {
public:
	NandController(PyObject* pyobj) : Controller(pyobj) {}
	NandController() : Controller(0) { }
};

class XorController : public Controller {
public:
	XorController(PyObject* pyobj) : Controller(pyobj) {}
	XorController() : Controller(0) { }
};

class XnorController : public Controller {
public:
	XnorController(PyObject* pyobj) : Controller(pyobj) {}
	XnorController() : Controller(0) { }
};

class Curve : public ID {
public:
	Curve(PyObject* pyobj) : ID(pyobj) {}
	Curve() : ID(0) { }

	Key shape_keys();

	std::map<std::string, Spline> splines();

	bool show_handles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_handles")
	}

	void show_handles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_handles", value)
	}

	bool show_normal_face() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_normal_face")
	}

	void show_normal_face(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_normal_face", value)
	}

	int path_duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "path_duration")
	}

	void path_duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "path_duration", value)
	}

	bool use_path() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_path")
	}

	void use_path(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_path", value)
	}

	bool use_path_follow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_path_follow")
	}

	void use_path_follow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_path_follow", value)
	}

	bool use_stretch() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stretch")
	}

	void use_stretch(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stretch", value)
	}

	bool use_deform_bounds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deform_bounds")
	}

	void use_deform_bounds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deform_bounds", value)
	}

	bool use_radius() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_radius")
	}

	void use_radius(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_radius", value)
	}

	int bevel_resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bevel_resolution")
	}

	void bevel_resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bevel_resolution", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	float extrude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "extrude")
	}

	void extrude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "extrude", value)
	}

	float bevel_depth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bevel_depth")
	}

	void bevel_depth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bevel_depth", value)
	}

	int resolution_u() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_u")
	}

	void resolution_u(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_u", value)
	}

	int resolution_v() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_v")
	}

	void resolution_v(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_v", value)
	}

	int render_resolution_u() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "render_resolution_u")
	}

	void render_resolution_u(int value) {
		PRIMITIVE_TYPES_SETTER("i", "render_resolution_u", value)
	}

	int render_resolution_v() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "render_resolution_v")
	}

	void render_resolution_v(int value) {
		PRIMITIVE_TYPES_SETTER("i", "render_resolution_v", value)
	}

	float eval_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "eval_time")
	}

	void eval_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "eval_time", value)
	}

	Object bevel_object();

	Object taper_object();

	enum curve_axis_items_enum {
		curve_axis_items_2D = 0,	
		curve_axis_items_3D = 1	
	};

	std::map<std::string, int> create_string_to_curve_axis_items() {
		return {{"2D", curve_axis_items_2D}, {"3D", curve_axis_items_3D}};
	};

	std::map<int, std::string> create_curve_axis_items_to_string() {
		return {{curve_axis_items_2D, "2D"}, {curve_axis_items_3D, "3D"}};
	};

	const std::map<std::string, int> string_to_curve_axis_items = create_string_to_curve_axis_items();
	const std::map<int, std::string> curve_axis_items_to_string = create_curve_axis_items_to_string();

	curve_axis_items_enum dimensions() {
		STRING_TYPE_GETTER("dimensions", static_cast<curve_axis_items_enum>(string_to_curve_axis_items.at(resstr)))
	}

	void dimensions(curve_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "dimensions", curve_axis_items_to_string.at(value))
	}

	enum curve3d_fill_mode_items_enum {
		curve3d_fill_mode_items_FULL = 0,	
		curve3d_fill_mode_items_BACK = 4,	
		curve3d_fill_mode_items_FRONT = 2,	
		curve3d_fill_mode_items_HALF = 6	
	};

	std::map<std::string, int> create_string_to_curve3d_fill_mode_items() {
		return {{"FULL", curve3d_fill_mode_items_FULL}, {"BACK", curve3d_fill_mode_items_BACK}, {"FRONT", curve3d_fill_mode_items_FRONT}, {"HALF", curve3d_fill_mode_items_HALF}};
	};

	std::map<int, std::string> create_curve3d_fill_mode_items_to_string() {
		return {{curve3d_fill_mode_items_FULL, "FULL"}, {curve3d_fill_mode_items_BACK, "BACK"}, {curve3d_fill_mode_items_FRONT, "FRONT"}, {curve3d_fill_mode_items_HALF, "HALF"}};
	};

	const std::map<std::string, int> string_to_curve3d_fill_mode_items = create_string_to_curve3d_fill_mode_items();
	const std::map<int, std::string> curve3d_fill_mode_items_to_string = create_curve3d_fill_mode_items_to_string();

	curve3d_fill_mode_items_enum fill_mode() {
		STRING_TYPE_GETTER("fill_mode", static_cast<curve3d_fill_mode_items_enum>(string_to_curve3d_fill_mode_items.at(resstr)))
	}

	void fill_mode(curve3d_fill_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "fill_mode", curve3d_fill_mode_items_to_string.at(value))
	}

	enum curve_twist_mode_items_enum {
		curve_twist_mode_items_Z_UP = 0,	
		curve_twist_mode_items_MINIMUM = 3,	
		curve_twist_mode_items_TANGENT = 4	
	};

	std::map<std::string, int> create_string_to_curve_twist_mode_items() {
		return {{"Z_UP", curve_twist_mode_items_Z_UP}, {"MINIMUM", curve_twist_mode_items_MINIMUM}, {"TANGENT", curve_twist_mode_items_TANGENT}};
	};

	std::map<int, std::string> create_curve_twist_mode_items_to_string() {
		return {{curve_twist_mode_items_Z_UP, "Z_UP"}, {curve_twist_mode_items_MINIMUM, "MINIMUM"}, {curve_twist_mode_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_curve_twist_mode_items = create_string_to_curve_twist_mode_items();
	const std::map<int, std::string> curve_twist_mode_items_to_string = create_curve_twist_mode_items_to_string();

	curve_twist_mode_items_enum twist_mode() {
		STRING_TYPE_GETTER("twist_mode", static_cast<curve_twist_mode_items_enum>(string_to_curve_twist_mode_items.at(resstr)))
	}

	void twist_mode(curve_twist_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "twist_mode", curve_twist_mode_items_to_string.at(value))
	}

	enum bevfac_mapping_items_enum {
		bevfac_mapping_items_RESOLUTION = 0,	
		bevfac_mapping_items_SEGMENTS = 1,	
		bevfac_mapping_items_SPLINE = 2	
	};

	std::map<std::string, int> create_string_to_bevfac_mapping_items() {
		return {{"RESOLUTION", bevfac_mapping_items_RESOLUTION}, {"SEGMENTS", bevfac_mapping_items_SEGMENTS}, {"SPLINE", bevfac_mapping_items_SPLINE}};
	};

	std::map<int, std::string> create_bevfac_mapping_items_to_string() {
		return {{bevfac_mapping_items_RESOLUTION, "RESOLUTION"}, {bevfac_mapping_items_SEGMENTS, "SEGMENTS"}, {bevfac_mapping_items_SPLINE, "SPLINE"}};
	};

	const std::map<std::string, int> string_to_bevfac_mapping_items = create_string_to_bevfac_mapping_items();
	const std::map<int, std::string> bevfac_mapping_items_to_string = create_bevfac_mapping_items_to_string();

	bevfac_mapping_items_enum bevel_factor_mapping_start() {
		STRING_TYPE_GETTER("bevel_factor_mapping_start", static_cast<bevfac_mapping_items_enum>(string_to_bevfac_mapping_items.at(resstr)))
	}

	void bevel_factor_mapping_start(bevfac_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bevel_factor_mapping_start", bevfac_mapping_items_to_string.at(value))
	}

	bevfac_mapping_items_enum bevel_factor_mapping_end() {
		STRING_TYPE_GETTER("bevel_factor_mapping_end", static_cast<bevfac_mapping_items_enum>(string_to_bevfac_mapping_items.at(resstr)))
	}

	void bevel_factor_mapping_end(bevfac_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bevel_factor_mapping_end", bevfac_mapping_items_to_string.at(value))
	}

	float twist_smooth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "twist_smooth")
	}

	void twist_smooth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "twist_smooth", value)
	}

	bool use_fill_deform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fill_deform")
	}

	void use_fill_deform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fill_deform", value)
	}

	bool use_fill_caps() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fill_caps")
	}

	void use_fill_caps(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fill_caps", value)
	}

	bool use_map_taper() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_taper")
	}

	void use_map_taper(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_taper", value)
	}

	bool use_auto_texspace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_texspace")
	}

	void use_auto_texspace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_texspace", value)
	}

	VFLOAT3 texspace_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "texspace_location", 3)
	}

	void texspace_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "texspace_location", 3)
	}

	VFLOAT3 texspace_size() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "texspace_size", 3)
	}

	void texspace_size(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "texspace_size", 3)
	}

	bool use_uv_as_generated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_uv_as_generated")
	}

	void use_uv_as_generated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_uv_as_generated", value)
	}

	std::map<std::string, Material> materials();

	float bevel_factor_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bevel_factor_start")
	}

	void bevel_factor_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bevel_factor_start", value)
	}

	float bevel_factor_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bevel_factor_end")
	}

	void bevel_factor_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bevel_factor_end", value)
	}

	bool is_editmode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_editmode")
	}

	void is_editmode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_editmode", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	void transform(VFLOAT16 matrix, bool shape_keys = false) {
		ARRAY_TO_PYOBJ(matrix, "O", 16)
		PYTHON_FUNCTION_ARGS_CALL("transform", "Oi", matrix_tupleval, shape_keys)
		DECREF_ARRAY_ITEMS(matrix, 16)
	}

	bool validate_material_indices() {
		PYTHON_FUNCTION_CALL("validate_material_indices")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}
};

class SurfaceCurve : public Curve {
public:
	SurfaceCurve(PyObject* pyobj) : Curve(pyobj) {}
	SurfaceCurve() : Curve(0) { }

	bool use_uv_as_generated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_uv_as_generated")
	}

	void use_uv_as_generated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_uv_as_generated", value)
	}
};

class TextCurve : public Curve {
public:
	TextCurve(PyObject* pyobj) : Curve(pyobj) {}
	TextCurve() : Curve(0) { }

	enum prop_align_items_enum {
		prop_align_items_LEFT = 0,	
		prop_align_items_CENTER = 1,	
		prop_align_items_RIGHT = 2,	
		prop_align_items_JUSTIFY = 3,	
		prop_align_items_FLUSH = 4	
	};

	std::map<std::string, int> create_string_to_prop_align_items() {
		return {{"LEFT", prop_align_items_LEFT}, {"CENTER", prop_align_items_CENTER}, {"RIGHT", prop_align_items_RIGHT}, {"JUSTIFY", prop_align_items_JUSTIFY}, {"FLUSH", prop_align_items_FLUSH}};
	};

	std::map<int, std::string> create_prop_align_items_to_string() {
		return {{prop_align_items_LEFT, "LEFT"}, {prop_align_items_CENTER, "CENTER"}, {prop_align_items_RIGHT, "RIGHT"}, {prop_align_items_JUSTIFY, "JUSTIFY"}, {prop_align_items_FLUSH, "FLUSH"}};
	};

	const std::map<std::string, int> string_to_prop_align_items = create_string_to_prop_align_items();
	const std::map<int, std::string> prop_align_items_to_string = create_prop_align_items_to_string();

	prop_align_items_enum align() {
		STRING_TYPE_GETTER("align", static_cast<prop_align_items_enum>(string_to_prop_align_items.at(resstr)))
	}

	void align(prop_align_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "align", prop_align_items_to_string.at(value))
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	float small_caps_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "small_caps_scale")
	}

	void small_caps_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "small_caps_scale", value)
	}

	float space_line() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "space_line")
	}

	void space_line(float value) {
		PRIMITIVE_TYPES_SETTER("f", "space_line", value)
	}

	float space_word() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "space_word")
	}

	void space_word(float value) {
		PRIMITIVE_TYPES_SETTER("f", "space_word", value)
	}

	float space_character() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "space_character")
	}

	void space_character(float value) {
		PRIMITIVE_TYPES_SETTER("f", "space_character", value)
	}

	float shear() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shear")
	}

	void shear(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shear", value)
	}

	float offset_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_x")
	}

	void offset_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_x", value)
	}

	float offset_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_y")
	}

	void offset_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_y", value)
	}

	float underline_position() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "underline_position")
	}

	void underline_position(float value) {
		PRIMITIVE_TYPES_SETTER("f", "underline_position", value)
	}

	float underline_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "underline_height")
	}

	void underline_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "underline_height", value)
	}

	std::map<std::string, TextBox> text_boxes();

	int active_textbox() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_textbox")
	}

	void active_textbox(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_textbox", value)
	}

	std::string family() {
		STRING_TYPE_GETTER("family", resstr)
	}

	void family(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "family", value)
	}

	std::string body() {
		STRING_TYPE_GETTER("body", resstr)
	}

	void body(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "body", value)
	}

	std::map<std::string, TextCharacterFormat> body_format();

	Object follow_curve();

	VectorFont font();

	VectorFont font_bold();

	VectorFont font_italic();

	VectorFont font_bold_italic();

	TextCharacterFormat edit_format();

	bool use_fast_edit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fast_edit")
	}

	void use_fast_edit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fast_edit", value)
	}

	bool use_uv_as_generated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_uv_as_generated")
	}

	void use_uv_as_generated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_uv_as_generated", value)
	}
};

class TextBox : public pyUniplug {
public:
	TextBox(PyObject* pyobj) : pyUniplug(pyobj) {}
	TextBox() : pyUniplug(0) { }

	float x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "x")
	}

	void x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "x", value)
	}

	float y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "y")
	}

	void y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "y", value)
	}

	float width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width")
	}

	void width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}
};

class TextCharacterFormat : public pyUniplug {
public:
	TextCharacterFormat(PyObject* pyobj) : pyUniplug(pyobj) {}
	TextCharacterFormat() : pyUniplug(0) { }

	bool use_bold() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bold")
	}

	void use_bold(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bold", value)
	}

	bool use_italic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_italic")
	}

	void use_italic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_italic", value)
	}

	bool use_underline() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_underline")
	}

	void use_underline(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_underline", value)
	}

	bool use_small_caps() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_small_caps")
	}

	void use_small_caps(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_small_caps", value)
	}

	int material_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material_index")
	}

	void material_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material_index", value)
	}
};

class SplinePoint : public pyUniplug {
public:
	SplinePoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	SplinePoint() : pyUniplug(0) { }

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	VFLOAT4 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 4)
	}

	void co(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 4)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	float tilt() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tilt")
	}

	void tilt(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tilt", value)
	}

	float weight_softbody() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight_softbody")
	}

	void weight_softbody(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight_softbody", value)
	}

	float radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radius")
	}

	void radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radius", value)
	}
};

class BezierSplinePoint : public pyUniplug {
public:
	BezierSplinePoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	BezierSplinePoint() : pyUniplug(0) { }

	bool select_left_handle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_left_handle")
	}

	void select_left_handle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_left_handle", value)
	}

	bool select_right_handle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_right_handle")
	}

	void select_right_handle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_right_handle", value)
	}

	bool select_control_point() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_control_point")
	}

	void select_control_point(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_control_point", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	enum beztriple_handle_type_items_enum {
		beztriple_handle_type_items_FREE = 0,	
		beztriple_handle_type_items_VECTOR = 2,	
		beztriple_handle_type_items_ALIGNED = 3,	
		beztriple_handle_type_items_AUTO = 1	
	};

	std::map<std::string, int> create_string_to_beztriple_handle_type_items() {
		return {{"FREE", beztriple_handle_type_items_FREE}, {"VECTOR", beztriple_handle_type_items_VECTOR}, {"ALIGNED", beztriple_handle_type_items_ALIGNED}, {"AUTO", beztriple_handle_type_items_AUTO}};
	};

	std::map<int, std::string> create_beztriple_handle_type_items_to_string() {
		return {{beztriple_handle_type_items_FREE, "FREE"}, {beztriple_handle_type_items_VECTOR, "VECTOR"}, {beztriple_handle_type_items_ALIGNED, "ALIGNED"}, {beztriple_handle_type_items_AUTO, "AUTO"}};
	};

	const std::map<std::string, int> string_to_beztriple_handle_type_items = create_string_to_beztriple_handle_type_items();
	const std::map<int, std::string> beztriple_handle_type_items_to_string = create_beztriple_handle_type_items_to_string();

	beztriple_handle_type_items_enum handle_left_type() {
		STRING_TYPE_GETTER("handle_left_type", static_cast<beztriple_handle_type_items_enum>(string_to_beztriple_handle_type_items.at(resstr)))
	}

	void handle_left_type(beztriple_handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_left_type", beztriple_handle_type_items_to_string.at(value))
	}

	beztriple_handle_type_items_enum handle_right_type() {
		STRING_TYPE_GETTER("handle_right_type", static_cast<beztriple_handle_type_items_enum>(string_to_beztriple_handle_type_items.at(resstr)))
	}

	void handle_right_type(beztriple_handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_right_type", beztriple_handle_type_items_to_string.at(value))
	}

	VFLOAT3 handle_left() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_left", 3)
	}

	void handle_left(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_left", 3)
	}

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	VFLOAT3 handle_right() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_right", 3)
	}

	void handle_right(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_right", 3)
	}

	float tilt() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tilt")
	}

	void tilt(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tilt", value)
	}

	float weight_softbody() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight_softbody")
	}

	void weight_softbody(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight_softbody", value)
	}

	float radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radius")
	}

	void radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radius", value)
	}
};

class Spline : public pyUniplug {
public:
	Spline(PyObject* pyobj) : pyUniplug(pyobj) {}
	Spline() : pyUniplug(0) { }

	std::map<std::string, SplinePoint> points() {
		MAP_TYPE_GETTER("points", SplinePoint)
	}

	std::map<std::string, BezierSplinePoint> bezier_points() {
		MAP_TYPE_GETTER("bezier_points", BezierSplinePoint)
	}

	enum spline_interpolation_items_enum {
		spline_interpolation_items_LINEAR = 0,	
		spline_interpolation_items_CARDINAL = 1,	
		spline_interpolation_items_BSPLINE = 2,	
		spline_interpolation_items_EASE = 3	
	};

	std::map<std::string, int> create_string_to_spline_interpolation_items() {
		return {{"LINEAR", spline_interpolation_items_LINEAR}, {"CARDINAL", spline_interpolation_items_CARDINAL}, {"BSPLINE", spline_interpolation_items_BSPLINE}, {"EASE", spline_interpolation_items_EASE}};
	};

	std::map<int, std::string> create_spline_interpolation_items_to_string() {
		return {{spline_interpolation_items_LINEAR, "LINEAR"}, {spline_interpolation_items_CARDINAL, "CARDINAL"}, {spline_interpolation_items_BSPLINE, "BSPLINE"}, {spline_interpolation_items_EASE, "EASE"}};
	};

	const std::map<std::string, int> string_to_spline_interpolation_items = create_string_to_spline_interpolation_items();
	const std::map<int, std::string> spline_interpolation_items_to_string = create_spline_interpolation_items_to_string();

	spline_interpolation_items_enum tilt_interpolation() {
		STRING_TYPE_GETTER("tilt_interpolation", static_cast<spline_interpolation_items_enum>(string_to_spline_interpolation_items.at(resstr)))
	}

	void tilt_interpolation(spline_interpolation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "tilt_interpolation", spline_interpolation_items_to_string.at(value))
	}

	spline_interpolation_items_enum radius_interpolation() {
		STRING_TYPE_GETTER("radius_interpolation", static_cast<spline_interpolation_items_enum>(string_to_spline_interpolation_items.at(resstr)))
	}

	void radius_interpolation(spline_interpolation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "radius_interpolation", spline_interpolation_items_to_string.at(value))
	}

	enum curve_type_items_enum {
		curve_type_items_POLY = 0,	
		curve_type_items_BEZIER = 1,	
		curve_type_items_BSPLINE = 2,	
		curve_type_items_CARDINAL = 3,	
		curve_type_items_NURBS = 4	
	};

	std::map<std::string, int> create_string_to_curve_type_items() {
		return {{"POLY", curve_type_items_POLY}, {"BEZIER", curve_type_items_BEZIER}, {"BSPLINE", curve_type_items_BSPLINE}, {"CARDINAL", curve_type_items_CARDINAL}, {"NURBS", curve_type_items_NURBS}};
	};

	std::map<int, std::string> create_curve_type_items_to_string() {
		return {{curve_type_items_POLY, "POLY"}, {curve_type_items_BEZIER, "BEZIER"}, {curve_type_items_BSPLINE, "BSPLINE"}, {curve_type_items_CARDINAL, "CARDINAL"}, {curve_type_items_NURBS, "NURBS"}};
	};

	const std::map<std::string, int> string_to_curve_type_items = create_string_to_curve_type_items();
	const std::map<int, std::string> curve_type_items_to_string = create_curve_type_items_to_string();

	curve_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<curve_type_items_enum>(string_to_curve_type_items.at(resstr)))
	}

	void type(curve_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", curve_type_items_to_string.at(value))
	}

	int point_count_u() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "point_count_u")
	}

	void point_count_u(int value) {
		PRIMITIVE_TYPES_SETTER("i", "point_count_u", value)
	}

	int point_count_v() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "point_count_v")
	}

	void point_count_v(int value) {
		PRIMITIVE_TYPES_SETTER("i", "point_count_v", value)
	}

	int order_u() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "order_u")
	}

	void order_u(int value) {
		PRIMITIVE_TYPES_SETTER("i", "order_u", value)
	}

	int order_v() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "order_v")
	}

	void order_v(int value) {
		PRIMITIVE_TYPES_SETTER("i", "order_v", value)
	}

	int resolution_u() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_u")
	}

	void resolution_u(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_u", value)
	}

	int resolution_v() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_v")
	}

	void resolution_v(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_v", value)
	}

	bool use_cyclic_u() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic_u")
	}

	void use_cyclic_u(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic_u", value)
	}

	bool use_cyclic_v() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic_v")
	}

	void use_cyclic_v(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic_v", value)
	}

	bool use_endpoint_u() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_endpoint_u")
	}

	void use_endpoint_u(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_endpoint_u", value)
	}

	bool use_endpoint_v() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_endpoint_v")
	}

	void use_endpoint_v(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_endpoint_v", value)
	}

	bool use_bezier_u() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bezier_u")
	}

	void use_bezier_u(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bezier_u", value)
	}

	bool use_bezier_v() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bezier_v")
	}

	void use_bezier_v(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bezier_v", value)
	}

	bool use_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth")
	}

	void use_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	int material_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material_index")
	}

	void material_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material_index", value)
	}

	int character_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "character_index")
	}

	void character_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "character_index", value)
	}
};

class Depsgraph : public pyUniplug {
public:
	Depsgraph(PyObject* pyobj) : pyUniplug(pyobj) {}
	Depsgraph() : pyUniplug(0) { }

	void debug_graphviz(const std::string filename) {
		PYTHON_FUNCTION_ARGS_CALL("debug_graphviz", "s", filename)
	}

	void debug_rebuild() {
		PYTHON_FUNCTION_CALL("debug_rebuild")
	}

	void debug_stats() {
		PYTHON_FUNCTION_CALL("debug_stats")
	}
};

class DynamicPaintCanvasSettings : public pyUniplug {
public:
	DynamicPaintCanvasSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	DynamicPaintCanvasSettings() : pyUniplug(0) { }

	std::map<std::string, DynamicPaintSurface> canvas_surfaces();
};

class DynamicPaintBrushSettings : public pyUniplug {
public:
	DynamicPaintBrushSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	DynamicPaintBrushSettings() : pyUniplug(0) { }

	VFLOAT3 paint_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "paint_color", 3)
	}

	void paint_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "paint_color", 3)
	}

	float paint_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "paint_alpha")
	}

	void paint_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "paint_alpha", value)
	}

	bool use_material() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_material")
	}

	void use_material(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_material", value)
	}

	Material material();

	bool use_absolute_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_absolute_alpha")
	}

	void use_absolute_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_absolute_alpha", value)
	}

	float paint_wetness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "paint_wetness")
	}

	void paint_wetness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "paint_wetness", value)
	}

	bool use_paint_erase() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_paint_erase")
	}

	void use_paint_erase(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_paint_erase", value)
	}

	enum prop_dynamicpaint_brush_wave_type_enum {
		prop_dynamicpaint_brush_wave_type_CHANGE = 3,	
		prop_dynamicpaint_brush_wave_type_DEPTH = 0,	
		prop_dynamicpaint_brush_wave_type_FORCE = 1,	
		prop_dynamicpaint_brush_wave_type_REFLECT = 2	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_brush_wave_type() {
		return {{"CHANGE", prop_dynamicpaint_brush_wave_type_CHANGE}, {"DEPTH", prop_dynamicpaint_brush_wave_type_DEPTH}, {"FORCE", prop_dynamicpaint_brush_wave_type_FORCE}, {"REFLECT", prop_dynamicpaint_brush_wave_type_REFLECT}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_brush_wave_type_to_string() {
		return {{prop_dynamicpaint_brush_wave_type_CHANGE, "CHANGE"}, {prop_dynamicpaint_brush_wave_type_DEPTH, "DEPTH"}, {prop_dynamicpaint_brush_wave_type_FORCE, "FORCE"}, {prop_dynamicpaint_brush_wave_type_REFLECT, "REFLECT"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_brush_wave_type = create_string_to_prop_dynamicpaint_brush_wave_type();
	const std::map<int, std::string> prop_dynamicpaint_brush_wave_type_to_string = create_prop_dynamicpaint_brush_wave_type_to_string();

	prop_dynamicpaint_brush_wave_type_enum wave_type() {
		STRING_TYPE_GETTER("wave_type", static_cast<prop_dynamicpaint_brush_wave_type_enum>(string_to_prop_dynamicpaint_brush_wave_type.at(resstr)))
	}

	void wave_type(prop_dynamicpaint_brush_wave_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "wave_type", prop_dynamicpaint_brush_wave_type_to_string.at(value))
	}

	float wave_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_factor")
	}

	void wave_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_factor", value)
	}

	float wave_clamp() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_clamp")
	}

	void wave_clamp(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_clamp", value)
	}

	bool use_smudge() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smudge")
	}

	void use_smudge(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smudge", value)
	}

	float smudge_strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "smudge_strength")
	}

	void smudge_strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "smudge_strength", value)
	}

	float velocity_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_max")
	}

	void velocity_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_max", value)
	}

	bool use_velocity_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_velocity_alpha")
	}

	void use_velocity_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_velocity_alpha", value)
	}

	bool use_velocity_depth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_velocity_depth")
	}

	void use_velocity_depth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_velocity_depth", value)
	}

	bool use_velocity_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_velocity_color")
	}

	void use_velocity_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_velocity_color", value)
	}

	enum prop_dynamicpaint_collisiontype_enum {
		prop_dynamicpaint_collisiontype_PARTICLE_SYSTEM = 3,	
		prop_dynamicpaint_collisiontype_POINT = 4,	
		prop_dynamicpaint_collisiontype_DISTANCE = 1,	
		prop_dynamicpaint_collisiontype_VOLUME_DISTANCE = 2,	
		prop_dynamicpaint_collisiontype_VOLUME = 0	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_collisiontype() {
		return {{"PARTICLE_SYSTEM", prop_dynamicpaint_collisiontype_PARTICLE_SYSTEM}, {"POINT", prop_dynamicpaint_collisiontype_POINT}, {"DISTANCE", prop_dynamicpaint_collisiontype_DISTANCE}, {"VOLUME_DISTANCE", prop_dynamicpaint_collisiontype_VOLUME_DISTANCE}, {"VOLUME", prop_dynamicpaint_collisiontype_VOLUME}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_collisiontype_to_string() {
		return {{prop_dynamicpaint_collisiontype_PARTICLE_SYSTEM, "PARTICLE_SYSTEM"}, {prop_dynamicpaint_collisiontype_POINT, "POINT"}, {prop_dynamicpaint_collisiontype_DISTANCE, "DISTANCE"}, {prop_dynamicpaint_collisiontype_VOLUME_DISTANCE, "VOLUME_DISTANCE"}, {prop_dynamicpaint_collisiontype_VOLUME, "VOLUME"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_collisiontype = create_string_to_prop_dynamicpaint_collisiontype();
	const std::map<int, std::string> prop_dynamicpaint_collisiontype_to_string = create_prop_dynamicpaint_collisiontype_to_string();

	prop_dynamicpaint_collisiontype_enum paint_source() {
		STRING_TYPE_GETTER("paint_source", static_cast<prop_dynamicpaint_collisiontype_enum>(string_to_prop_dynamicpaint_collisiontype.at(resstr)))
	}

	void paint_source(prop_dynamicpaint_collisiontype_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "paint_source", prop_dynamicpaint_collisiontype_to_string.at(value))
	}

	float paint_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "paint_distance")
	}

	void paint_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "paint_distance", value)
	}

	bool use_proximity_ramp_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proximity_ramp_alpha")
	}

	void use_proximity_ramp_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proximity_ramp_alpha", value)
	}

	enum prop_dynamicpaint_prox_falloff_enum {
		prop_dynamicpaint_prox_falloff_SMOOTH = 1,	
		prop_dynamicpaint_prox_falloff_CONSTANT = 0,	
		prop_dynamicpaint_prox_falloff_RAMP = 2	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_prox_falloff() {
		return {{"SMOOTH", prop_dynamicpaint_prox_falloff_SMOOTH}, {"CONSTANT", prop_dynamicpaint_prox_falloff_CONSTANT}, {"RAMP", prop_dynamicpaint_prox_falloff_RAMP}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_prox_falloff_to_string() {
		return {{prop_dynamicpaint_prox_falloff_SMOOTH, "SMOOTH"}, {prop_dynamicpaint_prox_falloff_CONSTANT, "CONSTANT"}, {prop_dynamicpaint_prox_falloff_RAMP, "RAMP"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_prox_falloff = create_string_to_prop_dynamicpaint_prox_falloff();
	const std::map<int, std::string> prop_dynamicpaint_prox_falloff_to_string = create_prop_dynamicpaint_prox_falloff_to_string();

	prop_dynamicpaint_prox_falloff_enum proximity_falloff() {
		STRING_TYPE_GETTER("proximity_falloff", static_cast<prop_dynamicpaint_prox_falloff_enum>(string_to_prop_dynamicpaint_prox_falloff.at(resstr)))
	}

	void proximity_falloff(prop_dynamicpaint_prox_falloff_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proximity_falloff", prop_dynamicpaint_prox_falloff_to_string.at(value))
	}

	bool use_proximity_project() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proximity_project")
	}

	void use_proximity_project(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proximity_project", value)
	}

	enum prop_dynamicpaint_brush_ray_dir_enum {
		prop_dynamicpaint_brush_ray_dir_CANVAS = 0,	
		prop_dynamicpaint_brush_ray_dir_BRUSH = 1,	
		prop_dynamicpaint_brush_ray_dir_Z_AXIS = 2	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_brush_ray_dir() {
		return {{"CANVAS", prop_dynamicpaint_brush_ray_dir_CANVAS}, {"BRUSH", prop_dynamicpaint_brush_ray_dir_BRUSH}, {"Z_AXIS", prop_dynamicpaint_brush_ray_dir_Z_AXIS}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_brush_ray_dir_to_string() {
		return {{prop_dynamicpaint_brush_ray_dir_CANVAS, "CANVAS"}, {prop_dynamicpaint_brush_ray_dir_BRUSH, "BRUSH"}, {prop_dynamicpaint_brush_ray_dir_Z_AXIS, "Z_AXIS"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_brush_ray_dir = create_string_to_prop_dynamicpaint_brush_ray_dir();
	const std::map<int, std::string> prop_dynamicpaint_brush_ray_dir_to_string = create_prop_dynamicpaint_brush_ray_dir_to_string();

	prop_dynamicpaint_brush_ray_dir_enum ray_direction() {
		STRING_TYPE_GETTER("ray_direction", static_cast<prop_dynamicpaint_brush_ray_dir_enum>(string_to_prop_dynamicpaint_brush_ray_dir.at(resstr)))
	}

	void ray_direction(prop_dynamicpaint_brush_ray_dir_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ray_direction", prop_dynamicpaint_brush_ray_dir_to_string.at(value))
	}

	bool invert_proximity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_proximity")
	}

	void invert_proximity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_proximity", value)
	}

	bool use_negative_volume() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_negative_volume")
	}

	void use_negative_volume(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_negative_volume", value)
	}

	ParticleSystem particle_system();

	bool use_particle_radius() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_particle_radius")
	}

	void use_particle_radius(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_particle_radius", value)
	}

	float solid_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "solid_radius")
	}

	void solid_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "solid_radius", value)
	}

	float smooth_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "smooth_radius")
	}

	void smooth_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "smooth_radius", value)
	}

	ColorRamp paint_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "paint_ramp")
	}

	ColorRamp velocity_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "velocity_ramp")
	}
};

class DynamicPaintSurface : public pyUniplug {
public:
	DynamicPaintSurface(PyObject* pyobj) : pyUniplug(pyobj) {}
	DynamicPaintSurface() : pyUniplug(0) { }

	enum prop_dynamicpaint_surface_format_enum {
		prop_dynamicpaint_surface_format_VERTEX = 1,	
		prop_dynamicpaint_surface_format_IMAGE = 2	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_surface_format() {
		return {{"VERTEX", prop_dynamicpaint_surface_format_VERTEX}, {"IMAGE", prop_dynamicpaint_surface_format_IMAGE}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_surface_format_to_string() {
		return {{prop_dynamicpaint_surface_format_VERTEX, "VERTEX"}, {prop_dynamicpaint_surface_format_IMAGE, "IMAGE"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_surface_format = create_string_to_prop_dynamicpaint_surface_format();
	const std::map<int, std::string> prop_dynamicpaint_surface_format_to_string = create_prop_dynamicpaint_surface_format_to_string();

	prop_dynamicpaint_surface_format_enum surface_format() {
		STRING_TYPE_GETTER("surface_format", static_cast<prop_dynamicpaint_surface_format_enum>(string_to_prop_dynamicpaint_surface_format.at(resstr)))
	}

	void surface_format(prop_dynamicpaint_surface_format_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "surface_format", prop_dynamicpaint_surface_format_to_string.at(value))
	}

	enum prop_dynamicpaint_surface_type_enum {
		prop_dynamicpaint_surface_type_PAINT = 0	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_surface_type() {
		return {{"PAINT", prop_dynamicpaint_surface_type_PAINT}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_surface_type_to_string() {
		return {{prop_dynamicpaint_surface_type_PAINT, "PAINT"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_surface_type = create_string_to_prop_dynamicpaint_surface_type();
	const std::map<int, std::string> prop_dynamicpaint_surface_type_to_string = create_prop_dynamicpaint_surface_type_to_string();

	prop_dynamicpaint_surface_type_enum surface_type() {
		STRING_TYPE_GETTER("surface_type", static_cast<prop_dynamicpaint_surface_type_enum>(string_to_prop_dynamicpaint_surface_type.at(resstr)))
	}

	void surface_type(prop_dynamicpaint_surface_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "surface_type", prop_dynamicpaint_surface_type_to_string.at(value))
	}

	bool is_active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_active")
	}

	void is_active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_active", value)
	}

	bool show_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_preview")
	}

	void show_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_preview", value)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	Group brush_group();

	bool use_dissolve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dissolve")
	}

	void use_dissolve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dissolve", value)
	}

	int dissolve_speed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dissolve_speed")
	}

	void dissolve_speed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dissolve_speed", value)
	}

	bool use_drying() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_drying")
	}

	void use_drying(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_drying", value)
	}

	int dry_speed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dry_speed")
	}

	void dry_speed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dry_speed", value)
	}

	int image_resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "image_resolution")
	}

	void image_resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "image_resolution", value)
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	int frame_substeps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_substeps")
	}

	void frame_substeps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_substeps", value)
	}

	bool use_antialiasing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_antialiasing")
	}

	void use_antialiasing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_antialiasing", value)
	}

	float brush_influence_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "brush_influence_scale")
	}

	void brush_influence_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "brush_influence_scale", value)
	}

	float brush_radius_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "brush_radius_scale")
	}

	void brush_radius_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "brush_radius_scale", value)
	}

	enum prop_dynamicpaint_init_color_type_enum {
		prop_dynamicpaint_init_color_type_NONE = 0,	
		prop_dynamicpaint_init_color_type_COLOR = 1,	
		prop_dynamicpaint_init_color_type_TEXTURE = 2,	
		prop_dynamicpaint_init_color_type_VERTEX_COLOR = 3	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_init_color_type() {
		return {{"NONE", prop_dynamicpaint_init_color_type_NONE}, {"COLOR", prop_dynamicpaint_init_color_type_COLOR}, {"TEXTURE", prop_dynamicpaint_init_color_type_TEXTURE}, {"VERTEX_COLOR", prop_dynamicpaint_init_color_type_VERTEX_COLOR}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_init_color_type_to_string() {
		return {{prop_dynamicpaint_init_color_type_NONE, "NONE"}, {prop_dynamicpaint_init_color_type_COLOR, "COLOR"}, {prop_dynamicpaint_init_color_type_TEXTURE, "TEXTURE"}, {prop_dynamicpaint_init_color_type_VERTEX_COLOR, "VERTEX_COLOR"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_init_color_type = create_string_to_prop_dynamicpaint_init_color_type();
	const std::map<int, std::string> prop_dynamicpaint_init_color_type_to_string = create_prop_dynamicpaint_init_color_type_to_string();

	prop_dynamicpaint_init_color_type_enum init_color_type() {
		STRING_TYPE_GETTER("init_color_type", static_cast<prop_dynamicpaint_init_color_type_enum>(string_to_prop_dynamicpaint_init_color_type.at(resstr)))
	}

	void init_color_type(prop_dynamicpaint_init_color_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "init_color_type", prop_dynamicpaint_init_color_type_to_string.at(value))
	}

	VFLOAT4 init_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "init_color", 4)
	}

	void init_color(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "init_color", 4)
	}

	Texture init_texture() {
		CLASS_TYPES_GETTER(Texture, "init_texture")
	}

	std::string init_layername() {
		STRING_TYPE_GETTER("init_layername", resstr)
	}

	void init_layername(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "init_layername", value)
	}

	enum prop_dynamicpaint_effecttype_enum {
		prop_dynamicpaint_effecttype_SPREAD = 1,	
		prop_dynamicpaint_effecttype_DRIP = 2,	
		prop_dynamicpaint_effecttype_SHRINK = 3	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_effecttype() {
		return {{"SPREAD", prop_dynamicpaint_effecttype_SPREAD}, {"DRIP", prop_dynamicpaint_effecttype_DRIP}, {"SHRINK", prop_dynamicpaint_effecttype_SHRINK}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_effecttype_to_string() {
		return {{prop_dynamicpaint_effecttype_SPREAD, "SPREAD"}, {prop_dynamicpaint_effecttype_DRIP, "DRIP"}, {prop_dynamicpaint_effecttype_SHRINK, "SHRINK"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_effecttype = create_string_to_prop_dynamicpaint_effecttype();
	const std::map<int, std::string> prop_dynamicpaint_effecttype_to_string = create_prop_dynamicpaint_effecttype_to_string();

	prop_dynamicpaint_effecttype_enum effect_ui() {
		STRING_TYPE_GETTER("effect_ui", static_cast<prop_dynamicpaint_effecttype_enum>(string_to_prop_dynamicpaint_effecttype.at(resstr)))
	}

	void effect_ui(prop_dynamicpaint_effecttype_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "effect_ui", prop_dynamicpaint_effecttype_to_string.at(value))
	}

	bool use_dry_log() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dry_log")
	}

	void use_dry_log(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dry_log", value)
	}

	bool use_dissolve_log() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dissolve_log")
	}

	void use_dissolve_log(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dissolve_log", value)
	}

	bool use_spread() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_spread")
	}

	void use_spread(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_spread", value)
	}

	float spread_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spread_speed")
	}

	void spread_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spread_speed", value)
	}

	float color_dry_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_dry_threshold")
	}

	void color_dry_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_dry_threshold", value)
	}

	float color_spread_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_spread_speed")
	}

	void color_spread_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_spread_speed", value)
	}

	bool use_drip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_drip")
	}

	void use_drip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_drip", value)
	}

	bool use_shrink() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shrink")
	}

	void use_shrink(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shrink", value)
	}

	float shrink_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shrink_speed")
	}

	void shrink_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shrink_speed", value)
	}

	EffectorWeights effector_weights();

	float drip_velocity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "drip_velocity")
	}

	void drip_velocity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "drip_velocity", value)
	}

	float drip_acceleration() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "drip_acceleration")
	}

	void drip_acceleration(float value) {
		PRIMITIVE_TYPES_SETTER("f", "drip_acceleration", value)
	}

	bool use_premultiply() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_premultiply")
	}

	void use_premultiply(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_premultiply", value)
	}

	std::string image_output_path() {
		STRING_TYPE_GETTER("image_output_path", resstr)
	}

	void image_output_path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "image_output_path", value)
	}

	std::string output_name_a() {
		STRING_TYPE_GETTER("output_name_a", resstr)
	}

	void output_name_a(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "output_name_a", value)
	}

	bool use_output_a() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_output_a")
	}

	void use_output_a(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_output_a", value)
	}

	std::string output_name_b() {
		STRING_TYPE_GETTER("output_name_b", resstr)
	}

	void output_name_b(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "output_name_b", value)
	}

	bool use_output_b() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_output_b")
	}

	void use_output_b(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_output_b", value)
	}

	enum prop_dynamicpaint_surface_preview_enum {
		prop_dynamicpaint_surface_preview_PAINT = 0,	
		prop_dynamicpaint_surface_preview_WETMAP = 1	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_surface_preview() {
		return {{"PAINT", prop_dynamicpaint_surface_preview_PAINT}, {"WETMAP", prop_dynamicpaint_surface_preview_WETMAP}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_surface_preview_to_string() {
		return {{prop_dynamicpaint_surface_preview_PAINT, "PAINT"}, {prop_dynamicpaint_surface_preview_WETMAP, "WETMAP"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_surface_preview = create_string_to_prop_dynamicpaint_surface_preview();
	const std::map<int, std::string> prop_dynamicpaint_surface_preview_to_string = create_prop_dynamicpaint_surface_preview_to_string();

	prop_dynamicpaint_surface_preview_enum preview_id() {
		STRING_TYPE_GETTER("preview_id", static_cast<prop_dynamicpaint_surface_preview_enum>(string_to_prop_dynamicpaint_surface_preview.at(resstr)))
	}

	void preview_id(prop_dynamicpaint_surface_preview_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "preview_id", prop_dynamicpaint_surface_preview_to_string.at(value))
	}

	float depth_clamp() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "depth_clamp")
	}

	void depth_clamp(float value) {
		PRIMITIVE_TYPES_SETTER("f", "depth_clamp", value)
	}

	float displace_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "displace_factor")
	}

	void displace_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "displace_factor", value)
	}

	enum prop_dynamicpaint_image_fileformat_enum {
		prop_dynamicpaint_image_fileformat_PNG = 0,	
		prop_dynamicpaint_image_fileformat_OPENEXR = 1	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_image_fileformat() {
		return {{"PNG", prop_dynamicpaint_image_fileformat_PNG}, {"OPENEXR", prop_dynamicpaint_image_fileformat_OPENEXR}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_image_fileformat_to_string() {
		return {{prop_dynamicpaint_image_fileformat_PNG, "PNG"}, {prop_dynamicpaint_image_fileformat_OPENEXR, "OPENEXR"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_image_fileformat = create_string_to_prop_dynamicpaint_image_fileformat();
	const std::map<int, std::string> prop_dynamicpaint_image_fileformat_to_string = create_prop_dynamicpaint_image_fileformat_to_string();

	prop_dynamicpaint_image_fileformat_enum image_fileformat() {
		STRING_TYPE_GETTER("image_fileformat", static_cast<prop_dynamicpaint_image_fileformat_enum>(string_to_prop_dynamicpaint_image_fileformat.at(resstr)))
	}

	void image_fileformat(prop_dynamicpaint_image_fileformat_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "image_fileformat", prop_dynamicpaint_image_fileformat_to_string.at(value))
	}

	enum prop_dynamicpaint_displace_type_enum {
		prop_dynamicpaint_displace_type_DISPLACE = 0,	
		prop_dynamicpaint_displace_type_DEPTH = 1	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_displace_type() {
		return {{"DISPLACE", prop_dynamicpaint_displace_type_DISPLACE}, {"DEPTH", prop_dynamicpaint_displace_type_DEPTH}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_displace_type_to_string() {
		return {{prop_dynamicpaint_displace_type_DISPLACE, "DISPLACE"}, {prop_dynamicpaint_displace_type_DEPTH, "DEPTH"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_displace_type = create_string_to_prop_dynamicpaint_displace_type();
	const std::map<int, std::string> prop_dynamicpaint_displace_type_to_string = create_prop_dynamicpaint_displace_type_to_string();

	prop_dynamicpaint_displace_type_enum displace_type() {
		STRING_TYPE_GETTER("displace_type", static_cast<prop_dynamicpaint_displace_type_enum>(string_to_prop_dynamicpaint_displace_type.at(resstr)))
	}

	void displace_type(prop_dynamicpaint_displace_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "displace_type", prop_dynamicpaint_displace_type_to_string.at(value))
	}

	bool use_incremental_displace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_incremental_displace")
	}

	void use_incremental_displace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_incremental_displace", value)
	}

	float wave_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_damping")
	}

	void wave_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_damping", value)
	}

	float wave_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_speed")
	}

	void wave_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_speed", value)
	}

	float wave_timescale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_timescale")
	}

	void wave_timescale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_timescale", value)
	}

	float wave_spring() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_spring")
	}

	void wave_spring(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_spring", value)
	}

	float wave_smoothness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_smoothness")
	}

	void wave_smoothness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_smoothness", value)
	}

	bool use_wave_open_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_wave_open_border")
	}

	void use_wave_open_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_wave_open_border", value)
	}

	PointCache point_cache();

	bool is_cache_user() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_cache_user")
	}

	void is_cache_user(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_cache_user", value)
	}

	bool use_color_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_color_preview")
	}

	void use_color_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_color_preview", value)
	}

	bool output_exists(Object object_value, int index);
};

class FCurve : public pyUniplug {
public:
	FCurve(PyObject* pyobj) : pyUniplug(pyobj) {}
	FCurve() : pyUniplug(0) { }

	enum prop_mode_extend_items_enum {
		prop_mode_extend_items_CONSTANT = 0,	
		prop_mode_extend_items_LINEAR = 1	
	};

	std::map<std::string, int> create_string_to_prop_mode_extend_items() {
		return {{"CONSTANT", prop_mode_extend_items_CONSTANT}, {"LINEAR", prop_mode_extend_items_LINEAR}};
	};

	std::map<int, std::string> create_prop_mode_extend_items_to_string() {
		return {{prop_mode_extend_items_CONSTANT, "CONSTANT"}, {prop_mode_extend_items_LINEAR, "LINEAR"}};
	};

	const std::map<std::string, int> string_to_prop_mode_extend_items = create_string_to_prop_mode_extend_items();
	const std::map<int, std::string> prop_mode_extend_items_to_string = create_prop_mode_extend_items_to_string();

	prop_mode_extend_items_enum extrapolation() {
		STRING_TYPE_GETTER("extrapolation", static_cast<prop_mode_extend_items_enum>(string_to_prop_mode_extend_items.at(resstr)))
	}

	void extrapolation(prop_mode_extend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "extrapolation", prop_mode_extend_items_to_string.at(value))
	}

	Driver driver();

	ActionGroup group() {
		CLASS_TYPES_GETTER(ActionGroup, "group")
	}

	std::string data_path() {
		STRING_TYPE_GETTER("data_path", resstr)
	}

	void data_path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "data_path", value)
	}

	int array_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "array_index")
	}

	void array_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "array_index", value)
	}

	enum prop_mode_color_items_enum {
		prop_mode_color_items_AUTO_RAINBOW = 0,	
		prop_mode_color_items_AUTO_RGB = 1,	
		prop_mode_color_items_CUSTOM = 2	
	};

	std::map<std::string, int> create_string_to_prop_mode_color_items() {
		return {{"AUTO_RAINBOW", prop_mode_color_items_AUTO_RAINBOW}, {"AUTO_RGB", prop_mode_color_items_AUTO_RGB}, {"CUSTOM", prop_mode_color_items_CUSTOM}};
	};

	std::map<int, std::string> create_prop_mode_color_items_to_string() {
		return {{prop_mode_color_items_AUTO_RAINBOW, "AUTO_RAINBOW"}, {prop_mode_color_items_AUTO_RGB, "AUTO_RGB"}, {prop_mode_color_items_CUSTOM, "CUSTOM"}};
	};

	const std::map<std::string, int> string_to_prop_mode_color_items = create_string_to_prop_mode_color_items();
	const std::map<int, std::string> prop_mode_color_items_to_string = create_prop_mode_color_items_to_string();

	prop_mode_color_items_enum color_mode() {
		STRING_TYPE_GETTER("color_mode", static_cast<prop_mode_color_items_enum>(string_to_prop_mode_color_items.at(resstr)))
	}

	void color_mode(prop_mode_color_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_mode", prop_mode_color_items_to_string.at(value))
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool lock_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock")
	}

	void lock_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock", value)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}

	std::map<std::string, FCurveSample> sampled_points();

	std::map<std::string, Keyframe> keyframe_points();

	std::map<std::string, FModifier> modifiers();

	float evaluate(float frame) {
		PYTHON_FUNCTION_ARGS_CALL("evaluate", "f", frame)
		CREATE_SINGLE_PYOBJ(value)
		PRIMITIVE_TYPES_CONV(value, float, (float)PyFloat_AsDouble(value_obj))
		NONCLASS_TYPES_RETURN(value_res)
	}

	void update() {
		PYTHON_FUNCTION_CALL("update")
	}

	VFLOAT2 range() {
		PYTHON_FUNCTION_CALL("range")
		CREATE_SINGLE_PYOBJ(range)
		POD_VECTOR_TYPES_CONV(range, FLOAT, (float)PyFloat_AsDouble(item), 2)
		NONCLASS_TYPES_RETURN(range_res)
	}

	void update_autoflags(AnyType data) {
		PYTHON_FUNCTION_ARGS_CALL("update_autoflags", "O", data.get_pyobjref())
	}

	void convert_to_samples(int start, int end) {
		PYTHON_FUNCTION_ARGS_CALL("convert_to_samples", "ii", start, end)
	}

	void convert_to_keyframes(int start, int end) {
		PYTHON_FUNCTION_ARGS_CALL("convert_to_keyframes", "ii", start, end)
	}
};

class Keyframe : public pyUniplug {
public:
	Keyframe(PyObject* pyobj) : pyUniplug(pyobj) {}
	Keyframe() : pyUniplug(0) { }

	bool select_left_handle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_left_handle")
	}

	void select_left_handle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_left_handle", value)
	}

	bool select_right_handle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_right_handle")
	}

	void select_right_handle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_right_handle", value)
	}

	bool select_control_point() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_control_point")
	}

	void select_control_point(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_control_point", value)
	}

	enum keyframe_handle_type_items_enum {
		keyframe_handle_type_items_FREE = 0,	
		keyframe_handle_type_items_VECTOR = 2,	
		keyframe_handle_type_items_ALIGNED = 3,	
		keyframe_handle_type_items_AUTO = 1,	
		keyframe_handle_type_items_AUTO_CLAMPED = 4	
	};

	std::map<std::string, int> create_string_to_keyframe_handle_type_items() {
		return {{"FREE", keyframe_handle_type_items_FREE}, {"VECTOR", keyframe_handle_type_items_VECTOR}, {"ALIGNED", keyframe_handle_type_items_ALIGNED}, {"AUTO", keyframe_handle_type_items_AUTO}, {"AUTO_CLAMPED", keyframe_handle_type_items_AUTO_CLAMPED}};
	};

	std::map<int, std::string> create_keyframe_handle_type_items_to_string() {
		return {{keyframe_handle_type_items_FREE, "FREE"}, {keyframe_handle_type_items_VECTOR, "VECTOR"}, {keyframe_handle_type_items_ALIGNED, "ALIGNED"}, {keyframe_handle_type_items_AUTO, "AUTO"}, {keyframe_handle_type_items_AUTO_CLAMPED, "AUTO_CLAMPED"}};
	};

	const std::map<std::string, int> string_to_keyframe_handle_type_items = create_string_to_keyframe_handle_type_items();
	const std::map<int, std::string> keyframe_handle_type_items_to_string = create_keyframe_handle_type_items_to_string();

	keyframe_handle_type_items_enum handle_left_type() {
		STRING_TYPE_GETTER("handle_left_type", static_cast<keyframe_handle_type_items_enum>(string_to_keyframe_handle_type_items.at(resstr)))
	}

	void handle_left_type(keyframe_handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_left_type", keyframe_handle_type_items_to_string.at(value))
	}

	keyframe_handle_type_items_enum handle_right_type() {
		STRING_TYPE_GETTER("handle_right_type", static_cast<keyframe_handle_type_items_enum>(string_to_keyframe_handle_type_items.at(resstr)))
	}

	void handle_right_type(keyframe_handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_right_type", keyframe_handle_type_items_to_string.at(value))
	}

	enum beztriple_interpolation_mode_items_enum {
		beztriple_interpolation_mode_items_CONSTANT = 0,	
		beztriple_interpolation_mode_items_LINEAR = 1,	
		beztriple_interpolation_mode_items_BEZIER = 2,	
		beztriple_interpolation_mode_items_SINE = 12,	
		beztriple_interpolation_mode_items_QUAD = 9,	
		beztriple_interpolation_mode_items_CUBIC = 6,	
		beztriple_interpolation_mode_items_QUART = 10,	
		beztriple_interpolation_mode_items_QUINT = 11,	
		beztriple_interpolation_mode_items_EXPO = 8,	
		beztriple_interpolation_mode_items_CIRC = 5,	
		beztriple_interpolation_mode_items_BACK = 3,	
		beztriple_interpolation_mode_items_BOUNCE = 4,	
		beztriple_interpolation_mode_items_ELASTIC = 7	
	};

	std::map<std::string, int> create_string_to_beztriple_interpolation_mode_items() {
		return {{"CONSTANT", beztriple_interpolation_mode_items_CONSTANT}, {"LINEAR", beztriple_interpolation_mode_items_LINEAR}, {"BEZIER", beztriple_interpolation_mode_items_BEZIER}, {"SINE", beztriple_interpolation_mode_items_SINE}, {"QUAD", beztriple_interpolation_mode_items_QUAD}, {"CUBIC", beztriple_interpolation_mode_items_CUBIC}, {"QUART", beztriple_interpolation_mode_items_QUART}, {"QUINT", beztriple_interpolation_mode_items_QUINT}, {"EXPO", beztriple_interpolation_mode_items_EXPO}, {"CIRC", beztriple_interpolation_mode_items_CIRC}, {"BACK", beztriple_interpolation_mode_items_BACK}, {"BOUNCE", beztriple_interpolation_mode_items_BOUNCE}, {"ELASTIC", beztriple_interpolation_mode_items_ELASTIC}};
	};

	std::map<int, std::string> create_beztriple_interpolation_mode_items_to_string() {
		return {{beztriple_interpolation_mode_items_CONSTANT, "CONSTANT"}, {beztriple_interpolation_mode_items_LINEAR, "LINEAR"}, {beztriple_interpolation_mode_items_BEZIER, "BEZIER"}, {beztriple_interpolation_mode_items_SINE, "SINE"}, {beztriple_interpolation_mode_items_QUAD, "QUAD"}, {beztriple_interpolation_mode_items_CUBIC, "CUBIC"}, {beztriple_interpolation_mode_items_QUART, "QUART"}, {beztriple_interpolation_mode_items_QUINT, "QUINT"}, {beztriple_interpolation_mode_items_EXPO, "EXPO"}, {beztriple_interpolation_mode_items_CIRC, "CIRC"}, {beztriple_interpolation_mode_items_BACK, "BACK"}, {beztriple_interpolation_mode_items_BOUNCE, "BOUNCE"}, {beztriple_interpolation_mode_items_ELASTIC, "ELASTIC"}};
	};

	const std::map<std::string, int> string_to_beztriple_interpolation_mode_items = create_string_to_beztriple_interpolation_mode_items();
	const std::map<int, std::string> beztriple_interpolation_mode_items_to_string = create_beztriple_interpolation_mode_items_to_string();

	beztriple_interpolation_mode_items_enum interpolation() {
		STRING_TYPE_GETTER("interpolation", static_cast<beztriple_interpolation_mode_items_enum>(string_to_beztriple_interpolation_mode_items.at(resstr)))
	}

	void interpolation(beztriple_interpolation_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation", beztriple_interpolation_mode_items_to_string.at(value))
	}

	enum beztriple_keyframe_type_items_enum {
		beztriple_keyframe_type_items_KEYFRAME = 0,	
		beztriple_keyframe_type_items_BREAKDOWN = 2,	
		beztriple_keyframe_type_items_EXTREME = 1,	
		beztriple_keyframe_type_items_JITTER = 3	
	};

	std::map<std::string, int> create_string_to_beztriple_keyframe_type_items() {
		return {{"KEYFRAME", beztriple_keyframe_type_items_KEYFRAME}, {"BREAKDOWN", beztriple_keyframe_type_items_BREAKDOWN}, {"EXTREME", beztriple_keyframe_type_items_EXTREME}, {"JITTER", beztriple_keyframe_type_items_JITTER}};
	};

	std::map<int, std::string> create_beztriple_keyframe_type_items_to_string() {
		return {{beztriple_keyframe_type_items_KEYFRAME, "KEYFRAME"}, {beztriple_keyframe_type_items_BREAKDOWN, "BREAKDOWN"}, {beztriple_keyframe_type_items_EXTREME, "EXTREME"}, {beztriple_keyframe_type_items_JITTER, "JITTER"}};
	};

	const std::map<std::string, int> string_to_beztriple_keyframe_type_items = create_string_to_beztriple_keyframe_type_items();
	const std::map<int, std::string> beztriple_keyframe_type_items_to_string = create_beztriple_keyframe_type_items_to_string();

	beztriple_keyframe_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<beztriple_keyframe_type_items_enum>(string_to_beztriple_keyframe_type_items.at(resstr)))
	}

	void type(beztriple_keyframe_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", beztriple_keyframe_type_items_to_string.at(value))
	}

	enum beztriple_interpolation_easing_items_enum {
		beztriple_interpolation_easing_items_AUTO = 0,	
		beztriple_interpolation_easing_items_EASE_IN = 1,	
		beztriple_interpolation_easing_items_EASE_OUT = 2,	
		beztriple_interpolation_easing_items_EASE_IN_OUT = 3	
	};

	std::map<std::string, int> create_string_to_beztriple_interpolation_easing_items() {
		return {{"AUTO", beztriple_interpolation_easing_items_AUTO}, {"EASE_IN", beztriple_interpolation_easing_items_EASE_IN}, {"EASE_OUT", beztriple_interpolation_easing_items_EASE_OUT}, {"EASE_IN_OUT", beztriple_interpolation_easing_items_EASE_IN_OUT}};
	};

	std::map<int, std::string> create_beztriple_interpolation_easing_items_to_string() {
		return {{beztriple_interpolation_easing_items_AUTO, "AUTO"}, {beztriple_interpolation_easing_items_EASE_IN, "EASE_IN"}, {beztriple_interpolation_easing_items_EASE_OUT, "EASE_OUT"}, {beztriple_interpolation_easing_items_EASE_IN_OUT, "EASE_IN_OUT"}};
	};

	const std::map<std::string, int> string_to_beztriple_interpolation_easing_items = create_string_to_beztriple_interpolation_easing_items();
	const std::map<int, std::string> beztriple_interpolation_easing_items_to_string = create_beztriple_interpolation_easing_items_to_string();

	beztriple_interpolation_easing_items_enum easing() {
		STRING_TYPE_GETTER("easing", static_cast<beztriple_interpolation_easing_items_enum>(string_to_beztriple_interpolation_easing_items.at(resstr)))
	}

	void easing(beztriple_interpolation_easing_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "easing", beztriple_interpolation_easing_items_to_string.at(value))
	}

	float back() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "back")
	}

	void back(float value) {
		PRIMITIVE_TYPES_SETTER("f", "back", value)
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	float period() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "period")
	}

	void period(float value) {
		PRIMITIVE_TYPES_SETTER("f", "period", value)
	}

	VFLOAT2 handle_left() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_left", 2)
	}

	void handle_left(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_left", 2)
	}

	VFLOAT2 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 2)
	}

	void co(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 2)
	}

	VFLOAT2 handle_right() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_right", 2)
	}

	void handle_right(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_right", 2)
	}
};

class FCurveSample : public pyUniplug {
public:
	FCurveSample(PyObject* pyobj) : pyUniplug(pyobj) {}
	FCurveSample() : pyUniplug(0) { }

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	VFLOAT2 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 2)
	}

	void co(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 2)
	}
};

class DriverTarget : public pyUniplug {
public:
	DriverTarget(PyObject* pyobj) : pyUniplug(pyobj) {}
	DriverTarget() : pyUniplug(0) { }

	ID id() {
		CLASS_TYPES_GETTER(ID, "id")
	}

	enum id_type_items_enum {
		id_type_items_ACTION = 17217,	
		id_type_items_ARMATURE = 21057,	
		id_type_items_BRUSH = 21058,	
		id_type_items_CAMERA = 16707,	
		id_type_items_CURVE = 21827,	
		id_type_items_FONT = 18006,	
		id_type_items_GREASEPENCIL = 17479,	
		id_type_items_GROUP = 21063,	
		id_type_items_IMAGE = 19785,	
		id_type_items_KEY = 17739,	
		id_type_items_LAMP = 16716,	
		id_type_items_LIBRARY = 18764,	
		id_type_items_LINESTYLE = 21324,	
		id_type_items_LATTICE = 21580,	
		id_type_items_MASK = 21325,	
		id_type_items_MATERIAL = 16717,	
		id_type_items_META = 16973,	
		id_type_items_MESH = 17741,	
		id_type_items_MOVIECLIP = 17229,	
		id_type_items_NODETREE = 21582,	
		id_type_items_OBJECT = 16975,	
		id_type_items_PAINTCURVE = 17232,	
		id_type_items_PALETTE = 19536,	
		id_type_items_PARTICLE = 16720,	
		id_type_items_SCENE = 17235,	
		id_type_items_SCREEN = 21075,	
		id_type_items_SOUND = 20307,	
		id_type_items_SPEAKER = 19283,	
		id_type_items_TEXT = 22612,	
		id_type_items_TEXTURE = 17748,	
		id_type_items_WINDOWMANAGER = 19799,	
		id_type_items_WORLD = 20311	
	};

	std::map<std::string, int> create_string_to_id_type_items() {
		return {{"ACTION", id_type_items_ACTION}, {"ARMATURE", id_type_items_ARMATURE}, {"BRUSH", id_type_items_BRUSH}, {"CAMERA", id_type_items_CAMERA}, {"CURVE", id_type_items_CURVE}, {"FONT", id_type_items_FONT}, {"GREASEPENCIL", id_type_items_GREASEPENCIL}, {"GROUP", id_type_items_GROUP}, {"IMAGE", id_type_items_IMAGE}, {"KEY", id_type_items_KEY}, {"LAMP", id_type_items_LAMP}, {"LIBRARY", id_type_items_LIBRARY}, {"LINESTYLE", id_type_items_LINESTYLE}, {"LATTICE", id_type_items_LATTICE}, {"MASK", id_type_items_MASK}, {"MATERIAL", id_type_items_MATERIAL}, {"META", id_type_items_META}, {"MESH", id_type_items_MESH}, {"MOVIECLIP", id_type_items_MOVIECLIP}, {"NODETREE", id_type_items_NODETREE}, {"OBJECT", id_type_items_OBJECT}, {"PAINTCURVE", id_type_items_PAINTCURVE}, {"PALETTE", id_type_items_PALETTE}, {"PARTICLE", id_type_items_PARTICLE}, {"SCENE", id_type_items_SCENE}, {"SCREEN", id_type_items_SCREEN}, {"SOUND", id_type_items_SOUND}, {"SPEAKER", id_type_items_SPEAKER}, {"TEXT", id_type_items_TEXT}, {"TEXTURE", id_type_items_TEXTURE}, {"WINDOWMANAGER", id_type_items_WINDOWMANAGER}, {"WORLD", id_type_items_WORLD}};
	};

	std::map<int, std::string> create_id_type_items_to_string() {
		return {{id_type_items_ACTION, "ACTION"}, {id_type_items_ARMATURE, "ARMATURE"}, {id_type_items_BRUSH, "BRUSH"}, {id_type_items_CAMERA, "CAMERA"}, {id_type_items_CURVE, "CURVE"}, {id_type_items_FONT, "FONT"}, {id_type_items_GREASEPENCIL, "GREASEPENCIL"}, {id_type_items_GROUP, "GROUP"}, {id_type_items_IMAGE, "IMAGE"}, {id_type_items_KEY, "KEY"}, {id_type_items_LAMP, "LAMP"}, {id_type_items_LIBRARY, "LIBRARY"}, {id_type_items_LINESTYLE, "LINESTYLE"}, {id_type_items_LATTICE, "LATTICE"}, {id_type_items_MASK, "MASK"}, {id_type_items_MATERIAL, "MATERIAL"}, {id_type_items_META, "META"}, {id_type_items_MESH, "MESH"}, {id_type_items_MOVIECLIP, "MOVIECLIP"}, {id_type_items_NODETREE, "NODETREE"}, {id_type_items_OBJECT, "OBJECT"}, {id_type_items_PAINTCURVE, "PAINTCURVE"}, {id_type_items_PALETTE, "PALETTE"}, {id_type_items_PARTICLE, "PARTICLE"}, {id_type_items_SCENE, "SCENE"}, {id_type_items_SCREEN, "SCREEN"}, {id_type_items_SOUND, "SOUND"}, {id_type_items_SPEAKER, "SPEAKER"}, {id_type_items_TEXT, "TEXT"}, {id_type_items_TEXTURE, "TEXTURE"}, {id_type_items_WINDOWMANAGER, "WINDOWMANAGER"}, {id_type_items_WORLD, "WORLD"}};
	};

	const std::map<std::string, int> string_to_id_type_items = create_string_to_id_type_items();
	const std::map<int, std::string> id_type_items_to_string = create_id_type_items_to_string();

	id_type_items_enum id_type() {
		STRING_TYPE_GETTER("id_type", static_cast<id_type_items_enum>(string_to_id_type_items.at(resstr)))
	}

	void id_type(id_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "id_type", id_type_items_to_string.at(value))
	}

	std::string data_path() {
		STRING_TYPE_GETTER("data_path", resstr)
	}

	void data_path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "data_path", value)
	}

	std::string bone_target() {
		STRING_TYPE_GETTER("bone_target", resstr)
	}

	void bone_target(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bone_target", value)
	}

	enum prop_trans_chan_items_enum {
		prop_trans_chan_items_LOC_X = 0,	
		prop_trans_chan_items_LOC_Y = 1,	
		prop_trans_chan_items_LOC_Z = 2,	
		prop_trans_chan_items_ROT_X = 3,	
		prop_trans_chan_items_ROT_Y = 4,	
		prop_trans_chan_items_ROT_Z = 5,	
		prop_trans_chan_items_SCALE_X = 6,	
		prop_trans_chan_items_SCALE_Y = 7,	
		prop_trans_chan_items_SCALE_Z = 8	
	};

	std::map<std::string, int> create_string_to_prop_trans_chan_items() {
		return {{"LOC_X", prop_trans_chan_items_LOC_X}, {"LOC_Y", prop_trans_chan_items_LOC_Y}, {"LOC_Z", prop_trans_chan_items_LOC_Z}, {"ROT_X", prop_trans_chan_items_ROT_X}, {"ROT_Y", prop_trans_chan_items_ROT_Y}, {"ROT_Z", prop_trans_chan_items_ROT_Z}, {"SCALE_X", prop_trans_chan_items_SCALE_X}, {"SCALE_Y", prop_trans_chan_items_SCALE_Y}, {"SCALE_Z", prop_trans_chan_items_SCALE_Z}};
	};

	std::map<int, std::string> create_prop_trans_chan_items_to_string() {
		return {{prop_trans_chan_items_LOC_X, "LOC_X"}, {prop_trans_chan_items_LOC_Y, "LOC_Y"}, {prop_trans_chan_items_LOC_Z, "LOC_Z"}, {prop_trans_chan_items_ROT_X, "ROT_X"}, {prop_trans_chan_items_ROT_Y, "ROT_Y"}, {prop_trans_chan_items_ROT_Z, "ROT_Z"}, {prop_trans_chan_items_SCALE_X, "SCALE_X"}, {prop_trans_chan_items_SCALE_Y, "SCALE_Y"}, {prop_trans_chan_items_SCALE_Z, "SCALE_Z"}};
	};

	const std::map<std::string, int> string_to_prop_trans_chan_items = create_string_to_prop_trans_chan_items();
	const std::map<int, std::string> prop_trans_chan_items_to_string = create_prop_trans_chan_items_to_string();

	prop_trans_chan_items_enum transform_type() {
		STRING_TYPE_GETTER("transform_type", static_cast<prop_trans_chan_items_enum>(string_to_prop_trans_chan_items.at(resstr)))
	}

	void transform_type(prop_trans_chan_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "transform_type", prop_trans_chan_items_to_string.at(value))
	}

	enum prop_local_space_items_enum {
		prop_local_space_items_WORLD_SPACE = 0,	
		prop_local_space_items_TRANSFORM_SPACE = 4,	
		prop_local_space_items_LOCAL_SPACE = 12	
	};

	std::map<std::string, int> create_string_to_prop_local_space_items() {
		return {{"WORLD_SPACE", prop_local_space_items_WORLD_SPACE}, {"TRANSFORM_SPACE", prop_local_space_items_TRANSFORM_SPACE}, {"LOCAL_SPACE", prop_local_space_items_LOCAL_SPACE}};
	};

	std::map<int, std::string> create_prop_local_space_items_to_string() {
		return {{prop_local_space_items_WORLD_SPACE, "WORLD_SPACE"}, {prop_local_space_items_TRANSFORM_SPACE, "TRANSFORM_SPACE"}, {prop_local_space_items_LOCAL_SPACE, "LOCAL_SPACE"}};
	};

	const std::map<std::string, int> string_to_prop_local_space_items = create_string_to_prop_local_space_items();
	const std::map<int, std::string> prop_local_space_items_to_string = create_prop_local_space_items_to_string();

	prop_local_space_items_enum transform_space() {
		STRING_TYPE_GETTER("transform_space", static_cast<prop_local_space_items_enum>(string_to_prop_local_space_items.at(resstr)))
	}

	void transform_space(prop_local_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "transform_space", prop_local_space_items_to_string.at(value))
	}
};

class DriverVariable : public pyUniplug {
public:
	DriverVariable(PyObject* pyobj) : pyUniplug(pyobj) {}
	DriverVariable() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum prop_type_items_enum {
		prop_type_items_SINGLE_PROP = 0,	
		prop_type_items_TRANSFORMS = 3,	
		prop_type_items_ROTATION_DIFF = 1,	
		prop_type_items_LOC_DIFF = 2	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"SINGLE_PROP", prop_type_items_SINGLE_PROP}, {"TRANSFORMS", prop_type_items_TRANSFORMS}, {"ROTATION_DIFF", prop_type_items_ROTATION_DIFF}, {"LOC_DIFF", prop_type_items_LOC_DIFF}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_SINGLE_PROP, "SINGLE_PROP"}, {prop_type_items_TRANSFORMS, "TRANSFORMS"}, {prop_type_items_ROTATION_DIFF, "ROTATION_DIFF"}, {prop_type_items_LOC_DIFF, "LOC_DIFF"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	std::map<std::string, DriverTarget> targets() {
		MAP_TYPE_GETTER("targets", DriverTarget)
	}
};

class Driver : public pyUniplug {
public:
	Driver(PyObject* pyobj) : pyUniplug(pyobj) {}
	Driver() : pyUniplug(0) { }

	enum prop_type_items_enum {
		prop_type_items_AVERAGE = 0,	
		prop_type_items_SUM = 2,	
		prop_type_items_SCRIPTED = 1,	
		prop_type_items_MIN = 3,	
		prop_type_items_MAX = 4	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"AVERAGE", prop_type_items_AVERAGE}, {"SUM", prop_type_items_SUM}, {"SCRIPTED", prop_type_items_SCRIPTED}, {"MIN", prop_type_items_MIN}, {"MAX", prop_type_items_MAX}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_AVERAGE, "AVERAGE"}, {prop_type_items_SUM, "SUM"}, {prop_type_items_SCRIPTED, "SCRIPTED"}, {prop_type_items_MIN, "MIN"}, {prop_type_items_MAX, "MAX"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	std::string expression() {
		STRING_TYPE_GETTER("expression", resstr)
	}

	void expression(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "expression", value)
	}

	std::map<std::string, DriverVariable> variables() {
		MAP_TYPE_GETTER("variables", DriverVariable)
	}

	bool show_debug_info() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_debug_info")
	}

	void show_debug_info(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_debug_info", value)
	}

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}
};

class FModifier : public pyUniplug {
public:
	FModifier(PyObject* pyobj) : pyUniplug(pyobj) {}
	FModifier() : pyUniplug(0) { }

	enum fmodifier_type_items_enum {
		fmodifier_type_items_NULL = 0,	
		fmodifier_type_items_GENERATOR = 1,	
		fmodifier_type_items_FNGENERATOR = 2,	
		fmodifier_type_items_ENVELOPE = 3,	
		fmodifier_type_items_CYCLES = 4,	
		fmodifier_type_items_NOISE = 5,	
		fmodifier_type_items_PYTHON = 7,	
		fmodifier_type_items_LIMITS = 8,	
		fmodifier_type_items_STEPPED = 9	
	};

	std::map<std::string, int> create_string_to_fmodifier_type_items() {
		return {{"NULL", fmodifier_type_items_NULL}, {"GENERATOR", fmodifier_type_items_GENERATOR}, {"FNGENERATOR", fmodifier_type_items_FNGENERATOR}, {"ENVELOPE", fmodifier_type_items_ENVELOPE}, {"CYCLES", fmodifier_type_items_CYCLES}, {"NOISE", fmodifier_type_items_NOISE}, {"PYTHON", fmodifier_type_items_PYTHON}, {"LIMITS", fmodifier_type_items_LIMITS}, {"STEPPED", fmodifier_type_items_STEPPED}};
	};

	std::map<int, std::string> create_fmodifier_type_items_to_string() {
		return {{fmodifier_type_items_NULL, "NULL"}, {fmodifier_type_items_GENERATOR, "GENERATOR"}, {fmodifier_type_items_FNGENERATOR, "FNGENERATOR"}, {fmodifier_type_items_ENVELOPE, "ENVELOPE"}, {fmodifier_type_items_CYCLES, "CYCLES"}, {fmodifier_type_items_NOISE, "NOISE"}, {fmodifier_type_items_PYTHON, "PYTHON"}, {fmodifier_type_items_LIMITS, "LIMITS"}, {fmodifier_type_items_STEPPED, "STEPPED"}};
	};

	const std::map<std::string, int> string_to_fmodifier_type_items = create_string_to_fmodifier_type_items();
	const std::map<int, std::string> fmodifier_type_items_to_string = create_fmodifier_type_items_to_string();

	fmodifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<fmodifier_type_items_enum>(string_to_fmodifier_type_items.at(resstr)))
	}

	void type(fmodifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", fmodifier_type_items_to_string.at(value))
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool use_restricted_range() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_restricted_range")
	}

	void use_restricted_range(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_restricted_range", value)
	}

	float frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_start")
	}

	void frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_start", value)
	}

	float frame_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_end")
	}

	void frame_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_end", value)
	}

	float blend_in() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_in")
	}

	void blend_in(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_in", value)
	}

	float blend_out() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_out")
	}

	void blend_out(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_out", value)
	}

	bool use_influence() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_influence")
	}

	void use_influence(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_influence", value)
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}
};

class FModifierGenerator : public FModifier {
public:
	FModifierGenerator(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierGenerator() : FModifier(0) { }

	bool use_additive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_additive")
	}

	void use_additive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_additive", value)
	}

	enum generator_mode_items_enum {
		generator_mode_items_POLYNOMIAL = 0,	
		generator_mode_items_POLYNOMIAL_FACTORISED = 1	
	};

	std::map<std::string, int> create_string_to_generator_mode_items() {
		return {{"POLYNOMIAL", generator_mode_items_POLYNOMIAL}, {"POLYNOMIAL_FACTORISED", generator_mode_items_POLYNOMIAL_FACTORISED}};
	};

	std::map<int, std::string> create_generator_mode_items_to_string() {
		return {{generator_mode_items_POLYNOMIAL, "POLYNOMIAL"}, {generator_mode_items_POLYNOMIAL_FACTORISED, "POLYNOMIAL_FACTORISED"}};
	};

	const std::map<std::string, int> string_to_generator_mode_items = create_string_to_generator_mode_items();
	const std::map<int, std::string> generator_mode_items_to_string = create_generator_mode_items_to_string();

	generator_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<generator_mode_items_enum>(string_to_generator_mode_items.at(resstr)))
	}

	void mode(generator_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", generator_mode_items_to_string.at(value))
	}

	int poly_order() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "poly_order")
	}

	void poly_order(int value) {
		PRIMITIVE_TYPES_SETTER("i", "poly_order", value)
	}

	std::array<float, 32> coefficients() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "coefficients", 32)
	}

	void coefficients(float values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "coefficients", 32)
	}
};

class FModifierFunctionGenerator : public FModifier {
public:
	FModifierFunctionGenerator(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierFunctionGenerator() : FModifier(0) { }

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	float phase_multiplier() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "phase_multiplier")
	}

	void phase_multiplier(float value) {
		PRIMITIVE_TYPES_SETTER("f", "phase_multiplier", value)
	}

	float phase_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "phase_offset")
	}

	void phase_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "phase_offset", value)
	}

	float value_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_offset")
	}

	void value_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_offset", value)
	}

	bool use_additive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_additive")
	}

	void use_additive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_additive", value)
	}

	enum prop_type_items_enum {
		prop_type_items_SIN = 0,	
		prop_type_items_COS = 1,	
		prop_type_items_TAN = 2,	
		prop_type_items_SQRT = 3,	
		prop_type_items_LN = 4,	
		prop_type_items_SINC = 5	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"SIN", prop_type_items_SIN}, {"COS", prop_type_items_COS}, {"TAN", prop_type_items_TAN}, {"SQRT", prop_type_items_SQRT}, {"LN", prop_type_items_LN}, {"SINC", prop_type_items_SINC}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_SIN, "SIN"}, {prop_type_items_COS, "COS"}, {prop_type_items_TAN, "TAN"}, {prop_type_items_SQRT, "SQRT"}, {prop_type_items_LN, "LN"}, {prop_type_items_SINC, "SINC"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum function_type() {
		STRING_TYPE_GETTER("function_type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void function_type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "function_type", prop_type_items_to_string.at(value))
	}
};

class FModifierEnvelope : public FModifier {
public:
	FModifierEnvelope(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierEnvelope() : FModifier(0) { }

	std::map<std::string, FModifierEnvelopeControlPoint> control_points();

	float reference_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "reference_value")
	}

	void reference_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "reference_value", value)
	}

	float default_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_min")
	}

	void default_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_min", value)
	}

	float default_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_max")
	}

	void default_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_max", value)
	}
};

class FModifierEnvelopeControlPoint : public pyUniplug {
public:
	FModifierEnvelopeControlPoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	FModifierEnvelopeControlPoint() : pyUniplug(0) { }

	float min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min")
	}

	void min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min", value)
	}

	float max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max")
	}

	void max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max", value)
	}

	float frame() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame")
	}

	void frame(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame", value)
	}
};

class FModifierCycles : public FModifier {
public:
	FModifierCycles(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierCycles() : FModifier(0) { }

	enum prop_type_items_enum {
		prop_type_items_NONE = 0,	
		prop_type_items_REPEAT = 1,	
		prop_type_items_REPEAT_OFFSET = 2,	
		prop_type_items_MIRROR = 3	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"NONE", prop_type_items_NONE}, {"REPEAT", prop_type_items_REPEAT}, {"REPEAT_OFFSET", prop_type_items_REPEAT_OFFSET}, {"MIRROR", prop_type_items_MIRROR}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_NONE, "NONE"}, {prop_type_items_REPEAT, "REPEAT"}, {prop_type_items_REPEAT_OFFSET, "REPEAT_OFFSET"}, {prop_type_items_MIRROR, "MIRROR"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum mode_before() {
		STRING_TYPE_GETTER("mode_before", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode_before(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode_before", prop_type_items_to_string.at(value))
	}

	int cycles_before() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "cycles_before")
	}

	void cycles_before(int value) {
		PRIMITIVE_TYPES_SETTER("i", "cycles_before", value)
	}

	prop_type_items_enum mode_after() {
		STRING_TYPE_GETTER("mode_after", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void mode_after(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode_after", prop_type_items_to_string.at(value))
	}

	int cycles_after() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "cycles_after")
	}

	void cycles_after(int value) {
		PRIMITIVE_TYPES_SETTER("i", "cycles_after", value)
	}
};

class FModifierPython : public FModifier {
public:
	FModifierPython(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierPython() : FModifier(0) { }
};

class FModifierLimits : public FModifier {
public:
	FModifierLimits(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierLimits() : FModifier(0) { }

	bool use_min_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_x")
	}

	void use_min_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_x", value)
	}

	bool use_min_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_y")
	}

	void use_min_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_y", value)
	}

	bool use_max_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_x")
	}

	void use_max_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_x", value)
	}

	bool use_max_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_y")
	}

	void use_max_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_y", value)
	}

	float min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_x")
	}

	void min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_x", value)
	}

	float min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_y")
	}

	void min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_y", value)
	}

	float max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_x")
	}

	void max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_x", value)
	}

	float max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_y")
	}

	void max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_y", value)
	}
};

class FModifierNoise : public FModifier {
public:
	FModifierNoise(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierNoise() : FModifier(0) { }

	enum prop_modification_items_enum {
		prop_modification_items_REPLACE = 0,	
		prop_modification_items_ADD = 1,	
		prop_modification_items_SUBTRACT = 2,	
		prop_modification_items_MULTIPLY = 3	
	};

	std::map<std::string, int> create_string_to_prop_modification_items() {
		return {{"REPLACE", prop_modification_items_REPLACE}, {"ADD", prop_modification_items_ADD}, {"SUBTRACT", prop_modification_items_SUBTRACT}, {"MULTIPLY", prop_modification_items_MULTIPLY}};
	};

	std::map<int, std::string> create_prop_modification_items_to_string() {
		return {{prop_modification_items_REPLACE, "REPLACE"}, {prop_modification_items_ADD, "ADD"}, {prop_modification_items_SUBTRACT, "SUBTRACT"}, {prop_modification_items_MULTIPLY, "MULTIPLY"}};
	};

	const std::map<std::string, int> string_to_prop_modification_items = create_string_to_prop_modification_items();
	const std::map<int, std::string> prop_modification_items_to_string = create_prop_modification_items_to_string();

	prop_modification_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<prop_modification_items_enum>(string_to_prop_modification_items.at(resstr)))
	}

	void blend_type(prop_modification_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", prop_modification_items_to_string.at(value))
	}

	float scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale")
	}

	void scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale", value)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	float phase() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "phase")
	}

	void phase(float value) {
		PRIMITIVE_TYPES_SETTER("f", "phase", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	int depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "depth")
	}

	void depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "depth", value)
	}
};

class FModifierStepped : public FModifier {
public:
	FModifierStepped(PyObject* pyobj) : FModifier(pyobj) {}
	FModifierStepped() : FModifier(0) { }

	float frame_step() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_step")
	}

	void frame_step(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_step", value)
	}

	float frame_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_offset")
	}

	void frame_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_offset", value)
	}

	bool use_frame_start() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_frame_start")
	}

	void use_frame_start(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_frame_start", value)
	}

	bool use_frame_end() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_frame_end")
	}

	void use_frame_end(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_frame_end", value)
	}

	float frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_start")
	}

	void frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_start", value)
	}

	float frame_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_end")
	}

	void frame_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_end", value)
	}
};

class FluidSettings : public pyUniplug {
public:
	FluidSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	FluidSettings() : pyUniplug(0) { }

	enum prop_fluid_type_items_enum {
		prop_fluid_type_items_NONE = 1,	
		prop_fluid_type_items_DOMAIN = 2,	
		prop_fluid_type_items_FLUID = 4,	
		prop_fluid_type_items_OBSTACLE = 8,	
		prop_fluid_type_items_INFLOW = 16,	
		prop_fluid_type_items_OUTFLOW = 32,	
		prop_fluid_type_items_PARTICLE = 64,	
		prop_fluid_type_items_CONTROL = 128	
	};

	std::map<std::string, int> create_string_to_prop_fluid_type_items() {
		return {{"NONE", prop_fluid_type_items_NONE}, {"DOMAIN", prop_fluid_type_items_DOMAIN}, {"FLUID", prop_fluid_type_items_FLUID}, {"OBSTACLE", prop_fluid_type_items_OBSTACLE}, {"INFLOW", prop_fluid_type_items_INFLOW}, {"OUTFLOW", prop_fluid_type_items_OUTFLOW}, {"PARTICLE", prop_fluid_type_items_PARTICLE}, {"CONTROL", prop_fluid_type_items_CONTROL}};
	};

	std::map<int, std::string> create_prop_fluid_type_items_to_string() {
		return {{prop_fluid_type_items_NONE, "NONE"}, {prop_fluid_type_items_DOMAIN, "DOMAIN"}, {prop_fluid_type_items_FLUID, "FLUID"}, {prop_fluid_type_items_OBSTACLE, "OBSTACLE"}, {prop_fluid_type_items_INFLOW, "INFLOW"}, {prop_fluid_type_items_OUTFLOW, "OUTFLOW"}, {prop_fluid_type_items_PARTICLE, "PARTICLE"}, {prop_fluid_type_items_CONTROL, "CONTROL"}};
	};

	const std::map<std::string, int> string_to_prop_fluid_type_items = create_string_to_prop_fluid_type_items();
	const std::map<int, std::string> prop_fluid_type_items_to_string = create_prop_fluid_type_items_to_string();

	prop_fluid_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_fluid_type_items_enum>(string_to_prop_fluid_type_items.at(resstr)))
	}

	void type(prop_fluid_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_fluid_type_items_to_string.at(value))
	}
};

class DomainFluidSettings : public FluidSettings {
public:
	DomainFluidSettings(PyObject* pyobj) : FluidSettings(pyobj) {}
	DomainFluidSettings() : FluidSettings(0) { }

	int threads() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "threads")
	}

	void threads(int value) {
		PRIMITIVE_TYPES_SETTER("i", "threads", value)
	}

	int resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution")
	}

	void resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution", value)
	}

	int preview_resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "preview_resolution")
	}

	void preview_resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "preview_resolution", value)
	}

	enum quality_items_enum {
		quality_items_GEOMETRY = 1,	
		quality_items_PREVIEW = 2,	
		quality_items_FINAL = 3	
	};

	std::map<std::string, int> create_string_to_quality_items() {
		return {{"GEOMETRY", quality_items_GEOMETRY}, {"PREVIEW", quality_items_PREVIEW}, {"FINAL", quality_items_FINAL}};
	};

	std::map<int, std::string> create_quality_items_to_string() {
		return {{quality_items_GEOMETRY, "GEOMETRY"}, {quality_items_PREVIEW, "PREVIEW"}, {quality_items_FINAL, "FINAL"}};
	};

	const std::map<std::string, int> string_to_quality_items = create_string_to_quality_items();
	const std::map<int, std::string> quality_items_to_string = create_quality_items_to_string();

	quality_items_enum viewport_display_mode() {
		STRING_TYPE_GETTER("viewport_display_mode", static_cast<quality_items_enum>(string_to_quality_items.at(resstr)))
	}

	void viewport_display_mode(quality_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "viewport_display_mode", quality_items_to_string.at(value))
	}

	quality_items_enum render_display_mode() {
		STRING_TYPE_GETTER("render_display_mode", static_cast<quality_items_enum>(string_to_quality_items.at(resstr)))
	}

	void render_display_mode(quality_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "render_display_mode", quality_items_to_string.at(value))
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	std::string memory_estimate() {
		STRING_TYPE_GETTER("memory_estimate", resstr)
	}

	void memory_estimate(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "memory_estimate", value)
	}

	VFLOAT3 gravity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gravity", 3)
	}

	void gravity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gravity", 3)
	}

	bool use_time_override() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_time_override")
	}

	void use_time_override(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_time_override", value)
	}

	float start_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "start_time")
	}

	void start_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "start_time", value)
	}

	float end_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "end_time")
	}

	void end_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "end_time", value)
	}

	int frame_offset() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_offset")
	}

	void frame_offset(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_offset", value)
	}

	float simulation_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simulation_scale")
	}

	void simulation_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simulation_scale", value)
	}

	float simulation_rate() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simulation_rate")
	}

	void simulation_rate(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simulation_rate", value)
	}

	float viscosity_base() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "viscosity_base")
	}

	void viscosity_base(float value) {
		PRIMITIVE_TYPES_SETTER("f", "viscosity_base", value)
	}

	int viscosity_exponent() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "viscosity_exponent")
	}

	void viscosity_exponent(int value) {
		PRIMITIVE_TYPES_SETTER("i", "viscosity_exponent", value)
	}

	int grid_levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grid_levels")
	}

	void grid_levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grid_levels", value)
	}

	float compressibility() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "compressibility")
	}

	void compressibility(float value) {
		PRIMITIVE_TYPES_SETTER("f", "compressibility", value)
	}

	enum slip_items_enum {
		slip_items_NOSLIP = 512,	
		slip_items_PARTIALSLIP = 1024,	
		slip_items_FREESLIP = 2048	
	};

	std::map<std::string, int> create_string_to_slip_items() {
		return {{"NOSLIP", slip_items_NOSLIP}, {"PARTIALSLIP", slip_items_PARTIALSLIP}, {"FREESLIP", slip_items_FREESLIP}};
	};

	std::map<int, std::string> create_slip_items_to_string() {
		return {{slip_items_NOSLIP, "NOSLIP"}, {slip_items_PARTIALSLIP, "PARTIALSLIP"}, {slip_items_FREESLIP, "FREESLIP"}};
	};

	const std::map<std::string, int> string_to_slip_items = create_string_to_slip_items();
	const std::map<int, std::string> slip_items_to_string = create_slip_items_to_string();

	slip_items_enum slip_type() {
		STRING_TYPE_GETTER("slip_type", static_cast<slip_items_enum>(string_to_slip_items.at(resstr)))
	}

	void slip_type(slip_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "slip_type", slip_items_to_string.at(value))
	}

	float partial_slip_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "partial_slip_factor")
	}

	void partial_slip_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "partial_slip_factor", value)
	}

	float surface_smooth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "surface_smooth")
	}

	void surface_smooth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "surface_smooth", value)
	}

	int surface_subdivisions() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "surface_subdivisions")
	}

	void surface_subdivisions(int value) {
		PRIMITIVE_TYPES_SETTER("i", "surface_subdivisions", value)
	}

	bool use_speed_vectors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_speed_vectors")
	}

	void use_speed_vectors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_speed_vectors", value)
	}

	bool use_surface_noobs() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_surface_noobs")
	}

	void use_surface_noobs(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_surface_noobs", value)
	}

	int tracer_particles() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tracer_particles")
	}

	void tracer_particles(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tracer_particles", value)
	}

	float generate_particles() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "generate_particles")
	}

	void generate_particles(float value) {
		PRIMITIVE_TYPES_SETTER("f", "generate_particles", value)
	}

	std::map<std::string, FluidMeshVertex> fluid_mesh_vertices();
};

class FluidMeshVertex : public pyUniplug {
public:
	FluidMeshVertex(PyObject* pyobj) : pyUniplug(pyobj) {}
	FluidMeshVertex() : pyUniplug(0) { }

	VFLOAT3 velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "velocity", 3)
	}

	void velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "velocity", 3)
	}
};

class FluidFluidSettings : public FluidSettings {
public:
	FluidFluidSettings(PyObject* pyobj) : FluidSettings(pyobj) {}
	FluidFluidSettings() : FluidSettings(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	enum volume_type_items_enum {
		volume_type_items_VOLUME = 1,	
		volume_type_items_SHELL = 2,	
		volume_type_items_BOTH = 3	
	};

	std::map<std::string, int> create_string_to_volume_type_items() {
		return {{"VOLUME", volume_type_items_VOLUME}, {"SHELL", volume_type_items_SHELL}, {"BOTH", volume_type_items_BOTH}};
	};

	std::map<int, std::string> create_volume_type_items_to_string() {
		return {{volume_type_items_VOLUME, "VOLUME"}, {volume_type_items_SHELL, "SHELL"}, {volume_type_items_BOTH, "BOTH"}};
	};

	const std::map<std::string, int> string_to_volume_type_items = create_string_to_volume_type_items();
	const std::map<int, std::string> volume_type_items_to_string = create_volume_type_items_to_string();

	volume_type_items_enum volume_initialization() {
		STRING_TYPE_GETTER("volume_initialization", static_cast<volume_type_items_enum>(string_to_volume_type_items.at(resstr)))
	}

	void volume_initialization(volume_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "volume_initialization", volume_type_items_to_string.at(value))
	}

	bool use_animated_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animated_mesh")
	}

	void use_animated_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animated_mesh", value)
	}

	VFLOAT3 initial_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "initial_velocity", 3)
	}

	void initial_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "initial_velocity", 3)
	}
};

class ObstacleFluidSettings : public FluidSettings {
public:
	ObstacleFluidSettings(PyObject* pyobj) : FluidSettings(pyobj) {}
	ObstacleFluidSettings() : FluidSettings(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	enum volume_type_items_enum {
		volume_type_items_VOLUME = 1,	
		volume_type_items_SHELL = 2,	
		volume_type_items_BOTH = 3	
	};

	std::map<std::string, int> create_string_to_volume_type_items() {
		return {{"VOLUME", volume_type_items_VOLUME}, {"SHELL", volume_type_items_SHELL}, {"BOTH", volume_type_items_BOTH}};
	};

	std::map<int, std::string> create_volume_type_items_to_string() {
		return {{volume_type_items_VOLUME, "VOLUME"}, {volume_type_items_SHELL, "SHELL"}, {volume_type_items_BOTH, "BOTH"}};
	};

	const std::map<std::string, int> string_to_volume_type_items = create_string_to_volume_type_items();
	const std::map<int, std::string> volume_type_items_to_string = create_volume_type_items_to_string();

	volume_type_items_enum volume_initialization() {
		STRING_TYPE_GETTER("volume_initialization", static_cast<volume_type_items_enum>(string_to_volume_type_items.at(resstr)))
	}

	void volume_initialization(volume_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "volume_initialization", volume_type_items_to_string.at(value))
	}

	bool use_animated_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animated_mesh")
	}

	void use_animated_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animated_mesh", value)
	}

	enum slip_items_enum {
		slip_items_NOSLIP = 512,	
		slip_items_PARTIALSLIP = 1024,	
		slip_items_FREESLIP = 2048	
	};

	std::map<std::string, int> create_string_to_slip_items() {
		return {{"NOSLIP", slip_items_NOSLIP}, {"PARTIALSLIP", slip_items_PARTIALSLIP}, {"FREESLIP", slip_items_FREESLIP}};
	};

	std::map<int, std::string> create_slip_items_to_string() {
		return {{slip_items_NOSLIP, "NOSLIP"}, {slip_items_PARTIALSLIP, "PARTIALSLIP"}, {slip_items_FREESLIP, "FREESLIP"}};
	};

	const std::map<std::string, int> string_to_slip_items = create_string_to_slip_items();
	const std::map<int, std::string> slip_items_to_string = create_slip_items_to_string();

	slip_items_enum slip_type() {
		STRING_TYPE_GETTER("slip_type", static_cast<slip_items_enum>(string_to_slip_items.at(resstr)))
	}

	void slip_type(slip_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "slip_type", slip_items_to_string.at(value))
	}

	float partial_slip_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "partial_slip_factor")
	}

	void partial_slip_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "partial_slip_factor", value)
	}

	float impact_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "impact_factor")
	}

	void impact_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "impact_factor", value)
	}
};

class InflowFluidSettings : public FluidSettings {
public:
	InflowFluidSettings(PyObject* pyobj) : FluidSettings(pyobj) {}
	InflowFluidSettings() : FluidSettings(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	enum volume_type_items_enum {
		volume_type_items_VOLUME = 1,	
		volume_type_items_SHELL = 2,	
		volume_type_items_BOTH = 3	
	};

	std::map<std::string, int> create_string_to_volume_type_items() {
		return {{"VOLUME", volume_type_items_VOLUME}, {"SHELL", volume_type_items_SHELL}, {"BOTH", volume_type_items_BOTH}};
	};

	std::map<int, std::string> create_volume_type_items_to_string() {
		return {{volume_type_items_VOLUME, "VOLUME"}, {volume_type_items_SHELL, "SHELL"}, {volume_type_items_BOTH, "BOTH"}};
	};

	const std::map<std::string, int> string_to_volume_type_items = create_string_to_volume_type_items();
	const std::map<int, std::string> volume_type_items_to_string = create_volume_type_items_to_string();

	volume_type_items_enum volume_initialization() {
		STRING_TYPE_GETTER("volume_initialization", static_cast<volume_type_items_enum>(string_to_volume_type_items.at(resstr)))
	}

	void volume_initialization(volume_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "volume_initialization", volume_type_items_to_string.at(value))
	}

	bool use_animated_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animated_mesh")
	}

	void use_animated_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animated_mesh", value)
	}

	VFLOAT3 inflow_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inflow_velocity", 3)
	}

	void inflow_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inflow_velocity", 3)
	}

	bool use_local_coords() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_coords")
	}

	void use_local_coords(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_coords", value)
	}
};

class OutflowFluidSettings : public FluidSettings {
public:
	OutflowFluidSettings(PyObject* pyobj) : FluidSettings(pyobj) {}
	OutflowFluidSettings() : FluidSettings(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	enum volume_type_items_enum {
		volume_type_items_VOLUME = 1,	
		volume_type_items_SHELL = 2,	
		volume_type_items_BOTH = 3	
	};

	std::map<std::string, int> create_string_to_volume_type_items() {
		return {{"VOLUME", volume_type_items_VOLUME}, {"SHELL", volume_type_items_SHELL}, {"BOTH", volume_type_items_BOTH}};
	};

	std::map<int, std::string> create_volume_type_items_to_string() {
		return {{volume_type_items_VOLUME, "VOLUME"}, {volume_type_items_SHELL, "SHELL"}, {volume_type_items_BOTH, "BOTH"}};
	};

	const std::map<std::string, int> string_to_volume_type_items = create_string_to_volume_type_items();
	const std::map<int, std::string> volume_type_items_to_string = create_volume_type_items_to_string();

	volume_type_items_enum volume_initialization() {
		STRING_TYPE_GETTER("volume_initialization", static_cast<volume_type_items_enum>(string_to_volume_type_items.at(resstr)))
	}

	void volume_initialization(volume_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "volume_initialization", volume_type_items_to_string.at(value))
	}

	bool use_animated_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animated_mesh")
	}

	void use_animated_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animated_mesh", value)
	}
};

class ParticleFluidSettings : public FluidSettings {
public:
	ParticleFluidSettings(PyObject* pyobj) : FluidSettings(pyobj) {}
	ParticleFluidSettings() : FluidSettings(0) { }

	bool use_drops() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_drops")
	}

	void use_drops(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_drops", value)
	}

	bool use_floats() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_floats")
	}

	void use_floats(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_floats", value)
	}

	bool show_tracer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_tracer")
	}

	void show_tracer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_tracer", value)
	}

	float particle_influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "particle_influence")
	}

	void particle_influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "particle_influence", value)
	}

	float alpha_influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha_influence")
	}

	void alpha_influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha_influence", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}
};

class ControlFluidSettings : public FluidSettings {
public:
	ControlFluidSettings(PyObject* pyobj) : FluidSettings(pyobj) {}
	ControlFluidSettings() : FluidSettings(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	float start_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "start_time")
	}

	void start_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "start_time", value)
	}

	float end_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "end_time")
	}

	void end_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "end_time", value)
	}

	float attraction_strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "attraction_strength")
	}

	void attraction_strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "attraction_strength", value)
	}

	float attraction_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "attraction_radius")
	}

	void attraction_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "attraction_radius", value)
	}

	float velocity_strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_strength")
	}

	void velocity_strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_strength", value)
	}

	float velocity_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_radius")
	}

	void velocity_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_radius", value)
	}

	float quality() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "quality")
	}

	void quality(float value) {
		PRIMITIVE_TYPES_SETTER("f", "quality", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}
};

class GreasePencil : public ID {
public:
	GreasePencil(PyObject* pyobj) : ID(pyobj) {}
	GreasePencil() : ID(0) { }

	std::map<std::string, GPencilLayer> layers();

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	enum draw_mode_items_enum {
		draw_mode_items_CURSOR = 16,	
		draw_mode_items_VIEW = 0,	
		draw_mode_items_SURFACE = 48,	
		draw_mode_items_STROKE = 80	
	};

	std::map<std::string, int> create_string_to_draw_mode_items() {
		return {{"CURSOR", draw_mode_items_CURSOR}, {"VIEW", draw_mode_items_VIEW}, {"SURFACE", draw_mode_items_SURFACE}, {"STROKE", draw_mode_items_STROKE}};
	};

	std::map<int, std::string> create_draw_mode_items_to_string() {
		return {{draw_mode_items_CURSOR, "CURSOR"}, {draw_mode_items_VIEW, "VIEW"}, {draw_mode_items_SURFACE, "SURFACE"}, {draw_mode_items_STROKE, "STROKE"}};
	};

	const std::map<std::string, int> string_to_draw_mode_items = create_string_to_draw_mode_items();
	const std::map<int, std::string> draw_mode_items_to_string = create_draw_mode_items_to_string();

	draw_mode_items_enum draw_mode() {
		STRING_TYPE_GETTER("draw_mode", static_cast<draw_mode_items_enum>(string_to_draw_mode_items.at(resstr)))
	}

	void draw_mode(draw_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_mode", draw_mode_items_to_string.at(value))
	}

	bool use_stroke_endpoints() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stroke_endpoints")
	}

	void use_stroke_endpoints(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stroke_endpoints", value)
	}

	bool use_stroke_edit_mode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stroke_edit_mode")
	}

	void use_stroke_edit_mode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stroke_edit_mode", value)
	}

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class GPencilLayer : public pyUniplug {
public:
	GPencilLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPencilLayer() : pyUniplug(0) { }

	std::string info() {
		STRING_TYPE_GETTER("info", resstr)
	}

	void info(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "info", value)
	}

	std::map<std::string, GPencilFrame> frames();

	GPencilFrame active_frame();

	bool use_volumetric_strokes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_volumetric_strokes")
	}

	void use_volumetric_strokes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_volumetric_strokes", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	float alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha")
	}

	void alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha", value)
	}

	VFLOAT3 fill_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "fill_color", 3)
	}

	void fill_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "fill_color", 3)
	}

	float fill_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fill_alpha")
	}

	void fill_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fill_alpha", value)
	}

	int line_width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "line_width")
	}

	void line_width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "line_width", value)
	}

	bool use_onion_skinning() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_onion_skinning")
	}

	void use_onion_skinning(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_onion_skinning", value)
	}

	int ghost_before_range() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "ghost_before_range")
	}

	void ghost_before_range(int value) {
		PRIMITIVE_TYPES_SETTER("i", "ghost_before_range", value)
	}

	int ghost_after_range() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "ghost_after_range")
	}

	void ghost_after_range(int value) {
		PRIMITIVE_TYPES_SETTER("i", "ghost_after_range", value)
	}

	bool use_ghost_custom_colors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ghost_custom_colors")
	}

	void use_ghost_custom_colors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ghost_custom_colors", value)
	}

	VFLOAT3 before_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "before_color", 3)
	}

	void before_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "before_color", 3)
	}

	VFLOAT3 after_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "after_color", 3)
	}

	void after_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "after_color", 3)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool lock_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock")
	}

	void lock_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock", value)
	}

	bool lock_frame() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_frame")
	}

	void lock_frame(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_frame", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool show_points() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_points")
	}

	void show_points(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_points", value)
	}

	bool show_x_ray() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_x_ray")
	}

	void show_x_ray(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_x_ray", value)
	}

	bool is_stroke_visible() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_stroke_visible")
	}

	void is_stroke_visible(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_stroke_visible", value)
	}

	bool is_fill_visible() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_fill_visible")
	}

	void is_fill_visible(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_fill_visible", value)
	}

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class GPencilFrame : public pyUniplug {
public:
	GPencilFrame(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPencilFrame() : pyUniplug(0) { }

	std::map<std::string, GPencilStroke> strokes();

	int frame_number() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_number")
	}

	void frame_number(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_number", value)
	}

	bool is_edited() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_edited")
	}

	void is_edited(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_edited", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}
};

class GPencilStroke : public pyUniplug {
public:
	GPencilStroke(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPencilStroke() : pyUniplug(0) { }

	std::map<std::string, GPencilStrokePoint> points();

	enum stroke_draw_mode_items_enum {
		stroke_draw_mode_items_SCREEN = 0,	
		stroke_draw_mode_items_3DSPACE = 1,	
		stroke_draw_mode_items_2DSPACE = 2,	
		stroke_draw_mode_items_2DIMAGE = 4	
	};

	std::map<std::string, int> create_string_to_stroke_draw_mode_items() {
		return {{"SCREEN", stroke_draw_mode_items_SCREEN}, {"3DSPACE", stroke_draw_mode_items_3DSPACE}, {"2DSPACE", stroke_draw_mode_items_2DSPACE}, {"2DIMAGE", stroke_draw_mode_items_2DIMAGE}};
	};

	std::map<int, std::string> create_stroke_draw_mode_items_to_string() {
		return {{stroke_draw_mode_items_SCREEN, "SCREEN"}, {stroke_draw_mode_items_3DSPACE, "3DSPACE"}, {stroke_draw_mode_items_2DSPACE, "2DSPACE"}, {stroke_draw_mode_items_2DIMAGE, "2DIMAGE"}};
	};

	const std::map<std::string, int> string_to_stroke_draw_mode_items = create_string_to_stroke_draw_mode_items();
	const std::map<int, std::string> stroke_draw_mode_items_to_string = create_stroke_draw_mode_items_to_string();

	stroke_draw_mode_items_enum draw_mode() {
		STRING_TYPE_GETTER("draw_mode", static_cast<stroke_draw_mode_items_enum>(string_to_stroke_draw_mode_items.at(resstr)))
	}

	void draw_mode(stroke_draw_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_mode", stroke_draw_mode_items_to_string.at(value))
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}
};

class GPencilStrokePoint : public pyUniplug {
public:
	GPencilStrokePoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPencilStrokePoint() : pyUniplug(0) { }

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	float pressure() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pressure")
	}

	void pressure(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pressure", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}
};

class Group : public ID {
public:
	Group(PyObject* pyobj) : ID(pyobj) {}
	Group() : ID(0) { }

	VFLOAT3 dupli_offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "dupli_offset", 3)
	}

	void dupli_offset(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "dupli_offset", 3)
	}

	std::array<bool, 20> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 20)
	}

	void layers(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 20)
	}

	std::map<std::string, Object> objects();
};

class RenderSlot : public pyUniplug {
public:
	RenderSlot(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderSlot() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class Image : public ID {
public:
	Image(PyObject* pyobj) : ID(pyobj) {}
	Image() : ID(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	std::string filepath_raw() {
		STRING_TYPE_GETTER("filepath_raw", resstr)
	}

	void filepath_raw(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath_raw", value)
	}

	enum image_type_items_enum {
		image_type_items_BMP = 20,	
		image_type_items_IRIS = 1,	
		image_type_items_PNG = 17,	
		image_type_items_JPEG = 4,	
		image_type_items_JPEG2000 = 30,	
		image_type_items_TARGA = 0,	
		image_type_items_TARGA_RAW = 14,	
		image_type_items_CINEON = 26,	
		image_type_items_DPX = 27,	
		image_type_items_OPEN_EXR_MULTILAYER = 28,	
		image_type_items_OPEN_EXR = 23,	
		image_type_items_HDR = 21,	
		image_type_items_TIFF = 22,	
		image_type_items_AVI_JPEG = 16,	
		image_type_items_AVI_RAW = 15,	
		image_type_items_FRAMESERVER = 25,	
		image_type_items_H264 = 31,	
		image_type_items_FFMPEG = 24,	
		image_type_items_THEORA = 33,	
		image_type_items_XVID = 32	
	};

	std::map<std::string, int> create_string_to_image_type_items() {
		return {{"BMP", image_type_items_BMP}, {"IRIS", image_type_items_IRIS}, {"PNG", image_type_items_PNG}, {"JPEG", image_type_items_JPEG}, {"JPEG2000", image_type_items_JPEG2000}, {"TARGA", image_type_items_TARGA}, {"TARGA_RAW", image_type_items_TARGA_RAW}, {"CINEON", image_type_items_CINEON}, {"DPX", image_type_items_DPX}, {"OPEN_EXR_MULTILAYER", image_type_items_OPEN_EXR_MULTILAYER}, {"OPEN_EXR", image_type_items_OPEN_EXR}, {"HDR", image_type_items_HDR}, {"TIFF", image_type_items_TIFF}, {"AVI_JPEG", image_type_items_AVI_JPEG}, {"AVI_RAW", image_type_items_AVI_RAW}, {"FRAMESERVER", image_type_items_FRAMESERVER}, {"H264", image_type_items_H264}, {"FFMPEG", image_type_items_FFMPEG}, {"THEORA", image_type_items_THEORA}, {"XVID", image_type_items_XVID}};
	};

	std::map<int, std::string> create_image_type_items_to_string() {
		return {{image_type_items_BMP, "BMP"}, {image_type_items_IRIS, "IRIS"}, {image_type_items_PNG, "PNG"}, {image_type_items_JPEG, "JPEG"}, {image_type_items_JPEG2000, "JPEG2000"}, {image_type_items_TARGA, "TARGA"}, {image_type_items_TARGA_RAW, "TARGA_RAW"}, {image_type_items_CINEON, "CINEON"}, {image_type_items_DPX, "DPX"}, {image_type_items_OPEN_EXR_MULTILAYER, "OPEN_EXR_MULTILAYER"}, {image_type_items_OPEN_EXR, "OPEN_EXR"}, {image_type_items_HDR, "HDR"}, {image_type_items_TIFF, "TIFF"}, {image_type_items_AVI_JPEG, "AVI_JPEG"}, {image_type_items_AVI_RAW, "AVI_RAW"}, {image_type_items_FRAMESERVER, "FRAMESERVER"}, {image_type_items_H264, "H264"}, {image_type_items_FFMPEG, "FFMPEG"}, {image_type_items_THEORA, "THEORA"}, {image_type_items_XVID, "XVID"}};
	};

	const std::map<std::string, int> string_to_image_type_items = create_string_to_image_type_items();
	const std::map<int, std::string> image_type_items_to_string = create_image_type_items_to_string();

	image_type_items_enum file_format() {
		STRING_TYPE_GETTER("file_format", static_cast<image_type_items_enum>(string_to_image_type_items.at(resstr)))
	}

	void file_format(image_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "file_format", image_type_items_to_string.at(value))
	}

	enum image_source_items_enum {
		image_source_items_FILE = 1,	
		image_source_items_SEQUENCE = 2,	
		image_source_items_MOVIE = 3,	
		image_source_items_GENERATED = 4,	
		image_source_items_VIEWER = 5	
	};

	std::map<std::string, int> create_string_to_image_source_items() {
		return {{"FILE", image_source_items_FILE}, {"SEQUENCE", image_source_items_SEQUENCE}, {"MOVIE", image_source_items_MOVIE}, {"GENERATED", image_source_items_GENERATED}, {"VIEWER", image_source_items_VIEWER}};
	};

	std::map<int, std::string> create_image_source_items_to_string() {
		return {{image_source_items_FILE, "FILE"}, {image_source_items_SEQUENCE, "SEQUENCE"}, {image_source_items_MOVIE, "MOVIE"}, {image_source_items_GENERATED, "GENERATED"}, {image_source_items_VIEWER, "VIEWER"}};
	};

	const std::map<std::string, int> string_to_image_source_items = create_string_to_image_source_items();
	const std::map<int, std::string> image_source_items_to_string = create_image_source_items_to_string();

	image_source_items_enum source() {
		STRING_TYPE_GETTER("source", static_cast<image_source_items_enum>(string_to_image_source_items.at(resstr)))
	}

	void source(image_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "source", image_source_items_to_string.at(value))
	}

	enum prop_type_items_enum {
		prop_type_items_IMAGE = 0,	
		prop_type_items_MULTILAYER = 1,	
		prop_type_items_UV_TEST = 2,	
		prop_type_items_RENDER_RESULT = 4,	
		prop_type_items_COMPOSITING = 5	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"IMAGE", prop_type_items_IMAGE}, {"MULTILAYER", prop_type_items_MULTILAYER}, {"UV_TEST", prop_type_items_UV_TEST}, {"RENDER_RESULT", prop_type_items_RENDER_RESULT}, {"COMPOSITING", prop_type_items_COMPOSITING}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_IMAGE, "IMAGE"}, {prop_type_items_MULTILAYER, "MULTILAYER"}, {prop_type_items_UV_TEST, "UV_TEST"}, {prop_type_items_RENDER_RESULT, "RENDER_RESULT"}, {prop_type_items_COMPOSITING, "COMPOSITING"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	PackedFile packed_file();

	std::map<std::string, ImagePackedFile> packed_files();

	enum prop_field_order_items_enum {
		prop_field_order_items_EVEN = 0,	
		prop_field_order_items_ODD = 2	
	};

	std::map<std::string, int> create_string_to_prop_field_order_items() {
		return {{"EVEN", prop_field_order_items_EVEN}, {"ODD", prop_field_order_items_ODD}};
	};

	std::map<int, std::string> create_prop_field_order_items_to_string() {
		return {{prop_field_order_items_EVEN, "EVEN"}, {prop_field_order_items_ODD, "ODD"}};
	};

	const std::map<std::string, int> string_to_prop_field_order_items = create_string_to_prop_field_order_items();
	const std::map<int, std::string> prop_field_order_items_to_string = create_prop_field_order_items_to_string();

	prop_field_order_items_enum field_order() {
		STRING_TYPE_GETTER("field_order", static_cast<prop_field_order_items_enum>(string_to_prop_field_order_items.at(resstr)))
	}

	void field_order(prop_field_order_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "field_order", prop_field_order_items_to_string.at(value))
	}

	bool use_fields() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fields")
	}

	void use_fields(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fields", value)
	}

	bool use_view_as_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_view_as_render")
	}

	void use_view_as_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_view_as_render", value)
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	bool use_multiview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multiview")
	}

	void use_multiview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multiview", value)
	}

	bool is_stereo_3d() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_stereo_3d")
	}

	void is_stereo_3d(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_stereo_3d", value)
	}

	bool is_multiview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_multiview")
	}

	void is_multiview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_multiview", value)
	}

	bool is_dirty() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_dirty")
	}

	void is_dirty(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_dirty", value)
	}

	enum image_generated_type_items_enum {
		image_generated_type_items_BLANK = 0,	
		image_generated_type_items_UV_GRID = 1,	
		image_generated_type_items_COLOR_GRID = 2	
	};

	std::map<std::string, int> create_string_to_image_generated_type_items() {
		return {{"BLANK", image_generated_type_items_BLANK}, {"UV_GRID", image_generated_type_items_UV_GRID}, {"COLOR_GRID", image_generated_type_items_COLOR_GRID}};
	};

	std::map<int, std::string> create_image_generated_type_items_to_string() {
		return {{image_generated_type_items_BLANK, "BLANK"}, {image_generated_type_items_UV_GRID, "UV_GRID"}, {image_generated_type_items_COLOR_GRID, "COLOR_GRID"}};
	};

	const std::map<std::string, int> string_to_image_generated_type_items = create_string_to_image_generated_type_items();
	const std::map<int, std::string> image_generated_type_items_to_string = create_image_generated_type_items_to_string();

	image_generated_type_items_enum generated_type() {
		STRING_TYPE_GETTER("generated_type", static_cast<image_generated_type_items_enum>(string_to_image_generated_type_items.at(resstr)))
	}

	void generated_type(image_generated_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "generated_type", image_generated_type_items_to_string.at(value))
	}

	int generated_width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "generated_width")
	}

	void generated_width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "generated_width", value)
	}

	int generated_height() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "generated_height")
	}

	void generated_height(int value) {
		PRIMITIVE_TYPES_SETTER("i", "generated_height", value)
	}

	bool use_generated_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_generated_float")
	}

	void use_generated_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_generated_float", value)
	}

	VFLOAT4 generated_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "generated_color", 4)
	}

	void generated_color(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "generated_color", 4)
	}

	enum prop_mapping_items_enum {
		prop_mapping_items_UV = 0,	
		prop_mapping_items_REFLECTION = 16	
	};

	std::map<std::string, int> create_string_to_prop_mapping_items() {
		return {{"UV", prop_mapping_items_UV}, {"REFLECTION", prop_mapping_items_REFLECTION}};
	};

	std::map<int, std::string> create_prop_mapping_items_to_string() {
		return {{prop_mapping_items_UV, "UV"}, {prop_mapping_items_REFLECTION, "REFLECTION"}};
	};

	const std::map<std::string, int> string_to_prop_mapping_items = create_string_to_prop_mapping_items();
	const std::map<int, std::string> prop_mapping_items_to_string = create_prop_mapping_items_to_string();

	prop_mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<prop_mapping_items_enum>(string_to_prop_mapping_items.at(resstr)))
	}

	void mapping(prop_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", prop_mapping_items_to_string.at(value))
	}

	VFLOAT2 display_aspect() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "display_aspect", 2)
	}

	void display_aspect(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "display_aspect", 2)
	}

	bool use_animation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animation")
	}

	void use_animation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animation", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	int fps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "fps")
	}

	void fps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "fps", value)
	}

	bool use_tiles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tiles")
	}

	void use_tiles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tiles", value)
	}

	int tiles_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tiles_x")
	}

	void tiles_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tiles_x", value)
	}

	int tiles_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tiles_y")
	}

	void tiles_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tiles_y", value)
	}

	bool use_clamp_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp_x")
	}

	void use_clamp_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp_x", value)
	}

	bool use_clamp_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp_y")
	}

	void use_clamp_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp_y", value)
	}

	int bindcode() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bindcode")
	}

	void bindcode(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bindcode", value)
	}

	std::map<std::string, RenderSlot> render_slots() {
		MAP_TYPE_GETTER("render_slots", RenderSlot)
	}

	bool has_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_data")
	}

	void has_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_data", value)
	}

	int depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "depth")
	}

	void depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "depth", value)
	}

	std::array<int, 2> size() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "size", 2)
	}

	void size(int values[2]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "size", 2)
	}

	VFLOAT2 resolution() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "resolution", 2)
	}

	void resolution(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "resolution", 2)
	}

	int frame_duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_duration")
	}

	void frame_duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_duration", value)
	}

	std::vector<float> pixels() {
		PRIMITIVE_TYPES_VECTOR_GETTER(float, (float)PyFloat_AsDouble(item), "pixels")
	}

	void pixels(float values[]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "pixels", sizeof(values)/sizeof(values[0]))
	}

	int channels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "channels")
	}

	void channels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "channels", value)
	}

	bool is_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_float")
	}

	void is_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_float", value)
	}

	ColorManagedInputColorspaceSettings colorspace_settings() {
		CLASS_TYPES_GETTER(ColorManagedInputColorspaceSettings, "colorspace_settings")
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	enum views_format_items_enum {
		views_format_items_INDIVIDUAL = 0,	
		views_format_items_STEREO_3D = 1	
	};

	std::map<std::string, int> create_string_to_views_format_items() {
		return {{"INDIVIDUAL", views_format_items_INDIVIDUAL}, {"STEREO_3D", views_format_items_STEREO_3D}};
	};

	std::map<int, std::string> create_views_format_items_to_string() {
		return {{views_format_items_INDIVIDUAL, "INDIVIDUAL"}, {views_format_items_STEREO_3D, "STEREO_3D"}};
	};

	const std::map<std::string, int> string_to_views_format_items = create_string_to_views_format_items();
	const std::map<int, std::string> views_format_items_to_string = create_views_format_items_to_string();

	views_format_items_enum views_format() {
		STRING_TYPE_GETTER("views_format", static_cast<views_format_items_enum>(string_to_views_format_items.at(resstr)))
	}

	void views_format(views_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "views_format", views_format_items_to_string.at(value))
	}

	Stereo3dFormat stereo_3d_format();

	void save_render(const std::string filepath, Scene scene);

	void save() {
		PYTHON_FUNCTION_CALL("save")
	}

	void pack(bool as_png = false, const std::string data = NULL, int data_len = 0) {
		PYTHON_FUNCTION_ARGS_CALL("pack", "isi", as_png, data, data_len)
	}

	enum unpack_method_items_enum {
		unpack_method_items_USE_LOCAL = 5,	
		unpack_method_items_WRITE_LOCAL = 4,	
		unpack_method_items_USE_ORIGINAL = 6,	
		unpack_method_items_WRITE_ORIGINAL = 3	
	};

	std::map<std::string, int> create_string_to_unpack_method_items() {
		return {{"USE_LOCAL", unpack_method_items_USE_LOCAL}, {"WRITE_LOCAL", unpack_method_items_WRITE_LOCAL}, {"USE_ORIGINAL", unpack_method_items_USE_ORIGINAL}, {"WRITE_ORIGINAL", unpack_method_items_WRITE_ORIGINAL}};
	};

	std::map<int, std::string> create_unpack_method_items_to_string() {
		return {{unpack_method_items_USE_LOCAL, "USE_LOCAL"}, {unpack_method_items_WRITE_LOCAL, "WRITE_LOCAL"}, {unpack_method_items_USE_ORIGINAL, "USE_ORIGINAL"}, {unpack_method_items_WRITE_ORIGINAL, "WRITE_ORIGINAL"}};
	};

	const std::map<std::string, int> string_to_unpack_method_items = create_string_to_unpack_method_items();
	const std::map<int, std::string> unpack_method_items_to_string = create_unpack_method_items_to_string();

	void unpack(unpack_method_items_enum method = unpack_method_items_USE_LOCAL) {
		PYTHON_FUNCTION_ARGS_CALL("unpack", "s", unpack_method_items_to_string.at(method))
	}

	void reload() {
		PYTHON_FUNCTION_CALL("reload")
	}

	void update() {
		PYTHON_FUNCTION_CALL("update")
	}

	void scale(int width, int height) {
		PYTHON_FUNCTION_ARGS_CALL("scale", "ii", width, height)
	}

	int gl_touch(int frame = 0, int filter = 9985, int mag = 9729) {
		PYTHON_FUNCTION_ARGS_CALL("gl_touch", "iii", frame, filter, mag)
		CREATE_SINGLE_PYOBJ(error)
		PRIMITIVE_TYPES_CONV(error, int, PyLong_AsLong(error_obj))
		NONCLASS_TYPES_RETURN(error_res)
	}

	int gl_load(int frame = 0, int filter = 9985, int mag = 9729) {
		PYTHON_FUNCTION_ARGS_CALL("gl_load", "iii", frame, filter, mag)
		CREATE_SINGLE_PYOBJ(error)
		PRIMITIVE_TYPES_CONV(error, int, PyLong_AsLong(error_obj))
		NONCLASS_TYPES_RETURN(error_res)
	}

	void gl_free() {
		PYTHON_FUNCTION_CALL("gl_free")
	}

	std::string filepath_from_user(ImageUser image_user);

	void buffers_free() {
		PYTHON_FUNCTION_CALL("buffers_free")
	}
};

class ImageUser : public pyUniplug {
public:
	ImageUser(PyObject* pyobj) : pyUniplug(pyobj) {}
	ImageUser() : pyUniplug(0) { }

	bool use_auto_refresh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_refresh")
	}

	void use_auto_refresh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_refresh", value)
	}

	int frame_current() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_current")
	}

	void frame_current(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_current", value)
	}

	bool use_cyclic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic")
	}

	void use_cyclic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic", value)
	}

	int frame_duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_duration")
	}

	void frame_duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_duration", value)
	}

	int frame_offset() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_offset")
	}

	void frame_offset(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_offset", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int fields_per_frame() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "fields_per_frame")
	}

	void fields_per_frame(int value) {
		PRIMITIVE_TYPES_SETTER("i", "fields_per_frame", value)
	}

	int multilayer_layer() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "multilayer_layer")
	}

	void multilayer_layer(int value) {
		PRIMITIVE_TYPES_SETTER("i", "multilayer_layer", value)
	}

	int multilayer_view() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "multilayer_view")
	}

	void multilayer_view(int value) {
		PRIMITIVE_TYPES_SETTER("i", "multilayer_view", value)
	}
};

class ImagePackedFile : public pyUniplug {
public:
	ImagePackedFile(PyObject* pyobj) : pyUniplug(pyobj) {}
	ImagePackedFile() : pyUniplug(0) { }

	PackedFile packed_file();

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}
};

class Key : public ID {
public:
	Key(PyObject* pyobj) : ID(pyobj) {}
	Key() : ID(0) { }

	ShapeKey reference_key();

	std::map<std::string, ShapeKey> key_blocks();

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	ID user() {
		CLASS_TYPES_GETTER(ID, "user")
	}

	bool use_relative() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative")
	}

	void use_relative(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative", value)
	}

	float eval_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "eval_time")
	}

	void eval_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "eval_time", value)
	}
};

class ShapeKey : public pyUniplug {
public:
	ShapeKey(PyObject* pyobj) : pyUniplug(pyobj) {}
	ShapeKey() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	float frame() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame")
	}

	void frame(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame", value)
	}

	float value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value")
	}

	void value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value", value)
	}

	enum keyblock_type_items_enum {
		keyblock_type_items_KEY_LINEAR = 0,	
		keyblock_type_items_KEY_CARDINAL = 1,	
		keyblock_type_items_KEY_CATMULL_ROM = 3,	
		keyblock_type_items_KEY_BSPLINE = 2	
	};

	std::map<std::string, int> create_string_to_keyblock_type_items() {
		return {{"KEY_LINEAR", keyblock_type_items_KEY_LINEAR}, {"KEY_CARDINAL", keyblock_type_items_KEY_CARDINAL}, {"KEY_CATMULL_ROM", keyblock_type_items_KEY_CATMULL_ROM}, {"KEY_BSPLINE", keyblock_type_items_KEY_BSPLINE}};
	};

	std::map<int, std::string> create_keyblock_type_items_to_string() {
		return {{keyblock_type_items_KEY_LINEAR, "KEY_LINEAR"}, {keyblock_type_items_KEY_CARDINAL, "KEY_CARDINAL"}, {keyblock_type_items_KEY_CATMULL_ROM, "KEY_CATMULL_ROM"}, {keyblock_type_items_KEY_BSPLINE, "KEY_BSPLINE"}};
	};

	const std::map<std::string, int> string_to_keyblock_type_items = create_string_to_keyblock_type_items();
	const std::map<int, std::string> keyblock_type_items_to_string = create_keyblock_type_items_to_string();

	keyblock_type_items_enum interpolation() {
		STRING_TYPE_GETTER("interpolation", static_cast<keyblock_type_items_enum>(string_to_keyblock_type_items.at(resstr)))
	}

	void interpolation(keyblock_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation", keyblock_type_items_to_string.at(value))
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	ShapeKey relative_key() {
		CLASS_TYPES_GETTER(ShapeKey, "relative_key")
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	float slider_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "slider_min")
	}

	void slider_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "slider_min", value)
	}

	float slider_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "slider_max")
	}

	void slider_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "slider_max", value)
	}

	std::map<std::string, UnknownType> data() {
		MAP_TYPE_GETTER("data", UnknownType)
	}
};

class ShapeKeyPoint : public pyUniplug {
public:
	ShapeKeyPoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	ShapeKeyPoint() : pyUniplug(0) { }

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}
};

class ShapeKeyCurvePoint : public pyUniplug {
public:
	ShapeKeyCurvePoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	ShapeKeyCurvePoint() : pyUniplug(0) { }

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	float tilt() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tilt")
	}

	void tilt(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tilt", value)
	}
};

class ShapeKeyBezierPoint : public pyUniplug {
public:
	ShapeKeyBezierPoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	ShapeKeyBezierPoint() : pyUniplug(0) { }

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	VFLOAT3 handle_left() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_left", 3)
	}

	void handle_left(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_left", 3)
	}

	VFLOAT3 handle_right() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_right", 3)
	}

	void handle_right(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_right", 3)
	}
};

class Lamp : public ID {
public:
	Lamp(PyObject* pyobj) : ID(pyobj) {}
	Lamp() : ID(0) { }

	enum lamp_type_items_enum {
		lamp_type_items_POINT = 0,	
		lamp_type_items_SUN = 1,	
		lamp_type_items_SPOT = 2,	
		lamp_type_items_HEMI = 3,	
		lamp_type_items_AREA = 4	
	};

	std::map<std::string, int> create_string_to_lamp_type_items() {
		return {{"POINT", lamp_type_items_POINT}, {"SUN", lamp_type_items_SUN}, {"SPOT", lamp_type_items_SPOT}, {"HEMI", lamp_type_items_HEMI}, {"AREA", lamp_type_items_AREA}};
	};

	std::map<int, std::string> create_lamp_type_items_to_string() {
		return {{lamp_type_items_POINT, "POINT"}, {lamp_type_items_SUN, "SUN"}, {lamp_type_items_SPOT, "SPOT"}, {lamp_type_items_HEMI, "HEMI"}, {lamp_type_items_AREA, "AREA"}};
	};

	const std::map<std::string, int> string_to_lamp_type_items = create_string_to_lamp_type_items();
	const std::map<int, std::string> lamp_type_items_to_string = create_lamp_type_items_to_string();

	lamp_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<lamp_type_items_enum>(string_to_lamp_type_items.at(resstr)))
	}

	void type(lamp_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", lamp_type_items_to_string.at(value))
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	float energy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "energy")
	}

	void energy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "energy", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	bool use_own_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_own_layer")
	}

	void use_own_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_own_layer", value)
	}

	bool use_negative() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_negative")
	}

	void use_negative(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_negative", value)
	}

	bool use_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_specular")
	}

	void use_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_specular", value)
	}

	bool use_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_diffuse")
	}

	void use_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_diffuse", value)
	}

	NodeTree node_tree();

	bool use_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_nodes")
	}

	void use_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_nodes", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	std::map<std::string, LampTextureSlot> texture_slots();

	Texture active_texture() {
		CLASS_TYPES_GETTER(Texture, "active_texture")
	}

	int active_texture_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_texture_index")
	}

	void active_texture_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_texture_index", value)
	}
};

class PointLamp : public Lamp {
public:
	PointLamp(PyObject* pyobj) : Lamp(pyobj) {}
	PointLamp() : Lamp(0) { }

	enum prop_fallofftype_items_enum {
		prop_fallofftype_items_CONSTANT = 0,	
		prop_fallofftype_items_INVERSE_LINEAR = 1,	
		prop_fallofftype_items_INVERSE_SQUARE = 2,	
		prop_fallofftype_items_CUSTOM_CURVE = 3,	
		prop_fallofftype_items_LINEAR_QUADRATIC_WEIGHTED = 4	
	};

	std::map<std::string, int> create_string_to_prop_fallofftype_items() {
		return {{"CONSTANT", prop_fallofftype_items_CONSTANT}, {"INVERSE_LINEAR", prop_fallofftype_items_INVERSE_LINEAR}, {"INVERSE_SQUARE", prop_fallofftype_items_INVERSE_SQUARE}, {"CUSTOM_CURVE", prop_fallofftype_items_CUSTOM_CURVE}, {"LINEAR_QUADRATIC_WEIGHTED", prop_fallofftype_items_LINEAR_QUADRATIC_WEIGHTED}};
	};

	std::map<int, std::string> create_prop_fallofftype_items_to_string() {
		return {{prop_fallofftype_items_CONSTANT, "CONSTANT"}, {prop_fallofftype_items_INVERSE_LINEAR, "INVERSE_LINEAR"}, {prop_fallofftype_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {prop_fallofftype_items_CUSTOM_CURVE, "CUSTOM_CURVE"}, {prop_fallofftype_items_LINEAR_QUADRATIC_WEIGHTED, "LINEAR_QUADRATIC_WEIGHTED"}};
	};

	const std::map<std::string, int> string_to_prop_fallofftype_items = create_string_to_prop_fallofftype_items();
	const std::map<int, std::string> prop_fallofftype_items_to_string = create_prop_fallofftype_items_to_string();

	prop_fallofftype_items_enum falloff_type() {
		STRING_TYPE_GETTER("falloff_type", static_cast<prop_fallofftype_items_enum>(string_to_prop_fallofftype_items.at(resstr)))
	}

	void falloff_type(prop_fallofftype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff_type", prop_fallofftype_items_to_string.at(value))
	}

	CurveMapping falloff_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "falloff_curve")
	}

	bool use_sphere() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sphere")
	}

	void use_sphere(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sphere", value)
	}

	float linear_attenuation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "linear_attenuation")
	}

	void linear_attenuation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "linear_attenuation", value)
	}

	float quadratic_attenuation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "quadratic_attenuation")
	}

	void quadratic_attenuation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "quadratic_attenuation", value)
	}

	bool use_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow")
	}

	void use_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow", value)
	}

	enum prop_shadow_items_enum {
		prop_shadow_items_NOSHADOW = 0,	
		prop_shadow_items_RAY_SHADOW = 8192	
	};

	std::map<std::string, int> create_string_to_prop_shadow_items() {
		return {{"NOSHADOW", prop_shadow_items_NOSHADOW}, {"RAY_SHADOW", prop_shadow_items_RAY_SHADOW}};
	};

	std::map<int, std::string> create_prop_shadow_items_to_string() {
		return {{prop_shadow_items_NOSHADOW, "NOSHADOW"}, {prop_shadow_items_RAY_SHADOW, "RAY_SHADOW"}};
	};

	const std::map<std::string, int> string_to_prop_shadow_items = create_string_to_prop_shadow_items();
	const std::map<int, std::string> prop_shadow_items_to_string = create_prop_shadow_items_to_string();

	prop_shadow_items_enum shadow_method() {
		STRING_TYPE_GETTER("shadow_method", static_cast<prop_shadow_items_enum>(string_to_prop_shadow_items.at(resstr)))
	}

	void shadow_method(prop_shadow_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_method", prop_shadow_items_to_string.at(value))
	}

	int shadow_buffer_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_size")
	}

	void shadow_buffer_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_size", value)
	}

	enum prop_shadbuffiltertype_items_enum {
		prop_shadbuffiltertype_items_BOX = 0,	
		prop_shadbuffiltertype_items_TENT = 1,	
		prop_shadbuffiltertype_items_GAUSS = 2	
	};

	std::map<std::string, int> create_string_to_prop_shadbuffiltertype_items() {
		return {{"BOX", prop_shadbuffiltertype_items_BOX}, {"TENT", prop_shadbuffiltertype_items_TENT}, {"GAUSS", prop_shadbuffiltertype_items_GAUSS}};
	};

	std::map<int, std::string> create_prop_shadbuffiltertype_items_to_string() {
		return {{prop_shadbuffiltertype_items_BOX, "BOX"}, {prop_shadbuffiltertype_items_TENT, "TENT"}, {prop_shadbuffiltertype_items_GAUSS, "GAUSS"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuffiltertype_items = create_string_to_prop_shadbuffiltertype_items();
	const std::map<int, std::string> prop_shadbuffiltertype_items_to_string = create_prop_shadbuffiltertype_items_to_string();

	prop_shadbuffiltertype_items_enum shadow_filter_type() {
		STRING_TYPE_GETTER("shadow_filter_type", static_cast<prop_shadbuffiltertype_items_enum>(string_to_prop_shadbuffiltertype_items.at(resstr)))
	}

	void shadow_filter_type(prop_shadbuffiltertype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_filter_type", prop_shadbuffiltertype_items_to_string.at(value))
	}

	enum prop_numbuffer_items_enum {
		prop_numbuffer_items_BUFFERS_1 = 1,	
		prop_numbuffer_items_BUFFERS_4 = 4,	
		prop_numbuffer_items_BUFFERS_9 = 9	
	};

	std::map<std::string, int> create_string_to_prop_numbuffer_items() {
		return {{"BUFFERS_1", prop_numbuffer_items_BUFFERS_1}, {"BUFFERS_4", prop_numbuffer_items_BUFFERS_4}, {"BUFFERS_9", prop_numbuffer_items_BUFFERS_9}};
	};

	std::map<int, std::string> create_prop_numbuffer_items_to_string() {
		return {{prop_numbuffer_items_BUFFERS_1, "BUFFERS_1"}, {prop_numbuffer_items_BUFFERS_4, "BUFFERS_4"}, {prop_numbuffer_items_BUFFERS_9, "BUFFERS_9"}};
	};

	const std::map<std::string, int> string_to_prop_numbuffer_items = create_string_to_prop_numbuffer_items();
	const std::map<int, std::string> prop_numbuffer_items_to_string = create_prop_numbuffer_items_to_string();

	prop_numbuffer_items_enum shadow_sample_buffers() {
		STRING_TYPE_GETTER("shadow_sample_buffers", static_cast<prop_numbuffer_items_enum>(string_to_prop_numbuffer_items.at(resstr)))
	}

	void shadow_sample_buffers(prop_numbuffer_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_sample_buffers", prop_numbuffer_items_to_string.at(value))
	}

	float shadow_buffer_clip_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_start")
	}

	void shadow_buffer_clip_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_start", value)
	}

	float shadow_buffer_clip_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_end")
	}

	void shadow_buffer_clip_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_end", value)
	}

	float shadow_buffer_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bias")
	}

	void shadow_buffer_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bias", value)
	}

	float shadow_buffer_bleed_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bleed_bias")
	}

	void shadow_buffer_bleed_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bleed_bias", value)
	}

	float shadow_buffer_soft() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_soft")
	}

	void shadow_buffer_soft(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_soft", value)
	}

	int shadow_buffer_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_samples")
	}

	void shadow_buffer_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_samples", value)
	}

	enum prop_shadbuftype_items_enum {
		prop_shadbuftype_items_REGULAR = 0,	
		prop_shadbuftype_items_HALFWAY = 2,	
		prop_shadbuftype_items_IRREGULAR = 1,	
		prop_shadbuftype_items_DEEP = 3	
	};

	std::map<std::string, int> create_string_to_prop_shadbuftype_items() {
		return {{"REGULAR", prop_shadbuftype_items_REGULAR}, {"HALFWAY", prop_shadbuftype_items_HALFWAY}, {"IRREGULAR", prop_shadbuftype_items_IRREGULAR}, {"DEEP", prop_shadbuftype_items_DEEP}};
	};

	std::map<int, std::string> create_prop_shadbuftype_items_to_string() {
		return {{prop_shadbuftype_items_REGULAR, "REGULAR"}, {prop_shadbuftype_items_HALFWAY, "HALFWAY"}, {prop_shadbuftype_items_IRREGULAR, "IRREGULAR"}, {prop_shadbuftype_items_DEEP, "DEEP"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuftype_items = create_string_to_prop_shadbuftype_items();
	const std::map<int, std::string> prop_shadbuftype_items_to_string = create_prop_shadbuftype_items_to_string();

	prop_shadbuftype_items_enum shadow_buffer_type() {
		STRING_TYPE_GETTER("shadow_buffer_type", static_cast<prop_shadbuftype_items_enum>(string_to_prop_shadbuftype_items.at(resstr)))
	}

	void shadow_buffer_type(prop_shadbuftype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_buffer_type", prop_shadbuftype_items_to_string.at(value))
	}

	enum prop_ge_shadowbuffer_type_items_enum {
		prop_ge_shadowbuffer_type_items_SIMPLE = 0,	
		prop_ge_shadowbuffer_type_items_VARIANCE = 1	
	};

	std::map<std::string, int> create_string_to_prop_ge_shadowbuffer_type_items() {
		return {{"SIMPLE", prop_ge_shadowbuffer_type_items_SIMPLE}, {"VARIANCE", prop_ge_shadowbuffer_type_items_VARIANCE}};
	};

	std::map<int, std::string> create_prop_ge_shadowbuffer_type_items_to_string() {
		return {{prop_ge_shadowbuffer_type_items_SIMPLE, "SIMPLE"}, {prop_ge_shadowbuffer_type_items_VARIANCE, "VARIANCE"}};
	};

	const std::map<std::string, int> string_to_prop_ge_shadowbuffer_type_items = create_string_to_prop_ge_shadowbuffer_type_items();
	const std::map<int, std::string> prop_ge_shadowbuffer_type_items_to_string = create_prop_ge_shadowbuffer_type_items_to_string();

	prop_ge_shadowbuffer_type_items_enum ge_shadow_buffer_type() {
		STRING_TYPE_GETTER("ge_shadow_buffer_type", static_cast<prop_ge_shadowbuffer_type_items_enum>(string_to_prop_ge_shadowbuffer_type_items.at(resstr)))
	}

	void ge_shadow_buffer_type(prop_ge_shadowbuffer_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ge_shadow_buffer_type", prop_ge_shadowbuffer_type_items_to_string.at(value))
	}

	bool use_auto_clip_start() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_start")
	}

	void use_auto_clip_start(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_start", value)
	}

	bool use_auto_clip_end() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_end")
	}

	void use_auto_clip_end(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_end", value)
	}

	float compression_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "compression_threshold")
	}

	void compression_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "compression_threshold", value)
	}

	VFLOAT3 shadow_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "shadow_color", 3)
	}

	void shadow_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "shadow_color", 3)
	}

	bool use_only_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_shadow")
	}

	void use_only_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_shadow", value)
	}

	enum prop_ray_sampling_method_items_enum {
		prop_ray_sampling_method_items_ADAPTIVE_QMC = 1,	
		prop_ray_sampling_method_items_CONSTANT_QMC = 2	
	};

	std::map<std::string, int> create_string_to_prop_ray_sampling_method_items() {
		return {{"ADAPTIVE_QMC", prop_ray_sampling_method_items_ADAPTIVE_QMC}, {"CONSTANT_QMC", prop_ray_sampling_method_items_CONSTANT_QMC}};
	};

	std::map<int, std::string> create_prop_ray_sampling_method_items_to_string() {
		return {{prop_ray_sampling_method_items_ADAPTIVE_QMC, "ADAPTIVE_QMC"}, {prop_ray_sampling_method_items_CONSTANT_QMC, "CONSTANT_QMC"}};
	};

	const std::map<std::string, int> string_to_prop_ray_sampling_method_items = create_string_to_prop_ray_sampling_method_items();
	const std::map<int, std::string> prop_ray_sampling_method_items_to_string = create_prop_ray_sampling_method_items_to_string();

	prop_ray_sampling_method_items_enum shadow_ray_sample_method() {
		STRING_TYPE_GETTER("shadow_ray_sample_method", static_cast<prop_ray_sampling_method_items_enum>(string_to_prop_ray_sampling_method_items.at(resstr)))
	}

	void shadow_ray_sample_method(prop_ray_sampling_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_ray_sample_method", prop_ray_sampling_method_items_to_string.at(value))
	}

	int shadow_ray_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_ray_samples")
	}

	void shadow_ray_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_ray_samples", value)
	}

	float shadow_adaptive_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_adaptive_threshold")
	}

	void shadow_adaptive_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_adaptive_threshold", value)
	}

	float shadow_soft_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_soft_size")
	}

	void shadow_soft_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_soft_size", value)
	}

	bool use_shadow_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow_layer")
	}

	void use_shadow_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow_layer", value)
	}
};

class AreaLamp : public Lamp {
public:
	AreaLamp(PyObject* pyobj) : Lamp(pyobj) {}
	AreaLamp() : Lamp(0) { }

	bool use_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow")
	}

	void use_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow", value)
	}

	enum prop_shadow_items_enum {
		prop_shadow_items_NOSHADOW = 0,	
		prop_shadow_items_RAY_SHADOW = 8192	
	};

	std::map<std::string, int> create_string_to_prop_shadow_items() {
		return {{"NOSHADOW", prop_shadow_items_NOSHADOW}, {"RAY_SHADOW", prop_shadow_items_RAY_SHADOW}};
	};

	std::map<int, std::string> create_prop_shadow_items_to_string() {
		return {{prop_shadow_items_NOSHADOW, "NOSHADOW"}, {prop_shadow_items_RAY_SHADOW, "RAY_SHADOW"}};
	};

	const std::map<std::string, int> string_to_prop_shadow_items = create_string_to_prop_shadow_items();
	const std::map<int, std::string> prop_shadow_items_to_string = create_prop_shadow_items_to_string();

	prop_shadow_items_enum shadow_method() {
		STRING_TYPE_GETTER("shadow_method", static_cast<prop_shadow_items_enum>(string_to_prop_shadow_items.at(resstr)))
	}

	void shadow_method(prop_shadow_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_method", prop_shadow_items_to_string.at(value))
	}

	int shadow_buffer_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_size")
	}

	void shadow_buffer_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_size", value)
	}

	enum prop_shadbuffiltertype_items_enum {
		prop_shadbuffiltertype_items_BOX = 0,	
		prop_shadbuffiltertype_items_TENT = 1,	
		prop_shadbuffiltertype_items_GAUSS = 2	
	};

	std::map<std::string, int> create_string_to_prop_shadbuffiltertype_items() {
		return {{"BOX", prop_shadbuffiltertype_items_BOX}, {"TENT", prop_shadbuffiltertype_items_TENT}, {"GAUSS", prop_shadbuffiltertype_items_GAUSS}};
	};

	std::map<int, std::string> create_prop_shadbuffiltertype_items_to_string() {
		return {{prop_shadbuffiltertype_items_BOX, "BOX"}, {prop_shadbuffiltertype_items_TENT, "TENT"}, {prop_shadbuffiltertype_items_GAUSS, "GAUSS"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuffiltertype_items = create_string_to_prop_shadbuffiltertype_items();
	const std::map<int, std::string> prop_shadbuffiltertype_items_to_string = create_prop_shadbuffiltertype_items_to_string();

	prop_shadbuffiltertype_items_enum shadow_filter_type() {
		STRING_TYPE_GETTER("shadow_filter_type", static_cast<prop_shadbuffiltertype_items_enum>(string_to_prop_shadbuffiltertype_items.at(resstr)))
	}

	void shadow_filter_type(prop_shadbuffiltertype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_filter_type", prop_shadbuffiltertype_items_to_string.at(value))
	}

	enum prop_numbuffer_items_enum {
		prop_numbuffer_items_BUFFERS_1 = 1,	
		prop_numbuffer_items_BUFFERS_4 = 4,	
		prop_numbuffer_items_BUFFERS_9 = 9	
	};

	std::map<std::string, int> create_string_to_prop_numbuffer_items() {
		return {{"BUFFERS_1", prop_numbuffer_items_BUFFERS_1}, {"BUFFERS_4", prop_numbuffer_items_BUFFERS_4}, {"BUFFERS_9", prop_numbuffer_items_BUFFERS_9}};
	};

	std::map<int, std::string> create_prop_numbuffer_items_to_string() {
		return {{prop_numbuffer_items_BUFFERS_1, "BUFFERS_1"}, {prop_numbuffer_items_BUFFERS_4, "BUFFERS_4"}, {prop_numbuffer_items_BUFFERS_9, "BUFFERS_9"}};
	};

	const std::map<std::string, int> string_to_prop_numbuffer_items = create_string_to_prop_numbuffer_items();
	const std::map<int, std::string> prop_numbuffer_items_to_string = create_prop_numbuffer_items_to_string();

	prop_numbuffer_items_enum shadow_sample_buffers() {
		STRING_TYPE_GETTER("shadow_sample_buffers", static_cast<prop_numbuffer_items_enum>(string_to_prop_numbuffer_items.at(resstr)))
	}

	void shadow_sample_buffers(prop_numbuffer_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_sample_buffers", prop_numbuffer_items_to_string.at(value))
	}

	float shadow_buffer_clip_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_start")
	}

	void shadow_buffer_clip_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_start", value)
	}

	float shadow_buffer_clip_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_end")
	}

	void shadow_buffer_clip_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_end", value)
	}

	float shadow_buffer_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bias")
	}

	void shadow_buffer_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bias", value)
	}

	float shadow_buffer_bleed_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bleed_bias")
	}

	void shadow_buffer_bleed_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bleed_bias", value)
	}

	float shadow_buffer_soft() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_soft")
	}

	void shadow_buffer_soft(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_soft", value)
	}

	int shadow_buffer_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_samples")
	}

	void shadow_buffer_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_samples", value)
	}

	enum prop_shadbuftype_items_enum {
		prop_shadbuftype_items_REGULAR = 0,	
		prop_shadbuftype_items_HALFWAY = 2,	
		prop_shadbuftype_items_IRREGULAR = 1,	
		prop_shadbuftype_items_DEEP = 3	
	};

	std::map<std::string, int> create_string_to_prop_shadbuftype_items() {
		return {{"REGULAR", prop_shadbuftype_items_REGULAR}, {"HALFWAY", prop_shadbuftype_items_HALFWAY}, {"IRREGULAR", prop_shadbuftype_items_IRREGULAR}, {"DEEP", prop_shadbuftype_items_DEEP}};
	};

	std::map<int, std::string> create_prop_shadbuftype_items_to_string() {
		return {{prop_shadbuftype_items_REGULAR, "REGULAR"}, {prop_shadbuftype_items_HALFWAY, "HALFWAY"}, {prop_shadbuftype_items_IRREGULAR, "IRREGULAR"}, {prop_shadbuftype_items_DEEP, "DEEP"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuftype_items = create_string_to_prop_shadbuftype_items();
	const std::map<int, std::string> prop_shadbuftype_items_to_string = create_prop_shadbuftype_items_to_string();

	prop_shadbuftype_items_enum shadow_buffer_type() {
		STRING_TYPE_GETTER("shadow_buffer_type", static_cast<prop_shadbuftype_items_enum>(string_to_prop_shadbuftype_items.at(resstr)))
	}

	void shadow_buffer_type(prop_shadbuftype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_buffer_type", prop_shadbuftype_items_to_string.at(value))
	}

	enum prop_ge_shadowbuffer_type_items_enum {
		prop_ge_shadowbuffer_type_items_SIMPLE = 0,	
		prop_ge_shadowbuffer_type_items_VARIANCE = 1	
	};

	std::map<std::string, int> create_string_to_prop_ge_shadowbuffer_type_items() {
		return {{"SIMPLE", prop_ge_shadowbuffer_type_items_SIMPLE}, {"VARIANCE", prop_ge_shadowbuffer_type_items_VARIANCE}};
	};

	std::map<int, std::string> create_prop_ge_shadowbuffer_type_items_to_string() {
		return {{prop_ge_shadowbuffer_type_items_SIMPLE, "SIMPLE"}, {prop_ge_shadowbuffer_type_items_VARIANCE, "VARIANCE"}};
	};

	const std::map<std::string, int> string_to_prop_ge_shadowbuffer_type_items = create_string_to_prop_ge_shadowbuffer_type_items();
	const std::map<int, std::string> prop_ge_shadowbuffer_type_items_to_string = create_prop_ge_shadowbuffer_type_items_to_string();

	prop_ge_shadowbuffer_type_items_enum ge_shadow_buffer_type() {
		STRING_TYPE_GETTER("ge_shadow_buffer_type", static_cast<prop_ge_shadowbuffer_type_items_enum>(string_to_prop_ge_shadowbuffer_type_items.at(resstr)))
	}

	void ge_shadow_buffer_type(prop_ge_shadowbuffer_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ge_shadow_buffer_type", prop_ge_shadowbuffer_type_items_to_string.at(value))
	}

	bool use_auto_clip_start() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_start")
	}

	void use_auto_clip_start(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_start", value)
	}

	bool use_auto_clip_end() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_end")
	}

	void use_auto_clip_end(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_end", value)
	}

	float compression_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "compression_threshold")
	}

	void compression_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "compression_threshold", value)
	}

	VFLOAT3 shadow_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "shadow_color", 3)
	}

	void shadow_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "shadow_color", 3)
	}

	bool use_only_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_shadow")
	}

	void use_only_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_shadow", value)
	}

	enum prop_ray_sampling_method_items_enum {
		prop_ray_sampling_method_items_ADAPTIVE_QMC = 1,	
		prop_ray_sampling_method_items_CONSTANT_QMC = 2,	
		prop_ray_sampling_method_items_CONSTANT_JITTERED = 0	
	};

	std::map<std::string, int> create_string_to_prop_ray_sampling_method_items() {
		return {{"ADAPTIVE_QMC", prop_ray_sampling_method_items_ADAPTIVE_QMC}, {"CONSTANT_QMC", prop_ray_sampling_method_items_CONSTANT_QMC}, {"CONSTANT_JITTERED", prop_ray_sampling_method_items_CONSTANT_JITTERED}};
	};

	std::map<int, std::string> create_prop_ray_sampling_method_items_to_string() {
		return {{prop_ray_sampling_method_items_ADAPTIVE_QMC, "ADAPTIVE_QMC"}, {prop_ray_sampling_method_items_CONSTANT_QMC, "CONSTANT_QMC"}, {prop_ray_sampling_method_items_CONSTANT_JITTERED, "CONSTANT_JITTERED"}};
	};

	const std::map<std::string, int> string_to_prop_ray_sampling_method_items = create_string_to_prop_ray_sampling_method_items();
	const std::map<int, std::string> prop_ray_sampling_method_items_to_string = create_prop_ray_sampling_method_items_to_string();

	prop_ray_sampling_method_items_enum shadow_ray_sample_method() {
		STRING_TYPE_GETTER("shadow_ray_sample_method", static_cast<prop_ray_sampling_method_items_enum>(string_to_prop_ray_sampling_method_items.at(resstr)))
	}

	void shadow_ray_sample_method(prop_ray_sampling_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_ray_sample_method", prop_ray_sampling_method_items_to_string.at(value))
	}

	int shadow_ray_samples_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_ray_samples_x")
	}

	void shadow_ray_samples_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_ray_samples_x", value)
	}

	int shadow_ray_samples_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_ray_samples_y")
	}

	void shadow_ray_samples_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_ray_samples_y", value)
	}

	float shadow_adaptive_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_adaptive_threshold")
	}

	void shadow_adaptive_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_adaptive_threshold", value)
	}

	float shadow_soft_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_soft_size")
	}

	void shadow_soft_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_soft_size", value)
	}

	bool use_shadow_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow_layer")
	}

	void use_shadow_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow_layer", value)
	}

	bool use_umbra() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_umbra")
	}

	void use_umbra(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_umbra", value)
	}

	bool use_dither() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dither")
	}

	void use_dither(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dither", value)
	}

	bool use_jitter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_jitter")
	}

	void use_jitter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_jitter", value)
	}

	enum prop_areashape_items_enum {
		prop_areashape_items_SQUARE = 0,	
		prop_areashape_items_RECTANGLE = 1	
	};

	std::map<std::string, int> create_string_to_prop_areashape_items() {
		return {{"SQUARE", prop_areashape_items_SQUARE}, {"RECTANGLE", prop_areashape_items_RECTANGLE}};
	};

	std::map<int, std::string> create_prop_areashape_items_to_string() {
		return {{prop_areashape_items_SQUARE, "SQUARE"}, {prop_areashape_items_RECTANGLE, "RECTANGLE"}};
	};

	const std::map<std::string, int> string_to_prop_areashape_items = create_string_to_prop_areashape_items();
	const std::map<int, std::string> prop_areashape_items_to_string = create_prop_areashape_items_to_string();

	prop_areashape_items_enum shape() {
		STRING_TYPE_GETTER("shape", static_cast<prop_areashape_items_enum>(string_to_prop_areashape_items.at(resstr)))
	}

	void shape(prop_areashape_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shape", prop_areashape_items_to_string.at(value))
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	float size_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_y")
	}

	void size_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_y", value)
	}

	float gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gamma")
	}

	void gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gamma", value)
	}
};

class SpotLamp : public Lamp {
public:
	SpotLamp(PyObject* pyobj) : Lamp(pyobj) {}
	SpotLamp() : Lamp(0) { }

	enum prop_fallofftype_items_enum {
		prop_fallofftype_items_CONSTANT = 0,	
		prop_fallofftype_items_INVERSE_LINEAR = 1,	
		prop_fallofftype_items_INVERSE_SQUARE = 2,	
		prop_fallofftype_items_CUSTOM_CURVE = 3,	
		prop_fallofftype_items_LINEAR_QUADRATIC_WEIGHTED = 4	
	};

	std::map<std::string, int> create_string_to_prop_fallofftype_items() {
		return {{"CONSTANT", prop_fallofftype_items_CONSTANT}, {"INVERSE_LINEAR", prop_fallofftype_items_INVERSE_LINEAR}, {"INVERSE_SQUARE", prop_fallofftype_items_INVERSE_SQUARE}, {"CUSTOM_CURVE", prop_fallofftype_items_CUSTOM_CURVE}, {"LINEAR_QUADRATIC_WEIGHTED", prop_fallofftype_items_LINEAR_QUADRATIC_WEIGHTED}};
	};

	std::map<int, std::string> create_prop_fallofftype_items_to_string() {
		return {{prop_fallofftype_items_CONSTANT, "CONSTANT"}, {prop_fallofftype_items_INVERSE_LINEAR, "INVERSE_LINEAR"}, {prop_fallofftype_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {prop_fallofftype_items_CUSTOM_CURVE, "CUSTOM_CURVE"}, {prop_fallofftype_items_LINEAR_QUADRATIC_WEIGHTED, "LINEAR_QUADRATIC_WEIGHTED"}};
	};

	const std::map<std::string, int> string_to_prop_fallofftype_items = create_string_to_prop_fallofftype_items();
	const std::map<int, std::string> prop_fallofftype_items_to_string = create_prop_fallofftype_items_to_string();

	prop_fallofftype_items_enum falloff_type() {
		STRING_TYPE_GETTER("falloff_type", static_cast<prop_fallofftype_items_enum>(string_to_prop_fallofftype_items.at(resstr)))
	}

	void falloff_type(prop_fallofftype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff_type", prop_fallofftype_items_to_string.at(value))
	}

	CurveMapping falloff_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "falloff_curve")
	}

	bool use_sphere() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sphere")
	}

	void use_sphere(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sphere", value)
	}

	float linear_attenuation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "linear_attenuation")
	}

	void linear_attenuation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "linear_attenuation", value)
	}

	float quadratic_attenuation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "quadratic_attenuation")
	}

	void quadratic_attenuation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "quadratic_attenuation", value)
	}

	bool use_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow")
	}

	void use_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow", value)
	}

	enum prop_shadow_items_enum {
		prop_shadow_items_NOSHADOW = 0,	
		prop_shadow_items_BUFFER_SHADOW = 1,	
		prop_shadow_items_RAY_SHADOW = 8192	
	};

	std::map<std::string, int> create_string_to_prop_shadow_items() {
		return {{"NOSHADOW", prop_shadow_items_NOSHADOW}, {"BUFFER_SHADOW", prop_shadow_items_BUFFER_SHADOW}, {"RAY_SHADOW", prop_shadow_items_RAY_SHADOW}};
	};

	std::map<int, std::string> create_prop_shadow_items_to_string() {
		return {{prop_shadow_items_NOSHADOW, "NOSHADOW"}, {prop_shadow_items_BUFFER_SHADOW, "BUFFER_SHADOW"}, {prop_shadow_items_RAY_SHADOW, "RAY_SHADOW"}};
	};

	const std::map<std::string, int> string_to_prop_shadow_items = create_string_to_prop_shadow_items();
	const std::map<int, std::string> prop_shadow_items_to_string = create_prop_shadow_items_to_string();

	prop_shadow_items_enum shadow_method() {
		STRING_TYPE_GETTER("shadow_method", static_cast<prop_shadow_items_enum>(string_to_prop_shadow_items.at(resstr)))
	}

	void shadow_method(prop_shadow_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_method", prop_shadow_items_to_string.at(value))
	}

	int shadow_buffer_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_size")
	}

	void shadow_buffer_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_size", value)
	}

	enum prop_shadbuffiltertype_items_enum {
		prop_shadbuffiltertype_items_BOX = 0,	
		prop_shadbuffiltertype_items_TENT = 1,	
		prop_shadbuffiltertype_items_GAUSS = 2	
	};

	std::map<std::string, int> create_string_to_prop_shadbuffiltertype_items() {
		return {{"BOX", prop_shadbuffiltertype_items_BOX}, {"TENT", prop_shadbuffiltertype_items_TENT}, {"GAUSS", prop_shadbuffiltertype_items_GAUSS}};
	};

	std::map<int, std::string> create_prop_shadbuffiltertype_items_to_string() {
		return {{prop_shadbuffiltertype_items_BOX, "BOX"}, {prop_shadbuffiltertype_items_TENT, "TENT"}, {prop_shadbuffiltertype_items_GAUSS, "GAUSS"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuffiltertype_items = create_string_to_prop_shadbuffiltertype_items();
	const std::map<int, std::string> prop_shadbuffiltertype_items_to_string = create_prop_shadbuffiltertype_items_to_string();

	prop_shadbuffiltertype_items_enum shadow_filter_type() {
		STRING_TYPE_GETTER("shadow_filter_type", static_cast<prop_shadbuffiltertype_items_enum>(string_to_prop_shadbuffiltertype_items.at(resstr)))
	}

	void shadow_filter_type(prop_shadbuffiltertype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_filter_type", prop_shadbuffiltertype_items_to_string.at(value))
	}

	enum prop_numbuffer_items_enum {
		prop_numbuffer_items_BUFFERS_1 = 1,	
		prop_numbuffer_items_BUFFERS_4 = 4,	
		prop_numbuffer_items_BUFFERS_9 = 9	
	};

	std::map<std::string, int> create_string_to_prop_numbuffer_items() {
		return {{"BUFFERS_1", prop_numbuffer_items_BUFFERS_1}, {"BUFFERS_4", prop_numbuffer_items_BUFFERS_4}, {"BUFFERS_9", prop_numbuffer_items_BUFFERS_9}};
	};

	std::map<int, std::string> create_prop_numbuffer_items_to_string() {
		return {{prop_numbuffer_items_BUFFERS_1, "BUFFERS_1"}, {prop_numbuffer_items_BUFFERS_4, "BUFFERS_4"}, {prop_numbuffer_items_BUFFERS_9, "BUFFERS_9"}};
	};

	const std::map<std::string, int> string_to_prop_numbuffer_items = create_string_to_prop_numbuffer_items();
	const std::map<int, std::string> prop_numbuffer_items_to_string = create_prop_numbuffer_items_to_string();

	prop_numbuffer_items_enum shadow_sample_buffers() {
		STRING_TYPE_GETTER("shadow_sample_buffers", static_cast<prop_numbuffer_items_enum>(string_to_prop_numbuffer_items.at(resstr)))
	}

	void shadow_sample_buffers(prop_numbuffer_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_sample_buffers", prop_numbuffer_items_to_string.at(value))
	}

	float shadow_buffer_clip_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_start")
	}

	void shadow_buffer_clip_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_start", value)
	}

	float shadow_buffer_clip_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_end")
	}

	void shadow_buffer_clip_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_end", value)
	}

	float shadow_buffer_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bias")
	}

	void shadow_buffer_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bias", value)
	}

	float shadow_buffer_bleed_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bleed_bias")
	}

	void shadow_buffer_bleed_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bleed_bias", value)
	}

	float shadow_buffer_soft() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_soft")
	}

	void shadow_buffer_soft(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_soft", value)
	}

	int shadow_buffer_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_samples")
	}

	void shadow_buffer_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_samples", value)
	}

	enum prop_shadbuftype_items_enum {
		prop_shadbuftype_items_REGULAR = 0,	
		prop_shadbuftype_items_HALFWAY = 2,	
		prop_shadbuftype_items_IRREGULAR = 1,	
		prop_shadbuftype_items_DEEP = 3	
	};

	std::map<std::string, int> create_string_to_prop_shadbuftype_items() {
		return {{"REGULAR", prop_shadbuftype_items_REGULAR}, {"HALFWAY", prop_shadbuftype_items_HALFWAY}, {"IRREGULAR", prop_shadbuftype_items_IRREGULAR}, {"DEEP", prop_shadbuftype_items_DEEP}};
	};

	std::map<int, std::string> create_prop_shadbuftype_items_to_string() {
		return {{prop_shadbuftype_items_REGULAR, "REGULAR"}, {prop_shadbuftype_items_HALFWAY, "HALFWAY"}, {prop_shadbuftype_items_IRREGULAR, "IRREGULAR"}, {prop_shadbuftype_items_DEEP, "DEEP"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuftype_items = create_string_to_prop_shadbuftype_items();
	const std::map<int, std::string> prop_shadbuftype_items_to_string = create_prop_shadbuftype_items_to_string();

	prop_shadbuftype_items_enum shadow_buffer_type() {
		STRING_TYPE_GETTER("shadow_buffer_type", static_cast<prop_shadbuftype_items_enum>(string_to_prop_shadbuftype_items.at(resstr)))
	}

	void shadow_buffer_type(prop_shadbuftype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_buffer_type", prop_shadbuftype_items_to_string.at(value))
	}

	enum prop_ge_shadowbuffer_type_items_enum {
		prop_ge_shadowbuffer_type_items_SIMPLE = 0,	
		prop_ge_shadowbuffer_type_items_VARIANCE = 1	
	};

	std::map<std::string, int> create_string_to_prop_ge_shadowbuffer_type_items() {
		return {{"SIMPLE", prop_ge_shadowbuffer_type_items_SIMPLE}, {"VARIANCE", prop_ge_shadowbuffer_type_items_VARIANCE}};
	};

	std::map<int, std::string> create_prop_ge_shadowbuffer_type_items_to_string() {
		return {{prop_ge_shadowbuffer_type_items_SIMPLE, "SIMPLE"}, {prop_ge_shadowbuffer_type_items_VARIANCE, "VARIANCE"}};
	};

	const std::map<std::string, int> string_to_prop_ge_shadowbuffer_type_items = create_string_to_prop_ge_shadowbuffer_type_items();
	const std::map<int, std::string> prop_ge_shadowbuffer_type_items_to_string = create_prop_ge_shadowbuffer_type_items_to_string();

	prop_ge_shadowbuffer_type_items_enum ge_shadow_buffer_type() {
		STRING_TYPE_GETTER("ge_shadow_buffer_type", static_cast<prop_ge_shadowbuffer_type_items_enum>(string_to_prop_ge_shadowbuffer_type_items.at(resstr)))
	}

	void ge_shadow_buffer_type(prop_ge_shadowbuffer_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ge_shadow_buffer_type", prop_ge_shadowbuffer_type_items_to_string.at(value))
	}

	bool use_auto_clip_start() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_start")
	}

	void use_auto_clip_start(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_start", value)
	}

	bool use_auto_clip_end() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_end")
	}

	void use_auto_clip_end(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_end", value)
	}

	float compression_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "compression_threshold")
	}

	void compression_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "compression_threshold", value)
	}

	VFLOAT3 shadow_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "shadow_color", 3)
	}

	void shadow_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "shadow_color", 3)
	}

	bool use_only_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_shadow")
	}

	void use_only_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_shadow", value)
	}

	enum prop_ray_sampling_method_items_enum {
		prop_ray_sampling_method_items_ADAPTIVE_QMC = 1,	
		prop_ray_sampling_method_items_CONSTANT_QMC = 2	
	};

	std::map<std::string, int> create_string_to_prop_ray_sampling_method_items() {
		return {{"ADAPTIVE_QMC", prop_ray_sampling_method_items_ADAPTIVE_QMC}, {"CONSTANT_QMC", prop_ray_sampling_method_items_CONSTANT_QMC}};
	};

	std::map<int, std::string> create_prop_ray_sampling_method_items_to_string() {
		return {{prop_ray_sampling_method_items_ADAPTIVE_QMC, "ADAPTIVE_QMC"}, {prop_ray_sampling_method_items_CONSTANT_QMC, "CONSTANT_QMC"}};
	};

	const std::map<std::string, int> string_to_prop_ray_sampling_method_items = create_string_to_prop_ray_sampling_method_items();
	const std::map<int, std::string> prop_ray_sampling_method_items_to_string = create_prop_ray_sampling_method_items_to_string();

	prop_ray_sampling_method_items_enum shadow_ray_sample_method() {
		STRING_TYPE_GETTER("shadow_ray_sample_method", static_cast<prop_ray_sampling_method_items_enum>(string_to_prop_ray_sampling_method_items.at(resstr)))
	}

	void shadow_ray_sample_method(prop_ray_sampling_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_ray_sample_method", prop_ray_sampling_method_items_to_string.at(value))
	}

	int shadow_ray_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_ray_samples")
	}

	void shadow_ray_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_ray_samples", value)
	}

	float shadow_adaptive_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_adaptive_threshold")
	}

	void shadow_adaptive_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_adaptive_threshold", value)
	}

	float shadow_soft_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_soft_size")
	}

	void shadow_soft_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_soft_size", value)
	}

	bool use_shadow_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow_layer")
	}

	void use_shadow_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow_layer", value)
	}

	bool use_square() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_square")
	}

	void use_square(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_square", value)
	}

	bool use_halo() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_halo")
	}

	void use_halo(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_halo", value)
	}

	float halo_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "halo_intensity")
	}

	void halo_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "halo_intensity", value)
	}

	int halo_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "halo_step")
	}

	void halo_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "halo_step", value)
	}

	float spot_blend() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spot_blend")
	}

	void spot_blend(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spot_blend", value)
	}

	float spot_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spot_size")
	}

	void spot_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spot_size", value)
	}

	bool show_cone() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_cone")
	}

	void show_cone(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_cone", value)
	}
};

class SunLamp : public Lamp {
public:
	SunLamp(PyObject* pyobj) : Lamp(pyobj) {}
	SunLamp() : Lamp(0) { }

	bool use_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow")
	}

	void use_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow", value)
	}

	enum prop_shadow_items_enum {
		prop_shadow_items_NOSHADOW = 0,	
		prop_shadow_items_RAY_SHADOW = 8192	
	};

	std::map<std::string, int> create_string_to_prop_shadow_items() {
		return {{"NOSHADOW", prop_shadow_items_NOSHADOW}, {"RAY_SHADOW", prop_shadow_items_RAY_SHADOW}};
	};

	std::map<int, std::string> create_prop_shadow_items_to_string() {
		return {{prop_shadow_items_NOSHADOW, "NOSHADOW"}, {prop_shadow_items_RAY_SHADOW, "RAY_SHADOW"}};
	};

	const std::map<std::string, int> string_to_prop_shadow_items = create_string_to_prop_shadow_items();
	const std::map<int, std::string> prop_shadow_items_to_string = create_prop_shadow_items_to_string();

	prop_shadow_items_enum shadow_method() {
		STRING_TYPE_GETTER("shadow_method", static_cast<prop_shadow_items_enum>(string_to_prop_shadow_items.at(resstr)))
	}

	void shadow_method(prop_shadow_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_method", prop_shadow_items_to_string.at(value))
	}

	int shadow_buffer_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_size")
	}

	void shadow_buffer_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_size", value)
	}

	enum prop_shadbuffiltertype_items_enum {
		prop_shadbuffiltertype_items_BOX = 0,	
		prop_shadbuffiltertype_items_TENT = 1,	
		prop_shadbuffiltertype_items_GAUSS = 2	
	};

	std::map<std::string, int> create_string_to_prop_shadbuffiltertype_items() {
		return {{"BOX", prop_shadbuffiltertype_items_BOX}, {"TENT", prop_shadbuffiltertype_items_TENT}, {"GAUSS", prop_shadbuffiltertype_items_GAUSS}};
	};

	std::map<int, std::string> create_prop_shadbuffiltertype_items_to_string() {
		return {{prop_shadbuffiltertype_items_BOX, "BOX"}, {prop_shadbuffiltertype_items_TENT, "TENT"}, {prop_shadbuffiltertype_items_GAUSS, "GAUSS"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuffiltertype_items = create_string_to_prop_shadbuffiltertype_items();
	const std::map<int, std::string> prop_shadbuffiltertype_items_to_string = create_prop_shadbuffiltertype_items_to_string();

	prop_shadbuffiltertype_items_enum shadow_filter_type() {
		STRING_TYPE_GETTER("shadow_filter_type", static_cast<prop_shadbuffiltertype_items_enum>(string_to_prop_shadbuffiltertype_items.at(resstr)))
	}

	void shadow_filter_type(prop_shadbuffiltertype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_filter_type", prop_shadbuffiltertype_items_to_string.at(value))
	}

	enum prop_numbuffer_items_enum {
		prop_numbuffer_items_BUFFERS_1 = 1,	
		prop_numbuffer_items_BUFFERS_4 = 4,	
		prop_numbuffer_items_BUFFERS_9 = 9	
	};

	std::map<std::string, int> create_string_to_prop_numbuffer_items() {
		return {{"BUFFERS_1", prop_numbuffer_items_BUFFERS_1}, {"BUFFERS_4", prop_numbuffer_items_BUFFERS_4}, {"BUFFERS_9", prop_numbuffer_items_BUFFERS_9}};
	};

	std::map<int, std::string> create_prop_numbuffer_items_to_string() {
		return {{prop_numbuffer_items_BUFFERS_1, "BUFFERS_1"}, {prop_numbuffer_items_BUFFERS_4, "BUFFERS_4"}, {prop_numbuffer_items_BUFFERS_9, "BUFFERS_9"}};
	};

	const std::map<std::string, int> string_to_prop_numbuffer_items = create_string_to_prop_numbuffer_items();
	const std::map<int, std::string> prop_numbuffer_items_to_string = create_prop_numbuffer_items_to_string();

	prop_numbuffer_items_enum shadow_sample_buffers() {
		STRING_TYPE_GETTER("shadow_sample_buffers", static_cast<prop_numbuffer_items_enum>(string_to_prop_numbuffer_items.at(resstr)))
	}

	void shadow_sample_buffers(prop_numbuffer_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_sample_buffers", prop_numbuffer_items_to_string.at(value))
	}

	float shadow_buffer_clip_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_start")
	}

	void shadow_buffer_clip_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_start", value)
	}

	float shadow_buffer_clip_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_clip_end")
	}

	void shadow_buffer_clip_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_clip_end", value)
	}

	float shadow_buffer_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bias")
	}

	void shadow_buffer_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bias", value)
	}

	float shadow_buffer_bleed_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bleed_bias")
	}

	void shadow_buffer_bleed_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bleed_bias", value)
	}

	float shadow_buffer_soft() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_soft")
	}

	void shadow_buffer_soft(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_soft", value)
	}

	int shadow_buffer_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_buffer_samples")
	}

	void shadow_buffer_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_buffer_samples", value)
	}

	enum prop_shadbuftype_items_enum {
		prop_shadbuftype_items_REGULAR = 0,	
		prop_shadbuftype_items_HALFWAY = 2,	
		prop_shadbuftype_items_IRREGULAR = 1,	
		prop_shadbuftype_items_DEEP = 3	
	};

	std::map<std::string, int> create_string_to_prop_shadbuftype_items() {
		return {{"REGULAR", prop_shadbuftype_items_REGULAR}, {"HALFWAY", prop_shadbuftype_items_HALFWAY}, {"IRREGULAR", prop_shadbuftype_items_IRREGULAR}, {"DEEP", prop_shadbuftype_items_DEEP}};
	};

	std::map<int, std::string> create_prop_shadbuftype_items_to_string() {
		return {{prop_shadbuftype_items_REGULAR, "REGULAR"}, {prop_shadbuftype_items_HALFWAY, "HALFWAY"}, {prop_shadbuftype_items_IRREGULAR, "IRREGULAR"}, {prop_shadbuftype_items_DEEP, "DEEP"}};
	};

	const std::map<std::string, int> string_to_prop_shadbuftype_items = create_string_to_prop_shadbuftype_items();
	const std::map<int, std::string> prop_shadbuftype_items_to_string = create_prop_shadbuftype_items_to_string();

	prop_shadbuftype_items_enum shadow_buffer_type() {
		STRING_TYPE_GETTER("shadow_buffer_type", static_cast<prop_shadbuftype_items_enum>(string_to_prop_shadbuftype_items.at(resstr)))
	}

	void shadow_buffer_type(prop_shadbuftype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_buffer_type", prop_shadbuftype_items_to_string.at(value))
	}

	enum prop_ge_shadowbuffer_type_items_enum {
		prop_ge_shadowbuffer_type_items_SIMPLE = 0,	
		prop_ge_shadowbuffer_type_items_VARIANCE = 1	
	};

	std::map<std::string, int> create_string_to_prop_ge_shadowbuffer_type_items() {
		return {{"SIMPLE", prop_ge_shadowbuffer_type_items_SIMPLE}, {"VARIANCE", prop_ge_shadowbuffer_type_items_VARIANCE}};
	};

	std::map<int, std::string> create_prop_ge_shadowbuffer_type_items_to_string() {
		return {{prop_ge_shadowbuffer_type_items_SIMPLE, "SIMPLE"}, {prop_ge_shadowbuffer_type_items_VARIANCE, "VARIANCE"}};
	};

	const std::map<std::string, int> string_to_prop_ge_shadowbuffer_type_items = create_string_to_prop_ge_shadowbuffer_type_items();
	const std::map<int, std::string> prop_ge_shadowbuffer_type_items_to_string = create_prop_ge_shadowbuffer_type_items_to_string();

	prop_ge_shadowbuffer_type_items_enum ge_shadow_buffer_type() {
		STRING_TYPE_GETTER("ge_shadow_buffer_type", static_cast<prop_ge_shadowbuffer_type_items_enum>(string_to_prop_ge_shadowbuffer_type_items.at(resstr)))
	}

	void ge_shadow_buffer_type(prop_ge_shadowbuffer_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ge_shadow_buffer_type", prop_ge_shadowbuffer_type_items_to_string.at(value))
	}

	bool use_auto_clip_start() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_start")
	}

	void use_auto_clip_start(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_start", value)
	}

	bool use_auto_clip_end() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_clip_end")
	}

	void use_auto_clip_end(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_clip_end", value)
	}

	float compression_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "compression_threshold")
	}

	void compression_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "compression_threshold", value)
	}

	VFLOAT3 shadow_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "shadow_color", 3)
	}

	void shadow_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "shadow_color", 3)
	}

	bool use_only_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_shadow")
	}

	void use_only_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_shadow", value)
	}

	enum prop_ray_sampling_method_items_enum {
		prop_ray_sampling_method_items_ADAPTIVE_QMC = 1,	
		prop_ray_sampling_method_items_CONSTANT_QMC = 2	
	};

	std::map<std::string, int> create_string_to_prop_ray_sampling_method_items() {
		return {{"ADAPTIVE_QMC", prop_ray_sampling_method_items_ADAPTIVE_QMC}, {"CONSTANT_QMC", prop_ray_sampling_method_items_CONSTANT_QMC}};
	};

	std::map<int, std::string> create_prop_ray_sampling_method_items_to_string() {
		return {{prop_ray_sampling_method_items_ADAPTIVE_QMC, "ADAPTIVE_QMC"}, {prop_ray_sampling_method_items_CONSTANT_QMC, "CONSTANT_QMC"}};
	};

	const std::map<std::string, int> string_to_prop_ray_sampling_method_items = create_string_to_prop_ray_sampling_method_items();
	const std::map<int, std::string> prop_ray_sampling_method_items_to_string = create_prop_ray_sampling_method_items_to_string();

	prop_ray_sampling_method_items_enum shadow_ray_sample_method() {
		STRING_TYPE_GETTER("shadow_ray_sample_method", static_cast<prop_ray_sampling_method_items_enum>(string_to_prop_ray_sampling_method_items.at(resstr)))
	}

	void shadow_ray_sample_method(prop_ray_sampling_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_ray_sample_method", prop_ray_sampling_method_items_to_string.at(value))
	}

	int shadow_ray_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_ray_samples")
	}

	void shadow_ray_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_ray_samples", value)
	}

	float shadow_adaptive_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_adaptive_threshold")
	}

	void shadow_adaptive_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_adaptive_threshold", value)
	}

	float shadow_soft_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_soft_size")
	}

	void shadow_soft_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_soft_size", value)
	}

	bool use_shadow_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow_layer")
	}

	void use_shadow_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow_layer", value)
	}

	LampSkySettings sky();

	float shadow_frustum_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_frustum_size")
	}

	void shadow_frustum_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_frustum_size", value)
	}

	bool show_shadow_box() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_shadow_box")
	}

	void show_shadow_box(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_shadow_box", value)
	}
};

class LampSkySettings : public pyUniplug {
public:
	LampSkySettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	LampSkySettings() : pyUniplug(0) { }

	enum prop_skycolorspace_items_enum {
		prop_skycolorspace_items_SMPTE = 0,	
		prop_skycolorspace_items_REC709 = 1,	
		prop_skycolorspace_items_CIE = 2	
	};

	std::map<std::string, int> create_string_to_prop_skycolorspace_items() {
		return {{"SMPTE", prop_skycolorspace_items_SMPTE}, {"REC709", prop_skycolorspace_items_REC709}, {"CIE", prop_skycolorspace_items_CIE}};
	};

	std::map<int, std::string> create_prop_skycolorspace_items_to_string() {
		return {{prop_skycolorspace_items_SMPTE, "SMPTE"}, {prop_skycolorspace_items_REC709, "REC709"}, {prop_skycolorspace_items_CIE, "CIE"}};
	};

	const std::map<std::string, int> string_to_prop_skycolorspace_items = create_string_to_prop_skycolorspace_items();
	const std::map<int, std::string> prop_skycolorspace_items_to_string = create_prop_skycolorspace_items_to_string();

	prop_skycolorspace_items_enum sky_color_space() {
		STRING_TYPE_GETTER("sky_color_space", static_cast<prop_skycolorspace_items_enum>(string_to_prop_skycolorspace_items.at(resstr)))
	}

	void sky_color_space(prop_skycolorspace_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sky_color_space", prop_skycolorspace_items_to_string.at(value))
	}

	enum ramp_blend_items_enum {
		ramp_blend_items_MIX = 0,	
		ramp_blend_items_ADD = 1,	
		ramp_blend_items_MULTIPLY = 2,	
		ramp_blend_items_SUBTRACT = 3,	
		ramp_blend_items_SCREEN = 4,	
		ramp_blend_items_DIVIDE = 5,	
		ramp_blend_items_DIFFERENCE = 6,	
		ramp_blend_items_DARKEN = 7,	
		ramp_blend_items_LIGHTEN = 8,	
		ramp_blend_items_OVERLAY = 9,	
		ramp_blend_items_DODGE = 10,	
		ramp_blend_items_BURN = 11,	
		ramp_blend_items_HUE = 12,	
		ramp_blend_items_SATURATION = 13,	
		ramp_blend_items_VALUE = 14,	
		ramp_blend_items_COLOR = 15,	
		ramp_blend_items_SOFT_LIGHT = 16,	
		ramp_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_ramp_blend_items() {
		return {{"MIX", ramp_blend_items_MIX}, {"ADD", ramp_blend_items_ADD}, {"MULTIPLY", ramp_blend_items_MULTIPLY}, {"SUBTRACT", ramp_blend_items_SUBTRACT}, {"SCREEN", ramp_blend_items_SCREEN}, {"DIVIDE", ramp_blend_items_DIVIDE}, {"DIFFERENCE", ramp_blend_items_DIFFERENCE}, {"DARKEN", ramp_blend_items_DARKEN}, {"LIGHTEN", ramp_blend_items_LIGHTEN}, {"OVERLAY", ramp_blend_items_OVERLAY}, {"DODGE", ramp_blend_items_DODGE}, {"BURN", ramp_blend_items_BURN}, {"HUE", ramp_blend_items_HUE}, {"SATURATION", ramp_blend_items_SATURATION}, {"VALUE", ramp_blend_items_VALUE}, {"COLOR", ramp_blend_items_COLOR}, {"SOFT_LIGHT", ramp_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", ramp_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_ramp_blend_items_to_string() {
		return {{ramp_blend_items_MIX, "MIX"}, {ramp_blend_items_ADD, "ADD"}, {ramp_blend_items_MULTIPLY, "MULTIPLY"}, {ramp_blend_items_SUBTRACT, "SUBTRACT"}, {ramp_blend_items_SCREEN, "SCREEN"}, {ramp_blend_items_DIVIDE, "DIVIDE"}, {ramp_blend_items_DIFFERENCE, "DIFFERENCE"}, {ramp_blend_items_DARKEN, "DARKEN"}, {ramp_blend_items_LIGHTEN, "LIGHTEN"}, {ramp_blend_items_OVERLAY, "OVERLAY"}, {ramp_blend_items_DODGE, "DODGE"}, {ramp_blend_items_BURN, "BURN"}, {ramp_blend_items_HUE, "HUE"}, {ramp_blend_items_SATURATION, "SATURATION"}, {ramp_blend_items_VALUE, "VALUE"}, {ramp_blend_items_COLOR, "COLOR"}, {ramp_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {ramp_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_ramp_blend_items = create_string_to_ramp_blend_items();
	const std::map<int, std::string> ramp_blend_items_to_string = create_ramp_blend_items_to_string();

	ramp_blend_items_enum sky_blend_type() {
		STRING_TYPE_GETTER("sky_blend_type", static_cast<ramp_blend_items_enum>(string_to_ramp_blend_items.at(resstr)))
	}

	void sky_blend_type(ramp_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sky_blend_type", ramp_blend_items_to_string.at(value))
	}

	float horizon_brightness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "horizon_brightness")
	}

	void horizon_brightness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "horizon_brightness", value)
	}

	float spread() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spread")
	}

	void spread(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spread", value)
	}

	float sun_brightness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sun_brightness")
	}

	void sun_brightness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sun_brightness", value)
	}

	float sun_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sun_size")
	}

	void sun_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sun_size", value)
	}

	float backscattered_light() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "backscattered_light")
	}

	void backscattered_light(float value) {
		PRIMITIVE_TYPES_SETTER("f", "backscattered_light", value)
	}

	float sun_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sun_intensity")
	}

	void sun_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sun_intensity", value)
	}

	float atmosphere_turbidity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "atmosphere_turbidity")
	}

	void atmosphere_turbidity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "atmosphere_turbidity", value)
	}

	float atmosphere_inscattering() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "atmosphere_inscattering")
	}

	void atmosphere_inscattering(float value) {
		PRIMITIVE_TYPES_SETTER("f", "atmosphere_inscattering", value)
	}

	float atmosphere_extinction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "atmosphere_extinction")
	}

	void atmosphere_extinction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "atmosphere_extinction", value)
	}

	float atmosphere_distance_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "atmosphere_distance_factor")
	}

	void atmosphere_distance_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "atmosphere_distance_factor", value)
	}

	float sky_blend() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sky_blend")
	}

	void sky_blend(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sky_blend", value)
	}

	float sky_exposure() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sky_exposure")
	}

	void sky_exposure(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sky_exposure", value)
	}

	bool use_sky() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sky")
	}

	void use_sky(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sky", value)
	}

	bool use_atmosphere() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_atmosphere")
	}

	void use_atmosphere(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_atmosphere", value)
	}
};

class HemiLamp : public Lamp {
public:
	HemiLamp(PyObject* pyobj) : Lamp(pyobj) {}
	HemiLamp() : Lamp(0) { }
};

class LampTextureSlot : public TextureSlot {
public:
	LampTextureSlot(PyObject* pyobj) : TextureSlot(pyobj) {}
	LampTextureSlot() : TextureSlot(0) { }

	enum prop_texture_coordinates_items_enum {
		prop_texture_coordinates_items_GLOBAL = 8,	
		prop_texture_coordinates_items_VIEW = 128,	
		prop_texture_coordinates_items_OBJECT = 32	
	};

	std::map<std::string, int> create_string_to_prop_texture_coordinates_items() {
		return {{"GLOBAL", prop_texture_coordinates_items_GLOBAL}, {"VIEW", prop_texture_coordinates_items_VIEW}, {"OBJECT", prop_texture_coordinates_items_OBJECT}};
	};

	std::map<int, std::string> create_prop_texture_coordinates_items_to_string() {
		return {{prop_texture_coordinates_items_GLOBAL, "GLOBAL"}, {prop_texture_coordinates_items_VIEW, "VIEW"}, {prop_texture_coordinates_items_OBJECT, "OBJECT"}};
	};

	const std::map<std::string, int> string_to_prop_texture_coordinates_items = create_string_to_prop_texture_coordinates_items();
	const std::map<int, std::string> prop_texture_coordinates_items_to_string = create_prop_texture_coordinates_items_to_string();

	prop_texture_coordinates_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<prop_texture_coordinates_items_enum>(string_to_prop_texture_coordinates_items.at(resstr)))
	}

	void texture_coords(prop_texture_coordinates_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", prop_texture_coordinates_items_to_string.at(value))
	}

	Object object_value();

	bool use_map_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_color")
	}

	void use_map_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_color", value)
	}

	bool use_map_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_shadow")
	}

	void use_map_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_shadow", value)
	}

	float color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_factor")
	}

	void color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_factor", value)
	}

	float shadow_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_factor")
	}

	void shadow_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_factor", value)
	}
};

class Lattice : public ID {
public:
	Lattice(PyObject* pyobj) : ID(pyobj) {}
	Lattice() : ID(0) { }

	int points_u() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "points_u")
	}

	void points_u(int value) {
		PRIMITIVE_TYPES_SETTER("i", "points_u", value)
	}

	int points_v() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "points_v")
	}

	void points_v(int value) {
		PRIMITIVE_TYPES_SETTER("i", "points_v", value)
	}

	int points_w() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "points_w")
	}

	void points_w(int value) {
		PRIMITIVE_TYPES_SETTER("i", "points_w", value)
	}

	enum keyblock_type_items_enum {
		keyblock_type_items_KEY_LINEAR = 0,	
		keyblock_type_items_KEY_CARDINAL = 1,	
		keyblock_type_items_KEY_CATMULL_ROM = 3,	
		keyblock_type_items_KEY_BSPLINE = 2	
	};

	std::map<std::string, int> create_string_to_keyblock_type_items() {
		return {{"KEY_LINEAR", keyblock_type_items_KEY_LINEAR}, {"KEY_CARDINAL", keyblock_type_items_KEY_CARDINAL}, {"KEY_CATMULL_ROM", keyblock_type_items_KEY_CATMULL_ROM}, {"KEY_BSPLINE", keyblock_type_items_KEY_BSPLINE}};
	};

	std::map<int, std::string> create_keyblock_type_items_to_string() {
		return {{keyblock_type_items_KEY_LINEAR, "KEY_LINEAR"}, {keyblock_type_items_KEY_CARDINAL, "KEY_CARDINAL"}, {keyblock_type_items_KEY_CATMULL_ROM, "KEY_CATMULL_ROM"}, {keyblock_type_items_KEY_BSPLINE, "KEY_BSPLINE"}};
	};

	const std::map<std::string, int> string_to_keyblock_type_items = create_string_to_keyblock_type_items();
	const std::map<int, std::string> keyblock_type_items_to_string = create_keyblock_type_items_to_string();

	keyblock_type_items_enum interpolation_type_u() {
		STRING_TYPE_GETTER("interpolation_type_u", static_cast<keyblock_type_items_enum>(string_to_keyblock_type_items.at(resstr)))
	}

	void interpolation_type_u(keyblock_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation_type_u", keyblock_type_items_to_string.at(value))
	}

	keyblock_type_items_enum interpolation_type_v() {
		STRING_TYPE_GETTER("interpolation_type_v", static_cast<keyblock_type_items_enum>(string_to_keyblock_type_items.at(resstr)))
	}

	void interpolation_type_v(keyblock_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation_type_v", keyblock_type_items_to_string.at(value))
	}

	keyblock_type_items_enum interpolation_type_w() {
		STRING_TYPE_GETTER("interpolation_type_w", static_cast<keyblock_type_items_enum>(string_to_keyblock_type_items.at(resstr)))
	}

	void interpolation_type_w(keyblock_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation_type_w", keyblock_type_items_to_string.at(value))
	}

	bool use_outside() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_outside")
	}

	void use_outside(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_outside", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	Key shape_keys() {
		CLASS_TYPES_GETTER(Key, "shape_keys")
	}

	std::map<std::string, LatticePoint> points();

	bool is_editmode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_editmode")
	}

	void is_editmode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_editmode", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	void transform(VFLOAT16 matrix, bool shape_keys = false) {
		ARRAY_TO_PYOBJ(matrix, "O", 16)
		PYTHON_FUNCTION_ARGS_CALL("transform", "Oi", matrix_tupleval, shape_keys)
		DECREF_ARRAY_ITEMS(matrix, 16)
	}
};

class LatticePoint : public pyUniplug {
public:
	LatticePoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	LatticePoint() : pyUniplug(0) { }

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	VFLOAT3 co_deform() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co_deform", 3)
	}

	void co_deform(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co_deform", 3)
	}

	float weight_softbody() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight_softbody")
	}

	void weight_softbody(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight_softbody", value)
	}

	std::map<std::string, VertexGroupElement> groups();
};

class LineStyleModifier : public pyUniplug {
public:
	LineStyleModifier(PyObject* pyobj) : pyUniplug(pyobj) {}
	LineStyleModifier() : pyUniplug(0) { }

};

class LineStyleColorModifier : public LineStyleModifier {
public:
	LineStyleColorModifier(PyObject* pyobj) : LineStyleModifier(pyobj) {}
	LineStyleColorModifier() : LineStyleModifier(0) { }
};

class LineStyleColorModifier_AlongStroke : public LineStyleColorModifier {
public:
	LineStyleColorModifier_AlongStroke(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_AlongStroke() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}
};

class LineStyleColorModifier_DistanceFromCamera : public LineStyleColorModifier {
public:
	LineStyleColorModifier_DistanceFromCamera(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_DistanceFromCamera() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	float range_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_min")
	}

	void range_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_min", value)
	}

	float range_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_max")
	}

	void range_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_max", value)
	}
};

class LineStyleColorModifier_DistanceFromObject : public LineStyleColorModifier {
public:
	LineStyleColorModifier_DistanceFromObject(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_DistanceFromObject() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	float range_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_min")
	}

	void range_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_min", value)
	}

	float range_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_max")
	}

	void range_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_max", value)
	}

	Object target();
};

class LineStyleColorModifier_Material : public LineStyleColorModifier {
public:
	LineStyleColorModifier_Material(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_Material() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mat_attr_items_enum {
		mat_attr_items_LINE = 11,	
		mat_attr_items_LINE_R = 12,	
		mat_attr_items_LINE_G = 13,	
		mat_attr_items_LINE_B = 14,	
		mat_attr_items_LINE_A = 15,	
		mat_attr_items_DIFF = 1,	
		mat_attr_items_DIFF_R = 2,	
		mat_attr_items_DIFF_G = 3,	
		mat_attr_items_DIFF_B = 4,	
		mat_attr_items_SPEC = 5,	
		mat_attr_items_SPEC_R = 6,	
		mat_attr_items_SPEC_G = 7,	
		mat_attr_items_SPEC_B = 8,	
		mat_attr_items_SPEC_HARD = 9,	
		mat_attr_items_ALPHA = 10	
	};

	std::map<std::string, int> create_string_to_mat_attr_items() {
		return {{"LINE", mat_attr_items_LINE}, {"LINE_R", mat_attr_items_LINE_R}, {"LINE_G", mat_attr_items_LINE_G}, {"LINE_B", mat_attr_items_LINE_B}, {"LINE_A", mat_attr_items_LINE_A}, {"DIFF", mat_attr_items_DIFF}, {"DIFF_R", mat_attr_items_DIFF_R}, {"DIFF_G", mat_attr_items_DIFF_G}, {"DIFF_B", mat_attr_items_DIFF_B}, {"SPEC", mat_attr_items_SPEC}, {"SPEC_R", mat_attr_items_SPEC_R}, {"SPEC_G", mat_attr_items_SPEC_G}, {"SPEC_B", mat_attr_items_SPEC_B}, {"SPEC_HARD", mat_attr_items_SPEC_HARD}, {"ALPHA", mat_attr_items_ALPHA}};
	};

	std::map<int, std::string> create_mat_attr_items_to_string() {
		return {{mat_attr_items_LINE, "LINE"}, {mat_attr_items_LINE_R, "LINE_R"}, {mat_attr_items_LINE_G, "LINE_G"}, {mat_attr_items_LINE_B, "LINE_B"}, {mat_attr_items_LINE_A, "LINE_A"}, {mat_attr_items_DIFF, "DIFF"}, {mat_attr_items_DIFF_R, "DIFF_R"}, {mat_attr_items_DIFF_G, "DIFF_G"}, {mat_attr_items_DIFF_B, "DIFF_B"}, {mat_attr_items_SPEC, "SPEC"}, {mat_attr_items_SPEC_R, "SPEC_R"}, {mat_attr_items_SPEC_G, "SPEC_G"}, {mat_attr_items_SPEC_B, "SPEC_B"}, {mat_attr_items_SPEC_HARD, "SPEC_HARD"}, {mat_attr_items_ALPHA, "ALPHA"}};
	};

	const std::map<std::string, int> string_to_mat_attr_items = create_string_to_mat_attr_items();
	const std::map<int, std::string> mat_attr_items_to_string = create_mat_attr_items_to_string();

	mat_attr_items_enum material_attribute() {
		STRING_TYPE_GETTER("material_attribute", static_cast<mat_attr_items_enum>(string_to_mat_attr_items.at(resstr)))
	}

	void material_attribute(mat_attr_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "material_attribute", mat_attr_items_to_string.at(value))
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	bool use_ramp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ramp")
	}

	void use_ramp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ramp", value)
	}
};

class LineStyleColorModifier_Tangent : public LineStyleColorModifier {
public:
	LineStyleColorModifier_Tangent(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_Tangent() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}
};

class LineStyleColorModifier_Noise : public LineStyleColorModifier {
public:
	LineStyleColorModifier_Noise(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_Noise() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	float period() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "period")
	}

	void period(float value) {
		PRIMITIVE_TYPES_SETTER("f", "period", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}
};

class LineStyleColorModifier_CreaseAngle : public LineStyleColorModifier {
public:
	LineStyleColorModifier_CreaseAngle(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_CreaseAngle() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	float angle_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_min")
	}

	void angle_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_min", value)
	}

	float angle_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_max")
	}

	void angle_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_max", value)
	}
};

class LineStyleColorModifier_Curvature_3D : public LineStyleColorModifier {
public:
	LineStyleColorModifier_Curvature_3D(PyObject* pyobj) : LineStyleColorModifier(pyobj) {}
	LineStyleColorModifier_Curvature_3D() : LineStyleColorModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_SCREEN = 4,	
		value_blend_items_DIVIDE = 5,	
		value_blend_items_DIFFERENCE = 6,	
		value_blend_items_DARKEN = 7,	
		value_blend_items_LIGHTEN = 8,	
		value_blend_items_OVERLAY = 9,	
		value_blend_items_DODGE = 10,	
		value_blend_items_BURN = 11,	
		value_blend_items_HUE = 12,	
		value_blend_items_SATURATION = 13,	
		value_blend_items_VALUE = 14,	
		value_blend_items_COLOR = 15,	
		value_blend_items_SOFT_LIGHT = 16,	
		value_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"SCREEN", value_blend_items_SCREEN}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"DARKEN", value_blend_items_DARKEN}, {"LIGHTEN", value_blend_items_LIGHTEN}, {"OVERLAY", value_blend_items_OVERLAY}, {"DODGE", value_blend_items_DODGE}, {"BURN", value_blend_items_BURN}, {"HUE", value_blend_items_HUE}, {"SATURATION", value_blend_items_SATURATION}, {"VALUE", value_blend_items_VALUE}, {"COLOR", value_blend_items_COLOR}, {"SOFT_LIGHT", value_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", value_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_SCREEN, "SCREEN"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_DARKEN, "DARKEN"}, {value_blend_items_LIGHTEN, "LIGHTEN"}, {value_blend_items_OVERLAY, "OVERLAY"}, {value_blend_items_DODGE, "DODGE"}, {value_blend_items_BURN, "BURN"}, {value_blend_items_HUE, "HUE"}, {value_blend_items_SATURATION, "SATURATION"}, {value_blend_items_VALUE, "VALUE"}, {value_blend_items_COLOR, "COLOR"}, {value_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {value_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	float curvature_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "curvature_min")
	}

	void curvature_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "curvature_min", value)
	}

	float curvature_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "curvature_max")
	}

	void curvature_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "curvature_max", value)
	}
};

class LineStyleAlphaModifier : public LineStyleModifier {
public:
	LineStyleAlphaModifier(PyObject* pyobj) : LineStyleModifier(pyobj) {}
	LineStyleAlphaModifier() : LineStyleModifier(0) { }
};

class LineStyleAlphaModifier_AlongStroke : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_AlongStroke(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_AlongStroke() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}
};

class LineStyleAlphaModifier_DistanceFromCamera : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_DistanceFromCamera(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_DistanceFromCamera() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float range_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_min")
	}

	void range_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_min", value)
	}

	float range_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_max")
	}

	void range_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_max", value)
	}
};

class LineStyleAlphaModifier_DistanceFromObject : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_DistanceFromObject(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_DistanceFromObject() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float range_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_min")
	}

	void range_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_min", value)
	}

	float range_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_max")
	}

	void range_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_max", value)
	}

	Object target();
};

class LineStyleAlphaModifier_Material : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_Material(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_Material() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mat_attr_items_enum {
		mat_attr_items_LINE = 11,	
		mat_attr_items_LINE_R = 12,	
		mat_attr_items_LINE_G = 13,	
		mat_attr_items_LINE_B = 14,	
		mat_attr_items_LINE_A = 15,	
		mat_attr_items_DIFF = 1,	
		mat_attr_items_DIFF_R = 2,	
		mat_attr_items_DIFF_G = 3,	
		mat_attr_items_DIFF_B = 4,	
		mat_attr_items_SPEC = 5,	
		mat_attr_items_SPEC_R = 6,	
		mat_attr_items_SPEC_G = 7,	
		mat_attr_items_SPEC_B = 8,	
		mat_attr_items_SPEC_HARD = 9,	
		mat_attr_items_ALPHA = 10	
	};

	std::map<std::string, int> create_string_to_mat_attr_items() {
		return {{"LINE", mat_attr_items_LINE}, {"LINE_R", mat_attr_items_LINE_R}, {"LINE_G", mat_attr_items_LINE_G}, {"LINE_B", mat_attr_items_LINE_B}, {"LINE_A", mat_attr_items_LINE_A}, {"DIFF", mat_attr_items_DIFF}, {"DIFF_R", mat_attr_items_DIFF_R}, {"DIFF_G", mat_attr_items_DIFF_G}, {"DIFF_B", mat_attr_items_DIFF_B}, {"SPEC", mat_attr_items_SPEC}, {"SPEC_R", mat_attr_items_SPEC_R}, {"SPEC_G", mat_attr_items_SPEC_G}, {"SPEC_B", mat_attr_items_SPEC_B}, {"SPEC_HARD", mat_attr_items_SPEC_HARD}, {"ALPHA", mat_attr_items_ALPHA}};
	};

	std::map<int, std::string> create_mat_attr_items_to_string() {
		return {{mat_attr_items_LINE, "LINE"}, {mat_attr_items_LINE_R, "LINE_R"}, {mat_attr_items_LINE_G, "LINE_G"}, {mat_attr_items_LINE_B, "LINE_B"}, {mat_attr_items_LINE_A, "LINE_A"}, {mat_attr_items_DIFF, "DIFF"}, {mat_attr_items_DIFF_R, "DIFF_R"}, {mat_attr_items_DIFF_G, "DIFF_G"}, {mat_attr_items_DIFF_B, "DIFF_B"}, {mat_attr_items_SPEC, "SPEC"}, {mat_attr_items_SPEC_R, "SPEC_R"}, {mat_attr_items_SPEC_G, "SPEC_G"}, {mat_attr_items_SPEC_B, "SPEC_B"}, {mat_attr_items_SPEC_HARD, "SPEC_HARD"}, {mat_attr_items_ALPHA, "ALPHA"}};
	};

	const std::map<std::string, int> string_to_mat_attr_items = create_string_to_mat_attr_items();
	const std::map<int, std::string> mat_attr_items_to_string = create_mat_attr_items_to_string();

	mat_attr_items_enum material_attribute() {
		STRING_TYPE_GETTER("material_attribute", static_cast<mat_attr_items_enum>(string_to_mat_attr_items.at(resstr)))
	}

	void material_attribute(mat_attr_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "material_attribute", mat_attr_items_to_string.at(value))
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}
};

class LineStyleAlphaModifier_Tangent : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_Tangent(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_Tangent() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}
};

class LineStyleAlphaModifier_Noise : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_Noise(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_Noise() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	float period() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "period")
	}

	void period(float value) {
		PRIMITIVE_TYPES_SETTER("f", "period", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}
};

class LineStyleAlphaModifier_CreaseAngle : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_CreaseAngle(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_CreaseAngle() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float angle_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_min")
	}

	void angle_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_min", value)
	}

	float angle_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_max")
	}

	void angle_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_max", value)
	}
};

class LineStyleAlphaModifier_Curvature_3D : public LineStyleAlphaModifier {
public:
	LineStyleAlphaModifier_Curvature_3D(PyObject* pyobj) : LineStyleAlphaModifier(pyobj) {}
	LineStyleAlphaModifier_Curvature_3D() : LineStyleAlphaModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float curvature_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "curvature_min")
	}

	void curvature_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "curvature_min", value)
	}

	float curvature_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "curvature_max")
	}

	void curvature_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "curvature_max", value)
	}
};

class LineStyleThicknessModifier : public LineStyleModifier {
public:
	LineStyleThicknessModifier(PyObject* pyobj) : LineStyleModifier(pyobj) {}
	LineStyleThicknessModifier() : LineStyleModifier(0) { }
};

class LineStyleThicknessModifier_Tangent : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_Tangent(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_Tangent() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float thickness_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_min")
	}

	void thickness_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_min", value)
	}

	float thickness_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_max")
	}

	void thickness_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_max", value)
	}
};

class LineStyleThicknessModifier_AlongStroke : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_AlongStroke(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_AlongStroke() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float value_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_min")
	}

	void value_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_min", value)
	}

	float value_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_max")
	}

	void value_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_max", value)
	}
};

class LineStyleThicknessModifier_DistanceFromCamera : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_DistanceFromCamera(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_DistanceFromCamera() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float range_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_min")
	}

	void range_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_min", value)
	}

	float range_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_max")
	}

	void range_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_max", value)
	}

	float value_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_min")
	}

	void value_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_min", value)
	}

	float value_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_max")
	}

	void value_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_max", value)
	}
};

class LineStyleThicknessModifier_DistanceFromObject : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_DistanceFromObject(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_DistanceFromObject() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float range_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_min")
	}

	void range_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_min", value)
	}

	float range_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range_max")
	}

	void range_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range_max", value)
	}

	float value_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_min")
	}

	void value_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_min", value)
	}

	float value_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_max")
	}

	void value_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_max", value)
	}

	Object target();
};

class LineStyleThicknessModifier_Material : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_Material(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_Material() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mat_attr_items_enum {
		mat_attr_items_LINE = 11,	
		mat_attr_items_LINE_R = 12,	
		mat_attr_items_LINE_G = 13,	
		mat_attr_items_LINE_B = 14,	
		mat_attr_items_LINE_A = 15,	
		mat_attr_items_DIFF = 1,	
		mat_attr_items_DIFF_R = 2,	
		mat_attr_items_DIFF_G = 3,	
		mat_attr_items_DIFF_B = 4,	
		mat_attr_items_SPEC = 5,	
		mat_attr_items_SPEC_R = 6,	
		mat_attr_items_SPEC_G = 7,	
		mat_attr_items_SPEC_B = 8,	
		mat_attr_items_SPEC_HARD = 9,	
		mat_attr_items_ALPHA = 10	
	};

	std::map<std::string, int> create_string_to_mat_attr_items() {
		return {{"LINE", mat_attr_items_LINE}, {"LINE_R", mat_attr_items_LINE_R}, {"LINE_G", mat_attr_items_LINE_G}, {"LINE_B", mat_attr_items_LINE_B}, {"LINE_A", mat_attr_items_LINE_A}, {"DIFF", mat_attr_items_DIFF}, {"DIFF_R", mat_attr_items_DIFF_R}, {"DIFF_G", mat_attr_items_DIFF_G}, {"DIFF_B", mat_attr_items_DIFF_B}, {"SPEC", mat_attr_items_SPEC}, {"SPEC_R", mat_attr_items_SPEC_R}, {"SPEC_G", mat_attr_items_SPEC_G}, {"SPEC_B", mat_attr_items_SPEC_B}, {"SPEC_HARD", mat_attr_items_SPEC_HARD}, {"ALPHA", mat_attr_items_ALPHA}};
	};

	std::map<int, std::string> create_mat_attr_items_to_string() {
		return {{mat_attr_items_LINE, "LINE"}, {mat_attr_items_LINE_R, "LINE_R"}, {mat_attr_items_LINE_G, "LINE_G"}, {mat_attr_items_LINE_B, "LINE_B"}, {mat_attr_items_LINE_A, "LINE_A"}, {mat_attr_items_DIFF, "DIFF"}, {mat_attr_items_DIFF_R, "DIFF_R"}, {mat_attr_items_DIFF_G, "DIFF_G"}, {mat_attr_items_DIFF_B, "DIFF_B"}, {mat_attr_items_SPEC, "SPEC"}, {mat_attr_items_SPEC_R, "SPEC_R"}, {mat_attr_items_SPEC_G, "SPEC_G"}, {mat_attr_items_SPEC_B, "SPEC_B"}, {mat_attr_items_SPEC_HARD, "SPEC_HARD"}, {mat_attr_items_ALPHA, "ALPHA"}};
	};

	const std::map<std::string, int> string_to_mat_attr_items = create_string_to_mat_attr_items();
	const std::map<int, std::string> mat_attr_items_to_string = create_mat_attr_items_to_string();

	mat_attr_items_enum material_attribute() {
		STRING_TYPE_GETTER("material_attribute", static_cast<mat_attr_items_enum>(string_to_mat_attr_items.at(resstr)))
	}

	void material_attribute(mat_attr_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "material_attribute", mat_attr_items_to_string.at(value))
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float value_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_min")
	}

	void value_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_min", value)
	}

	float value_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value_max")
	}

	void value_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value_max", value)
	}
};

class LineStyleThicknessModifier_Calligraphy : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_Calligraphy(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_Calligraphy() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float orientation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "orientation")
	}

	void orientation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "orientation", value)
	}

	float thickness_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_min")
	}

	void thickness_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_min", value)
	}

	float thickness_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_max")
	}

	void thickness_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_max", value)
	}
};

class LineStyleThicknessModifier_Noise : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_Noise(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_Noise() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	float period() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "period")
	}

	void period(float value) {
		PRIMITIVE_TYPES_SETTER("f", "period", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}

	bool use_asymmetric() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_asymmetric")
	}

	void use_asymmetric(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_asymmetric", value)
	}
};

class LineStyleThicknessModifier_Curvature_3D : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_Curvature_3D(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_Curvature_3D() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float thickness_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_min")
	}

	void thickness_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_min", value)
	}

	float thickness_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_max")
	}

	void thickness_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_max", value)
	}

	float curvature_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "curvature_min")
	}

	void curvature_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "curvature_min", value)
	}

	float curvature_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "curvature_max")
	}

	void curvature_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "curvature_max", value)
	}
};

class LineStyleThicknessModifier_CreaseAngle : public LineStyleThicknessModifier {
public:
	LineStyleThicknessModifier_CreaseAngle(PyObject* pyobj) : LineStyleThicknessModifier(pyobj) {}
	LineStyleThicknessModifier_CreaseAngle() : LineStyleThicknessModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_ALONG_STROKE = 1,	
		modifier_type_items_CALLIGRAPHY = 13,	
		modifier_type_items_CREASE_ANGLE = 21,	
		modifier_type_items_CURVATURE_3D = 23,	
		modifier_type_items_DISTANCE_FROM_CAMERA = 2,	
		modifier_type_items_DISTANCE_FROM_OBJECT = 3,	
		modifier_type_items_MATERIAL = 4,	
		modifier_type_items_NOISE = 20,	
		modifier_type_items_TANGENT = 19	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"ALONG_STROKE", modifier_type_items_ALONG_STROKE}, {"CALLIGRAPHY", modifier_type_items_CALLIGRAPHY}, {"CREASE_ANGLE", modifier_type_items_CREASE_ANGLE}, {"CURVATURE_3D", modifier_type_items_CURVATURE_3D}, {"DISTANCE_FROM_CAMERA", modifier_type_items_DISTANCE_FROM_CAMERA}, {"DISTANCE_FROM_OBJECT", modifier_type_items_DISTANCE_FROM_OBJECT}, {"MATERIAL", modifier_type_items_MATERIAL}, {"NOISE", modifier_type_items_NOISE}, {"TANGENT", modifier_type_items_TANGENT}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_ALONG_STROKE, "ALONG_STROKE"}, {modifier_type_items_CALLIGRAPHY, "CALLIGRAPHY"}, {modifier_type_items_CREASE_ANGLE, "CREASE_ANGLE"}, {modifier_type_items_CURVATURE_3D, "CURVATURE_3D"}, {modifier_type_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {modifier_type_items_DISTANCE_FROM_OBJECT, "DISTANCE_FROM_OBJECT"}, {modifier_type_items_MATERIAL, "MATERIAL"}, {modifier_type_items_NOISE, "NOISE"}, {modifier_type_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum value_blend_items_enum {
		value_blend_items_MIX = 0,	
		value_blend_items_ADD = 1,	
		value_blend_items_SUBTRACT = 3,	
		value_blend_items_MULTIPLY = 2,	
		value_blend_items_DIVIDE = 4,	
		value_blend_items_DIFFERENCE = 5,	
		value_blend_items_MININUM = 6,	
		value_blend_items_MAXIMUM = 7	
	};

	std::map<std::string, int> create_string_to_value_blend_items() {
		return {{"MIX", value_blend_items_MIX}, {"ADD", value_blend_items_ADD}, {"SUBTRACT", value_blend_items_SUBTRACT}, {"MULTIPLY", value_blend_items_MULTIPLY}, {"DIVIDE", value_blend_items_DIVIDE}, {"DIFFERENCE", value_blend_items_DIFFERENCE}, {"MININUM", value_blend_items_MININUM}, {"MAXIMUM", value_blend_items_MAXIMUM}};
	};

	std::map<int, std::string> create_value_blend_items_to_string() {
		return {{value_blend_items_MIX, "MIX"}, {value_blend_items_ADD, "ADD"}, {value_blend_items_SUBTRACT, "SUBTRACT"}, {value_blend_items_MULTIPLY, "MULTIPLY"}, {value_blend_items_DIVIDE, "DIVIDE"}, {value_blend_items_DIFFERENCE, "DIFFERENCE"}, {value_blend_items_MININUM, "MININUM"}, {value_blend_items_MAXIMUM, "MAXIMUM"}};
	};

	const std::map<std::string, int> string_to_value_blend_items = create_string_to_value_blend_items();
	const std::map<int, std::string> value_blend_items_to_string = create_value_blend_items_to_string();

	value_blend_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<value_blend_items_enum>(string_to_value_blend_items.at(resstr)))
	}

	void blend(value_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", value_blend_items_to_string.at(value))
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum mapping_items_enum {
		mapping_items_LINEAR = 0,	
		mapping_items_CURVE = 1	
	};

	std::map<std::string, int> create_string_to_mapping_items() {
		return {{"LINEAR", mapping_items_LINEAR}, {"CURVE", mapping_items_CURVE}};
	};

	std::map<int, std::string> create_mapping_items_to_string() {
		return {{mapping_items_LINEAR, "LINEAR"}, {mapping_items_CURVE, "CURVE"}};
	};

	const std::map<std::string, int> string_to_mapping_items = create_string_to_mapping_items();
	const std::map<int, std::string> mapping_items_to_string = create_mapping_items_to_string();

	mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<mapping_items_enum>(string_to_mapping_items.at(resstr)))
	}

	void mapping(mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", mapping_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	float angle_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_min")
	}

	void angle_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_min", value)
	}

	float angle_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_max")
	}

	void angle_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_max", value)
	}

	float thickness_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_min")
	}

	void thickness_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_min", value)
	}

	float thickness_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_max")
	}

	void thickness_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_max", value)
	}
};

class LineStyleGeometryModifier : public LineStyleModifier {
public:
	LineStyleGeometryModifier(PyObject* pyobj) : LineStyleModifier(pyobj) {}
	LineStyleGeometryModifier() : LineStyleModifier(0) { }
};

class LineStyleGeometryModifier_Sampling : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_Sampling(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_Sampling() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float sampling() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sampling")
	}

	void sampling(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sampling", value)
	}
};

class LineStyleGeometryModifier_BezierCurve : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_BezierCurve(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_BezierCurve() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "error")
	}

	void error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "error", value)
	}
};

class LineStyleGeometryModifier_SinusDisplacement : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_SinusDisplacement(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_SinusDisplacement() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float wavelength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wavelength")
	}

	void wavelength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wavelength", value)
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	float phase() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "phase")
	}

	void phase(float value) {
		PRIMITIVE_TYPES_SETTER("f", "phase", value)
	}
};

class LineStyleGeometryModifier_SpatialNoise : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_SpatialNoise(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_SpatialNoise() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	float scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale")
	}

	void scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale", value)
	}

	int octaves() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "octaves")
	}

	void octaves(int value) {
		PRIMITIVE_TYPES_SETTER("i", "octaves", value)
	}

	bool smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "smooth")
	}

	void smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "smooth", value)
	}

	bool use_pure_random() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pure_random")
	}

	void use_pure_random(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pure_random", value)
	}
};

class LineStyleGeometryModifier_PerlinNoise1D : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_PerlinNoise1D(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_PerlinNoise1D() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float frequency() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frequency")
	}

	void frequency(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frequency", value)
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	int octaves() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "octaves")
	}

	void octaves(int value) {
		PRIMITIVE_TYPES_SETTER("i", "octaves", value)
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}
};

class LineStyleGeometryModifier_PerlinNoise2D : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_PerlinNoise2D(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_PerlinNoise2D() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float frequency() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frequency")
	}

	void frequency(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frequency", value)
	}

	float amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "amplitude")
	}

	void amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "amplitude", value)
	}

	int octaves() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "octaves")
	}

	void octaves(int value) {
		PRIMITIVE_TYPES_SETTER("i", "octaves", value)
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}
};

class LineStyleGeometryModifier_BackboneStretcher : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_BackboneStretcher(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_BackboneStretcher() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float backbone_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "backbone_length")
	}

	void backbone_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "backbone_length", value)
	}
};

class LineStyleGeometryModifier_TipRemover : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_TipRemover(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_TipRemover() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float tip_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tip_length")
	}

	void tip_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tip_length", value)
	}
};

class LineStyleGeometryModifier_Polygonalization : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_Polygonalization(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_Polygonalization() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "error")
	}

	void error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "error", value)
	}
};

class LineStyleGeometryModifier_GuidingLines : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_GuidingLines(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_GuidingLines() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}
};

class LineStyleGeometryModifier_Blueprint : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_Blueprint(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_Blueprint() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum blueprint_shape_items_enum {
		blueprint_shape_items_CIRCLES = 1,	
		blueprint_shape_items_ELLIPSES = 2,	
		blueprint_shape_items_SQUARES = 4	
	};

	std::map<std::string, int> create_string_to_blueprint_shape_items() {
		return {{"CIRCLES", blueprint_shape_items_CIRCLES}, {"ELLIPSES", blueprint_shape_items_ELLIPSES}, {"SQUARES", blueprint_shape_items_SQUARES}};
	};

	std::map<int, std::string> create_blueprint_shape_items_to_string() {
		return {{blueprint_shape_items_CIRCLES, "CIRCLES"}, {blueprint_shape_items_ELLIPSES, "ELLIPSES"}, {blueprint_shape_items_SQUARES, "SQUARES"}};
	};

	const std::map<std::string, int> string_to_blueprint_shape_items = create_string_to_blueprint_shape_items();
	const std::map<int, std::string> blueprint_shape_items_to_string = create_blueprint_shape_items_to_string();

	blueprint_shape_items_enum shape() {
		STRING_TYPE_GETTER("shape", static_cast<blueprint_shape_items_enum>(string_to_blueprint_shape_items.at(resstr)))
	}

	void shape(blueprint_shape_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shape", blueprint_shape_items_to_string.at(value))
	}

	int rounds() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "rounds")
	}

	void rounds(int value) {
		PRIMITIVE_TYPES_SETTER("i", "rounds", value)
	}

	float backbone_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "backbone_length")
	}

	void backbone_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "backbone_length", value)
	}

	int random_radius() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "random_radius")
	}

	void random_radius(int value) {
		PRIMITIVE_TYPES_SETTER("i", "random_radius", value)
	}

	int random_center() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "random_center")
	}

	void random_center(int value) {
		PRIMITIVE_TYPES_SETTER("i", "random_center", value)
	}

	int random_backbone() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "random_backbone")
	}

	void random_backbone(int value) {
		PRIMITIVE_TYPES_SETTER("i", "random_backbone", value)
	}
};

class LineStyleGeometryModifier_2DOffset : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_2DOffset(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_2DOffset() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "start")
	}

	void start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "start", value)
	}

	float end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "end")
	}

	void end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "end", value)
	}

	float x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "x")
	}

	void x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "x", value)
	}

	float y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "y")
	}

	void y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "y", value)
	}
};

class LineStyleGeometryModifier_2DTransform : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_2DTransform(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_2DTransform() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	enum transform_pivot_items_enum {
		transform_pivot_items_CENTER = 1,	
		transform_pivot_items_START = 2,	
		transform_pivot_items_END = 3,	
		transform_pivot_items_PARAM = 4,	
		transform_pivot_items_ABSOLUTE = 5	
	};

	std::map<std::string, int> create_string_to_transform_pivot_items() {
		return {{"CENTER", transform_pivot_items_CENTER}, {"START", transform_pivot_items_START}, {"END", transform_pivot_items_END}, {"PARAM", transform_pivot_items_PARAM}, {"ABSOLUTE", transform_pivot_items_ABSOLUTE}};
	};

	std::map<int, std::string> create_transform_pivot_items_to_string() {
		return {{transform_pivot_items_CENTER, "CENTER"}, {transform_pivot_items_START, "START"}, {transform_pivot_items_END, "END"}, {transform_pivot_items_PARAM, "PARAM"}, {transform_pivot_items_ABSOLUTE, "ABSOLUTE"}};
	};

	const std::map<std::string, int> string_to_transform_pivot_items = create_string_to_transform_pivot_items();
	const std::map<int, std::string> transform_pivot_items_to_string = create_transform_pivot_items_to_string();

	transform_pivot_items_enum pivot() {
		STRING_TYPE_GETTER("pivot", static_cast<transform_pivot_items_enum>(string_to_transform_pivot_items.at(resstr)))
	}

	void pivot(transform_pivot_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pivot", transform_pivot_items_to_string.at(value))
	}

	float scale_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_x")
	}

	void scale_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_x", value)
	}

	float scale_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_y")
	}

	void scale_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_y", value)
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	float pivot_u() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pivot_u")
	}

	void pivot_u(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pivot_u", value)
	}

	float pivot_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pivot_x")
	}

	void pivot_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pivot_x", value)
	}

	float pivot_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pivot_y")
	}

	void pivot_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pivot_y", value)
	}
};

class LineStyleGeometryModifier_Simplification : public LineStyleGeometryModifier {
public:
	LineStyleGeometryModifier_Simplification(PyObject* pyobj) : LineStyleGeometryModifier(pyobj) {}
	LineStyleGeometryModifier_Simplification() : LineStyleGeometryModifier(0) { }

	enum modifier_type_items_enum {
		modifier_type_items_2D_OFFSET = 17,	
		modifier_type_items_2D_TRANSFORM = 18,	
		modifier_type_items_BACKBONE_STRETCHER = 11,	
		modifier_type_items_BEZIER_CURVE = 6,	
		modifier_type_items_BLUEPRINT = 16,	
		modifier_type_items_GUIDING_LINES = 15,	
		modifier_type_items_PERLIN_NOISE_1D = 9,	
		modifier_type_items_PERLIN_NOISE_2D = 10,	
		modifier_type_items_POLYGONIZATION = 14,	
		modifier_type_items_SAMPLING = 5,	
		modifier_type_items_SIMPLIFICATION = 22,	
		modifier_type_items_SINUS_DISPLACEMENT = 7,	
		modifier_type_items_SPATIAL_NOISE = 8,	
		modifier_type_items_TIP_REMOVER = 12	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"2D_OFFSET", modifier_type_items_2D_OFFSET}, {"2D_TRANSFORM", modifier_type_items_2D_TRANSFORM}, {"BACKBONE_STRETCHER", modifier_type_items_BACKBONE_STRETCHER}, {"BEZIER_CURVE", modifier_type_items_BEZIER_CURVE}, {"BLUEPRINT", modifier_type_items_BLUEPRINT}, {"GUIDING_LINES", modifier_type_items_GUIDING_LINES}, {"PERLIN_NOISE_1D", modifier_type_items_PERLIN_NOISE_1D}, {"PERLIN_NOISE_2D", modifier_type_items_PERLIN_NOISE_2D}, {"POLYGONIZATION", modifier_type_items_POLYGONIZATION}, {"SAMPLING", modifier_type_items_SAMPLING}, {"SIMPLIFICATION", modifier_type_items_SIMPLIFICATION}, {"SINUS_DISPLACEMENT", modifier_type_items_SINUS_DISPLACEMENT}, {"SPATIAL_NOISE", modifier_type_items_SPATIAL_NOISE}, {"TIP_REMOVER", modifier_type_items_TIP_REMOVER}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_2D_OFFSET, "2D_OFFSET"}, {modifier_type_items_2D_TRANSFORM, "2D_TRANSFORM"}, {modifier_type_items_BACKBONE_STRETCHER, "BACKBONE_STRETCHER"}, {modifier_type_items_BEZIER_CURVE, "BEZIER_CURVE"}, {modifier_type_items_BLUEPRINT, "BLUEPRINT"}, {modifier_type_items_GUIDING_LINES, "GUIDING_LINES"}, {modifier_type_items_PERLIN_NOISE_1D, "PERLIN_NOISE_1D"}, {modifier_type_items_PERLIN_NOISE_2D, "PERLIN_NOISE_2D"}, {modifier_type_items_POLYGONIZATION, "POLYGONIZATION"}, {modifier_type_items_SAMPLING, "SAMPLING"}, {modifier_type_items_SIMPLIFICATION, "SIMPLIFICATION"}, {modifier_type_items_SINUS_DISPLACEMENT, "SINUS_DISPLACEMENT"}, {modifier_type_items_SPATIAL_NOISE, "SPATIAL_NOISE"}, {modifier_type_items_TIP_REMOVER, "TIP_REMOVER"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "expanded")
	}

	void expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "expanded", value)
	}

	float tolerance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tolerance")
	}

	void tolerance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tolerance", value)
	}
};

class FreestyleLineStyle : public ID {
public:
	FreestyleLineStyle(PyObject* pyobj) : ID(pyobj) {}
	FreestyleLineStyle() : ID(0) { }

	std::map<std::string, LineStyleTextureSlot> texture_slots();

	Texture active_texture() {
		CLASS_TYPES_GETTER(Texture, "active_texture")
	}

	int active_texture_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_texture_index")
	}

	void active_texture_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_texture_index", value)
	}

	enum panel_items_enum {
		panel_items_STROKES = 1,	
		panel_items_COLOR = 2,	
		panel_items_ALPHA = 3,	
		panel_items_THICKNESS = 4,	
		panel_items_GEOMETRY = 5,	
		panel_items_TEXTURE = 6	
	};

	std::map<std::string, int> create_string_to_panel_items() {
		return {{"STROKES", panel_items_STROKES}, {"COLOR", panel_items_COLOR}, {"ALPHA", panel_items_ALPHA}, {"THICKNESS", panel_items_THICKNESS}, {"GEOMETRY", panel_items_GEOMETRY}, {"TEXTURE", panel_items_TEXTURE}};
	};

	std::map<int, std::string> create_panel_items_to_string() {
		return {{panel_items_STROKES, "STROKES"}, {panel_items_COLOR, "COLOR"}, {panel_items_ALPHA, "ALPHA"}, {panel_items_THICKNESS, "THICKNESS"}, {panel_items_GEOMETRY, "GEOMETRY"}, {panel_items_TEXTURE, "TEXTURE"}};
	};

	const std::map<std::string, int> string_to_panel_items = create_string_to_panel_items();
	const std::map<int, std::string> panel_items_to_string = create_panel_items_to_string();

	panel_items_enum panel() {
		STRING_TYPE_GETTER("panel", static_cast<panel_items_enum>(string_to_panel_items.at(resstr)))
	}

	void panel(panel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "panel", panel_items_to_string.at(value))
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	float alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha")
	}

	void alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha", value)
	}

	float thickness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness")
	}

	void thickness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness", value)
	}

	enum thickness_position_items_enum {
		thickness_position_items_CENTER = 1,	
		thickness_position_items_INSIDE = 2,	
		thickness_position_items_OUTSIDE = 3,	
		thickness_position_items_RELATIVE = 4	
	};

	std::map<std::string, int> create_string_to_thickness_position_items() {
		return {{"CENTER", thickness_position_items_CENTER}, {"INSIDE", thickness_position_items_INSIDE}, {"OUTSIDE", thickness_position_items_OUTSIDE}, {"RELATIVE", thickness_position_items_RELATIVE}};
	};

	std::map<int, std::string> create_thickness_position_items_to_string() {
		return {{thickness_position_items_CENTER, "CENTER"}, {thickness_position_items_INSIDE, "INSIDE"}, {thickness_position_items_OUTSIDE, "OUTSIDE"}, {thickness_position_items_RELATIVE, "RELATIVE"}};
	};

	const std::map<std::string, int> string_to_thickness_position_items = create_string_to_thickness_position_items();
	const std::map<int, std::string> thickness_position_items_to_string = create_thickness_position_items_to_string();

	thickness_position_items_enum thickness_position() {
		STRING_TYPE_GETTER("thickness_position", static_cast<thickness_position_items_enum>(string_to_thickness_position_items.at(resstr)))
	}

	void thickness_position(thickness_position_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "thickness_position", thickness_position_items_to_string.at(value))
	}

	float thickness_ratio() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_ratio")
	}

	void thickness_ratio(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_ratio", value)
	}

	std::map<std::string, LineStyleColorModifier> color_modifiers() {
		MAP_TYPE_GETTER("color_modifiers", LineStyleColorModifier)
	}

	std::map<std::string, LineStyleAlphaModifier> alpha_modifiers() {
		MAP_TYPE_GETTER("alpha_modifiers", LineStyleAlphaModifier)
	}

	std::map<std::string, LineStyleThicknessModifier> thickness_modifiers() {
		MAP_TYPE_GETTER("thickness_modifiers", LineStyleThicknessModifier)
	}

	std::map<std::string, LineStyleGeometryModifier> geometry_modifiers() {
		MAP_TYPE_GETTER("geometry_modifiers", LineStyleGeometryModifier)
	}

	bool use_chaining() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_chaining")
	}

	void use_chaining(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_chaining", value)
	}

	enum chaining_items_enum {
		chaining_items_PLAIN = 1,	
		chaining_items_SKETCHY = 2	
	};

	std::map<std::string, int> create_string_to_chaining_items() {
		return {{"PLAIN", chaining_items_PLAIN}, {"SKETCHY", chaining_items_SKETCHY}};
	};

	std::map<int, std::string> create_chaining_items_to_string() {
		return {{chaining_items_PLAIN, "PLAIN"}, {chaining_items_SKETCHY, "SKETCHY"}};
	};

	const std::map<std::string, int> string_to_chaining_items = create_string_to_chaining_items();
	const std::map<int, std::string> chaining_items_to_string = create_chaining_items_to_string();

	chaining_items_enum chaining() {
		STRING_TYPE_GETTER("chaining", static_cast<chaining_items_enum>(string_to_chaining_items.at(resstr)))
	}

	void chaining(chaining_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "chaining", chaining_items_to_string.at(value))
	}

	int rounds() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "rounds")
	}

	void rounds(int value) {
		PRIMITIVE_TYPES_SETTER("i", "rounds", value)
	}

	bool use_same_object() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_same_object")
	}

	void use_same_object(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_same_object", value)
	}

	bool use_split_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_split_length")
	}

	void use_split_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_split_length", value)
	}

	float split_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "split_length")
	}

	void split_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "split_length", value)
	}

	bool use_angle_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_angle_min")
	}

	void use_angle_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_angle_min", value)
	}

	float angle_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_min")
	}

	void angle_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_min", value)
	}

	bool use_angle_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_angle_max")
	}

	void use_angle_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_angle_max", value)
	}

	float angle_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_max")
	}

	void angle_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_max", value)
	}

	bool use_length_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_length_min")
	}

	void use_length_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_length_min", value)
	}

	float length_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "length_min")
	}

	void length_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "length_min", value)
	}

	bool use_length_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_length_max")
	}

	void use_length_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_length_max", value)
	}

	float length_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "length_max")
	}

	void length_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "length_max", value)
	}

	bool use_chain_count() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_chain_count")
	}

	void use_chain_count(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_chain_count", value)
	}

	int chain_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "chain_count")
	}

	void chain_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "chain_count", value)
	}

	bool use_split_pattern() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_split_pattern")
	}

	void use_split_pattern(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_split_pattern", value)
	}

	int split_dash1() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "split_dash1")
	}

	void split_dash1(int value) {
		PRIMITIVE_TYPES_SETTER("i", "split_dash1", value)
	}

	int split_gap1() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "split_gap1")
	}

	void split_gap1(int value) {
		PRIMITIVE_TYPES_SETTER("i", "split_gap1", value)
	}

	int split_dash2() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "split_dash2")
	}

	void split_dash2(int value) {
		PRIMITIVE_TYPES_SETTER("i", "split_dash2", value)
	}

	int split_gap2() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "split_gap2")
	}

	void split_gap2(int value) {
		PRIMITIVE_TYPES_SETTER("i", "split_gap2", value)
	}

	int split_dash3() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "split_dash3")
	}

	void split_dash3(int value) {
		PRIMITIVE_TYPES_SETTER("i", "split_dash3", value)
	}

	int split_gap3() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "split_gap3")
	}

	void split_gap3(int value) {
		PRIMITIVE_TYPES_SETTER("i", "split_gap3", value)
	}

	bool material_boundary() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "material_boundary")
	}

	void material_boundary(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "material_boundary", value)
	}

	bool use_sorting() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sorting")
	}

	void use_sorting(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sorting", value)
	}

	enum sort_key_items_enum {
		sort_key_items_DISTANCE_FROM_CAMERA = 1,	
		sort_key_items_2D_LENGTH = 2,	
		sort_key_items_PROJECTED_X = 3,	
		sort_key_items_PROJECTED_Y = 4	
	};

	std::map<std::string, int> create_string_to_sort_key_items() {
		return {{"DISTANCE_FROM_CAMERA", sort_key_items_DISTANCE_FROM_CAMERA}, {"2D_LENGTH", sort_key_items_2D_LENGTH}, {"PROJECTED_X", sort_key_items_PROJECTED_X}, {"PROJECTED_Y", sort_key_items_PROJECTED_Y}};
	};

	std::map<int, std::string> create_sort_key_items_to_string() {
		return {{sort_key_items_DISTANCE_FROM_CAMERA, "DISTANCE_FROM_CAMERA"}, {sort_key_items_2D_LENGTH, "2D_LENGTH"}, {sort_key_items_PROJECTED_X, "PROJECTED_X"}, {sort_key_items_PROJECTED_Y, "PROJECTED_Y"}};
	};

	const std::map<std::string, int> string_to_sort_key_items = create_string_to_sort_key_items();
	const std::map<int, std::string> sort_key_items_to_string = create_sort_key_items_to_string();

	sort_key_items_enum sort_key() {
		STRING_TYPE_GETTER("sort_key", static_cast<sort_key_items_enum>(string_to_sort_key_items.at(resstr)))
	}

	void sort_key(sort_key_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sort_key", sort_key_items_to_string.at(value))
	}

	enum sort_order_items_enum {
		sort_order_items_DEFAULT = 0,	
		sort_order_items_REVERSE = 4096	
	};

	std::map<std::string, int> create_string_to_sort_order_items() {
		return {{"DEFAULT", sort_order_items_DEFAULT}, {"REVERSE", sort_order_items_REVERSE}};
	};

	std::map<int, std::string> create_sort_order_items_to_string() {
		return {{sort_order_items_DEFAULT, "DEFAULT"}, {sort_order_items_REVERSE, "REVERSE"}};
	};

	const std::map<std::string, int> string_to_sort_order_items = create_string_to_sort_order_items();
	const std::map<int, std::string> sort_order_items_to_string = create_sort_order_items_to_string();

	sort_order_items_enum sort_order() {
		STRING_TYPE_GETTER("sort_order", static_cast<sort_order_items_enum>(string_to_sort_order_items.at(resstr)))
	}

	void sort_order(sort_order_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sort_order", sort_order_items_to_string.at(value))
	}

	enum integration_type_items_enum {
		integration_type_items_MEAN = 1,	
		integration_type_items_MIN = 2,	
		integration_type_items_MAX = 3,	
		integration_type_items_FIRST = 4,	
		integration_type_items_LAST = 5	
	};

	std::map<std::string, int> create_string_to_integration_type_items() {
		return {{"MEAN", integration_type_items_MEAN}, {"MIN", integration_type_items_MIN}, {"MAX", integration_type_items_MAX}, {"FIRST", integration_type_items_FIRST}, {"LAST", integration_type_items_LAST}};
	};

	std::map<int, std::string> create_integration_type_items_to_string() {
		return {{integration_type_items_MEAN, "MEAN"}, {integration_type_items_MIN, "MIN"}, {integration_type_items_MAX, "MAX"}, {integration_type_items_FIRST, "FIRST"}, {integration_type_items_LAST, "LAST"}};
	};

	const std::map<std::string, int> string_to_integration_type_items = create_string_to_integration_type_items();
	const std::map<int, std::string> integration_type_items_to_string = create_integration_type_items_to_string();

	integration_type_items_enum integration_type() {
		STRING_TYPE_GETTER("integration_type", static_cast<integration_type_items_enum>(string_to_integration_type_items.at(resstr)))
	}

	void integration_type(integration_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "integration_type", integration_type_items_to_string.at(value))
	}

	bool use_dashed_line() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dashed_line")
	}

	void use_dashed_line(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dashed_line", value)
	}

	enum cap_items_enum {
		cap_items_BUTT = 1,	
		cap_items_ROUND = 2,	
		cap_items_SQUARE = 3	
	};

	std::map<std::string, int> create_string_to_cap_items() {
		return {{"BUTT", cap_items_BUTT}, {"ROUND", cap_items_ROUND}, {"SQUARE", cap_items_SQUARE}};
	};

	std::map<int, std::string> create_cap_items_to_string() {
		return {{cap_items_BUTT, "BUTT"}, {cap_items_ROUND, "ROUND"}, {cap_items_SQUARE, "SQUARE"}};
	};

	const std::map<std::string, int> string_to_cap_items = create_string_to_cap_items();
	const std::map<int, std::string> cap_items_to_string = create_cap_items_to_string();

	cap_items_enum caps() {
		STRING_TYPE_GETTER("caps", static_cast<cap_items_enum>(string_to_cap_items.at(resstr)))
	}

	void caps(cap_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "caps", cap_items_to_string.at(value))
	}

	int dash1() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dash1")
	}

	void dash1(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dash1", value)
	}

	int gap1() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gap1")
	}

	void gap1(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gap1", value)
	}

	int dash2() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dash2")
	}

	void dash2(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dash2", value)
	}

	int gap2() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gap2")
	}

	void gap2(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gap2", value)
	}

	int dash3() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dash3")
	}

	void dash3(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dash3", value)
	}

	int gap3() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gap3")
	}

	void gap3(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gap3", value)
	}

	bool use_texture() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_texture")
	}

	void use_texture(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_texture", value)
	}

	float texture_spacing() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "texture_spacing")
	}

	void texture_spacing(float value) {
		PRIMITIVE_TYPES_SETTER("f", "texture_spacing", value)
	}

	NodeTree node_tree();

	bool use_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_nodes")
	}

	void use_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_nodes", value)
	}
};

class LineStyleTextureSlot : public TextureSlot {
public:
	LineStyleTextureSlot(PyObject* pyobj) : TextureSlot(pyobj) {}
	LineStyleTextureSlot() : TextureSlot(0) { }

	enum prop_x_mapping_items_enum {
		prop_x_mapping_items_NONE = 0,	
		prop_x_mapping_items_X = 1,	
		prop_x_mapping_items_Y = 2,	
		prop_x_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_x_mapping_items() {
		return {{"NONE", prop_x_mapping_items_NONE}, {"X", prop_x_mapping_items_X}, {"Y", prop_x_mapping_items_Y}, {"Z", prop_x_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_x_mapping_items_to_string() {
		return {{prop_x_mapping_items_NONE, "NONE"}, {prop_x_mapping_items_X, "X"}, {prop_x_mapping_items_Y, "Y"}, {prop_x_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_x_mapping_items = create_string_to_prop_x_mapping_items();
	const std::map<int, std::string> prop_x_mapping_items_to_string = create_prop_x_mapping_items_to_string();

	prop_x_mapping_items_enum mapping_x() {
		STRING_TYPE_GETTER("mapping_x", static_cast<prop_x_mapping_items_enum>(string_to_prop_x_mapping_items.at(resstr)))
	}

	void mapping_x(prop_x_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_x", prop_x_mapping_items_to_string.at(value))
	}

	enum prop_y_mapping_items_enum {
		prop_y_mapping_items_NONE = 0,	
		prop_y_mapping_items_X = 1,	
		prop_y_mapping_items_Y = 2,	
		prop_y_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_y_mapping_items() {
		return {{"NONE", prop_y_mapping_items_NONE}, {"X", prop_y_mapping_items_X}, {"Y", prop_y_mapping_items_Y}, {"Z", prop_y_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_y_mapping_items_to_string() {
		return {{prop_y_mapping_items_NONE, "NONE"}, {prop_y_mapping_items_X, "X"}, {prop_y_mapping_items_Y, "Y"}, {prop_y_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_y_mapping_items = create_string_to_prop_y_mapping_items();
	const std::map<int, std::string> prop_y_mapping_items_to_string = create_prop_y_mapping_items_to_string();

	prop_y_mapping_items_enum mapping_y() {
		STRING_TYPE_GETTER("mapping_y", static_cast<prop_y_mapping_items_enum>(string_to_prop_y_mapping_items.at(resstr)))
	}

	void mapping_y(prop_y_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_y", prop_y_mapping_items_to_string.at(value))
	}

	enum prop_z_mapping_items_enum {
		prop_z_mapping_items_NONE = 0,	
		prop_z_mapping_items_X = 1,	
		prop_z_mapping_items_Y = 2,	
		prop_z_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_z_mapping_items() {
		return {{"NONE", prop_z_mapping_items_NONE}, {"X", prop_z_mapping_items_X}, {"Y", prop_z_mapping_items_Y}, {"Z", prop_z_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_z_mapping_items_to_string() {
		return {{prop_z_mapping_items_NONE, "NONE"}, {prop_z_mapping_items_X, "X"}, {prop_z_mapping_items_Y, "Y"}, {prop_z_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_z_mapping_items = create_string_to_prop_z_mapping_items();
	const std::map<int, std::string> prop_z_mapping_items_to_string = create_prop_z_mapping_items_to_string();

	prop_z_mapping_items_enum mapping_z() {
		STRING_TYPE_GETTER("mapping_z", static_cast<prop_z_mapping_items_enum>(string_to_prop_z_mapping_items.at(resstr)))
	}

	void mapping_z(prop_z_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_z", prop_z_mapping_items_to_string.at(value))
	}

	enum prop_mapping_items_enum {
		prop_mapping_items_FLAT = 0,	
		prop_mapping_items_CUBE = 1,	
		prop_mapping_items_TUBE = 2,	
		prop_mapping_items_SPHERE = 3	
	};

	std::map<std::string, int> create_string_to_prop_mapping_items() {
		return {{"FLAT", prop_mapping_items_FLAT}, {"CUBE", prop_mapping_items_CUBE}, {"TUBE", prop_mapping_items_TUBE}, {"SPHERE", prop_mapping_items_SPHERE}};
	};

	std::map<int, std::string> create_prop_mapping_items_to_string() {
		return {{prop_mapping_items_FLAT, "FLAT"}, {prop_mapping_items_CUBE, "CUBE"}, {prop_mapping_items_TUBE, "TUBE"}, {prop_mapping_items_SPHERE, "SPHERE"}};
	};

	const std::map<std::string, int> string_to_prop_mapping_items = create_string_to_prop_mapping_items();
	const std::map<int, std::string> prop_mapping_items_to_string = create_prop_mapping_items_to_string();

	prop_mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<prop_mapping_items_enum>(string_to_prop_mapping_items.at(resstr)))
	}

	void mapping(prop_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", prop_mapping_items_to_string.at(value))
	}

	bool use_map_color_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_color_diffuse")
	}

	void use_map_color_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_color_diffuse", value)
	}

	bool use_map_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_alpha")
	}

	void use_map_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_alpha", value)
	}

	bool use_tips() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tips")
	}

	void use_tips(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tips", value)
	}

	enum texco_items_enum {
		texco_items_WINDOW = 1024,	
		texco_items_GLOBAL = 8,	
		texco_items_ALONG_STROKE = 16,	
		texco_items_ORCO = 1	
	};

	std::map<std::string, int> create_string_to_texco_items() {
		return {{"WINDOW", texco_items_WINDOW}, {"GLOBAL", texco_items_GLOBAL}, {"ALONG_STROKE", texco_items_ALONG_STROKE}, {"ORCO", texco_items_ORCO}};
	};

	std::map<int, std::string> create_texco_items_to_string() {
		return {{texco_items_WINDOW, "WINDOW"}, {texco_items_GLOBAL, "GLOBAL"}, {texco_items_ALONG_STROKE, "ALONG_STROKE"}, {texco_items_ORCO, "ORCO"}};
	};

	const std::map<std::string, int> string_to_texco_items = create_string_to_texco_items();
	const std::map<int, std::string> texco_items_to_string = create_texco_items_to_string();

	texco_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<texco_items_enum>(string_to_texco_items.at(resstr)))
	}

	void texture_coords(texco_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", texco_items_to_string.at(value))
	}

	float alpha_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha_factor")
	}

	void alpha_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha_factor", value)
	}

	float diffuse_color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_color_factor")
	}

	void diffuse_color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_color_factor", value)
	}
};

class BlendData : public pyUniplug {
public:
	BlendData(PyObject* pyobj) : pyUniplug(pyobj) {}
	BlendData() : pyUniplug(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool is_dirty() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_dirty")
	}

	void is_dirty(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_dirty", value)
	}

	bool is_saved() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_saved")
	}

	void is_saved(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_saved", value)
	}

	bool use_autopack() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_autopack")
	}

	void use_autopack(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_autopack", value)
	}

	std::array<int, 3> version() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "version", 3)
	}

	void version(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "version", 3)
	}

	std::map<std::string, Camera> cameras() {
		MAP_TYPE_GETTER("cameras", Camera)
	}

	std::map<std::string, Scene> scenes();

	std::map<std::string, Object> objects();

	std::map<std::string, Material> materials();

	std::map<std::string, NodeTree> node_groups();

	std::map<std::string, Mesh> meshes();

	std::map<std::string, Lamp> lamps() {
		MAP_TYPE_GETTER("lamps", Lamp)
	}

	std::map<std::string, Library> libraries() {
		MAP_TYPE_GETTER("libraries", Library)
	}

	std::map<std::string, Screen> screens();

	std::map<std::string, WindowManager> window_managers();

	std::map<std::string, Image> images() {
		MAP_TYPE_GETTER("images", Image)
	}

	std::map<std::string, Lattice> lattices() {
		MAP_TYPE_GETTER("lattices", Lattice)
	}

	std::map<std::string, Curve> curves() {
		MAP_TYPE_GETTER("curves", Curve)
	}

	std::map<std::string, MetaBall> metaballs();

	std::map<std::string, VectorFont> fonts();

	std::map<std::string, Texture> textures() {
		MAP_TYPE_GETTER("textures", Texture)
	}

	std::map<std::string, Brush> brushes() {
		MAP_TYPE_GETTER("brushes", Brush)
	}

	std::map<std::string, World> worlds();

	std::map<std::string, Group> groups() {
		MAP_TYPE_GETTER("groups", Group)
	}

	std::map<std::string, Key> shape_keys() {
		MAP_TYPE_GETTER("shape_keys", Key)
	}

	std::map<std::string, ID> scripts() {
		MAP_TYPE_GETTER("scripts", ID)
	}

	std::map<std::string, Text> texts();

	std::map<std::string, Speaker> speakers();

	std::map<std::string, Sound> sounds();

	std::map<std::string, Armature> armatures() {
		MAP_TYPE_GETTER("armatures", Armature)
	}

	std::map<std::string, Action> actions() {
		MAP_TYPE_GETTER("actions", Action)
	}

	std::map<std::string, ParticleSettings> particles();

	std::map<std::string, Palette> palettes();

	std::map<std::string, GreasePencil> grease_pencil() {
		MAP_TYPE_GETTER("grease_pencil", GreasePencil)
	}

	std::map<std::string, MovieClip> movieclips();

	std::map<std::string, Mask> masks();

	std::map<std::string, FreestyleLineStyle> linestyles() {
		MAP_TYPE_GETTER("linestyles", FreestyleLineStyle)
	}
};

class Material : public ID {
public:
	Material(PyObject* pyobj) : ID(pyobj) {}
	Material() : ID(0) { }

	enum prop_type_items_enum {
		prop_type_items_SURFACE = 0,	
		prop_type_items_WIRE = 3,	
		prop_type_items_VOLUME = 2,	
		prop_type_items_HALO = 1	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"SURFACE", prop_type_items_SURFACE}, {"WIRE", prop_type_items_WIRE}, {"VOLUME", prop_type_items_VOLUME}, {"HALO", prop_type_items_HALO}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_SURFACE, "SURFACE"}, {prop_type_items_WIRE, "WIRE"}, {prop_type_items_VOLUME, "VOLUME"}, {prop_type_items_HALO, "HALO"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	bool use_transparency() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_transparency")
	}

	void use_transparency(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_transparency", value)
	}

	enum transparency_items_enum {
		transparency_items_MASK = 0,	
		transparency_items_Z_TRANSPARENCY = 64,	
		transparency_items_RAYTRACE = 131072	
	};

	std::map<std::string, int> create_string_to_transparency_items() {
		return {{"MASK", transparency_items_MASK}, {"Z_TRANSPARENCY", transparency_items_Z_TRANSPARENCY}, {"RAYTRACE", transparency_items_RAYTRACE}};
	};

	std::map<int, std::string> create_transparency_items_to_string() {
		return {{transparency_items_MASK, "MASK"}, {transparency_items_Z_TRANSPARENCY, "Z_TRANSPARENCY"}, {transparency_items_RAYTRACE, "RAYTRACE"}};
	};

	const std::map<std::string, int> string_to_transparency_items = create_string_to_transparency_items();
	const std::map<int, std::string> transparency_items_to_string = create_transparency_items_to_string();

	transparency_items_enum transparency_method() {
		STRING_TYPE_GETTER("transparency_method", static_cast<transparency_items_enum>(string_to_transparency_items.at(resstr)))
	}

	void transparency_method(transparency_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "transparency_method", transparency_items_to_string.at(value))
	}

	enum preview_type_items_enum {
		preview_type_items_FLAT = 0,	
		preview_type_items_SPHERE = 1,	
		preview_type_items_CUBE = 2,	
		preview_type_items_MONKEY = 3,	
		preview_type_items_HAIR = 10,	
		preview_type_items_SPHERE_A = 4	
	};

	std::map<std::string, int> create_string_to_preview_type_items() {
		return {{"FLAT", preview_type_items_FLAT}, {"SPHERE", preview_type_items_SPHERE}, {"CUBE", preview_type_items_CUBE}, {"MONKEY", preview_type_items_MONKEY}, {"HAIR", preview_type_items_HAIR}, {"SPHERE_A", preview_type_items_SPHERE_A}};
	};

	std::map<int, std::string> create_preview_type_items_to_string() {
		return {{preview_type_items_FLAT, "FLAT"}, {preview_type_items_SPHERE, "SPHERE"}, {preview_type_items_CUBE, "CUBE"}, {preview_type_items_MONKEY, "MONKEY"}, {preview_type_items_HAIR, "HAIR"}, {preview_type_items_SPHERE_A, "SPHERE_A"}};
	};

	const std::map<std::string, int> string_to_preview_type_items = create_string_to_preview_type_items();
	const std::map<int, std::string> preview_type_items_to_string = create_preview_type_items_to_string();

	preview_type_items_enum preview_render_type() {
		STRING_TYPE_GETTER("preview_render_type", static_cast<preview_type_items_enum>(string_to_preview_type_items.at(resstr)))
	}

	void preview_render_type(preview_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "preview_render_type", preview_type_items_to_string.at(value))
	}

	float ambient() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ambient")
	}

	void ambient(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ambient", value)
	}

	float emit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "emit")
	}

	void emit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "emit", value)
	}

	float translucency() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "translucency")
	}

	void translucency(float value) {
		PRIMITIVE_TYPES_SETTER("f", "translucency", value)
	}

	bool use_cubic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cubic")
	}

	void use_cubic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cubic", value)
	}

	bool use_object_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_object_color")
	}

	void use_object_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_object_color", value)
	}

	float shadow_ray_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_ray_bias")
	}

	void shadow_ray_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_ray_bias", value)
	}

	float shadow_buffer_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_buffer_bias")
	}

	void shadow_buffer_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_buffer_bias", value)
	}

	float shadow_cast_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_cast_alpha")
	}

	void shadow_cast_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_cast_alpha", value)
	}

	Group light_group() {
		CLASS_TYPES_GETTER(Group, "light_group")
	}

	int pass_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "pass_index")
	}

	void pass_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "pass_index", value)
	}

	bool use_light_group_exclusive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_light_group_exclusive")
	}

	void use_light_group_exclusive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_light_group_exclusive", value)
	}

	bool use_light_group_local() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_light_group_local")
	}

	void use_light_group_local(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_light_group_local", value)
	}

	bool use_raytrace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_raytrace")
	}

	void use_raytrace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_raytrace", value)
	}

	bool use_shadows() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadows")
	}

	void use_shadows(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadows", value)
	}

	bool use_shadeless() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadeless")
	}

	void use_shadeless(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadeless", value)
	}

	bool use_vertex_color_light() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_vertex_color_light")
	}

	void use_vertex_color_light(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_vertex_color_light", value)
	}

	bool use_vertex_color_paint() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_vertex_color_paint")
	}

	void use_vertex_color_paint(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_vertex_color_paint", value)
	}

	bool invert_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_z")
	}

	void invert_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_z", value)
	}

	float offset_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_z")
	}

	void offset_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_z", value)
	}

	bool use_sky() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sky")
	}

	void use_sky(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sky", value)
	}

	bool use_only_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_shadow")
	}

	void use_only_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_shadow", value)
	}

	enum prop_shadows_only_items_enum {
		prop_shadows_only_items_SHADOW_ONLY_OLD = 0,	
		prop_shadows_only_items_SHADOW_ONLY = 1,	
		prop_shadows_only_items_SHADOW_ONLY_SHADED = 2	
	};

	std::map<std::string, int> create_string_to_prop_shadows_only_items() {
		return {{"SHADOW_ONLY_OLD", prop_shadows_only_items_SHADOW_ONLY_OLD}, {"SHADOW_ONLY", prop_shadows_only_items_SHADOW_ONLY}, {"SHADOW_ONLY_SHADED", prop_shadows_only_items_SHADOW_ONLY_SHADED}};
	};

	std::map<int, std::string> create_prop_shadows_only_items_to_string() {
		return {{prop_shadows_only_items_SHADOW_ONLY_OLD, "SHADOW_ONLY_OLD"}, {prop_shadows_only_items_SHADOW_ONLY, "SHADOW_ONLY"}, {prop_shadows_only_items_SHADOW_ONLY_SHADED, "SHADOW_ONLY_SHADED"}};
	};

	const std::map<std::string, int> string_to_prop_shadows_only_items = create_string_to_prop_shadows_only_items();
	const std::map<int, std::string> prop_shadows_only_items_to_string = create_prop_shadows_only_items_to_string();

	prop_shadows_only_items_enum shadow_only_type() {
		STRING_TYPE_GETTER("shadow_only_type", static_cast<prop_shadows_only_items_enum>(string_to_prop_shadows_only_items.at(resstr)))
	}

	void shadow_only_type(prop_shadows_only_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shadow_only_type", prop_shadows_only_items_to_string.at(value))
	}

	bool use_face_texture() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_face_texture")
	}

	void use_face_texture(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_face_texture", value)
	}

	bool use_face_texture_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_face_texture_alpha")
	}

	void use_face_texture_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_face_texture_alpha", value)
	}

	bool use_cast_shadows() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cast_shadows")
	}

	void use_cast_shadows(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cast_shadows", value)
	}

	bool use_cast_shadows_only() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cast_shadows_only")
	}

	void use_cast_shadows_only(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cast_shadows_only", value)
	}

	bool use_mist() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mist")
	}

	void use_mist(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mist", value)
	}

	bool use_transparent_shadows() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_transparent_shadows")
	}

	void use_transparent_shadows(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_transparent_shadows", value)
	}

	bool use_ray_shadow_bias() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ray_shadow_bias")
	}

	void use_ray_shadow_bias(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ray_shadow_bias", value)
	}

	bool use_full_oversampling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_full_oversampling")
	}

	void use_full_oversampling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_full_oversampling", value)
	}

	bool use_cast_buffer_shadows() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cast_buffer_shadows")
	}

	void use_cast_buffer_shadows(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cast_buffer_shadows", value)
	}

	bool use_cast_approximate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cast_approximate")
	}

	void use_cast_approximate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cast_approximate", value)
	}

	bool use_tangent_shading() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tangent_shading")
	}

	void use_tangent_shading(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tangent_shading", value)
	}

	bool use_uv_project() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_uv_project")
	}

	void use_uv_project(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_uv_project", value)
	}

	MaterialRaytraceMirror raytrace_mirror();

	MaterialRaytraceTransparency raytrace_transparency();

	MaterialVolume volume();

	MaterialHalo halo();

	MaterialSubsurfaceScattering subsurface_scattering();

	MaterialStrand strand();

	MaterialPhysics physics();

	MaterialGameSettings game_settings();

	NodeTree node_tree();

	bool use_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_nodes")
	}

	void use_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_nodes", value)
	}

	Material active_node_material() {
		CLASS_TYPES_GETTER(Material, "active_node_material")
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	std::map<std::string, MaterialTextureSlot> texture_slots();

	Texture active_texture() {
		CLASS_TYPES_GETTER(Texture, "active_texture")
	}

	int active_texture_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_texture_index")
	}

	void active_texture_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_texture_index", value)
	}

	std::map<std::string, Image> texture_paint_images() {
		MAP_TYPE_GETTER("texture_paint_images", Image)
	}

	std::map<std::string, TexPaintSlot> texture_paint_slots();

	int paint_active_slot() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "paint_active_slot")
	}

	void paint_active_slot(int value) {
		PRIMITIVE_TYPES_SETTER("i", "paint_active_slot", value)
	}

	int paint_clone_slot() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "paint_clone_slot")
	}

	void paint_clone_slot(int value) {
		PRIMITIVE_TYPES_SETTER("i", "paint_clone_slot", value)
	}

	std::array<bool, 18> use_textures() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "use_textures", 18)
	}

	void use_textures(bool values[18]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "use_textures", 18)
	}

	VFLOAT3 diffuse_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "diffuse_color", 3)
	}

	void diffuse_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "diffuse_color", 3)
	}

	VFLOAT3 specular_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "specular_color", 3)
	}

	void specular_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "specular_color", 3)
	}

	VFLOAT3 mirror_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "mirror_color", 3)
	}

	void mirror_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "mirror_color", 3)
	}

	float alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha")
	}

	void alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha", value)
	}

	float specular_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_alpha")
	}

	void specular_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_alpha", value)
	}

	bool use_diffuse_ramp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_diffuse_ramp")
	}

	void use_diffuse_ramp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_diffuse_ramp", value)
	}

	ColorRamp diffuse_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "diffuse_ramp")
	}

	bool use_specular_ramp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_specular_ramp")
	}

	void use_specular_ramp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_specular_ramp", value)
	}

	ColorRamp specular_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "specular_ramp")
	}

	enum ramp_blend_items_enum {
		ramp_blend_items_MIX = 0,	
		ramp_blend_items_ADD = 1,	
		ramp_blend_items_MULTIPLY = 2,	
		ramp_blend_items_SUBTRACT = 3,	
		ramp_blend_items_SCREEN = 4,	
		ramp_blend_items_DIVIDE = 5,	
		ramp_blend_items_DIFFERENCE = 6,	
		ramp_blend_items_DARKEN = 7,	
		ramp_blend_items_LIGHTEN = 8,	
		ramp_blend_items_OVERLAY = 9,	
		ramp_blend_items_DODGE = 10,	
		ramp_blend_items_BURN = 11,	
		ramp_blend_items_HUE = 12,	
		ramp_blend_items_SATURATION = 13,	
		ramp_blend_items_VALUE = 14,	
		ramp_blend_items_COLOR = 15,	
		ramp_blend_items_SOFT_LIGHT = 16,	
		ramp_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_ramp_blend_items() {
		return {{"MIX", ramp_blend_items_MIX}, {"ADD", ramp_blend_items_ADD}, {"MULTIPLY", ramp_blend_items_MULTIPLY}, {"SUBTRACT", ramp_blend_items_SUBTRACT}, {"SCREEN", ramp_blend_items_SCREEN}, {"DIVIDE", ramp_blend_items_DIVIDE}, {"DIFFERENCE", ramp_blend_items_DIFFERENCE}, {"DARKEN", ramp_blend_items_DARKEN}, {"LIGHTEN", ramp_blend_items_LIGHTEN}, {"OVERLAY", ramp_blend_items_OVERLAY}, {"DODGE", ramp_blend_items_DODGE}, {"BURN", ramp_blend_items_BURN}, {"HUE", ramp_blend_items_HUE}, {"SATURATION", ramp_blend_items_SATURATION}, {"VALUE", ramp_blend_items_VALUE}, {"COLOR", ramp_blend_items_COLOR}, {"SOFT_LIGHT", ramp_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", ramp_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_ramp_blend_items_to_string() {
		return {{ramp_blend_items_MIX, "MIX"}, {ramp_blend_items_ADD, "ADD"}, {ramp_blend_items_MULTIPLY, "MULTIPLY"}, {ramp_blend_items_SUBTRACT, "SUBTRACT"}, {ramp_blend_items_SCREEN, "SCREEN"}, {ramp_blend_items_DIVIDE, "DIVIDE"}, {ramp_blend_items_DIFFERENCE, "DIFFERENCE"}, {ramp_blend_items_DARKEN, "DARKEN"}, {ramp_blend_items_LIGHTEN, "LIGHTEN"}, {ramp_blend_items_OVERLAY, "OVERLAY"}, {ramp_blend_items_DODGE, "DODGE"}, {ramp_blend_items_BURN, "BURN"}, {ramp_blend_items_HUE, "HUE"}, {ramp_blend_items_SATURATION, "SATURATION"}, {ramp_blend_items_VALUE, "VALUE"}, {ramp_blend_items_COLOR, "COLOR"}, {ramp_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {ramp_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_ramp_blend_items = create_string_to_ramp_blend_items();
	const std::map<int, std::string> ramp_blend_items_to_string = create_ramp_blend_items_to_string();

	ramp_blend_items_enum diffuse_ramp_blend() {
		STRING_TYPE_GETTER("diffuse_ramp_blend", static_cast<ramp_blend_items_enum>(string_to_ramp_blend_items.at(resstr)))
	}

	void diffuse_ramp_blend(ramp_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "diffuse_ramp_blend", ramp_blend_items_to_string.at(value))
	}

	ramp_blend_items_enum specular_ramp_blend() {
		STRING_TYPE_GETTER("specular_ramp_blend", static_cast<ramp_blend_items_enum>(string_to_ramp_blend_items.at(resstr)))
	}

	void specular_ramp_blend(ramp_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "specular_ramp_blend", ramp_blend_items_to_string.at(value))
	}

	enum prop_ramp_input_items_enum {
		prop_ramp_input_items_SHADER = 0,	
		prop_ramp_input_items_ENERGY = 1,	
		prop_ramp_input_items_NORMAL = 2,	
		prop_ramp_input_items_RESULT = 3	
	};

	std::map<std::string, int> create_string_to_prop_ramp_input_items() {
		return {{"SHADER", prop_ramp_input_items_SHADER}, {"ENERGY", prop_ramp_input_items_ENERGY}, {"NORMAL", prop_ramp_input_items_NORMAL}, {"RESULT", prop_ramp_input_items_RESULT}};
	};

	std::map<int, std::string> create_prop_ramp_input_items_to_string() {
		return {{prop_ramp_input_items_SHADER, "SHADER"}, {prop_ramp_input_items_ENERGY, "ENERGY"}, {prop_ramp_input_items_NORMAL, "NORMAL"}, {prop_ramp_input_items_RESULT, "RESULT"}};
	};

	const std::map<std::string, int> string_to_prop_ramp_input_items = create_string_to_prop_ramp_input_items();
	const std::map<int, std::string> prop_ramp_input_items_to_string = create_prop_ramp_input_items_to_string();

	prop_ramp_input_items_enum diffuse_ramp_input() {
		STRING_TYPE_GETTER("diffuse_ramp_input", static_cast<prop_ramp_input_items_enum>(string_to_prop_ramp_input_items.at(resstr)))
	}

	void diffuse_ramp_input(prop_ramp_input_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "diffuse_ramp_input", prop_ramp_input_items_to_string.at(value))
	}

	prop_ramp_input_items_enum specular_ramp_input() {
		STRING_TYPE_GETTER("specular_ramp_input", static_cast<prop_ramp_input_items_enum>(string_to_prop_ramp_input_items.at(resstr)))
	}

	void specular_ramp_input(prop_ramp_input_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "specular_ramp_input", prop_ramp_input_items_to_string.at(value))
	}

	float diffuse_ramp_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_ramp_factor")
	}

	void diffuse_ramp_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_ramp_factor", value)
	}

	float specular_ramp_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_ramp_factor")
	}

	void specular_ramp_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_ramp_factor", value)
	}

	VFLOAT4 line_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "line_color", 4)
	}

	void line_color(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "line_color", 4)
	}

	int line_priority() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "line_priority")
	}

	void line_priority(int value) {
		PRIMITIVE_TYPES_SETTER("i", "line_priority", value)
	}

	enum prop_diff_shader_items_enum {
		prop_diff_shader_items_LAMBERT = 0,	
		prop_diff_shader_items_OREN_NAYAR = 1,	
		prop_diff_shader_items_TOON = 2,	
		prop_diff_shader_items_MINNAERT = 3,	
		prop_diff_shader_items_FRESNEL = 4	
	};

	std::map<std::string, int> create_string_to_prop_diff_shader_items() {
		return {{"LAMBERT", prop_diff_shader_items_LAMBERT}, {"OREN_NAYAR", prop_diff_shader_items_OREN_NAYAR}, {"TOON", prop_diff_shader_items_TOON}, {"MINNAERT", prop_diff_shader_items_MINNAERT}, {"FRESNEL", prop_diff_shader_items_FRESNEL}};
	};

	std::map<int, std::string> create_prop_diff_shader_items_to_string() {
		return {{prop_diff_shader_items_LAMBERT, "LAMBERT"}, {prop_diff_shader_items_OREN_NAYAR, "OREN_NAYAR"}, {prop_diff_shader_items_TOON, "TOON"}, {prop_diff_shader_items_MINNAERT, "MINNAERT"}, {prop_diff_shader_items_FRESNEL, "FRESNEL"}};
	};

	const std::map<std::string, int> string_to_prop_diff_shader_items = create_string_to_prop_diff_shader_items();
	const std::map<int, std::string> prop_diff_shader_items_to_string = create_prop_diff_shader_items_to_string();

	prop_diff_shader_items_enum diffuse_shader() {
		STRING_TYPE_GETTER("diffuse_shader", static_cast<prop_diff_shader_items_enum>(string_to_prop_diff_shader_items.at(resstr)))
	}

	void diffuse_shader(prop_diff_shader_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "diffuse_shader", prop_diff_shader_items_to_string.at(value))
	}

	float diffuse_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_intensity")
	}

	void diffuse_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_intensity", value)
	}

	float roughness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness")
	}

	void roughness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness", value)
	}

	float diffuse_toon_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_toon_size")
	}

	void diffuse_toon_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_toon_size", value)
	}

	float diffuse_toon_smooth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_toon_smooth")
	}

	void diffuse_toon_smooth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_toon_smooth", value)
	}

	float diffuse_fresnel() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_fresnel")
	}

	void diffuse_fresnel(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_fresnel", value)
	}

	float diffuse_fresnel_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_fresnel_factor")
	}

	void diffuse_fresnel_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_fresnel_factor", value)
	}

	float darkness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "darkness")
	}

	void darkness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "darkness", value)
	}

	enum prop_specular_shader_items_enum {
		prop_specular_shader_items_COOKTORR = 0,	
		prop_specular_shader_items_PHONG = 1,	
		prop_specular_shader_items_BLINN = 2,	
		prop_specular_shader_items_TOON = 3,	
		prop_specular_shader_items_WARDISO = 4	
	};

	std::map<std::string, int> create_string_to_prop_specular_shader_items() {
		return {{"COOKTORR", prop_specular_shader_items_COOKTORR}, {"PHONG", prop_specular_shader_items_PHONG}, {"BLINN", prop_specular_shader_items_BLINN}, {"TOON", prop_specular_shader_items_TOON}, {"WARDISO", prop_specular_shader_items_WARDISO}};
	};

	std::map<int, std::string> create_prop_specular_shader_items_to_string() {
		return {{prop_specular_shader_items_COOKTORR, "COOKTORR"}, {prop_specular_shader_items_PHONG, "PHONG"}, {prop_specular_shader_items_BLINN, "BLINN"}, {prop_specular_shader_items_TOON, "TOON"}, {prop_specular_shader_items_WARDISO, "WARDISO"}};
	};

	const std::map<std::string, int> string_to_prop_specular_shader_items = create_string_to_prop_specular_shader_items();
	const std::map<int, std::string> prop_specular_shader_items_to_string = create_prop_specular_shader_items_to_string();

	prop_specular_shader_items_enum specular_shader() {
		STRING_TYPE_GETTER("specular_shader", static_cast<prop_specular_shader_items_enum>(string_to_prop_specular_shader_items.at(resstr)))
	}

	void specular_shader(prop_specular_shader_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "specular_shader", prop_specular_shader_items_to_string.at(value))
	}

	float specular_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_intensity")
	}

	void specular_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_intensity", value)
	}

	int specular_hardness() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "specular_hardness")
	}

	void specular_hardness(int value) {
		PRIMITIVE_TYPES_SETTER("i", "specular_hardness", value)
	}

	float specular_ior() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_ior")
	}

	void specular_ior(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_ior", value)
	}

	float specular_toon_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_toon_size")
	}

	void specular_toon_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_toon_size", value)
	}

	float specular_toon_smooth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_toon_smooth")
	}

	void specular_toon_smooth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_toon_smooth", value)
	}

	float specular_slope() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_slope")
	}

	void specular_slope(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_slope", value)
	}
};

class TexPaintSlot : public pyUniplug {
public:
	TexPaintSlot(PyObject* pyobj) : pyUniplug(pyobj) {}
	TexPaintSlot() : pyUniplug(0) { }

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}
};

class MaterialRaytraceMirror : public pyUniplug {
public:
	MaterialRaytraceMirror(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialRaytraceMirror() : pyUniplug(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	float reflect_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "reflect_factor")
	}

	void reflect_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "reflect_factor", value)
	}

	float fresnel() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fresnel")
	}

	void fresnel(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fresnel", value)
	}

	float fresnel_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fresnel_factor")
	}

	void fresnel_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fresnel_factor", value)
	}

	float gloss_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gloss_factor")
	}

	void gloss_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gloss_factor", value)
	}

	float gloss_anisotropic() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gloss_anisotropic")
	}

	void gloss_anisotropic(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gloss_anisotropic", value)
	}

	int gloss_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gloss_samples")
	}

	void gloss_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gloss_samples", value)
	}

	float gloss_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gloss_threshold")
	}

	void gloss_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gloss_threshold", value)
	}

	int depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "depth")
	}

	void depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "depth", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	enum prop_fadeto_mir_items_enum {
		prop_fadeto_mir_items_FADE_TO_SKY = 0,	
		prop_fadeto_mir_items_FADE_TO_MATERIAL = 1	
	};

	std::map<std::string, int> create_string_to_prop_fadeto_mir_items() {
		return {{"FADE_TO_SKY", prop_fadeto_mir_items_FADE_TO_SKY}, {"FADE_TO_MATERIAL", prop_fadeto_mir_items_FADE_TO_MATERIAL}};
	};

	std::map<int, std::string> create_prop_fadeto_mir_items_to_string() {
		return {{prop_fadeto_mir_items_FADE_TO_SKY, "FADE_TO_SKY"}, {prop_fadeto_mir_items_FADE_TO_MATERIAL, "FADE_TO_MATERIAL"}};
	};

	const std::map<std::string, int> string_to_prop_fadeto_mir_items = create_string_to_prop_fadeto_mir_items();
	const std::map<int, std::string> prop_fadeto_mir_items_to_string = create_prop_fadeto_mir_items_to_string();

	prop_fadeto_mir_items_enum fade_to() {
		STRING_TYPE_GETTER("fade_to", static_cast<prop_fadeto_mir_items_enum>(string_to_prop_fadeto_mir_items.at(resstr)))
	}

	void fade_to(prop_fadeto_mir_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "fade_to", prop_fadeto_mir_items_to_string.at(value))
	}
};

class MaterialRaytraceTransparency : public pyUniplug {
public:
	MaterialRaytraceTransparency(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialRaytraceTransparency() : pyUniplug(0) { }

	float ior() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ior")
	}

	void ior(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ior", value)
	}

	float fresnel() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fresnel")
	}

	void fresnel(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fresnel", value)
	}

	float fresnel_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fresnel_factor")
	}

	void fresnel_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fresnel_factor", value)
	}

	float gloss_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gloss_factor")
	}

	void gloss_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gloss_factor", value)
	}

	int gloss_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gloss_samples")
	}

	void gloss_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gloss_samples", value)
	}

	float gloss_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gloss_threshold")
	}

	void gloss_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gloss_threshold", value)
	}

	int depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "depth")
	}

	void depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "depth", value)
	}

	float filter() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "filter")
	}

	void filter(float value) {
		PRIMITIVE_TYPES_SETTER("f", "filter", value)
	}

	float depth_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "depth_max")
	}

	void depth_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "depth_max", value)
	}

	float falloff() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff")
	}

	void falloff(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff", value)
	}
};

class MaterialVolume : public pyUniplug {
public:
	MaterialVolume(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialVolume() : pyUniplug(0) { }

	enum prop_stepsize_items_enum {
		prop_stepsize_items_RANDOMIZED = 0,	
		prop_stepsize_items_CONSTANT = 1	
	};

	std::map<std::string, int> create_string_to_prop_stepsize_items() {
		return {{"RANDOMIZED", prop_stepsize_items_RANDOMIZED}, {"CONSTANT", prop_stepsize_items_CONSTANT}};
	};

	std::map<int, std::string> create_prop_stepsize_items_to_string() {
		return {{prop_stepsize_items_RANDOMIZED, "RANDOMIZED"}, {prop_stepsize_items_CONSTANT, "CONSTANT"}};
	};

	const std::map<std::string, int> string_to_prop_stepsize_items = create_string_to_prop_stepsize_items();
	const std::map<int, std::string> prop_stepsize_items_to_string = create_prop_stepsize_items_to_string();

	prop_stepsize_items_enum step_method() {
		STRING_TYPE_GETTER("step_method", static_cast<prop_stepsize_items_enum>(string_to_prop_stepsize_items.at(resstr)))
	}

	void step_method(prop_stepsize_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "step_method", prop_stepsize_items_to_string.at(value))
	}

	float step_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "step_size")
	}

	void step_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "step_size", value)
	}

	enum prop_lighting_items_enum {
		prop_lighting_items_SHADELESS = 0,	
		prop_lighting_items_SHADOWED = 2,	
		prop_lighting_items_SHADED = 1,	
		prop_lighting_items_MULTIPLE_SCATTERING = 3,	
		prop_lighting_items_SHADED_PLUS_MULTIPLE_SCATTERING = 4	
	};

	std::map<std::string, int> create_string_to_prop_lighting_items() {
		return {{"SHADELESS", prop_lighting_items_SHADELESS}, {"SHADOWED", prop_lighting_items_SHADOWED}, {"SHADED", prop_lighting_items_SHADED}, {"MULTIPLE_SCATTERING", prop_lighting_items_MULTIPLE_SCATTERING}, {"SHADED_PLUS_MULTIPLE_SCATTERING", prop_lighting_items_SHADED_PLUS_MULTIPLE_SCATTERING}};
	};

	std::map<int, std::string> create_prop_lighting_items_to_string() {
		return {{prop_lighting_items_SHADELESS, "SHADELESS"}, {prop_lighting_items_SHADOWED, "SHADOWED"}, {prop_lighting_items_SHADED, "SHADED"}, {prop_lighting_items_MULTIPLE_SCATTERING, "MULTIPLE_SCATTERING"}, {prop_lighting_items_SHADED_PLUS_MULTIPLE_SCATTERING, "SHADED_PLUS_MULTIPLE_SCATTERING"}};
	};

	const std::map<std::string, int> string_to_prop_lighting_items = create_string_to_prop_lighting_items();
	const std::map<int, std::string> prop_lighting_items_to_string = create_prop_lighting_items_to_string();

	prop_lighting_items_enum light_method() {
		STRING_TYPE_GETTER("light_method", static_cast<prop_lighting_items_enum>(string_to_prop_lighting_items.at(resstr)))
	}

	void light_method(prop_lighting_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "light_method", prop_lighting_items_to_string.at(value))
	}

	bool use_external_shadows() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_external_shadows")
	}

	void use_external_shadows(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_external_shadows", value)
	}

	bool use_light_cache() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_light_cache")
	}

	void use_light_cache(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_light_cache", value)
	}

	int cache_resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "cache_resolution")
	}

	void cache_resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "cache_resolution", value)
	}

	float ms_diffusion() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ms_diffusion")
	}

	void ms_diffusion(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ms_diffusion", value)
	}

	float ms_spread() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ms_spread")
	}

	void ms_spread(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ms_spread", value)
	}

	float ms_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ms_intensity")
	}

	void ms_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ms_intensity", value)
	}

	float depth_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "depth_threshold")
	}

	void depth_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "depth_threshold", value)
	}

	float density() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "density")
	}

	void density(float value) {
		PRIMITIVE_TYPES_SETTER("f", "density", value)
	}

	float density_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "density_scale")
	}

	void density_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "density_scale", value)
	}

	float scattering() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scattering")
	}

	void scattering(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scattering", value)
	}

	VFLOAT3 transmission_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "transmission_color", 3)
	}

	void transmission_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "transmission_color", 3)
	}

	VFLOAT3 reflection_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "reflection_color", 3)
	}

	void reflection_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "reflection_color", 3)
	}

	float reflection() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "reflection")
	}

	void reflection(float value) {
		PRIMITIVE_TYPES_SETTER("f", "reflection", value)
	}

	VFLOAT3 emission_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "emission_color", 3)
	}

	void emission_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "emission_color", 3)
	}

	float emission() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "emission")
	}

	void emission(float value) {
		PRIMITIVE_TYPES_SETTER("f", "emission", value)
	}

	float asymmetry() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "asymmetry")
	}

	void asymmetry(float value) {
		PRIMITIVE_TYPES_SETTER("f", "asymmetry", value)
	}
};

class MaterialHalo : public pyUniplug {
public:
	MaterialHalo(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialHalo() : pyUniplug(0) { }

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	int hardness() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "hardness")
	}

	void hardness(int value) {
		PRIMITIVE_TYPES_SETTER("i", "hardness", value)
	}

	float add() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "add")
	}

	void add(float value) {
		PRIMITIVE_TYPES_SETTER("f", "add", value)
	}

	int ring_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "ring_count")
	}

	void ring_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "ring_count", value)
	}

	int line_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "line_count")
	}

	void line_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "line_count", value)
	}

	int star_tip_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "star_tip_count")
	}

	void star_tip_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "star_tip_count", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}

	bool use_flare_mode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flare_mode")
	}

	void use_flare_mode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flare_mode", value)
	}

	float flare_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flare_size")
	}

	void flare_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flare_size", value)
	}

	float flare_subflare_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flare_subflare_size")
	}

	void flare_subflare_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flare_subflare_size", value)
	}

	float flare_boost() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flare_boost")
	}

	void flare_boost(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flare_boost", value)
	}

	int flare_seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "flare_seed")
	}

	void flare_seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "flare_seed", value)
	}

	int flare_subflare_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "flare_subflare_count")
	}

	void flare_subflare_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "flare_subflare_count", value)
	}

	bool use_ring() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ring")
	}

	void use_ring(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ring", value)
	}

	bool use_lines() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_lines")
	}

	void use_lines(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_lines", value)
	}

	bool use_star() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_star")
	}

	void use_star(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_star", value)
	}

	bool use_texture() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_texture")
	}

	void use_texture(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_texture", value)
	}

	bool use_vertex_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_vertex_normal")
	}

	void use_vertex_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_vertex_normal", value)
	}

	bool use_extreme_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_extreme_alpha")
	}

	void use_extreme_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_extreme_alpha", value)
	}

	bool use_shaded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shaded")
	}

	void use_shaded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shaded", value)
	}

	bool use_soft() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_soft")
	}

	void use_soft(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_soft", value)
	}
};

class MaterialSubsurfaceScattering : public pyUniplug {
public:
	MaterialSubsurfaceScattering(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialSubsurfaceScattering() : pyUniplug(0) { }

	VFLOAT3 radius() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "radius", 3)
	}

	void radius(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "radius", 3)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	float error_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "error_threshold")
	}

	void error_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "error_threshold", value)
	}

	float scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale")
	}

	void scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale", value)
	}

	float ior() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ior")
	}

	void ior(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ior", value)
	}

	float color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_factor")
	}

	void color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_factor", value)
	}

	float texture_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "texture_factor")
	}

	void texture_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "texture_factor", value)
	}

	float front() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "front")
	}

	void front(float value) {
		PRIMITIVE_TYPES_SETTER("f", "front", value)
	}

	float back() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "back")
	}

	void back(float value) {
		PRIMITIVE_TYPES_SETTER("f", "back", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}
};

class MaterialTextureSlot : public TextureSlot {
public:
	MaterialTextureSlot(PyObject* pyobj) : TextureSlot(pyobj) {}
	MaterialTextureSlot() : TextureSlot(0) { }

	enum prop_texture_coordinates_items_enum {
		prop_texture_coordinates_items_GLOBAL = 8,	
		prop_texture_coordinates_items_OBJECT = 32,	
		prop_texture_coordinates_items_UV = 16,	
		prop_texture_coordinates_items_ORCO = 1,	
		prop_texture_coordinates_items_STRAND = 8192,	
		prop_texture_coordinates_items_WINDOW = 1024,	
		prop_texture_coordinates_items_NORMAL = 4,	
		prop_texture_coordinates_items_REFLECTION = 2,	
		prop_texture_coordinates_items_STRESS = 16384,	
		prop_texture_coordinates_items_TANGENT = 4096	
	};

	std::map<std::string, int> create_string_to_prop_texture_coordinates_items() {
		return {{"GLOBAL", prop_texture_coordinates_items_GLOBAL}, {"OBJECT", prop_texture_coordinates_items_OBJECT}, {"UV", prop_texture_coordinates_items_UV}, {"ORCO", prop_texture_coordinates_items_ORCO}, {"STRAND", prop_texture_coordinates_items_STRAND}, {"WINDOW", prop_texture_coordinates_items_WINDOW}, {"NORMAL", prop_texture_coordinates_items_NORMAL}, {"REFLECTION", prop_texture_coordinates_items_REFLECTION}, {"STRESS", prop_texture_coordinates_items_STRESS}, {"TANGENT", prop_texture_coordinates_items_TANGENT}};
	};

	std::map<int, std::string> create_prop_texture_coordinates_items_to_string() {
		return {{prop_texture_coordinates_items_GLOBAL, "GLOBAL"}, {prop_texture_coordinates_items_OBJECT, "OBJECT"}, {prop_texture_coordinates_items_UV, "UV"}, {prop_texture_coordinates_items_ORCO, "ORCO"}, {prop_texture_coordinates_items_STRAND, "STRAND"}, {prop_texture_coordinates_items_WINDOW, "WINDOW"}, {prop_texture_coordinates_items_NORMAL, "NORMAL"}, {prop_texture_coordinates_items_REFLECTION, "REFLECTION"}, {prop_texture_coordinates_items_STRESS, "STRESS"}, {prop_texture_coordinates_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_prop_texture_coordinates_items = create_string_to_prop_texture_coordinates_items();
	const std::map<int, std::string> prop_texture_coordinates_items_to_string = create_prop_texture_coordinates_items_to_string();

	prop_texture_coordinates_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<prop_texture_coordinates_items_enum>(string_to_prop_texture_coordinates_items.at(resstr)))
	}

	void texture_coords(prop_texture_coordinates_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", prop_texture_coordinates_items_to_string.at(value))
	}

	Object object_value();

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	bool use_from_dupli() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_from_dupli")
	}

	void use_from_dupli(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_from_dupli", value)
	}

	bool use_map_to_bounds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_to_bounds")
	}

	void use_map_to_bounds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_to_bounds", value)
	}

	bool use_from_original() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_from_original")
	}

	void use_from_original(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_from_original", value)
	}

	bool use_map_color_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_color_diffuse")
	}

	void use_map_color_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_color_diffuse", value)
	}

	bool use_map_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_normal")
	}

	void use_map_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_normal", value)
	}

	bool use_map_color_spec() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_color_spec")
	}

	void use_map_color_spec(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_color_spec", value)
	}

	bool use_map_mirror() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_mirror")
	}

	void use_map_mirror(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_mirror", value)
	}

	bool use_map_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_diffuse")
	}

	void use_map_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_diffuse", value)
	}

	bool use_map_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_specular")
	}

	void use_map_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_specular", value)
	}

	bool use_map_ambient() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_ambient")
	}

	void use_map_ambient(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_ambient", value)
	}

	bool use_map_hardness() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_hardness")
	}

	void use_map_hardness(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_hardness", value)
	}

	bool use_map_raymir() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_raymir")
	}

	void use_map_raymir(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_raymir", value)
	}

	bool use_map_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_alpha")
	}

	void use_map_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_alpha", value)
	}

	bool use_map_emit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_emit")
	}

	void use_map_emit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_emit", value)
	}

	bool use_map_translucency() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_translucency")
	}

	void use_map_translucency(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_translucency", value)
	}

	bool use_map_displacement() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_displacement")
	}

	void use_map_displacement(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_displacement", value)
	}

	bool use_map_warp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_warp")
	}

	void use_map_warp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_warp", value)
	}

	enum prop_x_mapping_items_enum {
		prop_x_mapping_items_NONE = 0,	
		prop_x_mapping_items_X = 1,	
		prop_x_mapping_items_Y = 2,	
		prop_x_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_x_mapping_items() {
		return {{"NONE", prop_x_mapping_items_NONE}, {"X", prop_x_mapping_items_X}, {"Y", prop_x_mapping_items_Y}, {"Z", prop_x_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_x_mapping_items_to_string() {
		return {{prop_x_mapping_items_NONE, "NONE"}, {prop_x_mapping_items_X, "X"}, {prop_x_mapping_items_Y, "Y"}, {prop_x_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_x_mapping_items = create_string_to_prop_x_mapping_items();
	const std::map<int, std::string> prop_x_mapping_items_to_string = create_prop_x_mapping_items_to_string();

	prop_x_mapping_items_enum mapping_x() {
		STRING_TYPE_GETTER("mapping_x", static_cast<prop_x_mapping_items_enum>(string_to_prop_x_mapping_items.at(resstr)))
	}

	void mapping_x(prop_x_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_x", prop_x_mapping_items_to_string.at(value))
	}

	enum prop_y_mapping_items_enum {
		prop_y_mapping_items_NONE = 0,	
		prop_y_mapping_items_X = 1,	
		prop_y_mapping_items_Y = 2,	
		prop_y_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_y_mapping_items() {
		return {{"NONE", prop_y_mapping_items_NONE}, {"X", prop_y_mapping_items_X}, {"Y", prop_y_mapping_items_Y}, {"Z", prop_y_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_y_mapping_items_to_string() {
		return {{prop_y_mapping_items_NONE, "NONE"}, {prop_y_mapping_items_X, "X"}, {prop_y_mapping_items_Y, "Y"}, {prop_y_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_y_mapping_items = create_string_to_prop_y_mapping_items();
	const std::map<int, std::string> prop_y_mapping_items_to_string = create_prop_y_mapping_items_to_string();

	prop_y_mapping_items_enum mapping_y() {
		STRING_TYPE_GETTER("mapping_y", static_cast<prop_y_mapping_items_enum>(string_to_prop_y_mapping_items.at(resstr)))
	}

	void mapping_y(prop_y_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_y", prop_y_mapping_items_to_string.at(value))
	}

	enum prop_z_mapping_items_enum {
		prop_z_mapping_items_NONE = 0,	
		prop_z_mapping_items_X = 1,	
		prop_z_mapping_items_Y = 2,	
		prop_z_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_z_mapping_items() {
		return {{"NONE", prop_z_mapping_items_NONE}, {"X", prop_z_mapping_items_X}, {"Y", prop_z_mapping_items_Y}, {"Z", prop_z_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_z_mapping_items_to_string() {
		return {{prop_z_mapping_items_NONE, "NONE"}, {prop_z_mapping_items_X, "X"}, {prop_z_mapping_items_Y, "Y"}, {prop_z_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_z_mapping_items = create_string_to_prop_z_mapping_items();
	const std::map<int, std::string> prop_z_mapping_items_to_string = create_prop_z_mapping_items_to_string();

	prop_z_mapping_items_enum mapping_z() {
		STRING_TYPE_GETTER("mapping_z", static_cast<prop_z_mapping_items_enum>(string_to_prop_z_mapping_items.at(resstr)))
	}

	void mapping_z(prop_z_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_z", prop_z_mapping_items_to_string.at(value))
	}

	enum prop_mapping_items_enum {
		prop_mapping_items_FLAT = 0,	
		prop_mapping_items_CUBE = 1,	
		prop_mapping_items_TUBE = 2,	
		prop_mapping_items_SPHERE = 3	
	};

	std::map<std::string, int> create_string_to_prop_mapping_items() {
		return {{"FLAT", prop_mapping_items_FLAT}, {"CUBE", prop_mapping_items_CUBE}, {"TUBE", prop_mapping_items_TUBE}, {"SPHERE", prop_mapping_items_SPHERE}};
	};

	std::map<int, std::string> create_prop_mapping_items_to_string() {
		return {{prop_mapping_items_FLAT, "FLAT"}, {prop_mapping_items_CUBE, "CUBE"}, {prop_mapping_items_TUBE, "TUBE"}, {prop_mapping_items_SPHERE, "SPHERE"}};
	};

	const std::map<std::string, int> string_to_prop_mapping_items = create_string_to_prop_mapping_items();
	const std::map<int, std::string> prop_mapping_items_to_string = create_prop_mapping_items_to_string();

	prop_mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<prop_mapping_items_enum>(string_to_prop_mapping_items.at(resstr)))
	}

	void mapping(prop_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", prop_mapping_items_to_string.at(value))
	}

	enum prop_normal_map_space_items_enum {
		prop_normal_map_space_items_CAMERA = 0,	
		prop_normal_map_space_items_WORLD = 1,	
		prop_normal_map_space_items_OBJECT = 2,	
		prop_normal_map_space_items_TANGENT = 3	
	};

	std::map<std::string, int> create_string_to_prop_normal_map_space_items() {
		return {{"CAMERA", prop_normal_map_space_items_CAMERA}, {"WORLD", prop_normal_map_space_items_WORLD}, {"OBJECT", prop_normal_map_space_items_OBJECT}, {"TANGENT", prop_normal_map_space_items_TANGENT}};
	};

	std::map<int, std::string> create_prop_normal_map_space_items_to_string() {
		return {{prop_normal_map_space_items_CAMERA, "CAMERA"}, {prop_normal_map_space_items_WORLD, "WORLD"}, {prop_normal_map_space_items_OBJECT, "OBJECT"}, {prop_normal_map_space_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_prop_normal_map_space_items = create_string_to_prop_normal_map_space_items();
	const std::map<int, std::string> prop_normal_map_space_items_to_string = create_prop_normal_map_space_items_to_string();

	prop_normal_map_space_items_enum normal_map_space() {
		STRING_TYPE_GETTER("normal_map_space", static_cast<prop_normal_map_space_items_enum>(string_to_prop_normal_map_space_items.at(resstr)))
	}

	void normal_map_space(prop_normal_map_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "normal_map_space", prop_normal_map_space_items_to_string.at(value))
	}

	float normal_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "normal_factor")
	}

	void normal_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "normal_factor", value)
	}

	float displacement_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "displacement_factor")
	}

	void displacement_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "displacement_factor", value)
	}

	float warp_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "warp_factor")
	}

	void warp_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "warp_factor", value)
	}

	float specular_color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_color_factor")
	}

	void specular_color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_color_factor", value)
	}

	float diffuse_color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_color_factor")
	}

	void diffuse_color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_color_factor", value)
	}

	float mirror_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mirror_factor")
	}

	void mirror_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mirror_factor", value)
	}

	float alpha_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha_factor")
	}

	void alpha_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha_factor", value)
	}

	float diffuse_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "diffuse_factor")
	}

	void diffuse_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "diffuse_factor", value)
	}

	float specular_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "specular_factor")
	}

	void specular_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "specular_factor", value)
	}

	float emit_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "emit_factor")
	}

	void emit_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "emit_factor", value)
	}

	float hardness_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "hardness_factor")
	}

	void hardness_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "hardness_factor", value)
	}

	float raymir_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "raymir_factor")
	}

	void raymir_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "raymir_factor", value)
	}

	float translucency_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "translucency_factor")
	}

	void translucency_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "translucency_factor", value)
	}

	float ambient_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ambient_factor")
	}

	void ambient_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ambient_factor", value)
	}

	bool use_map_color_emission() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_color_emission")
	}

	void use_map_color_emission(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_color_emission", value)
	}

	bool use_map_color_reflection() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_color_reflection")
	}

	void use_map_color_reflection(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_color_reflection", value)
	}

	bool use_map_color_transmission() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_color_transmission")
	}

	void use_map_color_transmission(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_color_transmission", value)
	}

	bool use_map_density() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_density")
	}

	void use_map_density(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_density", value)
	}

	bool use_map_emission() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_emission")
	}

	void use_map_emission(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_emission", value)
	}

	bool use_map_scatter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_scatter")
	}

	void use_map_scatter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_scatter", value)
	}

	bool use_map_reflect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_reflect")
	}

	void use_map_reflect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_reflect", value)
	}

	float emission_color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "emission_color_factor")
	}

	void emission_color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "emission_color_factor", value)
	}

	float reflection_color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "reflection_color_factor")
	}

	void reflection_color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "reflection_color_factor", value)
	}

	float transmission_color_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "transmission_color_factor")
	}

	void transmission_color_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "transmission_color_factor", value)
	}

	float density_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "density_factor")
	}

	void density_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "density_factor", value)
	}

	float emission_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "emission_factor")
	}

	void emission_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "emission_factor", value)
	}

	float scattering_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scattering_factor")
	}

	void scattering_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scattering_factor", value)
	}

	float reflection_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "reflection_factor")
	}

	void reflection_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "reflection_factor", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	enum prop_bump_method_items_enum {
		prop_bump_method_items_BUMP_ORIGINAL = 0,	
		prop_bump_method_items_BUMP_COMPATIBLE = 128,	
		prop_bump_method_items_BUMP_LOW_QUALITY = 256,	
		prop_bump_method_items_BUMP_MEDIUM_QUALITY = 512,	
		prop_bump_method_items_BUMP_BEST_QUALITY = 8192	
	};

	std::map<std::string, int> create_string_to_prop_bump_method_items() {
		return {{"BUMP_ORIGINAL", prop_bump_method_items_BUMP_ORIGINAL}, {"BUMP_COMPATIBLE", prop_bump_method_items_BUMP_COMPATIBLE}, {"BUMP_LOW_QUALITY", prop_bump_method_items_BUMP_LOW_QUALITY}, {"BUMP_MEDIUM_QUALITY", prop_bump_method_items_BUMP_MEDIUM_QUALITY}, {"BUMP_BEST_QUALITY", prop_bump_method_items_BUMP_BEST_QUALITY}};
	};

	std::map<int, std::string> create_prop_bump_method_items_to_string() {
		return {{prop_bump_method_items_BUMP_ORIGINAL, "BUMP_ORIGINAL"}, {prop_bump_method_items_BUMP_COMPATIBLE, "BUMP_COMPATIBLE"}, {prop_bump_method_items_BUMP_LOW_QUALITY, "BUMP_LOW_QUALITY"}, {prop_bump_method_items_BUMP_MEDIUM_QUALITY, "BUMP_MEDIUM_QUALITY"}, {prop_bump_method_items_BUMP_BEST_QUALITY, "BUMP_BEST_QUALITY"}};
	};

	const std::map<std::string, int> string_to_prop_bump_method_items = create_string_to_prop_bump_method_items();
	const std::map<int, std::string> prop_bump_method_items_to_string = create_prop_bump_method_items_to_string();

	prop_bump_method_items_enum bump_method() {
		STRING_TYPE_GETTER("bump_method", static_cast<prop_bump_method_items_enum>(string_to_prop_bump_method_items.at(resstr)))
	}

	void bump_method(prop_bump_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bump_method", prop_bump_method_items_to_string.at(value))
	}

	enum prop_bump_space_items_enum {
		prop_bump_space_items_BUMP_VIEWSPACE = 0,	
		prop_bump_space_items_BUMP_OBJECTSPACE = 1024,	
		prop_bump_space_items_BUMP_TEXTURESPACE = 2048	
	};

	std::map<std::string, int> create_string_to_prop_bump_space_items() {
		return {{"BUMP_VIEWSPACE", prop_bump_space_items_BUMP_VIEWSPACE}, {"BUMP_OBJECTSPACE", prop_bump_space_items_BUMP_OBJECTSPACE}, {"BUMP_TEXTURESPACE", prop_bump_space_items_BUMP_TEXTURESPACE}};
	};

	std::map<int, std::string> create_prop_bump_space_items_to_string() {
		return {{prop_bump_space_items_BUMP_VIEWSPACE, "BUMP_VIEWSPACE"}, {prop_bump_space_items_BUMP_OBJECTSPACE, "BUMP_OBJECTSPACE"}, {prop_bump_space_items_BUMP_TEXTURESPACE, "BUMP_TEXTURESPACE"}};
	};

	const std::map<std::string, int> string_to_prop_bump_space_items = create_string_to_prop_bump_space_items();
	const std::map<int, std::string> prop_bump_space_items_to_string = create_prop_bump_space_items_to_string();

	prop_bump_space_items_enum bump_objectspace() {
		STRING_TYPE_GETTER("bump_objectspace", static_cast<prop_bump_space_items_enum>(string_to_prop_bump_space_items.at(resstr)))
	}

	void bump_objectspace(prop_bump_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bump_objectspace", prop_bump_space_items_to_string.at(value))
	}
};

class MaterialStrand : public pyUniplug {
public:
	MaterialStrand(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialStrand() : pyUniplug(0) { }

	bool use_tangent_shading() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tangent_shading")
	}

	void use_tangent_shading(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tangent_shading", value)
	}

	bool use_surface_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_surface_diffuse")
	}

	void use_surface_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_surface_diffuse", value)
	}

	float blend_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_distance")
	}

	void blend_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_distance", value)
	}

	bool use_blender_units() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_blender_units")
	}

	void use_blender_units(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_blender_units", value)
	}

	float root_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "root_size")
	}

	void root_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "root_size", value)
	}

	float tip_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tip_size")
	}

	void tip_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tip_size", value)
	}

	float size_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_min")
	}

	void size_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_min", value)
	}

	float shape() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shape")
	}

	void shape(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shape", value)
	}

	float width_fade() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width_fade")
	}

	void width_fade(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width_fade", value)
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}
};

class MaterialPhysics : public pyUniplug {
public:
	MaterialPhysics(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialPhysics() : pyUniplug(0) { }

	float friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "friction")
	}

	void friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "friction", value)
	}

	float elasticity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "elasticity")
	}

	void elasticity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "elasticity", value)
	}

	bool use_fh_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fh_normal")
	}

	void use_fh_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fh_normal", value)
	}

	float fh_force() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fh_force")
	}

	void fh_force(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fh_force", value)
	}

	float fh_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fh_distance")
	}

	void fh_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fh_distance", value)
	}

	float fh_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fh_damping")
	}

	void fh_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fh_damping", value)
	}
};

class MaterialGameSettings : public pyUniplug {
public:
	MaterialGameSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialGameSettings() : pyUniplug(0) { }

	bool use_backface_culling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_backface_culling")
	}

	void use_backface_culling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_backface_culling", value)
	}

	bool text() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "text")
	}

	void text(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "text", value)
	}

	bool invisible() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invisible")
	}

	void invisible(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invisible", value)
	}

	enum prop_alpha_blend_items_enum {
		prop_alpha_blend_items_OPAQUE = 0,	
		prop_alpha_blend_items_ADD = 1,	
		prop_alpha_blend_items_CLIP = 4,	
		prop_alpha_blend_items_ALPHA = 2,	
		prop_alpha_blend_items_ALPHA_SORT = 8,	
		prop_alpha_blend_items_ALPHA_ANTIALIASING = 16	
	};

	std::map<std::string, int> create_string_to_prop_alpha_blend_items() {
		return {{"OPAQUE", prop_alpha_blend_items_OPAQUE}, {"ADD", prop_alpha_blend_items_ADD}, {"CLIP", prop_alpha_blend_items_CLIP}, {"ALPHA", prop_alpha_blend_items_ALPHA}, {"ALPHA_SORT", prop_alpha_blend_items_ALPHA_SORT}, {"ALPHA_ANTIALIASING", prop_alpha_blend_items_ALPHA_ANTIALIASING}};
	};

	std::map<int, std::string> create_prop_alpha_blend_items_to_string() {
		return {{prop_alpha_blend_items_OPAQUE, "OPAQUE"}, {prop_alpha_blend_items_ADD, "ADD"}, {prop_alpha_blend_items_CLIP, "CLIP"}, {prop_alpha_blend_items_ALPHA, "ALPHA"}, {prop_alpha_blend_items_ALPHA_SORT, "ALPHA_SORT"}, {prop_alpha_blend_items_ALPHA_ANTIALIASING, "ALPHA_ANTIALIASING"}};
	};

	const std::map<std::string, int> string_to_prop_alpha_blend_items = create_string_to_prop_alpha_blend_items();
	const std::map<int, std::string> prop_alpha_blend_items_to_string = create_prop_alpha_blend_items_to_string();

	prop_alpha_blend_items_enum alpha_blend() {
		STRING_TYPE_GETTER("alpha_blend", static_cast<prop_alpha_blend_items_enum>(string_to_prop_alpha_blend_items.at(resstr)))
	}

	void alpha_blend(prop_alpha_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_blend", prop_alpha_blend_items_to_string.at(value))
	}

	enum prop_face_orientation_items_enum {
		prop_face_orientation_items_NORMAL = 0,	
		prop_face_orientation_items_HALO = 512,	
		prop_face_orientation_items_BILLBOARD = 1024,	
		prop_face_orientation_items_SHADOW = 2048	
	};

	std::map<std::string, int> create_string_to_prop_face_orientation_items() {
		return {{"NORMAL", prop_face_orientation_items_NORMAL}, {"HALO", prop_face_orientation_items_HALO}, {"BILLBOARD", prop_face_orientation_items_BILLBOARD}, {"SHADOW", prop_face_orientation_items_SHADOW}};
	};

	std::map<int, std::string> create_prop_face_orientation_items_to_string() {
		return {{prop_face_orientation_items_NORMAL, "NORMAL"}, {prop_face_orientation_items_HALO, "HALO"}, {prop_face_orientation_items_BILLBOARD, "BILLBOARD"}, {prop_face_orientation_items_SHADOW, "SHADOW"}};
	};

	const std::map<std::string, int> string_to_prop_face_orientation_items = create_string_to_prop_face_orientation_items();
	const std::map<int, std::string> prop_face_orientation_items_to_string = create_prop_face_orientation_items_to_string();

	prop_face_orientation_items_enum face_orientation() {
		STRING_TYPE_GETTER("face_orientation", static_cast<prop_face_orientation_items_enum>(string_to_prop_face_orientation_items.at(resstr)))
	}

	void face_orientation(prop_face_orientation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "face_orientation", prop_face_orientation_items_to_string.at(value))
	}

	bool physics() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "physics")
	}

	void physics(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "physics", value)
	}
};

class Mesh : public ID {
public:
	Mesh(PyObject* pyobj) : ID(pyobj) {}
	Mesh() : ID(0) { }

	std::map<std::string, MeshVertex> vertices();

	std::map<std::string, MeshEdge> edges();

	std::map<std::string, MeshTessFace> tessfaces();

	std::map<std::string, MeshLoop> loops();

	std::map<std::string, MeshPolygon> polygons();

	Mesh texture_mesh() {
		CLASS_TYPES_GETTER(Mesh, "texture_mesh")
	}

	std::map<std::string, MeshUVLoopLayer> uv_layers();

	MeshUVLoopLayer uv_layer_clone();

	int uv_layer_clone_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "uv_layer_clone_index")
	}

	void uv_layer_clone_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "uv_layer_clone_index", value)
	}

	MeshUVLoopLayer uv_layer_stencil();

	int uv_layer_stencil_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "uv_layer_stencil_index")
	}

	void uv_layer_stencil_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "uv_layer_stencil_index", value)
	}

	std::map<std::string, MeshTextureFaceLayer> tessface_uv_textures();

	std::map<std::string, MeshTexturePolyLayer> uv_textures();

	MeshTexturePolyLayer uv_texture_clone();

	int uv_texture_clone_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "uv_texture_clone_index")
	}

	void uv_texture_clone_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "uv_texture_clone_index", value)
	}

	MeshTexturePolyLayer uv_texture_stencil();

	int uv_texture_stencil_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "uv_texture_stencil_index")
	}

	void uv_texture_stencil_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "uv_texture_stencil_index", value)
	}

	std::map<std::string, MeshColorLayer> tessface_vertex_colors();

	std::map<std::string, MeshLoopColorLayer> vertex_colors();

	std::map<std::string, MeshVertexFloatPropertyLayer> vertex_layers_float();

	std::map<std::string, MeshVertexIntPropertyLayer> vertex_layers_int();

	std::map<std::string, MeshVertexStringPropertyLayer> vertex_layers_string();

	std::map<std::string, MeshPolygonFloatPropertyLayer> polygon_layers_float();

	std::map<std::string, MeshPolygonIntPropertyLayer> polygon_layers_int();

	std::map<std::string, MeshPolygonStringPropertyLayer> polygon_layers_string();

	std::map<std::string, MeshSkinVertexLayer> skin_vertices();

	std::map<std::string, MeshPaintMaskLayer> vertex_paint_masks();

	bool use_auto_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_smooth")
	}

	void use_auto_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_smooth", value)
	}

	float auto_smooth_angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "auto_smooth_angle")
	}

	void auto_smooth_angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "auto_smooth_angle", value)
	}

	bool has_custom_normals() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_custom_normals")
	}

	void has_custom_normals(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_custom_normals", value)
	}

	bool show_double_sided() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_double_sided")
	}

	void show_double_sided(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_double_sided", value)
	}

	Mesh texco_mesh() {
		CLASS_TYPES_GETTER(Mesh, "texco_mesh")
	}

	Key shape_keys() {
		CLASS_TYPES_GETTER(Key, "shape_keys")
	}

	bool use_auto_texspace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_texspace")
	}

	void use_auto_texspace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_texspace", value)
	}

	bool show_edges() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_edges")
	}

	void show_edges(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_edges", value)
	}

	bool show_faces() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_faces")
	}

	void show_faces(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_faces", value)
	}

	bool show_normal_face() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_normal_face")
	}

	void show_normal_face(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_normal_face", value)
	}

	bool show_normal_loop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_normal_loop")
	}

	void show_normal_loop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_normal_loop", value)
	}

	bool show_normal_vertex() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_normal_vertex")
	}

	void show_normal_vertex(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_normal_vertex", value)
	}

	bool show_weight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_weight")
	}

	void show_weight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_weight", value)
	}

	bool show_edge_crease() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_edge_crease")
	}

	void show_edge_crease(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_edge_crease", value)
	}

	bool show_edge_bevel_weight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_edge_bevel_weight")
	}

	void show_edge_bevel_weight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_edge_bevel_weight", value)
	}

	bool show_edge_seams() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_edge_seams")
	}

	void show_edge_seams(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_edge_seams", value)
	}

	bool show_edge_sharp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_edge_sharp")
	}

	void show_edge_sharp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_edge_sharp", value)
	}

	bool show_freestyle_edge_marks() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_freestyle_edge_marks")
	}

	void show_freestyle_edge_marks(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_freestyle_edge_marks", value)
	}

	bool show_freestyle_face_marks() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_freestyle_face_marks")
	}

	void show_freestyle_face_marks(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_freestyle_face_marks", value)
	}

	bool show_statvis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_statvis")
	}

	void show_statvis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_statvis", value)
	}

	bool show_extra_edge_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_extra_edge_length")
	}

	void show_extra_edge_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_extra_edge_length", value)
	}

	bool show_extra_edge_angle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_extra_edge_angle")
	}

	void show_extra_edge_angle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_extra_edge_angle", value)
	}

	bool show_extra_face_angle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_extra_face_angle")
	}

	void show_extra_face_angle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_extra_face_angle", value)
	}

	bool show_extra_face_area() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_extra_face_area")
	}

	void show_extra_face_area(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_extra_face_area", value)
	}

	bool show_extra_indices() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_extra_indices")
	}

	void show_extra_indices(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_extra_indices", value)
	}

	bool use_mirror_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_x")
	}

	void use_mirror_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_x", value)
	}

	bool use_mirror_topology() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_topology")
	}

	void use_mirror_topology(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_topology", value)
	}

	bool use_paint_mask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_paint_mask")
	}

	void use_paint_mask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_paint_mask", value)
	}

	bool use_paint_mask_vertex() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_paint_mask_vertex")
	}

	void use_paint_mask_vertex(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_paint_mask_vertex", value)
	}

	bool use_customdata_vertex_bevel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_customdata_vertex_bevel")
	}

	void use_customdata_vertex_bevel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_customdata_vertex_bevel", value)
	}

	bool use_customdata_edge_bevel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_customdata_edge_bevel")
	}

	void use_customdata_edge_bevel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_customdata_edge_bevel", value)
	}

	bool use_customdata_edge_crease() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_customdata_edge_crease")
	}

	void use_customdata_edge_crease(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_customdata_edge_crease", value)
	}

	int total_vert_sel() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "total_vert_sel")
	}

	void total_vert_sel(int value) {
		PRIMITIVE_TYPES_SETTER("i", "total_vert_sel", value)
	}

	int total_edge_sel() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "total_edge_sel")
	}

	void total_edge_sel(int value) {
		PRIMITIVE_TYPES_SETTER("i", "total_edge_sel", value)
	}

	int total_face_sel() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "total_face_sel")
	}

	void total_face_sel(int value) {
		PRIMITIVE_TYPES_SETTER("i", "total_face_sel", value)
	}

	bool is_editmode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_editmode")
	}

	void is_editmode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_editmode", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	bool auto_texspace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "auto_texspace")
	}

	void auto_texspace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "auto_texspace", value)
	}

	VFLOAT3 texspace_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "texspace_location", 3)
	}

	void texspace_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "texspace_location", 3)
	}

	VFLOAT3 texspace_size() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "texspace_size", 3)
	}

	void texspace_size(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "texspace_size", 3)
	}

	std::map<std::string, Material> materials() {
		MAP_TYPE_GETTER("materials", Material)
	}

	void transform(VFLOAT16 matrix, bool shape_keys = false) {
		ARRAY_TO_PYOBJ(matrix, "O", 16)
		PYTHON_FUNCTION_ARGS_CALL("transform", "Oi", matrix_tupleval, shape_keys)
		DECREF_ARRAY_ITEMS(matrix, 16)
	}

	void calc_normals() {
		PYTHON_FUNCTION_CALL("calc_normals")
	}

	void create_normals_split() {
		PYTHON_FUNCTION_CALL("create_normals_split")
	}

	void calc_normals_split() {
		PYTHON_FUNCTION_CALL("calc_normals_split")
	}

	void free_normals_split() {
		PYTHON_FUNCTION_CALL("free_normals_split")
	}

	void calc_tangents(const std::string uvmap = NULL) {
		PYTHON_FUNCTION_ARGS_CALL("calc_tangents", "s", uvmap)
	}

	void free_tangents() {
		PYTHON_FUNCTION_CALL("free_tangents")
	}

	void calc_tessface(bool free_mpoly = false) {
		PYTHON_FUNCTION_ARGS_CALL("calc_tessface", "i", free_mpoly)
	}

	struct calc_smooth_groups_result {
		std::array<int, 1> poly_groups;	/**< Smooth Groups */
		int groups;	/**< Total number of groups */
	};

	calc_smooth_groups_result calc_smooth_groups(bool use_bitflags = false) {
		PYTHON_FUNCTION_ARGS_CALL("calc_smooth_groups", "i", use_bitflags)
		CREATE_MULTIPLE_PYOBJS(*poly_groups_obj, *groups_obj)
		UNPACK_TUPLE_TO_OBJS("calc_smooth_groups", 2, &poly_groups_obj, &groups_obj)
		PRIMITIVE_TYPES_ARRAY_CONV(poly_groups, int, PyLong_AsLong(item), 1)
		PRIMITIVE_TYPES_CONV(groups, int, PyLong_AsLong(groups_obj))
		NONCLASS_TYPES_RETURN(poly_groups_res, groups_res)
	}

	void normals_split_custom_set(VFLOAT3 normals) {
		ARRAY_TO_PYOBJ(normals, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("normals_split_custom_set", "O", normals_tupleval)
		DECREF_ARRAY_ITEMS(normals, 3)
	}

	void normals_split_custom_set_from_vertices(VFLOAT3 normals) {
		ARRAY_TO_PYOBJ(normals, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("normals_split_custom_set_from_vertices", "O", normals_tupleval)
		DECREF_ARRAY_ITEMS(normals, 3)
	}

	void update(bool calc_edges = false, bool calc_tessface = false) {
		PYTHON_FUNCTION_ARGS_CALL("update", "ii", calc_edges, calc_tessface)
	}

	const std::string unit_test_compare(Mesh mesh) {
		PYTHON_FUNCTION_ARGS_CALL("unit_test_compare", "O", mesh.get_pyobjref())
		CREATE_SINGLE_PYOBJ(result)
		STRING_TYPE_CONV(result)
		NONCLASS_TYPES_RETURN(result_res)
	}

	bool validate(bool verbose = false, bool clean_customdata = true) {
		PYTHON_FUNCTION_ARGS_CALL("validate", "ii", verbose, clean_customdata)
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	bool validate_material_indices() {
		PYTHON_FUNCTION_CALL("validate_material_indices")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}
};

class MeshSkinVertexLayer : public pyUniplug {
public:
	MeshSkinVertexLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshSkinVertexLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MeshSkinVertex> data();
};

class MeshSkinVertex : public pyUniplug {
public:
	MeshSkinVertex(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshSkinVertex() : pyUniplug(0) { }

	VFLOAT2 radius() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "radius", 2)
	}

	void radius(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "radius", 2)
	}

	bool use_root() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_root")
	}

	void use_root(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_root", value)
	}

	bool use_loose() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_loose")
	}

	void use_loose(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_loose", value)
	}
};

class MeshPaintMaskLayer : public pyUniplug {
public:
	MeshPaintMaskLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPaintMaskLayer() : pyUniplug(0) { }

	std::map<std::string, MeshPaintMaskProperty> data();
};

class MeshPaintMaskProperty : public pyUniplug {
public:
	MeshPaintMaskProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPaintMaskProperty() : pyUniplug(0) { }

	float value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value")
	}

	void value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value", value)
	}
};

class MeshVertex : public pyUniplug {
public:
	MeshVertex(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertex() : pyUniplug(0) { }

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	VFLOAT3 normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "normal", 3)
	}

	void normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "normal", 3)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	float bevel_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bevel_weight")
	}

	void bevel_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bevel_weight", value)
	}

	std::map<std::string, VertexGroupElement> groups();

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}

	VFLOAT3 undeformed_co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "undeformed_co", 3)
	}

	void undeformed_co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "undeformed_co", 3)
	}
};

class VertexGroupElement : public pyUniplug {
public:
	VertexGroupElement(PyObject* pyobj) : pyUniplug(pyobj) {}
	VertexGroupElement() : pyUniplug(0) { }

	int group() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "group")
	}

	void group(int value) {
		PRIMITIVE_TYPES_SETTER("i", "group", value)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}
};

class MeshEdge : public pyUniplug {
public:
	MeshEdge(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshEdge() : pyUniplug(0) { }

	std::array<int, 2> vertices() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "vertices", 2)
	}

	void vertices(int values[2]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "vertices", 2)
	}

	float crease() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crease")
	}

	void crease(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crease", value)
	}

	float bevel_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bevel_weight")
	}

	void bevel_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bevel_weight", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool use_seam() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_seam")
	}

	void use_seam(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_seam", value)
	}

	bool use_edge_sharp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_sharp")
	}

	void use_edge_sharp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_sharp", value)
	}

	bool is_loose() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_loose")
	}

	void is_loose(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_loose", value)
	}

	bool use_freestyle_mark() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_freestyle_mark")
	}

	void use_freestyle_mark(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_freestyle_mark", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}
};

class MeshTessFace : public pyUniplug {
public:
	MeshTessFace(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshTessFace() : pyUniplug(0) { }

	std::array<int, 4> vertices() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "vertices", 4)
	}

	void vertices(int values[4]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "vertices", 4)
	}

	std::array<int, 4> vertices_raw() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "vertices_raw", 4)
	}

	void vertices_raw(int values[4]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "vertices_raw", 4)
	}

	int material_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material_index")
	}

	void material_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material_index", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool use_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth")
	}

	void use_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth", value)
	}

	VFLOAT3 normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "normal", 3)
	}

	void normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "normal", 3)
	}

	std::array<float, 12> split_normals() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "split_normals", 12)
	}

	void split_normals(float values[12]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "split_normals", 12)
	}

	float area() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "area")
	}

	void area(float value) {
		PRIMITIVE_TYPES_SETTER("f", "area", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}
};

class MeshLoop : public pyUniplug {
public:
	MeshLoop(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshLoop() : pyUniplug(0) { }

	int vertex_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "vertex_index")
	}

	void vertex_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "vertex_index", value)
	}

	int edge_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "edge_index")
	}

	void edge_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "edge_index", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}

	VFLOAT3 normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "normal", 3)
	}

	void normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "normal", 3)
	}

	VFLOAT3 tangent() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tangent", 3)
	}

	void tangent(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tangent", 3)
	}

	float bitangent_sign() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bitangent_sign")
	}

	void bitangent_sign(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bitangent_sign", value)
	}

	VFLOAT3 bitangent() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "bitangent", 3)
	}

	void bitangent(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "bitangent", 3)
	}
};

class MeshPolygon : public pyUniplug {
public:
	MeshPolygon(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygon() : pyUniplug(0) { }

	std::array<int, 3> vertices() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "vertices", 3)
	}

	void vertices(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "vertices", 3)
	}

	int loop_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "loop_start")
	}

	void loop_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "loop_start", value)
	}

	int loop_total() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "loop_total")
	}

	void loop_total(int value) {
		PRIMITIVE_TYPES_SETTER("i", "loop_total", value)
	}

	int material_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material_index")
	}

	void material_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material_index", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool use_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth")
	}

	void use_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth", value)
	}

	bool use_freestyle_mark() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_freestyle_mark")
	}

	void use_freestyle_mark(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_freestyle_mark", value)
	}

	VFLOAT3 normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "normal", 3)
	}

	void normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "normal", 3)
	}

	VFLOAT3 center() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "center", 3)
	}

	void center(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "center", 3)
	}

	float area() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "area")
	}

	void area(float value) {
		PRIMITIVE_TYPES_SETTER("f", "area", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}
};

class MeshUVLoopLayer : public pyUniplug {
public:
	MeshUVLoopLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshUVLoopLayer() : pyUniplug(0) { }

	std::map<std::string, MeshUVLoop> data();

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class MeshUVLoop : public pyUniplug {
public:
	MeshUVLoop(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshUVLoop() : pyUniplug(0) { }

	VFLOAT2 uv() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv", 2)
	}

	void uv(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv", 2)
	}

	bool pin_uv() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "pin_uv")
	}

	void pin_uv(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "pin_uv", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool select_edge() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_edge")
	}

	void select_edge(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_edge", value)
	}
};

class MeshTextureFaceLayer : public pyUniplug {
public:
	MeshTextureFaceLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshTextureFaceLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool active_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active_render")
	}

	void active_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active_render", value)
	}

	bool active_clone() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active_clone")
	}

	void active_clone(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active_clone", value)
	}

	std::map<std::string, MeshTextureFace> data();
};

class MeshTextureFace : public pyUniplug {
public:
	MeshTextureFace(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshTextureFace() : pyUniplug(0) { }

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	VFLOAT2 uv1() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv1", 2)
	}

	void uv1(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv1", 2)
	}

	VFLOAT2 uv2() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv2", 2)
	}

	void uv2(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv2", 2)
	}

	VFLOAT2 uv3() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv3", 2)
	}

	void uv3(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv3", 2)
	}

	VFLOAT2 uv4() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv4", 2)
	}

	void uv4(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv4", 2)
	}

	std::array<float, 8> uv() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "uv", 8)
	}

	void uv(float values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv", 8)
	}

	std::array<float, 8> uv_raw() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "uv_raw", 8)
	}

	void uv_raw(float values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv_raw", 8)
	}
};

class MeshTexturePolyLayer : public pyUniplug {
public:
	MeshTexturePolyLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshTexturePolyLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool active_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active_render")
	}

	void active_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active_render", value)
	}

	bool active_clone() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active_clone")
	}

	void active_clone(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active_clone", value)
	}

	std::map<std::string, MeshTexturePoly> data();
};

class MeshTexturePoly : public pyUniplug {
public:
	MeshTexturePoly(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshTexturePoly() : pyUniplug(0) { }

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}
};

class MeshColorLayer : public pyUniplug {
public:
	MeshColorLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshColorLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool active_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active_render")
	}

	void active_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active_render", value)
	}

	std::map<std::string, MeshColor> data();
};

class MeshColor : public pyUniplug {
public:
	MeshColor(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshColor() : pyUniplug(0) { }

	VFLOAT3 color1() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color1", 3)
	}

	void color1(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color1", 3)
	}

	VFLOAT3 color2() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color2", 3)
	}

	void color2(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color2", 3)
	}

	VFLOAT3 color3() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color3", 3)
	}

	void color3(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color3", 3)
	}

	VFLOAT3 color4() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color4", 3)
	}

	void color4(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color4", 3)
	}
};

class MeshLoopColorLayer : public pyUniplug {
public:
	MeshLoopColorLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshLoopColorLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool active_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active_render")
	}

	void active_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active_render", value)
	}

	std::map<std::string, MeshLoopColor> data();
};

class MeshLoopColor : public pyUniplug {
public:
	MeshLoopColor(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshLoopColor() : pyUniplug(0) { }

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}
};

class MeshVertexFloatPropertyLayer : public pyUniplug {
public:
	MeshVertexFloatPropertyLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertexFloatPropertyLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MeshVertexFloatProperty> data();
};

class MeshVertexFloatProperty : public pyUniplug {
public:
	MeshVertexFloatProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertexFloatProperty() : pyUniplug(0) { }

	float value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value")
	}

	void value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value", value)
	}
};

class MeshPolygonFloatPropertyLayer : public pyUniplug {
public:
	MeshPolygonFloatPropertyLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygonFloatPropertyLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MeshPolygonFloatProperty> data();
};

class MeshPolygonFloatProperty : public pyUniplug {
public:
	MeshPolygonFloatProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygonFloatProperty() : pyUniplug(0) { }

	float value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value")
	}

	void value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value", value)
	}
};

class MeshVertexIntPropertyLayer : public pyUniplug {
public:
	MeshVertexIntPropertyLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertexIntPropertyLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MeshVertexIntProperty> data();
};

class MeshVertexIntProperty : public pyUniplug {
public:
	MeshVertexIntProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertexIntProperty() : pyUniplug(0) { }

	int value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "value")
	}

	void value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "value", value)
	}
};

class MeshPolygonIntPropertyLayer : public pyUniplug {
public:
	MeshPolygonIntPropertyLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygonIntPropertyLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MeshPolygonIntProperty> data();
};

class MeshPolygonIntProperty : public pyUniplug {
public:
	MeshPolygonIntProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygonIntProperty() : pyUniplug(0) { }

	int value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "value")
	}

	void value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "value", value)
	}
};

class MeshVertexStringPropertyLayer : public pyUniplug {
public:
	MeshVertexStringPropertyLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertexStringPropertyLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MeshVertexStringProperty> data();
};

class MeshVertexStringProperty : public pyUniplug {
public:
	MeshVertexStringProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshVertexStringProperty() : pyUniplug(0) { }

	std::string value() {
		STRING_TYPE_GETTER("value", resstr)
	}

	void value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "value", value)
	}
};

class MeshPolygonStringPropertyLayer : public pyUniplug {
public:
	MeshPolygonStringPropertyLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygonStringPropertyLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MeshPolygonStringProperty> data();
};

class MeshPolygonStringProperty : public pyUniplug {
public:
	MeshPolygonStringProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshPolygonStringProperty() : pyUniplug(0) { }

	std::string value() {
		STRING_TYPE_GETTER("value", resstr)
	}

	void value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "value", value)
	}
};

class MetaElement : public pyUniplug {
public:
	MetaElement(PyObject* pyobj) : pyUniplug(pyobj) {}
	MetaElement() : pyUniplug(0) { }

	enum metaelem_type_items_enum {
		metaelem_type_items_BALL = 0,	
		metaelem_type_items_CAPSULE = 4,	
		metaelem_type_items_PLANE = 5,	
		metaelem_type_items_ELLIPSOID = 6,	
		metaelem_type_items_CUBE = 7	
	};

	std::map<std::string, int> create_string_to_metaelem_type_items() {
		return {{"BALL", metaelem_type_items_BALL}, {"CAPSULE", metaelem_type_items_CAPSULE}, {"PLANE", metaelem_type_items_PLANE}, {"ELLIPSOID", metaelem_type_items_ELLIPSOID}, {"CUBE", metaelem_type_items_CUBE}};
	};

	std::map<int, std::string> create_metaelem_type_items_to_string() {
		return {{metaelem_type_items_BALL, "BALL"}, {metaelem_type_items_CAPSULE, "CAPSULE"}, {metaelem_type_items_PLANE, "PLANE"}, {metaelem_type_items_ELLIPSOID, "ELLIPSOID"}, {metaelem_type_items_CUBE, "CUBE"}};
	};

	const std::map<std::string, int> string_to_metaelem_type_items = create_string_to_metaelem_type_items();
	const std::map<int, std::string> metaelem_type_items_to_string = create_metaelem_type_items_to_string();

	metaelem_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<metaelem_type_items_enum>(string_to_metaelem_type_items.at(resstr)))
	}

	void type(metaelem_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", metaelem_type_items_to_string.at(value))
	}

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	VFLOAT4 rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation", 4)
	}

	void rotation(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation", 4)
	}

	float radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radius")
	}

	void radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radius", value)
	}

	float size_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_x")
	}

	void size_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_x", value)
	}

	float size_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_y")
	}

	void size_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_y", value)
	}

	float size_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_z")
	}

	void size_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_z", value)
	}

	float stiffness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "stiffness")
	}

	void stiffness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "stiffness", value)
	}

	bool use_negative() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_negative")
	}

	void use_negative(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_negative", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}
};

class MetaBall : public ID {
public:
	MetaBall(PyObject* pyobj) : ID(pyobj) {}
	MetaBall() : ID(0) { }

	std::map<std::string, MetaElement> elements() {
		MAP_TYPE_GETTER("elements", MetaElement)
	}

	enum prop_update_items_enum {
		prop_update_items_UPDATE_ALWAYS = 0,	
		prop_update_items_HALFRES = 1,	
		prop_update_items_FAST = 2,	
		prop_update_items_NEVER = 3	
	};

	std::map<std::string, int> create_string_to_prop_update_items() {
		return {{"UPDATE_ALWAYS", prop_update_items_UPDATE_ALWAYS}, {"HALFRES", prop_update_items_HALFRES}, {"FAST", prop_update_items_FAST}, {"NEVER", prop_update_items_NEVER}};
	};

	std::map<int, std::string> create_prop_update_items_to_string() {
		return {{prop_update_items_UPDATE_ALWAYS, "UPDATE_ALWAYS"}, {prop_update_items_HALFRES, "HALFRES"}, {prop_update_items_FAST, "FAST"}, {prop_update_items_NEVER, "NEVER"}};
	};

	const std::map<std::string, int> string_to_prop_update_items = create_string_to_prop_update_items();
	const std::map<int, std::string> prop_update_items_to_string = create_prop_update_items_to_string();

	prop_update_items_enum update_method() {
		STRING_TYPE_GETTER("update_method", static_cast<prop_update_items_enum>(string_to_prop_update_items.at(resstr)))
	}

	void update_method(prop_update_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "update_method", prop_update_items_to_string.at(value))
	}

	float resolution() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "resolution")
	}

	void resolution(float value) {
		PRIMITIVE_TYPES_SETTER("f", "resolution", value)
	}

	float render_resolution() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "render_resolution")
	}

	void render_resolution(float value) {
		PRIMITIVE_TYPES_SETTER("f", "render_resolution", value)
	}

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	bool use_auto_texspace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_texspace")
	}

	void use_auto_texspace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_texspace", value)
	}

	VFLOAT3 texspace_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "texspace_location", 3)
	}

	void texspace_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "texspace_location", 3)
	}

	VFLOAT3 texspace_size() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "texspace_size", 3)
	}

	void texspace_size(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "texspace_size", 3)
	}

	std::map<std::string, Material> materials() {
		MAP_TYPE_GETTER("materials", Material)
	}

	bool is_editmode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_editmode")
	}

	void is_editmode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_editmode", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	void transform(VFLOAT16 matrix) {
		ARRAY_TO_PYOBJ(matrix, "O", 16)
		PYTHON_FUNCTION_ARGS_CALL("transform", "O", matrix_tupleval)
		DECREF_ARRAY_ITEMS(matrix, 16)
	}
};

class Modifier : public pyUniplug {
public:
	Modifier(PyObject* pyobj) : pyUniplug(pyobj) {}
	Modifier() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum modifier_type_items_enum {
		modifier_type_items_DATA_TRANSFER = 49,	
		modifier_type_items_MESH_CACHE = 46,	
		modifier_type_items_NORMAL_EDIT = 50,	
		modifier_type_items_UV_PROJECT = 15,	
		modifier_type_items_UV_WARP = 45,	
		modifier_type_items_VERTEX_WEIGHT_EDIT = 36,	
		modifier_type_items_VERTEX_WEIGHT_MIX = 37,	
		modifier_type_items_VERTEX_WEIGHT_PROXIMITY = 38,	
		modifier_type_items_ARRAY = 12,	
		modifier_type_items_BEVEL = 24,	
		modifier_type_items_BOOLEAN = 11,	
		modifier_type_items_BUILD = 4,	
		modifier_type_items_DECIMATE = 6,	
		modifier_type_items_EDGE_SPLIT = 13,	
		modifier_type_items_MASK = 27,	
		modifier_type_items_MIRROR = 5,	
		modifier_type_items_MULTIRES = 29,	
		modifier_type_items_REMESH = 41,	
		modifier_type_items_SCREW = 34,	
		modifier_type_items_SKIN = 42,	
		modifier_type_items_SOLIDIFY = 33,	
		modifier_type_items_SUBSURF = 1,	
		modifier_type_items_TRIANGULATE = 44,	
		modifier_type_items_WIREFRAME = 48,	
		modifier_type_items_ARMATURE = 8,	
		modifier_type_items_CAST = 17,	
		modifier_type_items_CORRECTIVE_SMOOTH = 51,	
		modifier_type_items_CURVE = 3,	
		modifier_type_items_DISPLACE = 14,	
		modifier_type_items_HOOK = 9,	
		modifier_type_items_LAPLACIANSMOOTH = 43,	
		modifier_type_items_LAPLACIANDEFORM = 47,	
		modifier_type_items_LATTICE = 2,	
		modifier_type_items_MESH_DEFORM = 18,	
		modifier_type_items_SHRINKWRAP = 25,	
		modifier_type_items_SIMPLE_DEFORM = 28,	
		modifier_type_items_SMOOTH = 16,	
		modifier_type_items_WARP = 35,	
		modifier_type_items_WAVE = 7,	
		modifier_type_items_CLOTH = 22,	
		modifier_type_items_COLLISION = 23,	
		modifier_type_items_DYNAMIC_PAINT = 40,	
		modifier_type_items_EXPLODE = 21,	
		modifier_type_items_FLUID_SIMULATION = 26,	
		modifier_type_items_OCEAN = 39,	
		modifier_type_items_PARTICLE_INSTANCE = 20,	
		modifier_type_items_PARTICLE_SYSTEM = 19,	
		modifier_type_items_SMOKE = 31,	
		modifier_type_items_SOFT_BODY = 10,	
		modifier_type_items_SURFACE = 30	
	};

	std::map<std::string, int> create_string_to_modifier_type_items() {
		return {{"DATA_TRANSFER", modifier_type_items_DATA_TRANSFER}, {"MESH_CACHE", modifier_type_items_MESH_CACHE}, {"NORMAL_EDIT", modifier_type_items_NORMAL_EDIT}, {"UV_PROJECT", modifier_type_items_UV_PROJECT}, {"UV_WARP", modifier_type_items_UV_WARP}, {"VERTEX_WEIGHT_EDIT", modifier_type_items_VERTEX_WEIGHT_EDIT}, {"VERTEX_WEIGHT_MIX", modifier_type_items_VERTEX_WEIGHT_MIX}, {"VERTEX_WEIGHT_PROXIMITY", modifier_type_items_VERTEX_WEIGHT_PROXIMITY}, {"ARRAY", modifier_type_items_ARRAY}, {"BEVEL", modifier_type_items_BEVEL}, {"BOOLEAN", modifier_type_items_BOOLEAN}, {"BUILD", modifier_type_items_BUILD}, {"DECIMATE", modifier_type_items_DECIMATE}, {"EDGE_SPLIT", modifier_type_items_EDGE_SPLIT}, {"MASK", modifier_type_items_MASK}, {"MIRROR", modifier_type_items_MIRROR}, {"MULTIRES", modifier_type_items_MULTIRES}, {"REMESH", modifier_type_items_REMESH}, {"SCREW", modifier_type_items_SCREW}, {"SKIN", modifier_type_items_SKIN}, {"SOLIDIFY", modifier_type_items_SOLIDIFY}, {"SUBSURF", modifier_type_items_SUBSURF}, {"TRIANGULATE", modifier_type_items_TRIANGULATE}, {"WIREFRAME", modifier_type_items_WIREFRAME}, {"ARMATURE", modifier_type_items_ARMATURE}, {"CAST", modifier_type_items_CAST}, {"CORRECTIVE_SMOOTH", modifier_type_items_CORRECTIVE_SMOOTH}, {"CURVE", modifier_type_items_CURVE}, {"DISPLACE", modifier_type_items_DISPLACE}, {"HOOK", modifier_type_items_HOOK}, {"LAPLACIANSMOOTH", modifier_type_items_LAPLACIANSMOOTH}, {"LAPLACIANDEFORM", modifier_type_items_LAPLACIANDEFORM}, {"LATTICE", modifier_type_items_LATTICE}, {"MESH_DEFORM", modifier_type_items_MESH_DEFORM}, {"SHRINKWRAP", modifier_type_items_SHRINKWRAP}, {"SIMPLE_DEFORM", modifier_type_items_SIMPLE_DEFORM}, {"SMOOTH", modifier_type_items_SMOOTH}, {"WARP", modifier_type_items_WARP}, {"WAVE", modifier_type_items_WAVE}, {"CLOTH", modifier_type_items_CLOTH}, {"COLLISION", modifier_type_items_COLLISION}, {"DYNAMIC_PAINT", modifier_type_items_DYNAMIC_PAINT}, {"EXPLODE", modifier_type_items_EXPLODE}, {"FLUID_SIMULATION", modifier_type_items_FLUID_SIMULATION}, {"OCEAN", modifier_type_items_OCEAN}, {"PARTICLE_INSTANCE", modifier_type_items_PARTICLE_INSTANCE}, {"PARTICLE_SYSTEM", modifier_type_items_PARTICLE_SYSTEM}, {"SMOKE", modifier_type_items_SMOKE}, {"SOFT_BODY", modifier_type_items_SOFT_BODY}, {"SURFACE", modifier_type_items_SURFACE}};
	};

	std::map<int, std::string> create_modifier_type_items_to_string() {
		return {{modifier_type_items_DATA_TRANSFER, "DATA_TRANSFER"}, {modifier_type_items_MESH_CACHE, "MESH_CACHE"}, {modifier_type_items_NORMAL_EDIT, "NORMAL_EDIT"}, {modifier_type_items_UV_PROJECT, "UV_PROJECT"}, {modifier_type_items_UV_WARP, "UV_WARP"}, {modifier_type_items_VERTEX_WEIGHT_EDIT, "VERTEX_WEIGHT_EDIT"}, {modifier_type_items_VERTEX_WEIGHT_MIX, "VERTEX_WEIGHT_MIX"}, {modifier_type_items_VERTEX_WEIGHT_PROXIMITY, "VERTEX_WEIGHT_PROXIMITY"}, {modifier_type_items_ARRAY, "ARRAY"}, {modifier_type_items_BEVEL, "BEVEL"}, {modifier_type_items_BOOLEAN, "BOOLEAN"}, {modifier_type_items_BUILD, "BUILD"}, {modifier_type_items_DECIMATE, "DECIMATE"}, {modifier_type_items_EDGE_SPLIT, "EDGE_SPLIT"}, {modifier_type_items_MASK, "MASK"}, {modifier_type_items_MIRROR, "MIRROR"}, {modifier_type_items_MULTIRES, "MULTIRES"}, {modifier_type_items_REMESH, "REMESH"}, {modifier_type_items_SCREW, "SCREW"}, {modifier_type_items_SKIN, "SKIN"}, {modifier_type_items_SOLIDIFY, "SOLIDIFY"}, {modifier_type_items_SUBSURF, "SUBSURF"}, {modifier_type_items_TRIANGULATE, "TRIANGULATE"}, {modifier_type_items_WIREFRAME, "WIREFRAME"}, {modifier_type_items_ARMATURE, "ARMATURE"}, {modifier_type_items_CAST, "CAST"}, {modifier_type_items_CORRECTIVE_SMOOTH, "CORRECTIVE_SMOOTH"}, {modifier_type_items_CURVE, "CURVE"}, {modifier_type_items_DISPLACE, "DISPLACE"}, {modifier_type_items_HOOK, "HOOK"}, {modifier_type_items_LAPLACIANSMOOTH, "LAPLACIANSMOOTH"}, {modifier_type_items_LAPLACIANDEFORM, "LAPLACIANDEFORM"}, {modifier_type_items_LATTICE, "LATTICE"}, {modifier_type_items_MESH_DEFORM, "MESH_DEFORM"}, {modifier_type_items_SHRINKWRAP, "SHRINKWRAP"}, {modifier_type_items_SIMPLE_DEFORM, "SIMPLE_DEFORM"}, {modifier_type_items_SMOOTH, "SMOOTH"}, {modifier_type_items_WARP, "WARP"}, {modifier_type_items_WAVE, "WAVE"}, {modifier_type_items_CLOTH, "CLOTH"}, {modifier_type_items_COLLISION, "COLLISION"}, {modifier_type_items_DYNAMIC_PAINT, "DYNAMIC_PAINT"}, {modifier_type_items_EXPLODE, "EXPLODE"}, {modifier_type_items_FLUID_SIMULATION, "FLUID_SIMULATION"}, {modifier_type_items_OCEAN, "OCEAN"}, {modifier_type_items_PARTICLE_INSTANCE, "PARTICLE_INSTANCE"}, {modifier_type_items_PARTICLE_SYSTEM, "PARTICLE_SYSTEM"}, {modifier_type_items_SMOKE, "SMOKE"}, {modifier_type_items_SOFT_BODY, "SOFT_BODY"}, {modifier_type_items_SURFACE, "SURFACE"}};
	};

	const std::map<std::string, int> string_to_modifier_type_items = create_string_to_modifier_type_items();
	const std::map<int, std::string> modifier_type_items_to_string = create_modifier_type_items_to_string();

	modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<modifier_type_items_enum>(string_to_modifier_type_items.at(resstr)))
	}

	void type(modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", modifier_type_items_to_string.at(value))
	}

	bool show_viewport() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_viewport")
	}

	void show_viewport(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_viewport", value)
	}

	bool show_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_render")
	}

	void show_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_render", value)
	}

	bool show_in_editmode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_in_editmode")
	}

	void show_in_editmode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_in_editmode", value)
	}

	bool show_on_cage() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_on_cage")
	}

	void show_on_cage(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_on_cage", value)
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool use_apply_on_spline() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_apply_on_spline")
	}

	void use_apply_on_spline(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_apply_on_spline", value)
	}
};

class SubsurfModifier : public Modifier {
public:
	SubsurfModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SubsurfModifier() : Modifier(0) { }

	enum prop_subdivision_type_items_enum {
		prop_subdivision_type_items_CATMULL_CLARK = 0,	
		prop_subdivision_type_items_SIMPLE = 1	
	};

	std::map<std::string, int> create_string_to_prop_subdivision_type_items() {
		return {{"CATMULL_CLARK", prop_subdivision_type_items_CATMULL_CLARK}, {"SIMPLE", prop_subdivision_type_items_SIMPLE}};
	};

	std::map<int, std::string> create_prop_subdivision_type_items_to_string() {
		return {{prop_subdivision_type_items_CATMULL_CLARK, "CATMULL_CLARK"}, {prop_subdivision_type_items_SIMPLE, "SIMPLE"}};
	};

	const std::map<std::string, int> string_to_prop_subdivision_type_items = create_string_to_prop_subdivision_type_items();
	const std::map<int, std::string> prop_subdivision_type_items_to_string = create_prop_subdivision_type_items_to_string();

	prop_subdivision_type_items_enum subdivision_type() {
		STRING_TYPE_GETTER("subdivision_type", static_cast<prop_subdivision_type_items_enum>(string_to_prop_subdivision_type_items.at(resstr)))
	}

	void subdivision_type(prop_subdivision_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "subdivision_type", prop_subdivision_type_items_to_string.at(value))
	}

	int levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "levels")
	}

	void levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "levels", value)
	}

	int render_levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "render_levels")
	}

	void render_levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "render_levels", value)
	}

	bool show_only_control_edges() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_control_edges")
	}

	void show_only_control_edges(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_control_edges", value)
	}

	bool use_subsurf_uv() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_subsurf_uv")
	}

	void use_subsurf_uv(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_subsurf_uv", value)
	}
};

class LatticeModifier : public Modifier {
public:
	LatticeModifier(PyObject* pyobj) : Modifier(pyobj) {}
	LatticeModifier() : Modifier(0) { }

	Object object_value();

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}
};

class CurveModifier : public Modifier {
public:
	CurveModifier(PyObject* pyobj) : Modifier(pyobj) {}
	CurveModifier() : Modifier(0) { }

	Object object_value();

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	enum prop_deform_axis_items_enum {
		prop_deform_axis_items_POS_X = 1,	
		prop_deform_axis_items_POS_Y = 2,	
		prop_deform_axis_items_POS_Z = 3,	
		prop_deform_axis_items_NEG_X = 4,	
		prop_deform_axis_items_NEG_Y = 5,	
		prop_deform_axis_items_NEG_Z = 6	
	};

	std::map<std::string, int> create_string_to_prop_deform_axis_items() {
		return {{"POS_X", prop_deform_axis_items_POS_X}, {"POS_Y", prop_deform_axis_items_POS_Y}, {"POS_Z", prop_deform_axis_items_POS_Z}, {"NEG_X", prop_deform_axis_items_NEG_X}, {"NEG_Y", prop_deform_axis_items_NEG_Y}, {"NEG_Z", prop_deform_axis_items_NEG_Z}};
	};

	std::map<int, std::string> create_prop_deform_axis_items_to_string() {
		return {{prop_deform_axis_items_POS_X, "POS_X"}, {prop_deform_axis_items_POS_Y, "POS_Y"}, {prop_deform_axis_items_POS_Z, "POS_Z"}, {prop_deform_axis_items_NEG_X, "NEG_X"}, {prop_deform_axis_items_NEG_Y, "NEG_Y"}, {prop_deform_axis_items_NEG_Z, "NEG_Z"}};
	};

	const std::map<std::string, int> string_to_prop_deform_axis_items = create_string_to_prop_deform_axis_items();
	const std::map<int, std::string> prop_deform_axis_items_to_string = create_prop_deform_axis_items_to_string();

	prop_deform_axis_items_enum deform_axis() {
		STRING_TYPE_GETTER("deform_axis", static_cast<prop_deform_axis_items_enum>(string_to_prop_deform_axis_items.at(resstr)))
	}

	void deform_axis(prop_deform_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "deform_axis", prop_deform_axis_items_to_string.at(value))
	}
};

class BuildModifier : public Modifier {
public:
	BuildModifier(PyObject* pyobj) : Modifier(pyobj) {}
	BuildModifier() : Modifier(0) { }

	float frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_start")
	}

	void frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_start", value)
	}

	float frame_duration() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_duration")
	}

	void frame_duration(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_duration", value)
	}

	bool use_reverse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse")
	}

	void use_reverse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse", value)
	}

	bool use_random_order() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_random_order")
	}

	void use_random_order(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_random_order", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}
};

class MirrorModifier : public Modifier {
public:
	MirrorModifier(PyObject* pyobj) : Modifier(pyobj) {}
	MirrorModifier() : Modifier(0) { }

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z")
	}

	void use_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z", value)
	}

	bool use_clip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clip")
	}

	void use_clip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clip", value)
	}

	bool use_mirror_vertex_groups() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_vertex_groups")
	}

	void use_mirror_vertex_groups(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_vertex_groups", value)
	}

	bool use_mirror_merge() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_merge")
	}

	void use_mirror_merge(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_merge", value)
	}

	bool use_mirror_u() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_u")
	}

	void use_mirror_u(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_u", value)
	}

	bool use_mirror_v() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mirror_v")
	}

	void use_mirror_v(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mirror_v", value)
	}

	float merge_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "merge_threshold")
	}

	void merge_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "merge_threshold", value)
	}

	Object mirror_object();
};

class DecimateModifier : public Modifier {
public:
	DecimateModifier(PyObject* pyobj) : Modifier(pyobj) {}
	DecimateModifier() : Modifier(0) { }

	enum modifier_decim_mode_items_enum {
		modifier_decim_mode_items_COLLAPSE = 0,	
		modifier_decim_mode_items_UNSUBDIV = 1,	
		modifier_decim_mode_items_DISSOLVE = 2	
	};

	std::map<std::string, int> create_string_to_modifier_decim_mode_items() {
		return {{"COLLAPSE", modifier_decim_mode_items_COLLAPSE}, {"UNSUBDIV", modifier_decim_mode_items_UNSUBDIV}, {"DISSOLVE", modifier_decim_mode_items_DISSOLVE}};
	};

	std::map<int, std::string> create_modifier_decim_mode_items_to_string() {
		return {{modifier_decim_mode_items_COLLAPSE, "COLLAPSE"}, {modifier_decim_mode_items_UNSUBDIV, "UNSUBDIV"}, {modifier_decim_mode_items_DISSOLVE, "DISSOLVE"}};
	};

	const std::map<std::string, int> string_to_modifier_decim_mode_items = create_string_to_modifier_decim_mode_items();
	const std::map<int, std::string> modifier_decim_mode_items_to_string = create_modifier_decim_mode_items_to_string();

	modifier_decim_mode_items_enum decimate_type() {
		STRING_TYPE_GETTER("decimate_type", static_cast<modifier_decim_mode_items_enum>(string_to_modifier_decim_mode_items.at(resstr)))
	}

	void decimate_type(modifier_decim_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "decimate_type", modifier_decim_mode_items_to_string.at(value))
	}

	float ratio() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ratio")
	}

	void ratio(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ratio", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	float angle_limit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_limit")
	}

	void angle_limit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_limit", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}

	bool use_collapse_triangulate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_collapse_triangulate")
	}

	void use_collapse_triangulate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_collapse_triangulate", value)
	}

	float vertex_group_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "vertex_group_factor")
	}

	void vertex_group_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "vertex_group_factor", value)
	}

	bool use_dissolve_boundaries() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dissolve_boundaries")
	}

	void use_dissolve_boundaries(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dissolve_boundaries", value)
	}

	enum mesh_delimit_mode_items_enum {
		mesh_delimit_mode_items_NORMAL = 1,	
		mesh_delimit_mode_items_MATERIAL = 2,	
		mesh_delimit_mode_items_SEAM = 4,	
		mesh_delimit_mode_items_SHARP = 8,	
		mesh_delimit_mode_items_UV = 16	
	};

	std::map<std::string, int> create_string_to_mesh_delimit_mode_items() {
		return {{"NORMAL", mesh_delimit_mode_items_NORMAL}, {"MATERIAL", mesh_delimit_mode_items_MATERIAL}, {"SEAM", mesh_delimit_mode_items_SEAM}, {"SHARP", mesh_delimit_mode_items_SHARP}, {"UV", mesh_delimit_mode_items_UV}};
	};

	std::map<int, std::string> create_mesh_delimit_mode_items_to_string() {
		return {{mesh_delimit_mode_items_NORMAL, "NORMAL"}, {mesh_delimit_mode_items_MATERIAL, "MATERIAL"}, {mesh_delimit_mode_items_SEAM, "SEAM"}, {mesh_delimit_mode_items_SHARP, "SHARP"}, {mesh_delimit_mode_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_mesh_delimit_mode_items = create_string_to_mesh_delimit_mode_items();
	const std::map<int, std::string> mesh_delimit_mode_items_to_string = create_mesh_delimit_mode_items_to_string();

	mesh_delimit_mode_items_enum delimit() {
		STRING_TYPE_GETTER("delimit", static_cast<mesh_delimit_mode_items_enum>(string_to_mesh_delimit_mode_items.at(resstr)))
	}

	void delimit(mesh_delimit_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "delimit", mesh_delimit_mode_items_to_string.at(value))
	}

	int face_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "face_count")
	}

	void face_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "face_count", value)
	}
};

class WaveModifier : public Modifier {
public:
	WaveModifier(PyObject* pyobj) : Modifier(pyobj) {}
	WaveModifier() : Modifier(0) { }

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_cyclic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic")
	}

	void use_cyclic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic", value)
	}

	bool use_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal")
	}

	void use_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal", value)
	}

	bool use_normal_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal_x")
	}

	void use_normal_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal_x", value)
	}

	bool use_normal_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal_y")
	}

	void use_normal_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal_y", value)
	}

	bool use_normal_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal_z")
	}

	void use_normal_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal_z", value)
	}

	float time_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_offset")
	}

	void time_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_offset", value)
	}

	float lifetime() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lifetime")
	}

	void lifetime(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lifetime", value)
	}

	float damping_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping_time")
	}

	void damping_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping_time", value)
	}

	float falloff_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff_radius")
	}

	void falloff_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff_radius", value)
	}

	float start_position_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "start_position_x")
	}

	void start_position_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "start_position_x", value)
	}

	float start_position_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "start_position_y")
	}

	void start_position_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "start_position_y", value)
	}

	Object start_position_object();

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	float speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "speed")
	}

	void speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "speed", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	float width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width")
	}

	void width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width", value)
	}

	float narrowness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "narrowness")
	}

	void narrowness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "narrowness", value)
	}

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	enum prop_texture_coordinates_items_enum {
		prop_texture_coordinates_items_LOCAL = 0,	
		prop_texture_coordinates_items_GLOBAL = 1,	
		prop_texture_coordinates_items_OBJECT = 2,	
		prop_texture_coordinates_items_UV = 3	
	};

	std::map<std::string, int> create_string_to_prop_texture_coordinates_items() {
		return {{"LOCAL", prop_texture_coordinates_items_LOCAL}, {"GLOBAL", prop_texture_coordinates_items_GLOBAL}, {"OBJECT", prop_texture_coordinates_items_OBJECT}, {"UV", prop_texture_coordinates_items_UV}};
	};

	std::map<int, std::string> create_prop_texture_coordinates_items_to_string() {
		return {{prop_texture_coordinates_items_LOCAL, "LOCAL"}, {prop_texture_coordinates_items_GLOBAL, "GLOBAL"}, {prop_texture_coordinates_items_OBJECT, "OBJECT"}, {prop_texture_coordinates_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_prop_texture_coordinates_items = create_string_to_prop_texture_coordinates_items();
	const std::map<int, std::string> prop_texture_coordinates_items_to_string = create_prop_texture_coordinates_items_to_string();

	prop_texture_coordinates_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<prop_texture_coordinates_items_enum>(string_to_prop_texture_coordinates_items.at(resstr)))
	}

	void texture_coords(prop_texture_coordinates_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", prop_texture_coordinates_items_to_string.at(value))
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	Object texture_coords_object();
};

class ArmatureModifier : public Modifier {
public:
	ArmatureModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ArmatureModifier() : Modifier(0) { }

	Object object_value();

	bool use_bone_envelopes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bone_envelopes")
	}

	void use_bone_envelopes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bone_envelopes", value)
	}

	bool use_vertex_groups() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_vertex_groups")
	}

	void use_vertex_groups(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_vertex_groups", value)
	}

	bool use_deform_preserve_volume() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deform_preserve_volume")
	}

	void use_deform_preserve_volume(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deform_preserve_volume", value)
	}

	bool use_multi_modifier() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multi_modifier")
	}

	void use_multi_modifier(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multi_modifier", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}
};

class HookModifier : public Modifier {
public:
	HookModifier(PyObject* pyobj) : Modifier(pyobj) {}
	HookModifier() : Modifier(0) { }

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	enum modifier_warp_falloff_items_enum {
		modifier_warp_falloff_items_NONE = 0,	
		modifier_warp_falloff_items_CURVE = 1,	
		modifier_warp_falloff_items_SMOOTH = 3,	
		modifier_warp_falloff_items_SPHERE = 7,	
		modifier_warp_falloff_items_ROOT = 4,	
		modifier_warp_falloff_items_INVERSE_SQUARE = 8,	
		modifier_warp_falloff_items_SHARP = 2,	
		modifier_warp_falloff_items_LINEAR = 5,	
		modifier_warp_falloff_items_CONSTANT = 6	
	};

	std::map<std::string, int> create_string_to_modifier_warp_falloff_items() {
		return {{"NONE", modifier_warp_falloff_items_NONE}, {"CURVE", modifier_warp_falloff_items_CURVE}, {"SMOOTH", modifier_warp_falloff_items_SMOOTH}, {"SPHERE", modifier_warp_falloff_items_SPHERE}, {"ROOT", modifier_warp_falloff_items_ROOT}, {"INVERSE_SQUARE", modifier_warp_falloff_items_INVERSE_SQUARE}, {"SHARP", modifier_warp_falloff_items_SHARP}, {"LINEAR", modifier_warp_falloff_items_LINEAR}, {"CONSTANT", modifier_warp_falloff_items_CONSTANT}};
	};

	std::map<int, std::string> create_modifier_warp_falloff_items_to_string() {
		return {{modifier_warp_falloff_items_NONE, "NONE"}, {modifier_warp_falloff_items_CURVE, "CURVE"}, {modifier_warp_falloff_items_SMOOTH, "SMOOTH"}, {modifier_warp_falloff_items_SPHERE, "SPHERE"}, {modifier_warp_falloff_items_ROOT, "ROOT"}, {modifier_warp_falloff_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {modifier_warp_falloff_items_SHARP, "SHARP"}, {modifier_warp_falloff_items_LINEAR, "LINEAR"}, {modifier_warp_falloff_items_CONSTANT, "CONSTANT"}};
	};

	const std::map<std::string, int> string_to_modifier_warp_falloff_items = create_string_to_modifier_warp_falloff_items();
	const std::map<int, std::string> modifier_warp_falloff_items_to_string = create_modifier_warp_falloff_items_to_string();

	modifier_warp_falloff_items_enum falloff_type() {
		STRING_TYPE_GETTER("falloff_type", static_cast<modifier_warp_falloff_items_enum>(string_to_modifier_warp_falloff_items.at(resstr)))
	}

	void falloff_type(modifier_warp_falloff_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff_type", modifier_warp_falloff_items_to_string.at(value))
	}

	float falloff_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff_radius")
	}

	void falloff_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff_radius", value)
	}

	CurveMapping falloff_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "falloff_curve")
	}

	VFLOAT3 center() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "center", 3)
	}

	void center(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "center", 3)
	}

	Object object_value();

	std::string subtarget() {
		STRING_TYPE_GETTER("subtarget", resstr)
	}

	void subtarget(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subtarget", value)
	}

	bool use_falloff_uniform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_falloff_uniform")
	}

	void use_falloff_uniform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_falloff_uniform", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}
};

class SoftBodyModifier : public Modifier {
public:
	SoftBodyModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SoftBodyModifier() : Modifier(0) { }

	SoftBodySettings settings();

	PointCache point_cache();
};

class BooleanModifier : public Modifier {
public:
	BooleanModifier(PyObject* pyobj) : Modifier(pyobj) {}
	BooleanModifier() : Modifier(0) { }

	Object object_value();

	enum prop_operation_items_enum {
		prop_operation_items_INTERSECT = 0,	
		prop_operation_items_UNION = 1,	
		prop_operation_items_DIFFERENCE = 2	
	};

	std::map<std::string, int> create_string_to_prop_operation_items() {
		return {{"INTERSECT", prop_operation_items_INTERSECT}, {"UNION", prop_operation_items_UNION}, {"DIFFERENCE", prop_operation_items_DIFFERENCE}};
	};

	std::map<int, std::string> create_prop_operation_items_to_string() {
		return {{prop_operation_items_INTERSECT, "INTERSECT"}, {prop_operation_items_UNION, "UNION"}, {prop_operation_items_DIFFERENCE, "DIFFERENCE"}};
	};

	const std::map<std::string, int> string_to_prop_operation_items = create_string_to_prop_operation_items();
	const std::map<int, std::string> prop_operation_items_to_string = create_prop_operation_items_to_string();

	prop_operation_items_enum operation() {
		STRING_TYPE_GETTER("operation", static_cast<prop_operation_items_enum>(string_to_prop_operation_items.at(resstr)))
	}

	void operation(prop_operation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "operation", prop_operation_items_to_string.at(value))
	}
};

class ArrayModifier : public Modifier {
public:
	ArrayModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ArrayModifier() : Modifier(0) { }

	enum prop_fit_type_items_enum {
		prop_fit_type_items_FIXED_COUNT = 0,	
		prop_fit_type_items_FIT_LENGTH = 1,	
		prop_fit_type_items_FIT_CURVE = 2	
	};

	std::map<std::string, int> create_string_to_prop_fit_type_items() {
		return {{"FIXED_COUNT", prop_fit_type_items_FIXED_COUNT}, {"FIT_LENGTH", prop_fit_type_items_FIT_LENGTH}, {"FIT_CURVE", prop_fit_type_items_FIT_CURVE}};
	};

	std::map<int, std::string> create_prop_fit_type_items_to_string() {
		return {{prop_fit_type_items_FIXED_COUNT, "FIXED_COUNT"}, {prop_fit_type_items_FIT_LENGTH, "FIT_LENGTH"}, {prop_fit_type_items_FIT_CURVE, "FIT_CURVE"}};
	};

	const std::map<std::string, int> string_to_prop_fit_type_items = create_string_to_prop_fit_type_items();
	const std::map<int, std::string> prop_fit_type_items_to_string = create_prop_fit_type_items_to_string();

	prop_fit_type_items_enum fit_type() {
		STRING_TYPE_GETTER("fit_type", static_cast<prop_fit_type_items_enum>(string_to_prop_fit_type_items.at(resstr)))
	}

	void fit_type(prop_fit_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "fit_type", prop_fit_type_items_to_string.at(value))
	}

	int count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "count")
	}

	void count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "count", value)
	}

	float fit_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fit_length")
	}

	void fit_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fit_length", value)
	}

	Object curve();

	bool use_constant_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_constant_offset")
	}

	void use_constant_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_constant_offset", value)
	}

	VFLOAT3 constant_offset_displace() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "constant_offset_displace", 3)
	}

	void constant_offset_displace(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "constant_offset_displace", 3)
	}

	bool use_relative_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative_offset")
	}

	void use_relative_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative_offset", value)
	}

	VFLOAT3 relative_offset_displace() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "relative_offset_displace", 3)
	}

	void relative_offset_displace(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "relative_offset_displace", 3)
	}

	bool use_merge_vertices() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_merge_vertices")
	}

	void use_merge_vertices(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_merge_vertices", value)
	}

	bool use_merge_vertices_cap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_merge_vertices_cap")
	}

	void use_merge_vertices_cap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_merge_vertices_cap", value)
	}

	float merge_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "merge_threshold")
	}

	void merge_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "merge_threshold", value)
	}

	bool use_object_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_object_offset")
	}

	void use_object_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_object_offset", value)
	}

	Object offset_object();

	Object start_cap();

	Object end_cap();
};

class EdgeSplitModifier : public Modifier {
public:
	EdgeSplitModifier(PyObject* pyobj) : Modifier(pyobj) {}
	EdgeSplitModifier() : Modifier(0) { }

	float split_angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "split_angle")
	}

	void split_angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "split_angle", value)
	}

	bool use_edge_angle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_angle")
	}

	void use_edge_angle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_angle", value)
	}

	bool use_edge_sharp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_sharp")
	}

	void use_edge_sharp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_sharp", value)
	}
};

class DisplaceModifier : public Modifier {
public:
	DisplaceModifier(PyObject* pyobj) : Modifier(pyobj) {}
	DisplaceModifier() : Modifier(0) { }

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	float mid_level() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mid_level")
	}

	void mid_level(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mid_level", value)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	enum prop_direction_items_enum {
		prop_direction_items_X = 0,	
		prop_direction_items_Y = 1,	
		prop_direction_items_Z = 2,	
		prop_direction_items_NORMAL = 3,	
		prop_direction_items_RGB_TO_XYZ = 4	
	};

	std::map<std::string, int> create_string_to_prop_direction_items() {
		return {{"X", prop_direction_items_X}, {"Y", prop_direction_items_Y}, {"Z", prop_direction_items_Z}, {"NORMAL", prop_direction_items_NORMAL}, {"RGB_TO_XYZ", prop_direction_items_RGB_TO_XYZ}};
	};

	std::map<int, std::string> create_prop_direction_items_to_string() {
		return {{prop_direction_items_X, "X"}, {prop_direction_items_Y, "Y"}, {prop_direction_items_Z, "Z"}, {prop_direction_items_NORMAL, "NORMAL"}, {prop_direction_items_RGB_TO_XYZ, "RGB_TO_XYZ"}};
	};

	const std::map<std::string, int> string_to_prop_direction_items = create_string_to_prop_direction_items();
	const std::map<int, std::string> prop_direction_items_to_string = create_prop_direction_items_to_string();

	prop_direction_items_enum direction() {
		STRING_TYPE_GETTER("direction", static_cast<prop_direction_items_enum>(string_to_prop_direction_items.at(resstr)))
	}

	void direction(prop_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "direction", prop_direction_items_to_string.at(value))
	}

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	enum prop_texture_coordinates_items_enum {
		prop_texture_coordinates_items_LOCAL = 0,	
		prop_texture_coordinates_items_GLOBAL = 1,	
		prop_texture_coordinates_items_OBJECT = 2,	
		prop_texture_coordinates_items_UV = 3	
	};

	std::map<std::string, int> create_string_to_prop_texture_coordinates_items() {
		return {{"LOCAL", prop_texture_coordinates_items_LOCAL}, {"GLOBAL", prop_texture_coordinates_items_GLOBAL}, {"OBJECT", prop_texture_coordinates_items_OBJECT}, {"UV", prop_texture_coordinates_items_UV}};
	};

	std::map<int, std::string> create_prop_texture_coordinates_items_to_string() {
		return {{prop_texture_coordinates_items_LOCAL, "LOCAL"}, {prop_texture_coordinates_items_GLOBAL, "GLOBAL"}, {prop_texture_coordinates_items_OBJECT, "OBJECT"}, {prop_texture_coordinates_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_prop_texture_coordinates_items = create_string_to_prop_texture_coordinates_items();
	const std::map<int, std::string> prop_texture_coordinates_items_to_string = create_prop_texture_coordinates_items_to_string();

	prop_texture_coordinates_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<prop_texture_coordinates_items_enum>(string_to_prop_texture_coordinates_items.at(resstr)))
	}

	void texture_coords(prop_texture_coordinates_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", prop_texture_coordinates_items_to_string.at(value))
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	Object texture_coords_object();
};

class UVProjectModifier : public Modifier {
public:
	UVProjectModifier(PyObject* pyobj) : Modifier(pyobj) {}
	UVProjectModifier() : Modifier(0) { }

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	int projector_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "projector_count")
	}

	void projector_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "projector_count", value)
	}

	std::map<std::string, UVProjector> projectors();

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	float aspect_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "aspect_x")
	}

	void aspect_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "aspect_x", value)
	}

	float aspect_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "aspect_y")
	}

	void aspect_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "aspect_y", value)
	}

	float scale_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_x")
	}

	void scale_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_x", value)
	}

	float scale_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_y")
	}

	void scale_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_y", value)
	}

	bool use_image_override() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_image_override")
	}

	void use_image_override(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_image_override", value)
	}
};

class UVProjector : public pyUniplug {
public:
	UVProjector(PyObject* pyobj) : pyUniplug(pyobj) {}
	UVProjector() : pyUniplug(0) { }

	Object object_value();
};

class SmoothModifier : public Modifier {
public:
	SmoothModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SmoothModifier() : Modifier(0) { }

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z")
	}

	void use_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z", value)
	}

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}
};

class CorrectiveSmoothModifier : public Modifier {
public:
	CorrectiveSmoothModifier(PyObject* pyobj) : Modifier(pyobj) {}
	CorrectiveSmoothModifier() : Modifier(0) { }

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	enum modifier_rest_source_items_enum {
		modifier_rest_source_items_ORCO = 0,	
		modifier_rest_source_items_BIND = 1	
	};

	std::map<std::string, int> create_string_to_modifier_rest_source_items() {
		return {{"ORCO", modifier_rest_source_items_ORCO}, {"BIND", modifier_rest_source_items_BIND}};
	};

	std::map<int, std::string> create_modifier_rest_source_items_to_string() {
		return {{modifier_rest_source_items_ORCO, "ORCO"}, {modifier_rest_source_items_BIND, "BIND"}};
	};

	const std::map<std::string, int> string_to_modifier_rest_source_items = create_string_to_modifier_rest_source_items();
	const std::map<int, std::string> modifier_rest_source_items_to_string = create_modifier_rest_source_items_to_string();

	modifier_rest_source_items_enum rest_source() {
		STRING_TYPE_GETTER("rest_source", static_cast<modifier_rest_source_items_enum>(string_to_modifier_rest_source_items.at(resstr)))
	}

	void rest_source(modifier_rest_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "rest_source", modifier_rest_source_items_to_string.at(value))
	}

	enum modifier_smooth_type_items_enum {
		modifier_smooth_type_items_SIMPLE = 0,	
		modifier_smooth_type_items_LENGTH_WEIGHTED = 1	
	};

	std::map<std::string, int> create_string_to_modifier_smooth_type_items() {
		return {{"SIMPLE", modifier_smooth_type_items_SIMPLE}, {"LENGTH_WEIGHTED", modifier_smooth_type_items_LENGTH_WEIGHTED}};
	};

	std::map<int, std::string> create_modifier_smooth_type_items_to_string() {
		return {{modifier_smooth_type_items_SIMPLE, "SIMPLE"}, {modifier_smooth_type_items_LENGTH_WEIGHTED, "LENGTH_WEIGHTED"}};
	};

	const std::map<std::string, int> string_to_modifier_smooth_type_items = create_string_to_modifier_smooth_type_items();
	const std::map<int, std::string> modifier_smooth_type_items_to_string = create_modifier_smooth_type_items_to_string();

	modifier_smooth_type_items_enum smooth_type() {
		STRING_TYPE_GETTER("smooth_type", static_cast<modifier_smooth_type_items_enum>(string_to_modifier_smooth_type_items.at(resstr)))
	}

	void smooth_type(modifier_smooth_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "smooth_type", modifier_smooth_type_items_to_string.at(value))
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool is_bind() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_bind")
	}

	void is_bind(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_bind", value)
	}

	bool use_only_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_smooth")
	}

	void use_only_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_smooth", value)
	}

	bool use_pin_boundary() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pin_boundary")
	}

	void use_pin_boundary(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pin_boundary", value)
	}
};

class CastModifier : public Modifier {
public:
	CastModifier(PyObject* pyobj) : Modifier(pyobj) {}
	CastModifier() : Modifier(0) { }

	enum prop_cast_type_items_enum {
		prop_cast_type_items_SPHERE = 0,	
		prop_cast_type_items_CYLINDER = 1,	
		prop_cast_type_items_CUBOID = 2	
	};

	std::map<std::string, int> create_string_to_prop_cast_type_items() {
		return {{"SPHERE", prop_cast_type_items_SPHERE}, {"CYLINDER", prop_cast_type_items_CYLINDER}, {"CUBOID", prop_cast_type_items_CUBOID}};
	};

	std::map<int, std::string> create_prop_cast_type_items_to_string() {
		return {{prop_cast_type_items_SPHERE, "SPHERE"}, {prop_cast_type_items_CYLINDER, "CYLINDER"}, {prop_cast_type_items_CUBOID, "CUBOID"}};
	};

	const std::map<std::string, int> string_to_prop_cast_type_items = create_string_to_prop_cast_type_items();
	const std::map<int, std::string> prop_cast_type_items_to_string = create_prop_cast_type_items_to_string();

	prop_cast_type_items_enum cast_type() {
		STRING_TYPE_GETTER("cast_type", static_cast<prop_cast_type_items_enum>(string_to_prop_cast_type_items.at(resstr)))
	}

	void cast_type(prop_cast_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "cast_type", prop_cast_type_items_to_string.at(value))
	}

	Object object_value();

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z")
	}

	void use_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z", value)
	}

	bool use_radius_as_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_radius_as_size")
	}

	void use_radius_as_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_radius_as_size", value)
	}

	bool use_transform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_transform")
	}

	void use_transform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_transform", value)
	}

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	float radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radius")
	}

	void radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radius", value)
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}
};

class MeshDeformModifier : public Modifier {
public:
	MeshDeformModifier(PyObject* pyobj) : Modifier(pyobj) {}
	MeshDeformModifier() : Modifier(0) { }

	Object object_value();

	bool is_bound() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_bound")
	}

	void is_bound(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_bound", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	int precision() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "precision")
	}

	void precision(int value) {
		PRIMITIVE_TYPES_SETTER("i", "precision", value)
	}

	bool use_dynamic_bind() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dynamic_bind")
	}

	void use_dynamic_bind(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dynamic_bind", value)
	}
};

class ParticleSystemModifier : public Modifier {
public:
	ParticleSystemModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ParticleSystemModifier() : Modifier(0) { }

	ParticleSystem particle_system();
};

class ParticleInstanceModifier : public Modifier {
public:
	ParticleInstanceModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ParticleInstanceModifier() : Modifier(0) { }

	Object object_value();

	int particle_system_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "particle_system_index")
	}

	void particle_system_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "particle_system_index", value)
	}

	enum particleinstance_axis_enum {
		particleinstance_axis_X = 0,	
		particleinstance_axis_Y = 1,	
		particleinstance_axis_Z = 2	
	};

	std::map<std::string, int> create_string_to_particleinstance_axis() {
		return {{"X", particleinstance_axis_X}, {"Y", particleinstance_axis_Y}, {"Z", particleinstance_axis_Z}};
	};

	std::map<int, std::string> create_particleinstance_axis_to_string() {
		return {{particleinstance_axis_X, "X"}, {particleinstance_axis_Y, "Y"}, {particleinstance_axis_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_particleinstance_axis = create_string_to_particleinstance_axis();
	const std::map<int, std::string> particleinstance_axis_to_string = create_particleinstance_axis_to_string();

	particleinstance_axis_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<particleinstance_axis_enum>(string_to_particleinstance_axis.at(resstr)))
	}

	void axis(particleinstance_axis_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", particleinstance_axis_to_string.at(value))
	}

	bool use_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal")
	}

	void use_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal", value)
	}

	bool use_children() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_children")
	}

	void use_children(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_children", value)
	}

	bool use_path() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_path")
	}

	void use_path(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_path", value)
	}

	bool show_unborn() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_unborn")
	}

	void show_unborn(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_unborn", value)
	}

	bool show_alive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_alive")
	}

	void show_alive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_alive", value)
	}

	bool show_dead() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_dead")
	}

	void show_dead(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_dead", value)
	}

	bool use_preserve_shape() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preserve_shape")
	}

	void use_preserve_shape(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preserve_shape", value)
	}

	bool use_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_size")
	}

	void use_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_size", value)
	}

	float position() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "position")
	}

	void position(float value) {
		PRIMITIVE_TYPES_SETTER("f", "position", value)
	}

	float random_position() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "random_position")
	}

	void random_position(float value) {
		PRIMITIVE_TYPES_SETTER("f", "random_position", value)
	}
};

class ExplodeModifier : public Modifier {
public:
	ExplodeModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ExplodeModifier() : Modifier(0) { }

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	float protect() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "protect")
	}

	void protect(float value) {
		PRIMITIVE_TYPES_SETTER("f", "protect", value)
	}

	bool use_edge_cut() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_cut")
	}

	void use_edge_cut(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_cut", value)
	}

	bool show_unborn() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_unborn")
	}

	void show_unborn(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_unborn", value)
	}

	bool show_alive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_alive")
	}

	void show_alive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_alive", value)
	}

	bool show_dead() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_dead")
	}

	void show_dead(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_dead", value)
	}

	bool use_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_size")
	}

	void use_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_size", value)
	}

	std::string particle_uv() {
		STRING_TYPE_GETTER("particle_uv", resstr)
	}

	void particle_uv(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "particle_uv", value)
	}
};

class ClothModifier : public Modifier {
public:
	ClothModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ClothModifier() : Modifier(0) { }

	ClothSettings settings() {
		CLASS_TYPES_GETTER(ClothSettings, "settings")
	}

	ClothCollisionSettings collision_settings() {
		CLASS_TYPES_GETTER(ClothCollisionSettings, "collision_settings")
	}

	ClothSolverResult solver_result() {
		CLASS_TYPES_GETTER(ClothSolverResult, "solver_result")
	}

	PointCache point_cache();

	VFLOAT3 hair_grid_min() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "hair_grid_min", 3)
	}

	void hair_grid_min(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "hair_grid_min", 3)
	}

	VFLOAT3 hair_grid_max() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "hair_grid_max", 3)
	}

	void hair_grid_max(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "hair_grid_max", 3)
	}

	std::array<int, 3> hair_grid_resolution() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "hair_grid_resolution", 3)
	}

	void hair_grid_resolution(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "hair_grid_resolution", 3)
	}
};

class CollisionModifier : public Modifier {
public:
	CollisionModifier(PyObject* pyobj) : Modifier(pyobj) {}
	CollisionModifier() : Modifier(0) { }

	CollisionSettings settings();
};

class BevelModifier : public Modifier {
public:
	BevelModifier(PyObject* pyobj) : Modifier(pyobj) {}
	BevelModifier() : Modifier(0) { }

	float width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width")
	}

	void width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width", value)
	}

	int segments() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "segments")
	}

	void segments(int value) {
		PRIMITIVE_TYPES_SETTER("i", "segments", value)
	}

	bool use_only_vertices() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_vertices")
	}

	void use_only_vertices(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_vertices", value)
	}

	enum prop_limit_method_items_enum {
		prop_limit_method_items_NONE = 0,	
		prop_limit_method_items_ANGLE = 8,	
		prop_limit_method_items_WEIGHT = 16,	
		prop_limit_method_items_VGROUP = 32	
	};

	std::map<std::string, int> create_string_to_prop_limit_method_items() {
		return {{"NONE", prop_limit_method_items_NONE}, {"ANGLE", prop_limit_method_items_ANGLE}, {"WEIGHT", prop_limit_method_items_WEIGHT}, {"VGROUP", prop_limit_method_items_VGROUP}};
	};

	std::map<int, std::string> create_prop_limit_method_items_to_string() {
		return {{prop_limit_method_items_NONE, "NONE"}, {prop_limit_method_items_ANGLE, "ANGLE"}, {prop_limit_method_items_WEIGHT, "WEIGHT"}, {prop_limit_method_items_VGROUP, "VGROUP"}};
	};

	const std::map<std::string, int> string_to_prop_limit_method_items = create_string_to_prop_limit_method_items();
	const std::map<int, std::string> prop_limit_method_items_to_string = create_prop_limit_method_items_to_string();

	prop_limit_method_items_enum limit_method() {
		STRING_TYPE_GETTER("limit_method", static_cast<prop_limit_method_items_enum>(string_to_prop_limit_method_items.at(resstr)))
	}

	void limit_method(prop_limit_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit_method", prop_limit_method_items_to_string.at(value))
	}

	enum prop_edge_weight_method_items_enum {
		prop_edge_weight_method_items_AVERAGE = 0,	
		prop_edge_weight_method_items_SHARPEST = 128,	
		prop_edge_weight_method_items_LARGEST = 256	
	};

	std::map<std::string, int> create_string_to_prop_edge_weight_method_items() {
		return {{"AVERAGE", prop_edge_weight_method_items_AVERAGE}, {"SHARPEST", prop_edge_weight_method_items_SHARPEST}, {"LARGEST", prop_edge_weight_method_items_LARGEST}};
	};

	std::map<int, std::string> create_prop_edge_weight_method_items_to_string() {
		return {{prop_edge_weight_method_items_AVERAGE, "AVERAGE"}, {prop_edge_weight_method_items_SHARPEST, "SHARPEST"}, {prop_edge_weight_method_items_LARGEST, "LARGEST"}};
	};

	const std::map<std::string, int> string_to_prop_edge_weight_method_items = create_string_to_prop_edge_weight_method_items();
	const std::map<int, std::string> prop_edge_weight_method_items_to_string = create_prop_edge_weight_method_items_to_string();

	prop_edge_weight_method_items_enum edge_weight_method() {
		STRING_TYPE_GETTER("edge_weight_method", static_cast<prop_edge_weight_method_items_enum>(string_to_prop_edge_weight_method_items.at(resstr)))
	}

	void edge_weight_method(prop_edge_weight_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edge_weight_method", prop_edge_weight_method_items_to_string.at(value))
	}

	float angle_limit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_limit")
	}

	void angle_limit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_limit", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool use_clamp_overlap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp_overlap")
	}

	void use_clamp_overlap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp_overlap", value)
	}

	enum prop_val_type_items_enum {
		prop_val_type_items_OFFSET = 0,	
		prop_val_type_items_WIDTH = 1,	
		prop_val_type_items_DEPTH = 2,	
		prop_val_type_items_PERCENT = 3	
	};

	std::map<std::string, int> create_string_to_prop_val_type_items() {
		return {{"OFFSET", prop_val_type_items_OFFSET}, {"WIDTH", prop_val_type_items_WIDTH}, {"DEPTH", prop_val_type_items_DEPTH}, {"PERCENT", prop_val_type_items_PERCENT}};
	};

	std::map<int, std::string> create_prop_val_type_items_to_string() {
		return {{prop_val_type_items_OFFSET, "OFFSET"}, {prop_val_type_items_WIDTH, "WIDTH"}, {prop_val_type_items_DEPTH, "DEPTH"}, {prop_val_type_items_PERCENT, "PERCENT"}};
	};

	const std::map<std::string, int> string_to_prop_val_type_items = create_string_to_prop_val_type_items();
	const std::map<int, std::string> prop_val_type_items_to_string = create_prop_val_type_items_to_string();

	prop_val_type_items_enum offset_type() {
		STRING_TYPE_GETTER("offset_type", static_cast<prop_val_type_items_enum>(string_to_prop_val_type_items.at(resstr)))
	}

	void offset_type(prop_val_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "offset_type", prop_val_type_items_to_string.at(value))
	}

	float profile() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "profile")
	}

	void profile(float value) {
		PRIMITIVE_TYPES_SETTER("f", "profile", value)
	}

	int material() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material")
	}

	void material(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material", value)
	}

	bool loop_slide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "loop_slide")
	}

	void loop_slide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "loop_slide", value)
	}
};

class ShrinkwrapModifier : public Modifier {
public:
	ShrinkwrapModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ShrinkwrapModifier() : Modifier(0) { }

	enum shrink_type_items_enum {
		shrink_type_items_NEAREST_SURFACEPOINT = 0,	
		shrink_type_items_PROJECT = 1,	
		shrink_type_items_NEAREST_VERTEX = 2	
	};

	std::map<std::string, int> create_string_to_shrink_type_items() {
		return {{"NEAREST_SURFACEPOINT", shrink_type_items_NEAREST_SURFACEPOINT}, {"PROJECT", shrink_type_items_PROJECT}, {"NEAREST_VERTEX", shrink_type_items_NEAREST_VERTEX}};
	};

	std::map<int, std::string> create_shrink_type_items_to_string() {
		return {{shrink_type_items_NEAREST_SURFACEPOINT, "NEAREST_SURFACEPOINT"}, {shrink_type_items_PROJECT, "PROJECT"}, {shrink_type_items_NEAREST_VERTEX, "NEAREST_VERTEX"}};
	};

	const std::map<std::string, int> string_to_shrink_type_items = create_string_to_shrink_type_items();
	const std::map<int, std::string> shrink_type_items_to_string = create_shrink_type_items_to_string();

	shrink_type_items_enum wrap_method() {
		STRING_TYPE_GETTER("wrap_method", static_cast<shrink_type_items_enum>(string_to_shrink_type_items.at(resstr)))
	}

	void wrap_method(shrink_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "wrap_method", shrink_type_items_to_string.at(value))
	}

	enum shrink_face_cull_items_enum {
		shrink_face_cull_items_OFF = 0,	
		shrink_face_cull_items_FRONT = 8,	
		shrink_face_cull_items_BACK = 16	
	};

	std::map<std::string, int> create_string_to_shrink_face_cull_items() {
		return {{"OFF", shrink_face_cull_items_OFF}, {"FRONT", shrink_face_cull_items_FRONT}, {"BACK", shrink_face_cull_items_BACK}};
	};

	std::map<int, std::string> create_shrink_face_cull_items_to_string() {
		return {{shrink_face_cull_items_OFF, "OFF"}, {shrink_face_cull_items_FRONT, "FRONT"}, {shrink_face_cull_items_BACK, "BACK"}};
	};

	const std::map<std::string, int> string_to_shrink_face_cull_items = create_string_to_shrink_face_cull_items();
	const std::map<int, std::string> shrink_face_cull_items_to_string = create_shrink_face_cull_items_to_string();

	shrink_face_cull_items_enum cull_face() {
		STRING_TYPE_GETTER("cull_face", static_cast<shrink_face_cull_items_enum>(string_to_shrink_face_cull_items.at(resstr)))
	}

	void cull_face(shrink_face_cull_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "cull_face", shrink_face_cull_items_to_string.at(value))
	}

	Object target();

	Object auxiliary_target();

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	float project_limit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "project_limit")
	}

	void project_limit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "project_limit", value)
	}

	bool use_project_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_project_x")
	}

	void use_project_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_project_x", value)
	}

	bool use_project_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_project_y")
	}

	void use_project_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_project_y", value)
	}

	bool use_project_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_project_z")
	}

	void use_project_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_project_z", value)
	}

	int subsurf_levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "subsurf_levels")
	}

	void subsurf_levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "subsurf_levels", value)
	}

	bool use_negative_direction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_negative_direction")
	}

	void use_negative_direction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_negative_direction", value)
	}

	bool use_positive_direction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_positive_direction")
	}

	void use_positive_direction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_positive_direction", value)
	}

	bool use_keep_above_surface() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keep_above_surface")
	}

	void use_keep_above_surface(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keep_above_surface", value)
	}
};

class FluidSimulationModifier : public Modifier {
public:
	FluidSimulationModifier(PyObject* pyobj) : Modifier(pyobj) {}
	FluidSimulationModifier() : Modifier(0) { }

	FluidSettings settings() {
		CLASS_TYPES_GETTER(FluidSettings, "settings")
	}
};

class MaskModifier : public Modifier {
public:
	MaskModifier(PyObject* pyobj) : Modifier(pyobj) {}
	MaskModifier() : Modifier(0) { }

	enum modifier_mask_mode_items_enum {
		modifier_mask_mode_items_VERTEX_GROUP = 0,	
		modifier_mask_mode_items_ARMATURE = 1	
	};

	std::map<std::string, int> create_string_to_modifier_mask_mode_items() {
		return {{"VERTEX_GROUP", modifier_mask_mode_items_VERTEX_GROUP}, {"ARMATURE", modifier_mask_mode_items_ARMATURE}};
	};

	std::map<int, std::string> create_modifier_mask_mode_items_to_string() {
		return {{modifier_mask_mode_items_VERTEX_GROUP, "VERTEX_GROUP"}, {modifier_mask_mode_items_ARMATURE, "ARMATURE"}};
	};

	const std::map<std::string, int> string_to_modifier_mask_mode_items = create_string_to_modifier_mask_mode_items();
	const std::map<int, std::string> modifier_mask_mode_items_to_string = create_modifier_mask_mode_items_to_string();

	modifier_mask_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<modifier_mask_mode_items_enum>(string_to_modifier_mask_mode_items.at(resstr)))
	}

	void mode(modifier_mask_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", modifier_mask_mode_items_to_string.at(value))
	}

	Object armature();

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}
};

class SimpleDeformModifier : public Modifier {
public:
	SimpleDeformModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SimpleDeformModifier() : Modifier(0) { }

	enum simple_deform_mode_items_enum {
		simple_deform_mode_items_TWIST = 1,	
		simple_deform_mode_items_BEND = 2,	
		simple_deform_mode_items_TAPER = 3,	
		simple_deform_mode_items_STRETCH = 4	
	};

	std::map<std::string, int> create_string_to_simple_deform_mode_items() {
		return {{"TWIST", simple_deform_mode_items_TWIST}, {"BEND", simple_deform_mode_items_BEND}, {"TAPER", simple_deform_mode_items_TAPER}, {"STRETCH", simple_deform_mode_items_STRETCH}};
	};

	std::map<int, std::string> create_simple_deform_mode_items_to_string() {
		return {{simple_deform_mode_items_TWIST, "TWIST"}, {simple_deform_mode_items_BEND, "BEND"}, {simple_deform_mode_items_TAPER, "TAPER"}, {simple_deform_mode_items_STRETCH, "STRETCH"}};
	};

	const std::map<std::string, int> string_to_simple_deform_mode_items = create_string_to_simple_deform_mode_items();
	const std::map<int, std::string> simple_deform_mode_items_to_string = create_simple_deform_mode_items_to_string();

	simple_deform_mode_items_enum deform_method() {
		STRING_TYPE_GETTER("deform_method", static_cast<simple_deform_mode_items_enum>(string_to_simple_deform_mode_items.at(resstr)))
	}

	void deform_method(simple_deform_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "deform_method", simple_deform_mode_items_to_string.at(value))
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	Object origin();

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	VFLOAT2 limits() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "limits", 2)
	}

	void limits(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "limits", 2)
	}

	bool lock_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_x")
	}

	void lock_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_x", value)
	}

	bool lock_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_y")
	}

	void lock_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_y", value)
	}
};

class WarpModifier : public Modifier {
public:
	WarpModifier(PyObject* pyobj) : Modifier(pyobj) {}
	WarpModifier() : Modifier(0) { }

	Object object_from();

	Object object_to();

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	enum modifier_warp_falloff_items_enum {
		modifier_warp_falloff_items_NONE = 0,	
		modifier_warp_falloff_items_CURVE = 1,	
		modifier_warp_falloff_items_SMOOTH = 3,	
		modifier_warp_falloff_items_SPHERE = 7,	
		modifier_warp_falloff_items_ROOT = 4,	
		modifier_warp_falloff_items_INVERSE_SQUARE = 8,	
		modifier_warp_falloff_items_SHARP = 2,	
		modifier_warp_falloff_items_LINEAR = 5,	
		modifier_warp_falloff_items_CONSTANT = 6	
	};

	std::map<std::string, int> create_string_to_modifier_warp_falloff_items() {
		return {{"NONE", modifier_warp_falloff_items_NONE}, {"CURVE", modifier_warp_falloff_items_CURVE}, {"SMOOTH", modifier_warp_falloff_items_SMOOTH}, {"SPHERE", modifier_warp_falloff_items_SPHERE}, {"ROOT", modifier_warp_falloff_items_ROOT}, {"INVERSE_SQUARE", modifier_warp_falloff_items_INVERSE_SQUARE}, {"SHARP", modifier_warp_falloff_items_SHARP}, {"LINEAR", modifier_warp_falloff_items_LINEAR}, {"CONSTANT", modifier_warp_falloff_items_CONSTANT}};
	};

	std::map<int, std::string> create_modifier_warp_falloff_items_to_string() {
		return {{modifier_warp_falloff_items_NONE, "NONE"}, {modifier_warp_falloff_items_CURVE, "CURVE"}, {modifier_warp_falloff_items_SMOOTH, "SMOOTH"}, {modifier_warp_falloff_items_SPHERE, "SPHERE"}, {modifier_warp_falloff_items_ROOT, "ROOT"}, {modifier_warp_falloff_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {modifier_warp_falloff_items_SHARP, "SHARP"}, {modifier_warp_falloff_items_LINEAR, "LINEAR"}, {modifier_warp_falloff_items_CONSTANT, "CONSTANT"}};
	};

	const std::map<std::string, int> string_to_modifier_warp_falloff_items = create_string_to_modifier_warp_falloff_items();
	const std::map<int, std::string> modifier_warp_falloff_items_to_string = create_modifier_warp_falloff_items_to_string();

	modifier_warp_falloff_items_enum falloff_type() {
		STRING_TYPE_GETTER("falloff_type", static_cast<modifier_warp_falloff_items_enum>(string_to_modifier_warp_falloff_items.at(resstr)))
	}

	void falloff_type(modifier_warp_falloff_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff_type", modifier_warp_falloff_items_to_string.at(value))
	}

	float falloff_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff_radius")
	}

	void falloff_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff_radius", value)
	}

	CurveMapping falloff_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "falloff_curve")
	}

	bool use_volume_preserve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_volume_preserve")
	}

	void use_volume_preserve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_volume_preserve", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	enum prop_texture_coordinates_items_enum {
		prop_texture_coordinates_items_LOCAL = 0,	
		prop_texture_coordinates_items_GLOBAL = 1,	
		prop_texture_coordinates_items_OBJECT = 2,	
		prop_texture_coordinates_items_UV = 3	
	};

	std::map<std::string, int> create_string_to_prop_texture_coordinates_items() {
		return {{"LOCAL", prop_texture_coordinates_items_LOCAL}, {"GLOBAL", prop_texture_coordinates_items_GLOBAL}, {"OBJECT", prop_texture_coordinates_items_OBJECT}, {"UV", prop_texture_coordinates_items_UV}};
	};

	std::map<int, std::string> create_prop_texture_coordinates_items_to_string() {
		return {{prop_texture_coordinates_items_LOCAL, "LOCAL"}, {prop_texture_coordinates_items_GLOBAL, "GLOBAL"}, {prop_texture_coordinates_items_OBJECT, "OBJECT"}, {prop_texture_coordinates_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_prop_texture_coordinates_items = create_string_to_prop_texture_coordinates_items();
	const std::map<int, std::string> prop_texture_coordinates_items_to_string = create_prop_texture_coordinates_items_to_string();

	prop_texture_coordinates_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<prop_texture_coordinates_items_enum>(string_to_prop_texture_coordinates_items.at(resstr)))
	}

	void texture_coords(prop_texture_coordinates_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", prop_texture_coordinates_items_to_string.at(value))
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	Object texture_coords_object();
};

class MultiresModifier : public Modifier {
public:
	MultiresModifier(PyObject* pyobj) : Modifier(pyobj) {}
	MultiresModifier() : Modifier(0) { }

	enum prop_subdivision_type_items_enum {
		prop_subdivision_type_items_CATMULL_CLARK = 0,	
		prop_subdivision_type_items_SIMPLE = 1	
	};

	std::map<std::string, int> create_string_to_prop_subdivision_type_items() {
		return {{"CATMULL_CLARK", prop_subdivision_type_items_CATMULL_CLARK}, {"SIMPLE", prop_subdivision_type_items_SIMPLE}};
	};

	std::map<int, std::string> create_prop_subdivision_type_items_to_string() {
		return {{prop_subdivision_type_items_CATMULL_CLARK, "CATMULL_CLARK"}, {prop_subdivision_type_items_SIMPLE, "SIMPLE"}};
	};

	const std::map<std::string, int> string_to_prop_subdivision_type_items = create_string_to_prop_subdivision_type_items();
	const std::map<int, std::string> prop_subdivision_type_items_to_string = create_prop_subdivision_type_items_to_string();

	prop_subdivision_type_items_enum subdivision_type() {
		STRING_TYPE_GETTER("subdivision_type", static_cast<prop_subdivision_type_items_enum>(string_to_prop_subdivision_type_items.at(resstr)))
	}

	void subdivision_type(prop_subdivision_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "subdivision_type", prop_subdivision_type_items_to_string.at(value))
	}

	int levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "levels")
	}

	void levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "levels", value)
	}

	int sculpt_levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "sculpt_levels")
	}

	void sculpt_levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "sculpt_levels", value)
	}

	int render_levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "render_levels")
	}

	void render_levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "render_levels", value)
	}

	int total_levels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "total_levels")
	}

	void total_levels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "total_levels", value)
	}

	bool is_external() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_external")
	}

	void is_external(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_external", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool show_only_control_edges() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_control_edges")
	}

	void show_only_control_edges(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_control_edges", value)
	}

	bool use_subsurf_uv() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_subsurf_uv")
	}

	void use_subsurf_uv(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_subsurf_uv", value)
	}
};

class SurfaceModifier : public Modifier {
public:
	SurfaceModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SurfaceModifier() : Modifier(0) { }
};

class SmokeModifier : public Modifier {
public:
	SmokeModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SmokeModifier() : Modifier(0) { }

	SmokeDomainSettings domain_settings();

	SmokeFlowSettings flow_settings();

	SmokeCollSettings coll_settings();

	enum prop_smoke_type_items_enum {
		prop_smoke_type_items_NONE = 0,	
		prop_smoke_type_items_DOMAIN = 1,	
		prop_smoke_type_items_FLOW = 2,	
		prop_smoke_type_items_COLLISION = 4	
	};

	std::map<std::string, int> create_string_to_prop_smoke_type_items() {
		return {{"NONE", prop_smoke_type_items_NONE}, {"DOMAIN", prop_smoke_type_items_DOMAIN}, {"FLOW", prop_smoke_type_items_FLOW}, {"COLLISION", prop_smoke_type_items_COLLISION}};
	};

	std::map<int, std::string> create_prop_smoke_type_items_to_string() {
		return {{prop_smoke_type_items_NONE, "NONE"}, {prop_smoke_type_items_DOMAIN, "DOMAIN"}, {prop_smoke_type_items_FLOW, "FLOW"}, {prop_smoke_type_items_COLLISION, "COLLISION"}};
	};

	const std::map<std::string, int> string_to_prop_smoke_type_items = create_string_to_prop_smoke_type_items();
	const std::map<int, std::string> prop_smoke_type_items_to_string = create_prop_smoke_type_items_to_string();

	prop_smoke_type_items_enum smoke_type() {
		STRING_TYPE_GETTER("smoke_type", static_cast<prop_smoke_type_items_enum>(string_to_prop_smoke_type_items.at(resstr)))
	}

	void smoke_type(prop_smoke_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "smoke_type", prop_smoke_type_items_to_string.at(value))
	}
};

class SolidifyModifier : public Modifier {
public:
	SolidifyModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SolidifyModifier() : Modifier(0) { }

	float thickness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness")
	}

	void thickness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness", value)
	}

	float thickness_clamp() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_clamp")
	}

	void thickness_clamp(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_clamp", value)
	}

	float thickness_vertex_group() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_vertex_group")
	}

	void thickness_vertex_group(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_vertex_group", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	float edge_crease_inner() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "edge_crease_inner")
	}

	void edge_crease_inner(float value) {
		PRIMITIVE_TYPES_SETTER("f", "edge_crease_inner", value)
	}

	float edge_crease_outer() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "edge_crease_outer")
	}

	void edge_crease_outer(float value) {
		PRIMITIVE_TYPES_SETTER("f", "edge_crease_outer", value)
	}

	float edge_crease_rim() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "edge_crease_rim")
	}

	void edge_crease_rim(float value) {
		PRIMITIVE_TYPES_SETTER("f", "edge_crease_rim", value)
	}

	int material_offset() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material_offset")
	}

	void material_offset(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material_offset", value)
	}

	int material_offset_rim() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material_offset_rim")
	}

	void material_offset_rim(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material_offset_rim", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool use_rim() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rim")
	}

	void use_rim(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rim", value)
	}

	bool use_even_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_even_offset")
	}

	void use_even_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_even_offset", value)
	}

	bool use_quality_normals() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_quality_normals")
	}

	void use_quality_normals(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_quality_normals", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}

	bool use_flip_normals() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_normals")
	}

	void use_flip_normals(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_normals", value)
	}

	bool use_rim_only() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rim_only")
	}

	void use_rim_only(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rim_only", value)
	}
};

class ScrewModifier : public Modifier {
public:
	ScrewModifier(PyObject* pyobj) : Modifier(pyobj) {}
	ScrewModifier() : Modifier(0) { }

	Object object_value();

	int steps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "steps")
	}

	void steps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "steps", value)
	}

	int render_steps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "render_steps")
	}

	void render_steps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "render_steps", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	enum axis_items_enum {
		axis_items_X = 0,	
		axis_items_Y = 1,	
		axis_items_Z = 2	
	};

	std::map<std::string, int> create_string_to_axis_items() {
		return {{"X", axis_items_X}, {"Y", axis_items_Y}, {"Z", axis_items_Z}};
	};

	std::map<int, std::string> create_axis_items_to_string() {
		return {{axis_items_X, "X"}, {axis_items_Y, "Y"}, {axis_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_axis_items = create_string_to_axis_items();
	const std::map<int, std::string> axis_items_to_string = create_axis_items_to_string();

	axis_items_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<axis_items_enum>(string_to_axis_items.at(resstr)))
	}

	void axis(axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", axis_items_to_string.at(value))
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	float screw_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "screw_offset")
	}

	void screw_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "screw_offset", value)
	}

	bool use_normal_flip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal_flip")
	}

	void use_normal_flip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal_flip", value)
	}

	bool use_normal_calculate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal_calculate")
	}

	void use_normal_calculate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal_calculate", value)
	}

	bool use_object_screw_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_object_screw_offset")
	}

	void use_object_screw_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_object_screw_offset", value)
	}

	bool use_smooth_shade() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth_shade")
	}

	void use_smooth_shade(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth_shade", value)
	}

	bool use_stretch_u() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stretch_u")
	}

	void use_stretch_u(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stretch_u", value)
	}

	bool use_stretch_v() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stretch_v")
	}

	void use_stretch_v(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stretch_v", value)
	}
};

class UVWarpModifier : public Modifier {
public:
	UVWarpModifier(PyObject* pyobj) : Modifier(pyobj) {}
	UVWarpModifier() : Modifier(0) { }

	enum uvwarp_axis_enum {
		uvwarp_axis_X = 0,	
		uvwarp_axis_Y = 1,	
		uvwarp_axis_Z = 2	
	};

	std::map<std::string, int> create_string_to_uvwarp_axis() {
		return {{"X", uvwarp_axis_X}, {"Y", uvwarp_axis_Y}, {"Z", uvwarp_axis_Z}};
	};

	std::map<int, std::string> create_uvwarp_axis_to_string() {
		return {{uvwarp_axis_X, "X"}, {uvwarp_axis_Y, "Y"}, {uvwarp_axis_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_uvwarp_axis = create_string_to_uvwarp_axis();
	const std::map<int, std::string> uvwarp_axis_to_string = create_uvwarp_axis_to_string();

	uvwarp_axis_enum axis_u() {
		STRING_TYPE_GETTER("axis_u", static_cast<uvwarp_axis_enum>(string_to_uvwarp_axis.at(resstr)))
	}

	void axis_u(uvwarp_axis_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis_u", uvwarp_axis_to_string.at(value))
	}

	uvwarp_axis_enum axis_v() {
		STRING_TYPE_GETTER("axis_v", static_cast<uvwarp_axis_enum>(string_to_uvwarp_axis.at(resstr)))
	}

	void axis_v(uvwarp_axis_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis_v", uvwarp_axis_to_string.at(value))
	}

	VFLOAT2 center() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "center", 2)
	}

	void center(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "center", 2)
	}

	Object object_from();

	std::string bone_from() {
		STRING_TYPE_GETTER("bone_from", resstr)
	}

	void bone_from(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bone_from", value)
	}

	Object object_to();

	std::string bone_to() {
		STRING_TYPE_GETTER("bone_to", resstr)
	}

	void bone_to(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bone_to", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}
};

class VertexWeightEditModifier : public Modifier {
public:
	VertexWeightEditModifier(PyObject* pyobj) : Modifier(pyobj) {}
	VertexWeightEditModifier() : Modifier(0) { }

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	enum weightvg_edit_falloff_type_items_enum {
		weightvg_edit_falloff_type_items_LINEAR = 0,	
		weightvg_edit_falloff_type_items_CURVE = 1,	
		weightvg_edit_falloff_type_items_SHARP = 2,	
		weightvg_edit_falloff_type_items_SMOOTH = 3,	
		weightvg_edit_falloff_type_items_ROOT = 4,	
		weightvg_edit_falloff_type_items_ICON_SPHERECURVE = 7,	
		weightvg_edit_falloff_type_items_RANDOM = 8,	
		weightvg_edit_falloff_type_items_STEP = 9	
	};

	std::map<std::string, int> create_string_to_weightvg_edit_falloff_type_items() {
		return {{"LINEAR", weightvg_edit_falloff_type_items_LINEAR}, {"CURVE", weightvg_edit_falloff_type_items_CURVE}, {"SHARP", weightvg_edit_falloff_type_items_SHARP}, {"SMOOTH", weightvg_edit_falloff_type_items_SMOOTH}, {"ROOT", weightvg_edit_falloff_type_items_ROOT}, {"ICON_SPHERECURVE", weightvg_edit_falloff_type_items_ICON_SPHERECURVE}, {"RANDOM", weightvg_edit_falloff_type_items_RANDOM}, {"STEP", weightvg_edit_falloff_type_items_STEP}};
	};

	std::map<int, std::string> create_weightvg_edit_falloff_type_items_to_string() {
		return {{weightvg_edit_falloff_type_items_LINEAR, "LINEAR"}, {weightvg_edit_falloff_type_items_CURVE, "CURVE"}, {weightvg_edit_falloff_type_items_SHARP, "SHARP"}, {weightvg_edit_falloff_type_items_SMOOTH, "SMOOTH"}, {weightvg_edit_falloff_type_items_ROOT, "ROOT"}, {weightvg_edit_falloff_type_items_ICON_SPHERECURVE, "ICON_SPHERECURVE"}, {weightvg_edit_falloff_type_items_RANDOM, "RANDOM"}, {weightvg_edit_falloff_type_items_STEP, "STEP"}};
	};

	const std::map<std::string, int> string_to_weightvg_edit_falloff_type_items = create_string_to_weightvg_edit_falloff_type_items();
	const std::map<int, std::string> weightvg_edit_falloff_type_items_to_string = create_weightvg_edit_falloff_type_items_to_string();

	weightvg_edit_falloff_type_items_enum falloff_type() {
		STRING_TYPE_GETTER("falloff_type", static_cast<weightvg_edit_falloff_type_items_enum>(string_to_weightvg_edit_falloff_type_items.at(resstr)))
	}

	void falloff_type(weightvg_edit_falloff_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff_type", weightvg_edit_falloff_type_items_to_string.at(value))
	}

	bool use_add() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_add")
	}

	void use_add(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_add", value)
	}

	bool use_remove() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_remove")
	}

	void use_remove(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_remove", value)
	}

	float default_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_weight")
	}

	void default_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_weight", value)
	}

	CurveMapping map_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "map_curve")
	}

	float add_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "add_threshold")
	}

	void add_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "add_threshold", value)
	}

	float remove_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "remove_threshold")
	}

	void remove_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "remove_threshold", value)
	}

	float mask_constant() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mask_constant")
	}

	void mask_constant(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mask_constant", value)
	}

	std::string mask_vertex_group() {
		STRING_TYPE_GETTER("mask_vertex_group", resstr)
	}

	void mask_vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_vertex_group", value)
	}

	Texture mask_texture() {
		CLASS_TYPES_GETTER(Texture, "mask_texture")
	}

	enum weightvg_mask_tex_used_items_enum {
		weightvg_mask_tex_used_items_INT = 1,	
		weightvg_mask_tex_used_items_RED = 2,	
		weightvg_mask_tex_used_items_GREEN = 3,	
		weightvg_mask_tex_used_items_BLUE = 4,	
		weightvg_mask_tex_used_items_HUE = 5,	
		weightvg_mask_tex_used_items_SAT = 6,	
		weightvg_mask_tex_used_items_VAL = 7,	
		weightvg_mask_tex_used_items_ALPHA = 8	
	};

	std::map<std::string, int> create_string_to_weightvg_mask_tex_used_items() {
		return {{"INT", weightvg_mask_tex_used_items_INT}, {"RED", weightvg_mask_tex_used_items_RED}, {"GREEN", weightvg_mask_tex_used_items_GREEN}, {"BLUE", weightvg_mask_tex_used_items_BLUE}, {"HUE", weightvg_mask_tex_used_items_HUE}, {"SAT", weightvg_mask_tex_used_items_SAT}, {"VAL", weightvg_mask_tex_used_items_VAL}, {"ALPHA", weightvg_mask_tex_used_items_ALPHA}};
	};

	std::map<int, std::string> create_weightvg_mask_tex_used_items_to_string() {
		return {{weightvg_mask_tex_used_items_INT, "INT"}, {weightvg_mask_tex_used_items_RED, "RED"}, {weightvg_mask_tex_used_items_GREEN, "GREEN"}, {weightvg_mask_tex_used_items_BLUE, "BLUE"}, {weightvg_mask_tex_used_items_HUE, "HUE"}, {weightvg_mask_tex_used_items_SAT, "SAT"}, {weightvg_mask_tex_used_items_VAL, "VAL"}, {weightvg_mask_tex_used_items_ALPHA, "ALPHA"}};
	};

	const std::map<std::string, int> string_to_weightvg_mask_tex_used_items = create_string_to_weightvg_mask_tex_used_items();
	const std::map<int, std::string> weightvg_mask_tex_used_items_to_string = create_weightvg_mask_tex_used_items_to_string();

	weightvg_mask_tex_used_items_enum mask_tex_use_channel() {
		STRING_TYPE_GETTER("mask_tex_use_channel", static_cast<weightvg_mask_tex_used_items_enum>(string_to_weightvg_mask_tex_used_items.at(resstr)))
	}

	void mask_tex_use_channel(weightvg_mask_tex_used_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_use_channel", weightvg_mask_tex_used_items_to_string.at(value))
	}

	enum weightvg_mask_tex_map_items_enum {
		weightvg_mask_tex_map_items_LOCAL = 0,	
		weightvg_mask_tex_map_items_GLOBAL = 1,	
		weightvg_mask_tex_map_items_OBJECT = 2,	
		weightvg_mask_tex_map_items_UV = 3	
	};

	std::map<std::string, int> create_string_to_weightvg_mask_tex_map_items() {
		return {{"LOCAL", weightvg_mask_tex_map_items_LOCAL}, {"GLOBAL", weightvg_mask_tex_map_items_GLOBAL}, {"OBJECT", weightvg_mask_tex_map_items_OBJECT}, {"UV", weightvg_mask_tex_map_items_UV}};
	};

	std::map<int, std::string> create_weightvg_mask_tex_map_items_to_string() {
		return {{weightvg_mask_tex_map_items_LOCAL, "LOCAL"}, {weightvg_mask_tex_map_items_GLOBAL, "GLOBAL"}, {weightvg_mask_tex_map_items_OBJECT, "OBJECT"}, {weightvg_mask_tex_map_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_weightvg_mask_tex_map_items = create_string_to_weightvg_mask_tex_map_items();
	const std::map<int, std::string> weightvg_mask_tex_map_items_to_string = create_weightvg_mask_tex_map_items_to_string();

	weightvg_mask_tex_map_items_enum mask_tex_mapping() {
		STRING_TYPE_GETTER("mask_tex_mapping", static_cast<weightvg_mask_tex_map_items_enum>(string_to_weightvg_mask_tex_map_items.at(resstr)))
	}

	void mask_tex_mapping(weightvg_mask_tex_map_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_mapping", weightvg_mask_tex_map_items_to_string.at(value))
	}

	std::string mask_tex_uv_layer() {
		STRING_TYPE_GETTER("mask_tex_uv_layer", resstr)
	}

	void mask_tex_uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_uv_layer", value)
	}

	Object mask_tex_map_object();
};

class VertexWeightMixModifier : public Modifier {
public:
	VertexWeightMixModifier(PyObject* pyobj) : Modifier(pyobj) {}
	VertexWeightMixModifier() : Modifier(0) { }

	std::string vertex_group_a() {
		STRING_TYPE_GETTER("vertex_group_a", resstr)
	}

	void vertex_group_a(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_a", value)
	}

	std::string vertex_group_b() {
		STRING_TYPE_GETTER("vertex_group_b", resstr)
	}

	void vertex_group_b(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_b", value)
	}

	float default_weight_a() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_weight_a")
	}

	void default_weight_a(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_weight_a", value)
	}

	float default_weight_b() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_weight_b")
	}

	void default_weight_b(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_weight_b", value)
	}

	enum weightvg_mix_modes_items_enum {
		weightvg_mix_modes_items_SET = 1,	
		weightvg_mix_modes_items_ADD = 2,	
		weightvg_mix_modes_items_SUB = 3,	
		weightvg_mix_modes_items_MUL = 4,	
		weightvg_mix_modes_items_DIV = 5,	
		weightvg_mix_modes_items_DIF = 6,	
		weightvg_mix_modes_items_AVG = 7	
	};

	std::map<std::string, int> create_string_to_weightvg_mix_modes_items() {
		return {{"SET", weightvg_mix_modes_items_SET}, {"ADD", weightvg_mix_modes_items_ADD}, {"SUB", weightvg_mix_modes_items_SUB}, {"MUL", weightvg_mix_modes_items_MUL}, {"DIV", weightvg_mix_modes_items_DIV}, {"DIF", weightvg_mix_modes_items_DIF}, {"AVG", weightvg_mix_modes_items_AVG}};
	};

	std::map<int, std::string> create_weightvg_mix_modes_items_to_string() {
		return {{weightvg_mix_modes_items_SET, "SET"}, {weightvg_mix_modes_items_ADD, "ADD"}, {weightvg_mix_modes_items_SUB, "SUB"}, {weightvg_mix_modes_items_MUL, "MUL"}, {weightvg_mix_modes_items_DIV, "DIV"}, {weightvg_mix_modes_items_DIF, "DIF"}, {weightvg_mix_modes_items_AVG, "AVG"}};
	};

	const std::map<std::string, int> string_to_weightvg_mix_modes_items = create_string_to_weightvg_mix_modes_items();
	const std::map<int, std::string> weightvg_mix_modes_items_to_string = create_weightvg_mix_modes_items_to_string();

	weightvg_mix_modes_items_enum mix_mode() {
		STRING_TYPE_GETTER("mix_mode", static_cast<weightvg_mix_modes_items_enum>(string_to_weightvg_mix_modes_items.at(resstr)))
	}

	void mix_mode(weightvg_mix_modes_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mix_mode", weightvg_mix_modes_items_to_string.at(value))
	}

	enum weightvg_mix_set_items_enum {
		weightvg_mix_set_items_ALL = 1,	
		weightvg_mix_set_items_A = 2,	
		weightvg_mix_set_items_B = 3,	
		weightvg_mix_set_items_OR = 4,	
		weightvg_mix_set_items_AND = 5	
	};

	std::map<std::string, int> create_string_to_weightvg_mix_set_items() {
		return {{"ALL", weightvg_mix_set_items_ALL}, {"A", weightvg_mix_set_items_A}, {"B", weightvg_mix_set_items_B}, {"OR", weightvg_mix_set_items_OR}, {"AND", weightvg_mix_set_items_AND}};
	};

	std::map<int, std::string> create_weightvg_mix_set_items_to_string() {
		return {{weightvg_mix_set_items_ALL, "ALL"}, {weightvg_mix_set_items_A, "A"}, {weightvg_mix_set_items_B, "B"}, {weightvg_mix_set_items_OR, "OR"}, {weightvg_mix_set_items_AND, "AND"}};
	};

	const std::map<std::string, int> string_to_weightvg_mix_set_items = create_string_to_weightvg_mix_set_items();
	const std::map<int, std::string> weightvg_mix_set_items_to_string = create_weightvg_mix_set_items_to_string();

	weightvg_mix_set_items_enum mix_set() {
		STRING_TYPE_GETTER("mix_set", static_cast<weightvg_mix_set_items_enum>(string_to_weightvg_mix_set_items.at(resstr)))
	}

	void mix_set(weightvg_mix_set_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mix_set", weightvg_mix_set_items_to_string.at(value))
	}

	float mask_constant() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mask_constant")
	}

	void mask_constant(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mask_constant", value)
	}

	std::string mask_vertex_group() {
		STRING_TYPE_GETTER("mask_vertex_group", resstr)
	}

	void mask_vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_vertex_group", value)
	}

	Texture mask_texture() {
		CLASS_TYPES_GETTER(Texture, "mask_texture")
	}

	enum weightvg_mask_tex_used_items_enum {
		weightvg_mask_tex_used_items_INT = 1,	
		weightvg_mask_tex_used_items_RED = 2,	
		weightvg_mask_tex_used_items_GREEN = 3,	
		weightvg_mask_tex_used_items_BLUE = 4,	
		weightvg_mask_tex_used_items_HUE = 5,	
		weightvg_mask_tex_used_items_SAT = 6,	
		weightvg_mask_tex_used_items_VAL = 7,	
		weightvg_mask_tex_used_items_ALPHA = 8	
	};

	std::map<std::string, int> create_string_to_weightvg_mask_tex_used_items() {
		return {{"INT", weightvg_mask_tex_used_items_INT}, {"RED", weightvg_mask_tex_used_items_RED}, {"GREEN", weightvg_mask_tex_used_items_GREEN}, {"BLUE", weightvg_mask_tex_used_items_BLUE}, {"HUE", weightvg_mask_tex_used_items_HUE}, {"SAT", weightvg_mask_tex_used_items_SAT}, {"VAL", weightvg_mask_tex_used_items_VAL}, {"ALPHA", weightvg_mask_tex_used_items_ALPHA}};
	};

	std::map<int, std::string> create_weightvg_mask_tex_used_items_to_string() {
		return {{weightvg_mask_tex_used_items_INT, "INT"}, {weightvg_mask_tex_used_items_RED, "RED"}, {weightvg_mask_tex_used_items_GREEN, "GREEN"}, {weightvg_mask_tex_used_items_BLUE, "BLUE"}, {weightvg_mask_tex_used_items_HUE, "HUE"}, {weightvg_mask_tex_used_items_SAT, "SAT"}, {weightvg_mask_tex_used_items_VAL, "VAL"}, {weightvg_mask_tex_used_items_ALPHA, "ALPHA"}};
	};

	const std::map<std::string, int> string_to_weightvg_mask_tex_used_items = create_string_to_weightvg_mask_tex_used_items();
	const std::map<int, std::string> weightvg_mask_tex_used_items_to_string = create_weightvg_mask_tex_used_items_to_string();

	weightvg_mask_tex_used_items_enum mask_tex_use_channel() {
		STRING_TYPE_GETTER("mask_tex_use_channel", static_cast<weightvg_mask_tex_used_items_enum>(string_to_weightvg_mask_tex_used_items.at(resstr)))
	}

	void mask_tex_use_channel(weightvg_mask_tex_used_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_use_channel", weightvg_mask_tex_used_items_to_string.at(value))
	}

	enum weightvg_mask_tex_map_items_enum {
		weightvg_mask_tex_map_items_LOCAL = 0,	
		weightvg_mask_tex_map_items_GLOBAL = 1,	
		weightvg_mask_tex_map_items_OBJECT = 2,	
		weightvg_mask_tex_map_items_UV = 3	
	};

	std::map<std::string, int> create_string_to_weightvg_mask_tex_map_items() {
		return {{"LOCAL", weightvg_mask_tex_map_items_LOCAL}, {"GLOBAL", weightvg_mask_tex_map_items_GLOBAL}, {"OBJECT", weightvg_mask_tex_map_items_OBJECT}, {"UV", weightvg_mask_tex_map_items_UV}};
	};

	std::map<int, std::string> create_weightvg_mask_tex_map_items_to_string() {
		return {{weightvg_mask_tex_map_items_LOCAL, "LOCAL"}, {weightvg_mask_tex_map_items_GLOBAL, "GLOBAL"}, {weightvg_mask_tex_map_items_OBJECT, "OBJECT"}, {weightvg_mask_tex_map_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_weightvg_mask_tex_map_items = create_string_to_weightvg_mask_tex_map_items();
	const std::map<int, std::string> weightvg_mask_tex_map_items_to_string = create_weightvg_mask_tex_map_items_to_string();

	weightvg_mask_tex_map_items_enum mask_tex_mapping() {
		STRING_TYPE_GETTER("mask_tex_mapping", static_cast<weightvg_mask_tex_map_items_enum>(string_to_weightvg_mask_tex_map_items.at(resstr)))
	}

	void mask_tex_mapping(weightvg_mask_tex_map_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_mapping", weightvg_mask_tex_map_items_to_string.at(value))
	}

	std::string mask_tex_uv_layer() {
		STRING_TYPE_GETTER("mask_tex_uv_layer", resstr)
	}

	void mask_tex_uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_uv_layer", value)
	}

	Object mask_tex_map_object();
};

class VertexWeightProximityModifier : public Modifier {
public:
	VertexWeightProximityModifier(PyObject* pyobj) : Modifier(pyobj) {}
	VertexWeightProximityModifier() : Modifier(0) { }

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	enum weightvg_proximity_modes_items_enum {
		weightvg_proximity_modes_items_OBJECT = 1,	
		weightvg_proximity_modes_items_GEOMETRY = 2	
	};

	std::map<std::string, int> create_string_to_weightvg_proximity_modes_items() {
		return {{"OBJECT", weightvg_proximity_modes_items_OBJECT}, {"GEOMETRY", weightvg_proximity_modes_items_GEOMETRY}};
	};

	std::map<int, std::string> create_weightvg_proximity_modes_items_to_string() {
		return {{weightvg_proximity_modes_items_OBJECT, "OBJECT"}, {weightvg_proximity_modes_items_GEOMETRY, "GEOMETRY"}};
	};

	const std::map<std::string, int> string_to_weightvg_proximity_modes_items = create_string_to_weightvg_proximity_modes_items();
	const std::map<int, std::string> weightvg_proximity_modes_items_to_string = create_weightvg_proximity_modes_items_to_string();

	weightvg_proximity_modes_items_enum proximity_mode() {
		STRING_TYPE_GETTER("proximity_mode", static_cast<weightvg_proximity_modes_items_enum>(string_to_weightvg_proximity_modes_items.at(resstr)))
	}

	void proximity_mode(weightvg_proximity_modes_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proximity_mode", weightvg_proximity_modes_items_to_string.at(value))
	}

	enum proximity_geometry_items_enum {
		proximity_geometry_items_VERTEX = 1,	
		proximity_geometry_items_EDGE = 2,	
		proximity_geometry_items_FACE = 4	
	};

	std::map<std::string, int> create_string_to_proximity_geometry_items() {
		return {{"VERTEX", proximity_geometry_items_VERTEX}, {"EDGE", proximity_geometry_items_EDGE}, {"FACE", proximity_geometry_items_FACE}};
	};

	std::map<int, std::string> create_proximity_geometry_items_to_string() {
		return {{proximity_geometry_items_VERTEX, "VERTEX"}, {proximity_geometry_items_EDGE, "EDGE"}, {proximity_geometry_items_FACE, "FACE"}};
	};

	const std::map<std::string, int> string_to_proximity_geometry_items = create_string_to_proximity_geometry_items();
	const std::map<int, std::string> proximity_geometry_items_to_string = create_proximity_geometry_items_to_string();

	proximity_geometry_items_enum proximity_geometry() {
		STRING_TYPE_GETTER("proximity_geometry", static_cast<proximity_geometry_items_enum>(string_to_proximity_geometry_items.at(resstr)))
	}

	void proximity_geometry(proximity_geometry_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proximity_geometry", proximity_geometry_items_to_string.at(value))
	}

	Object target();

	float min_dist() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_dist")
	}

	void min_dist(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_dist", value)
	}

	float max_dist() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_dist")
	}

	void max_dist(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_dist", value)
	}

	enum weightvg_proximity_falloff_type_items_enum {
		weightvg_proximity_falloff_type_items_LINEAR = 0,	
		weightvg_proximity_falloff_type_items_SHARP = 2,	
		weightvg_proximity_falloff_type_items_SMOOTH = 3,	
		weightvg_proximity_falloff_type_items_ROOT = 4,	
		weightvg_proximity_falloff_type_items_ICON_SPHERECURVE = 7,	
		weightvg_proximity_falloff_type_items_RANDOM = 8,	
		weightvg_proximity_falloff_type_items_STEP = 9	
	};

	std::map<std::string, int> create_string_to_weightvg_proximity_falloff_type_items() {
		return {{"LINEAR", weightvg_proximity_falloff_type_items_LINEAR}, {"SHARP", weightvg_proximity_falloff_type_items_SHARP}, {"SMOOTH", weightvg_proximity_falloff_type_items_SMOOTH}, {"ROOT", weightvg_proximity_falloff_type_items_ROOT}, {"ICON_SPHERECURVE", weightvg_proximity_falloff_type_items_ICON_SPHERECURVE}, {"RANDOM", weightvg_proximity_falloff_type_items_RANDOM}, {"STEP", weightvg_proximity_falloff_type_items_STEP}};
	};

	std::map<int, std::string> create_weightvg_proximity_falloff_type_items_to_string() {
		return {{weightvg_proximity_falloff_type_items_LINEAR, "LINEAR"}, {weightvg_proximity_falloff_type_items_SHARP, "SHARP"}, {weightvg_proximity_falloff_type_items_SMOOTH, "SMOOTH"}, {weightvg_proximity_falloff_type_items_ROOT, "ROOT"}, {weightvg_proximity_falloff_type_items_ICON_SPHERECURVE, "ICON_SPHERECURVE"}, {weightvg_proximity_falloff_type_items_RANDOM, "RANDOM"}, {weightvg_proximity_falloff_type_items_STEP, "STEP"}};
	};

	const std::map<std::string, int> string_to_weightvg_proximity_falloff_type_items = create_string_to_weightvg_proximity_falloff_type_items();
	const std::map<int, std::string> weightvg_proximity_falloff_type_items_to_string = create_weightvg_proximity_falloff_type_items_to_string();

	weightvg_proximity_falloff_type_items_enum falloff_type() {
		STRING_TYPE_GETTER("falloff_type", static_cast<weightvg_proximity_falloff_type_items_enum>(string_to_weightvg_proximity_falloff_type_items.at(resstr)))
	}

	void falloff_type(weightvg_proximity_falloff_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff_type", weightvg_proximity_falloff_type_items_to_string.at(value))
	}

	float mask_constant() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mask_constant")
	}

	void mask_constant(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mask_constant", value)
	}

	std::string mask_vertex_group() {
		STRING_TYPE_GETTER("mask_vertex_group", resstr)
	}

	void mask_vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_vertex_group", value)
	}

	Texture mask_texture() {
		CLASS_TYPES_GETTER(Texture, "mask_texture")
	}

	enum weightvg_mask_tex_used_items_enum {
		weightvg_mask_tex_used_items_INT = 1,	
		weightvg_mask_tex_used_items_RED = 2,	
		weightvg_mask_tex_used_items_GREEN = 3,	
		weightvg_mask_tex_used_items_BLUE = 4,	
		weightvg_mask_tex_used_items_HUE = 5,	
		weightvg_mask_tex_used_items_SAT = 6,	
		weightvg_mask_tex_used_items_VAL = 7,	
		weightvg_mask_tex_used_items_ALPHA = 8	
	};

	std::map<std::string, int> create_string_to_weightvg_mask_tex_used_items() {
		return {{"INT", weightvg_mask_tex_used_items_INT}, {"RED", weightvg_mask_tex_used_items_RED}, {"GREEN", weightvg_mask_tex_used_items_GREEN}, {"BLUE", weightvg_mask_tex_used_items_BLUE}, {"HUE", weightvg_mask_tex_used_items_HUE}, {"SAT", weightvg_mask_tex_used_items_SAT}, {"VAL", weightvg_mask_tex_used_items_VAL}, {"ALPHA", weightvg_mask_tex_used_items_ALPHA}};
	};

	std::map<int, std::string> create_weightvg_mask_tex_used_items_to_string() {
		return {{weightvg_mask_tex_used_items_INT, "INT"}, {weightvg_mask_tex_used_items_RED, "RED"}, {weightvg_mask_tex_used_items_GREEN, "GREEN"}, {weightvg_mask_tex_used_items_BLUE, "BLUE"}, {weightvg_mask_tex_used_items_HUE, "HUE"}, {weightvg_mask_tex_used_items_SAT, "SAT"}, {weightvg_mask_tex_used_items_VAL, "VAL"}, {weightvg_mask_tex_used_items_ALPHA, "ALPHA"}};
	};

	const std::map<std::string, int> string_to_weightvg_mask_tex_used_items = create_string_to_weightvg_mask_tex_used_items();
	const std::map<int, std::string> weightvg_mask_tex_used_items_to_string = create_weightvg_mask_tex_used_items_to_string();

	weightvg_mask_tex_used_items_enum mask_tex_use_channel() {
		STRING_TYPE_GETTER("mask_tex_use_channel", static_cast<weightvg_mask_tex_used_items_enum>(string_to_weightvg_mask_tex_used_items.at(resstr)))
	}

	void mask_tex_use_channel(weightvg_mask_tex_used_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_use_channel", weightvg_mask_tex_used_items_to_string.at(value))
	}

	enum weightvg_mask_tex_map_items_enum {
		weightvg_mask_tex_map_items_LOCAL = 0,	
		weightvg_mask_tex_map_items_GLOBAL = 1,	
		weightvg_mask_tex_map_items_OBJECT = 2,	
		weightvg_mask_tex_map_items_UV = 3	
	};

	std::map<std::string, int> create_string_to_weightvg_mask_tex_map_items() {
		return {{"LOCAL", weightvg_mask_tex_map_items_LOCAL}, {"GLOBAL", weightvg_mask_tex_map_items_GLOBAL}, {"OBJECT", weightvg_mask_tex_map_items_OBJECT}, {"UV", weightvg_mask_tex_map_items_UV}};
	};

	std::map<int, std::string> create_weightvg_mask_tex_map_items_to_string() {
		return {{weightvg_mask_tex_map_items_LOCAL, "LOCAL"}, {weightvg_mask_tex_map_items_GLOBAL, "GLOBAL"}, {weightvg_mask_tex_map_items_OBJECT, "OBJECT"}, {weightvg_mask_tex_map_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_weightvg_mask_tex_map_items = create_string_to_weightvg_mask_tex_map_items();
	const std::map<int, std::string> weightvg_mask_tex_map_items_to_string = create_weightvg_mask_tex_map_items_to_string();

	weightvg_mask_tex_map_items_enum mask_tex_mapping() {
		STRING_TYPE_GETTER("mask_tex_mapping", static_cast<weightvg_mask_tex_map_items_enum>(string_to_weightvg_mask_tex_map_items.at(resstr)))
	}

	void mask_tex_mapping(weightvg_mask_tex_map_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_mapping", weightvg_mask_tex_map_items_to_string.at(value))
	}

	std::string mask_tex_uv_layer() {
		STRING_TYPE_GETTER("mask_tex_uv_layer", resstr)
	}

	void mask_tex_uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_tex_uv_layer", value)
	}

	Object mask_tex_map_object();
};

class DynamicPaintModifier : public Modifier {
public:
	DynamicPaintModifier(PyObject* pyobj) : Modifier(pyobj) {}
	DynamicPaintModifier() : Modifier(0) { }

	DynamicPaintCanvasSettings canvas_settings() {
		CLASS_TYPES_GETTER(DynamicPaintCanvasSettings, "canvas_settings")
	}

	DynamicPaintBrushSettings brush_settings() {
		CLASS_TYPES_GETTER(DynamicPaintBrushSettings, "brush_settings")
	}

	enum prop_dynamicpaint_type_items_enum {
		prop_dynamicpaint_type_items_CANVAS = 1,	
		prop_dynamicpaint_type_items_BRUSH = 2	
	};

	std::map<std::string, int> create_string_to_prop_dynamicpaint_type_items() {
		return {{"CANVAS", prop_dynamicpaint_type_items_CANVAS}, {"BRUSH", prop_dynamicpaint_type_items_BRUSH}};
	};

	std::map<int, std::string> create_prop_dynamicpaint_type_items_to_string() {
		return {{prop_dynamicpaint_type_items_CANVAS, "CANVAS"}, {prop_dynamicpaint_type_items_BRUSH, "BRUSH"}};
	};

	const std::map<std::string, int> string_to_prop_dynamicpaint_type_items = create_string_to_prop_dynamicpaint_type_items();
	const std::map<int, std::string> prop_dynamicpaint_type_items_to_string = create_prop_dynamicpaint_type_items_to_string();

	prop_dynamicpaint_type_items_enum ui_type() {
		STRING_TYPE_GETTER("ui_type", static_cast<prop_dynamicpaint_type_items_enum>(string_to_prop_dynamicpaint_type_items.at(resstr)))
	}

	void ui_type(prop_dynamicpaint_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ui_type", prop_dynamicpaint_type_items_to_string.at(value))
	}
};

class OceanModifier : public Modifier {
public:
	OceanModifier(PyObject* pyobj) : Modifier(pyobj) {}
	OceanModifier() : Modifier(0) { }

	enum geometry_items_enum {
		geometry_items_GENERATE = 0,	
		geometry_items_DISPLACE = 1	
	};

	std::map<std::string, int> create_string_to_geometry_items() {
		return {{"GENERATE", geometry_items_GENERATE}, {"DISPLACE", geometry_items_DISPLACE}};
	};

	std::map<int, std::string> create_geometry_items_to_string() {
		return {{geometry_items_GENERATE, "GENERATE"}, {geometry_items_DISPLACE, "DISPLACE"}};
	};

	const std::map<std::string, int> string_to_geometry_items = create_string_to_geometry_items();
	const std::map<int, std::string> geometry_items_to_string = create_geometry_items_to_string();

	geometry_items_enum geometry_mode() {
		STRING_TYPE_GETTER("geometry_mode", static_cast<geometry_items_enum>(string_to_geometry_items.at(resstr)))
	}

	void geometry_mode(geometry_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "geometry_mode", geometry_items_to_string.at(value))
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	int repeat_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "repeat_x")
	}

	void repeat_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "repeat_x", value)
	}

	int repeat_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "repeat_y")
	}

	void repeat_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "repeat_y", value)
	}

	bool use_normals() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normals")
	}

	void use_normals(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normals", value)
	}

	bool use_foam() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_foam")
	}

	void use_foam(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_foam", value)
	}

	int resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution")
	}

	void resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution", value)
	}

	int spatial_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "spatial_size")
	}

	void spatial_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "spatial_size", value)
	}

	float wind_velocity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wind_velocity")
	}

	void wind_velocity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wind_velocity", value)
	}

	float damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping")
	}

	void damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping", value)
	}

	float wave_scale_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_scale_min")
	}

	void wave_scale_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_scale_min", value)
	}

	float wave_alignment() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_alignment")
	}

	void wave_alignment(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_alignment", value)
	}

	float wave_direction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_direction")
	}

	void wave_direction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_direction", value)
	}

	float wave_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wave_scale")
	}

	void wave_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wave_scale", value)
	}

	float depth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "depth")
	}

	void depth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "depth", value)
	}

	float foam_coverage() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "foam_coverage")
	}

	void foam_coverage(float value) {
		PRIMITIVE_TYPES_SETTER("f", "foam_coverage", value)
	}

	float bake_foam_fade() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bake_foam_fade")
	}

	void bake_foam_fade(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bake_foam_fade", value)
	}

	std::string foam_layer_name() {
		STRING_TYPE_GETTER("foam_layer_name", resstr)
	}

	void foam_layer_name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "foam_layer_name", value)
	}

	float choppiness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "choppiness")
	}

	void choppiness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "choppiness", value)
	}

	float time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time")
	}

	void time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time", value)
	}

	int random_seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "random_seed")
	}

	void random_seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "random_seed", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	bool is_cached() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_cached")
	}

	void is_cached(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_cached", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}
};

class RemeshModifier : public Modifier {
public:
	RemeshModifier(PyObject* pyobj) : Modifier(pyobj) {}
	RemeshModifier() : Modifier(0) { }

	enum mode_items_enum {
		mode_items_BLOCKS = 0,	
		mode_items_SMOOTH = 1,	
		mode_items_SHARP = 2	
	};

	std::map<std::string, int> create_string_to_mode_items() {
		return {{"BLOCKS", mode_items_BLOCKS}, {"SMOOTH", mode_items_SMOOTH}, {"SHARP", mode_items_SHARP}};
	};

	std::map<int, std::string> create_mode_items_to_string() {
		return {{mode_items_BLOCKS, "BLOCKS"}, {mode_items_SMOOTH, "SMOOTH"}, {mode_items_SHARP, "SHARP"}};
	};

	const std::map<std::string, int> string_to_mode_items = create_string_to_mode_items();
	const std::map<int, std::string> mode_items_to_string = create_mode_items_to_string();

	mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<mode_items_enum>(string_to_mode_items.at(resstr)))
	}

	void mode(mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", mode_items_to_string.at(value))
	}

	float scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale")
	}

	void scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale", value)
	}

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	int octree_depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "octree_depth")
	}

	void octree_depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "octree_depth", value)
	}

	float sharpness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sharpness")
	}

	void sharpness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sharpness", value)
	}

	bool use_remove_disconnected() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_remove_disconnected")
	}

	void use_remove_disconnected(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_remove_disconnected", value)
	}

	bool use_smooth_shade() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth_shade")
	}

	void use_smooth_shade(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth_shade", value)
	}
};

class SkinModifier : public Modifier {
public:
	SkinModifier(PyObject* pyobj) : Modifier(pyobj) {}
	SkinModifier() : Modifier(0) { }

	float branch_smoothing() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "branch_smoothing")
	}

	void branch_smoothing(float value) {
		PRIMITIVE_TYPES_SETTER("f", "branch_smoothing", value)
	}

	bool use_smooth_shade() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth_shade")
	}

	void use_smooth_shade(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth_shade", value)
	}

	bool use_x_symmetry() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x_symmetry")
	}

	void use_x_symmetry(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x_symmetry", value)
	}

	bool use_y_symmetry() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y_symmetry")
	}

	void use_y_symmetry(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y_symmetry", value)
	}

	bool use_z_symmetry() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z_symmetry")
	}

	void use_z_symmetry(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z_symmetry", value)
	}
};

class LaplacianSmoothModifier : public Modifier {
public:
	LaplacianSmoothModifier(PyObject* pyobj) : Modifier(pyobj) {}
	LaplacianSmoothModifier() : Modifier(0) { }

	bool use_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x")
	}

	void use_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x", value)
	}

	bool use_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_y")
	}

	void use_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_y", value)
	}

	bool use_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_z")
	}

	void use_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_z", value)
	}

	bool use_volume_preserve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_volume_preserve")
	}

	void use_volume_preserve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_volume_preserve", value)
	}

	bool use_normalized() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normalized")
	}

	void use_normalized(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normalized", value)
	}

	float lambda_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lambda_factor")
	}

	void lambda_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lambda_factor", value)
	}

	float lambda_border() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lambda_border")
	}

	void lambda_border(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lambda_border", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}
};

class TriangulateModifier : public Modifier {
public:
	TriangulateModifier(PyObject* pyobj) : Modifier(pyobj) {}
	TriangulateModifier() : Modifier(0) { }

	enum modifier_triangulate_quad_method_items_enum {
		modifier_triangulate_quad_method_items_BEAUTY = 0,	
		modifier_triangulate_quad_method_items_FIXED = 1,	
		modifier_triangulate_quad_method_items_FIXED_ALTERNATE = 2,	
		modifier_triangulate_quad_method_items_SHORTEST_DIAGONAL = 3	
	};

	std::map<std::string, int> create_string_to_modifier_triangulate_quad_method_items() {
		return {{"BEAUTY", modifier_triangulate_quad_method_items_BEAUTY}, {"FIXED", modifier_triangulate_quad_method_items_FIXED}, {"FIXED_ALTERNATE", modifier_triangulate_quad_method_items_FIXED_ALTERNATE}, {"SHORTEST_DIAGONAL", modifier_triangulate_quad_method_items_SHORTEST_DIAGONAL}};
	};

	std::map<int, std::string> create_modifier_triangulate_quad_method_items_to_string() {
		return {{modifier_triangulate_quad_method_items_BEAUTY, "BEAUTY"}, {modifier_triangulate_quad_method_items_FIXED, "FIXED"}, {modifier_triangulate_quad_method_items_FIXED_ALTERNATE, "FIXED_ALTERNATE"}, {modifier_triangulate_quad_method_items_SHORTEST_DIAGONAL, "SHORTEST_DIAGONAL"}};
	};

	const std::map<std::string, int> string_to_modifier_triangulate_quad_method_items = create_string_to_modifier_triangulate_quad_method_items();
	const std::map<int, std::string> modifier_triangulate_quad_method_items_to_string = create_modifier_triangulate_quad_method_items_to_string();

	modifier_triangulate_quad_method_items_enum quad_method() {
		STRING_TYPE_GETTER("quad_method", static_cast<modifier_triangulate_quad_method_items_enum>(string_to_modifier_triangulate_quad_method_items.at(resstr)))
	}

	void quad_method(modifier_triangulate_quad_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "quad_method", modifier_triangulate_quad_method_items_to_string.at(value))
	}

	enum modifier_triangulate_ngon_method_items_enum {
		modifier_triangulate_ngon_method_items_BEAUTY = 0,	
		modifier_triangulate_ngon_method_items_CLIP = 1	
	};

	std::map<std::string, int> create_string_to_modifier_triangulate_ngon_method_items() {
		return {{"BEAUTY", modifier_triangulate_ngon_method_items_BEAUTY}, {"CLIP", modifier_triangulate_ngon_method_items_CLIP}};
	};

	std::map<int, std::string> create_modifier_triangulate_ngon_method_items_to_string() {
		return {{modifier_triangulate_ngon_method_items_BEAUTY, "BEAUTY"}, {modifier_triangulate_ngon_method_items_CLIP, "CLIP"}};
	};

	const std::map<std::string, int> string_to_modifier_triangulate_ngon_method_items = create_string_to_modifier_triangulate_ngon_method_items();
	const std::map<int, std::string> modifier_triangulate_ngon_method_items_to_string = create_modifier_triangulate_ngon_method_items_to_string();

	modifier_triangulate_ngon_method_items_enum ngon_method() {
		STRING_TYPE_GETTER("ngon_method", static_cast<modifier_triangulate_ngon_method_items_enum>(string_to_modifier_triangulate_ngon_method_items.at(resstr)))
	}

	void ngon_method(modifier_triangulate_ngon_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ngon_method", modifier_triangulate_ngon_method_items_to_string.at(value))
	}
};

class MeshCacheModifier : public Modifier {
public:
	MeshCacheModifier(PyObject* pyobj) : Modifier(pyobj) {}
	MeshCacheModifier() : Modifier(0) { }

	enum prop_format_type_items_enum {
		prop_format_type_items_MDD = 1,	
		prop_format_type_items_PC2 = 2	
	};

	std::map<std::string, int> create_string_to_prop_format_type_items() {
		return {{"MDD", prop_format_type_items_MDD}, {"PC2", prop_format_type_items_PC2}};
	};

	std::map<int, std::string> create_prop_format_type_items_to_string() {
		return {{prop_format_type_items_MDD, "MDD"}, {prop_format_type_items_PC2, "PC2"}};
	};

	const std::map<std::string, int> string_to_prop_format_type_items = create_string_to_prop_format_type_items();
	const std::map<int, std::string> prop_format_type_items_to_string = create_prop_format_type_items_to_string();

	prop_format_type_items_enum cache_format() {
		STRING_TYPE_GETTER("cache_format", static_cast<prop_format_type_items_enum>(string_to_prop_format_type_items.at(resstr)))
	}

	void cache_format(prop_format_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "cache_format", prop_format_type_items_to_string.at(value))
	}

	enum prop_interpolation_type_items_enum {
		prop_interpolation_type_items_NONE = 0,	
		prop_interpolation_type_items_LINEAR = 1	
	};

	std::map<std::string, int> create_string_to_prop_interpolation_type_items() {
		return {{"NONE", prop_interpolation_type_items_NONE}, {"LINEAR", prop_interpolation_type_items_LINEAR}};
	};

	std::map<int, std::string> create_prop_interpolation_type_items_to_string() {
		return {{prop_interpolation_type_items_NONE, "NONE"}, {prop_interpolation_type_items_LINEAR, "LINEAR"}};
	};

	const std::map<std::string, int> string_to_prop_interpolation_type_items = create_string_to_prop_interpolation_type_items();
	const std::map<int, std::string> prop_interpolation_type_items_to_string = create_prop_interpolation_type_items_to_string();

	prop_interpolation_type_items_enum interpolation() {
		STRING_TYPE_GETTER("interpolation", static_cast<prop_interpolation_type_items_enum>(string_to_prop_interpolation_type_items.at(resstr)))
	}

	void interpolation(prop_interpolation_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation", prop_interpolation_type_items_to_string.at(value))
	}

	enum prop_time_type_items_enum {
		prop_time_type_items_FRAME = 0,	
		prop_time_type_items_TIME = 1,	
		prop_time_type_items_FACTOR = 2	
	};

	std::map<std::string, int> create_string_to_prop_time_type_items() {
		return {{"FRAME", prop_time_type_items_FRAME}, {"TIME", prop_time_type_items_TIME}, {"FACTOR", prop_time_type_items_FACTOR}};
	};

	std::map<int, std::string> create_prop_time_type_items_to_string() {
		return {{prop_time_type_items_FRAME, "FRAME"}, {prop_time_type_items_TIME, "TIME"}, {prop_time_type_items_FACTOR, "FACTOR"}};
	};

	const std::map<std::string, int> string_to_prop_time_type_items = create_string_to_prop_time_type_items();
	const std::map<int, std::string> prop_time_type_items_to_string = create_prop_time_type_items_to_string();

	prop_time_type_items_enum time_mode() {
		STRING_TYPE_GETTER("time_mode", static_cast<prop_time_type_items_enum>(string_to_prop_time_type_items.at(resstr)))
	}

	void time_mode(prop_time_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "time_mode", prop_time_type_items_to_string.at(value))
	}

	enum prop_time_play_items_enum {
		prop_time_play_items_SCENE = 0,	
		prop_time_play_items_CUSTOM = 1	
	};

	std::map<std::string, int> create_string_to_prop_time_play_items() {
		return {{"SCENE", prop_time_play_items_SCENE}, {"CUSTOM", prop_time_play_items_CUSTOM}};
	};

	std::map<int, std::string> create_prop_time_play_items_to_string() {
		return {{prop_time_play_items_SCENE, "SCENE"}, {prop_time_play_items_CUSTOM, "CUSTOM"}};
	};

	const std::map<std::string, int> string_to_prop_time_play_items = create_string_to_prop_time_play_items();
	const std::map<int, std::string> prop_time_play_items_to_string = create_prop_time_play_items_to_string();

	prop_time_play_items_enum play_mode() {
		STRING_TYPE_GETTER("play_mode", static_cast<prop_time_play_items_enum>(string_to_prop_time_play_items.at(resstr)))
	}

	void play_mode(prop_time_play_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "play_mode", prop_time_play_items_to_string.at(value))
	}

	enum prop_deform_mode_items_enum {
		prop_deform_mode_items_OVERWRITE = 0,	
		prop_deform_mode_items_INTEGRATE = 1	
	};

	std::map<std::string, int> create_string_to_prop_deform_mode_items() {
		return {{"OVERWRITE", prop_deform_mode_items_OVERWRITE}, {"INTEGRATE", prop_deform_mode_items_INTEGRATE}};
	};

	std::map<int, std::string> create_prop_deform_mode_items_to_string() {
		return {{prop_deform_mode_items_OVERWRITE, "OVERWRITE"}, {prop_deform_mode_items_INTEGRATE, "INTEGRATE"}};
	};

	const std::map<std::string, int> string_to_prop_deform_mode_items = create_string_to_prop_deform_mode_items();
	const std::map<int, std::string> prop_deform_mode_items_to_string = create_prop_deform_mode_items_to_string();

	prop_deform_mode_items_enum deform_mode() {
		STRING_TYPE_GETTER("deform_mode", static_cast<prop_deform_mode_items_enum>(string_to_prop_deform_mode_items.at(resstr)))
	}

	void deform_mode(prop_deform_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "deform_mode", prop_deform_mode_items_to_string.at(value))
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	enum object_axis_items_enum {
		object_axis_items_POS_X = 0,	
		object_axis_items_POS_Y = 1,	
		object_axis_items_POS_Z = 2,	
		object_axis_items_NEG_X = 3,	
		object_axis_items_NEG_Y = 4,	
		object_axis_items_NEG_Z = 5	
	};

	std::map<std::string, int> create_string_to_object_axis_items() {
		return {{"POS_X", object_axis_items_POS_X}, {"POS_Y", object_axis_items_POS_Y}, {"POS_Z", object_axis_items_POS_Z}, {"NEG_X", object_axis_items_NEG_X}, {"NEG_Y", object_axis_items_NEG_Y}, {"NEG_Z", object_axis_items_NEG_Z}};
	};

	std::map<int, std::string> create_object_axis_items_to_string() {
		return {{object_axis_items_POS_X, "POS_X"}, {object_axis_items_POS_Y, "POS_Y"}, {object_axis_items_POS_Z, "POS_Z"}, {object_axis_items_NEG_X, "NEG_X"}, {object_axis_items_NEG_Y, "NEG_Y"}, {object_axis_items_NEG_Z, "NEG_Z"}};
	};

	const std::map<std::string, int> string_to_object_axis_items = create_string_to_object_axis_items();
	const std::map<int, std::string> object_axis_items_to_string = create_object_axis_items_to_string();

	object_axis_items_enum forward_axis() {
		STRING_TYPE_GETTER("forward_axis", static_cast<object_axis_items_enum>(string_to_object_axis_items.at(resstr)))
	}

	void forward_axis(object_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "forward_axis", object_axis_items_to_string.at(value))
	}

	object_axis_items_enum up_axis() {
		STRING_TYPE_GETTER("up_axis", static_cast<object_axis_items_enum>(string_to_object_axis_items.at(resstr)))
	}

	void up_axis(object_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "up_axis", object_axis_items_to_string.at(value))
	}

	enum prop_flip_axis_flag_items_enum {
		prop_flip_axis_flag_items_X = 1,	
		prop_flip_axis_flag_items_Y = 2,	
		prop_flip_axis_flag_items_Z = 4	
	};

	std::map<std::string, int> create_string_to_prop_flip_axis_flag_items() {
		return {{"X", prop_flip_axis_flag_items_X}, {"Y", prop_flip_axis_flag_items_Y}, {"Z", prop_flip_axis_flag_items_Z}};
	};

	std::map<int, std::string> create_prop_flip_axis_flag_items_to_string() {
		return {{prop_flip_axis_flag_items_X, "X"}, {prop_flip_axis_flag_items_Y, "Y"}, {prop_flip_axis_flag_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_flip_axis_flag_items = create_string_to_prop_flip_axis_flag_items();
	const std::map<int, std::string> prop_flip_axis_flag_items_to_string = create_prop_flip_axis_flag_items_to_string();

	prop_flip_axis_flag_items_enum flip_axis() {
		STRING_TYPE_GETTER("flip_axis", static_cast<prop_flip_axis_flag_items_enum>(string_to_prop_flip_axis_flag_items.at(resstr)))
	}

	void flip_axis(prop_flip_axis_flag_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "flip_axis", prop_flip_axis_flag_items_to_string.at(value))
	}

	float frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_start")
	}

	void frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_start", value)
	}

	float frame_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_scale")
	}

	void frame_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_scale", value)
	}

	float eval_frame() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "eval_frame")
	}

	void eval_frame(float value) {
		PRIMITIVE_TYPES_SETTER("f", "eval_frame", value)
	}

	float eval_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "eval_time")
	}

	void eval_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "eval_time", value)
	}

	float eval_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "eval_factor")
	}

	void eval_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "eval_factor", value)
	}
};

class LaplacianDeformModifier : public Modifier {
public:
	LaplacianDeformModifier(PyObject* pyobj) : Modifier(pyobj) {}
	LaplacianDeformModifier() : Modifier(0) { }

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	bool is_bind() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_bind")
	}

	void is_bind(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_bind", value)
	}
};

class WireframeModifier : public Modifier {
public:
	WireframeModifier(PyObject* pyobj) : Modifier(pyobj) {}
	WireframeModifier() : Modifier(0) { }

	float thickness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness")
	}

	void thickness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness", value)
	}

	float thickness_vertex_group() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_vertex_group")
	}

	void thickness_vertex_group(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_vertex_group", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	bool use_replace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_replace")
	}

	void use_replace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_replace", value)
	}

	bool use_boundary() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_boundary")
	}

	void use_boundary(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_boundary", value)
	}

	bool use_even_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_even_offset")
	}

	void use_even_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_even_offset", value)
	}

	bool use_relative_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative_offset")
	}

	void use_relative_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative_offset", value)
	}

	bool use_crease() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crease")
	}

	void use_crease(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crease", value)
	}

	float crease_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crease_weight")
	}

	void crease_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crease_weight", value)
	}

	int material_offset() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material_offset")
	}

	void material_offset(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material_offset", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}
};

class DataTransferModifier : public Modifier {
public:
	DataTransferModifier(PyObject* pyobj) : Modifier(pyobj) {}
	DataTransferModifier() : Modifier(0) { }

	Object object_value();

	bool use_object_transform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_object_transform")
	}

	void use_object_transform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_object_transform", value)
	}

	bool use_vert_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_vert_data")
	}

	void use_vert_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_vert_data", value)
	}

	bool use_edge_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_data")
	}

	void use_edge_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_data", value)
	}

	bool use_loop_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_loop_data")
	}

	void use_loop_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_loop_data", value)
	}

	bool use_poly_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_poly_data")
	}

	void use_poly_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_poly_data", value)
	}

	enum DT_layer_vert_items_enum {
		DT_layer_vert_items_BEVEL_WEIGHT_VERT = 8	
	};

	std::map<std::string, int> create_string_to_DT_layer_vert_items() {
		return {{"BEVEL_WEIGHT_VERT", DT_layer_vert_items_BEVEL_WEIGHT_VERT}};
	};

	std::map<int, std::string> create_DT_layer_vert_items_to_string() {
		return {{DT_layer_vert_items_BEVEL_WEIGHT_VERT, "BEVEL_WEIGHT_VERT"}};
	};

	const std::map<std::string, int> string_to_DT_layer_vert_items = create_string_to_DT_layer_vert_items();
	const std::map<int, std::string> DT_layer_vert_items_to_string = create_DT_layer_vert_items_to_string();

	DT_layer_vert_items_enum data_types_verts() {
		STRING_TYPE_GETTER("data_types_verts", static_cast<DT_layer_vert_items_enum>(string_to_DT_layer_vert_items.at(resstr)))
	}

	void data_types_verts(DT_layer_vert_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "data_types_verts", DT_layer_vert_items_to_string.at(value))
	}

	enum DT_layer_vert_vgroup_items_enum {
		DT_layer_vert_vgroup_items_VGROUP_WEIGHTS = 1	
	};

	std::map<std::string, int> create_string_to_DT_layer_vert_vgroup_items() {
		return {{"VGROUP_WEIGHTS", DT_layer_vert_vgroup_items_VGROUP_WEIGHTS}};
	};

	std::map<int, std::string> create_DT_layer_vert_vgroup_items_to_string() {
		return {{DT_layer_vert_vgroup_items_VGROUP_WEIGHTS, "VGROUP_WEIGHTS"}};
	};

	const std::map<std::string, int> string_to_DT_layer_vert_vgroup_items = create_string_to_DT_layer_vert_vgroup_items();
	const std::map<int, std::string> DT_layer_vert_vgroup_items_to_string = create_DT_layer_vert_vgroup_items_to_string();

	DT_layer_vert_vgroup_items_enum data_types_verts_vgroup() {
		STRING_TYPE_GETTER("data_types_verts_vgroup", static_cast<DT_layer_vert_vgroup_items_enum>(string_to_DT_layer_vert_vgroup_items.at(resstr)))
	}

	void data_types_verts_vgroup(DT_layer_vert_vgroup_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "data_types_verts_vgroup", DT_layer_vert_vgroup_items_to_string.at(value))
	}

	enum DT_layer_edge_items_enum {
		DT_layer_edge_items_SHARP_EDGE = 256,	
		DT_layer_edge_items_SEAM = 512,	
		DT_layer_edge_items_CREASE = 1024,	
		DT_layer_edge_items_BEVEL_WEIGHT_EDGE = 2048,	
		DT_layer_edge_items_FREESTYLE_EDGE = 4096	
	};

	std::map<std::string, int> create_string_to_DT_layer_edge_items() {
		return {{"SHARP_EDGE", DT_layer_edge_items_SHARP_EDGE}, {"SEAM", DT_layer_edge_items_SEAM}, {"CREASE", DT_layer_edge_items_CREASE}, {"BEVEL_WEIGHT_EDGE", DT_layer_edge_items_BEVEL_WEIGHT_EDGE}, {"FREESTYLE_EDGE", DT_layer_edge_items_FREESTYLE_EDGE}};
	};

	std::map<int, std::string> create_DT_layer_edge_items_to_string() {
		return {{DT_layer_edge_items_SHARP_EDGE, "SHARP_EDGE"}, {DT_layer_edge_items_SEAM, "SEAM"}, {DT_layer_edge_items_CREASE, "CREASE"}, {DT_layer_edge_items_BEVEL_WEIGHT_EDGE, "BEVEL_WEIGHT_EDGE"}, {DT_layer_edge_items_FREESTYLE_EDGE, "FREESTYLE_EDGE"}};
	};

	const std::map<std::string, int> string_to_DT_layer_edge_items = create_string_to_DT_layer_edge_items();
	const std::map<int, std::string> DT_layer_edge_items_to_string = create_DT_layer_edge_items_to_string();

	DT_layer_edge_items_enum data_types_edges() {
		STRING_TYPE_GETTER("data_types_edges", static_cast<DT_layer_edge_items_enum>(string_to_DT_layer_edge_items.at(resstr)))
	}

	void data_types_edges(DT_layer_edge_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "data_types_edges", DT_layer_edge_items_to_string.at(value))
	}

	enum DT_layer_loop_items_enum {
		DT_layer_loop_items_CUSTOM_NORMAL = 131072	
	};

	std::map<std::string, int> create_string_to_DT_layer_loop_items() {
		return {{"CUSTOM_NORMAL", DT_layer_loop_items_CUSTOM_NORMAL}};
	};

	std::map<int, std::string> create_DT_layer_loop_items_to_string() {
		return {{DT_layer_loop_items_CUSTOM_NORMAL, "CUSTOM_NORMAL"}};
	};

	const std::map<std::string, int> string_to_DT_layer_loop_items = create_string_to_DT_layer_loop_items();
	const std::map<int, std::string> DT_layer_loop_items_to_string = create_DT_layer_loop_items_to_string();

	DT_layer_loop_items_enum data_types_loops() {
		STRING_TYPE_GETTER("data_types_loops", static_cast<DT_layer_loop_items_enum>(string_to_DT_layer_loop_items.at(resstr)))
	}

	void data_types_loops(DT_layer_loop_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "data_types_loops", DT_layer_loop_items_to_string.at(value))
	}

	enum DT_layer_loop_vcol_items_enum {
		DT_layer_loop_vcol_items_VCOL = 65536	
	};

	std::map<std::string, int> create_string_to_DT_layer_loop_vcol_items() {
		return {{"VCOL", DT_layer_loop_vcol_items_VCOL}};
	};

	std::map<int, std::string> create_DT_layer_loop_vcol_items_to_string() {
		return {{DT_layer_loop_vcol_items_VCOL, "VCOL"}};
	};

	const std::map<std::string, int> string_to_DT_layer_loop_vcol_items = create_string_to_DT_layer_loop_vcol_items();
	const std::map<int, std::string> DT_layer_loop_vcol_items_to_string = create_DT_layer_loop_vcol_items_to_string();

	DT_layer_loop_vcol_items_enum data_types_loops_vcol() {
		STRING_TYPE_GETTER("data_types_loops_vcol", static_cast<DT_layer_loop_vcol_items_enum>(string_to_DT_layer_loop_vcol_items.at(resstr)))
	}

	void data_types_loops_vcol(DT_layer_loop_vcol_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "data_types_loops_vcol", DT_layer_loop_vcol_items_to_string.at(value))
	}

	enum DT_layer_loop_uv_items_enum {
		DT_layer_loop_uv_items_UV = 16777216	
	};

	std::map<std::string, int> create_string_to_DT_layer_loop_uv_items() {
		return {{"UV", DT_layer_loop_uv_items_UV}};
	};

	std::map<int, std::string> create_DT_layer_loop_uv_items_to_string() {
		return {{DT_layer_loop_uv_items_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_DT_layer_loop_uv_items = create_string_to_DT_layer_loop_uv_items();
	const std::map<int, std::string> DT_layer_loop_uv_items_to_string = create_DT_layer_loop_uv_items_to_string();

	DT_layer_loop_uv_items_enum data_types_loops_uv() {
		STRING_TYPE_GETTER("data_types_loops_uv", static_cast<DT_layer_loop_uv_items_enum>(string_to_DT_layer_loop_uv_items.at(resstr)))
	}

	void data_types_loops_uv(DT_layer_loop_uv_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "data_types_loops_uv", DT_layer_loop_uv_items_to_string.at(value))
	}

	enum DT_layer_poly_items_enum {
		DT_layer_poly_items_SMOOTH = 33554432,	
		DT_layer_poly_items_FREESTYLE_FACE = 67108864	
	};

	std::map<std::string, int> create_string_to_DT_layer_poly_items() {
		return {{"SMOOTH", DT_layer_poly_items_SMOOTH}, {"FREESTYLE_FACE", DT_layer_poly_items_FREESTYLE_FACE}};
	};

	std::map<int, std::string> create_DT_layer_poly_items_to_string() {
		return {{DT_layer_poly_items_SMOOTH, "SMOOTH"}, {DT_layer_poly_items_FREESTYLE_FACE, "FREESTYLE_FACE"}};
	};

	const std::map<std::string, int> string_to_DT_layer_poly_items = create_string_to_DT_layer_poly_items();
	const std::map<int, std::string> DT_layer_poly_items_to_string = create_DT_layer_poly_items_to_string();

	DT_layer_poly_items_enum data_types_polys() {
		STRING_TYPE_GETTER("data_types_polys", static_cast<DT_layer_poly_items_enum>(string_to_DT_layer_poly_items.at(resstr)))
	}

	void data_types_polys(DT_layer_poly_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "data_types_polys", DT_layer_poly_items_to_string.at(value))
	}

	enum DT_method_vertex_items_enum {
		DT_method_vertex_items_TOPOLOGY = 251658240,	
		DT_method_vertex_items_NEAREST = 16777488,	
		DT_method_vertex_items_EDGE_NEAREST = 16777504,	
		DT_method_vertex_items_EDGEINTERP_NEAREST = 16778528,	
		DT_method_vertex_items_POLY_NEAREST = 16777600,	
		DT_method_vertex_items_POLYINTERP_NEAREST = 16778624,	
		DT_method_vertex_items_POLYINTERP_VNORPROJ = 16778880	
	};

	std::map<std::string, int> create_string_to_DT_method_vertex_items() {
		return {{"TOPOLOGY", DT_method_vertex_items_TOPOLOGY}, {"NEAREST", DT_method_vertex_items_NEAREST}, {"EDGE_NEAREST", DT_method_vertex_items_EDGE_NEAREST}, {"EDGEINTERP_NEAREST", DT_method_vertex_items_EDGEINTERP_NEAREST}, {"POLY_NEAREST", DT_method_vertex_items_POLY_NEAREST}, {"POLYINTERP_NEAREST", DT_method_vertex_items_POLYINTERP_NEAREST}, {"POLYINTERP_VNORPROJ", DT_method_vertex_items_POLYINTERP_VNORPROJ}};
	};

	std::map<int, std::string> create_DT_method_vertex_items_to_string() {
		return {{DT_method_vertex_items_TOPOLOGY, "TOPOLOGY"}, {DT_method_vertex_items_NEAREST, "NEAREST"}, {DT_method_vertex_items_EDGE_NEAREST, "EDGE_NEAREST"}, {DT_method_vertex_items_EDGEINTERP_NEAREST, "EDGEINTERP_NEAREST"}, {DT_method_vertex_items_POLY_NEAREST, "POLY_NEAREST"}, {DT_method_vertex_items_POLYINTERP_NEAREST, "POLYINTERP_NEAREST"}, {DT_method_vertex_items_POLYINTERP_VNORPROJ, "POLYINTERP_VNORPROJ"}};
	};

	const std::map<std::string, int> string_to_DT_method_vertex_items = create_string_to_DT_method_vertex_items();
	const std::map<int, std::string> DT_method_vertex_items_to_string = create_DT_method_vertex_items_to_string();

	DT_method_vertex_items_enum vert_mapping() {
		STRING_TYPE_GETTER("vert_mapping", static_cast<DT_method_vertex_items_enum>(string_to_DT_method_vertex_items.at(resstr)))
	}

	void vert_mapping(DT_method_vertex_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vert_mapping", DT_method_vertex_items_to_string.at(value))
	}

	enum DT_method_edge_items_enum {
		DT_method_edge_items_TOPOLOGY = 251658240,	
		DT_method_edge_items_VERT_NEAREST = 33554704,	
		DT_method_edge_items_NEAREST = 33554720,	
		DT_method_edge_items_POLY_NEAREST = 33554816,	
		DT_method_edge_items_EDGEINTERP_VNORPROJ = 33555984	
	};

	std::map<std::string, int> create_string_to_DT_method_edge_items() {
		return {{"TOPOLOGY", DT_method_edge_items_TOPOLOGY}, {"VERT_NEAREST", DT_method_edge_items_VERT_NEAREST}, {"NEAREST", DT_method_edge_items_NEAREST}, {"POLY_NEAREST", DT_method_edge_items_POLY_NEAREST}, {"EDGEINTERP_VNORPROJ", DT_method_edge_items_EDGEINTERP_VNORPROJ}};
	};

	std::map<int, std::string> create_DT_method_edge_items_to_string() {
		return {{DT_method_edge_items_TOPOLOGY, "TOPOLOGY"}, {DT_method_edge_items_VERT_NEAREST, "VERT_NEAREST"}, {DT_method_edge_items_NEAREST, "NEAREST"}, {DT_method_edge_items_POLY_NEAREST, "POLY_NEAREST"}, {DT_method_edge_items_EDGEINTERP_VNORPROJ, "EDGEINTERP_VNORPROJ"}};
	};

	const std::map<std::string, int> string_to_DT_method_edge_items = create_string_to_DT_method_edge_items();
	const std::map<int, std::string> DT_method_edge_items_to_string = create_DT_method_edge_items_to_string();

	DT_method_edge_items_enum edge_mapping() {
		STRING_TYPE_GETTER("edge_mapping", static_cast<DT_method_edge_items_enum>(string_to_DT_method_edge_items.at(resstr)))
	}

	void edge_mapping(DT_method_edge_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edge_mapping", DT_method_edge_items_to_string.at(value))
	}

	enum DT_method_loop_items_enum {
		DT_method_loop_items_TOPOLOGY = 251658240,	
		DT_method_loop_items_NEAREST_NORMAL = 67111248,	
		DT_method_loop_items_NEAREST_POLYNOR = 67111312,	
		DT_method_loop_items_NEAREST_POLY = 67109248,	
		DT_method_loop_items_POLYINTERP_NEAREST = 67110272,	
		DT_method_loop_items_POLYINTERP_LNORPROJ = 67110528	
	};

	std::map<std::string, int> create_string_to_DT_method_loop_items() {
		return {{"TOPOLOGY", DT_method_loop_items_TOPOLOGY}, {"NEAREST_NORMAL", DT_method_loop_items_NEAREST_NORMAL}, {"NEAREST_POLYNOR", DT_method_loop_items_NEAREST_POLYNOR}, {"NEAREST_POLY", DT_method_loop_items_NEAREST_POLY}, {"POLYINTERP_NEAREST", DT_method_loop_items_POLYINTERP_NEAREST}, {"POLYINTERP_LNORPROJ", DT_method_loop_items_POLYINTERP_LNORPROJ}};
	};

	std::map<int, std::string> create_DT_method_loop_items_to_string() {
		return {{DT_method_loop_items_TOPOLOGY, "TOPOLOGY"}, {DT_method_loop_items_NEAREST_NORMAL, "NEAREST_NORMAL"}, {DT_method_loop_items_NEAREST_POLYNOR, "NEAREST_POLYNOR"}, {DT_method_loop_items_NEAREST_POLY, "NEAREST_POLY"}, {DT_method_loop_items_POLYINTERP_NEAREST, "POLYINTERP_NEAREST"}, {DT_method_loop_items_POLYINTERP_LNORPROJ, "POLYINTERP_LNORPROJ"}};
	};

	const std::map<std::string, int> string_to_DT_method_loop_items = create_string_to_DT_method_loop_items();
	const std::map<int, std::string> DT_method_loop_items_to_string = create_DT_method_loop_items_to_string();

	DT_method_loop_items_enum loop_mapping() {
		STRING_TYPE_GETTER("loop_mapping", static_cast<DT_method_loop_items_enum>(string_to_DT_method_loop_items.at(resstr)))
	}

	void loop_mapping(DT_method_loop_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "loop_mapping", DT_method_loop_items_to_string.at(value))
	}

	enum DT_method_poly_items_enum {
		DT_method_poly_items_TOPOLOGY = 251658240,	
		DT_method_poly_items_NEAREST = 134218112,	
		DT_method_poly_items_NORMAL = 134219904,	
		DT_method_poly_items_POLYINTERP_PNORPROJ = 134219392	
	};

	std::map<std::string, int> create_string_to_DT_method_poly_items() {
		return {{"TOPOLOGY", DT_method_poly_items_TOPOLOGY}, {"NEAREST", DT_method_poly_items_NEAREST}, {"NORMAL", DT_method_poly_items_NORMAL}, {"POLYINTERP_PNORPROJ", DT_method_poly_items_POLYINTERP_PNORPROJ}};
	};

	std::map<int, std::string> create_DT_method_poly_items_to_string() {
		return {{DT_method_poly_items_TOPOLOGY, "TOPOLOGY"}, {DT_method_poly_items_NEAREST, "NEAREST"}, {DT_method_poly_items_NORMAL, "NORMAL"}, {DT_method_poly_items_POLYINTERP_PNORPROJ, "POLYINTERP_PNORPROJ"}};
	};

	const std::map<std::string, int> string_to_DT_method_poly_items = create_string_to_DT_method_poly_items();
	const std::map<int, std::string> DT_method_poly_items_to_string = create_DT_method_poly_items_to_string();

	DT_method_poly_items_enum poly_mapping() {
		STRING_TYPE_GETTER("poly_mapping", static_cast<DT_method_poly_items_enum>(string_to_DT_method_poly_items.at(resstr)))
	}

	void poly_mapping(DT_method_poly_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "poly_mapping", DT_method_poly_items_to_string.at(value))
	}

	bool use_max_distance() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_distance")
	}

	void use_max_distance(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_distance", value)
	}

	float max_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_distance")
	}

	void max_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_distance", value)
	}

	float ray_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ray_radius")
	}

	void ray_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ray_radius", value)
	}

	float islands_precision() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "islands_precision")
	}

	void islands_precision(float value) {
		PRIMITIVE_TYPES_SETTER("f", "islands_precision", value)
	}

	enum DT_layers_select_src_items_enum {
		DT_layers_select_src_items_ACTIVE = -1,	
		DT_layers_select_src_items_ALL = -2,	
		DT_layers_select_src_items_BONE_SELECT = -257,	
		DT_layers_select_src_items_BONE_DEFORM = -258	
	};

	std::map<std::string, int> create_string_to_DT_layers_select_src_items() {
		return {{"ACTIVE", DT_layers_select_src_items_ACTIVE}, {"ALL", DT_layers_select_src_items_ALL}, {"BONE_SELECT", DT_layers_select_src_items_BONE_SELECT}, {"BONE_DEFORM", DT_layers_select_src_items_BONE_DEFORM}};
	};

	std::map<int, std::string> create_DT_layers_select_src_items_to_string() {
		return {{DT_layers_select_src_items_ACTIVE, "ACTIVE"}, {DT_layers_select_src_items_ALL, "ALL"}, {DT_layers_select_src_items_BONE_SELECT, "BONE_SELECT"}, {DT_layers_select_src_items_BONE_DEFORM, "BONE_DEFORM"}};
	};

	const std::map<std::string, int> string_to_DT_layers_select_src_items = create_string_to_DT_layers_select_src_items();
	const std::map<int, std::string> DT_layers_select_src_items_to_string = create_DT_layers_select_src_items_to_string();

	DT_layers_select_src_items_enum layers_vgroup_select_src() {
		STRING_TYPE_GETTER("layers_vgroup_select_src", static_cast<DT_layers_select_src_items_enum>(string_to_DT_layers_select_src_items.at(resstr)))
	}

	void layers_vgroup_select_src(DT_layers_select_src_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layers_vgroup_select_src", DT_layers_select_src_items_to_string.at(value))
	}

	DT_layers_select_src_items_enum layers_vcol_select_src() {
		STRING_TYPE_GETTER("layers_vcol_select_src", static_cast<DT_layers_select_src_items_enum>(string_to_DT_layers_select_src_items.at(resstr)))
	}

	void layers_vcol_select_src(DT_layers_select_src_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layers_vcol_select_src", DT_layers_select_src_items_to_string.at(value))
	}

	DT_layers_select_src_items_enum layers_uv_select_src() {
		STRING_TYPE_GETTER("layers_uv_select_src", static_cast<DT_layers_select_src_items_enum>(string_to_DT_layers_select_src_items.at(resstr)))
	}

	void layers_uv_select_src(DT_layers_select_src_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layers_uv_select_src", DT_layers_select_src_items_to_string.at(value))
	}

	enum DT_layers_select_dst_items_enum {
		DT_layers_select_dst_items_ACTIVE = -1,	
		DT_layers_select_dst_items_NAME = -2,	
		DT_layers_select_dst_items_INDEX = -3	
	};

	std::map<std::string, int> create_string_to_DT_layers_select_dst_items() {
		return {{"ACTIVE", DT_layers_select_dst_items_ACTIVE}, {"NAME", DT_layers_select_dst_items_NAME}, {"INDEX", DT_layers_select_dst_items_INDEX}};
	};

	std::map<int, std::string> create_DT_layers_select_dst_items_to_string() {
		return {{DT_layers_select_dst_items_ACTIVE, "ACTIVE"}, {DT_layers_select_dst_items_NAME, "NAME"}, {DT_layers_select_dst_items_INDEX, "INDEX"}};
	};

	const std::map<std::string, int> string_to_DT_layers_select_dst_items = create_string_to_DT_layers_select_dst_items();
	const std::map<int, std::string> DT_layers_select_dst_items_to_string = create_DT_layers_select_dst_items_to_string();

	DT_layers_select_dst_items_enum layers_vgroup_select_dst() {
		STRING_TYPE_GETTER("layers_vgroup_select_dst", static_cast<DT_layers_select_dst_items_enum>(string_to_DT_layers_select_dst_items.at(resstr)))
	}

	void layers_vgroup_select_dst(DT_layers_select_dst_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layers_vgroup_select_dst", DT_layers_select_dst_items_to_string.at(value))
	}

	DT_layers_select_dst_items_enum layers_vcol_select_dst() {
		STRING_TYPE_GETTER("layers_vcol_select_dst", static_cast<DT_layers_select_dst_items_enum>(string_to_DT_layers_select_dst_items.at(resstr)))
	}

	void layers_vcol_select_dst(DT_layers_select_dst_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layers_vcol_select_dst", DT_layers_select_dst_items_to_string.at(value))
	}

	DT_layers_select_dst_items_enum layers_uv_select_dst() {
		STRING_TYPE_GETTER("layers_uv_select_dst", static_cast<DT_layers_select_dst_items_enum>(string_to_DT_layers_select_dst_items.at(resstr)))
	}

	void layers_uv_select_dst(DT_layers_select_dst_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layers_uv_select_dst", DT_layers_select_dst_items_to_string.at(value))
	}

	enum DT_mix_mode_items_enum {
		DT_mix_mode_items_REPLACE = 0,	
		DT_mix_mode_items_ABOVE_THRESHOLD = 1,	
		DT_mix_mode_items_BELOW_THRESHOLD = 2,	
		DT_mix_mode_items_MIX = 16,	
		DT_mix_mode_items_ADD = 17,	
		DT_mix_mode_items_SUB = 18,	
		DT_mix_mode_items_MUL = 19	
	};

	std::map<std::string, int> create_string_to_DT_mix_mode_items() {
		return {{"REPLACE", DT_mix_mode_items_REPLACE}, {"ABOVE_THRESHOLD", DT_mix_mode_items_ABOVE_THRESHOLD}, {"BELOW_THRESHOLD", DT_mix_mode_items_BELOW_THRESHOLD}, {"MIX", DT_mix_mode_items_MIX}, {"ADD", DT_mix_mode_items_ADD}, {"SUB", DT_mix_mode_items_SUB}, {"MUL", DT_mix_mode_items_MUL}};
	};

	std::map<int, std::string> create_DT_mix_mode_items_to_string() {
		return {{DT_mix_mode_items_REPLACE, "REPLACE"}, {DT_mix_mode_items_ABOVE_THRESHOLD, "ABOVE_THRESHOLD"}, {DT_mix_mode_items_BELOW_THRESHOLD, "BELOW_THRESHOLD"}, {DT_mix_mode_items_MIX, "MIX"}, {DT_mix_mode_items_ADD, "ADD"}, {DT_mix_mode_items_SUB, "SUB"}, {DT_mix_mode_items_MUL, "MUL"}};
	};

	const std::map<std::string, int> string_to_DT_mix_mode_items = create_string_to_DT_mix_mode_items();
	const std::map<int, std::string> DT_mix_mode_items_to_string = create_DT_mix_mode_items_to_string();

	DT_mix_mode_items_enum mix_mode() {
		STRING_TYPE_GETTER("mix_mode", static_cast<DT_mix_mode_items_enum>(string_to_DT_mix_mode_items.at(resstr)))
	}

	void mix_mode(DT_mix_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mix_mode", DT_mix_mode_items_to_string.at(value))
	}

	float mix_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mix_factor")
	}

	void mix_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mix_factor", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}
};

class NormalEditModifier : public Modifier {
public:
	NormalEditModifier(PyObject* pyobj) : Modifier(pyobj) {}
	NormalEditModifier() : Modifier(0) { }

	enum prop_mode_items_enum {
		prop_mode_items_RADIAL = 0,	
		prop_mode_items_DIRECTIONAL = 1	
	};

	std::map<std::string, int> create_string_to_prop_mode_items() {
		return {{"RADIAL", prop_mode_items_RADIAL}, {"DIRECTIONAL", prop_mode_items_DIRECTIONAL}};
	};

	std::map<int, std::string> create_prop_mode_items_to_string() {
		return {{prop_mode_items_RADIAL, "RADIAL"}, {prop_mode_items_DIRECTIONAL, "DIRECTIONAL"}};
	};

	const std::map<std::string, int> string_to_prop_mode_items = create_string_to_prop_mode_items();
	const std::map<int, std::string> prop_mode_items_to_string = create_prop_mode_items_to_string();

	prop_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_mode_items_enum>(string_to_prop_mode_items.at(resstr)))
	}

	void mode(prop_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_mode_items_to_string.at(value))
	}

	VFLOAT3 offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "offset", 3)
	}

	void offset(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset", 3)
	}

	enum prop_mix_mode_items_enum {
		prop_mix_mode_items_COPY = 0,	
		prop_mix_mode_items_ADD = 1,	
		prop_mix_mode_items_SUB = 2,	
		prop_mix_mode_items_MUL = 3	
	};

	std::map<std::string, int> create_string_to_prop_mix_mode_items() {
		return {{"COPY", prop_mix_mode_items_COPY}, {"ADD", prop_mix_mode_items_ADD}, {"SUB", prop_mix_mode_items_SUB}, {"MUL", prop_mix_mode_items_MUL}};
	};

	std::map<int, std::string> create_prop_mix_mode_items_to_string() {
		return {{prop_mix_mode_items_COPY, "COPY"}, {prop_mix_mode_items_ADD, "ADD"}, {prop_mix_mode_items_SUB, "SUB"}, {prop_mix_mode_items_MUL, "MUL"}};
	};

	const std::map<std::string, int> string_to_prop_mix_mode_items = create_string_to_prop_mix_mode_items();
	const std::map<int, std::string> prop_mix_mode_items_to_string = create_prop_mix_mode_items_to_string();

	prop_mix_mode_items_enum mix_mode() {
		STRING_TYPE_GETTER("mix_mode", static_cast<prop_mix_mode_items_enum>(string_to_prop_mix_mode_items.at(resstr)))
	}

	void mix_mode(prop_mix_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mix_mode", prop_mix_mode_items_to_string.at(value))
	}

	float mix_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mix_factor")
	}

	void mix_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mix_factor", value)
	}

	std::string vertex_group() {
		STRING_TYPE_GETTER("vertex_group", resstr)
	}

	void vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group", value)
	}

	bool invert_vertex_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group")
	}

	void invert_vertex_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group", value)
	}

	Object target();

	bool use_direction_parallel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_direction_parallel")
	}

	void use_direction_parallel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_direction_parallel", value)
	}
};

class NlaTrack : public pyUniplug {
public:
	NlaTrack(PyObject* pyobj) : pyUniplug(pyobj) {}
	NlaTrack() : pyUniplug(0) { }

	std::map<std::string, NlaStrip> strips();

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool is_solo() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_solo")
	}

	void is_solo(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_solo", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool lock_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock")
	}

	void lock_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock", value)
	}
};

class NlaStrip : public pyUniplug {
public:
	NlaStrip(PyObject* pyobj) : pyUniplug(pyobj) {}
	NlaStrip() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum prop_type_items_enum {
		prop_type_items_CLIP = 0,	
		prop_type_items_TRANSITION = 1,	
		prop_type_items_META = 2,	
		prop_type_items_SOUND = 3	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"CLIP", prop_type_items_CLIP}, {"TRANSITION", prop_type_items_TRANSITION}, {"META", prop_type_items_META}, {"SOUND", prop_type_items_SOUND}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_CLIP, "CLIP"}, {prop_type_items_TRANSITION, "TRANSITION"}, {prop_type_items_META, "META"}, {prop_type_items_SOUND, "SOUND"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", prop_type_items_to_string.at(value))
	}

	enum nla_mode_extend_items_enum {
		nla_mode_extend_items_NOTHING = 2,	
		nla_mode_extend_items_HOLD = 0,	
		nla_mode_extend_items_HOLD_FORWARD = 1	
	};

	std::map<std::string, int> create_string_to_nla_mode_extend_items() {
		return {{"NOTHING", nla_mode_extend_items_NOTHING}, {"HOLD", nla_mode_extend_items_HOLD}, {"HOLD_FORWARD", nla_mode_extend_items_HOLD_FORWARD}};
	};

	std::map<int, std::string> create_nla_mode_extend_items_to_string() {
		return {{nla_mode_extend_items_NOTHING, "NOTHING"}, {nla_mode_extend_items_HOLD, "HOLD"}, {nla_mode_extend_items_HOLD_FORWARD, "HOLD_FORWARD"}};
	};

	const std::map<std::string, int> string_to_nla_mode_extend_items = create_string_to_nla_mode_extend_items();
	const std::map<int, std::string> nla_mode_extend_items_to_string = create_nla_mode_extend_items_to_string();

	nla_mode_extend_items_enum extrapolation() {
		STRING_TYPE_GETTER("extrapolation", static_cast<nla_mode_extend_items_enum>(string_to_nla_mode_extend_items.at(resstr)))
	}

	void extrapolation(nla_mode_extend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "extrapolation", nla_mode_extend_items_to_string.at(value))
	}

	enum nla_mode_blend_items_enum {
		nla_mode_blend_items_REPLACE = 0,	
		nla_mode_blend_items_ADD = 1,	
		nla_mode_blend_items_SUBTRACT = 2,	
		nla_mode_blend_items_MULTIPLY = 3	
	};

	std::map<std::string, int> create_string_to_nla_mode_blend_items() {
		return {{"REPLACE", nla_mode_blend_items_REPLACE}, {"ADD", nla_mode_blend_items_ADD}, {"SUBTRACT", nla_mode_blend_items_SUBTRACT}, {"MULTIPLY", nla_mode_blend_items_MULTIPLY}};
	};

	std::map<int, std::string> create_nla_mode_blend_items_to_string() {
		return {{nla_mode_blend_items_REPLACE, "REPLACE"}, {nla_mode_blend_items_ADD, "ADD"}, {nla_mode_blend_items_SUBTRACT, "SUBTRACT"}, {nla_mode_blend_items_MULTIPLY, "MULTIPLY"}};
	};

	const std::map<std::string, int> string_to_nla_mode_blend_items = create_string_to_nla_mode_blend_items();
	const std::map<int, std::string> nla_mode_blend_items_to_string = create_nla_mode_blend_items_to_string();

	nla_mode_blend_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<nla_mode_blend_items_enum>(string_to_nla_mode_blend_items.at(resstr)))
	}

	void blend_type(nla_mode_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", nla_mode_blend_items_to_string.at(value))
	}

	float frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_start")
	}

	void frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_start", value)
	}

	float frame_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_end")
	}

	void frame_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_end", value)
	}

	float blend_in() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_in")
	}

	void blend_in(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_in", value)
	}

	float blend_out() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_out")
	}

	void blend_out(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_out", value)
	}

	bool use_auto_blend() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_blend")
	}

	void use_auto_blend(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_blend", value)
	}

	Action action() {
		CLASS_TYPES_GETTER(Action, "action")
	}

	float action_frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "action_frame_start")
	}

	void action_frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "action_frame_start", value)
	}

	float action_frame_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "action_frame_end")
	}

	void action_frame_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "action_frame_end", value)
	}

	float repeat() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "repeat")
	}

	void repeat(float value) {
		PRIMITIVE_TYPES_SETTER("f", "repeat", value)
	}

	float scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale")
	}

	void scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale", value)
	}

	std::map<std::string, FCurve> fcurves() {
		MAP_TYPE_GETTER("fcurves", FCurve)
	}

	std::map<std::string, FModifier> modifiers() {
		MAP_TYPE_GETTER("modifiers", FModifier)
	}

	std::map<std::string, NlaStrip> strips() {
		MAP_TYPE_GETTER("strips", NlaStrip)
	}

	float influence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence")
	}

	void influence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence", value)
	}

	float strip_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strip_time")
	}

	void strip_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strip_time", value)
	}

	bool use_animated_influence() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animated_influence")
	}

	void use_animated_influence(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animated_influence", value)
	}

	bool use_animated_time() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animated_time")
	}

	void use_animated_time(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animated_time", value)
	}

	bool use_animated_time_cyclic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animated_time_cyclic")
	}

	void use_animated_time_cyclic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animated_time_cyclic", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool use_reverse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse")
	}

	void use_reverse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse", value)
	}

	bool use_sync_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sync_length")
	}

	void use_sync_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sync_length", value)
	}
};

class NodeSocket : public pyUniplug {
public:
	NodeSocket(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeSocket() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string identifier() {
		STRING_TYPE_GETTER("identifier", resstr)
	}

	void identifier(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "identifier", value)
	}

	bool is_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_output")
	}

	void is_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_output", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool enabled() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "enabled")
	}

	void enabled(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "enabled", value)
	}

	int link_limit() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "link_limit")
	}

	void link_limit(int value) {
		PRIMITIVE_TYPES_SETTER("i", "link_limit", value)
	}

	bool is_linked() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_linked")
	}

	void is_linked(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_linked", value)
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool hide_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_value")
	}

	void hide_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_value", value)
	}

	Node node();

	enum node_socket_type_items_enum {
		node_socket_type_items_CUSTOM = -1,	
		node_socket_type_items_VALUE = 0,	
		node_socket_type_items_INT = 6,	
		node_socket_type_items_BOOLEAN = 4,	
		node_socket_type_items_VECTOR = 1,	
		node_socket_type_items_STRING = 7,	
		node_socket_type_items_RGBA = 2,	
		node_socket_type_items_SHADER = 3	
	};

	std::map<std::string, int> create_string_to_node_socket_type_items() {
		return {{"CUSTOM", node_socket_type_items_CUSTOM}, {"VALUE", node_socket_type_items_VALUE}, {"INT", node_socket_type_items_INT}, {"BOOLEAN", node_socket_type_items_BOOLEAN}, {"VECTOR", node_socket_type_items_VECTOR}, {"STRING", node_socket_type_items_STRING}, {"RGBA", node_socket_type_items_RGBA}, {"SHADER", node_socket_type_items_SHADER}};
	};

	std::map<int, std::string> create_node_socket_type_items_to_string() {
		return {{node_socket_type_items_CUSTOM, "CUSTOM"}, {node_socket_type_items_VALUE, "VALUE"}, {node_socket_type_items_INT, "INT"}, {node_socket_type_items_BOOLEAN, "BOOLEAN"}, {node_socket_type_items_VECTOR, "VECTOR"}, {node_socket_type_items_STRING, "STRING"}, {node_socket_type_items_RGBA, "RGBA"}, {node_socket_type_items_SHADER, "SHADER"}};
	};

	const std::map<std::string, int> string_to_node_socket_type_items = create_string_to_node_socket_type_items();
	const std::map<int, std::string> node_socket_type_items_to_string = create_node_socket_type_items_to_string();

	node_socket_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<node_socket_type_items_enum>(string_to_node_socket_type_items.at(resstr)))
	}

	void type(node_socket_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", node_socket_type_items_to_string.at(value))
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

};

class NodeSocketInterface : public pyUniplug {
public:
	NodeSocketInterface(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeSocketInterface() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string identifier() {
		STRING_TYPE_GETTER("identifier", resstr)
	}

	void identifier(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "identifier", value)
	}

	bool is_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_output")
	}

	void is_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_output", value)
	}

	std::string bl_socket_idname() {
		STRING_TYPE_GETTER("bl_socket_idname", resstr)
	}

	void bl_socket_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_socket_idname", value)
	}

};

class Node : public pyUniplug {
public:
	Node(PyObject* pyobj) : pyUniplug(pyobj) {}
	Node() : pyUniplug(0) { }

	enum dummy_static_type_items_enum {
		dummy_static_type_items_CUSTOM = -1	
	};

	std::map<std::string, int> create_string_to_dummy_static_type_items() {
		return {{"CUSTOM", dummy_static_type_items_CUSTOM}};
	};

	std::map<int, std::string> create_dummy_static_type_items_to_string() {
		return {{dummy_static_type_items_CUSTOM, "CUSTOM"}};
	};

	const std::map<std::string, int> string_to_dummy_static_type_items = create_string_to_dummy_static_type_items();
	const std::map<int, std::string> dummy_static_type_items_to_string = create_dummy_static_type_items_to_string();

	dummy_static_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<dummy_static_type_items_enum>(string_to_dummy_static_type_items.at(resstr)))
	}

	void type(dummy_static_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", dummy_static_type_items_to_string.at(value))
	}

	VFLOAT2 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 2)
	}

	void location(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 2)
	}

	float width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width")
	}

	void width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width", value)
	}

	float width_hidden() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width_hidden")
	}

	void width_hidden(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width_hidden", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	VFLOAT2 dimensions() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "dimensions", 2)
	}

	void dimensions(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "dimensions", 2)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string label() {
		STRING_TYPE_GETTER("label", resstr)
	}

	void label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "label", value)
	}

	std::map<std::string, NodeSocket> inputs() {
		MAP_TYPE_GETTER("inputs", NodeSocket)
	}

	std::map<std::string, NodeSocket> outputs() {
		MAP_TYPE_GETTER("outputs", NodeSocket)
	}

	std::map<std::string, NodeLink> internal_links();

	Node parent() {
		CLASS_TYPES_GETTER(Node, "parent")
	}

	bool use_custom_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_custom_color")
	}

	void use_custom_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_custom_color", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool show_options() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_options")
	}

	void show_options(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_options", value)
	}

	bool show_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_preview")
	}

	void show_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_preview", value)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool show_texture() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_texture")
	}

	void show_texture(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_texture", value)
	}

	enum node_shading_compatibilities_enum {
		node_shading_compatibilities_OLD_SHADING = 1,	
		node_shading_compatibilities_NEW_SHADING = 2	
	};

	std::map<std::string, int> create_string_to_node_shading_compatibilities() {
		return {{"OLD_SHADING", node_shading_compatibilities_OLD_SHADING}, {"NEW_SHADING", node_shading_compatibilities_NEW_SHADING}};
	};

	std::map<int, std::string> create_node_shading_compatibilities_to_string() {
		return {{node_shading_compatibilities_OLD_SHADING, "OLD_SHADING"}, {node_shading_compatibilities_NEW_SHADING, "NEW_SHADING"}};
	};

	const std::map<std::string, int> string_to_node_shading_compatibilities = create_string_to_node_shading_compatibilities();
	const std::map<int, std::string> node_shading_compatibilities_to_string = create_node_shading_compatibilities_to_string();

	node_shading_compatibilities_enum shading_compatibility() {
		STRING_TYPE_GETTER("shading_compatibility", static_cast<node_shading_compatibilities_enum>(string_to_node_shading_compatibilities.at(resstr)))
	}

	void shading_compatibility(node_shading_compatibilities_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shading_compatibility", node_shading_compatibilities_to_string.at(value))
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_description() {
		STRING_TYPE_GETTER("bl_description", resstr)
	}

	void bl_description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_description", value)
	}

	enum node_icon_items_enum {
		node_icon_items_NONE = 0,	
		node_icon_items_QUESTION = 1,	
		node_icon_items_ERROR = 2,	
		node_icon_items_CANCEL = 3,	
		node_icon_items_TRIA_RIGHT = 4,	
		node_icon_items_TRIA_DOWN = 5,	
		node_icon_items_TRIA_LEFT = 6,	
		node_icon_items_TRIA_UP = 7,	
		node_icon_items_ARROW_LEFTRIGHT = 8,	
		node_icon_items_PLUS = 9,	
		node_icon_items_DISCLOSURE_TRI_DOWN = 10,	
		node_icon_items_DISCLOSURE_TRI_RIGHT = 11,	
		node_icon_items_RADIOBUT_OFF = 12,	
		node_icon_items_RADIOBUT_ON = 13,	
		node_icon_items_MENU_PANEL = 14,	
		node_icon_items_BLENDER = 15,	
		node_icon_items_GRIP = 16,	
		node_icon_items_DOT = 17,	
		node_icon_items_COLLAPSEMENU = 18,	
		node_icon_items_X = 19,	
		node_icon_items_GO_LEFT = 21,	
		node_icon_items_PLUG = 22,	
		node_icon_items_UI = 23,	
		node_icon_items_NODE = 24,	
		node_icon_items_NODE_SEL = 25,	
		node_icon_items_FULLSCREEN = 26,	
		node_icon_items_SPLITSCREEN = 27,	
		node_icon_items_RIGHTARROW_THIN = 28,	
		node_icon_items_BORDERMOVE = 29,	
		node_icon_items_VIEWZOOM = 30,	
		node_icon_items_ZOOMIN = 31,	
		node_icon_items_ZOOMOUT = 32,	
		node_icon_items_PANEL_CLOSE = 33,	
		node_icon_items_COPY_ID = 34,	
		node_icon_items_EYEDROPPER = 35,	
		node_icon_items_LINK_AREA = 36,	
		node_icon_items_AUTO = 37,	
		node_icon_items_CHECKBOX_DEHLT = 38,	
		node_icon_items_CHECKBOX_HLT = 39,	
		node_icon_items_UNLOCKED = 40,	
		node_icon_items_LOCKED = 41,	
		node_icon_items_UNPINNED = 42,	
		node_icon_items_PINNED = 43,	
		node_icon_items_SCREEN_BACK = 44,	
		node_icon_items_RIGHTARROW = 45,	
		node_icon_items_DOWNARROW_HLT = 46,	
		node_icon_items_DOTSUP = 47,	
		node_icon_items_DOTSDOWN = 48,	
		node_icon_items_LINK = 49,	
		node_icon_items_INLINK = 50,	
		node_icon_items_PLUGIN = 51,	
		node_icon_items_HELP = 52,	
		node_icon_items_GHOST_ENABLED = 53,	
		node_icon_items_COLOR = 54,	
		node_icon_items_LINKED = 55,	
		node_icon_items_UNLINKED = 56,	
		node_icon_items_HAND = 57,	
		node_icon_items_ZOOM_ALL = 58,	
		node_icon_items_ZOOM_SELECTED = 59,	
		node_icon_items_ZOOM_PREVIOUS = 60,	
		node_icon_items_ZOOM_IN = 61,	
		node_icon_items_ZOOM_OUT = 62,	
		node_icon_items_RENDER_REGION = 63,	
		node_icon_items_BORDER_RECT = 64,	
		node_icon_items_BORDER_LASSO = 65,	
		node_icon_items_FREEZE = 66,	
		node_icon_items_STYLUS_PRESSURE = 67,	
		node_icon_items_GHOST_DISABLED = 68,	
		node_icon_items_NEW = 69,	
		node_icon_items_FILE_TICK = 70,	
		node_icon_items_QUIT = 71,	
		node_icon_items_URL = 72,	
		node_icon_items_RECOVER_LAST = 73,	
		node_icon_items_FULLSCREEN_ENTER = 75,	
		node_icon_items_FULLSCREEN_EXIT = 76,	
		node_icon_items_BLANK1 = 77,	
		node_icon_items_LAMP = 78,	
		node_icon_items_MATERIAL = 79,	
		node_icon_items_TEXTURE = 80,	
		node_icon_items_ANIM = 81,	
		node_icon_items_WORLD = 82,	
		node_icon_items_SCENE = 83,	
		node_icon_items_EDIT = 84,	
		node_icon_items_GAME = 85,	
		node_icon_items_RADIO = 86,	
		node_icon_items_SCRIPT = 87,	
		node_icon_items_PARTICLES = 88,	
		node_icon_items_PHYSICS = 89,	
		node_icon_items_SPEAKER = 90,	
		node_icon_items_TEXTURE_SHADED = 91,	
		node_icon_items_VIEW3D = 104,	
		node_icon_items_IPO = 105,	
		node_icon_items_OOPS = 106,	
		node_icon_items_BUTS = 107,	
		node_icon_items_FILESEL = 108,	
		node_icon_items_IMAGE_COL = 109,	
		node_icon_items_INFO = 110,	
		node_icon_items_SEQUENCE = 111,	
		node_icon_items_TEXT = 112,	
		node_icon_items_IMASEL = 113,	
		node_icon_items_SOUND = 114,	
		node_icon_items_ACTION = 115,	
		node_icon_items_NLA = 116,	
		node_icon_items_SCRIPTWIN = 117,	
		node_icon_items_TIME = 118,	
		node_icon_items_NODETREE = 119,	
		node_icon_items_LOGIC = 120,	
		node_icon_items_CONSOLE = 121,	
		node_icon_items_PREFERENCES = 122,	
		node_icon_items_CLIP = 123,	
		node_icon_items_ASSET_MANAGER = 124,	
		node_icon_items_OBJECT_DATAMODE = 130,	
		node_icon_items_EDITMODE_HLT = 131,	
		node_icon_items_FACESEL_HLT = 132,	
		node_icon_items_VPAINT_HLT = 133,	
		node_icon_items_TPAINT_HLT = 134,	
		node_icon_items_WPAINT_HLT = 135,	
		node_icon_items_SCULPTMODE_HLT = 136,	
		node_icon_items_POSE_HLT = 137,	
		node_icon_items_PARTICLEMODE = 138,	
		node_icon_items_LIGHTPAINT = 139,	
		node_icon_items_SCENE_DATA = 156,	
		node_icon_items_RENDERLAYERS = 157,	
		node_icon_items_WORLD_DATA = 158,	
		node_icon_items_OBJECT_DATA = 159,	
		node_icon_items_MESH_DATA = 160,	
		node_icon_items_CURVE_DATA = 161,	
		node_icon_items_META_DATA = 162,	
		node_icon_items_LATTICE_DATA = 163,	
		node_icon_items_LAMP_DATA = 164,	
		node_icon_items_MATERIAL_DATA = 165,	
		node_icon_items_TEXTURE_DATA = 166,	
		node_icon_items_ANIM_DATA = 167,	
		node_icon_items_CAMERA_DATA = 168,	
		node_icon_items_PARTICLE_DATA = 169,	
		node_icon_items_LIBRARY_DATA_DIRECT = 170,	
		node_icon_items_GROUP = 171,	
		node_icon_items_ARMATURE_DATA = 172,	
		node_icon_items_POSE_DATA = 173,	
		node_icon_items_BONE_DATA = 174,	
		node_icon_items_CONSTRAINT = 175,	
		node_icon_items_SHAPEKEY_DATA = 176,	
		node_icon_items_CONSTRAINT_BONE = 177,	
		node_icon_items_CAMERA_STEREO = 178,	
		node_icon_items_PACKAGE = 179,	
		node_icon_items_UGLYPACKAGE = 180,	
		node_icon_items_BRUSH_DATA = 182,	
		node_icon_items_IMAGE_DATA = 183,	
		node_icon_items_FILE = 184,	
		node_icon_items_FCURVE = 185,	
		node_icon_items_FONT_DATA = 186,	
		node_icon_items_RENDER_RESULT = 187,	
		node_icon_items_SURFACE_DATA = 188,	
		node_icon_items_EMPTY_DATA = 189,	
		node_icon_items_SETTINGS = 190,	
		node_icon_items_RENDER_ANIMATION = 191,	
		node_icon_items_RENDER_STILL = 192,	
		node_icon_items_LIBRARY_DATA_BROKEN = 193,	
		node_icon_items_BOIDS = 194,	
		node_icon_items_STRANDS = 195,	
		node_icon_items_LIBRARY_DATA_INDIRECT = 196,	
		node_icon_items_GREASEPENCIL = 197,	
		node_icon_items_LINE_DATA = 198,	
		node_icon_items_GROUP_BONE = 200,	
		node_icon_items_GROUP_VERTEX = 201,	
		node_icon_items_GROUP_VCOL = 202,	
		node_icon_items_GROUP_UVS = 203,	
		node_icon_items_RNA = 206,	
		node_icon_items_RNA_ADD = 207,	
		node_icon_items_OUTLINER_OB_EMPTY = 234,	
		node_icon_items_OUTLINER_OB_MESH = 235,	
		node_icon_items_OUTLINER_OB_CURVE = 236,	
		node_icon_items_OUTLINER_OB_LATTICE = 237,	
		node_icon_items_OUTLINER_OB_META = 238,	
		node_icon_items_OUTLINER_OB_LAMP = 239,	
		node_icon_items_OUTLINER_OB_CAMERA = 240,	
		node_icon_items_OUTLINER_OB_ARMATURE = 241,	
		node_icon_items_OUTLINER_OB_FONT = 242,	
		node_icon_items_OUTLINER_OB_SURFACE = 243,	
		node_icon_items_OUTLINER_OB_SPEAKER = 244,	
		node_icon_items_RESTRICT_VIEW_OFF = 253,	
		node_icon_items_RESTRICT_VIEW_ON = 254,	
		node_icon_items_RESTRICT_SELECT_OFF = 255,	
		node_icon_items_RESTRICT_SELECT_ON = 256,	
		node_icon_items_RESTRICT_RENDER_OFF = 257,	
		node_icon_items_RESTRICT_RENDER_ON = 258,	
		node_icon_items_OUTLINER_DATA_EMPTY = 260,	
		node_icon_items_OUTLINER_DATA_MESH = 261,	
		node_icon_items_OUTLINER_DATA_CURVE = 262,	
		node_icon_items_OUTLINER_DATA_LATTICE = 263,	
		node_icon_items_OUTLINER_DATA_META = 264,	
		node_icon_items_OUTLINER_DATA_LAMP = 265,	
		node_icon_items_OUTLINER_DATA_CAMERA = 266,	
		node_icon_items_OUTLINER_DATA_ARMATURE = 267,	
		node_icon_items_OUTLINER_DATA_FONT = 268,	
		node_icon_items_OUTLINER_DATA_SURFACE = 269,	
		node_icon_items_OUTLINER_DATA_SPEAKER = 270,	
		node_icon_items_OUTLINER_DATA_POSE = 271,	
		node_icon_items_MESH_PLANE = 286,	
		node_icon_items_MESH_CUBE = 287,	
		node_icon_items_MESH_CIRCLE = 288,	
		node_icon_items_MESH_UVSPHERE = 289,	
		node_icon_items_MESH_ICOSPHERE = 290,	
		node_icon_items_MESH_GRID = 291,	
		node_icon_items_MESH_MONKEY = 292,	
		node_icon_items_MESH_CYLINDER = 293,	
		node_icon_items_MESH_TORUS = 294,	
		node_icon_items_MESH_CONE = 295,	
		node_icon_items_LAMP_POINT = 298,	
		node_icon_items_LAMP_SUN = 299,	
		node_icon_items_LAMP_SPOT = 300,	
		node_icon_items_LAMP_HEMI = 301,	
		node_icon_items_LAMP_AREA = 302,	
		node_icon_items_META_EMPTY = 305,	
		node_icon_items_META_PLANE = 306,	
		node_icon_items_META_CUBE = 307,	
		node_icon_items_META_BALL = 308,	
		node_icon_items_META_ELLIPSOID = 309,	
		node_icon_items_META_CAPSULE = 310,	
		node_icon_items_SURFACE_NCURVE = 312,	
		node_icon_items_SURFACE_NCIRCLE = 313,	
		node_icon_items_SURFACE_NSURFACE = 314,	
		node_icon_items_SURFACE_NCYLINDER = 315,	
		node_icon_items_SURFACE_NSPHERE = 316,	
		node_icon_items_SURFACE_NTORUS = 317,	
		node_icon_items_CURVE_BEZCURVE = 321,	
		node_icon_items_CURVE_BEZCIRCLE = 322,	
		node_icon_items_CURVE_NCURVE = 323,	
		node_icon_items_CURVE_NCIRCLE = 324,	
		node_icon_items_CURVE_PATH = 325,	
		node_icon_items_COLOR_RED = 331,	
		node_icon_items_COLOR_GREEN = 332,	
		node_icon_items_COLOR_BLUE = 333,	
		node_icon_items_TRIA_RIGHT_BAR = 334,	
		node_icon_items_TRIA_DOWN_BAR = 335,	
		node_icon_items_TRIA_LEFT_BAR = 336,	
		node_icon_items_TRIA_UP_BAR = 337,	
		node_icon_items_FORCE_FORCE = 338,	
		node_icon_items_FORCE_WIND = 339,	
		node_icon_items_FORCE_VORTEX = 340,	
		node_icon_items_FORCE_MAGNETIC = 341,	
		node_icon_items_FORCE_HARMONIC = 342,	
		node_icon_items_FORCE_CHARGE = 343,	
		node_icon_items_FORCE_LENNARDJONES = 344,	
		node_icon_items_FORCE_TEXTURE = 345,	
		node_icon_items_FORCE_CURVE = 346,	
		node_icon_items_FORCE_BOID = 347,	
		node_icon_items_FORCE_TURBULENCE = 348,	
		node_icon_items_FORCE_DRAG = 349,	
		node_icon_items_FORCE_SMOKEFLOW = 350,	
		node_icon_items_MODIFIER = 442,	
		node_icon_items_MOD_WAVE = 443,	
		node_icon_items_MOD_BUILD = 444,	
		node_icon_items_MOD_DECIM = 445,	
		node_icon_items_MOD_MIRROR = 446,	
		node_icon_items_MOD_SOFT = 447,	
		node_icon_items_MOD_SUBSURF = 448,	
		node_icon_items_HOOK = 449,	
		node_icon_items_MOD_PHYSICS = 450,	
		node_icon_items_MOD_PARTICLES = 451,	
		node_icon_items_MOD_BOOLEAN = 452,	
		node_icon_items_MOD_EDGESPLIT = 453,	
		node_icon_items_MOD_ARRAY = 454,	
		node_icon_items_MOD_UVPROJECT = 455,	
		node_icon_items_MOD_DISPLACE = 456,	
		node_icon_items_MOD_CURVE = 457,	
		node_icon_items_MOD_LATTICE = 458,	
		node_icon_items_CONSTRAINT_DATA = 459,	
		node_icon_items_MOD_ARMATURE = 460,	
		node_icon_items_MOD_SHRINKWRAP = 461,	
		node_icon_items_MOD_CAST = 462,	
		node_icon_items_MOD_MESHDEFORM = 463,	
		node_icon_items_MOD_BEVEL = 464,	
		node_icon_items_MOD_SMOOTH = 465,	
		node_icon_items_MOD_SIMPLEDEFORM = 466,	
		node_icon_items_MOD_MASK = 467,	
		node_icon_items_MOD_CLOTH = 468,	
		node_icon_items_MOD_EXPLODE = 469,	
		node_icon_items_MOD_FLUIDSIM = 470,	
		node_icon_items_MOD_MULTIRES = 471,	
		node_icon_items_MOD_SMOKE = 472,	
		node_icon_items_MOD_SOLIDIFY = 473,	
		node_icon_items_MOD_SCREW = 474,	
		node_icon_items_MOD_VERTEX_WEIGHT = 475,	
		node_icon_items_MOD_DYNAMICPAINT = 476,	
		node_icon_items_MOD_REMESH = 477,	
		node_icon_items_MOD_OCEAN = 478,	
		node_icon_items_MOD_WARP = 479,	
		node_icon_items_MOD_SKIN = 480,	
		node_icon_items_MOD_TRIANGULATE = 481,	
		node_icon_items_MOD_WIREFRAME = 482,	
		node_icon_items_MOD_DATA_TRANSFER = 483,	
		node_icon_items_MOD_NORMALEDIT = 484,	
		node_icon_items_REC = 494,	
		node_icon_items_PLAY = 495,	
		node_icon_items_FF = 496,	
		node_icon_items_REW = 497,	
		node_icon_items_PAUSE = 498,	
		node_icon_items_PREV_KEYFRAME = 499,	
		node_icon_items_NEXT_KEYFRAME = 500,	
		node_icon_items_PLAY_AUDIO = 501,	
		node_icon_items_PLAY_REVERSE = 502,	
		node_icon_items_PREVIEW_RANGE = 503,	
		node_icon_items_ACTION_TWEAK = 504,	
		node_icon_items_PMARKER_ACT = 505,	
		node_icon_items_PMARKER_SEL = 506,	
		node_icon_items_PMARKER = 507,	
		node_icon_items_MARKER_HLT = 508,	
		node_icon_items_MARKER = 509,	
		node_icon_items_SPACE2 = 510,	
		node_icon_items_SPACE3 = 511,	
		node_icon_items_KEYINGSET = 512,	
		node_icon_items_KEY_DEHLT = 513,	
		node_icon_items_KEY_HLT = 514,	
		node_icon_items_MUTE_IPO_OFF = 515,	
		node_icon_items_MUTE_IPO_ON = 516,	
		node_icon_items_VISIBLE_IPO_OFF = 517,	
		node_icon_items_VISIBLE_IPO_ON = 518,	
		node_icon_items_DRIVER = 519,	
		node_icon_items_SOLO_OFF = 520,	
		node_icon_items_SOLO_ON = 521,	
		node_icon_items_FRAME_PREV = 522,	
		node_icon_items_FRAME_NEXT = 523,	
		node_icon_items_NLA_PUSHDOWN = 524,	
		node_icon_items_IPO_CONSTANT = 525,	
		node_icon_items_IPO_LINEAR = 526,	
		node_icon_items_IPO_BEZIER = 527,	
		node_icon_items_IPO_SINE = 528,	
		node_icon_items_IPO_QUAD = 529,	
		node_icon_items_IPO_CUBIC = 530,	
		node_icon_items_IPO_QUART = 531,	
		node_icon_items_IPO_QUINT = 532,	
		node_icon_items_IPO_EXPO = 533,	
		node_icon_items_IPO_CIRC = 534,	
		node_icon_items_IPO_BOUNCE = 535,	
		node_icon_items_IPO_ELASTIC = 536,	
		node_icon_items_IPO_BACK = 537,	
		node_icon_items_IPO_EASE_IN = 538,	
		node_icon_items_IPO_EASE_OUT = 539,	
		node_icon_items_IPO_EASE_IN_OUT = 540,	
		node_icon_items_VERTEXSEL = 546,	
		node_icon_items_EDGESEL = 547,	
		node_icon_items_FACESEL = 548,	
		node_icon_items_LOOPSEL = 549,	
		node_icon_items_ROTATE = 551,	
		node_icon_items_CURSOR = 552,	
		node_icon_items_ROTATECOLLECTION = 553,	
		node_icon_items_ROTATECENTER = 554,	
		node_icon_items_ROTACTIVE = 555,	
		node_icon_items_ALIGN = 556,	
		node_icon_items_SMOOTHCURVE = 558,	
		node_icon_items_SPHERECURVE = 559,	
		node_icon_items_ROOTCURVE = 560,	
		node_icon_items_SHARPCURVE = 561,	
		node_icon_items_LINCURVE = 562,	
		node_icon_items_NOCURVE = 563,	
		node_icon_items_RNDCURVE = 564,	
		node_icon_items_PROP_OFF = 565,	
		node_icon_items_PROP_ON = 566,	
		node_icon_items_PROP_CON = 567,	
		node_icon_items_SCULPT_DYNTOPO = 568,	
		node_icon_items_PARTICLE_POINT = 569,	
		node_icon_items_PARTICLE_TIP = 570,	
		node_icon_items_PARTICLE_PATH = 571,	
		node_icon_items_MAN_TRANS = 572,	
		node_icon_items_MAN_ROT = 573,	
		node_icon_items_MAN_SCALE = 574,	
		node_icon_items_MANIPUL = 575,	
		node_icon_items_SNAP_OFF = 576,	
		node_icon_items_SNAP_ON = 577,	
		node_icon_items_SNAP_NORMAL = 578,	
		node_icon_items_SNAP_INCREMENT = 579,	
		node_icon_items_SNAP_VERTEX = 580,	
		node_icon_items_SNAP_EDGE = 581,	
		node_icon_items_SNAP_FACE = 582,	
		node_icon_items_SNAP_VOLUME = 583,	
		node_icon_items_STICKY_UVS_LOC = 585,	
		node_icon_items_STICKY_UVS_DISABLE = 586,	
		node_icon_items_STICKY_UVS_VERT = 587,	
		node_icon_items_CLIPUV_DEHLT = 588,	
		node_icon_items_CLIPUV_HLT = 589,	
		node_icon_items_SNAP_PEEL_OBJECT = 590,	
		node_icon_items_GRID = 591,	
		node_icon_items_PASTEDOWN = 598,	
		node_icon_items_COPYDOWN = 599,	
		node_icon_items_PASTEFLIPUP = 600,	
		node_icon_items_PASTEFLIPDOWN = 601,	
		node_icon_items_SNAP_SURFACE = 606,	
		node_icon_items_AUTOMERGE_ON = 607,	
		node_icon_items_AUTOMERGE_OFF = 608,	
		node_icon_items_RETOPO = 609,	
		node_icon_items_UV_VERTEXSEL = 610,	
		node_icon_items_UV_EDGESEL = 611,	
		node_icon_items_UV_FACESEL = 612,	
		node_icon_items_UV_ISLANDSEL = 613,	
		node_icon_items_UV_SYNC_SELECT = 614,	
		node_icon_items_BBOX = 624,	
		node_icon_items_WIRE = 625,	
		node_icon_items_SOLID = 626,	
		node_icon_items_SMOOTH = 627,	
		node_icon_items_POTATO = 628,	
		node_icon_items_ORTHO = 630,	
		node_icon_items_LOCKVIEW_OFF = 633,	
		node_icon_items_LOCKVIEW_ON = 634,	
		node_icon_items_AXIS_SIDE = 636,	
		node_icon_items_AXIS_FRONT = 637,	
		node_icon_items_AXIS_TOP = 638,	
		node_icon_items_NDOF_DOM = 639,	
		node_icon_items_NDOF_TURN = 640,	
		node_icon_items_NDOF_FLY = 641,	
		node_icon_items_NDOF_TRANS = 642,	
		node_icon_items_LAYER_USED = 643,	
		node_icon_items_LAYER_ACTIVE = 644,	
		node_icon_items_SORTALPHA = 676,	
		node_icon_items_SORTBYEXT = 677,	
		node_icon_items_SORTTIME = 678,	
		node_icon_items_SORTSIZE = 679,	
		node_icon_items_LONGDISPLAY = 680,	
		node_icon_items_SHORTDISPLAY = 681,	
		node_icon_items_GHOST = 682,	
		node_icon_items_IMGDISPLAY = 683,	
		node_icon_items_SAVE_AS = 684,	
		node_icon_items_SAVE_COPY = 685,	
		node_icon_items_BOOKMARKS = 686,	
		node_icon_items_FONTPREVIEW = 687,	
		node_icon_items_FILTER = 688,	
		node_icon_items_NEWFOLDER = 689,	
		node_icon_items_OPEN_RECENT = 690,	
		node_icon_items_FILE_PARENT = 691,	
		node_icon_items_FILE_REFRESH = 692,	
		node_icon_items_FILE_FOLDER = 693,	
		node_icon_items_FILE_BLANK = 694,	
		node_icon_items_FILE_BLEND = 695,	
		node_icon_items_FILE_IMAGE = 696,	
		node_icon_items_FILE_MOVIE = 697,	
		node_icon_items_FILE_SCRIPT = 698,	
		node_icon_items_FILE_SOUND = 699,	
		node_icon_items_FILE_FONT = 700,	
		node_icon_items_FILE_TEXT = 701,	
		node_icon_items_RECOVER_AUTO = 702,	
		node_icon_items_SAVE_PREFS = 703,	
		node_icon_items_LINK_BLEND = 704,	
		node_icon_items_APPEND_BLEND = 705,	
		node_icon_items_IMPORT = 706,	
		node_icon_items_EXPORT = 707,	
		node_icon_items_EXTERNAL_DATA = 708,	
		node_icon_items_LOAD_FACTORY = 709,	
		node_icon_items_LOOP_BACK = 715,	
		node_icon_items_LOOP_FORWARDS = 716,	
		node_icon_items_BACK = 717,	
		node_icon_items_FORWARD = 718,	
		node_icon_items_FILE_HIDDEN = 725,	
		node_icon_items_FILE_BACKUP = 726,	
		node_icon_items_DISK_DRIVE = 727,	
		node_icon_items_MATPLANE = 728,	
		node_icon_items_MATSPHERE = 729,	
		node_icon_items_MATCUBE = 730,	
		node_icon_items_MONKEY = 731,	
		node_icon_items_HAIR = 732,	
		node_icon_items_ALIASED = 733,	
		node_icon_items_ANTIALIASED = 734,	
		node_icon_items_MAT_SPHERE_SKY = 735,	
		node_icon_items_WORDWRAP_OFF = 740,	
		node_icon_items_WORDWRAP_ON = 741,	
		node_icon_items_SYNTAX_OFF = 742,	
		node_icon_items_SYNTAX_ON = 743,	
		node_icon_items_LINENUMBERS_OFF = 744,	
		node_icon_items_LINENUMBERS_ON = 745,	
		node_icon_items_SCRIPTPLUGINS = 746,	
		node_icon_items_SEQ_SEQUENCER = 754,	
		node_icon_items_SEQ_PREVIEW = 755,	
		node_icon_items_SEQ_LUMA_WAVEFORM = 756,	
		node_icon_items_SEQ_CHROMA_SCOPE = 757,	
		node_icon_items_SEQ_HISTOGRAM = 758,	
		node_icon_items_SEQ_SPLITVIEW = 759,	
		node_icon_items_IMAGE_RGB = 763,	
		node_icon_items_IMAGE_RGB_ALPHA = 764,	
		node_icon_items_IMAGE_ALPHA = 765,	
		node_icon_items_IMAGE_ZDEPTH = 766,	
		node_icon_items_IMAGEFILE = 767,	
		node_icon_items_BRUSH_ADD = 780,	
		node_icon_items_BRUSH_BLOB = 781,	
		node_icon_items_BRUSH_BLUR = 782,	
		node_icon_items_BRUSH_CLAY = 783,	
		node_icon_items_BRUSH_CLAY_STRIPS = 784,	
		node_icon_items_BRUSH_CLONE = 785,	
		node_icon_items_BRUSH_CREASE = 786,	
		node_icon_items_BRUSH_DARKEN = 787,	
		node_icon_items_BRUSH_FILL = 788,	
		node_icon_items_BRUSH_FLATTEN = 789,	
		node_icon_items_BRUSH_GRAB = 790,	
		node_icon_items_BRUSH_INFLATE = 791,	
		node_icon_items_BRUSH_LAYER = 792,	
		node_icon_items_BRUSH_LIGHTEN = 793,	
		node_icon_items_BRUSH_MASK = 794,	
		node_icon_items_BRUSH_MIX = 795,	
		node_icon_items_BRUSH_MULTIPLY = 796,	
		node_icon_items_BRUSH_NUDGE = 797,	
		node_icon_items_BRUSH_PINCH = 798,	
		node_icon_items_BRUSH_SCRAPE = 799,	
		node_icon_items_BRUSH_SCULPT_DRAW = 800,	
		node_icon_items_BRUSH_SMEAR = 801,	
		node_icon_items_BRUSH_SMOOTH = 802,	
		node_icon_items_BRUSH_SNAKE_HOOK = 803,	
		node_icon_items_BRUSH_SOFTEN = 804,	
		node_icon_items_BRUSH_SUBTRACT = 805,	
		node_icon_items_BRUSH_TEXDRAW = 806,	
		node_icon_items_BRUSH_TEXFILL = 807,	
		node_icon_items_BRUSH_TEXMASK = 808,	
		node_icon_items_BRUSH_THUMB = 809,	
		node_icon_items_BRUSH_ROTATE = 810,	
		node_icon_items_BRUSH_VERTEXDRAW = 811,	
		node_icon_items_MATCAP_01 = 812,	
		node_icon_items_MATCAP_02 = 813,	
		node_icon_items_MATCAP_03 = 814,	
		node_icon_items_MATCAP_04 = 815,	
		node_icon_items_MATCAP_05 = 816,	
		node_icon_items_MATCAP_06 = 817,	
		node_icon_items_MATCAP_07 = 818,	
		node_icon_items_MATCAP_08 = 819,	
		node_icon_items_MATCAP_09 = 820,	
		node_icon_items_MATCAP_10 = 821,	
		node_icon_items_MATCAP_11 = 822,	
		node_icon_items_MATCAP_12 = 823,	
		node_icon_items_MATCAP_13 = 824,	
		node_icon_items_MATCAP_14 = 825,	
		node_icon_items_MATCAP_15 = 826,	
		node_icon_items_MATCAP_16 = 827,	
		node_icon_items_MATCAP_17 = 828,	
		node_icon_items_MATCAP_18 = 829,	
		node_icon_items_MATCAP_19 = 830,	
		node_icon_items_MATCAP_20 = 831,	
		node_icon_items_MATCAP_21 = 832,	
		node_icon_items_MATCAP_22 = 833,	
		node_icon_items_MATCAP_23 = 834,	
		node_icon_items_MATCAP_24 = 835	
	};

	std::map<std::string, int> create_string_to_node_icon_items() {
		return {{"NONE", node_icon_items_NONE}, {"QUESTION", node_icon_items_QUESTION}, {"ERROR", node_icon_items_ERROR}, {"CANCEL", node_icon_items_CANCEL}, {"TRIA_RIGHT", node_icon_items_TRIA_RIGHT}, {"TRIA_DOWN", node_icon_items_TRIA_DOWN}, {"TRIA_LEFT", node_icon_items_TRIA_LEFT}, {"TRIA_UP", node_icon_items_TRIA_UP}, {"ARROW_LEFTRIGHT", node_icon_items_ARROW_LEFTRIGHT}, {"PLUS", node_icon_items_PLUS}, {"DISCLOSURE_TRI_DOWN", node_icon_items_DISCLOSURE_TRI_DOWN}, {"DISCLOSURE_TRI_RIGHT", node_icon_items_DISCLOSURE_TRI_RIGHT}, {"RADIOBUT_OFF", node_icon_items_RADIOBUT_OFF}, {"RADIOBUT_ON", node_icon_items_RADIOBUT_ON}, {"MENU_PANEL", node_icon_items_MENU_PANEL}, {"BLENDER", node_icon_items_BLENDER}, {"GRIP", node_icon_items_GRIP}, {"DOT", node_icon_items_DOT}, {"COLLAPSEMENU", node_icon_items_COLLAPSEMENU}, {"X", node_icon_items_X}, {"GO_LEFT", node_icon_items_GO_LEFT}, {"PLUG", node_icon_items_PLUG}, {"UI", node_icon_items_UI}, {"NODE", node_icon_items_NODE}, {"NODE_SEL", node_icon_items_NODE_SEL}, {"FULLSCREEN", node_icon_items_FULLSCREEN}, {"SPLITSCREEN", node_icon_items_SPLITSCREEN}, {"RIGHTARROW_THIN", node_icon_items_RIGHTARROW_THIN}, {"BORDERMOVE", node_icon_items_BORDERMOVE}, {"VIEWZOOM", node_icon_items_VIEWZOOM}, {"ZOOMIN", node_icon_items_ZOOMIN}, {"ZOOMOUT", node_icon_items_ZOOMOUT}, {"PANEL_CLOSE", node_icon_items_PANEL_CLOSE}, {"COPY_ID", node_icon_items_COPY_ID}, {"EYEDROPPER", node_icon_items_EYEDROPPER}, {"LINK_AREA", node_icon_items_LINK_AREA}, {"AUTO", node_icon_items_AUTO}, {"CHECKBOX_DEHLT", node_icon_items_CHECKBOX_DEHLT}, {"CHECKBOX_HLT", node_icon_items_CHECKBOX_HLT}, {"UNLOCKED", node_icon_items_UNLOCKED}, {"LOCKED", node_icon_items_LOCKED}, {"UNPINNED", node_icon_items_UNPINNED}, {"PINNED", node_icon_items_PINNED}, {"SCREEN_BACK", node_icon_items_SCREEN_BACK}, {"RIGHTARROW", node_icon_items_RIGHTARROW}, {"DOWNARROW_HLT", node_icon_items_DOWNARROW_HLT}, {"DOTSUP", node_icon_items_DOTSUP}, {"DOTSDOWN", node_icon_items_DOTSDOWN}, {"LINK", node_icon_items_LINK}, {"INLINK", node_icon_items_INLINK}, {"PLUGIN", node_icon_items_PLUGIN}, {"HELP", node_icon_items_HELP}, {"GHOST_ENABLED", node_icon_items_GHOST_ENABLED}, {"COLOR", node_icon_items_COLOR}, {"LINKED", node_icon_items_LINKED}, {"UNLINKED", node_icon_items_UNLINKED}, {"HAND", node_icon_items_HAND}, {"ZOOM_ALL", node_icon_items_ZOOM_ALL}, {"ZOOM_SELECTED", node_icon_items_ZOOM_SELECTED}, {"ZOOM_PREVIOUS", node_icon_items_ZOOM_PREVIOUS}, {"ZOOM_IN", node_icon_items_ZOOM_IN}, {"ZOOM_OUT", node_icon_items_ZOOM_OUT}, {"RENDER_REGION", node_icon_items_RENDER_REGION}, {"BORDER_RECT", node_icon_items_BORDER_RECT}, {"BORDER_LASSO", node_icon_items_BORDER_LASSO}, {"FREEZE", node_icon_items_FREEZE}, {"STYLUS_PRESSURE", node_icon_items_STYLUS_PRESSURE}, {"GHOST_DISABLED", node_icon_items_GHOST_DISABLED}, {"NEW", node_icon_items_NEW}, {"FILE_TICK", node_icon_items_FILE_TICK}, {"QUIT", node_icon_items_QUIT}, {"URL", node_icon_items_URL}, {"RECOVER_LAST", node_icon_items_RECOVER_LAST}, {"FULLSCREEN_ENTER", node_icon_items_FULLSCREEN_ENTER}, {"FULLSCREEN_EXIT", node_icon_items_FULLSCREEN_EXIT}, {"BLANK1", node_icon_items_BLANK1}, {"LAMP", node_icon_items_LAMP}, {"MATERIAL", node_icon_items_MATERIAL}, {"TEXTURE", node_icon_items_TEXTURE}, {"ANIM", node_icon_items_ANIM}, {"WORLD", node_icon_items_WORLD}, {"SCENE", node_icon_items_SCENE}, {"EDIT", node_icon_items_EDIT}, {"GAME", node_icon_items_GAME}, {"RADIO", node_icon_items_RADIO}, {"SCRIPT", node_icon_items_SCRIPT}, {"PARTICLES", node_icon_items_PARTICLES}, {"PHYSICS", node_icon_items_PHYSICS}, {"SPEAKER", node_icon_items_SPEAKER}, {"TEXTURE_SHADED", node_icon_items_TEXTURE_SHADED}, {"VIEW3D", node_icon_items_VIEW3D}, {"IPO", node_icon_items_IPO}, {"OOPS", node_icon_items_OOPS}, {"BUTS", node_icon_items_BUTS}, {"FILESEL", node_icon_items_FILESEL}, {"IMAGE_COL", node_icon_items_IMAGE_COL}, {"INFO", node_icon_items_INFO}, {"SEQUENCE", node_icon_items_SEQUENCE}, {"TEXT", node_icon_items_TEXT}, {"IMASEL", node_icon_items_IMASEL}, {"SOUND", node_icon_items_SOUND}, {"ACTION", node_icon_items_ACTION}, {"NLA", node_icon_items_NLA}, {"SCRIPTWIN", node_icon_items_SCRIPTWIN}, {"TIME", node_icon_items_TIME}, {"NODETREE", node_icon_items_NODETREE}, {"LOGIC", node_icon_items_LOGIC}, {"CONSOLE", node_icon_items_CONSOLE}, {"PREFERENCES", node_icon_items_PREFERENCES}, {"CLIP", node_icon_items_CLIP}, {"ASSET_MANAGER", node_icon_items_ASSET_MANAGER}, {"OBJECT_DATAMODE", node_icon_items_OBJECT_DATAMODE}, {"EDITMODE_HLT", node_icon_items_EDITMODE_HLT}, {"FACESEL_HLT", node_icon_items_FACESEL_HLT}, {"VPAINT_HLT", node_icon_items_VPAINT_HLT}, {"TPAINT_HLT", node_icon_items_TPAINT_HLT}, {"WPAINT_HLT", node_icon_items_WPAINT_HLT}, {"SCULPTMODE_HLT", node_icon_items_SCULPTMODE_HLT}, {"POSE_HLT", node_icon_items_POSE_HLT}, {"PARTICLEMODE", node_icon_items_PARTICLEMODE}, {"LIGHTPAINT", node_icon_items_LIGHTPAINT}, {"SCENE_DATA", node_icon_items_SCENE_DATA}, {"RENDERLAYERS", node_icon_items_RENDERLAYERS}, {"WORLD_DATA", node_icon_items_WORLD_DATA}, {"OBJECT_DATA", node_icon_items_OBJECT_DATA}, {"MESH_DATA", node_icon_items_MESH_DATA}, {"CURVE_DATA", node_icon_items_CURVE_DATA}, {"META_DATA", node_icon_items_META_DATA}, {"LATTICE_DATA", node_icon_items_LATTICE_DATA}, {"LAMP_DATA", node_icon_items_LAMP_DATA}, {"MATERIAL_DATA", node_icon_items_MATERIAL_DATA}, {"TEXTURE_DATA", node_icon_items_TEXTURE_DATA}, {"ANIM_DATA", node_icon_items_ANIM_DATA}, {"CAMERA_DATA", node_icon_items_CAMERA_DATA}, {"PARTICLE_DATA", node_icon_items_PARTICLE_DATA}, {"LIBRARY_DATA_DIRECT", node_icon_items_LIBRARY_DATA_DIRECT}, {"GROUP", node_icon_items_GROUP}, {"ARMATURE_DATA", node_icon_items_ARMATURE_DATA}, {"POSE_DATA", node_icon_items_POSE_DATA}, {"BONE_DATA", node_icon_items_BONE_DATA}, {"CONSTRAINT", node_icon_items_CONSTRAINT}, {"SHAPEKEY_DATA", node_icon_items_SHAPEKEY_DATA}, {"CONSTRAINT_BONE", node_icon_items_CONSTRAINT_BONE}, {"CAMERA_STEREO", node_icon_items_CAMERA_STEREO}, {"PACKAGE", node_icon_items_PACKAGE}, {"UGLYPACKAGE", node_icon_items_UGLYPACKAGE}, {"BRUSH_DATA", node_icon_items_BRUSH_DATA}, {"IMAGE_DATA", node_icon_items_IMAGE_DATA}, {"FILE", node_icon_items_FILE}, {"FCURVE", node_icon_items_FCURVE}, {"FONT_DATA", node_icon_items_FONT_DATA}, {"RENDER_RESULT", node_icon_items_RENDER_RESULT}, {"SURFACE_DATA", node_icon_items_SURFACE_DATA}, {"EMPTY_DATA", node_icon_items_EMPTY_DATA}, {"SETTINGS", node_icon_items_SETTINGS}, {"RENDER_ANIMATION", node_icon_items_RENDER_ANIMATION}, {"RENDER_STILL", node_icon_items_RENDER_STILL}, {"LIBRARY_DATA_BROKEN", node_icon_items_LIBRARY_DATA_BROKEN}, {"BOIDS", node_icon_items_BOIDS}, {"STRANDS", node_icon_items_STRANDS}, {"LIBRARY_DATA_INDIRECT", node_icon_items_LIBRARY_DATA_INDIRECT}, {"GREASEPENCIL", node_icon_items_GREASEPENCIL}, {"LINE_DATA", node_icon_items_LINE_DATA}, {"GROUP_BONE", node_icon_items_GROUP_BONE}, {"GROUP_VERTEX", node_icon_items_GROUP_VERTEX}, {"GROUP_VCOL", node_icon_items_GROUP_VCOL}, {"GROUP_UVS", node_icon_items_GROUP_UVS}, {"RNA", node_icon_items_RNA}, {"RNA_ADD", node_icon_items_RNA_ADD}, {"OUTLINER_OB_EMPTY", node_icon_items_OUTLINER_OB_EMPTY}, {"OUTLINER_OB_MESH", node_icon_items_OUTLINER_OB_MESH}, {"OUTLINER_OB_CURVE", node_icon_items_OUTLINER_OB_CURVE}, {"OUTLINER_OB_LATTICE", node_icon_items_OUTLINER_OB_LATTICE}, {"OUTLINER_OB_META", node_icon_items_OUTLINER_OB_META}, {"OUTLINER_OB_LAMP", node_icon_items_OUTLINER_OB_LAMP}, {"OUTLINER_OB_CAMERA", node_icon_items_OUTLINER_OB_CAMERA}, {"OUTLINER_OB_ARMATURE", node_icon_items_OUTLINER_OB_ARMATURE}, {"OUTLINER_OB_FONT", node_icon_items_OUTLINER_OB_FONT}, {"OUTLINER_OB_SURFACE", node_icon_items_OUTLINER_OB_SURFACE}, {"OUTLINER_OB_SPEAKER", node_icon_items_OUTLINER_OB_SPEAKER}, {"RESTRICT_VIEW_OFF", node_icon_items_RESTRICT_VIEW_OFF}, {"RESTRICT_VIEW_ON", node_icon_items_RESTRICT_VIEW_ON}, {"RESTRICT_SELECT_OFF", node_icon_items_RESTRICT_SELECT_OFF}, {"RESTRICT_SELECT_ON", node_icon_items_RESTRICT_SELECT_ON}, {"RESTRICT_RENDER_OFF", node_icon_items_RESTRICT_RENDER_OFF}, {"RESTRICT_RENDER_ON", node_icon_items_RESTRICT_RENDER_ON}, {"OUTLINER_DATA_EMPTY", node_icon_items_OUTLINER_DATA_EMPTY}, {"OUTLINER_DATA_MESH", node_icon_items_OUTLINER_DATA_MESH}, {"OUTLINER_DATA_CURVE", node_icon_items_OUTLINER_DATA_CURVE}, {"OUTLINER_DATA_LATTICE", node_icon_items_OUTLINER_DATA_LATTICE}, {"OUTLINER_DATA_META", node_icon_items_OUTLINER_DATA_META}, {"OUTLINER_DATA_LAMP", node_icon_items_OUTLINER_DATA_LAMP}, {"OUTLINER_DATA_CAMERA", node_icon_items_OUTLINER_DATA_CAMERA}, {"OUTLINER_DATA_ARMATURE", node_icon_items_OUTLINER_DATA_ARMATURE}, {"OUTLINER_DATA_FONT", node_icon_items_OUTLINER_DATA_FONT}, {"OUTLINER_DATA_SURFACE", node_icon_items_OUTLINER_DATA_SURFACE}, {"OUTLINER_DATA_SPEAKER", node_icon_items_OUTLINER_DATA_SPEAKER}, {"OUTLINER_DATA_POSE", node_icon_items_OUTLINER_DATA_POSE}, {"MESH_PLANE", node_icon_items_MESH_PLANE}, {"MESH_CUBE", node_icon_items_MESH_CUBE}, {"MESH_CIRCLE", node_icon_items_MESH_CIRCLE}, {"MESH_UVSPHERE", node_icon_items_MESH_UVSPHERE}, {"MESH_ICOSPHERE", node_icon_items_MESH_ICOSPHERE}, {"MESH_GRID", node_icon_items_MESH_GRID}, {"MESH_MONKEY", node_icon_items_MESH_MONKEY}, {"MESH_CYLINDER", node_icon_items_MESH_CYLINDER}, {"MESH_TORUS", node_icon_items_MESH_TORUS}, {"MESH_CONE", node_icon_items_MESH_CONE}, {"LAMP_POINT", node_icon_items_LAMP_POINT}, {"LAMP_SUN", node_icon_items_LAMP_SUN}, {"LAMP_SPOT", node_icon_items_LAMP_SPOT}, {"LAMP_HEMI", node_icon_items_LAMP_HEMI}, {"LAMP_AREA", node_icon_items_LAMP_AREA}, {"META_EMPTY", node_icon_items_META_EMPTY}, {"META_PLANE", node_icon_items_META_PLANE}, {"META_CUBE", node_icon_items_META_CUBE}, {"META_BALL", node_icon_items_META_BALL}, {"META_ELLIPSOID", node_icon_items_META_ELLIPSOID}, {"META_CAPSULE", node_icon_items_META_CAPSULE}, {"SURFACE_NCURVE", node_icon_items_SURFACE_NCURVE}, {"SURFACE_NCIRCLE", node_icon_items_SURFACE_NCIRCLE}, {"SURFACE_NSURFACE", node_icon_items_SURFACE_NSURFACE}, {"SURFACE_NCYLINDER", node_icon_items_SURFACE_NCYLINDER}, {"SURFACE_NSPHERE", node_icon_items_SURFACE_NSPHERE}, {"SURFACE_NTORUS", node_icon_items_SURFACE_NTORUS}, {"CURVE_BEZCURVE", node_icon_items_CURVE_BEZCURVE}, {"CURVE_BEZCIRCLE", node_icon_items_CURVE_BEZCIRCLE}, {"CURVE_NCURVE", node_icon_items_CURVE_NCURVE}, {"CURVE_NCIRCLE", node_icon_items_CURVE_NCIRCLE}, {"CURVE_PATH", node_icon_items_CURVE_PATH}, {"COLOR_RED", node_icon_items_COLOR_RED}, {"COLOR_GREEN", node_icon_items_COLOR_GREEN}, {"COLOR_BLUE", node_icon_items_COLOR_BLUE}, {"TRIA_RIGHT_BAR", node_icon_items_TRIA_RIGHT_BAR}, {"TRIA_DOWN_BAR", node_icon_items_TRIA_DOWN_BAR}, {"TRIA_LEFT_BAR", node_icon_items_TRIA_LEFT_BAR}, {"TRIA_UP_BAR", node_icon_items_TRIA_UP_BAR}, {"FORCE_FORCE", node_icon_items_FORCE_FORCE}, {"FORCE_WIND", node_icon_items_FORCE_WIND}, {"FORCE_VORTEX", node_icon_items_FORCE_VORTEX}, {"FORCE_MAGNETIC", node_icon_items_FORCE_MAGNETIC}, {"FORCE_HARMONIC", node_icon_items_FORCE_HARMONIC}, {"FORCE_CHARGE", node_icon_items_FORCE_CHARGE}, {"FORCE_LENNARDJONES", node_icon_items_FORCE_LENNARDJONES}, {"FORCE_TEXTURE", node_icon_items_FORCE_TEXTURE}, {"FORCE_CURVE", node_icon_items_FORCE_CURVE}, {"FORCE_BOID", node_icon_items_FORCE_BOID}, {"FORCE_TURBULENCE", node_icon_items_FORCE_TURBULENCE}, {"FORCE_DRAG", node_icon_items_FORCE_DRAG}, {"FORCE_SMOKEFLOW", node_icon_items_FORCE_SMOKEFLOW}, {"MODIFIER", node_icon_items_MODIFIER}, {"MOD_WAVE", node_icon_items_MOD_WAVE}, {"MOD_BUILD", node_icon_items_MOD_BUILD}, {"MOD_DECIM", node_icon_items_MOD_DECIM}, {"MOD_MIRROR", node_icon_items_MOD_MIRROR}, {"MOD_SOFT", node_icon_items_MOD_SOFT}, {"MOD_SUBSURF", node_icon_items_MOD_SUBSURF}, {"HOOK", node_icon_items_HOOK}, {"MOD_PHYSICS", node_icon_items_MOD_PHYSICS}, {"MOD_PARTICLES", node_icon_items_MOD_PARTICLES}, {"MOD_BOOLEAN", node_icon_items_MOD_BOOLEAN}, {"MOD_EDGESPLIT", node_icon_items_MOD_EDGESPLIT}, {"MOD_ARRAY", node_icon_items_MOD_ARRAY}, {"MOD_UVPROJECT", node_icon_items_MOD_UVPROJECT}, {"MOD_DISPLACE", node_icon_items_MOD_DISPLACE}, {"MOD_CURVE", node_icon_items_MOD_CURVE}, {"MOD_LATTICE", node_icon_items_MOD_LATTICE}, {"CONSTRAINT_DATA", node_icon_items_CONSTRAINT_DATA}, {"MOD_ARMATURE", node_icon_items_MOD_ARMATURE}, {"MOD_SHRINKWRAP", node_icon_items_MOD_SHRINKWRAP}, {"MOD_CAST", node_icon_items_MOD_CAST}, {"MOD_MESHDEFORM", node_icon_items_MOD_MESHDEFORM}, {"MOD_BEVEL", node_icon_items_MOD_BEVEL}, {"MOD_SMOOTH", node_icon_items_MOD_SMOOTH}, {"MOD_SIMPLEDEFORM", node_icon_items_MOD_SIMPLEDEFORM}, {"MOD_MASK", node_icon_items_MOD_MASK}, {"MOD_CLOTH", node_icon_items_MOD_CLOTH}, {"MOD_EXPLODE", node_icon_items_MOD_EXPLODE}, {"MOD_FLUIDSIM", node_icon_items_MOD_FLUIDSIM}, {"MOD_MULTIRES", node_icon_items_MOD_MULTIRES}, {"MOD_SMOKE", node_icon_items_MOD_SMOKE}, {"MOD_SOLIDIFY", node_icon_items_MOD_SOLIDIFY}, {"MOD_SCREW", node_icon_items_MOD_SCREW}, {"MOD_VERTEX_WEIGHT", node_icon_items_MOD_VERTEX_WEIGHT}, {"MOD_DYNAMICPAINT", node_icon_items_MOD_DYNAMICPAINT}, {"MOD_REMESH", node_icon_items_MOD_REMESH}, {"MOD_OCEAN", node_icon_items_MOD_OCEAN}, {"MOD_WARP", node_icon_items_MOD_WARP}, {"MOD_SKIN", node_icon_items_MOD_SKIN}, {"MOD_TRIANGULATE", node_icon_items_MOD_TRIANGULATE}, {"MOD_WIREFRAME", node_icon_items_MOD_WIREFRAME}, {"MOD_DATA_TRANSFER", node_icon_items_MOD_DATA_TRANSFER}, {"MOD_NORMALEDIT", node_icon_items_MOD_NORMALEDIT}, {"REC", node_icon_items_REC}, {"PLAY", node_icon_items_PLAY}, {"FF", node_icon_items_FF}, {"REW", node_icon_items_REW}, {"PAUSE", node_icon_items_PAUSE}, {"PREV_KEYFRAME", node_icon_items_PREV_KEYFRAME}, {"NEXT_KEYFRAME", node_icon_items_NEXT_KEYFRAME}, {"PLAY_AUDIO", node_icon_items_PLAY_AUDIO}, {"PLAY_REVERSE", node_icon_items_PLAY_REVERSE}, {"PREVIEW_RANGE", node_icon_items_PREVIEW_RANGE}, {"ACTION_TWEAK", node_icon_items_ACTION_TWEAK}, {"PMARKER_ACT", node_icon_items_PMARKER_ACT}, {"PMARKER_SEL", node_icon_items_PMARKER_SEL}, {"PMARKER", node_icon_items_PMARKER}, {"MARKER_HLT", node_icon_items_MARKER_HLT}, {"MARKER", node_icon_items_MARKER}, {"SPACE2", node_icon_items_SPACE2}, {"SPACE3", node_icon_items_SPACE3}, {"KEYINGSET", node_icon_items_KEYINGSET}, {"KEY_DEHLT", node_icon_items_KEY_DEHLT}, {"KEY_HLT", node_icon_items_KEY_HLT}, {"MUTE_IPO_OFF", node_icon_items_MUTE_IPO_OFF}, {"MUTE_IPO_ON", node_icon_items_MUTE_IPO_ON}, {"VISIBLE_IPO_OFF", node_icon_items_VISIBLE_IPO_OFF}, {"VISIBLE_IPO_ON", node_icon_items_VISIBLE_IPO_ON}, {"DRIVER", node_icon_items_DRIVER}, {"SOLO_OFF", node_icon_items_SOLO_OFF}, {"SOLO_ON", node_icon_items_SOLO_ON}, {"FRAME_PREV", node_icon_items_FRAME_PREV}, {"FRAME_NEXT", node_icon_items_FRAME_NEXT}, {"NLA_PUSHDOWN", node_icon_items_NLA_PUSHDOWN}, {"IPO_CONSTANT", node_icon_items_IPO_CONSTANT}, {"IPO_LINEAR", node_icon_items_IPO_LINEAR}, {"IPO_BEZIER", node_icon_items_IPO_BEZIER}, {"IPO_SINE", node_icon_items_IPO_SINE}, {"IPO_QUAD", node_icon_items_IPO_QUAD}, {"IPO_CUBIC", node_icon_items_IPO_CUBIC}, {"IPO_QUART", node_icon_items_IPO_QUART}, {"IPO_QUINT", node_icon_items_IPO_QUINT}, {"IPO_EXPO", node_icon_items_IPO_EXPO}, {"IPO_CIRC", node_icon_items_IPO_CIRC}, {"IPO_BOUNCE", node_icon_items_IPO_BOUNCE}, {"IPO_ELASTIC", node_icon_items_IPO_ELASTIC}, {"IPO_BACK", node_icon_items_IPO_BACK}, {"IPO_EASE_IN", node_icon_items_IPO_EASE_IN}, {"IPO_EASE_OUT", node_icon_items_IPO_EASE_OUT}, {"IPO_EASE_IN_OUT", node_icon_items_IPO_EASE_IN_OUT}, {"VERTEXSEL", node_icon_items_VERTEXSEL}, {"EDGESEL", node_icon_items_EDGESEL}, {"FACESEL", node_icon_items_FACESEL}, {"LOOPSEL", node_icon_items_LOOPSEL}, {"ROTATE", node_icon_items_ROTATE}, {"CURSOR", node_icon_items_CURSOR}, {"ROTATECOLLECTION", node_icon_items_ROTATECOLLECTION}, {"ROTATECENTER", node_icon_items_ROTATECENTER}, {"ROTACTIVE", node_icon_items_ROTACTIVE}, {"ALIGN", node_icon_items_ALIGN}, {"SMOOTHCURVE", node_icon_items_SMOOTHCURVE}, {"SPHERECURVE", node_icon_items_SPHERECURVE}, {"ROOTCURVE", node_icon_items_ROOTCURVE}, {"SHARPCURVE", node_icon_items_SHARPCURVE}, {"LINCURVE", node_icon_items_LINCURVE}, {"NOCURVE", node_icon_items_NOCURVE}, {"RNDCURVE", node_icon_items_RNDCURVE}, {"PROP_OFF", node_icon_items_PROP_OFF}, {"PROP_ON", node_icon_items_PROP_ON}, {"PROP_CON", node_icon_items_PROP_CON}, {"SCULPT_DYNTOPO", node_icon_items_SCULPT_DYNTOPO}, {"PARTICLE_POINT", node_icon_items_PARTICLE_POINT}, {"PARTICLE_TIP", node_icon_items_PARTICLE_TIP}, {"PARTICLE_PATH", node_icon_items_PARTICLE_PATH}, {"MAN_TRANS", node_icon_items_MAN_TRANS}, {"MAN_ROT", node_icon_items_MAN_ROT}, {"MAN_SCALE", node_icon_items_MAN_SCALE}, {"MANIPUL", node_icon_items_MANIPUL}, {"SNAP_OFF", node_icon_items_SNAP_OFF}, {"SNAP_ON", node_icon_items_SNAP_ON}, {"SNAP_NORMAL", node_icon_items_SNAP_NORMAL}, {"SNAP_INCREMENT", node_icon_items_SNAP_INCREMENT}, {"SNAP_VERTEX", node_icon_items_SNAP_VERTEX}, {"SNAP_EDGE", node_icon_items_SNAP_EDGE}, {"SNAP_FACE", node_icon_items_SNAP_FACE}, {"SNAP_VOLUME", node_icon_items_SNAP_VOLUME}, {"STICKY_UVS_LOC", node_icon_items_STICKY_UVS_LOC}, {"STICKY_UVS_DISABLE", node_icon_items_STICKY_UVS_DISABLE}, {"STICKY_UVS_VERT", node_icon_items_STICKY_UVS_VERT}, {"CLIPUV_DEHLT", node_icon_items_CLIPUV_DEHLT}, {"CLIPUV_HLT", node_icon_items_CLIPUV_HLT}, {"SNAP_PEEL_OBJECT", node_icon_items_SNAP_PEEL_OBJECT}, {"GRID", node_icon_items_GRID}, {"PASTEDOWN", node_icon_items_PASTEDOWN}, {"COPYDOWN", node_icon_items_COPYDOWN}, {"PASTEFLIPUP", node_icon_items_PASTEFLIPUP}, {"PASTEFLIPDOWN", node_icon_items_PASTEFLIPDOWN}, {"SNAP_SURFACE", node_icon_items_SNAP_SURFACE}, {"AUTOMERGE_ON", node_icon_items_AUTOMERGE_ON}, {"AUTOMERGE_OFF", node_icon_items_AUTOMERGE_OFF}, {"RETOPO", node_icon_items_RETOPO}, {"UV_VERTEXSEL", node_icon_items_UV_VERTEXSEL}, {"UV_EDGESEL", node_icon_items_UV_EDGESEL}, {"UV_FACESEL", node_icon_items_UV_FACESEL}, {"UV_ISLANDSEL", node_icon_items_UV_ISLANDSEL}, {"UV_SYNC_SELECT", node_icon_items_UV_SYNC_SELECT}, {"BBOX", node_icon_items_BBOX}, {"WIRE", node_icon_items_WIRE}, {"SOLID", node_icon_items_SOLID}, {"SMOOTH", node_icon_items_SMOOTH}, {"POTATO", node_icon_items_POTATO}, {"ORTHO", node_icon_items_ORTHO}, {"LOCKVIEW_OFF", node_icon_items_LOCKVIEW_OFF}, {"LOCKVIEW_ON", node_icon_items_LOCKVIEW_ON}, {"AXIS_SIDE", node_icon_items_AXIS_SIDE}, {"AXIS_FRONT", node_icon_items_AXIS_FRONT}, {"AXIS_TOP", node_icon_items_AXIS_TOP}, {"NDOF_DOM", node_icon_items_NDOF_DOM}, {"NDOF_TURN", node_icon_items_NDOF_TURN}, {"NDOF_FLY", node_icon_items_NDOF_FLY}, {"NDOF_TRANS", node_icon_items_NDOF_TRANS}, {"LAYER_USED", node_icon_items_LAYER_USED}, {"LAYER_ACTIVE", node_icon_items_LAYER_ACTIVE}, {"SORTALPHA", node_icon_items_SORTALPHA}, {"SORTBYEXT", node_icon_items_SORTBYEXT}, {"SORTTIME", node_icon_items_SORTTIME}, {"SORTSIZE", node_icon_items_SORTSIZE}, {"LONGDISPLAY", node_icon_items_LONGDISPLAY}, {"SHORTDISPLAY", node_icon_items_SHORTDISPLAY}, {"GHOST", node_icon_items_GHOST}, {"IMGDISPLAY", node_icon_items_IMGDISPLAY}, {"SAVE_AS", node_icon_items_SAVE_AS}, {"SAVE_COPY", node_icon_items_SAVE_COPY}, {"BOOKMARKS", node_icon_items_BOOKMARKS}, {"FONTPREVIEW", node_icon_items_FONTPREVIEW}, {"FILTER", node_icon_items_FILTER}, {"NEWFOLDER", node_icon_items_NEWFOLDER}, {"OPEN_RECENT", node_icon_items_OPEN_RECENT}, {"FILE_PARENT", node_icon_items_FILE_PARENT}, {"FILE_REFRESH", node_icon_items_FILE_REFRESH}, {"FILE_FOLDER", node_icon_items_FILE_FOLDER}, {"FILE_BLANK", node_icon_items_FILE_BLANK}, {"FILE_BLEND", node_icon_items_FILE_BLEND}, {"FILE_IMAGE", node_icon_items_FILE_IMAGE}, {"FILE_MOVIE", node_icon_items_FILE_MOVIE}, {"FILE_SCRIPT", node_icon_items_FILE_SCRIPT}, {"FILE_SOUND", node_icon_items_FILE_SOUND}, {"FILE_FONT", node_icon_items_FILE_FONT}, {"FILE_TEXT", node_icon_items_FILE_TEXT}, {"RECOVER_AUTO", node_icon_items_RECOVER_AUTO}, {"SAVE_PREFS", node_icon_items_SAVE_PREFS}, {"LINK_BLEND", node_icon_items_LINK_BLEND}, {"APPEND_BLEND", node_icon_items_APPEND_BLEND}, {"IMPORT", node_icon_items_IMPORT}, {"EXPORT", node_icon_items_EXPORT}, {"EXTERNAL_DATA", node_icon_items_EXTERNAL_DATA}, {"LOAD_FACTORY", node_icon_items_LOAD_FACTORY}, {"LOOP_BACK", node_icon_items_LOOP_BACK}, {"LOOP_FORWARDS", node_icon_items_LOOP_FORWARDS}, {"BACK", node_icon_items_BACK}, {"FORWARD", node_icon_items_FORWARD}, {"FILE_HIDDEN", node_icon_items_FILE_HIDDEN}, {"FILE_BACKUP", node_icon_items_FILE_BACKUP}, {"DISK_DRIVE", node_icon_items_DISK_DRIVE}, {"MATPLANE", node_icon_items_MATPLANE}, {"MATSPHERE", node_icon_items_MATSPHERE}, {"MATCUBE", node_icon_items_MATCUBE}, {"MONKEY", node_icon_items_MONKEY}, {"HAIR", node_icon_items_HAIR}, {"ALIASED", node_icon_items_ALIASED}, {"ANTIALIASED", node_icon_items_ANTIALIASED}, {"MAT_SPHERE_SKY", node_icon_items_MAT_SPHERE_SKY}, {"WORDWRAP_OFF", node_icon_items_WORDWRAP_OFF}, {"WORDWRAP_ON", node_icon_items_WORDWRAP_ON}, {"SYNTAX_OFF", node_icon_items_SYNTAX_OFF}, {"SYNTAX_ON", node_icon_items_SYNTAX_ON}, {"LINENUMBERS_OFF", node_icon_items_LINENUMBERS_OFF}, {"LINENUMBERS_ON", node_icon_items_LINENUMBERS_ON}, {"SCRIPTPLUGINS", node_icon_items_SCRIPTPLUGINS}, {"SEQ_SEQUENCER", node_icon_items_SEQ_SEQUENCER}, {"SEQ_PREVIEW", node_icon_items_SEQ_PREVIEW}, {"SEQ_LUMA_WAVEFORM", node_icon_items_SEQ_LUMA_WAVEFORM}, {"SEQ_CHROMA_SCOPE", node_icon_items_SEQ_CHROMA_SCOPE}, {"SEQ_HISTOGRAM", node_icon_items_SEQ_HISTOGRAM}, {"SEQ_SPLITVIEW", node_icon_items_SEQ_SPLITVIEW}, {"IMAGE_RGB", node_icon_items_IMAGE_RGB}, {"IMAGE_RGB_ALPHA", node_icon_items_IMAGE_RGB_ALPHA}, {"IMAGE_ALPHA", node_icon_items_IMAGE_ALPHA}, {"IMAGE_ZDEPTH", node_icon_items_IMAGE_ZDEPTH}, {"IMAGEFILE", node_icon_items_IMAGEFILE}, {"BRUSH_ADD", node_icon_items_BRUSH_ADD}, {"BRUSH_BLOB", node_icon_items_BRUSH_BLOB}, {"BRUSH_BLUR", node_icon_items_BRUSH_BLUR}, {"BRUSH_CLAY", node_icon_items_BRUSH_CLAY}, {"BRUSH_CLAY_STRIPS", node_icon_items_BRUSH_CLAY_STRIPS}, {"BRUSH_CLONE", node_icon_items_BRUSH_CLONE}, {"BRUSH_CREASE", node_icon_items_BRUSH_CREASE}, {"BRUSH_DARKEN", node_icon_items_BRUSH_DARKEN}, {"BRUSH_FILL", node_icon_items_BRUSH_FILL}, {"BRUSH_FLATTEN", node_icon_items_BRUSH_FLATTEN}, {"BRUSH_GRAB", node_icon_items_BRUSH_GRAB}, {"BRUSH_INFLATE", node_icon_items_BRUSH_INFLATE}, {"BRUSH_LAYER", node_icon_items_BRUSH_LAYER}, {"BRUSH_LIGHTEN", node_icon_items_BRUSH_LIGHTEN}, {"BRUSH_MASK", node_icon_items_BRUSH_MASK}, {"BRUSH_MIX", node_icon_items_BRUSH_MIX}, {"BRUSH_MULTIPLY", node_icon_items_BRUSH_MULTIPLY}, {"BRUSH_NUDGE", node_icon_items_BRUSH_NUDGE}, {"BRUSH_PINCH", node_icon_items_BRUSH_PINCH}, {"BRUSH_SCRAPE", node_icon_items_BRUSH_SCRAPE}, {"BRUSH_SCULPT_DRAW", node_icon_items_BRUSH_SCULPT_DRAW}, {"BRUSH_SMEAR", node_icon_items_BRUSH_SMEAR}, {"BRUSH_SMOOTH", node_icon_items_BRUSH_SMOOTH}, {"BRUSH_SNAKE_HOOK", node_icon_items_BRUSH_SNAKE_HOOK}, {"BRUSH_SOFTEN", node_icon_items_BRUSH_SOFTEN}, {"BRUSH_SUBTRACT", node_icon_items_BRUSH_SUBTRACT}, {"BRUSH_TEXDRAW", node_icon_items_BRUSH_TEXDRAW}, {"BRUSH_TEXFILL", node_icon_items_BRUSH_TEXFILL}, {"BRUSH_TEXMASK", node_icon_items_BRUSH_TEXMASK}, {"BRUSH_THUMB", node_icon_items_BRUSH_THUMB}, {"BRUSH_ROTATE", node_icon_items_BRUSH_ROTATE}, {"BRUSH_VERTEXDRAW", node_icon_items_BRUSH_VERTEXDRAW}, {"MATCAP_01", node_icon_items_MATCAP_01}, {"MATCAP_02", node_icon_items_MATCAP_02}, {"MATCAP_03", node_icon_items_MATCAP_03}, {"MATCAP_04", node_icon_items_MATCAP_04}, {"MATCAP_05", node_icon_items_MATCAP_05}, {"MATCAP_06", node_icon_items_MATCAP_06}, {"MATCAP_07", node_icon_items_MATCAP_07}, {"MATCAP_08", node_icon_items_MATCAP_08}, {"MATCAP_09", node_icon_items_MATCAP_09}, {"MATCAP_10", node_icon_items_MATCAP_10}, {"MATCAP_11", node_icon_items_MATCAP_11}, {"MATCAP_12", node_icon_items_MATCAP_12}, {"MATCAP_13", node_icon_items_MATCAP_13}, {"MATCAP_14", node_icon_items_MATCAP_14}, {"MATCAP_15", node_icon_items_MATCAP_15}, {"MATCAP_16", node_icon_items_MATCAP_16}, {"MATCAP_17", node_icon_items_MATCAP_17}, {"MATCAP_18", node_icon_items_MATCAP_18}, {"MATCAP_19", node_icon_items_MATCAP_19}, {"MATCAP_20", node_icon_items_MATCAP_20}, {"MATCAP_21", node_icon_items_MATCAP_21}, {"MATCAP_22", node_icon_items_MATCAP_22}, {"MATCAP_23", node_icon_items_MATCAP_23}, {"MATCAP_24", node_icon_items_MATCAP_24}};
	};

	std::map<int, std::string> create_node_icon_items_to_string() {
		return {{node_icon_items_NONE, "NONE"}, {node_icon_items_QUESTION, "QUESTION"}, {node_icon_items_ERROR, "ERROR"}, {node_icon_items_CANCEL, "CANCEL"}, {node_icon_items_TRIA_RIGHT, "TRIA_RIGHT"}, {node_icon_items_TRIA_DOWN, "TRIA_DOWN"}, {node_icon_items_TRIA_LEFT, "TRIA_LEFT"}, {node_icon_items_TRIA_UP, "TRIA_UP"}, {node_icon_items_ARROW_LEFTRIGHT, "ARROW_LEFTRIGHT"}, {node_icon_items_PLUS, "PLUS"}, {node_icon_items_DISCLOSURE_TRI_DOWN, "DISCLOSURE_TRI_DOWN"}, {node_icon_items_DISCLOSURE_TRI_RIGHT, "DISCLOSURE_TRI_RIGHT"}, {node_icon_items_RADIOBUT_OFF, "RADIOBUT_OFF"}, {node_icon_items_RADIOBUT_ON, "RADIOBUT_ON"}, {node_icon_items_MENU_PANEL, "MENU_PANEL"}, {node_icon_items_BLENDER, "BLENDER"}, {node_icon_items_GRIP, "GRIP"}, {node_icon_items_DOT, "DOT"}, {node_icon_items_COLLAPSEMENU, "COLLAPSEMENU"}, {node_icon_items_X, "X"}, {node_icon_items_GO_LEFT, "GO_LEFT"}, {node_icon_items_PLUG, "PLUG"}, {node_icon_items_UI, "UI"}, {node_icon_items_NODE, "NODE"}, {node_icon_items_NODE_SEL, "NODE_SEL"}, {node_icon_items_FULLSCREEN, "FULLSCREEN"}, {node_icon_items_SPLITSCREEN, "SPLITSCREEN"}, {node_icon_items_RIGHTARROW_THIN, "RIGHTARROW_THIN"}, {node_icon_items_BORDERMOVE, "BORDERMOVE"}, {node_icon_items_VIEWZOOM, "VIEWZOOM"}, {node_icon_items_ZOOMIN, "ZOOMIN"}, {node_icon_items_ZOOMOUT, "ZOOMOUT"}, {node_icon_items_PANEL_CLOSE, "PANEL_CLOSE"}, {node_icon_items_COPY_ID, "COPY_ID"}, {node_icon_items_EYEDROPPER, "EYEDROPPER"}, {node_icon_items_LINK_AREA, "LINK_AREA"}, {node_icon_items_AUTO, "AUTO"}, {node_icon_items_CHECKBOX_DEHLT, "CHECKBOX_DEHLT"}, {node_icon_items_CHECKBOX_HLT, "CHECKBOX_HLT"}, {node_icon_items_UNLOCKED, "UNLOCKED"}, {node_icon_items_LOCKED, "LOCKED"}, {node_icon_items_UNPINNED, "UNPINNED"}, {node_icon_items_PINNED, "PINNED"}, {node_icon_items_SCREEN_BACK, "SCREEN_BACK"}, {node_icon_items_RIGHTARROW, "RIGHTARROW"}, {node_icon_items_DOWNARROW_HLT, "DOWNARROW_HLT"}, {node_icon_items_DOTSUP, "DOTSUP"}, {node_icon_items_DOTSDOWN, "DOTSDOWN"}, {node_icon_items_LINK, "LINK"}, {node_icon_items_INLINK, "INLINK"}, {node_icon_items_PLUGIN, "PLUGIN"}, {node_icon_items_HELP, "HELP"}, {node_icon_items_GHOST_ENABLED, "GHOST_ENABLED"}, {node_icon_items_COLOR, "COLOR"}, {node_icon_items_LINKED, "LINKED"}, {node_icon_items_UNLINKED, "UNLINKED"}, {node_icon_items_HAND, "HAND"}, {node_icon_items_ZOOM_ALL, "ZOOM_ALL"}, {node_icon_items_ZOOM_SELECTED, "ZOOM_SELECTED"}, {node_icon_items_ZOOM_PREVIOUS, "ZOOM_PREVIOUS"}, {node_icon_items_ZOOM_IN, "ZOOM_IN"}, {node_icon_items_ZOOM_OUT, "ZOOM_OUT"}, {node_icon_items_RENDER_REGION, "RENDER_REGION"}, {node_icon_items_BORDER_RECT, "BORDER_RECT"}, {node_icon_items_BORDER_LASSO, "BORDER_LASSO"}, {node_icon_items_FREEZE, "FREEZE"}, {node_icon_items_STYLUS_PRESSURE, "STYLUS_PRESSURE"}, {node_icon_items_GHOST_DISABLED, "GHOST_DISABLED"}, {node_icon_items_NEW, "NEW"}, {node_icon_items_FILE_TICK, "FILE_TICK"}, {node_icon_items_QUIT, "QUIT"}, {node_icon_items_URL, "URL"}, {node_icon_items_RECOVER_LAST, "RECOVER_LAST"}, {node_icon_items_FULLSCREEN_ENTER, "FULLSCREEN_ENTER"}, {node_icon_items_FULLSCREEN_EXIT, "FULLSCREEN_EXIT"}, {node_icon_items_BLANK1, "BLANK1"}, {node_icon_items_LAMP, "LAMP"}, {node_icon_items_MATERIAL, "MATERIAL"}, {node_icon_items_TEXTURE, "TEXTURE"}, {node_icon_items_ANIM, "ANIM"}, {node_icon_items_WORLD, "WORLD"}, {node_icon_items_SCENE, "SCENE"}, {node_icon_items_EDIT, "EDIT"}, {node_icon_items_GAME, "GAME"}, {node_icon_items_RADIO, "RADIO"}, {node_icon_items_SCRIPT, "SCRIPT"}, {node_icon_items_PARTICLES, "PARTICLES"}, {node_icon_items_PHYSICS, "PHYSICS"}, {node_icon_items_SPEAKER, "SPEAKER"}, {node_icon_items_TEXTURE_SHADED, "TEXTURE_SHADED"}, {node_icon_items_VIEW3D, "VIEW3D"}, {node_icon_items_IPO, "IPO"}, {node_icon_items_OOPS, "OOPS"}, {node_icon_items_BUTS, "BUTS"}, {node_icon_items_FILESEL, "FILESEL"}, {node_icon_items_IMAGE_COL, "IMAGE_COL"}, {node_icon_items_INFO, "INFO"}, {node_icon_items_SEQUENCE, "SEQUENCE"}, {node_icon_items_TEXT, "TEXT"}, {node_icon_items_IMASEL, "IMASEL"}, {node_icon_items_SOUND, "SOUND"}, {node_icon_items_ACTION, "ACTION"}, {node_icon_items_NLA, "NLA"}, {node_icon_items_SCRIPTWIN, "SCRIPTWIN"}, {node_icon_items_TIME, "TIME"}, {node_icon_items_NODETREE, "NODETREE"}, {node_icon_items_LOGIC, "LOGIC"}, {node_icon_items_CONSOLE, "CONSOLE"}, {node_icon_items_PREFERENCES, "PREFERENCES"}, {node_icon_items_CLIP, "CLIP"}, {node_icon_items_ASSET_MANAGER, "ASSET_MANAGER"}, {node_icon_items_OBJECT_DATAMODE, "OBJECT_DATAMODE"}, {node_icon_items_EDITMODE_HLT, "EDITMODE_HLT"}, {node_icon_items_FACESEL_HLT, "FACESEL_HLT"}, {node_icon_items_VPAINT_HLT, "VPAINT_HLT"}, {node_icon_items_TPAINT_HLT, "TPAINT_HLT"}, {node_icon_items_WPAINT_HLT, "WPAINT_HLT"}, {node_icon_items_SCULPTMODE_HLT, "SCULPTMODE_HLT"}, {node_icon_items_POSE_HLT, "POSE_HLT"}, {node_icon_items_PARTICLEMODE, "PARTICLEMODE"}, {node_icon_items_LIGHTPAINT, "LIGHTPAINT"}, {node_icon_items_SCENE_DATA, "SCENE_DATA"}, {node_icon_items_RENDERLAYERS, "RENDERLAYERS"}, {node_icon_items_WORLD_DATA, "WORLD_DATA"}, {node_icon_items_OBJECT_DATA, "OBJECT_DATA"}, {node_icon_items_MESH_DATA, "MESH_DATA"}, {node_icon_items_CURVE_DATA, "CURVE_DATA"}, {node_icon_items_META_DATA, "META_DATA"}, {node_icon_items_LATTICE_DATA, "LATTICE_DATA"}, {node_icon_items_LAMP_DATA, "LAMP_DATA"}, {node_icon_items_MATERIAL_DATA, "MATERIAL_DATA"}, {node_icon_items_TEXTURE_DATA, "TEXTURE_DATA"}, {node_icon_items_ANIM_DATA, "ANIM_DATA"}, {node_icon_items_CAMERA_DATA, "CAMERA_DATA"}, {node_icon_items_PARTICLE_DATA, "PARTICLE_DATA"}, {node_icon_items_LIBRARY_DATA_DIRECT, "LIBRARY_DATA_DIRECT"}, {node_icon_items_GROUP, "GROUP"}, {node_icon_items_ARMATURE_DATA, "ARMATURE_DATA"}, {node_icon_items_POSE_DATA, "POSE_DATA"}, {node_icon_items_BONE_DATA, "BONE_DATA"}, {node_icon_items_CONSTRAINT, "CONSTRAINT"}, {node_icon_items_SHAPEKEY_DATA, "SHAPEKEY_DATA"}, {node_icon_items_CONSTRAINT_BONE, "CONSTRAINT_BONE"}, {node_icon_items_CAMERA_STEREO, "CAMERA_STEREO"}, {node_icon_items_PACKAGE, "PACKAGE"}, {node_icon_items_UGLYPACKAGE, "UGLYPACKAGE"}, {node_icon_items_BRUSH_DATA, "BRUSH_DATA"}, {node_icon_items_IMAGE_DATA, "IMAGE_DATA"}, {node_icon_items_FILE, "FILE"}, {node_icon_items_FCURVE, "FCURVE"}, {node_icon_items_FONT_DATA, "FONT_DATA"}, {node_icon_items_RENDER_RESULT, "RENDER_RESULT"}, {node_icon_items_SURFACE_DATA, "SURFACE_DATA"}, {node_icon_items_EMPTY_DATA, "EMPTY_DATA"}, {node_icon_items_SETTINGS, "SETTINGS"}, {node_icon_items_RENDER_ANIMATION, "RENDER_ANIMATION"}, {node_icon_items_RENDER_STILL, "RENDER_STILL"}, {node_icon_items_LIBRARY_DATA_BROKEN, "LIBRARY_DATA_BROKEN"}, {node_icon_items_BOIDS, "BOIDS"}, {node_icon_items_STRANDS, "STRANDS"}, {node_icon_items_LIBRARY_DATA_INDIRECT, "LIBRARY_DATA_INDIRECT"}, {node_icon_items_GREASEPENCIL, "GREASEPENCIL"}, {node_icon_items_LINE_DATA, "LINE_DATA"}, {node_icon_items_GROUP_BONE, "GROUP_BONE"}, {node_icon_items_GROUP_VERTEX, "GROUP_VERTEX"}, {node_icon_items_GROUP_VCOL, "GROUP_VCOL"}, {node_icon_items_GROUP_UVS, "GROUP_UVS"}, {node_icon_items_RNA, "RNA"}, {node_icon_items_RNA_ADD, "RNA_ADD"}, {node_icon_items_OUTLINER_OB_EMPTY, "OUTLINER_OB_EMPTY"}, {node_icon_items_OUTLINER_OB_MESH, "OUTLINER_OB_MESH"}, {node_icon_items_OUTLINER_OB_CURVE, "OUTLINER_OB_CURVE"}, {node_icon_items_OUTLINER_OB_LATTICE, "OUTLINER_OB_LATTICE"}, {node_icon_items_OUTLINER_OB_META, "OUTLINER_OB_META"}, {node_icon_items_OUTLINER_OB_LAMP, "OUTLINER_OB_LAMP"}, {node_icon_items_OUTLINER_OB_CAMERA, "OUTLINER_OB_CAMERA"}, {node_icon_items_OUTLINER_OB_ARMATURE, "OUTLINER_OB_ARMATURE"}, {node_icon_items_OUTLINER_OB_FONT, "OUTLINER_OB_FONT"}, {node_icon_items_OUTLINER_OB_SURFACE, "OUTLINER_OB_SURFACE"}, {node_icon_items_OUTLINER_OB_SPEAKER, "OUTLINER_OB_SPEAKER"}, {node_icon_items_RESTRICT_VIEW_OFF, "RESTRICT_VIEW_OFF"}, {node_icon_items_RESTRICT_VIEW_ON, "RESTRICT_VIEW_ON"}, {node_icon_items_RESTRICT_SELECT_OFF, "RESTRICT_SELECT_OFF"}, {node_icon_items_RESTRICT_SELECT_ON, "RESTRICT_SELECT_ON"}, {node_icon_items_RESTRICT_RENDER_OFF, "RESTRICT_RENDER_OFF"}, {node_icon_items_RESTRICT_RENDER_ON, "RESTRICT_RENDER_ON"}, {node_icon_items_OUTLINER_DATA_EMPTY, "OUTLINER_DATA_EMPTY"}, {node_icon_items_OUTLINER_DATA_MESH, "OUTLINER_DATA_MESH"}, {node_icon_items_OUTLINER_DATA_CURVE, "OUTLINER_DATA_CURVE"}, {node_icon_items_OUTLINER_DATA_LATTICE, "OUTLINER_DATA_LATTICE"}, {node_icon_items_OUTLINER_DATA_META, "OUTLINER_DATA_META"}, {node_icon_items_OUTLINER_DATA_LAMP, "OUTLINER_DATA_LAMP"}, {node_icon_items_OUTLINER_DATA_CAMERA, "OUTLINER_DATA_CAMERA"}, {node_icon_items_OUTLINER_DATA_ARMATURE, "OUTLINER_DATA_ARMATURE"}, {node_icon_items_OUTLINER_DATA_FONT, "OUTLINER_DATA_FONT"}, {node_icon_items_OUTLINER_DATA_SURFACE, "OUTLINER_DATA_SURFACE"}, {node_icon_items_OUTLINER_DATA_SPEAKER, "OUTLINER_DATA_SPEAKER"}, {node_icon_items_OUTLINER_DATA_POSE, "OUTLINER_DATA_POSE"}, {node_icon_items_MESH_PLANE, "MESH_PLANE"}, {node_icon_items_MESH_CUBE, "MESH_CUBE"}, {node_icon_items_MESH_CIRCLE, "MESH_CIRCLE"}, {node_icon_items_MESH_UVSPHERE, "MESH_UVSPHERE"}, {node_icon_items_MESH_ICOSPHERE, "MESH_ICOSPHERE"}, {node_icon_items_MESH_GRID, "MESH_GRID"}, {node_icon_items_MESH_MONKEY, "MESH_MONKEY"}, {node_icon_items_MESH_CYLINDER, "MESH_CYLINDER"}, {node_icon_items_MESH_TORUS, "MESH_TORUS"}, {node_icon_items_MESH_CONE, "MESH_CONE"}, {node_icon_items_LAMP_POINT, "LAMP_POINT"}, {node_icon_items_LAMP_SUN, "LAMP_SUN"}, {node_icon_items_LAMP_SPOT, "LAMP_SPOT"}, {node_icon_items_LAMP_HEMI, "LAMP_HEMI"}, {node_icon_items_LAMP_AREA, "LAMP_AREA"}, {node_icon_items_META_EMPTY, "META_EMPTY"}, {node_icon_items_META_PLANE, "META_PLANE"}, {node_icon_items_META_CUBE, "META_CUBE"}, {node_icon_items_META_BALL, "META_BALL"}, {node_icon_items_META_ELLIPSOID, "META_ELLIPSOID"}, {node_icon_items_META_CAPSULE, "META_CAPSULE"}, {node_icon_items_SURFACE_NCURVE, "SURFACE_NCURVE"}, {node_icon_items_SURFACE_NCIRCLE, "SURFACE_NCIRCLE"}, {node_icon_items_SURFACE_NSURFACE, "SURFACE_NSURFACE"}, {node_icon_items_SURFACE_NCYLINDER, "SURFACE_NCYLINDER"}, {node_icon_items_SURFACE_NSPHERE, "SURFACE_NSPHERE"}, {node_icon_items_SURFACE_NTORUS, "SURFACE_NTORUS"}, {node_icon_items_CURVE_BEZCURVE, "CURVE_BEZCURVE"}, {node_icon_items_CURVE_BEZCIRCLE, "CURVE_BEZCIRCLE"}, {node_icon_items_CURVE_NCURVE, "CURVE_NCURVE"}, {node_icon_items_CURVE_NCIRCLE, "CURVE_NCIRCLE"}, {node_icon_items_CURVE_PATH, "CURVE_PATH"}, {node_icon_items_COLOR_RED, "COLOR_RED"}, {node_icon_items_COLOR_GREEN, "COLOR_GREEN"}, {node_icon_items_COLOR_BLUE, "COLOR_BLUE"}, {node_icon_items_TRIA_RIGHT_BAR, "TRIA_RIGHT_BAR"}, {node_icon_items_TRIA_DOWN_BAR, "TRIA_DOWN_BAR"}, {node_icon_items_TRIA_LEFT_BAR, "TRIA_LEFT_BAR"}, {node_icon_items_TRIA_UP_BAR, "TRIA_UP_BAR"}, {node_icon_items_FORCE_FORCE, "FORCE_FORCE"}, {node_icon_items_FORCE_WIND, "FORCE_WIND"}, {node_icon_items_FORCE_VORTEX, "FORCE_VORTEX"}, {node_icon_items_FORCE_MAGNETIC, "FORCE_MAGNETIC"}, {node_icon_items_FORCE_HARMONIC, "FORCE_HARMONIC"}, {node_icon_items_FORCE_CHARGE, "FORCE_CHARGE"}, {node_icon_items_FORCE_LENNARDJONES, "FORCE_LENNARDJONES"}, {node_icon_items_FORCE_TEXTURE, "FORCE_TEXTURE"}, {node_icon_items_FORCE_CURVE, "FORCE_CURVE"}, {node_icon_items_FORCE_BOID, "FORCE_BOID"}, {node_icon_items_FORCE_TURBULENCE, "FORCE_TURBULENCE"}, {node_icon_items_FORCE_DRAG, "FORCE_DRAG"}, {node_icon_items_FORCE_SMOKEFLOW, "FORCE_SMOKEFLOW"}, {node_icon_items_MODIFIER, "MODIFIER"}, {node_icon_items_MOD_WAVE, "MOD_WAVE"}, {node_icon_items_MOD_BUILD, "MOD_BUILD"}, {node_icon_items_MOD_DECIM, "MOD_DECIM"}, {node_icon_items_MOD_MIRROR, "MOD_MIRROR"}, {node_icon_items_MOD_SOFT, "MOD_SOFT"}, {node_icon_items_MOD_SUBSURF, "MOD_SUBSURF"}, {node_icon_items_HOOK, "HOOK"}, {node_icon_items_MOD_PHYSICS, "MOD_PHYSICS"}, {node_icon_items_MOD_PARTICLES, "MOD_PARTICLES"}, {node_icon_items_MOD_BOOLEAN, "MOD_BOOLEAN"}, {node_icon_items_MOD_EDGESPLIT, "MOD_EDGESPLIT"}, {node_icon_items_MOD_ARRAY, "MOD_ARRAY"}, {node_icon_items_MOD_UVPROJECT, "MOD_UVPROJECT"}, {node_icon_items_MOD_DISPLACE, "MOD_DISPLACE"}, {node_icon_items_MOD_CURVE, "MOD_CURVE"}, {node_icon_items_MOD_LATTICE, "MOD_LATTICE"}, {node_icon_items_CONSTRAINT_DATA, "CONSTRAINT_DATA"}, {node_icon_items_MOD_ARMATURE, "MOD_ARMATURE"}, {node_icon_items_MOD_SHRINKWRAP, "MOD_SHRINKWRAP"}, {node_icon_items_MOD_CAST, "MOD_CAST"}, {node_icon_items_MOD_MESHDEFORM, "MOD_MESHDEFORM"}, {node_icon_items_MOD_BEVEL, "MOD_BEVEL"}, {node_icon_items_MOD_SMOOTH, "MOD_SMOOTH"}, {node_icon_items_MOD_SIMPLEDEFORM, "MOD_SIMPLEDEFORM"}, {node_icon_items_MOD_MASK, "MOD_MASK"}, {node_icon_items_MOD_CLOTH, "MOD_CLOTH"}, {node_icon_items_MOD_EXPLODE, "MOD_EXPLODE"}, {node_icon_items_MOD_FLUIDSIM, "MOD_FLUIDSIM"}, {node_icon_items_MOD_MULTIRES, "MOD_MULTIRES"}, {node_icon_items_MOD_SMOKE, "MOD_SMOKE"}, {node_icon_items_MOD_SOLIDIFY, "MOD_SOLIDIFY"}, {node_icon_items_MOD_SCREW, "MOD_SCREW"}, {node_icon_items_MOD_VERTEX_WEIGHT, "MOD_VERTEX_WEIGHT"}, {node_icon_items_MOD_DYNAMICPAINT, "MOD_DYNAMICPAINT"}, {node_icon_items_MOD_REMESH, "MOD_REMESH"}, {node_icon_items_MOD_OCEAN, "MOD_OCEAN"}, {node_icon_items_MOD_WARP, "MOD_WARP"}, {node_icon_items_MOD_SKIN, "MOD_SKIN"}, {node_icon_items_MOD_TRIANGULATE, "MOD_TRIANGULATE"}, {node_icon_items_MOD_WIREFRAME, "MOD_WIREFRAME"}, {node_icon_items_MOD_DATA_TRANSFER, "MOD_DATA_TRANSFER"}, {node_icon_items_MOD_NORMALEDIT, "MOD_NORMALEDIT"}, {node_icon_items_REC, "REC"}, {node_icon_items_PLAY, "PLAY"}, {node_icon_items_FF, "FF"}, {node_icon_items_REW, "REW"}, {node_icon_items_PAUSE, "PAUSE"}, {node_icon_items_PREV_KEYFRAME, "PREV_KEYFRAME"}, {node_icon_items_NEXT_KEYFRAME, "NEXT_KEYFRAME"}, {node_icon_items_PLAY_AUDIO, "PLAY_AUDIO"}, {node_icon_items_PLAY_REVERSE, "PLAY_REVERSE"}, {node_icon_items_PREVIEW_RANGE, "PREVIEW_RANGE"}, {node_icon_items_ACTION_TWEAK, "ACTION_TWEAK"}, {node_icon_items_PMARKER_ACT, "PMARKER_ACT"}, {node_icon_items_PMARKER_SEL, "PMARKER_SEL"}, {node_icon_items_PMARKER, "PMARKER"}, {node_icon_items_MARKER_HLT, "MARKER_HLT"}, {node_icon_items_MARKER, "MARKER"}, {node_icon_items_SPACE2, "SPACE2"}, {node_icon_items_SPACE3, "SPACE3"}, {node_icon_items_KEYINGSET, "KEYINGSET"}, {node_icon_items_KEY_DEHLT, "KEY_DEHLT"}, {node_icon_items_KEY_HLT, "KEY_HLT"}, {node_icon_items_MUTE_IPO_OFF, "MUTE_IPO_OFF"}, {node_icon_items_MUTE_IPO_ON, "MUTE_IPO_ON"}, {node_icon_items_VISIBLE_IPO_OFF, "VISIBLE_IPO_OFF"}, {node_icon_items_VISIBLE_IPO_ON, "VISIBLE_IPO_ON"}, {node_icon_items_DRIVER, "DRIVER"}, {node_icon_items_SOLO_OFF, "SOLO_OFF"}, {node_icon_items_SOLO_ON, "SOLO_ON"}, {node_icon_items_FRAME_PREV, "FRAME_PREV"}, {node_icon_items_FRAME_NEXT, "FRAME_NEXT"}, {node_icon_items_NLA_PUSHDOWN, "NLA_PUSHDOWN"}, {node_icon_items_IPO_CONSTANT, "IPO_CONSTANT"}, {node_icon_items_IPO_LINEAR, "IPO_LINEAR"}, {node_icon_items_IPO_BEZIER, "IPO_BEZIER"}, {node_icon_items_IPO_SINE, "IPO_SINE"}, {node_icon_items_IPO_QUAD, "IPO_QUAD"}, {node_icon_items_IPO_CUBIC, "IPO_CUBIC"}, {node_icon_items_IPO_QUART, "IPO_QUART"}, {node_icon_items_IPO_QUINT, "IPO_QUINT"}, {node_icon_items_IPO_EXPO, "IPO_EXPO"}, {node_icon_items_IPO_CIRC, "IPO_CIRC"}, {node_icon_items_IPO_BOUNCE, "IPO_BOUNCE"}, {node_icon_items_IPO_ELASTIC, "IPO_ELASTIC"}, {node_icon_items_IPO_BACK, "IPO_BACK"}, {node_icon_items_IPO_EASE_IN, "IPO_EASE_IN"}, {node_icon_items_IPO_EASE_OUT, "IPO_EASE_OUT"}, {node_icon_items_IPO_EASE_IN_OUT, "IPO_EASE_IN_OUT"}, {node_icon_items_VERTEXSEL, "VERTEXSEL"}, {node_icon_items_EDGESEL, "EDGESEL"}, {node_icon_items_FACESEL, "FACESEL"}, {node_icon_items_LOOPSEL, "LOOPSEL"}, {node_icon_items_ROTATE, "ROTATE"}, {node_icon_items_CURSOR, "CURSOR"}, {node_icon_items_ROTATECOLLECTION, "ROTATECOLLECTION"}, {node_icon_items_ROTATECENTER, "ROTATECENTER"}, {node_icon_items_ROTACTIVE, "ROTACTIVE"}, {node_icon_items_ALIGN, "ALIGN"}, {node_icon_items_SMOOTHCURVE, "SMOOTHCURVE"}, {node_icon_items_SPHERECURVE, "SPHERECURVE"}, {node_icon_items_ROOTCURVE, "ROOTCURVE"}, {node_icon_items_SHARPCURVE, "SHARPCURVE"}, {node_icon_items_LINCURVE, "LINCURVE"}, {node_icon_items_NOCURVE, "NOCURVE"}, {node_icon_items_RNDCURVE, "RNDCURVE"}, {node_icon_items_PROP_OFF, "PROP_OFF"}, {node_icon_items_PROP_ON, "PROP_ON"}, {node_icon_items_PROP_CON, "PROP_CON"}, {node_icon_items_SCULPT_DYNTOPO, "SCULPT_DYNTOPO"}, {node_icon_items_PARTICLE_POINT, "PARTICLE_POINT"}, {node_icon_items_PARTICLE_TIP, "PARTICLE_TIP"}, {node_icon_items_PARTICLE_PATH, "PARTICLE_PATH"}, {node_icon_items_MAN_TRANS, "MAN_TRANS"}, {node_icon_items_MAN_ROT, "MAN_ROT"}, {node_icon_items_MAN_SCALE, "MAN_SCALE"}, {node_icon_items_MANIPUL, "MANIPUL"}, {node_icon_items_SNAP_OFF, "SNAP_OFF"}, {node_icon_items_SNAP_ON, "SNAP_ON"}, {node_icon_items_SNAP_NORMAL, "SNAP_NORMAL"}, {node_icon_items_SNAP_INCREMENT, "SNAP_INCREMENT"}, {node_icon_items_SNAP_VERTEX, "SNAP_VERTEX"}, {node_icon_items_SNAP_EDGE, "SNAP_EDGE"}, {node_icon_items_SNAP_FACE, "SNAP_FACE"}, {node_icon_items_SNAP_VOLUME, "SNAP_VOLUME"}, {node_icon_items_STICKY_UVS_LOC, "STICKY_UVS_LOC"}, {node_icon_items_STICKY_UVS_DISABLE, "STICKY_UVS_DISABLE"}, {node_icon_items_STICKY_UVS_VERT, "STICKY_UVS_VERT"}, {node_icon_items_CLIPUV_DEHLT, "CLIPUV_DEHLT"}, {node_icon_items_CLIPUV_HLT, "CLIPUV_HLT"}, {node_icon_items_SNAP_PEEL_OBJECT, "SNAP_PEEL_OBJECT"}, {node_icon_items_GRID, "GRID"}, {node_icon_items_PASTEDOWN, "PASTEDOWN"}, {node_icon_items_COPYDOWN, "COPYDOWN"}, {node_icon_items_PASTEFLIPUP, "PASTEFLIPUP"}, {node_icon_items_PASTEFLIPDOWN, "PASTEFLIPDOWN"}, {node_icon_items_SNAP_SURFACE, "SNAP_SURFACE"}, {node_icon_items_AUTOMERGE_ON, "AUTOMERGE_ON"}, {node_icon_items_AUTOMERGE_OFF, "AUTOMERGE_OFF"}, {node_icon_items_RETOPO, "RETOPO"}, {node_icon_items_UV_VERTEXSEL, "UV_VERTEXSEL"}, {node_icon_items_UV_EDGESEL, "UV_EDGESEL"}, {node_icon_items_UV_FACESEL, "UV_FACESEL"}, {node_icon_items_UV_ISLANDSEL, "UV_ISLANDSEL"}, {node_icon_items_UV_SYNC_SELECT, "UV_SYNC_SELECT"}, {node_icon_items_BBOX, "BBOX"}, {node_icon_items_WIRE, "WIRE"}, {node_icon_items_SOLID, "SOLID"}, {node_icon_items_SMOOTH, "SMOOTH"}, {node_icon_items_POTATO, "POTATO"}, {node_icon_items_ORTHO, "ORTHO"}, {node_icon_items_LOCKVIEW_OFF, "LOCKVIEW_OFF"}, {node_icon_items_LOCKVIEW_ON, "LOCKVIEW_ON"}, {node_icon_items_AXIS_SIDE, "AXIS_SIDE"}, {node_icon_items_AXIS_FRONT, "AXIS_FRONT"}, {node_icon_items_AXIS_TOP, "AXIS_TOP"}, {node_icon_items_NDOF_DOM, "NDOF_DOM"}, {node_icon_items_NDOF_TURN, "NDOF_TURN"}, {node_icon_items_NDOF_FLY, "NDOF_FLY"}, {node_icon_items_NDOF_TRANS, "NDOF_TRANS"}, {node_icon_items_LAYER_USED, "LAYER_USED"}, {node_icon_items_LAYER_ACTIVE, "LAYER_ACTIVE"}, {node_icon_items_SORTALPHA, "SORTALPHA"}, {node_icon_items_SORTBYEXT, "SORTBYEXT"}, {node_icon_items_SORTTIME, "SORTTIME"}, {node_icon_items_SORTSIZE, "SORTSIZE"}, {node_icon_items_LONGDISPLAY, "LONGDISPLAY"}, {node_icon_items_SHORTDISPLAY, "SHORTDISPLAY"}, {node_icon_items_GHOST, "GHOST"}, {node_icon_items_IMGDISPLAY, "IMGDISPLAY"}, {node_icon_items_SAVE_AS, "SAVE_AS"}, {node_icon_items_SAVE_COPY, "SAVE_COPY"}, {node_icon_items_BOOKMARKS, "BOOKMARKS"}, {node_icon_items_FONTPREVIEW, "FONTPREVIEW"}, {node_icon_items_FILTER, "FILTER"}, {node_icon_items_NEWFOLDER, "NEWFOLDER"}, {node_icon_items_OPEN_RECENT, "OPEN_RECENT"}, {node_icon_items_FILE_PARENT, "FILE_PARENT"}, {node_icon_items_FILE_REFRESH, "FILE_REFRESH"}, {node_icon_items_FILE_FOLDER, "FILE_FOLDER"}, {node_icon_items_FILE_BLANK, "FILE_BLANK"}, {node_icon_items_FILE_BLEND, "FILE_BLEND"}, {node_icon_items_FILE_IMAGE, "FILE_IMAGE"}, {node_icon_items_FILE_MOVIE, "FILE_MOVIE"}, {node_icon_items_FILE_SCRIPT, "FILE_SCRIPT"}, {node_icon_items_FILE_SOUND, "FILE_SOUND"}, {node_icon_items_FILE_FONT, "FILE_FONT"}, {node_icon_items_FILE_TEXT, "FILE_TEXT"}, {node_icon_items_RECOVER_AUTO, "RECOVER_AUTO"}, {node_icon_items_SAVE_PREFS, "SAVE_PREFS"}, {node_icon_items_LINK_BLEND, "LINK_BLEND"}, {node_icon_items_APPEND_BLEND, "APPEND_BLEND"}, {node_icon_items_IMPORT, "IMPORT"}, {node_icon_items_EXPORT, "EXPORT"}, {node_icon_items_EXTERNAL_DATA, "EXTERNAL_DATA"}, {node_icon_items_LOAD_FACTORY, "LOAD_FACTORY"}, {node_icon_items_LOOP_BACK, "LOOP_BACK"}, {node_icon_items_LOOP_FORWARDS, "LOOP_FORWARDS"}, {node_icon_items_BACK, "BACK"}, {node_icon_items_FORWARD, "FORWARD"}, {node_icon_items_FILE_HIDDEN, "FILE_HIDDEN"}, {node_icon_items_FILE_BACKUP, "FILE_BACKUP"}, {node_icon_items_DISK_DRIVE, "DISK_DRIVE"}, {node_icon_items_MATPLANE, "MATPLANE"}, {node_icon_items_MATSPHERE, "MATSPHERE"}, {node_icon_items_MATCUBE, "MATCUBE"}, {node_icon_items_MONKEY, "MONKEY"}, {node_icon_items_HAIR, "HAIR"}, {node_icon_items_ALIASED, "ALIASED"}, {node_icon_items_ANTIALIASED, "ANTIALIASED"}, {node_icon_items_MAT_SPHERE_SKY, "MAT_SPHERE_SKY"}, {node_icon_items_WORDWRAP_OFF, "WORDWRAP_OFF"}, {node_icon_items_WORDWRAP_ON, "WORDWRAP_ON"}, {node_icon_items_SYNTAX_OFF, "SYNTAX_OFF"}, {node_icon_items_SYNTAX_ON, "SYNTAX_ON"}, {node_icon_items_LINENUMBERS_OFF, "LINENUMBERS_OFF"}, {node_icon_items_LINENUMBERS_ON, "LINENUMBERS_ON"}, {node_icon_items_SCRIPTPLUGINS, "SCRIPTPLUGINS"}, {node_icon_items_SEQ_SEQUENCER, "SEQ_SEQUENCER"}, {node_icon_items_SEQ_PREVIEW, "SEQ_PREVIEW"}, {node_icon_items_SEQ_LUMA_WAVEFORM, "SEQ_LUMA_WAVEFORM"}, {node_icon_items_SEQ_CHROMA_SCOPE, "SEQ_CHROMA_SCOPE"}, {node_icon_items_SEQ_HISTOGRAM, "SEQ_HISTOGRAM"}, {node_icon_items_SEQ_SPLITVIEW, "SEQ_SPLITVIEW"}, {node_icon_items_IMAGE_RGB, "IMAGE_RGB"}, {node_icon_items_IMAGE_RGB_ALPHA, "IMAGE_RGB_ALPHA"}, {node_icon_items_IMAGE_ALPHA, "IMAGE_ALPHA"}, {node_icon_items_IMAGE_ZDEPTH, "IMAGE_ZDEPTH"}, {node_icon_items_IMAGEFILE, "IMAGEFILE"}, {node_icon_items_BRUSH_ADD, "BRUSH_ADD"}, {node_icon_items_BRUSH_BLOB, "BRUSH_BLOB"}, {node_icon_items_BRUSH_BLUR, "BRUSH_BLUR"}, {node_icon_items_BRUSH_CLAY, "BRUSH_CLAY"}, {node_icon_items_BRUSH_CLAY_STRIPS, "BRUSH_CLAY_STRIPS"}, {node_icon_items_BRUSH_CLONE, "BRUSH_CLONE"}, {node_icon_items_BRUSH_CREASE, "BRUSH_CREASE"}, {node_icon_items_BRUSH_DARKEN, "BRUSH_DARKEN"}, {node_icon_items_BRUSH_FILL, "BRUSH_FILL"}, {node_icon_items_BRUSH_FLATTEN, "BRUSH_FLATTEN"}, {node_icon_items_BRUSH_GRAB, "BRUSH_GRAB"}, {node_icon_items_BRUSH_INFLATE, "BRUSH_INFLATE"}, {node_icon_items_BRUSH_LAYER, "BRUSH_LAYER"}, {node_icon_items_BRUSH_LIGHTEN, "BRUSH_LIGHTEN"}, {node_icon_items_BRUSH_MASK, "BRUSH_MASK"}, {node_icon_items_BRUSH_MIX, "BRUSH_MIX"}, {node_icon_items_BRUSH_MULTIPLY, "BRUSH_MULTIPLY"}, {node_icon_items_BRUSH_NUDGE, "BRUSH_NUDGE"}, {node_icon_items_BRUSH_PINCH, "BRUSH_PINCH"}, {node_icon_items_BRUSH_SCRAPE, "BRUSH_SCRAPE"}, {node_icon_items_BRUSH_SCULPT_DRAW, "BRUSH_SCULPT_DRAW"}, {node_icon_items_BRUSH_SMEAR, "BRUSH_SMEAR"}, {node_icon_items_BRUSH_SMOOTH, "BRUSH_SMOOTH"}, {node_icon_items_BRUSH_SNAKE_HOOK, "BRUSH_SNAKE_HOOK"}, {node_icon_items_BRUSH_SOFTEN, "BRUSH_SOFTEN"}, {node_icon_items_BRUSH_SUBTRACT, "BRUSH_SUBTRACT"}, {node_icon_items_BRUSH_TEXDRAW, "BRUSH_TEXDRAW"}, {node_icon_items_BRUSH_TEXFILL, "BRUSH_TEXFILL"}, {node_icon_items_BRUSH_TEXMASK, "BRUSH_TEXMASK"}, {node_icon_items_BRUSH_THUMB, "BRUSH_THUMB"}, {node_icon_items_BRUSH_ROTATE, "BRUSH_ROTATE"}, {node_icon_items_BRUSH_VERTEXDRAW, "BRUSH_VERTEXDRAW"}, {node_icon_items_MATCAP_01, "MATCAP_01"}, {node_icon_items_MATCAP_02, "MATCAP_02"}, {node_icon_items_MATCAP_03, "MATCAP_03"}, {node_icon_items_MATCAP_04, "MATCAP_04"}, {node_icon_items_MATCAP_05, "MATCAP_05"}, {node_icon_items_MATCAP_06, "MATCAP_06"}, {node_icon_items_MATCAP_07, "MATCAP_07"}, {node_icon_items_MATCAP_08, "MATCAP_08"}, {node_icon_items_MATCAP_09, "MATCAP_09"}, {node_icon_items_MATCAP_10, "MATCAP_10"}, {node_icon_items_MATCAP_11, "MATCAP_11"}, {node_icon_items_MATCAP_12, "MATCAP_12"}, {node_icon_items_MATCAP_13, "MATCAP_13"}, {node_icon_items_MATCAP_14, "MATCAP_14"}, {node_icon_items_MATCAP_15, "MATCAP_15"}, {node_icon_items_MATCAP_16, "MATCAP_16"}, {node_icon_items_MATCAP_17, "MATCAP_17"}, {node_icon_items_MATCAP_18, "MATCAP_18"}, {node_icon_items_MATCAP_19, "MATCAP_19"}, {node_icon_items_MATCAP_20, "MATCAP_20"}, {node_icon_items_MATCAP_21, "MATCAP_21"}, {node_icon_items_MATCAP_22, "MATCAP_22"}, {node_icon_items_MATCAP_23, "MATCAP_23"}, {node_icon_items_MATCAP_24, "MATCAP_24"}};
	};

	const std::map<std::string, int> string_to_node_icon_items = create_string_to_node_icon_items();
	const std::map<int, std::string> node_icon_items_to_string = create_node_icon_items_to_string();

	node_icon_items_enum bl_icon() {
		STRING_TYPE_GETTER("bl_icon", static_cast<node_icon_items_enum>(string_to_node_icon_items.at(resstr)))
	}

	void bl_icon(node_icon_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_icon", node_icon_items_to_string.at(value))
	}

	dummy_static_type_items_enum bl_static_type() {
		STRING_TYPE_GETTER("bl_static_type", static_cast<dummy_static_type_items_enum>(string_to_dummy_static_type_items.at(resstr)))
	}

	void bl_static_type(dummy_static_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_static_type", dummy_static_type_items_to_string.at(value))
	}

	float bl_width_default() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bl_width_default")
	}

	void bl_width_default(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bl_width_default", value)
	}

	float bl_width_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bl_width_min")
	}

	void bl_width_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bl_width_min", value)
	}

	float bl_width_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bl_width_max")
	}

	void bl_width_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bl_width_max", value)
	}

	float bl_height_default() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bl_height_default")
	}

	void bl_height_default(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bl_height_default", value)
	}

	float bl_height_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bl_height_min")
	}

	void bl_height_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bl_height_min", value)
	}

	float bl_height_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bl_height_max")
	}

	void bl_height_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bl_height_max", value)
	}

	void socket_value_update(Context context) {
		PYTHON_FUNCTION_ARGS_CALL("socket_value_update", "O", context.get_pyobjref())
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

};

class NodeLink : public pyUniplug {
public:
	NodeLink(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeLink() : pyUniplug(0) { }

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}

	Node from_node() {
		CLASS_TYPES_GETTER(Node, "from_node")
	}

	Node to_node() {
		CLASS_TYPES_GETTER(Node, "to_node")
	}

	NodeSocket from_socket() {
		CLASS_TYPES_GETTER(NodeSocket, "from_socket")
	}

	NodeSocket to_socket() {
		CLASS_TYPES_GETTER(NodeSocket, "to_socket")
	}

	bool is_hidden() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_hidden")
	}

	void is_hidden(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_hidden", value)
	}
};

class NodeInternalSocketTemplate : public pyUniplug {
public:
	NodeInternalSocketTemplate(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeInternalSocketTemplate() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string identifier() {
		STRING_TYPE_GETTER("identifier", resstr)
	}

	void identifier(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "identifier", value)
	}

	enum node_socket_type_items_enum {
		node_socket_type_items_CUSTOM = -1,	
		node_socket_type_items_VALUE = 0,	
		node_socket_type_items_INT = 6,	
		node_socket_type_items_BOOLEAN = 4,	
		node_socket_type_items_VECTOR = 1,	
		node_socket_type_items_STRING = 7,	
		node_socket_type_items_RGBA = 2,	
		node_socket_type_items_SHADER = 3	
	};

	std::map<std::string, int> create_string_to_node_socket_type_items() {
		return {{"CUSTOM", node_socket_type_items_CUSTOM}, {"VALUE", node_socket_type_items_VALUE}, {"INT", node_socket_type_items_INT}, {"BOOLEAN", node_socket_type_items_BOOLEAN}, {"VECTOR", node_socket_type_items_VECTOR}, {"STRING", node_socket_type_items_STRING}, {"RGBA", node_socket_type_items_RGBA}, {"SHADER", node_socket_type_items_SHADER}};
	};

	std::map<int, std::string> create_node_socket_type_items_to_string() {
		return {{node_socket_type_items_CUSTOM, "CUSTOM"}, {node_socket_type_items_VALUE, "VALUE"}, {node_socket_type_items_INT, "INT"}, {node_socket_type_items_BOOLEAN, "BOOLEAN"}, {node_socket_type_items_VECTOR, "VECTOR"}, {node_socket_type_items_STRING, "STRING"}, {node_socket_type_items_RGBA, "RGBA"}, {node_socket_type_items_SHADER, "SHADER"}};
	};

	const std::map<std::string, int> string_to_node_socket_type_items = create_string_to_node_socket_type_items();
	const std::map<int, std::string> node_socket_type_items_to_string = create_node_socket_type_items_to_string();

	node_socket_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<node_socket_type_items_enum>(string_to_node_socket_type_items.at(resstr)))
	}

	void type(node_socket_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", node_socket_type_items_to_string.at(value))
	}
};

class NodeInternal : public Node {
public:
	NodeInternal(PyObject* pyobj) : Node(pyobj) {}
	NodeInternal() : Node(0) { }

	bool poll(NodeTree node_tree);

	bool poll_instance(NodeTree node_tree);

	void update() {
		PYTHON_FUNCTION_CALL("update")
	}

	void draw_buttons(Context context, UILayout layout);

	void draw_buttons_ext(Context context, UILayout layout);
};

class ShaderNode : public NodeInternal {
public:
	ShaderNode(PyObject* pyobj) : NodeInternal(pyobj) {}
	ShaderNode() : NodeInternal(0) { }
};

class CompositorNode : public NodeInternal {
public:
	CompositorNode(PyObject* pyobj) : NodeInternal(pyobj) {}
	CompositorNode() : NodeInternal(0) { }

	void tag_need_exec() {
		PYTHON_FUNCTION_CALL("tag_need_exec")
	}
};

class TextureNode : public NodeInternal {
public:
	TextureNode(PyObject* pyobj) : NodeInternal(pyobj) {}
	TextureNode() : NodeInternal(0) { }
};

class NodeTree : public ID {
public:
	NodeTree(PyObject* pyobj) : ID(pyobj) {}
	NodeTree() : ID(0) { }

	VFLOAT2 view_center() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_center", 2)
	}

	void view_center(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_center", 2)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	std::map<std::string, Node> nodes() {
		MAP_TYPE_GETTER("nodes", Node)
	}

	std::map<std::string, NodeLink> links() {
		MAP_TYPE_GETTER("links", NodeLink)
	}

	GreasePencil grease_pencil() {
		CLASS_TYPES_GETTER(GreasePencil, "grease_pencil")
	}

	enum static_type_items_enum {
		static_type_items_SHADER = 0,	
		static_type_items_TEXTURE = 2,	
		static_type_items_COMPOSITING = 1	
	};

	std::map<std::string, int> create_string_to_static_type_items() {
		return {{"SHADER", static_type_items_SHADER}, {"TEXTURE", static_type_items_TEXTURE}, {"COMPOSITING", static_type_items_COMPOSITING}};
	};

	std::map<int, std::string> create_static_type_items_to_string() {
		return {{static_type_items_SHADER, "SHADER"}, {static_type_items_TEXTURE, "TEXTURE"}, {static_type_items_COMPOSITING, "COMPOSITING"}};
	};

	const std::map<std::string, int> string_to_static_type_items = create_string_to_static_type_items();
	const std::map<int, std::string> static_type_items_to_string = create_static_type_items_to_string();

	static_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<static_type_items_enum>(string_to_static_type_items.at(resstr)))
	}

	void type(static_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", static_type_items_to_string.at(value))
	}

	std::map<std::string, NodeSocketInterface> inputs() {
		MAP_TYPE_GETTER("inputs", NodeSocketInterface)
	}

	int active_input() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_input")
	}

	void active_input(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_input", value)
	}

	std::map<std::string, NodeSocketInterface> outputs() {
		MAP_TYPE_GETTER("outputs", NodeSocketInterface)
	}

	int active_output() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_output")
	}

	void active_output(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_output", value)
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_description() {
		STRING_TYPE_GETTER("bl_description", resstr)
	}

	void bl_description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_description", value)
	}

	enum node_icon_items_enum {
		node_icon_items_NONE = 0,	
		node_icon_items_QUESTION = 1,	
		node_icon_items_ERROR = 2,	
		node_icon_items_CANCEL = 3,	
		node_icon_items_TRIA_RIGHT = 4,	
		node_icon_items_TRIA_DOWN = 5,	
		node_icon_items_TRIA_LEFT = 6,	
		node_icon_items_TRIA_UP = 7,	
		node_icon_items_ARROW_LEFTRIGHT = 8,	
		node_icon_items_PLUS = 9,	
		node_icon_items_DISCLOSURE_TRI_DOWN = 10,	
		node_icon_items_DISCLOSURE_TRI_RIGHT = 11,	
		node_icon_items_RADIOBUT_OFF = 12,	
		node_icon_items_RADIOBUT_ON = 13,	
		node_icon_items_MENU_PANEL = 14,	
		node_icon_items_BLENDER = 15,	
		node_icon_items_GRIP = 16,	
		node_icon_items_DOT = 17,	
		node_icon_items_COLLAPSEMENU = 18,	
		node_icon_items_X = 19,	
		node_icon_items_GO_LEFT = 21,	
		node_icon_items_PLUG = 22,	
		node_icon_items_UI = 23,	
		node_icon_items_NODE = 24,	
		node_icon_items_NODE_SEL = 25,	
		node_icon_items_FULLSCREEN = 26,	
		node_icon_items_SPLITSCREEN = 27,	
		node_icon_items_RIGHTARROW_THIN = 28,	
		node_icon_items_BORDERMOVE = 29,	
		node_icon_items_VIEWZOOM = 30,	
		node_icon_items_ZOOMIN = 31,	
		node_icon_items_ZOOMOUT = 32,	
		node_icon_items_PANEL_CLOSE = 33,	
		node_icon_items_COPY_ID = 34,	
		node_icon_items_EYEDROPPER = 35,	
		node_icon_items_LINK_AREA = 36,	
		node_icon_items_AUTO = 37,	
		node_icon_items_CHECKBOX_DEHLT = 38,	
		node_icon_items_CHECKBOX_HLT = 39,	
		node_icon_items_UNLOCKED = 40,	
		node_icon_items_LOCKED = 41,	
		node_icon_items_UNPINNED = 42,	
		node_icon_items_PINNED = 43,	
		node_icon_items_SCREEN_BACK = 44,	
		node_icon_items_RIGHTARROW = 45,	
		node_icon_items_DOWNARROW_HLT = 46,	
		node_icon_items_DOTSUP = 47,	
		node_icon_items_DOTSDOWN = 48,	
		node_icon_items_LINK = 49,	
		node_icon_items_INLINK = 50,	
		node_icon_items_PLUGIN = 51,	
		node_icon_items_HELP = 52,	
		node_icon_items_GHOST_ENABLED = 53,	
		node_icon_items_COLOR = 54,	
		node_icon_items_LINKED = 55,	
		node_icon_items_UNLINKED = 56,	
		node_icon_items_HAND = 57,	
		node_icon_items_ZOOM_ALL = 58,	
		node_icon_items_ZOOM_SELECTED = 59,	
		node_icon_items_ZOOM_PREVIOUS = 60,	
		node_icon_items_ZOOM_IN = 61,	
		node_icon_items_ZOOM_OUT = 62,	
		node_icon_items_RENDER_REGION = 63,	
		node_icon_items_BORDER_RECT = 64,	
		node_icon_items_BORDER_LASSO = 65,	
		node_icon_items_FREEZE = 66,	
		node_icon_items_STYLUS_PRESSURE = 67,	
		node_icon_items_GHOST_DISABLED = 68,	
		node_icon_items_NEW = 69,	
		node_icon_items_FILE_TICK = 70,	
		node_icon_items_QUIT = 71,	
		node_icon_items_URL = 72,	
		node_icon_items_RECOVER_LAST = 73,	
		node_icon_items_FULLSCREEN_ENTER = 75,	
		node_icon_items_FULLSCREEN_EXIT = 76,	
		node_icon_items_BLANK1 = 77,	
		node_icon_items_LAMP = 78,	
		node_icon_items_MATERIAL = 79,	
		node_icon_items_TEXTURE = 80,	
		node_icon_items_ANIM = 81,	
		node_icon_items_WORLD = 82,	
		node_icon_items_SCENE = 83,	
		node_icon_items_EDIT = 84,	
		node_icon_items_GAME = 85,	
		node_icon_items_RADIO = 86,	
		node_icon_items_SCRIPT = 87,	
		node_icon_items_PARTICLES = 88,	
		node_icon_items_PHYSICS = 89,	
		node_icon_items_SPEAKER = 90,	
		node_icon_items_TEXTURE_SHADED = 91,	
		node_icon_items_VIEW3D = 104,	
		node_icon_items_IPO = 105,	
		node_icon_items_OOPS = 106,	
		node_icon_items_BUTS = 107,	
		node_icon_items_FILESEL = 108,	
		node_icon_items_IMAGE_COL = 109,	
		node_icon_items_INFO = 110,	
		node_icon_items_SEQUENCE = 111,	
		node_icon_items_TEXT = 112,	
		node_icon_items_IMASEL = 113,	
		node_icon_items_SOUND = 114,	
		node_icon_items_ACTION = 115,	
		node_icon_items_NLA = 116,	
		node_icon_items_SCRIPTWIN = 117,	
		node_icon_items_TIME = 118,	
		node_icon_items_NODETREE = 119,	
		node_icon_items_LOGIC = 120,	
		node_icon_items_CONSOLE = 121,	
		node_icon_items_PREFERENCES = 122,	
		node_icon_items_CLIP = 123,	
		node_icon_items_ASSET_MANAGER = 124,	
		node_icon_items_OBJECT_DATAMODE = 130,	
		node_icon_items_EDITMODE_HLT = 131,	
		node_icon_items_FACESEL_HLT = 132,	
		node_icon_items_VPAINT_HLT = 133,	
		node_icon_items_TPAINT_HLT = 134,	
		node_icon_items_WPAINT_HLT = 135,	
		node_icon_items_SCULPTMODE_HLT = 136,	
		node_icon_items_POSE_HLT = 137,	
		node_icon_items_PARTICLEMODE = 138,	
		node_icon_items_LIGHTPAINT = 139,	
		node_icon_items_SCENE_DATA = 156,	
		node_icon_items_RENDERLAYERS = 157,	
		node_icon_items_WORLD_DATA = 158,	
		node_icon_items_OBJECT_DATA = 159,	
		node_icon_items_MESH_DATA = 160,	
		node_icon_items_CURVE_DATA = 161,	
		node_icon_items_META_DATA = 162,	
		node_icon_items_LATTICE_DATA = 163,	
		node_icon_items_LAMP_DATA = 164,	
		node_icon_items_MATERIAL_DATA = 165,	
		node_icon_items_TEXTURE_DATA = 166,	
		node_icon_items_ANIM_DATA = 167,	
		node_icon_items_CAMERA_DATA = 168,	
		node_icon_items_PARTICLE_DATA = 169,	
		node_icon_items_LIBRARY_DATA_DIRECT = 170,	
		node_icon_items_GROUP = 171,	
		node_icon_items_ARMATURE_DATA = 172,	
		node_icon_items_POSE_DATA = 173,	
		node_icon_items_BONE_DATA = 174,	
		node_icon_items_CONSTRAINT = 175,	
		node_icon_items_SHAPEKEY_DATA = 176,	
		node_icon_items_CONSTRAINT_BONE = 177,	
		node_icon_items_CAMERA_STEREO = 178,	
		node_icon_items_PACKAGE = 179,	
		node_icon_items_UGLYPACKAGE = 180,	
		node_icon_items_BRUSH_DATA = 182,	
		node_icon_items_IMAGE_DATA = 183,	
		node_icon_items_FILE = 184,	
		node_icon_items_FCURVE = 185,	
		node_icon_items_FONT_DATA = 186,	
		node_icon_items_RENDER_RESULT = 187,	
		node_icon_items_SURFACE_DATA = 188,	
		node_icon_items_EMPTY_DATA = 189,	
		node_icon_items_SETTINGS = 190,	
		node_icon_items_RENDER_ANIMATION = 191,	
		node_icon_items_RENDER_STILL = 192,	
		node_icon_items_LIBRARY_DATA_BROKEN = 193,	
		node_icon_items_BOIDS = 194,	
		node_icon_items_STRANDS = 195,	
		node_icon_items_LIBRARY_DATA_INDIRECT = 196,	
		node_icon_items_GREASEPENCIL = 197,	
		node_icon_items_LINE_DATA = 198,	
		node_icon_items_GROUP_BONE = 200,	
		node_icon_items_GROUP_VERTEX = 201,	
		node_icon_items_GROUP_VCOL = 202,	
		node_icon_items_GROUP_UVS = 203,	
		node_icon_items_RNA = 206,	
		node_icon_items_RNA_ADD = 207,	
		node_icon_items_OUTLINER_OB_EMPTY = 234,	
		node_icon_items_OUTLINER_OB_MESH = 235,	
		node_icon_items_OUTLINER_OB_CURVE = 236,	
		node_icon_items_OUTLINER_OB_LATTICE = 237,	
		node_icon_items_OUTLINER_OB_META = 238,	
		node_icon_items_OUTLINER_OB_LAMP = 239,	
		node_icon_items_OUTLINER_OB_CAMERA = 240,	
		node_icon_items_OUTLINER_OB_ARMATURE = 241,	
		node_icon_items_OUTLINER_OB_FONT = 242,	
		node_icon_items_OUTLINER_OB_SURFACE = 243,	
		node_icon_items_OUTLINER_OB_SPEAKER = 244,	
		node_icon_items_RESTRICT_VIEW_OFF = 253,	
		node_icon_items_RESTRICT_VIEW_ON = 254,	
		node_icon_items_RESTRICT_SELECT_OFF = 255,	
		node_icon_items_RESTRICT_SELECT_ON = 256,	
		node_icon_items_RESTRICT_RENDER_OFF = 257,	
		node_icon_items_RESTRICT_RENDER_ON = 258,	
		node_icon_items_OUTLINER_DATA_EMPTY = 260,	
		node_icon_items_OUTLINER_DATA_MESH = 261,	
		node_icon_items_OUTLINER_DATA_CURVE = 262,	
		node_icon_items_OUTLINER_DATA_LATTICE = 263,	
		node_icon_items_OUTLINER_DATA_META = 264,	
		node_icon_items_OUTLINER_DATA_LAMP = 265,	
		node_icon_items_OUTLINER_DATA_CAMERA = 266,	
		node_icon_items_OUTLINER_DATA_ARMATURE = 267,	
		node_icon_items_OUTLINER_DATA_FONT = 268,	
		node_icon_items_OUTLINER_DATA_SURFACE = 269,	
		node_icon_items_OUTLINER_DATA_SPEAKER = 270,	
		node_icon_items_OUTLINER_DATA_POSE = 271,	
		node_icon_items_MESH_PLANE = 286,	
		node_icon_items_MESH_CUBE = 287,	
		node_icon_items_MESH_CIRCLE = 288,	
		node_icon_items_MESH_UVSPHERE = 289,	
		node_icon_items_MESH_ICOSPHERE = 290,	
		node_icon_items_MESH_GRID = 291,	
		node_icon_items_MESH_MONKEY = 292,	
		node_icon_items_MESH_CYLINDER = 293,	
		node_icon_items_MESH_TORUS = 294,	
		node_icon_items_MESH_CONE = 295,	
		node_icon_items_LAMP_POINT = 298,	
		node_icon_items_LAMP_SUN = 299,	
		node_icon_items_LAMP_SPOT = 300,	
		node_icon_items_LAMP_HEMI = 301,	
		node_icon_items_LAMP_AREA = 302,	
		node_icon_items_META_EMPTY = 305,	
		node_icon_items_META_PLANE = 306,	
		node_icon_items_META_CUBE = 307,	
		node_icon_items_META_BALL = 308,	
		node_icon_items_META_ELLIPSOID = 309,	
		node_icon_items_META_CAPSULE = 310,	
		node_icon_items_SURFACE_NCURVE = 312,	
		node_icon_items_SURFACE_NCIRCLE = 313,	
		node_icon_items_SURFACE_NSURFACE = 314,	
		node_icon_items_SURFACE_NCYLINDER = 315,	
		node_icon_items_SURFACE_NSPHERE = 316,	
		node_icon_items_SURFACE_NTORUS = 317,	
		node_icon_items_CURVE_BEZCURVE = 321,	
		node_icon_items_CURVE_BEZCIRCLE = 322,	
		node_icon_items_CURVE_NCURVE = 323,	
		node_icon_items_CURVE_NCIRCLE = 324,	
		node_icon_items_CURVE_PATH = 325,	
		node_icon_items_COLOR_RED = 331,	
		node_icon_items_COLOR_GREEN = 332,	
		node_icon_items_COLOR_BLUE = 333,	
		node_icon_items_TRIA_RIGHT_BAR = 334,	
		node_icon_items_TRIA_DOWN_BAR = 335,	
		node_icon_items_TRIA_LEFT_BAR = 336,	
		node_icon_items_TRIA_UP_BAR = 337,	
		node_icon_items_FORCE_FORCE = 338,	
		node_icon_items_FORCE_WIND = 339,	
		node_icon_items_FORCE_VORTEX = 340,	
		node_icon_items_FORCE_MAGNETIC = 341,	
		node_icon_items_FORCE_HARMONIC = 342,	
		node_icon_items_FORCE_CHARGE = 343,	
		node_icon_items_FORCE_LENNARDJONES = 344,	
		node_icon_items_FORCE_TEXTURE = 345,	
		node_icon_items_FORCE_CURVE = 346,	
		node_icon_items_FORCE_BOID = 347,	
		node_icon_items_FORCE_TURBULENCE = 348,	
		node_icon_items_FORCE_DRAG = 349,	
		node_icon_items_FORCE_SMOKEFLOW = 350,	
		node_icon_items_MODIFIER = 442,	
		node_icon_items_MOD_WAVE = 443,	
		node_icon_items_MOD_BUILD = 444,	
		node_icon_items_MOD_DECIM = 445,	
		node_icon_items_MOD_MIRROR = 446,	
		node_icon_items_MOD_SOFT = 447,	
		node_icon_items_MOD_SUBSURF = 448,	
		node_icon_items_HOOK = 449,	
		node_icon_items_MOD_PHYSICS = 450,	
		node_icon_items_MOD_PARTICLES = 451,	
		node_icon_items_MOD_BOOLEAN = 452,	
		node_icon_items_MOD_EDGESPLIT = 453,	
		node_icon_items_MOD_ARRAY = 454,	
		node_icon_items_MOD_UVPROJECT = 455,	
		node_icon_items_MOD_DISPLACE = 456,	
		node_icon_items_MOD_CURVE = 457,	
		node_icon_items_MOD_LATTICE = 458,	
		node_icon_items_CONSTRAINT_DATA = 459,	
		node_icon_items_MOD_ARMATURE = 460,	
		node_icon_items_MOD_SHRINKWRAP = 461,	
		node_icon_items_MOD_CAST = 462,	
		node_icon_items_MOD_MESHDEFORM = 463,	
		node_icon_items_MOD_BEVEL = 464,	
		node_icon_items_MOD_SMOOTH = 465,	
		node_icon_items_MOD_SIMPLEDEFORM = 466,	
		node_icon_items_MOD_MASK = 467,	
		node_icon_items_MOD_CLOTH = 468,	
		node_icon_items_MOD_EXPLODE = 469,	
		node_icon_items_MOD_FLUIDSIM = 470,	
		node_icon_items_MOD_MULTIRES = 471,	
		node_icon_items_MOD_SMOKE = 472,	
		node_icon_items_MOD_SOLIDIFY = 473,	
		node_icon_items_MOD_SCREW = 474,	
		node_icon_items_MOD_VERTEX_WEIGHT = 475,	
		node_icon_items_MOD_DYNAMICPAINT = 476,	
		node_icon_items_MOD_REMESH = 477,	
		node_icon_items_MOD_OCEAN = 478,	
		node_icon_items_MOD_WARP = 479,	
		node_icon_items_MOD_SKIN = 480,	
		node_icon_items_MOD_TRIANGULATE = 481,	
		node_icon_items_MOD_WIREFRAME = 482,	
		node_icon_items_MOD_DATA_TRANSFER = 483,	
		node_icon_items_MOD_NORMALEDIT = 484,	
		node_icon_items_REC = 494,	
		node_icon_items_PLAY = 495,	
		node_icon_items_FF = 496,	
		node_icon_items_REW = 497,	
		node_icon_items_PAUSE = 498,	
		node_icon_items_PREV_KEYFRAME = 499,	
		node_icon_items_NEXT_KEYFRAME = 500,	
		node_icon_items_PLAY_AUDIO = 501,	
		node_icon_items_PLAY_REVERSE = 502,	
		node_icon_items_PREVIEW_RANGE = 503,	
		node_icon_items_ACTION_TWEAK = 504,	
		node_icon_items_PMARKER_ACT = 505,	
		node_icon_items_PMARKER_SEL = 506,	
		node_icon_items_PMARKER = 507,	
		node_icon_items_MARKER_HLT = 508,	
		node_icon_items_MARKER = 509,	
		node_icon_items_SPACE2 = 510,	
		node_icon_items_SPACE3 = 511,	
		node_icon_items_KEYINGSET = 512,	
		node_icon_items_KEY_DEHLT = 513,	
		node_icon_items_KEY_HLT = 514,	
		node_icon_items_MUTE_IPO_OFF = 515,	
		node_icon_items_MUTE_IPO_ON = 516,	
		node_icon_items_VISIBLE_IPO_OFF = 517,	
		node_icon_items_VISIBLE_IPO_ON = 518,	
		node_icon_items_DRIVER = 519,	
		node_icon_items_SOLO_OFF = 520,	
		node_icon_items_SOLO_ON = 521,	
		node_icon_items_FRAME_PREV = 522,	
		node_icon_items_FRAME_NEXT = 523,	
		node_icon_items_NLA_PUSHDOWN = 524,	
		node_icon_items_IPO_CONSTANT = 525,	
		node_icon_items_IPO_LINEAR = 526,	
		node_icon_items_IPO_BEZIER = 527,	
		node_icon_items_IPO_SINE = 528,	
		node_icon_items_IPO_QUAD = 529,	
		node_icon_items_IPO_CUBIC = 530,	
		node_icon_items_IPO_QUART = 531,	
		node_icon_items_IPO_QUINT = 532,	
		node_icon_items_IPO_EXPO = 533,	
		node_icon_items_IPO_CIRC = 534,	
		node_icon_items_IPO_BOUNCE = 535,	
		node_icon_items_IPO_ELASTIC = 536,	
		node_icon_items_IPO_BACK = 537,	
		node_icon_items_IPO_EASE_IN = 538,	
		node_icon_items_IPO_EASE_OUT = 539,	
		node_icon_items_IPO_EASE_IN_OUT = 540,	
		node_icon_items_VERTEXSEL = 546,	
		node_icon_items_EDGESEL = 547,	
		node_icon_items_FACESEL = 548,	
		node_icon_items_LOOPSEL = 549,	
		node_icon_items_ROTATE = 551,	
		node_icon_items_CURSOR = 552,	
		node_icon_items_ROTATECOLLECTION = 553,	
		node_icon_items_ROTATECENTER = 554,	
		node_icon_items_ROTACTIVE = 555,	
		node_icon_items_ALIGN = 556,	
		node_icon_items_SMOOTHCURVE = 558,	
		node_icon_items_SPHERECURVE = 559,	
		node_icon_items_ROOTCURVE = 560,	
		node_icon_items_SHARPCURVE = 561,	
		node_icon_items_LINCURVE = 562,	
		node_icon_items_NOCURVE = 563,	
		node_icon_items_RNDCURVE = 564,	
		node_icon_items_PROP_OFF = 565,	
		node_icon_items_PROP_ON = 566,	
		node_icon_items_PROP_CON = 567,	
		node_icon_items_SCULPT_DYNTOPO = 568,	
		node_icon_items_PARTICLE_POINT = 569,	
		node_icon_items_PARTICLE_TIP = 570,	
		node_icon_items_PARTICLE_PATH = 571,	
		node_icon_items_MAN_TRANS = 572,	
		node_icon_items_MAN_ROT = 573,	
		node_icon_items_MAN_SCALE = 574,	
		node_icon_items_MANIPUL = 575,	
		node_icon_items_SNAP_OFF = 576,	
		node_icon_items_SNAP_ON = 577,	
		node_icon_items_SNAP_NORMAL = 578,	
		node_icon_items_SNAP_INCREMENT = 579,	
		node_icon_items_SNAP_VERTEX = 580,	
		node_icon_items_SNAP_EDGE = 581,	
		node_icon_items_SNAP_FACE = 582,	
		node_icon_items_SNAP_VOLUME = 583,	
		node_icon_items_STICKY_UVS_LOC = 585,	
		node_icon_items_STICKY_UVS_DISABLE = 586,	
		node_icon_items_STICKY_UVS_VERT = 587,	
		node_icon_items_CLIPUV_DEHLT = 588,	
		node_icon_items_CLIPUV_HLT = 589,	
		node_icon_items_SNAP_PEEL_OBJECT = 590,	
		node_icon_items_GRID = 591,	
		node_icon_items_PASTEDOWN = 598,	
		node_icon_items_COPYDOWN = 599,	
		node_icon_items_PASTEFLIPUP = 600,	
		node_icon_items_PASTEFLIPDOWN = 601,	
		node_icon_items_SNAP_SURFACE = 606,	
		node_icon_items_AUTOMERGE_ON = 607,	
		node_icon_items_AUTOMERGE_OFF = 608,	
		node_icon_items_RETOPO = 609,	
		node_icon_items_UV_VERTEXSEL = 610,	
		node_icon_items_UV_EDGESEL = 611,	
		node_icon_items_UV_FACESEL = 612,	
		node_icon_items_UV_ISLANDSEL = 613,	
		node_icon_items_UV_SYNC_SELECT = 614,	
		node_icon_items_BBOX = 624,	
		node_icon_items_WIRE = 625,	
		node_icon_items_SOLID = 626,	
		node_icon_items_SMOOTH = 627,	
		node_icon_items_POTATO = 628,	
		node_icon_items_ORTHO = 630,	
		node_icon_items_LOCKVIEW_OFF = 633,	
		node_icon_items_LOCKVIEW_ON = 634,	
		node_icon_items_AXIS_SIDE = 636,	
		node_icon_items_AXIS_FRONT = 637,	
		node_icon_items_AXIS_TOP = 638,	
		node_icon_items_NDOF_DOM = 639,	
		node_icon_items_NDOF_TURN = 640,	
		node_icon_items_NDOF_FLY = 641,	
		node_icon_items_NDOF_TRANS = 642,	
		node_icon_items_LAYER_USED = 643,	
		node_icon_items_LAYER_ACTIVE = 644,	
		node_icon_items_SORTALPHA = 676,	
		node_icon_items_SORTBYEXT = 677,	
		node_icon_items_SORTTIME = 678,	
		node_icon_items_SORTSIZE = 679,	
		node_icon_items_LONGDISPLAY = 680,	
		node_icon_items_SHORTDISPLAY = 681,	
		node_icon_items_GHOST = 682,	
		node_icon_items_IMGDISPLAY = 683,	
		node_icon_items_SAVE_AS = 684,	
		node_icon_items_SAVE_COPY = 685,	
		node_icon_items_BOOKMARKS = 686,	
		node_icon_items_FONTPREVIEW = 687,	
		node_icon_items_FILTER = 688,	
		node_icon_items_NEWFOLDER = 689,	
		node_icon_items_OPEN_RECENT = 690,	
		node_icon_items_FILE_PARENT = 691,	
		node_icon_items_FILE_REFRESH = 692,	
		node_icon_items_FILE_FOLDER = 693,	
		node_icon_items_FILE_BLANK = 694,	
		node_icon_items_FILE_BLEND = 695,	
		node_icon_items_FILE_IMAGE = 696,	
		node_icon_items_FILE_MOVIE = 697,	
		node_icon_items_FILE_SCRIPT = 698,	
		node_icon_items_FILE_SOUND = 699,	
		node_icon_items_FILE_FONT = 700,	
		node_icon_items_FILE_TEXT = 701,	
		node_icon_items_RECOVER_AUTO = 702,	
		node_icon_items_SAVE_PREFS = 703,	
		node_icon_items_LINK_BLEND = 704,	
		node_icon_items_APPEND_BLEND = 705,	
		node_icon_items_IMPORT = 706,	
		node_icon_items_EXPORT = 707,	
		node_icon_items_EXTERNAL_DATA = 708,	
		node_icon_items_LOAD_FACTORY = 709,	
		node_icon_items_LOOP_BACK = 715,	
		node_icon_items_LOOP_FORWARDS = 716,	
		node_icon_items_BACK = 717,	
		node_icon_items_FORWARD = 718,	
		node_icon_items_FILE_HIDDEN = 725,	
		node_icon_items_FILE_BACKUP = 726,	
		node_icon_items_DISK_DRIVE = 727,	
		node_icon_items_MATPLANE = 728,	
		node_icon_items_MATSPHERE = 729,	
		node_icon_items_MATCUBE = 730,	
		node_icon_items_MONKEY = 731,	
		node_icon_items_HAIR = 732,	
		node_icon_items_ALIASED = 733,	
		node_icon_items_ANTIALIASED = 734,	
		node_icon_items_MAT_SPHERE_SKY = 735,	
		node_icon_items_WORDWRAP_OFF = 740,	
		node_icon_items_WORDWRAP_ON = 741,	
		node_icon_items_SYNTAX_OFF = 742,	
		node_icon_items_SYNTAX_ON = 743,	
		node_icon_items_LINENUMBERS_OFF = 744,	
		node_icon_items_LINENUMBERS_ON = 745,	
		node_icon_items_SCRIPTPLUGINS = 746,	
		node_icon_items_SEQ_SEQUENCER = 754,	
		node_icon_items_SEQ_PREVIEW = 755,	
		node_icon_items_SEQ_LUMA_WAVEFORM = 756,	
		node_icon_items_SEQ_CHROMA_SCOPE = 757,	
		node_icon_items_SEQ_HISTOGRAM = 758,	
		node_icon_items_SEQ_SPLITVIEW = 759,	
		node_icon_items_IMAGE_RGB = 763,	
		node_icon_items_IMAGE_RGB_ALPHA = 764,	
		node_icon_items_IMAGE_ALPHA = 765,	
		node_icon_items_IMAGE_ZDEPTH = 766,	
		node_icon_items_IMAGEFILE = 767,	
		node_icon_items_BRUSH_ADD = 780,	
		node_icon_items_BRUSH_BLOB = 781,	
		node_icon_items_BRUSH_BLUR = 782,	
		node_icon_items_BRUSH_CLAY = 783,	
		node_icon_items_BRUSH_CLAY_STRIPS = 784,	
		node_icon_items_BRUSH_CLONE = 785,	
		node_icon_items_BRUSH_CREASE = 786,	
		node_icon_items_BRUSH_DARKEN = 787,	
		node_icon_items_BRUSH_FILL = 788,	
		node_icon_items_BRUSH_FLATTEN = 789,	
		node_icon_items_BRUSH_GRAB = 790,	
		node_icon_items_BRUSH_INFLATE = 791,	
		node_icon_items_BRUSH_LAYER = 792,	
		node_icon_items_BRUSH_LIGHTEN = 793,	
		node_icon_items_BRUSH_MASK = 794,	
		node_icon_items_BRUSH_MIX = 795,	
		node_icon_items_BRUSH_MULTIPLY = 796,	
		node_icon_items_BRUSH_NUDGE = 797,	
		node_icon_items_BRUSH_PINCH = 798,	
		node_icon_items_BRUSH_SCRAPE = 799,	
		node_icon_items_BRUSH_SCULPT_DRAW = 800,	
		node_icon_items_BRUSH_SMEAR = 801,	
		node_icon_items_BRUSH_SMOOTH = 802,	
		node_icon_items_BRUSH_SNAKE_HOOK = 803,	
		node_icon_items_BRUSH_SOFTEN = 804,	
		node_icon_items_BRUSH_SUBTRACT = 805,	
		node_icon_items_BRUSH_TEXDRAW = 806,	
		node_icon_items_BRUSH_TEXFILL = 807,	
		node_icon_items_BRUSH_TEXMASK = 808,	
		node_icon_items_BRUSH_THUMB = 809,	
		node_icon_items_BRUSH_ROTATE = 810,	
		node_icon_items_BRUSH_VERTEXDRAW = 811,	
		node_icon_items_MATCAP_01 = 812,	
		node_icon_items_MATCAP_02 = 813,	
		node_icon_items_MATCAP_03 = 814,	
		node_icon_items_MATCAP_04 = 815,	
		node_icon_items_MATCAP_05 = 816,	
		node_icon_items_MATCAP_06 = 817,	
		node_icon_items_MATCAP_07 = 818,	
		node_icon_items_MATCAP_08 = 819,	
		node_icon_items_MATCAP_09 = 820,	
		node_icon_items_MATCAP_10 = 821,	
		node_icon_items_MATCAP_11 = 822,	
		node_icon_items_MATCAP_12 = 823,	
		node_icon_items_MATCAP_13 = 824,	
		node_icon_items_MATCAP_14 = 825,	
		node_icon_items_MATCAP_15 = 826,	
		node_icon_items_MATCAP_16 = 827,	
		node_icon_items_MATCAP_17 = 828,	
		node_icon_items_MATCAP_18 = 829,	
		node_icon_items_MATCAP_19 = 830,	
		node_icon_items_MATCAP_20 = 831,	
		node_icon_items_MATCAP_21 = 832,	
		node_icon_items_MATCAP_22 = 833,	
		node_icon_items_MATCAP_23 = 834,	
		node_icon_items_MATCAP_24 = 835	
	};

	std::map<std::string, int> create_string_to_node_icon_items() {
		return {{"NONE", node_icon_items_NONE}, {"QUESTION", node_icon_items_QUESTION}, {"ERROR", node_icon_items_ERROR}, {"CANCEL", node_icon_items_CANCEL}, {"TRIA_RIGHT", node_icon_items_TRIA_RIGHT}, {"TRIA_DOWN", node_icon_items_TRIA_DOWN}, {"TRIA_LEFT", node_icon_items_TRIA_LEFT}, {"TRIA_UP", node_icon_items_TRIA_UP}, {"ARROW_LEFTRIGHT", node_icon_items_ARROW_LEFTRIGHT}, {"PLUS", node_icon_items_PLUS}, {"DISCLOSURE_TRI_DOWN", node_icon_items_DISCLOSURE_TRI_DOWN}, {"DISCLOSURE_TRI_RIGHT", node_icon_items_DISCLOSURE_TRI_RIGHT}, {"RADIOBUT_OFF", node_icon_items_RADIOBUT_OFF}, {"RADIOBUT_ON", node_icon_items_RADIOBUT_ON}, {"MENU_PANEL", node_icon_items_MENU_PANEL}, {"BLENDER", node_icon_items_BLENDER}, {"GRIP", node_icon_items_GRIP}, {"DOT", node_icon_items_DOT}, {"COLLAPSEMENU", node_icon_items_COLLAPSEMENU}, {"X", node_icon_items_X}, {"GO_LEFT", node_icon_items_GO_LEFT}, {"PLUG", node_icon_items_PLUG}, {"UI", node_icon_items_UI}, {"NODE", node_icon_items_NODE}, {"NODE_SEL", node_icon_items_NODE_SEL}, {"FULLSCREEN", node_icon_items_FULLSCREEN}, {"SPLITSCREEN", node_icon_items_SPLITSCREEN}, {"RIGHTARROW_THIN", node_icon_items_RIGHTARROW_THIN}, {"BORDERMOVE", node_icon_items_BORDERMOVE}, {"VIEWZOOM", node_icon_items_VIEWZOOM}, {"ZOOMIN", node_icon_items_ZOOMIN}, {"ZOOMOUT", node_icon_items_ZOOMOUT}, {"PANEL_CLOSE", node_icon_items_PANEL_CLOSE}, {"COPY_ID", node_icon_items_COPY_ID}, {"EYEDROPPER", node_icon_items_EYEDROPPER}, {"LINK_AREA", node_icon_items_LINK_AREA}, {"AUTO", node_icon_items_AUTO}, {"CHECKBOX_DEHLT", node_icon_items_CHECKBOX_DEHLT}, {"CHECKBOX_HLT", node_icon_items_CHECKBOX_HLT}, {"UNLOCKED", node_icon_items_UNLOCKED}, {"LOCKED", node_icon_items_LOCKED}, {"UNPINNED", node_icon_items_UNPINNED}, {"PINNED", node_icon_items_PINNED}, {"SCREEN_BACK", node_icon_items_SCREEN_BACK}, {"RIGHTARROW", node_icon_items_RIGHTARROW}, {"DOWNARROW_HLT", node_icon_items_DOWNARROW_HLT}, {"DOTSUP", node_icon_items_DOTSUP}, {"DOTSDOWN", node_icon_items_DOTSDOWN}, {"LINK", node_icon_items_LINK}, {"INLINK", node_icon_items_INLINK}, {"PLUGIN", node_icon_items_PLUGIN}, {"HELP", node_icon_items_HELP}, {"GHOST_ENABLED", node_icon_items_GHOST_ENABLED}, {"COLOR", node_icon_items_COLOR}, {"LINKED", node_icon_items_LINKED}, {"UNLINKED", node_icon_items_UNLINKED}, {"HAND", node_icon_items_HAND}, {"ZOOM_ALL", node_icon_items_ZOOM_ALL}, {"ZOOM_SELECTED", node_icon_items_ZOOM_SELECTED}, {"ZOOM_PREVIOUS", node_icon_items_ZOOM_PREVIOUS}, {"ZOOM_IN", node_icon_items_ZOOM_IN}, {"ZOOM_OUT", node_icon_items_ZOOM_OUT}, {"RENDER_REGION", node_icon_items_RENDER_REGION}, {"BORDER_RECT", node_icon_items_BORDER_RECT}, {"BORDER_LASSO", node_icon_items_BORDER_LASSO}, {"FREEZE", node_icon_items_FREEZE}, {"STYLUS_PRESSURE", node_icon_items_STYLUS_PRESSURE}, {"GHOST_DISABLED", node_icon_items_GHOST_DISABLED}, {"NEW", node_icon_items_NEW}, {"FILE_TICK", node_icon_items_FILE_TICK}, {"QUIT", node_icon_items_QUIT}, {"URL", node_icon_items_URL}, {"RECOVER_LAST", node_icon_items_RECOVER_LAST}, {"FULLSCREEN_ENTER", node_icon_items_FULLSCREEN_ENTER}, {"FULLSCREEN_EXIT", node_icon_items_FULLSCREEN_EXIT}, {"BLANK1", node_icon_items_BLANK1}, {"LAMP", node_icon_items_LAMP}, {"MATERIAL", node_icon_items_MATERIAL}, {"TEXTURE", node_icon_items_TEXTURE}, {"ANIM", node_icon_items_ANIM}, {"WORLD", node_icon_items_WORLD}, {"SCENE", node_icon_items_SCENE}, {"EDIT", node_icon_items_EDIT}, {"GAME", node_icon_items_GAME}, {"RADIO", node_icon_items_RADIO}, {"SCRIPT", node_icon_items_SCRIPT}, {"PARTICLES", node_icon_items_PARTICLES}, {"PHYSICS", node_icon_items_PHYSICS}, {"SPEAKER", node_icon_items_SPEAKER}, {"TEXTURE_SHADED", node_icon_items_TEXTURE_SHADED}, {"VIEW3D", node_icon_items_VIEW3D}, {"IPO", node_icon_items_IPO}, {"OOPS", node_icon_items_OOPS}, {"BUTS", node_icon_items_BUTS}, {"FILESEL", node_icon_items_FILESEL}, {"IMAGE_COL", node_icon_items_IMAGE_COL}, {"INFO", node_icon_items_INFO}, {"SEQUENCE", node_icon_items_SEQUENCE}, {"TEXT", node_icon_items_TEXT}, {"IMASEL", node_icon_items_IMASEL}, {"SOUND", node_icon_items_SOUND}, {"ACTION", node_icon_items_ACTION}, {"NLA", node_icon_items_NLA}, {"SCRIPTWIN", node_icon_items_SCRIPTWIN}, {"TIME", node_icon_items_TIME}, {"NODETREE", node_icon_items_NODETREE}, {"LOGIC", node_icon_items_LOGIC}, {"CONSOLE", node_icon_items_CONSOLE}, {"PREFERENCES", node_icon_items_PREFERENCES}, {"CLIP", node_icon_items_CLIP}, {"ASSET_MANAGER", node_icon_items_ASSET_MANAGER}, {"OBJECT_DATAMODE", node_icon_items_OBJECT_DATAMODE}, {"EDITMODE_HLT", node_icon_items_EDITMODE_HLT}, {"FACESEL_HLT", node_icon_items_FACESEL_HLT}, {"VPAINT_HLT", node_icon_items_VPAINT_HLT}, {"TPAINT_HLT", node_icon_items_TPAINT_HLT}, {"WPAINT_HLT", node_icon_items_WPAINT_HLT}, {"SCULPTMODE_HLT", node_icon_items_SCULPTMODE_HLT}, {"POSE_HLT", node_icon_items_POSE_HLT}, {"PARTICLEMODE", node_icon_items_PARTICLEMODE}, {"LIGHTPAINT", node_icon_items_LIGHTPAINT}, {"SCENE_DATA", node_icon_items_SCENE_DATA}, {"RENDERLAYERS", node_icon_items_RENDERLAYERS}, {"WORLD_DATA", node_icon_items_WORLD_DATA}, {"OBJECT_DATA", node_icon_items_OBJECT_DATA}, {"MESH_DATA", node_icon_items_MESH_DATA}, {"CURVE_DATA", node_icon_items_CURVE_DATA}, {"META_DATA", node_icon_items_META_DATA}, {"LATTICE_DATA", node_icon_items_LATTICE_DATA}, {"LAMP_DATA", node_icon_items_LAMP_DATA}, {"MATERIAL_DATA", node_icon_items_MATERIAL_DATA}, {"TEXTURE_DATA", node_icon_items_TEXTURE_DATA}, {"ANIM_DATA", node_icon_items_ANIM_DATA}, {"CAMERA_DATA", node_icon_items_CAMERA_DATA}, {"PARTICLE_DATA", node_icon_items_PARTICLE_DATA}, {"LIBRARY_DATA_DIRECT", node_icon_items_LIBRARY_DATA_DIRECT}, {"GROUP", node_icon_items_GROUP}, {"ARMATURE_DATA", node_icon_items_ARMATURE_DATA}, {"POSE_DATA", node_icon_items_POSE_DATA}, {"BONE_DATA", node_icon_items_BONE_DATA}, {"CONSTRAINT", node_icon_items_CONSTRAINT}, {"SHAPEKEY_DATA", node_icon_items_SHAPEKEY_DATA}, {"CONSTRAINT_BONE", node_icon_items_CONSTRAINT_BONE}, {"CAMERA_STEREO", node_icon_items_CAMERA_STEREO}, {"PACKAGE", node_icon_items_PACKAGE}, {"UGLYPACKAGE", node_icon_items_UGLYPACKAGE}, {"BRUSH_DATA", node_icon_items_BRUSH_DATA}, {"IMAGE_DATA", node_icon_items_IMAGE_DATA}, {"FILE", node_icon_items_FILE}, {"FCURVE", node_icon_items_FCURVE}, {"FONT_DATA", node_icon_items_FONT_DATA}, {"RENDER_RESULT", node_icon_items_RENDER_RESULT}, {"SURFACE_DATA", node_icon_items_SURFACE_DATA}, {"EMPTY_DATA", node_icon_items_EMPTY_DATA}, {"SETTINGS", node_icon_items_SETTINGS}, {"RENDER_ANIMATION", node_icon_items_RENDER_ANIMATION}, {"RENDER_STILL", node_icon_items_RENDER_STILL}, {"LIBRARY_DATA_BROKEN", node_icon_items_LIBRARY_DATA_BROKEN}, {"BOIDS", node_icon_items_BOIDS}, {"STRANDS", node_icon_items_STRANDS}, {"LIBRARY_DATA_INDIRECT", node_icon_items_LIBRARY_DATA_INDIRECT}, {"GREASEPENCIL", node_icon_items_GREASEPENCIL}, {"LINE_DATA", node_icon_items_LINE_DATA}, {"GROUP_BONE", node_icon_items_GROUP_BONE}, {"GROUP_VERTEX", node_icon_items_GROUP_VERTEX}, {"GROUP_VCOL", node_icon_items_GROUP_VCOL}, {"GROUP_UVS", node_icon_items_GROUP_UVS}, {"RNA", node_icon_items_RNA}, {"RNA_ADD", node_icon_items_RNA_ADD}, {"OUTLINER_OB_EMPTY", node_icon_items_OUTLINER_OB_EMPTY}, {"OUTLINER_OB_MESH", node_icon_items_OUTLINER_OB_MESH}, {"OUTLINER_OB_CURVE", node_icon_items_OUTLINER_OB_CURVE}, {"OUTLINER_OB_LATTICE", node_icon_items_OUTLINER_OB_LATTICE}, {"OUTLINER_OB_META", node_icon_items_OUTLINER_OB_META}, {"OUTLINER_OB_LAMP", node_icon_items_OUTLINER_OB_LAMP}, {"OUTLINER_OB_CAMERA", node_icon_items_OUTLINER_OB_CAMERA}, {"OUTLINER_OB_ARMATURE", node_icon_items_OUTLINER_OB_ARMATURE}, {"OUTLINER_OB_FONT", node_icon_items_OUTLINER_OB_FONT}, {"OUTLINER_OB_SURFACE", node_icon_items_OUTLINER_OB_SURFACE}, {"OUTLINER_OB_SPEAKER", node_icon_items_OUTLINER_OB_SPEAKER}, {"RESTRICT_VIEW_OFF", node_icon_items_RESTRICT_VIEW_OFF}, {"RESTRICT_VIEW_ON", node_icon_items_RESTRICT_VIEW_ON}, {"RESTRICT_SELECT_OFF", node_icon_items_RESTRICT_SELECT_OFF}, {"RESTRICT_SELECT_ON", node_icon_items_RESTRICT_SELECT_ON}, {"RESTRICT_RENDER_OFF", node_icon_items_RESTRICT_RENDER_OFF}, {"RESTRICT_RENDER_ON", node_icon_items_RESTRICT_RENDER_ON}, {"OUTLINER_DATA_EMPTY", node_icon_items_OUTLINER_DATA_EMPTY}, {"OUTLINER_DATA_MESH", node_icon_items_OUTLINER_DATA_MESH}, {"OUTLINER_DATA_CURVE", node_icon_items_OUTLINER_DATA_CURVE}, {"OUTLINER_DATA_LATTICE", node_icon_items_OUTLINER_DATA_LATTICE}, {"OUTLINER_DATA_META", node_icon_items_OUTLINER_DATA_META}, {"OUTLINER_DATA_LAMP", node_icon_items_OUTLINER_DATA_LAMP}, {"OUTLINER_DATA_CAMERA", node_icon_items_OUTLINER_DATA_CAMERA}, {"OUTLINER_DATA_ARMATURE", node_icon_items_OUTLINER_DATA_ARMATURE}, {"OUTLINER_DATA_FONT", node_icon_items_OUTLINER_DATA_FONT}, {"OUTLINER_DATA_SURFACE", node_icon_items_OUTLINER_DATA_SURFACE}, {"OUTLINER_DATA_SPEAKER", node_icon_items_OUTLINER_DATA_SPEAKER}, {"OUTLINER_DATA_POSE", node_icon_items_OUTLINER_DATA_POSE}, {"MESH_PLANE", node_icon_items_MESH_PLANE}, {"MESH_CUBE", node_icon_items_MESH_CUBE}, {"MESH_CIRCLE", node_icon_items_MESH_CIRCLE}, {"MESH_UVSPHERE", node_icon_items_MESH_UVSPHERE}, {"MESH_ICOSPHERE", node_icon_items_MESH_ICOSPHERE}, {"MESH_GRID", node_icon_items_MESH_GRID}, {"MESH_MONKEY", node_icon_items_MESH_MONKEY}, {"MESH_CYLINDER", node_icon_items_MESH_CYLINDER}, {"MESH_TORUS", node_icon_items_MESH_TORUS}, {"MESH_CONE", node_icon_items_MESH_CONE}, {"LAMP_POINT", node_icon_items_LAMP_POINT}, {"LAMP_SUN", node_icon_items_LAMP_SUN}, {"LAMP_SPOT", node_icon_items_LAMP_SPOT}, {"LAMP_HEMI", node_icon_items_LAMP_HEMI}, {"LAMP_AREA", node_icon_items_LAMP_AREA}, {"META_EMPTY", node_icon_items_META_EMPTY}, {"META_PLANE", node_icon_items_META_PLANE}, {"META_CUBE", node_icon_items_META_CUBE}, {"META_BALL", node_icon_items_META_BALL}, {"META_ELLIPSOID", node_icon_items_META_ELLIPSOID}, {"META_CAPSULE", node_icon_items_META_CAPSULE}, {"SURFACE_NCURVE", node_icon_items_SURFACE_NCURVE}, {"SURFACE_NCIRCLE", node_icon_items_SURFACE_NCIRCLE}, {"SURFACE_NSURFACE", node_icon_items_SURFACE_NSURFACE}, {"SURFACE_NCYLINDER", node_icon_items_SURFACE_NCYLINDER}, {"SURFACE_NSPHERE", node_icon_items_SURFACE_NSPHERE}, {"SURFACE_NTORUS", node_icon_items_SURFACE_NTORUS}, {"CURVE_BEZCURVE", node_icon_items_CURVE_BEZCURVE}, {"CURVE_BEZCIRCLE", node_icon_items_CURVE_BEZCIRCLE}, {"CURVE_NCURVE", node_icon_items_CURVE_NCURVE}, {"CURVE_NCIRCLE", node_icon_items_CURVE_NCIRCLE}, {"CURVE_PATH", node_icon_items_CURVE_PATH}, {"COLOR_RED", node_icon_items_COLOR_RED}, {"COLOR_GREEN", node_icon_items_COLOR_GREEN}, {"COLOR_BLUE", node_icon_items_COLOR_BLUE}, {"TRIA_RIGHT_BAR", node_icon_items_TRIA_RIGHT_BAR}, {"TRIA_DOWN_BAR", node_icon_items_TRIA_DOWN_BAR}, {"TRIA_LEFT_BAR", node_icon_items_TRIA_LEFT_BAR}, {"TRIA_UP_BAR", node_icon_items_TRIA_UP_BAR}, {"FORCE_FORCE", node_icon_items_FORCE_FORCE}, {"FORCE_WIND", node_icon_items_FORCE_WIND}, {"FORCE_VORTEX", node_icon_items_FORCE_VORTEX}, {"FORCE_MAGNETIC", node_icon_items_FORCE_MAGNETIC}, {"FORCE_HARMONIC", node_icon_items_FORCE_HARMONIC}, {"FORCE_CHARGE", node_icon_items_FORCE_CHARGE}, {"FORCE_LENNARDJONES", node_icon_items_FORCE_LENNARDJONES}, {"FORCE_TEXTURE", node_icon_items_FORCE_TEXTURE}, {"FORCE_CURVE", node_icon_items_FORCE_CURVE}, {"FORCE_BOID", node_icon_items_FORCE_BOID}, {"FORCE_TURBULENCE", node_icon_items_FORCE_TURBULENCE}, {"FORCE_DRAG", node_icon_items_FORCE_DRAG}, {"FORCE_SMOKEFLOW", node_icon_items_FORCE_SMOKEFLOW}, {"MODIFIER", node_icon_items_MODIFIER}, {"MOD_WAVE", node_icon_items_MOD_WAVE}, {"MOD_BUILD", node_icon_items_MOD_BUILD}, {"MOD_DECIM", node_icon_items_MOD_DECIM}, {"MOD_MIRROR", node_icon_items_MOD_MIRROR}, {"MOD_SOFT", node_icon_items_MOD_SOFT}, {"MOD_SUBSURF", node_icon_items_MOD_SUBSURF}, {"HOOK", node_icon_items_HOOK}, {"MOD_PHYSICS", node_icon_items_MOD_PHYSICS}, {"MOD_PARTICLES", node_icon_items_MOD_PARTICLES}, {"MOD_BOOLEAN", node_icon_items_MOD_BOOLEAN}, {"MOD_EDGESPLIT", node_icon_items_MOD_EDGESPLIT}, {"MOD_ARRAY", node_icon_items_MOD_ARRAY}, {"MOD_UVPROJECT", node_icon_items_MOD_UVPROJECT}, {"MOD_DISPLACE", node_icon_items_MOD_DISPLACE}, {"MOD_CURVE", node_icon_items_MOD_CURVE}, {"MOD_LATTICE", node_icon_items_MOD_LATTICE}, {"CONSTRAINT_DATA", node_icon_items_CONSTRAINT_DATA}, {"MOD_ARMATURE", node_icon_items_MOD_ARMATURE}, {"MOD_SHRINKWRAP", node_icon_items_MOD_SHRINKWRAP}, {"MOD_CAST", node_icon_items_MOD_CAST}, {"MOD_MESHDEFORM", node_icon_items_MOD_MESHDEFORM}, {"MOD_BEVEL", node_icon_items_MOD_BEVEL}, {"MOD_SMOOTH", node_icon_items_MOD_SMOOTH}, {"MOD_SIMPLEDEFORM", node_icon_items_MOD_SIMPLEDEFORM}, {"MOD_MASK", node_icon_items_MOD_MASK}, {"MOD_CLOTH", node_icon_items_MOD_CLOTH}, {"MOD_EXPLODE", node_icon_items_MOD_EXPLODE}, {"MOD_FLUIDSIM", node_icon_items_MOD_FLUIDSIM}, {"MOD_MULTIRES", node_icon_items_MOD_MULTIRES}, {"MOD_SMOKE", node_icon_items_MOD_SMOKE}, {"MOD_SOLIDIFY", node_icon_items_MOD_SOLIDIFY}, {"MOD_SCREW", node_icon_items_MOD_SCREW}, {"MOD_VERTEX_WEIGHT", node_icon_items_MOD_VERTEX_WEIGHT}, {"MOD_DYNAMICPAINT", node_icon_items_MOD_DYNAMICPAINT}, {"MOD_REMESH", node_icon_items_MOD_REMESH}, {"MOD_OCEAN", node_icon_items_MOD_OCEAN}, {"MOD_WARP", node_icon_items_MOD_WARP}, {"MOD_SKIN", node_icon_items_MOD_SKIN}, {"MOD_TRIANGULATE", node_icon_items_MOD_TRIANGULATE}, {"MOD_WIREFRAME", node_icon_items_MOD_WIREFRAME}, {"MOD_DATA_TRANSFER", node_icon_items_MOD_DATA_TRANSFER}, {"MOD_NORMALEDIT", node_icon_items_MOD_NORMALEDIT}, {"REC", node_icon_items_REC}, {"PLAY", node_icon_items_PLAY}, {"FF", node_icon_items_FF}, {"REW", node_icon_items_REW}, {"PAUSE", node_icon_items_PAUSE}, {"PREV_KEYFRAME", node_icon_items_PREV_KEYFRAME}, {"NEXT_KEYFRAME", node_icon_items_NEXT_KEYFRAME}, {"PLAY_AUDIO", node_icon_items_PLAY_AUDIO}, {"PLAY_REVERSE", node_icon_items_PLAY_REVERSE}, {"PREVIEW_RANGE", node_icon_items_PREVIEW_RANGE}, {"ACTION_TWEAK", node_icon_items_ACTION_TWEAK}, {"PMARKER_ACT", node_icon_items_PMARKER_ACT}, {"PMARKER_SEL", node_icon_items_PMARKER_SEL}, {"PMARKER", node_icon_items_PMARKER}, {"MARKER_HLT", node_icon_items_MARKER_HLT}, {"MARKER", node_icon_items_MARKER}, {"SPACE2", node_icon_items_SPACE2}, {"SPACE3", node_icon_items_SPACE3}, {"KEYINGSET", node_icon_items_KEYINGSET}, {"KEY_DEHLT", node_icon_items_KEY_DEHLT}, {"KEY_HLT", node_icon_items_KEY_HLT}, {"MUTE_IPO_OFF", node_icon_items_MUTE_IPO_OFF}, {"MUTE_IPO_ON", node_icon_items_MUTE_IPO_ON}, {"VISIBLE_IPO_OFF", node_icon_items_VISIBLE_IPO_OFF}, {"VISIBLE_IPO_ON", node_icon_items_VISIBLE_IPO_ON}, {"DRIVER", node_icon_items_DRIVER}, {"SOLO_OFF", node_icon_items_SOLO_OFF}, {"SOLO_ON", node_icon_items_SOLO_ON}, {"FRAME_PREV", node_icon_items_FRAME_PREV}, {"FRAME_NEXT", node_icon_items_FRAME_NEXT}, {"NLA_PUSHDOWN", node_icon_items_NLA_PUSHDOWN}, {"IPO_CONSTANT", node_icon_items_IPO_CONSTANT}, {"IPO_LINEAR", node_icon_items_IPO_LINEAR}, {"IPO_BEZIER", node_icon_items_IPO_BEZIER}, {"IPO_SINE", node_icon_items_IPO_SINE}, {"IPO_QUAD", node_icon_items_IPO_QUAD}, {"IPO_CUBIC", node_icon_items_IPO_CUBIC}, {"IPO_QUART", node_icon_items_IPO_QUART}, {"IPO_QUINT", node_icon_items_IPO_QUINT}, {"IPO_EXPO", node_icon_items_IPO_EXPO}, {"IPO_CIRC", node_icon_items_IPO_CIRC}, {"IPO_BOUNCE", node_icon_items_IPO_BOUNCE}, {"IPO_ELASTIC", node_icon_items_IPO_ELASTIC}, {"IPO_BACK", node_icon_items_IPO_BACK}, {"IPO_EASE_IN", node_icon_items_IPO_EASE_IN}, {"IPO_EASE_OUT", node_icon_items_IPO_EASE_OUT}, {"IPO_EASE_IN_OUT", node_icon_items_IPO_EASE_IN_OUT}, {"VERTEXSEL", node_icon_items_VERTEXSEL}, {"EDGESEL", node_icon_items_EDGESEL}, {"FACESEL", node_icon_items_FACESEL}, {"LOOPSEL", node_icon_items_LOOPSEL}, {"ROTATE", node_icon_items_ROTATE}, {"CURSOR", node_icon_items_CURSOR}, {"ROTATECOLLECTION", node_icon_items_ROTATECOLLECTION}, {"ROTATECENTER", node_icon_items_ROTATECENTER}, {"ROTACTIVE", node_icon_items_ROTACTIVE}, {"ALIGN", node_icon_items_ALIGN}, {"SMOOTHCURVE", node_icon_items_SMOOTHCURVE}, {"SPHERECURVE", node_icon_items_SPHERECURVE}, {"ROOTCURVE", node_icon_items_ROOTCURVE}, {"SHARPCURVE", node_icon_items_SHARPCURVE}, {"LINCURVE", node_icon_items_LINCURVE}, {"NOCURVE", node_icon_items_NOCURVE}, {"RNDCURVE", node_icon_items_RNDCURVE}, {"PROP_OFF", node_icon_items_PROP_OFF}, {"PROP_ON", node_icon_items_PROP_ON}, {"PROP_CON", node_icon_items_PROP_CON}, {"SCULPT_DYNTOPO", node_icon_items_SCULPT_DYNTOPO}, {"PARTICLE_POINT", node_icon_items_PARTICLE_POINT}, {"PARTICLE_TIP", node_icon_items_PARTICLE_TIP}, {"PARTICLE_PATH", node_icon_items_PARTICLE_PATH}, {"MAN_TRANS", node_icon_items_MAN_TRANS}, {"MAN_ROT", node_icon_items_MAN_ROT}, {"MAN_SCALE", node_icon_items_MAN_SCALE}, {"MANIPUL", node_icon_items_MANIPUL}, {"SNAP_OFF", node_icon_items_SNAP_OFF}, {"SNAP_ON", node_icon_items_SNAP_ON}, {"SNAP_NORMAL", node_icon_items_SNAP_NORMAL}, {"SNAP_INCREMENT", node_icon_items_SNAP_INCREMENT}, {"SNAP_VERTEX", node_icon_items_SNAP_VERTEX}, {"SNAP_EDGE", node_icon_items_SNAP_EDGE}, {"SNAP_FACE", node_icon_items_SNAP_FACE}, {"SNAP_VOLUME", node_icon_items_SNAP_VOLUME}, {"STICKY_UVS_LOC", node_icon_items_STICKY_UVS_LOC}, {"STICKY_UVS_DISABLE", node_icon_items_STICKY_UVS_DISABLE}, {"STICKY_UVS_VERT", node_icon_items_STICKY_UVS_VERT}, {"CLIPUV_DEHLT", node_icon_items_CLIPUV_DEHLT}, {"CLIPUV_HLT", node_icon_items_CLIPUV_HLT}, {"SNAP_PEEL_OBJECT", node_icon_items_SNAP_PEEL_OBJECT}, {"GRID", node_icon_items_GRID}, {"PASTEDOWN", node_icon_items_PASTEDOWN}, {"COPYDOWN", node_icon_items_COPYDOWN}, {"PASTEFLIPUP", node_icon_items_PASTEFLIPUP}, {"PASTEFLIPDOWN", node_icon_items_PASTEFLIPDOWN}, {"SNAP_SURFACE", node_icon_items_SNAP_SURFACE}, {"AUTOMERGE_ON", node_icon_items_AUTOMERGE_ON}, {"AUTOMERGE_OFF", node_icon_items_AUTOMERGE_OFF}, {"RETOPO", node_icon_items_RETOPO}, {"UV_VERTEXSEL", node_icon_items_UV_VERTEXSEL}, {"UV_EDGESEL", node_icon_items_UV_EDGESEL}, {"UV_FACESEL", node_icon_items_UV_FACESEL}, {"UV_ISLANDSEL", node_icon_items_UV_ISLANDSEL}, {"UV_SYNC_SELECT", node_icon_items_UV_SYNC_SELECT}, {"BBOX", node_icon_items_BBOX}, {"WIRE", node_icon_items_WIRE}, {"SOLID", node_icon_items_SOLID}, {"SMOOTH", node_icon_items_SMOOTH}, {"POTATO", node_icon_items_POTATO}, {"ORTHO", node_icon_items_ORTHO}, {"LOCKVIEW_OFF", node_icon_items_LOCKVIEW_OFF}, {"LOCKVIEW_ON", node_icon_items_LOCKVIEW_ON}, {"AXIS_SIDE", node_icon_items_AXIS_SIDE}, {"AXIS_FRONT", node_icon_items_AXIS_FRONT}, {"AXIS_TOP", node_icon_items_AXIS_TOP}, {"NDOF_DOM", node_icon_items_NDOF_DOM}, {"NDOF_TURN", node_icon_items_NDOF_TURN}, {"NDOF_FLY", node_icon_items_NDOF_FLY}, {"NDOF_TRANS", node_icon_items_NDOF_TRANS}, {"LAYER_USED", node_icon_items_LAYER_USED}, {"LAYER_ACTIVE", node_icon_items_LAYER_ACTIVE}, {"SORTALPHA", node_icon_items_SORTALPHA}, {"SORTBYEXT", node_icon_items_SORTBYEXT}, {"SORTTIME", node_icon_items_SORTTIME}, {"SORTSIZE", node_icon_items_SORTSIZE}, {"LONGDISPLAY", node_icon_items_LONGDISPLAY}, {"SHORTDISPLAY", node_icon_items_SHORTDISPLAY}, {"GHOST", node_icon_items_GHOST}, {"IMGDISPLAY", node_icon_items_IMGDISPLAY}, {"SAVE_AS", node_icon_items_SAVE_AS}, {"SAVE_COPY", node_icon_items_SAVE_COPY}, {"BOOKMARKS", node_icon_items_BOOKMARKS}, {"FONTPREVIEW", node_icon_items_FONTPREVIEW}, {"FILTER", node_icon_items_FILTER}, {"NEWFOLDER", node_icon_items_NEWFOLDER}, {"OPEN_RECENT", node_icon_items_OPEN_RECENT}, {"FILE_PARENT", node_icon_items_FILE_PARENT}, {"FILE_REFRESH", node_icon_items_FILE_REFRESH}, {"FILE_FOLDER", node_icon_items_FILE_FOLDER}, {"FILE_BLANK", node_icon_items_FILE_BLANK}, {"FILE_BLEND", node_icon_items_FILE_BLEND}, {"FILE_IMAGE", node_icon_items_FILE_IMAGE}, {"FILE_MOVIE", node_icon_items_FILE_MOVIE}, {"FILE_SCRIPT", node_icon_items_FILE_SCRIPT}, {"FILE_SOUND", node_icon_items_FILE_SOUND}, {"FILE_FONT", node_icon_items_FILE_FONT}, {"FILE_TEXT", node_icon_items_FILE_TEXT}, {"RECOVER_AUTO", node_icon_items_RECOVER_AUTO}, {"SAVE_PREFS", node_icon_items_SAVE_PREFS}, {"LINK_BLEND", node_icon_items_LINK_BLEND}, {"APPEND_BLEND", node_icon_items_APPEND_BLEND}, {"IMPORT", node_icon_items_IMPORT}, {"EXPORT", node_icon_items_EXPORT}, {"EXTERNAL_DATA", node_icon_items_EXTERNAL_DATA}, {"LOAD_FACTORY", node_icon_items_LOAD_FACTORY}, {"LOOP_BACK", node_icon_items_LOOP_BACK}, {"LOOP_FORWARDS", node_icon_items_LOOP_FORWARDS}, {"BACK", node_icon_items_BACK}, {"FORWARD", node_icon_items_FORWARD}, {"FILE_HIDDEN", node_icon_items_FILE_HIDDEN}, {"FILE_BACKUP", node_icon_items_FILE_BACKUP}, {"DISK_DRIVE", node_icon_items_DISK_DRIVE}, {"MATPLANE", node_icon_items_MATPLANE}, {"MATSPHERE", node_icon_items_MATSPHERE}, {"MATCUBE", node_icon_items_MATCUBE}, {"MONKEY", node_icon_items_MONKEY}, {"HAIR", node_icon_items_HAIR}, {"ALIASED", node_icon_items_ALIASED}, {"ANTIALIASED", node_icon_items_ANTIALIASED}, {"MAT_SPHERE_SKY", node_icon_items_MAT_SPHERE_SKY}, {"WORDWRAP_OFF", node_icon_items_WORDWRAP_OFF}, {"WORDWRAP_ON", node_icon_items_WORDWRAP_ON}, {"SYNTAX_OFF", node_icon_items_SYNTAX_OFF}, {"SYNTAX_ON", node_icon_items_SYNTAX_ON}, {"LINENUMBERS_OFF", node_icon_items_LINENUMBERS_OFF}, {"LINENUMBERS_ON", node_icon_items_LINENUMBERS_ON}, {"SCRIPTPLUGINS", node_icon_items_SCRIPTPLUGINS}, {"SEQ_SEQUENCER", node_icon_items_SEQ_SEQUENCER}, {"SEQ_PREVIEW", node_icon_items_SEQ_PREVIEW}, {"SEQ_LUMA_WAVEFORM", node_icon_items_SEQ_LUMA_WAVEFORM}, {"SEQ_CHROMA_SCOPE", node_icon_items_SEQ_CHROMA_SCOPE}, {"SEQ_HISTOGRAM", node_icon_items_SEQ_HISTOGRAM}, {"SEQ_SPLITVIEW", node_icon_items_SEQ_SPLITVIEW}, {"IMAGE_RGB", node_icon_items_IMAGE_RGB}, {"IMAGE_RGB_ALPHA", node_icon_items_IMAGE_RGB_ALPHA}, {"IMAGE_ALPHA", node_icon_items_IMAGE_ALPHA}, {"IMAGE_ZDEPTH", node_icon_items_IMAGE_ZDEPTH}, {"IMAGEFILE", node_icon_items_IMAGEFILE}, {"BRUSH_ADD", node_icon_items_BRUSH_ADD}, {"BRUSH_BLOB", node_icon_items_BRUSH_BLOB}, {"BRUSH_BLUR", node_icon_items_BRUSH_BLUR}, {"BRUSH_CLAY", node_icon_items_BRUSH_CLAY}, {"BRUSH_CLAY_STRIPS", node_icon_items_BRUSH_CLAY_STRIPS}, {"BRUSH_CLONE", node_icon_items_BRUSH_CLONE}, {"BRUSH_CREASE", node_icon_items_BRUSH_CREASE}, {"BRUSH_DARKEN", node_icon_items_BRUSH_DARKEN}, {"BRUSH_FILL", node_icon_items_BRUSH_FILL}, {"BRUSH_FLATTEN", node_icon_items_BRUSH_FLATTEN}, {"BRUSH_GRAB", node_icon_items_BRUSH_GRAB}, {"BRUSH_INFLATE", node_icon_items_BRUSH_INFLATE}, {"BRUSH_LAYER", node_icon_items_BRUSH_LAYER}, {"BRUSH_LIGHTEN", node_icon_items_BRUSH_LIGHTEN}, {"BRUSH_MASK", node_icon_items_BRUSH_MASK}, {"BRUSH_MIX", node_icon_items_BRUSH_MIX}, {"BRUSH_MULTIPLY", node_icon_items_BRUSH_MULTIPLY}, {"BRUSH_NUDGE", node_icon_items_BRUSH_NUDGE}, {"BRUSH_PINCH", node_icon_items_BRUSH_PINCH}, {"BRUSH_SCRAPE", node_icon_items_BRUSH_SCRAPE}, {"BRUSH_SCULPT_DRAW", node_icon_items_BRUSH_SCULPT_DRAW}, {"BRUSH_SMEAR", node_icon_items_BRUSH_SMEAR}, {"BRUSH_SMOOTH", node_icon_items_BRUSH_SMOOTH}, {"BRUSH_SNAKE_HOOK", node_icon_items_BRUSH_SNAKE_HOOK}, {"BRUSH_SOFTEN", node_icon_items_BRUSH_SOFTEN}, {"BRUSH_SUBTRACT", node_icon_items_BRUSH_SUBTRACT}, {"BRUSH_TEXDRAW", node_icon_items_BRUSH_TEXDRAW}, {"BRUSH_TEXFILL", node_icon_items_BRUSH_TEXFILL}, {"BRUSH_TEXMASK", node_icon_items_BRUSH_TEXMASK}, {"BRUSH_THUMB", node_icon_items_BRUSH_THUMB}, {"BRUSH_ROTATE", node_icon_items_BRUSH_ROTATE}, {"BRUSH_VERTEXDRAW", node_icon_items_BRUSH_VERTEXDRAW}, {"MATCAP_01", node_icon_items_MATCAP_01}, {"MATCAP_02", node_icon_items_MATCAP_02}, {"MATCAP_03", node_icon_items_MATCAP_03}, {"MATCAP_04", node_icon_items_MATCAP_04}, {"MATCAP_05", node_icon_items_MATCAP_05}, {"MATCAP_06", node_icon_items_MATCAP_06}, {"MATCAP_07", node_icon_items_MATCAP_07}, {"MATCAP_08", node_icon_items_MATCAP_08}, {"MATCAP_09", node_icon_items_MATCAP_09}, {"MATCAP_10", node_icon_items_MATCAP_10}, {"MATCAP_11", node_icon_items_MATCAP_11}, {"MATCAP_12", node_icon_items_MATCAP_12}, {"MATCAP_13", node_icon_items_MATCAP_13}, {"MATCAP_14", node_icon_items_MATCAP_14}, {"MATCAP_15", node_icon_items_MATCAP_15}, {"MATCAP_16", node_icon_items_MATCAP_16}, {"MATCAP_17", node_icon_items_MATCAP_17}, {"MATCAP_18", node_icon_items_MATCAP_18}, {"MATCAP_19", node_icon_items_MATCAP_19}, {"MATCAP_20", node_icon_items_MATCAP_20}, {"MATCAP_21", node_icon_items_MATCAP_21}, {"MATCAP_22", node_icon_items_MATCAP_22}, {"MATCAP_23", node_icon_items_MATCAP_23}, {"MATCAP_24", node_icon_items_MATCAP_24}};
	};

	std::map<int, std::string> create_node_icon_items_to_string() {
		return {{node_icon_items_NONE, "NONE"}, {node_icon_items_QUESTION, "QUESTION"}, {node_icon_items_ERROR, "ERROR"}, {node_icon_items_CANCEL, "CANCEL"}, {node_icon_items_TRIA_RIGHT, "TRIA_RIGHT"}, {node_icon_items_TRIA_DOWN, "TRIA_DOWN"}, {node_icon_items_TRIA_LEFT, "TRIA_LEFT"}, {node_icon_items_TRIA_UP, "TRIA_UP"}, {node_icon_items_ARROW_LEFTRIGHT, "ARROW_LEFTRIGHT"}, {node_icon_items_PLUS, "PLUS"}, {node_icon_items_DISCLOSURE_TRI_DOWN, "DISCLOSURE_TRI_DOWN"}, {node_icon_items_DISCLOSURE_TRI_RIGHT, "DISCLOSURE_TRI_RIGHT"}, {node_icon_items_RADIOBUT_OFF, "RADIOBUT_OFF"}, {node_icon_items_RADIOBUT_ON, "RADIOBUT_ON"}, {node_icon_items_MENU_PANEL, "MENU_PANEL"}, {node_icon_items_BLENDER, "BLENDER"}, {node_icon_items_GRIP, "GRIP"}, {node_icon_items_DOT, "DOT"}, {node_icon_items_COLLAPSEMENU, "COLLAPSEMENU"}, {node_icon_items_X, "X"}, {node_icon_items_GO_LEFT, "GO_LEFT"}, {node_icon_items_PLUG, "PLUG"}, {node_icon_items_UI, "UI"}, {node_icon_items_NODE, "NODE"}, {node_icon_items_NODE_SEL, "NODE_SEL"}, {node_icon_items_FULLSCREEN, "FULLSCREEN"}, {node_icon_items_SPLITSCREEN, "SPLITSCREEN"}, {node_icon_items_RIGHTARROW_THIN, "RIGHTARROW_THIN"}, {node_icon_items_BORDERMOVE, "BORDERMOVE"}, {node_icon_items_VIEWZOOM, "VIEWZOOM"}, {node_icon_items_ZOOMIN, "ZOOMIN"}, {node_icon_items_ZOOMOUT, "ZOOMOUT"}, {node_icon_items_PANEL_CLOSE, "PANEL_CLOSE"}, {node_icon_items_COPY_ID, "COPY_ID"}, {node_icon_items_EYEDROPPER, "EYEDROPPER"}, {node_icon_items_LINK_AREA, "LINK_AREA"}, {node_icon_items_AUTO, "AUTO"}, {node_icon_items_CHECKBOX_DEHLT, "CHECKBOX_DEHLT"}, {node_icon_items_CHECKBOX_HLT, "CHECKBOX_HLT"}, {node_icon_items_UNLOCKED, "UNLOCKED"}, {node_icon_items_LOCKED, "LOCKED"}, {node_icon_items_UNPINNED, "UNPINNED"}, {node_icon_items_PINNED, "PINNED"}, {node_icon_items_SCREEN_BACK, "SCREEN_BACK"}, {node_icon_items_RIGHTARROW, "RIGHTARROW"}, {node_icon_items_DOWNARROW_HLT, "DOWNARROW_HLT"}, {node_icon_items_DOTSUP, "DOTSUP"}, {node_icon_items_DOTSDOWN, "DOTSDOWN"}, {node_icon_items_LINK, "LINK"}, {node_icon_items_INLINK, "INLINK"}, {node_icon_items_PLUGIN, "PLUGIN"}, {node_icon_items_HELP, "HELP"}, {node_icon_items_GHOST_ENABLED, "GHOST_ENABLED"}, {node_icon_items_COLOR, "COLOR"}, {node_icon_items_LINKED, "LINKED"}, {node_icon_items_UNLINKED, "UNLINKED"}, {node_icon_items_HAND, "HAND"}, {node_icon_items_ZOOM_ALL, "ZOOM_ALL"}, {node_icon_items_ZOOM_SELECTED, "ZOOM_SELECTED"}, {node_icon_items_ZOOM_PREVIOUS, "ZOOM_PREVIOUS"}, {node_icon_items_ZOOM_IN, "ZOOM_IN"}, {node_icon_items_ZOOM_OUT, "ZOOM_OUT"}, {node_icon_items_RENDER_REGION, "RENDER_REGION"}, {node_icon_items_BORDER_RECT, "BORDER_RECT"}, {node_icon_items_BORDER_LASSO, "BORDER_LASSO"}, {node_icon_items_FREEZE, "FREEZE"}, {node_icon_items_STYLUS_PRESSURE, "STYLUS_PRESSURE"}, {node_icon_items_GHOST_DISABLED, "GHOST_DISABLED"}, {node_icon_items_NEW, "NEW"}, {node_icon_items_FILE_TICK, "FILE_TICK"}, {node_icon_items_QUIT, "QUIT"}, {node_icon_items_URL, "URL"}, {node_icon_items_RECOVER_LAST, "RECOVER_LAST"}, {node_icon_items_FULLSCREEN_ENTER, "FULLSCREEN_ENTER"}, {node_icon_items_FULLSCREEN_EXIT, "FULLSCREEN_EXIT"}, {node_icon_items_BLANK1, "BLANK1"}, {node_icon_items_LAMP, "LAMP"}, {node_icon_items_MATERIAL, "MATERIAL"}, {node_icon_items_TEXTURE, "TEXTURE"}, {node_icon_items_ANIM, "ANIM"}, {node_icon_items_WORLD, "WORLD"}, {node_icon_items_SCENE, "SCENE"}, {node_icon_items_EDIT, "EDIT"}, {node_icon_items_GAME, "GAME"}, {node_icon_items_RADIO, "RADIO"}, {node_icon_items_SCRIPT, "SCRIPT"}, {node_icon_items_PARTICLES, "PARTICLES"}, {node_icon_items_PHYSICS, "PHYSICS"}, {node_icon_items_SPEAKER, "SPEAKER"}, {node_icon_items_TEXTURE_SHADED, "TEXTURE_SHADED"}, {node_icon_items_VIEW3D, "VIEW3D"}, {node_icon_items_IPO, "IPO"}, {node_icon_items_OOPS, "OOPS"}, {node_icon_items_BUTS, "BUTS"}, {node_icon_items_FILESEL, "FILESEL"}, {node_icon_items_IMAGE_COL, "IMAGE_COL"}, {node_icon_items_INFO, "INFO"}, {node_icon_items_SEQUENCE, "SEQUENCE"}, {node_icon_items_TEXT, "TEXT"}, {node_icon_items_IMASEL, "IMASEL"}, {node_icon_items_SOUND, "SOUND"}, {node_icon_items_ACTION, "ACTION"}, {node_icon_items_NLA, "NLA"}, {node_icon_items_SCRIPTWIN, "SCRIPTWIN"}, {node_icon_items_TIME, "TIME"}, {node_icon_items_NODETREE, "NODETREE"}, {node_icon_items_LOGIC, "LOGIC"}, {node_icon_items_CONSOLE, "CONSOLE"}, {node_icon_items_PREFERENCES, "PREFERENCES"}, {node_icon_items_CLIP, "CLIP"}, {node_icon_items_ASSET_MANAGER, "ASSET_MANAGER"}, {node_icon_items_OBJECT_DATAMODE, "OBJECT_DATAMODE"}, {node_icon_items_EDITMODE_HLT, "EDITMODE_HLT"}, {node_icon_items_FACESEL_HLT, "FACESEL_HLT"}, {node_icon_items_VPAINT_HLT, "VPAINT_HLT"}, {node_icon_items_TPAINT_HLT, "TPAINT_HLT"}, {node_icon_items_WPAINT_HLT, "WPAINT_HLT"}, {node_icon_items_SCULPTMODE_HLT, "SCULPTMODE_HLT"}, {node_icon_items_POSE_HLT, "POSE_HLT"}, {node_icon_items_PARTICLEMODE, "PARTICLEMODE"}, {node_icon_items_LIGHTPAINT, "LIGHTPAINT"}, {node_icon_items_SCENE_DATA, "SCENE_DATA"}, {node_icon_items_RENDERLAYERS, "RENDERLAYERS"}, {node_icon_items_WORLD_DATA, "WORLD_DATA"}, {node_icon_items_OBJECT_DATA, "OBJECT_DATA"}, {node_icon_items_MESH_DATA, "MESH_DATA"}, {node_icon_items_CURVE_DATA, "CURVE_DATA"}, {node_icon_items_META_DATA, "META_DATA"}, {node_icon_items_LATTICE_DATA, "LATTICE_DATA"}, {node_icon_items_LAMP_DATA, "LAMP_DATA"}, {node_icon_items_MATERIAL_DATA, "MATERIAL_DATA"}, {node_icon_items_TEXTURE_DATA, "TEXTURE_DATA"}, {node_icon_items_ANIM_DATA, "ANIM_DATA"}, {node_icon_items_CAMERA_DATA, "CAMERA_DATA"}, {node_icon_items_PARTICLE_DATA, "PARTICLE_DATA"}, {node_icon_items_LIBRARY_DATA_DIRECT, "LIBRARY_DATA_DIRECT"}, {node_icon_items_GROUP, "GROUP"}, {node_icon_items_ARMATURE_DATA, "ARMATURE_DATA"}, {node_icon_items_POSE_DATA, "POSE_DATA"}, {node_icon_items_BONE_DATA, "BONE_DATA"}, {node_icon_items_CONSTRAINT, "CONSTRAINT"}, {node_icon_items_SHAPEKEY_DATA, "SHAPEKEY_DATA"}, {node_icon_items_CONSTRAINT_BONE, "CONSTRAINT_BONE"}, {node_icon_items_CAMERA_STEREO, "CAMERA_STEREO"}, {node_icon_items_PACKAGE, "PACKAGE"}, {node_icon_items_UGLYPACKAGE, "UGLYPACKAGE"}, {node_icon_items_BRUSH_DATA, "BRUSH_DATA"}, {node_icon_items_IMAGE_DATA, "IMAGE_DATA"}, {node_icon_items_FILE, "FILE"}, {node_icon_items_FCURVE, "FCURVE"}, {node_icon_items_FONT_DATA, "FONT_DATA"}, {node_icon_items_RENDER_RESULT, "RENDER_RESULT"}, {node_icon_items_SURFACE_DATA, "SURFACE_DATA"}, {node_icon_items_EMPTY_DATA, "EMPTY_DATA"}, {node_icon_items_SETTINGS, "SETTINGS"}, {node_icon_items_RENDER_ANIMATION, "RENDER_ANIMATION"}, {node_icon_items_RENDER_STILL, "RENDER_STILL"}, {node_icon_items_LIBRARY_DATA_BROKEN, "LIBRARY_DATA_BROKEN"}, {node_icon_items_BOIDS, "BOIDS"}, {node_icon_items_STRANDS, "STRANDS"}, {node_icon_items_LIBRARY_DATA_INDIRECT, "LIBRARY_DATA_INDIRECT"}, {node_icon_items_GREASEPENCIL, "GREASEPENCIL"}, {node_icon_items_LINE_DATA, "LINE_DATA"}, {node_icon_items_GROUP_BONE, "GROUP_BONE"}, {node_icon_items_GROUP_VERTEX, "GROUP_VERTEX"}, {node_icon_items_GROUP_VCOL, "GROUP_VCOL"}, {node_icon_items_GROUP_UVS, "GROUP_UVS"}, {node_icon_items_RNA, "RNA"}, {node_icon_items_RNA_ADD, "RNA_ADD"}, {node_icon_items_OUTLINER_OB_EMPTY, "OUTLINER_OB_EMPTY"}, {node_icon_items_OUTLINER_OB_MESH, "OUTLINER_OB_MESH"}, {node_icon_items_OUTLINER_OB_CURVE, "OUTLINER_OB_CURVE"}, {node_icon_items_OUTLINER_OB_LATTICE, "OUTLINER_OB_LATTICE"}, {node_icon_items_OUTLINER_OB_META, "OUTLINER_OB_META"}, {node_icon_items_OUTLINER_OB_LAMP, "OUTLINER_OB_LAMP"}, {node_icon_items_OUTLINER_OB_CAMERA, "OUTLINER_OB_CAMERA"}, {node_icon_items_OUTLINER_OB_ARMATURE, "OUTLINER_OB_ARMATURE"}, {node_icon_items_OUTLINER_OB_FONT, "OUTLINER_OB_FONT"}, {node_icon_items_OUTLINER_OB_SURFACE, "OUTLINER_OB_SURFACE"}, {node_icon_items_OUTLINER_OB_SPEAKER, "OUTLINER_OB_SPEAKER"}, {node_icon_items_RESTRICT_VIEW_OFF, "RESTRICT_VIEW_OFF"}, {node_icon_items_RESTRICT_VIEW_ON, "RESTRICT_VIEW_ON"}, {node_icon_items_RESTRICT_SELECT_OFF, "RESTRICT_SELECT_OFF"}, {node_icon_items_RESTRICT_SELECT_ON, "RESTRICT_SELECT_ON"}, {node_icon_items_RESTRICT_RENDER_OFF, "RESTRICT_RENDER_OFF"}, {node_icon_items_RESTRICT_RENDER_ON, "RESTRICT_RENDER_ON"}, {node_icon_items_OUTLINER_DATA_EMPTY, "OUTLINER_DATA_EMPTY"}, {node_icon_items_OUTLINER_DATA_MESH, "OUTLINER_DATA_MESH"}, {node_icon_items_OUTLINER_DATA_CURVE, "OUTLINER_DATA_CURVE"}, {node_icon_items_OUTLINER_DATA_LATTICE, "OUTLINER_DATA_LATTICE"}, {node_icon_items_OUTLINER_DATA_META, "OUTLINER_DATA_META"}, {node_icon_items_OUTLINER_DATA_LAMP, "OUTLINER_DATA_LAMP"}, {node_icon_items_OUTLINER_DATA_CAMERA, "OUTLINER_DATA_CAMERA"}, {node_icon_items_OUTLINER_DATA_ARMATURE, "OUTLINER_DATA_ARMATURE"}, {node_icon_items_OUTLINER_DATA_FONT, "OUTLINER_DATA_FONT"}, {node_icon_items_OUTLINER_DATA_SURFACE, "OUTLINER_DATA_SURFACE"}, {node_icon_items_OUTLINER_DATA_SPEAKER, "OUTLINER_DATA_SPEAKER"}, {node_icon_items_OUTLINER_DATA_POSE, "OUTLINER_DATA_POSE"}, {node_icon_items_MESH_PLANE, "MESH_PLANE"}, {node_icon_items_MESH_CUBE, "MESH_CUBE"}, {node_icon_items_MESH_CIRCLE, "MESH_CIRCLE"}, {node_icon_items_MESH_UVSPHERE, "MESH_UVSPHERE"}, {node_icon_items_MESH_ICOSPHERE, "MESH_ICOSPHERE"}, {node_icon_items_MESH_GRID, "MESH_GRID"}, {node_icon_items_MESH_MONKEY, "MESH_MONKEY"}, {node_icon_items_MESH_CYLINDER, "MESH_CYLINDER"}, {node_icon_items_MESH_TORUS, "MESH_TORUS"}, {node_icon_items_MESH_CONE, "MESH_CONE"}, {node_icon_items_LAMP_POINT, "LAMP_POINT"}, {node_icon_items_LAMP_SUN, "LAMP_SUN"}, {node_icon_items_LAMP_SPOT, "LAMP_SPOT"}, {node_icon_items_LAMP_HEMI, "LAMP_HEMI"}, {node_icon_items_LAMP_AREA, "LAMP_AREA"}, {node_icon_items_META_EMPTY, "META_EMPTY"}, {node_icon_items_META_PLANE, "META_PLANE"}, {node_icon_items_META_CUBE, "META_CUBE"}, {node_icon_items_META_BALL, "META_BALL"}, {node_icon_items_META_ELLIPSOID, "META_ELLIPSOID"}, {node_icon_items_META_CAPSULE, "META_CAPSULE"}, {node_icon_items_SURFACE_NCURVE, "SURFACE_NCURVE"}, {node_icon_items_SURFACE_NCIRCLE, "SURFACE_NCIRCLE"}, {node_icon_items_SURFACE_NSURFACE, "SURFACE_NSURFACE"}, {node_icon_items_SURFACE_NCYLINDER, "SURFACE_NCYLINDER"}, {node_icon_items_SURFACE_NSPHERE, "SURFACE_NSPHERE"}, {node_icon_items_SURFACE_NTORUS, "SURFACE_NTORUS"}, {node_icon_items_CURVE_BEZCURVE, "CURVE_BEZCURVE"}, {node_icon_items_CURVE_BEZCIRCLE, "CURVE_BEZCIRCLE"}, {node_icon_items_CURVE_NCURVE, "CURVE_NCURVE"}, {node_icon_items_CURVE_NCIRCLE, "CURVE_NCIRCLE"}, {node_icon_items_CURVE_PATH, "CURVE_PATH"}, {node_icon_items_COLOR_RED, "COLOR_RED"}, {node_icon_items_COLOR_GREEN, "COLOR_GREEN"}, {node_icon_items_COLOR_BLUE, "COLOR_BLUE"}, {node_icon_items_TRIA_RIGHT_BAR, "TRIA_RIGHT_BAR"}, {node_icon_items_TRIA_DOWN_BAR, "TRIA_DOWN_BAR"}, {node_icon_items_TRIA_LEFT_BAR, "TRIA_LEFT_BAR"}, {node_icon_items_TRIA_UP_BAR, "TRIA_UP_BAR"}, {node_icon_items_FORCE_FORCE, "FORCE_FORCE"}, {node_icon_items_FORCE_WIND, "FORCE_WIND"}, {node_icon_items_FORCE_VORTEX, "FORCE_VORTEX"}, {node_icon_items_FORCE_MAGNETIC, "FORCE_MAGNETIC"}, {node_icon_items_FORCE_HARMONIC, "FORCE_HARMONIC"}, {node_icon_items_FORCE_CHARGE, "FORCE_CHARGE"}, {node_icon_items_FORCE_LENNARDJONES, "FORCE_LENNARDJONES"}, {node_icon_items_FORCE_TEXTURE, "FORCE_TEXTURE"}, {node_icon_items_FORCE_CURVE, "FORCE_CURVE"}, {node_icon_items_FORCE_BOID, "FORCE_BOID"}, {node_icon_items_FORCE_TURBULENCE, "FORCE_TURBULENCE"}, {node_icon_items_FORCE_DRAG, "FORCE_DRAG"}, {node_icon_items_FORCE_SMOKEFLOW, "FORCE_SMOKEFLOW"}, {node_icon_items_MODIFIER, "MODIFIER"}, {node_icon_items_MOD_WAVE, "MOD_WAVE"}, {node_icon_items_MOD_BUILD, "MOD_BUILD"}, {node_icon_items_MOD_DECIM, "MOD_DECIM"}, {node_icon_items_MOD_MIRROR, "MOD_MIRROR"}, {node_icon_items_MOD_SOFT, "MOD_SOFT"}, {node_icon_items_MOD_SUBSURF, "MOD_SUBSURF"}, {node_icon_items_HOOK, "HOOK"}, {node_icon_items_MOD_PHYSICS, "MOD_PHYSICS"}, {node_icon_items_MOD_PARTICLES, "MOD_PARTICLES"}, {node_icon_items_MOD_BOOLEAN, "MOD_BOOLEAN"}, {node_icon_items_MOD_EDGESPLIT, "MOD_EDGESPLIT"}, {node_icon_items_MOD_ARRAY, "MOD_ARRAY"}, {node_icon_items_MOD_UVPROJECT, "MOD_UVPROJECT"}, {node_icon_items_MOD_DISPLACE, "MOD_DISPLACE"}, {node_icon_items_MOD_CURVE, "MOD_CURVE"}, {node_icon_items_MOD_LATTICE, "MOD_LATTICE"}, {node_icon_items_CONSTRAINT_DATA, "CONSTRAINT_DATA"}, {node_icon_items_MOD_ARMATURE, "MOD_ARMATURE"}, {node_icon_items_MOD_SHRINKWRAP, "MOD_SHRINKWRAP"}, {node_icon_items_MOD_CAST, "MOD_CAST"}, {node_icon_items_MOD_MESHDEFORM, "MOD_MESHDEFORM"}, {node_icon_items_MOD_BEVEL, "MOD_BEVEL"}, {node_icon_items_MOD_SMOOTH, "MOD_SMOOTH"}, {node_icon_items_MOD_SIMPLEDEFORM, "MOD_SIMPLEDEFORM"}, {node_icon_items_MOD_MASK, "MOD_MASK"}, {node_icon_items_MOD_CLOTH, "MOD_CLOTH"}, {node_icon_items_MOD_EXPLODE, "MOD_EXPLODE"}, {node_icon_items_MOD_FLUIDSIM, "MOD_FLUIDSIM"}, {node_icon_items_MOD_MULTIRES, "MOD_MULTIRES"}, {node_icon_items_MOD_SMOKE, "MOD_SMOKE"}, {node_icon_items_MOD_SOLIDIFY, "MOD_SOLIDIFY"}, {node_icon_items_MOD_SCREW, "MOD_SCREW"}, {node_icon_items_MOD_VERTEX_WEIGHT, "MOD_VERTEX_WEIGHT"}, {node_icon_items_MOD_DYNAMICPAINT, "MOD_DYNAMICPAINT"}, {node_icon_items_MOD_REMESH, "MOD_REMESH"}, {node_icon_items_MOD_OCEAN, "MOD_OCEAN"}, {node_icon_items_MOD_WARP, "MOD_WARP"}, {node_icon_items_MOD_SKIN, "MOD_SKIN"}, {node_icon_items_MOD_TRIANGULATE, "MOD_TRIANGULATE"}, {node_icon_items_MOD_WIREFRAME, "MOD_WIREFRAME"}, {node_icon_items_MOD_DATA_TRANSFER, "MOD_DATA_TRANSFER"}, {node_icon_items_MOD_NORMALEDIT, "MOD_NORMALEDIT"}, {node_icon_items_REC, "REC"}, {node_icon_items_PLAY, "PLAY"}, {node_icon_items_FF, "FF"}, {node_icon_items_REW, "REW"}, {node_icon_items_PAUSE, "PAUSE"}, {node_icon_items_PREV_KEYFRAME, "PREV_KEYFRAME"}, {node_icon_items_NEXT_KEYFRAME, "NEXT_KEYFRAME"}, {node_icon_items_PLAY_AUDIO, "PLAY_AUDIO"}, {node_icon_items_PLAY_REVERSE, "PLAY_REVERSE"}, {node_icon_items_PREVIEW_RANGE, "PREVIEW_RANGE"}, {node_icon_items_ACTION_TWEAK, "ACTION_TWEAK"}, {node_icon_items_PMARKER_ACT, "PMARKER_ACT"}, {node_icon_items_PMARKER_SEL, "PMARKER_SEL"}, {node_icon_items_PMARKER, "PMARKER"}, {node_icon_items_MARKER_HLT, "MARKER_HLT"}, {node_icon_items_MARKER, "MARKER"}, {node_icon_items_SPACE2, "SPACE2"}, {node_icon_items_SPACE3, "SPACE3"}, {node_icon_items_KEYINGSET, "KEYINGSET"}, {node_icon_items_KEY_DEHLT, "KEY_DEHLT"}, {node_icon_items_KEY_HLT, "KEY_HLT"}, {node_icon_items_MUTE_IPO_OFF, "MUTE_IPO_OFF"}, {node_icon_items_MUTE_IPO_ON, "MUTE_IPO_ON"}, {node_icon_items_VISIBLE_IPO_OFF, "VISIBLE_IPO_OFF"}, {node_icon_items_VISIBLE_IPO_ON, "VISIBLE_IPO_ON"}, {node_icon_items_DRIVER, "DRIVER"}, {node_icon_items_SOLO_OFF, "SOLO_OFF"}, {node_icon_items_SOLO_ON, "SOLO_ON"}, {node_icon_items_FRAME_PREV, "FRAME_PREV"}, {node_icon_items_FRAME_NEXT, "FRAME_NEXT"}, {node_icon_items_NLA_PUSHDOWN, "NLA_PUSHDOWN"}, {node_icon_items_IPO_CONSTANT, "IPO_CONSTANT"}, {node_icon_items_IPO_LINEAR, "IPO_LINEAR"}, {node_icon_items_IPO_BEZIER, "IPO_BEZIER"}, {node_icon_items_IPO_SINE, "IPO_SINE"}, {node_icon_items_IPO_QUAD, "IPO_QUAD"}, {node_icon_items_IPO_CUBIC, "IPO_CUBIC"}, {node_icon_items_IPO_QUART, "IPO_QUART"}, {node_icon_items_IPO_QUINT, "IPO_QUINT"}, {node_icon_items_IPO_EXPO, "IPO_EXPO"}, {node_icon_items_IPO_CIRC, "IPO_CIRC"}, {node_icon_items_IPO_BOUNCE, "IPO_BOUNCE"}, {node_icon_items_IPO_ELASTIC, "IPO_ELASTIC"}, {node_icon_items_IPO_BACK, "IPO_BACK"}, {node_icon_items_IPO_EASE_IN, "IPO_EASE_IN"}, {node_icon_items_IPO_EASE_OUT, "IPO_EASE_OUT"}, {node_icon_items_IPO_EASE_IN_OUT, "IPO_EASE_IN_OUT"}, {node_icon_items_VERTEXSEL, "VERTEXSEL"}, {node_icon_items_EDGESEL, "EDGESEL"}, {node_icon_items_FACESEL, "FACESEL"}, {node_icon_items_LOOPSEL, "LOOPSEL"}, {node_icon_items_ROTATE, "ROTATE"}, {node_icon_items_CURSOR, "CURSOR"}, {node_icon_items_ROTATECOLLECTION, "ROTATECOLLECTION"}, {node_icon_items_ROTATECENTER, "ROTATECENTER"}, {node_icon_items_ROTACTIVE, "ROTACTIVE"}, {node_icon_items_ALIGN, "ALIGN"}, {node_icon_items_SMOOTHCURVE, "SMOOTHCURVE"}, {node_icon_items_SPHERECURVE, "SPHERECURVE"}, {node_icon_items_ROOTCURVE, "ROOTCURVE"}, {node_icon_items_SHARPCURVE, "SHARPCURVE"}, {node_icon_items_LINCURVE, "LINCURVE"}, {node_icon_items_NOCURVE, "NOCURVE"}, {node_icon_items_RNDCURVE, "RNDCURVE"}, {node_icon_items_PROP_OFF, "PROP_OFF"}, {node_icon_items_PROP_ON, "PROP_ON"}, {node_icon_items_PROP_CON, "PROP_CON"}, {node_icon_items_SCULPT_DYNTOPO, "SCULPT_DYNTOPO"}, {node_icon_items_PARTICLE_POINT, "PARTICLE_POINT"}, {node_icon_items_PARTICLE_TIP, "PARTICLE_TIP"}, {node_icon_items_PARTICLE_PATH, "PARTICLE_PATH"}, {node_icon_items_MAN_TRANS, "MAN_TRANS"}, {node_icon_items_MAN_ROT, "MAN_ROT"}, {node_icon_items_MAN_SCALE, "MAN_SCALE"}, {node_icon_items_MANIPUL, "MANIPUL"}, {node_icon_items_SNAP_OFF, "SNAP_OFF"}, {node_icon_items_SNAP_ON, "SNAP_ON"}, {node_icon_items_SNAP_NORMAL, "SNAP_NORMAL"}, {node_icon_items_SNAP_INCREMENT, "SNAP_INCREMENT"}, {node_icon_items_SNAP_VERTEX, "SNAP_VERTEX"}, {node_icon_items_SNAP_EDGE, "SNAP_EDGE"}, {node_icon_items_SNAP_FACE, "SNAP_FACE"}, {node_icon_items_SNAP_VOLUME, "SNAP_VOLUME"}, {node_icon_items_STICKY_UVS_LOC, "STICKY_UVS_LOC"}, {node_icon_items_STICKY_UVS_DISABLE, "STICKY_UVS_DISABLE"}, {node_icon_items_STICKY_UVS_VERT, "STICKY_UVS_VERT"}, {node_icon_items_CLIPUV_DEHLT, "CLIPUV_DEHLT"}, {node_icon_items_CLIPUV_HLT, "CLIPUV_HLT"}, {node_icon_items_SNAP_PEEL_OBJECT, "SNAP_PEEL_OBJECT"}, {node_icon_items_GRID, "GRID"}, {node_icon_items_PASTEDOWN, "PASTEDOWN"}, {node_icon_items_COPYDOWN, "COPYDOWN"}, {node_icon_items_PASTEFLIPUP, "PASTEFLIPUP"}, {node_icon_items_PASTEFLIPDOWN, "PASTEFLIPDOWN"}, {node_icon_items_SNAP_SURFACE, "SNAP_SURFACE"}, {node_icon_items_AUTOMERGE_ON, "AUTOMERGE_ON"}, {node_icon_items_AUTOMERGE_OFF, "AUTOMERGE_OFF"}, {node_icon_items_RETOPO, "RETOPO"}, {node_icon_items_UV_VERTEXSEL, "UV_VERTEXSEL"}, {node_icon_items_UV_EDGESEL, "UV_EDGESEL"}, {node_icon_items_UV_FACESEL, "UV_FACESEL"}, {node_icon_items_UV_ISLANDSEL, "UV_ISLANDSEL"}, {node_icon_items_UV_SYNC_SELECT, "UV_SYNC_SELECT"}, {node_icon_items_BBOX, "BBOX"}, {node_icon_items_WIRE, "WIRE"}, {node_icon_items_SOLID, "SOLID"}, {node_icon_items_SMOOTH, "SMOOTH"}, {node_icon_items_POTATO, "POTATO"}, {node_icon_items_ORTHO, "ORTHO"}, {node_icon_items_LOCKVIEW_OFF, "LOCKVIEW_OFF"}, {node_icon_items_LOCKVIEW_ON, "LOCKVIEW_ON"}, {node_icon_items_AXIS_SIDE, "AXIS_SIDE"}, {node_icon_items_AXIS_FRONT, "AXIS_FRONT"}, {node_icon_items_AXIS_TOP, "AXIS_TOP"}, {node_icon_items_NDOF_DOM, "NDOF_DOM"}, {node_icon_items_NDOF_TURN, "NDOF_TURN"}, {node_icon_items_NDOF_FLY, "NDOF_FLY"}, {node_icon_items_NDOF_TRANS, "NDOF_TRANS"}, {node_icon_items_LAYER_USED, "LAYER_USED"}, {node_icon_items_LAYER_ACTIVE, "LAYER_ACTIVE"}, {node_icon_items_SORTALPHA, "SORTALPHA"}, {node_icon_items_SORTBYEXT, "SORTBYEXT"}, {node_icon_items_SORTTIME, "SORTTIME"}, {node_icon_items_SORTSIZE, "SORTSIZE"}, {node_icon_items_LONGDISPLAY, "LONGDISPLAY"}, {node_icon_items_SHORTDISPLAY, "SHORTDISPLAY"}, {node_icon_items_GHOST, "GHOST"}, {node_icon_items_IMGDISPLAY, "IMGDISPLAY"}, {node_icon_items_SAVE_AS, "SAVE_AS"}, {node_icon_items_SAVE_COPY, "SAVE_COPY"}, {node_icon_items_BOOKMARKS, "BOOKMARKS"}, {node_icon_items_FONTPREVIEW, "FONTPREVIEW"}, {node_icon_items_FILTER, "FILTER"}, {node_icon_items_NEWFOLDER, "NEWFOLDER"}, {node_icon_items_OPEN_RECENT, "OPEN_RECENT"}, {node_icon_items_FILE_PARENT, "FILE_PARENT"}, {node_icon_items_FILE_REFRESH, "FILE_REFRESH"}, {node_icon_items_FILE_FOLDER, "FILE_FOLDER"}, {node_icon_items_FILE_BLANK, "FILE_BLANK"}, {node_icon_items_FILE_BLEND, "FILE_BLEND"}, {node_icon_items_FILE_IMAGE, "FILE_IMAGE"}, {node_icon_items_FILE_MOVIE, "FILE_MOVIE"}, {node_icon_items_FILE_SCRIPT, "FILE_SCRIPT"}, {node_icon_items_FILE_SOUND, "FILE_SOUND"}, {node_icon_items_FILE_FONT, "FILE_FONT"}, {node_icon_items_FILE_TEXT, "FILE_TEXT"}, {node_icon_items_RECOVER_AUTO, "RECOVER_AUTO"}, {node_icon_items_SAVE_PREFS, "SAVE_PREFS"}, {node_icon_items_LINK_BLEND, "LINK_BLEND"}, {node_icon_items_APPEND_BLEND, "APPEND_BLEND"}, {node_icon_items_IMPORT, "IMPORT"}, {node_icon_items_EXPORT, "EXPORT"}, {node_icon_items_EXTERNAL_DATA, "EXTERNAL_DATA"}, {node_icon_items_LOAD_FACTORY, "LOAD_FACTORY"}, {node_icon_items_LOOP_BACK, "LOOP_BACK"}, {node_icon_items_LOOP_FORWARDS, "LOOP_FORWARDS"}, {node_icon_items_BACK, "BACK"}, {node_icon_items_FORWARD, "FORWARD"}, {node_icon_items_FILE_HIDDEN, "FILE_HIDDEN"}, {node_icon_items_FILE_BACKUP, "FILE_BACKUP"}, {node_icon_items_DISK_DRIVE, "DISK_DRIVE"}, {node_icon_items_MATPLANE, "MATPLANE"}, {node_icon_items_MATSPHERE, "MATSPHERE"}, {node_icon_items_MATCUBE, "MATCUBE"}, {node_icon_items_MONKEY, "MONKEY"}, {node_icon_items_HAIR, "HAIR"}, {node_icon_items_ALIASED, "ALIASED"}, {node_icon_items_ANTIALIASED, "ANTIALIASED"}, {node_icon_items_MAT_SPHERE_SKY, "MAT_SPHERE_SKY"}, {node_icon_items_WORDWRAP_OFF, "WORDWRAP_OFF"}, {node_icon_items_WORDWRAP_ON, "WORDWRAP_ON"}, {node_icon_items_SYNTAX_OFF, "SYNTAX_OFF"}, {node_icon_items_SYNTAX_ON, "SYNTAX_ON"}, {node_icon_items_LINENUMBERS_OFF, "LINENUMBERS_OFF"}, {node_icon_items_LINENUMBERS_ON, "LINENUMBERS_ON"}, {node_icon_items_SCRIPTPLUGINS, "SCRIPTPLUGINS"}, {node_icon_items_SEQ_SEQUENCER, "SEQ_SEQUENCER"}, {node_icon_items_SEQ_PREVIEW, "SEQ_PREVIEW"}, {node_icon_items_SEQ_LUMA_WAVEFORM, "SEQ_LUMA_WAVEFORM"}, {node_icon_items_SEQ_CHROMA_SCOPE, "SEQ_CHROMA_SCOPE"}, {node_icon_items_SEQ_HISTOGRAM, "SEQ_HISTOGRAM"}, {node_icon_items_SEQ_SPLITVIEW, "SEQ_SPLITVIEW"}, {node_icon_items_IMAGE_RGB, "IMAGE_RGB"}, {node_icon_items_IMAGE_RGB_ALPHA, "IMAGE_RGB_ALPHA"}, {node_icon_items_IMAGE_ALPHA, "IMAGE_ALPHA"}, {node_icon_items_IMAGE_ZDEPTH, "IMAGE_ZDEPTH"}, {node_icon_items_IMAGEFILE, "IMAGEFILE"}, {node_icon_items_BRUSH_ADD, "BRUSH_ADD"}, {node_icon_items_BRUSH_BLOB, "BRUSH_BLOB"}, {node_icon_items_BRUSH_BLUR, "BRUSH_BLUR"}, {node_icon_items_BRUSH_CLAY, "BRUSH_CLAY"}, {node_icon_items_BRUSH_CLAY_STRIPS, "BRUSH_CLAY_STRIPS"}, {node_icon_items_BRUSH_CLONE, "BRUSH_CLONE"}, {node_icon_items_BRUSH_CREASE, "BRUSH_CREASE"}, {node_icon_items_BRUSH_DARKEN, "BRUSH_DARKEN"}, {node_icon_items_BRUSH_FILL, "BRUSH_FILL"}, {node_icon_items_BRUSH_FLATTEN, "BRUSH_FLATTEN"}, {node_icon_items_BRUSH_GRAB, "BRUSH_GRAB"}, {node_icon_items_BRUSH_INFLATE, "BRUSH_INFLATE"}, {node_icon_items_BRUSH_LAYER, "BRUSH_LAYER"}, {node_icon_items_BRUSH_LIGHTEN, "BRUSH_LIGHTEN"}, {node_icon_items_BRUSH_MASK, "BRUSH_MASK"}, {node_icon_items_BRUSH_MIX, "BRUSH_MIX"}, {node_icon_items_BRUSH_MULTIPLY, "BRUSH_MULTIPLY"}, {node_icon_items_BRUSH_NUDGE, "BRUSH_NUDGE"}, {node_icon_items_BRUSH_PINCH, "BRUSH_PINCH"}, {node_icon_items_BRUSH_SCRAPE, "BRUSH_SCRAPE"}, {node_icon_items_BRUSH_SCULPT_DRAW, "BRUSH_SCULPT_DRAW"}, {node_icon_items_BRUSH_SMEAR, "BRUSH_SMEAR"}, {node_icon_items_BRUSH_SMOOTH, "BRUSH_SMOOTH"}, {node_icon_items_BRUSH_SNAKE_HOOK, "BRUSH_SNAKE_HOOK"}, {node_icon_items_BRUSH_SOFTEN, "BRUSH_SOFTEN"}, {node_icon_items_BRUSH_SUBTRACT, "BRUSH_SUBTRACT"}, {node_icon_items_BRUSH_TEXDRAW, "BRUSH_TEXDRAW"}, {node_icon_items_BRUSH_TEXFILL, "BRUSH_TEXFILL"}, {node_icon_items_BRUSH_TEXMASK, "BRUSH_TEXMASK"}, {node_icon_items_BRUSH_THUMB, "BRUSH_THUMB"}, {node_icon_items_BRUSH_ROTATE, "BRUSH_ROTATE"}, {node_icon_items_BRUSH_VERTEXDRAW, "BRUSH_VERTEXDRAW"}, {node_icon_items_MATCAP_01, "MATCAP_01"}, {node_icon_items_MATCAP_02, "MATCAP_02"}, {node_icon_items_MATCAP_03, "MATCAP_03"}, {node_icon_items_MATCAP_04, "MATCAP_04"}, {node_icon_items_MATCAP_05, "MATCAP_05"}, {node_icon_items_MATCAP_06, "MATCAP_06"}, {node_icon_items_MATCAP_07, "MATCAP_07"}, {node_icon_items_MATCAP_08, "MATCAP_08"}, {node_icon_items_MATCAP_09, "MATCAP_09"}, {node_icon_items_MATCAP_10, "MATCAP_10"}, {node_icon_items_MATCAP_11, "MATCAP_11"}, {node_icon_items_MATCAP_12, "MATCAP_12"}, {node_icon_items_MATCAP_13, "MATCAP_13"}, {node_icon_items_MATCAP_14, "MATCAP_14"}, {node_icon_items_MATCAP_15, "MATCAP_15"}, {node_icon_items_MATCAP_16, "MATCAP_16"}, {node_icon_items_MATCAP_17, "MATCAP_17"}, {node_icon_items_MATCAP_18, "MATCAP_18"}, {node_icon_items_MATCAP_19, "MATCAP_19"}, {node_icon_items_MATCAP_20, "MATCAP_20"}, {node_icon_items_MATCAP_21, "MATCAP_21"}, {node_icon_items_MATCAP_22, "MATCAP_22"}, {node_icon_items_MATCAP_23, "MATCAP_23"}, {node_icon_items_MATCAP_24, "MATCAP_24"}};
	};

	const std::map<std::string, int> string_to_node_icon_items = create_string_to_node_icon_items();
	const std::map<int, std::string> node_icon_items_to_string = create_node_icon_items_to_string();

	node_icon_items_enum bl_icon() {
		STRING_TYPE_GETTER("bl_icon", static_cast<node_icon_items_enum>(string_to_node_icon_items.at(resstr)))
	}

	void bl_icon(node_icon_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_icon", node_icon_items_to_string.at(value))
	}

	void interface_update(Context context) {
		PYTHON_FUNCTION_ARGS_CALL("interface_update", "O", context.get_pyobjref())
	}

};

class NodeSocketStandard : public NodeSocket {
public:
	NodeSocketStandard(PyObject* pyobj) : NodeSocket(pyobj) {}
	NodeSocketStandard() : NodeSocket(0) { }

	void draw(Context context, UILayout layout, Node node, const std::string text);

	VFLOAT4 draw_color(Context context, Node node) {
		PYTHON_FUNCTION_ARGS_CALL("draw_color", "OO", context.get_pyobjref(), node.get_pyobjref())
		CREATE_SINGLE_PYOBJ(color)
		POD_VECTOR_TYPES_CONV(color, FLOAT, (float)PyFloat_AsDouble(item), 4)
		NONCLASS_TYPES_RETURN(color_res)
	}
};

class NodeSocketInterfaceStandard : public NodeSocketInterface {
public:
	NodeSocketInterfaceStandard(PyObject* pyobj) : NodeSocketInterface(pyobj) {}
	NodeSocketInterfaceStandard() : NodeSocketInterface(0) { }

	enum node_socket_type_items_enum {
		node_socket_type_items_CUSTOM = -1,	
		node_socket_type_items_VALUE = 0,	
		node_socket_type_items_INT = 6,	
		node_socket_type_items_BOOLEAN = 4,	
		node_socket_type_items_VECTOR = 1,	
		node_socket_type_items_STRING = 7,	
		node_socket_type_items_RGBA = 2,	
		node_socket_type_items_SHADER = 3	
	};

	std::map<std::string, int> create_string_to_node_socket_type_items() {
		return {{"CUSTOM", node_socket_type_items_CUSTOM}, {"VALUE", node_socket_type_items_VALUE}, {"INT", node_socket_type_items_INT}, {"BOOLEAN", node_socket_type_items_BOOLEAN}, {"VECTOR", node_socket_type_items_VECTOR}, {"STRING", node_socket_type_items_STRING}, {"RGBA", node_socket_type_items_RGBA}, {"SHADER", node_socket_type_items_SHADER}};
	};

	std::map<int, std::string> create_node_socket_type_items_to_string() {
		return {{node_socket_type_items_CUSTOM, "CUSTOM"}, {node_socket_type_items_VALUE, "VALUE"}, {node_socket_type_items_INT, "INT"}, {node_socket_type_items_BOOLEAN, "BOOLEAN"}, {node_socket_type_items_VECTOR, "VECTOR"}, {node_socket_type_items_STRING, "STRING"}, {node_socket_type_items_RGBA, "RGBA"}, {node_socket_type_items_SHADER, "SHADER"}};
	};

	const std::map<std::string, int> string_to_node_socket_type_items = create_string_to_node_socket_type_items();
	const std::map<int, std::string> node_socket_type_items_to_string = create_node_socket_type_items_to_string();

	node_socket_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<node_socket_type_items_enum>(string_to_node_socket_type_items.at(resstr)))
	}

	void type(node_socket_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", node_socket_type_items_to_string.at(value))
	}

	void draw(Context context, UILayout layout);

	VFLOAT4 draw_color(Context context) {
		PYTHON_FUNCTION_ARGS_CALL("draw_color", "O", context.get_pyobjref())
		CREATE_SINGLE_PYOBJ(color)
		POD_VECTOR_TYPES_CONV(color, FLOAT, (float)PyFloat_AsDouble(item), 4)
		NONCLASS_TYPES_RETURN(color_res)
	}
};

class NodeSocketFloat : public NodeSocketStandard {
public:
	NodeSocketFloat(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketFloat() : NodeSocketStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}
};

class NodeSocketInterfaceFloat : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceFloat(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceFloat() : NodeSocketInterfaceStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketFloatUnsigned : public NodeSocketStandard {
public:
	NodeSocketFloatUnsigned(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketFloatUnsigned() : NodeSocketStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}
};

class NodeSocketInterfaceFloatUnsigned : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceFloatUnsigned(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceFloatUnsigned() : NodeSocketInterfaceStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketFloatPercentage : public NodeSocketStandard {
public:
	NodeSocketFloatPercentage(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketFloatPercentage() : NodeSocketStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}
};

class NodeSocketInterfaceFloatPercentage : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceFloatPercentage(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceFloatPercentage() : NodeSocketInterfaceStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketFloatFactor : public NodeSocketStandard {
public:
	NodeSocketFloatFactor(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketFloatFactor() : NodeSocketStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}
};

class NodeSocketInterfaceFloatFactor : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceFloatFactor(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceFloatFactor() : NodeSocketInterfaceStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketFloatAngle : public NodeSocketStandard {
public:
	NodeSocketFloatAngle(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketFloatAngle() : NodeSocketStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}
};

class NodeSocketInterfaceFloatAngle : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceFloatAngle(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceFloatAngle() : NodeSocketInterfaceStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketFloatTime : public NodeSocketStandard {
public:
	NodeSocketFloatTime(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketFloatTime() : NodeSocketStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}
};

class NodeSocketInterfaceFloatTime : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceFloatTime(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceFloatTime() : NodeSocketInterfaceStandard(0) { }

	float default_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_value")
	}

	void default_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_value", value)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketInt : public NodeSocketStandard {
public:
	NodeSocketInt(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketInt() : NodeSocketStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}
};

class NodeSocketInterfaceInt : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceInt(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceInt() : NodeSocketInterfaceStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}

	int min_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_value")
	}

	void min_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_value", value)
	}

	int max_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_value")
	}

	void max_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_value", value)
	}
};

class NodeSocketIntUnsigned : public NodeSocketStandard {
public:
	NodeSocketIntUnsigned(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketIntUnsigned() : NodeSocketStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}
};

class NodeSocketInterfaceIntUnsigned : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceIntUnsigned(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceIntUnsigned() : NodeSocketInterfaceStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}

	int min_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_value")
	}

	void min_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_value", value)
	}

	int max_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_value")
	}

	void max_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_value", value)
	}
};

class NodeSocketIntPercentage : public NodeSocketStandard {
public:
	NodeSocketIntPercentage(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketIntPercentage() : NodeSocketStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}
};

class NodeSocketInterfaceIntPercentage : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceIntPercentage(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceIntPercentage() : NodeSocketInterfaceStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}

	int min_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_value")
	}

	void min_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_value", value)
	}

	int max_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_value")
	}

	void max_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_value", value)
	}
};

class NodeSocketIntFactor : public NodeSocketStandard {
public:
	NodeSocketIntFactor(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketIntFactor() : NodeSocketStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}
};

class NodeSocketInterfaceIntFactor : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceIntFactor(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceIntFactor() : NodeSocketInterfaceStandard(0) { }

	int default_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_value")
	}

	void default_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}

	int min_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_value")
	}

	void min_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_value", value)
	}

	int max_value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_value")
	}

	void max_value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_value", value)
	}
};

class NodeSocketBool : public NodeSocketStandard {
public:
	NodeSocketBool(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketBool() : NodeSocketStandard(0) { }

	bool default_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "default_value")
	}

	void default_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}
};

class NodeSocketInterfaceBool : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceBool(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceBool() : NodeSocketInterfaceStandard(0) { }

	bool default_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "default_value")
	}

	void default_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "default_value", value)
	}
};

class NodeSocketVector : public NodeSocketStandard {
public:
	NodeSocketVector(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVector() : NodeSocketStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}
};

class NodeSocketInterfaceVector : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceVector(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceVector() : NodeSocketInterfaceStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketVectorTranslation : public NodeSocketStandard {
public:
	NodeSocketVectorTranslation(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVectorTranslation() : NodeSocketStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}
};

class NodeSocketInterfaceVectorTranslation : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceVectorTranslation(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceVectorTranslation() : NodeSocketInterfaceStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketVectorDirection : public NodeSocketStandard {
public:
	NodeSocketVectorDirection(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVectorDirection() : NodeSocketStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}
};

class NodeSocketInterfaceVectorDirection : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceVectorDirection(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceVectorDirection() : NodeSocketInterfaceStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketVectorVelocity : public NodeSocketStandard {
public:
	NodeSocketVectorVelocity(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVectorVelocity() : NodeSocketStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}
};

class NodeSocketInterfaceVectorVelocity : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceVectorVelocity(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceVectorVelocity() : NodeSocketInterfaceStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketVectorAcceleration : public NodeSocketStandard {
public:
	NodeSocketVectorAcceleration(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVectorAcceleration() : NodeSocketStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}
};

class NodeSocketInterfaceVectorAcceleration : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceVectorAcceleration(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceVectorAcceleration() : NodeSocketInterfaceStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketVectorEuler : public NodeSocketStandard {
public:
	NodeSocketVectorEuler(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVectorEuler() : NodeSocketStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}
};

class NodeSocketInterfaceVectorEuler : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceVectorEuler(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceVectorEuler() : NodeSocketInterfaceStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketVectorXYZ : public NodeSocketStandard {
public:
	NodeSocketVectorXYZ(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVectorXYZ() : NodeSocketStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}
};

class NodeSocketInterfaceVectorXYZ : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceVectorXYZ(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceVectorXYZ() : NodeSocketInterfaceStandard(0) { }

	VFLOAT3 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 3)
	}

	void default_value(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 3)
	}

	float min_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "min_value")
	}

	void min_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "min_value", value)
	}

	float max_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "max_value")
	}

	void max_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "max_value", value)
	}
};

class NodeSocketColor : public NodeSocketStandard {
public:
	NodeSocketColor(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketColor() : NodeSocketStandard(0) { }

	VFLOAT4 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 4)
	}

	void default_value(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 4)
	}
};

class NodeSocketInterfaceColor : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceColor(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceColor() : NodeSocketInterfaceStandard(0) { }

	VFLOAT4 default_value() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "default_value", 4)
	}

	void default_value(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "default_value", 4)
	}
};

class NodeSocketString : public NodeSocketStandard {
public:
	NodeSocketString(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketString() : NodeSocketStandard(0) { }

	std::string default_value() {
		STRING_TYPE_GETTER("default_value", resstr)
	}

	void default_value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "default_value", value)
	}
};

class NodeSocketInterfaceString : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceString(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceString() : NodeSocketInterfaceStandard(0) { }

	std::string default_value() {
		STRING_TYPE_GETTER("default_value", resstr)
	}

	void default_value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "default_value", value)
	}
};

class NodeSocketShader : public NodeSocketStandard {
public:
	NodeSocketShader(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketShader() : NodeSocketStandard(0) { }
};

class NodeSocketInterfaceShader : public NodeSocketInterfaceStandard {
public:
	NodeSocketInterfaceShader(PyObject* pyobj) : NodeSocketInterfaceStandard(pyobj) {}
	NodeSocketInterfaceShader() : NodeSocketInterfaceStandard(0) { }
};

class NodeSocketVirtual : public NodeSocketStandard {
public:
	NodeSocketVirtual(PyObject* pyobj) : NodeSocketStandard(pyobj) {}
	NodeSocketVirtual() : NodeSocketStandard(0) { }
};

class CompositorNodeTree : public NodeTree {
public:
	CompositorNodeTree(PyObject* pyobj) : NodeTree(pyobj) {}
	CompositorNodeTree() : NodeTree(0) { }

	enum node_quality_items_enum {
		node_quality_items_HIGH = 0,	
		node_quality_items_MEDIUM = 1,	
		node_quality_items_LOW = 2	
	};

	std::map<std::string, int> create_string_to_node_quality_items() {
		return {{"HIGH", node_quality_items_HIGH}, {"MEDIUM", node_quality_items_MEDIUM}, {"LOW", node_quality_items_LOW}};
	};

	std::map<int, std::string> create_node_quality_items_to_string() {
		return {{node_quality_items_HIGH, "HIGH"}, {node_quality_items_MEDIUM, "MEDIUM"}, {node_quality_items_LOW, "LOW"}};
	};

	const std::map<std::string, int> string_to_node_quality_items = create_string_to_node_quality_items();
	const std::map<int, std::string> node_quality_items_to_string = create_node_quality_items_to_string();

	node_quality_items_enum render_quality() {
		STRING_TYPE_GETTER("render_quality", static_cast<node_quality_items_enum>(string_to_node_quality_items.at(resstr)))
	}

	void render_quality(node_quality_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "render_quality", node_quality_items_to_string.at(value))
	}

	node_quality_items_enum edit_quality() {
		STRING_TYPE_GETTER("edit_quality", static_cast<node_quality_items_enum>(string_to_node_quality_items.at(resstr)))
	}

	void edit_quality(node_quality_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edit_quality", node_quality_items_to_string.at(value))
	}

	enum node_chunksize_items_enum {
		node_chunksize_items_32 = 32,	
		node_chunksize_items_64 = 64,	
		node_chunksize_items_128 = 128,	
		node_chunksize_items_256 = 256,	
		node_chunksize_items_512 = 512,	
		node_chunksize_items_1024 = 1024	
	};

	std::map<std::string, int> create_string_to_node_chunksize_items() {
		return {{"32", node_chunksize_items_32}, {"64", node_chunksize_items_64}, {"128", node_chunksize_items_128}, {"256", node_chunksize_items_256}, {"512", node_chunksize_items_512}, {"1024", node_chunksize_items_1024}};
	};

	std::map<int, std::string> create_node_chunksize_items_to_string() {
		return {{node_chunksize_items_32, "32"}, {node_chunksize_items_64, "64"}, {node_chunksize_items_128, "128"}, {node_chunksize_items_256, "256"}, {node_chunksize_items_512, "512"}, {node_chunksize_items_1024, "1024"}};
	};

	const std::map<std::string, int> string_to_node_chunksize_items = create_string_to_node_chunksize_items();
	const std::map<int, std::string> node_chunksize_items_to_string = create_node_chunksize_items_to_string();

	node_chunksize_items_enum chunk_size() {
		STRING_TYPE_GETTER("chunk_size", static_cast<node_chunksize_items_enum>(string_to_node_chunksize_items.at(resstr)))
	}

	void chunk_size(node_chunksize_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "chunk_size", node_chunksize_items_to_string.at(value))
	}

	bool use_opencl() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_opencl")
	}

	void use_opencl(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_opencl", value)
	}

	bool use_groupnode_buffer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_groupnode_buffer")
	}

	void use_groupnode_buffer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_groupnode_buffer", value)
	}

	bool use_two_pass() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_two_pass")
	}

	void use_two_pass(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_two_pass", value)
	}

	bool use_viewer_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_viewer_border")
	}

	void use_viewer_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_viewer_border", value)
	}
};

class ShaderNodeTree : public NodeTree {
public:
	ShaderNodeTree(PyObject* pyobj) : NodeTree(pyobj) {}
	ShaderNodeTree() : NodeTree(0) { }
};

class TextureNodeTree : public NodeTree {
public:
	TextureNodeTree(PyObject* pyobj) : NodeTree(pyobj) {}
	TextureNodeTree() : NodeTree(0) { }
};

class NodeFrame : public NodeInternal {
public:
	NodeFrame(PyObject* pyobj) : NodeInternal(pyobj) {}
	NodeFrame() : NodeInternal(0) { }

	Text text();

	bool shrink() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "shrink")
	}

	void shrink(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "shrink", value)
	}

	int label_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "label_size")
	}

	void label_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "label_size", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class NodeGroup : public NodeInternal {
public:
	NodeGroup(PyObject* pyobj) : NodeInternal(pyobj) {}
	NodeGroup() : NodeInternal(0) { }

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	PropertyGroup interface_value() {
		CLASS_TYPES_GETTER(PropertyGroup, "interface")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class NodeGroupInput : public NodeInternal {
public:
	NodeGroupInput(PyObject* pyobj) : NodeInternal(pyobj) {}
	NodeGroupInput() : NodeInternal(0) { }

	PropertyGroup interface_value() {
		CLASS_TYPES_GETTER(PropertyGroup, "interface")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class NodeGroupOutput : public NodeInternal {
public:
	NodeGroupOutput(PyObject* pyobj) : NodeInternal(pyobj) {}
	NodeGroupOutput() : NodeInternal(0) { }

	PropertyGroup interface_value() {
		CLASS_TYPES_GETTER(PropertyGroup, "interface")
	}

	bool is_active_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_active_output")
	}

	void is_active_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_active_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class NodeReroute : public NodeInternal {
public:
	NodeReroute(PyObject* pyobj) : NodeInternal(pyobj) {}
	NodeReroute() : NodeInternal(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeOutput : public ShaderNode {
public:
	ShaderNodeOutput(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeOutput() : ShaderNode(0) { }

	bool is_active_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_active_output")
	}

	void is_active_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_active_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeMaterial : public ShaderNode {
public:
	ShaderNodeMaterial(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeMaterial() : ShaderNode(0) { }

	Material material() {
		CLASS_TYPES_GETTER(Material, "material")
	}

	bool use_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_diffuse")
	}

	void use_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_diffuse", value)
	}

	bool use_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_specular")
	}

	void use_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_specular", value)
	}

	bool invert_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_normal")
	}

	void invert_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_normal", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeRGB : public ShaderNode {
public:
	ShaderNodeRGB(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeRGB() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeValue : public ShaderNode {
public:
	ShaderNodeValue(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeValue() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeMixRGB : public ShaderNode {
public:
	ShaderNodeMixRGB(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeMixRGB() : ShaderNode(0) { }

	enum ramp_blend_items_enum {
		ramp_blend_items_MIX = 0,	
		ramp_blend_items_ADD = 1,	
		ramp_blend_items_MULTIPLY = 2,	
		ramp_blend_items_SUBTRACT = 3,	
		ramp_blend_items_SCREEN = 4,	
		ramp_blend_items_DIVIDE = 5,	
		ramp_blend_items_DIFFERENCE = 6,	
		ramp_blend_items_DARKEN = 7,	
		ramp_blend_items_LIGHTEN = 8,	
		ramp_blend_items_OVERLAY = 9,	
		ramp_blend_items_DODGE = 10,	
		ramp_blend_items_BURN = 11,	
		ramp_blend_items_HUE = 12,	
		ramp_blend_items_SATURATION = 13,	
		ramp_blend_items_VALUE = 14,	
		ramp_blend_items_COLOR = 15,	
		ramp_blend_items_SOFT_LIGHT = 16,	
		ramp_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_ramp_blend_items() {
		return {{"MIX", ramp_blend_items_MIX}, {"ADD", ramp_blend_items_ADD}, {"MULTIPLY", ramp_blend_items_MULTIPLY}, {"SUBTRACT", ramp_blend_items_SUBTRACT}, {"SCREEN", ramp_blend_items_SCREEN}, {"DIVIDE", ramp_blend_items_DIVIDE}, {"DIFFERENCE", ramp_blend_items_DIFFERENCE}, {"DARKEN", ramp_blend_items_DARKEN}, {"LIGHTEN", ramp_blend_items_LIGHTEN}, {"OVERLAY", ramp_blend_items_OVERLAY}, {"DODGE", ramp_blend_items_DODGE}, {"BURN", ramp_blend_items_BURN}, {"HUE", ramp_blend_items_HUE}, {"SATURATION", ramp_blend_items_SATURATION}, {"VALUE", ramp_blend_items_VALUE}, {"COLOR", ramp_blend_items_COLOR}, {"SOFT_LIGHT", ramp_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", ramp_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_ramp_blend_items_to_string() {
		return {{ramp_blend_items_MIX, "MIX"}, {ramp_blend_items_ADD, "ADD"}, {ramp_blend_items_MULTIPLY, "MULTIPLY"}, {ramp_blend_items_SUBTRACT, "SUBTRACT"}, {ramp_blend_items_SCREEN, "SCREEN"}, {ramp_blend_items_DIVIDE, "DIVIDE"}, {ramp_blend_items_DIFFERENCE, "DIFFERENCE"}, {ramp_blend_items_DARKEN, "DARKEN"}, {ramp_blend_items_LIGHTEN, "LIGHTEN"}, {ramp_blend_items_OVERLAY, "OVERLAY"}, {ramp_blend_items_DODGE, "DODGE"}, {ramp_blend_items_BURN, "BURN"}, {ramp_blend_items_HUE, "HUE"}, {ramp_blend_items_SATURATION, "SATURATION"}, {ramp_blend_items_VALUE, "VALUE"}, {ramp_blend_items_COLOR, "COLOR"}, {ramp_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {ramp_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_ramp_blend_items = create_string_to_ramp_blend_items();
	const std::map<int, std::string> ramp_blend_items_to_string = create_ramp_blend_items_to_string();

	ramp_blend_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<ramp_blend_items_enum>(string_to_ramp_blend_items.at(resstr)))
	}

	void blend_type(ramp_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", ramp_blend_items_to_string.at(value))
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeValToRGB : public ShaderNode {
public:
	ShaderNodeValToRGB(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeValToRGB() : ShaderNode(0) { }

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeRGBToBW : public ShaderNode {
public:
	ShaderNodeRGBToBW(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeRGBToBW() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexture : public ShaderNode {
public:
	ShaderNodeTexture(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexture() : ShaderNode(0) { }

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	int node_output() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "node_output")
	}

	void node_output(int value) {
		PRIMITIVE_TYPES_SETTER("i", "node_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeNormal : public ShaderNode {
public:
	ShaderNodeNormal(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeNormal() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeGamma : public ShaderNode {
public:
	ShaderNodeGamma(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeGamma() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBrightContrast : public ShaderNode {
public:
	ShaderNodeBrightContrast(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBrightContrast() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeGeometry : public ShaderNode {
public:
	ShaderNodeGeometry(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeGeometry() : ShaderNode(0) { }

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	std::string color_layer() {
		STRING_TYPE_GETTER("color_layer", resstr)
	}

	void color_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "color_layer", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeMapping : public ShaderNode {
public:
	ShaderNodeMapping(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeMapping() : ShaderNode(0) { }

	enum prop_vect_type_items_enum {
		prop_vect_type_items_TEXTURE = 1,	
		prop_vect_type_items_POINT = 0,	
		prop_vect_type_items_VECTOR = 2,	
		prop_vect_type_items_NORMAL = 3	
	};

	std::map<std::string, int> create_string_to_prop_vect_type_items() {
		return {{"TEXTURE", prop_vect_type_items_TEXTURE}, {"POINT", prop_vect_type_items_POINT}, {"VECTOR", prop_vect_type_items_VECTOR}, {"NORMAL", prop_vect_type_items_NORMAL}};
	};

	std::map<int, std::string> create_prop_vect_type_items_to_string() {
		return {{prop_vect_type_items_TEXTURE, "TEXTURE"}, {prop_vect_type_items_POINT, "POINT"}, {prop_vect_type_items_VECTOR, "VECTOR"}, {prop_vect_type_items_NORMAL, "NORMAL"}};
	};

	const std::map<std::string, int> string_to_prop_vect_type_items = create_string_to_prop_vect_type_items();
	const std::map<int, std::string> prop_vect_type_items_to_string = create_prop_vect_type_items_to_string();

	prop_vect_type_items_enum vector_type() {
		STRING_TYPE_GETTER("vector_type", static_cast<prop_vect_type_items_enum>(string_to_prop_vect_type_items.at(resstr)))
	}

	void vector_type(prop_vect_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vector_type", prop_vect_type_items_to_string.at(value))
	}

	VFLOAT3 translation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "translation", 3)
	}

	void translation(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "translation", 3)
	}

	VFLOAT3 rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation", 3)
	}

	void rotation(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation", 3)
	}

	VFLOAT3 scale() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scale", 3)
	}

	void scale(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scale", 3)
	}

	VFLOAT3 min() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "min", 3)
	}

	void min(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "min", 3)
	}

	VFLOAT3 max() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "max", 3)
	}

	void max(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "max", 3)
	}

	bool use_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min")
	}

	void use_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min", value)
	}

	bool use_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max")
	}

	void use_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeVectorCurve : public ShaderNode {
public:
	ShaderNodeVectorCurve(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeVectorCurve() : ShaderNode(0) { }

	CurveMapping mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeRGBCurve : public ShaderNode {
public:
	ShaderNodeRGBCurve(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeRGBCurve() : ShaderNode(0) { }

	CurveMapping mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeCameraData : public ShaderNode {
public:
	ShaderNodeCameraData(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeCameraData() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeLampData : public ShaderNode {
public:
	ShaderNodeLampData(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeLampData() : ShaderNode(0) { }

	Object lamp_object();

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeMath : public ShaderNode {
public:
	ShaderNodeMath(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeMath() : ShaderNode(0) { }

	enum node_math_items_enum {
		node_math_items_ADD = 0,	
		node_math_items_SUBTRACT = 1,	
		node_math_items_MULTIPLY = 2,	
		node_math_items_DIVIDE = 3,	
		node_math_items_SINE = 4,	
		node_math_items_COSINE = 5,	
		node_math_items_TANGENT = 6,	
		node_math_items_ARCSINE = 7,	
		node_math_items_ARCCOSINE = 8,	
		node_math_items_ARCTANGENT = 9,	
		node_math_items_POWER = 10,	
		node_math_items_LOGARITHM = 11,	
		node_math_items_MINIMUM = 12,	
		node_math_items_MAXIMUM = 13,	
		node_math_items_ROUND = 14,	
		node_math_items_LESS_THAN = 15,	
		node_math_items_GREATER_THAN = 16,	
		node_math_items_MODULO = 17,	
		node_math_items_ABSOLUTE = 18	
	};

	std::map<std::string, int> create_string_to_node_math_items() {
		return {{"ADD", node_math_items_ADD}, {"SUBTRACT", node_math_items_SUBTRACT}, {"MULTIPLY", node_math_items_MULTIPLY}, {"DIVIDE", node_math_items_DIVIDE}, {"SINE", node_math_items_SINE}, {"COSINE", node_math_items_COSINE}, {"TANGENT", node_math_items_TANGENT}, {"ARCSINE", node_math_items_ARCSINE}, {"ARCCOSINE", node_math_items_ARCCOSINE}, {"ARCTANGENT", node_math_items_ARCTANGENT}, {"POWER", node_math_items_POWER}, {"LOGARITHM", node_math_items_LOGARITHM}, {"MINIMUM", node_math_items_MINIMUM}, {"MAXIMUM", node_math_items_MAXIMUM}, {"ROUND", node_math_items_ROUND}, {"LESS_THAN", node_math_items_LESS_THAN}, {"GREATER_THAN", node_math_items_GREATER_THAN}, {"MODULO", node_math_items_MODULO}, {"ABSOLUTE", node_math_items_ABSOLUTE}};
	};

	std::map<int, std::string> create_node_math_items_to_string() {
		return {{node_math_items_ADD, "ADD"}, {node_math_items_SUBTRACT, "SUBTRACT"}, {node_math_items_MULTIPLY, "MULTIPLY"}, {node_math_items_DIVIDE, "DIVIDE"}, {node_math_items_SINE, "SINE"}, {node_math_items_COSINE, "COSINE"}, {node_math_items_TANGENT, "TANGENT"}, {node_math_items_ARCSINE, "ARCSINE"}, {node_math_items_ARCCOSINE, "ARCCOSINE"}, {node_math_items_ARCTANGENT, "ARCTANGENT"}, {node_math_items_POWER, "POWER"}, {node_math_items_LOGARITHM, "LOGARITHM"}, {node_math_items_MINIMUM, "MINIMUM"}, {node_math_items_MAXIMUM, "MAXIMUM"}, {node_math_items_ROUND, "ROUND"}, {node_math_items_LESS_THAN, "LESS_THAN"}, {node_math_items_GREATER_THAN, "GREATER_THAN"}, {node_math_items_MODULO, "MODULO"}, {node_math_items_ABSOLUTE, "ABSOLUTE"}};
	};

	const std::map<std::string, int> string_to_node_math_items = create_string_to_node_math_items();
	const std::map<int, std::string> node_math_items_to_string = create_node_math_items_to_string();

	node_math_items_enum operation() {
		STRING_TYPE_GETTER("operation", static_cast<node_math_items_enum>(string_to_node_math_items.at(resstr)))
	}

	void operation(node_math_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "operation", node_math_items_to_string.at(value))
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeVectorMath : public ShaderNode {
public:
	ShaderNodeVectorMath(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeVectorMath() : ShaderNode(0) { }

	enum node_vec_math_items_enum {
		node_vec_math_items_ADD = 0,	
		node_vec_math_items_SUBTRACT = 1,	
		node_vec_math_items_AVERAGE = 2,	
		node_vec_math_items_DOT_PRODUCT = 3,	
		node_vec_math_items_CROSS_PRODUCT = 4,	
		node_vec_math_items_NORMALIZE = 5	
	};

	std::map<std::string, int> create_string_to_node_vec_math_items() {
		return {{"ADD", node_vec_math_items_ADD}, {"SUBTRACT", node_vec_math_items_SUBTRACT}, {"AVERAGE", node_vec_math_items_AVERAGE}, {"DOT_PRODUCT", node_vec_math_items_DOT_PRODUCT}, {"CROSS_PRODUCT", node_vec_math_items_CROSS_PRODUCT}, {"NORMALIZE", node_vec_math_items_NORMALIZE}};
	};

	std::map<int, std::string> create_node_vec_math_items_to_string() {
		return {{node_vec_math_items_ADD, "ADD"}, {node_vec_math_items_SUBTRACT, "SUBTRACT"}, {node_vec_math_items_AVERAGE, "AVERAGE"}, {node_vec_math_items_DOT_PRODUCT, "DOT_PRODUCT"}, {node_vec_math_items_CROSS_PRODUCT, "CROSS_PRODUCT"}, {node_vec_math_items_NORMALIZE, "NORMALIZE"}};
	};

	const std::map<std::string, int> string_to_node_vec_math_items = create_string_to_node_vec_math_items();
	const std::map<int, std::string> node_vec_math_items_to_string = create_node_vec_math_items_to_string();

	node_vec_math_items_enum operation() {
		STRING_TYPE_GETTER("operation", static_cast<node_vec_math_items_enum>(string_to_node_vec_math_items.at(resstr)))
	}

	void operation(node_vec_math_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "operation", node_vec_math_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeSqueeze : public ShaderNode {
public:
	ShaderNodeSqueeze(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeSqueeze() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeExtendedMaterial : public ShaderNode {
public:
	ShaderNodeExtendedMaterial(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeExtendedMaterial() : ShaderNode(0) { }

	Material material() {
		CLASS_TYPES_GETTER(Material, "material")
	}

	bool use_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_diffuse")
	}

	void use_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_diffuse", value)
	}

	bool use_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_specular")
	}

	void use_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_specular", value)
	}

	bool invert_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_normal")
	}

	void invert_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_normal", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeInvert : public ShaderNode {
public:
	ShaderNodeInvert(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeInvert() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeSeparateRGB : public ShaderNode {
public:
	ShaderNodeSeparateRGB(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeSeparateRGB() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeCombineRGB : public ShaderNode {
public:
	ShaderNodeCombineRGB(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeCombineRGB() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeHueSaturation : public ShaderNode {
public:
	ShaderNodeHueSaturation(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeHueSaturation() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeOutputMaterial : public ShaderNode {
public:
	ShaderNodeOutputMaterial(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeOutputMaterial() : ShaderNode(0) { }

	bool is_active_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_active_output")
	}

	void is_active_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_active_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeOutputLamp : public ShaderNode {
public:
	ShaderNodeOutputLamp(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeOutputLamp() : ShaderNode(0) { }

	bool is_active_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_active_output")
	}

	void is_active_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_active_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeOutputWorld : public ShaderNode {
public:
	ShaderNodeOutputWorld(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeOutputWorld() : ShaderNode(0) { }

	bool is_active_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_active_output")
	}

	void is_active_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_active_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeOutputLineStyle : public ShaderNode {
public:
	ShaderNodeOutputLineStyle(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeOutputLineStyle() : ShaderNode(0) { }

	bool is_active_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_active_output")
	}

	void is_active_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_active_output", value)
	}

	enum ramp_blend_items_enum {
		ramp_blend_items_MIX = 0,	
		ramp_blend_items_ADD = 1,	
		ramp_blend_items_MULTIPLY = 2,	
		ramp_blend_items_SUBTRACT = 3,	
		ramp_blend_items_SCREEN = 4,	
		ramp_blend_items_DIVIDE = 5,	
		ramp_blend_items_DIFFERENCE = 6,	
		ramp_blend_items_DARKEN = 7,	
		ramp_blend_items_LIGHTEN = 8,	
		ramp_blend_items_OVERLAY = 9,	
		ramp_blend_items_DODGE = 10,	
		ramp_blend_items_BURN = 11,	
		ramp_blend_items_HUE = 12,	
		ramp_blend_items_SATURATION = 13,	
		ramp_blend_items_VALUE = 14,	
		ramp_blend_items_COLOR = 15,	
		ramp_blend_items_SOFT_LIGHT = 16,	
		ramp_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_ramp_blend_items() {
		return {{"MIX", ramp_blend_items_MIX}, {"ADD", ramp_blend_items_ADD}, {"MULTIPLY", ramp_blend_items_MULTIPLY}, {"SUBTRACT", ramp_blend_items_SUBTRACT}, {"SCREEN", ramp_blend_items_SCREEN}, {"DIVIDE", ramp_blend_items_DIVIDE}, {"DIFFERENCE", ramp_blend_items_DIFFERENCE}, {"DARKEN", ramp_blend_items_DARKEN}, {"LIGHTEN", ramp_blend_items_LIGHTEN}, {"OVERLAY", ramp_blend_items_OVERLAY}, {"DODGE", ramp_blend_items_DODGE}, {"BURN", ramp_blend_items_BURN}, {"HUE", ramp_blend_items_HUE}, {"SATURATION", ramp_blend_items_SATURATION}, {"VALUE", ramp_blend_items_VALUE}, {"COLOR", ramp_blend_items_COLOR}, {"SOFT_LIGHT", ramp_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", ramp_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_ramp_blend_items_to_string() {
		return {{ramp_blend_items_MIX, "MIX"}, {ramp_blend_items_ADD, "ADD"}, {ramp_blend_items_MULTIPLY, "MULTIPLY"}, {ramp_blend_items_SUBTRACT, "SUBTRACT"}, {ramp_blend_items_SCREEN, "SCREEN"}, {ramp_blend_items_DIVIDE, "DIVIDE"}, {ramp_blend_items_DIFFERENCE, "DIFFERENCE"}, {ramp_blend_items_DARKEN, "DARKEN"}, {ramp_blend_items_LIGHTEN, "LIGHTEN"}, {ramp_blend_items_OVERLAY, "OVERLAY"}, {ramp_blend_items_DODGE, "DODGE"}, {ramp_blend_items_BURN, "BURN"}, {ramp_blend_items_HUE, "HUE"}, {ramp_blend_items_SATURATION, "SATURATION"}, {ramp_blend_items_VALUE, "VALUE"}, {ramp_blend_items_COLOR, "COLOR"}, {ramp_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {ramp_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_ramp_blend_items = create_string_to_ramp_blend_items();
	const std::map<int, std::string> ramp_blend_items_to_string = create_ramp_blend_items_to_string();

	ramp_blend_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<ramp_blend_items_enum>(string_to_ramp_blend_items.at(resstr)))
	}

	void blend_type(ramp_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", ramp_blend_items_to_string.at(value))
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeFresnel : public ShaderNode {
public:
	ShaderNodeFresnel(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeFresnel() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeLayerWeight : public ShaderNode {
public:
	ShaderNodeLayerWeight(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeLayerWeight() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeMixShader : public ShaderNode {
public:
	ShaderNodeMixShader(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeMixShader() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeAddShader : public ShaderNode {
public:
	ShaderNodeAddShader(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeAddShader() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeAttribute : public ShaderNode {
public:
	ShaderNodeAttribute(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeAttribute() : ShaderNode(0) { }

	std::string attribute_name() {
		STRING_TYPE_GETTER("attribute_name", resstr)
	}

	void attribute_name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "attribute_name", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeAmbientOcclusion : public ShaderNode {
public:
	ShaderNodeAmbientOcclusion(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeAmbientOcclusion() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBackground : public ShaderNode {
public:
	ShaderNodeBackground(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBackground() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeHoldout : public ShaderNode {
public:
	ShaderNodeHoldout(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeHoldout() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfAnisotropic : public ShaderNode {
public:
	ShaderNodeBsdfAnisotropic(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfAnisotropic() : ShaderNode(0) { }

	enum node_anisotropic_items_enum {
		node_anisotropic_items_BECKMANN = 0,	
		node_anisotropic_items_GGX = 2,	
		node_anisotropic_items_ASHIKHMIN_SHIRLEY = 3	
	};

	std::map<std::string, int> create_string_to_node_anisotropic_items() {
		return {{"BECKMANN", node_anisotropic_items_BECKMANN}, {"GGX", node_anisotropic_items_GGX}, {"ASHIKHMIN_SHIRLEY", node_anisotropic_items_ASHIKHMIN_SHIRLEY}};
	};

	std::map<int, std::string> create_node_anisotropic_items_to_string() {
		return {{node_anisotropic_items_BECKMANN, "BECKMANN"}, {node_anisotropic_items_GGX, "GGX"}, {node_anisotropic_items_ASHIKHMIN_SHIRLEY, "ASHIKHMIN_SHIRLEY"}};
	};

	const std::map<std::string, int> string_to_node_anisotropic_items = create_string_to_node_anisotropic_items();
	const std::map<int, std::string> node_anisotropic_items_to_string = create_node_anisotropic_items_to_string();

	node_anisotropic_items_enum distribution() {
		STRING_TYPE_GETTER("distribution", static_cast<node_anisotropic_items_enum>(string_to_node_anisotropic_items.at(resstr)))
	}

	void distribution(node_anisotropic_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distribution", node_anisotropic_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfDiffuse : public ShaderNode {
public:
	ShaderNodeBsdfDiffuse(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfDiffuse() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfGlossy : public ShaderNode {
public:
	ShaderNodeBsdfGlossy(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfGlossy() : ShaderNode(0) { }

	enum node_glossy_items_enum {
		node_glossy_items_SHARP = 1,	
		node_glossy_items_BECKMANN = 0,	
		node_glossy_items_GGX = 2,	
		node_glossy_items_ASHIKHMIN_SHIRLEY = 3	
	};

	std::map<std::string, int> create_string_to_node_glossy_items() {
		return {{"SHARP", node_glossy_items_SHARP}, {"BECKMANN", node_glossy_items_BECKMANN}, {"GGX", node_glossy_items_GGX}, {"ASHIKHMIN_SHIRLEY", node_glossy_items_ASHIKHMIN_SHIRLEY}};
	};

	std::map<int, std::string> create_node_glossy_items_to_string() {
		return {{node_glossy_items_SHARP, "SHARP"}, {node_glossy_items_BECKMANN, "BECKMANN"}, {node_glossy_items_GGX, "GGX"}, {node_glossy_items_ASHIKHMIN_SHIRLEY, "ASHIKHMIN_SHIRLEY"}};
	};

	const std::map<std::string, int> string_to_node_glossy_items = create_string_to_node_glossy_items();
	const std::map<int, std::string> node_glossy_items_to_string = create_node_glossy_items_to_string();

	node_glossy_items_enum distribution() {
		STRING_TYPE_GETTER("distribution", static_cast<node_glossy_items_enum>(string_to_node_glossy_items.at(resstr)))
	}

	void distribution(node_glossy_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distribution", node_glossy_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfGlass : public ShaderNode {
public:
	ShaderNodeBsdfGlass(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfGlass() : ShaderNode(0) { }

	enum node_glass_items_enum {
		node_glass_items_SHARP = 1,	
		node_glass_items_BECKMANN = 0,	
		node_glass_items_GGX = 2	
	};

	std::map<std::string, int> create_string_to_node_glass_items() {
		return {{"SHARP", node_glass_items_SHARP}, {"BECKMANN", node_glass_items_BECKMANN}, {"GGX", node_glass_items_GGX}};
	};

	std::map<int, std::string> create_node_glass_items_to_string() {
		return {{node_glass_items_SHARP, "SHARP"}, {node_glass_items_BECKMANN, "BECKMANN"}, {node_glass_items_GGX, "GGX"}};
	};

	const std::map<std::string, int> string_to_node_glass_items = create_string_to_node_glass_items();
	const std::map<int, std::string> node_glass_items_to_string = create_node_glass_items_to_string();

	node_glass_items_enum distribution() {
		STRING_TYPE_GETTER("distribution", static_cast<node_glass_items_enum>(string_to_node_glass_items.at(resstr)))
	}

	void distribution(node_glass_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distribution", node_glass_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfRefraction : public ShaderNode {
public:
	ShaderNodeBsdfRefraction(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfRefraction() : ShaderNode(0) { }

	enum node_glass_items_enum {
		node_glass_items_SHARP = 1,	
		node_glass_items_BECKMANN = 0,	
		node_glass_items_GGX = 2	
	};

	std::map<std::string, int> create_string_to_node_glass_items() {
		return {{"SHARP", node_glass_items_SHARP}, {"BECKMANN", node_glass_items_BECKMANN}, {"GGX", node_glass_items_GGX}};
	};

	std::map<int, std::string> create_node_glass_items_to_string() {
		return {{node_glass_items_SHARP, "SHARP"}, {node_glass_items_BECKMANN, "BECKMANN"}, {node_glass_items_GGX, "GGX"}};
	};

	const std::map<std::string, int> string_to_node_glass_items = create_string_to_node_glass_items();
	const std::map<int, std::string> node_glass_items_to_string = create_node_glass_items_to_string();

	node_glass_items_enum distribution() {
		STRING_TYPE_GETTER("distribution", static_cast<node_glass_items_enum>(string_to_node_glass_items.at(resstr)))
	}

	void distribution(node_glass_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distribution", node_glass_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfTranslucent : public ShaderNode {
public:
	ShaderNodeBsdfTranslucent(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfTranslucent() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfTransparent : public ShaderNode {
public:
	ShaderNodeBsdfTransparent(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfTransparent() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfVelvet : public ShaderNode {
public:
	ShaderNodeBsdfVelvet(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfVelvet() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfToon : public ShaderNode {
public:
	ShaderNodeBsdfToon(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfToon() : ShaderNode(0) { }

	enum node_toon_items_enum {
		node_toon_items_DIFFUSE = 0,	
		node_toon_items_GLOSSY = 1	
	};

	std::map<std::string, int> create_string_to_node_toon_items() {
		return {{"DIFFUSE", node_toon_items_DIFFUSE}, {"GLOSSY", node_toon_items_GLOSSY}};
	};

	std::map<int, std::string> create_node_toon_items_to_string() {
		return {{node_toon_items_DIFFUSE, "DIFFUSE"}, {node_toon_items_GLOSSY, "GLOSSY"}};
	};

	const std::map<std::string, int> string_to_node_toon_items = create_string_to_node_toon_items();
	const std::map<int, std::string> node_toon_items_to_string = create_node_toon_items_to_string();

	node_toon_items_enum component() {
		STRING_TYPE_GETTER("component", static_cast<node_toon_items_enum>(string_to_node_toon_items.at(resstr)))
	}

	void component(node_toon_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "component", node_toon_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBsdfHair : public ShaderNode {
public:
	ShaderNodeBsdfHair(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBsdfHair() : ShaderNode(0) { }

	enum node_hair_items_enum {
		node_hair_items_Reflection = 0,	
		node_hair_items_Transmission = 1	
	};

	std::map<std::string, int> create_string_to_node_hair_items() {
		return {{"Reflection", node_hair_items_Reflection}, {"Transmission", node_hair_items_Transmission}};
	};

	std::map<int, std::string> create_node_hair_items_to_string() {
		return {{node_hair_items_Reflection, "Reflection"}, {node_hair_items_Transmission, "Transmission"}};
	};

	const std::map<std::string, int> string_to_node_hair_items = create_string_to_node_hair_items();
	const std::map<int, std::string> node_hair_items_to_string = create_node_hair_items_to_string();

	node_hair_items_enum component() {
		STRING_TYPE_GETTER("component", static_cast<node_hair_items_enum>(string_to_node_hair_items.at(resstr)))
	}

	void component(node_hair_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "component", node_hair_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeSubsurfaceScattering : public ShaderNode {
public:
	ShaderNodeSubsurfaceScattering(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeSubsurfaceScattering() : ShaderNode(0) { }

	enum prop_subsurface_falloff_items_enum {
		prop_subsurface_falloff_items_CUBIC = 1,	
		prop_subsurface_falloff_items_GAUSSIAN = 2	
	};

	std::map<std::string, int> create_string_to_prop_subsurface_falloff_items() {
		return {{"CUBIC", prop_subsurface_falloff_items_CUBIC}, {"GAUSSIAN", prop_subsurface_falloff_items_GAUSSIAN}};
	};

	std::map<int, std::string> create_prop_subsurface_falloff_items_to_string() {
		return {{prop_subsurface_falloff_items_CUBIC, "CUBIC"}, {prop_subsurface_falloff_items_GAUSSIAN, "GAUSSIAN"}};
	};

	const std::map<std::string, int> string_to_prop_subsurface_falloff_items = create_string_to_prop_subsurface_falloff_items();
	const std::map<int, std::string> prop_subsurface_falloff_items_to_string = create_prop_subsurface_falloff_items_to_string();

	prop_subsurface_falloff_items_enum falloff() {
		STRING_TYPE_GETTER("falloff", static_cast<prop_subsurface_falloff_items_enum>(string_to_prop_subsurface_falloff_items.at(resstr)))
	}

	void falloff(prop_subsurface_falloff_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff", prop_subsurface_falloff_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeVolumeAbsorption : public ShaderNode {
public:
	ShaderNodeVolumeAbsorption(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeVolumeAbsorption() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeVolumeScatter : public ShaderNode {
public:
	ShaderNodeVolumeScatter(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeVolumeScatter() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeEmission : public ShaderNode {
public:
	ShaderNodeEmission(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeEmission() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeNewGeometry : public ShaderNode {
public:
	ShaderNodeNewGeometry(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeNewGeometry() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeLightPath : public ShaderNode {
public:
	ShaderNodeLightPath(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeLightPath() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeLightFalloff : public ShaderNode {
public:
	ShaderNodeLightFalloff(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeLightFalloff() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeObjectInfo : public ShaderNode {
public:
	ShaderNodeObjectInfo(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeObjectInfo() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeParticleInfo : public ShaderNode {
public:
	ShaderNodeParticleInfo(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeParticleInfo() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeHairInfo : public ShaderNode {
public:
	ShaderNodeHairInfo(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeHairInfo() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeWireframe : public ShaderNode {
public:
	ShaderNodeWireframe(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeWireframe() : ShaderNode(0) { }

	bool use_pixel_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pixel_size")
	}

	void use_pixel_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pixel_size", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeWavelength : public ShaderNode {
public:
	ShaderNodeWavelength(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeWavelength() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBlackbody : public ShaderNode {
public:
	ShaderNodeBlackbody(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBlackbody() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeBump : public ShaderNode {
public:
	ShaderNodeBump(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeBump() : ShaderNode(0) { }

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeNormalMap : public ShaderNode {
public:
	ShaderNodeNormalMap(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeNormalMap() : ShaderNode(0) { }

	enum prop_space_items_enum {
		prop_space_items_TANGENT = 0,	
		prop_space_items_OBJECT = 1,	
		prop_space_items_WORLD = 2,	
		prop_space_items_BLENDER_OBJECT = 3,	
		prop_space_items_BLENDER_WORLD = 4	
	};

	std::map<std::string, int> create_string_to_prop_space_items() {
		return {{"TANGENT", prop_space_items_TANGENT}, {"OBJECT", prop_space_items_OBJECT}, {"WORLD", prop_space_items_WORLD}, {"BLENDER_OBJECT", prop_space_items_BLENDER_OBJECT}, {"BLENDER_WORLD", prop_space_items_BLENDER_WORLD}};
	};

	std::map<int, std::string> create_prop_space_items_to_string() {
		return {{prop_space_items_TANGENT, "TANGENT"}, {prop_space_items_OBJECT, "OBJECT"}, {prop_space_items_WORLD, "WORLD"}, {prop_space_items_BLENDER_OBJECT, "BLENDER_OBJECT"}, {prop_space_items_BLENDER_WORLD, "BLENDER_WORLD"}};
	};

	const std::map<std::string, int> string_to_prop_space_items = create_string_to_prop_space_items();
	const std::map<int, std::string> prop_space_items_to_string = create_prop_space_items_to_string();

	prop_space_items_enum space() {
		STRING_TYPE_GETTER("space", static_cast<prop_space_items_enum>(string_to_prop_space_items.at(resstr)))
	}

	void space(prop_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "space", prop_space_items_to_string.at(value))
	}

	std::string uv_map() {
		STRING_TYPE_GETTER("uv_map", resstr)
	}

	void uv_map(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_map", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTangent : public ShaderNode {
public:
	ShaderNodeTangent(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTangent() : ShaderNode(0) { }

	enum prop_direction_type_items_enum {
		prop_direction_type_items_RADIAL = 0,	
		prop_direction_type_items_UV_MAP = 1	
	};

	std::map<std::string, int> create_string_to_prop_direction_type_items() {
		return {{"RADIAL", prop_direction_type_items_RADIAL}, {"UV_MAP", prop_direction_type_items_UV_MAP}};
	};

	std::map<int, std::string> create_prop_direction_type_items_to_string() {
		return {{prop_direction_type_items_RADIAL, "RADIAL"}, {prop_direction_type_items_UV_MAP, "UV_MAP"}};
	};

	const std::map<std::string, int> string_to_prop_direction_type_items = create_string_to_prop_direction_type_items();
	const std::map<int, std::string> prop_direction_type_items_to_string = create_prop_direction_type_items_to_string();

	prop_direction_type_items_enum direction_type() {
		STRING_TYPE_GETTER("direction_type", static_cast<prop_direction_type_items_enum>(string_to_prop_direction_type_items.at(resstr)))
	}

	void direction_type(prop_direction_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "direction_type", prop_direction_type_items_to_string.at(value))
	}

	enum prop_axis_items_enum {
		prop_axis_items_X = 0,	
		prop_axis_items_Y = 1,	
		prop_axis_items_Z = 2	
	};

	std::map<std::string, int> create_string_to_prop_axis_items() {
		return {{"X", prop_axis_items_X}, {"Y", prop_axis_items_Y}, {"Z", prop_axis_items_Z}};
	};

	std::map<int, std::string> create_prop_axis_items_to_string() {
		return {{prop_axis_items_X, "X"}, {prop_axis_items_Y, "Y"}, {prop_axis_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_axis_items = create_string_to_prop_axis_items();
	const std::map<int, std::string> prop_axis_items_to_string = create_prop_axis_items_to_string();

	prop_axis_items_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<prop_axis_items_enum>(string_to_prop_axis_items.at(resstr)))
	}

	void axis(prop_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", prop_axis_items_to_string.at(value))
	}

	std::string uv_map() {
		STRING_TYPE_GETTER("uv_map", resstr)
	}

	void uv_map(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_map", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeScript : public ShaderNode {
public:
	ShaderNodeScript(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeScript() : ShaderNode(0) { }

	Text script();

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	enum node_script_mode_items_enum {
		node_script_mode_items_INTERNAL = 0,	
		node_script_mode_items_EXTERNAL = 1	
	};

	std::map<std::string, int> create_string_to_node_script_mode_items() {
		return {{"INTERNAL", node_script_mode_items_INTERNAL}, {"EXTERNAL", node_script_mode_items_EXTERNAL}};
	};

	std::map<int, std::string> create_node_script_mode_items_to_string() {
		return {{node_script_mode_items_INTERNAL, "INTERNAL"}, {node_script_mode_items_EXTERNAL, "EXTERNAL"}};
	};

	const std::map<std::string, int> string_to_node_script_mode_items = create_string_to_node_script_mode_items();
	const std::map<int, std::string> node_script_mode_items_to_string = create_node_script_mode_items_to_string();

	node_script_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<node_script_mode_items_enum>(string_to_node_script_mode_items.at(resstr)))
	}

	void mode(node_script_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", node_script_mode_items_to_string.at(value))
	}

	bool use_auto_update() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_update")
	}

	void use_auto_update(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_update", value)
	}

	std::string bytecode() {
		STRING_TYPE_GETTER("bytecode", resstr)
	}

	void bytecode(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bytecode", value)
	}

	std::string bytecode_hash() {
		STRING_TYPE_GETTER("bytecode_hash", resstr)
	}

	void bytecode_hash(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bytecode_hash", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexImage : public ShaderNode {
public:
	ShaderNodeTexImage(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexImage() : ShaderNode(0) { }

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	enum prop_color_space_items_enum {
		prop_color_space_items_COLOR = 1,	
		prop_color_space_items_NONE = 0	
	};

	std::map<std::string, int> create_string_to_prop_color_space_items() {
		return {{"COLOR", prop_color_space_items_COLOR}, {"NONE", prop_color_space_items_NONE}};
	};

	std::map<int, std::string> create_prop_color_space_items_to_string() {
		return {{prop_color_space_items_COLOR, "COLOR"}, {prop_color_space_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_prop_color_space_items = create_string_to_prop_color_space_items();
	const std::map<int, std::string> prop_color_space_items_to_string = create_prop_color_space_items_to_string();

	prop_color_space_items_enum color_space() {
		STRING_TYPE_GETTER("color_space", static_cast<prop_color_space_items_enum>(string_to_prop_color_space_items.at(resstr)))
	}

	void color_space(prop_color_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_space", prop_color_space_items_to_string.at(value))
	}

	enum prop_projection_items_enum {
		prop_projection_items_FLAT = 0,	
		prop_projection_items_BOX = 1,	
		prop_projection_items_SPHERE = 2,	
		prop_projection_items_TUBE = 3	
	};

	std::map<std::string, int> create_string_to_prop_projection_items() {
		return {{"FLAT", prop_projection_items_FLAT}, {"BOX", prop_projection_items_BOX}, {"SPHERE", prop_projection_items_SPHERE}, {"TUBE", prop_projection_items_TUBE}};
	};

	std::map<int, std::string> create_prop_projection_items_to_string() {
		return {{prop_projection_items_FLAT, "FLAT"}, {prop_projection_items_BOX, "BOX"}, {prop_projection_items_SPHERE, "SPHERE"}, {prop_projection_items_TUBE, "TUBE"}};
	};

	const std::map<std::string, int> string_to_prop_projection_items = create_string_to_prop_projection_items();
	const std::map<int, std::string> prop_projection_items_to_string = create_prop_projection_items_to_string();

	prop_projection_items_enum projection() {
		STRING_TYPE_GETTER("projection", static_cast<prop_projection_items_enum>(string_to_prop_projection_items.at(resstr)))
	}

	void projection(prop_projection_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "projection", prop_projection_items_to_string.at(value))
	}

	enum prop_interpolation_items_enum {
		prop_interpolation_items_Linear = 0,	
		prop_interpolation_items_Closest = 1,	
		prop_interpolation_items_Cubic = 2,	
		prop_interpolation_items_Smart = 3	
	};

	std::map<std::string, int> create_string_to_prop_interpolation_items() {
		return {{"Linear", prop_interpolation_items_Linear}, {"Closest", prop_interpolation_items_Closest}, {"Cubic", prop_interpolation_items_Cubic}, {"Smart", prop_interpolation_items_Smart}};
	};

	std::map<int, std::string> create_prop_interpolation_items_to_string() {
		return {{prop_interpolation_items_Linear, "Linear"}, {prop_interpolation_items_Closest, "Closest"}, {prop_interpolation_items_Cubic, "Cubic"}, {prop_interpolation_items_Smart, "Smart"}};
	};

	const std::map<std::string, int> string_to_prop_interpolation_items = create_string_to_prop_interpolation_items();
	const std::map<int, std::string> prop_interpolation_items_to_string = create_prop_interpolation_items_to_string();

	prop_interpolation_items_enum interpolation() {
		STRING_TYPE_GETTER("interpolation", static_cast<prop_interpolation_items_enum>(string_to_prop_interpolation_items.at(resstr)))
	}

	void interpolation(prop_interpolation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation", prop_interpolation_items_to_string.at(value))
	}

	float projection_blend() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "projection_blend")
	}

	void projection_blend(float value) {
		PRIMITIVE_TYPES_SETTER("f", "projection_blend", value)
	}

	ImageUser image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexEnvironment : public ShaderNode {
public:
	ShaderNodeTexEnvironment(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexEnvironment() : ShaderNode(0) { }

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	enum prop_color_space_items_enum {
		prop_color_space_items_COLOR = 1,	
		prop_color_space_items_NONE = 0	
	};

	std::map<std::string, int> create_string_to_prop_color_space_items() {
		return {{"COLOR", prop_color_space_items_COLOR}, {"NONE", prop_color_space_items_NONE}};
	};

	std::map<int, std::string> create_prop_color_space_items_to_string() {
		return {{prop_color_space_items_COLOR, "COLOR"}, {prop_color_space_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_prop_color_space_items = create_string_to_prop_color_space_items();
	const std::map<int, std::string> prop_color_space_items_to_string = create_prop_color_space_items_to_string();

	prop_color_space_items_enum color_space() {
		STRING_TYPE_GETTER("color_space", static_cast<prop_color_space_items_enum>(string_to_prop_color_space_items.at(resstr)))
	}

	void color_space(prop_color_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_space", prop_color_space_items_to_string.at(value))
	}

	enum prop_projection_items_enum {
		prop_projection_items_EQUIRECTANGULAR = 0,	
		prop_projection_items_MIRROR_BALL = 1	
	};

	std::map<std::string, int> create_string_to_prop_projection_items() {
		return {{"EQUIRECTANGULAR", prop_projection_items_EQUIRECTANGULAR}, {"MIRROR_BALL", prop_projection_items_MIRROR_BALL}};
	};

	std::map<int, std::string> create_prop_projection_items_to_string() {
		return {{prop_projection_items_EQUIRECTANGULAR, "EQUIRECTANGULAR"}, {prop_projection_items_MIRROR_BALL, "MIRROR_BALL"}};
	};

	const std::map<std::string, int> string_to_prop_projection_items = create_string_to_prop_projection_items();
	const std::map<int, std::string> prop_projection_items_to_string = create_prop_projection_items_to_string();

	prop_projection_items_enum projection() {
		STRING_TYPE_GETTER("projection", static_cast<prop_projection_items_enum>(string_to_prop_projection_items.at(resstr)))
	}

	void projection(prop_projection_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "projection", prop_projection_items_to_string.at(value))
	}

	ImageUser image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexSky : public ShaderNode {
public:
	ShaderNodeTexSky(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexSky() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	enum prop_sky_type_enum {
		prop_sky_type_PREETHAM = 0,	
		prop_sky_type_HOSEK_WILKIE = 1	
	};

	std::map<std::string, int> create_string_to_prop_sky_type() {
		return {{"PREETHAM", prop_sky_type_PREETHAM}, {"HOSEK_WILKIE", prop_sky_type_HOSEK_WILKIE}};
	};

	std::map<int, std::string> create_prop_sky_type_to_string() {
		return {{prop_sky_type_PREETHAM, "PREETHAM"}, {prop_sky_type_HOSEK_WILKIE, "HOSEK_WILKIE"}};
	};

	const std::map<std::string, int> string_to_prop_sky_type = create_string_to_prop_sky_type();
	const std::map<int, std::string> prop_sky_type_to_string = create_prop_sky_type_to_string();

	prop_sky_type_enum sky_type() {
		STRING_TYPE_GETTER("sky_type", static_cast<prop_sky_type_enum>(string_to_prop_sky_type.at(resstr)))
	}

	void sky_type(prop_sky_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sky_type", prop_sky_type_to_string.at(value))
	}

	VFLOAT3 sun_direction() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "sun_direction", 3)
	}

	void sun_direction(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "sun_direction", 3)
	}

	float turbidity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbidity")
	}

	void turbidity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbidity", value)
	}

	float ground_albedo() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ground_albedo")
	}

	void ground_albedo(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ground_albedo", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexGradient : public ShaderNode {
public:
	ShaderNodeTexGradient(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexGradient() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	enum prop_gradient_type_enum {
		prop_gradient_type_LINEAR = 0,	
		prop_gradient_type_QUADRATIC = 1,	
		prop_gradient_type_EASING = 2,	
		prop_gradient_type_DIAGONAL = 3,	
		prop_gradient_type_SPHERICAL = 6,	
		prop_gradient_type_QUADRATIC_SPHERE = 5,	
		prop_gradient_type_RADIAL = 4	
	};

	std::map<std::string, int> create_string_to_prop_gradient_type() {
		return {{"LINEAR", prop_gradient_type_LINEAR}, {"QUADRATIC", prop_gradient_type_QUADRATIC}, {"EASING", prop_gradient_type_EASING}, {"DIAGONAL", prop_gradient_type_DIAGONAL}, {"SPHERICAL", prop_gradient_type_SPHERICAL}, {"QUADRATIC_SPHERE", prop_gradient_type_QUADRATIC_SPHERE}, {"RADIAL", prop_gradient_type_RADIAL}};
	};

	std::map<int, std::string> create_prop_gradient_type_to_string() {
		return {{prop_gradient_type_LINEAR, "LINEAR"}, {prop_gradient_type_QUADRATIC, "QUADRATIC"}, {prop_gradient_type_EASING, "EASING"}, {prop_gradient_type_DIAGONAL, "DIAGONAL"}, {prop_gradient_type_SPHERICAL, "SPHERICAL"}, {prop_gradient_type_QUADRATIC_SPHERE, "QUADRATIC_SPHERE"}, {prop_gradient_type_RADIAL, "RADIAL"}};
	};

	const std::map<std::string, int> string_to_prop_gradient_type = create_string_to_prop_gradient_type();
	const std::map<int, std::string> prop_gradient_type_to_string = create_prop_gradient_type_to_string();

	prop_gradient_type_enum gradient_type() {
		STRING_TYPE_GETTER("gradient_type", static_cast<prop_gradient_type_enum>(string_to_prop_gradient_type.at(resstr)))
	}

	void gradient_type(prop_gradient_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "gradient_type", prop_gradient_type_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexNoise : public ShaderNode {
public:
	ShaderNodeTexNoise(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexNoise() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexMagic : public ShaderNode {
public:
	ShaderNodeTexMagic(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexMagic() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	int turbulence_depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "turbulence_depth")
	}

	void turbulence_depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "turbulence_depth", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexWave : public ShaderNode {
public:
	ShaderNodeTexWave(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexWave() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	enum prop_wave_type_items_enum {
		prop_wave_type_items_BANDS = 0,	
		prop_wave_type_items_RINGS = 1	
	};

	std::map<std::string, int> create_string_to_prop_wave_type_items() {
		return {{"BANDS", prop_wave_type_items_BANDS}, {"RINGS", prop_wave_type_items_RINGS}};
	};

	std::map<int, std::string> create_prop_wave_type_items_to_string() {
		return {{prop_wave_type_items_BANDS, "BANDS"}, {prop_wave_type_items_RINGS, "RINGS"}};
	};

	const std::map<std::string, int> string_to_prop_wave_type_items = create_string_to_prop_wave_type_items();
	const std::map<int, std::string> prop_wave_type_items_to_string = create_prop_wave_type_items_to_string();

	prop_wave_type_items_enum wave_type() {
		STRING_TYPE_GETTER("wave_type", static_cast<prop_wave_type_items_enum>(string_to_prop_wave_type_items.at(resstr)))
	}

	void wave_type(prop_wave_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "wave_type", prop_wave_type_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexMusgrave : public ShaderNode {
public:
	ShaderNodeTexMusgrave(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexMusgrave() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	enum prop_musgrave_type_enum {
		prop_musgrave_type_MULTIFRACTAL = 0,	
		prop_musgrave_type_RIDGED_MULTIFRACTAL = 3,	
		prop_musgrave_type_HYBRID_MULTIFRACTAL = 2,	
		prop_musgrave_type_FBM = 1,	
		prop_musgrave_type_HETERO_TERRAIN = 4	
	};

	std::map<std::string, int> create_string_to_prop_musgrave_type() {
		return {{"MULTIFRACTAL", prop_musgrave_type_MULTIFRACTAL}, {"RIDGED_MULTIFRACTAL", prop_musgrave_type_RIDGED_MULTIFRACTAL}, {"HYBRID_MULTIFRACTAL", prop_musgrave_type_HYBRID_MULTIFRACTAL}, {"FBM", prop_musgrave_type_FBM}, {"HETERO_TERRAIN", prop_musgrave_type_HETERO_TERRAIN}};
	};

	std::map<int, std::string> create_prop_musgrave_type_to_string() {
		return {{prop_musgrave_type_MULTIFRACTAL, "MULTIFRACTAL"}, {prop_musgrave_type_RIDGED_MULTIFRACTAL, "RIDGED_MULTIFRACTAL"}, {prop_musgrave_type_HYBRID_MULTIFRACTAL, "HYBRID_MULTIFRACTAL"}, {prop_musgrave_type_FBM, "FBM"}, {prop_musgrave_type_HETERO_TERRAIN, "HETERO_TERRAIN"}};
	};

	const std::map<std::string, int> string_to_prop_musgrave_type = create_string_to_prop_musgrave_type();
	const std::map<int, std::string> prop_musgrave_type_to_string = create_prop_musgrave_type_to_string();

	prop_musgrave_type_enum musgrave_type() {
		STRING_TYPE_GETTER("musgrave_type", static_cast<prop_musgrave_type_enum>(string_to_prop_musgrave_type.at(resstr)))
	}

	void musgrave_type(prop_musgrave_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "musgrave_type", prop_musgrave_type_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexVoronoi : public ShaderNode {
public:
	ShaderNodeTexVoronoi(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexVoronoi() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	enum prop_coloring_items_enum {
		prop_coloring_items_INTENSITY = 0,	
		prop_coloring_items_CELLS = 1	
	};

	std::map<std::string, int> create_string_to_prop_coloring_items() {
		return {{"INTENSITY", prop_coloring_items_INTENSITY}, {"CELLS", prop_coloring_items_CELLS}};
	};

	std::map<int, std::string> create_prop_coloring_items_to_string() {
		return {{prop_coloring_items_INTENSITY, "INTENSITY"}, {prop_coloring_items_CELLS, "CELLS"}};
	};

	const std::map<std::string, int> string_to_prop_coloring_items = create_string_to_prop_coloring_items();
	const std::map<int, std::string> prop_coloring_items_to_string = create_prop_coloring_items_to_string();

	prop_coloring_items_enum coloring() {
		STRING_TYPE_GETTER("coloring", static_cast<prop_coloring_items_enum>(string_to_prop_coloring_items.at(resstr)))
	}

	void coloring(prop_coloring_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "coloring", prop_coloring_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexChecker : public ShaderNode {
public:
	ShaderNodeTexChecker(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexChecker() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexBrick : public ShaderNode {
public:
	ShaderNodeTexBrick(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexBrick() : ShaderNode(0) { }

	TexMapping texture_mapping() {
		CLASS_TYPES_GETTER(TexMapping, "texture_mapping")
	}

	ColorMapping color_mapping() {
		CLASS_TYPES_GETTER(ColorMapping, "color_mapping")
	}

	int offset_frequency() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "offset_frequency")
	}

	void offset_frequency(int value) {
		PRIMITIVE_TYPES_SETTER("i", "offset_frequency", value)
	}

	int squash_frequency() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "squash_frequency")
	}

	void squash_frequency(int value) {
		PRIMITIVE_TYPES_SETTER("i", "squash_frequency", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	float squash() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "squash")
	}

	void squash(float value) {
		PRIMITIVE_TYPES_SETTER("f", "squash", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeTexCoord : public ShaderNode {
public:
	ShaderNodeTexCoord(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeTexCoord() : ShaderNode(0) { }

	Object object_value();

	bool from_dupli() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "from_dupli")
	}

	void from_dupli(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "from_dupli", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeVectorTransform : public ShaderNode {
public:
	ShaderNodeVectorTransform(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeVectorTransform() : ShaderNode(0) { }

	enum prop_vect_type_items_enum {
		prop_vect_type_items_POINT = 1,	
		prop_vect_type_items_VECTOR = 0,	
		prop_vect_type_items_NORMAL = 2	
	};

	std::map<std::string, int> create_string_to_prop_vect_type_items() {
		return {{"POINT", prop_vect_type_items_POINT}, {"VECTOR", prop_vect_type_items_VECTOR}, {"NORMAL", prop_vect_type_items_NORMAL}};
	};

	std::map<int, std::string> create_prop_vect_type_items_to_string() {
		return {{prop_vect_type_items_POINT, "POINT"}, {prop_vect_type_items_VECTOR, "VECTOR"}, {prop_vect_type_items_NORMAL, "NORMAL"}};
	};

	const std::map<std::string, int> string_to_prop_vect_type_items = create_string_to_prop_vect_type_items();
	const std::map<int, std::string> prop_vect_type_items_to_string = create_prop_vect_type_items_to_string();

	prop_vect_type_items_enum vector_type() {
		STRING_TYPE_GETTER("vector_type", static_cast<prop_vect_type_items_enum>(string_to_prop_vect_type_items.at(resstr)))
	}

	void vector_type(prop_vect_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vector_type", prop_vect_type_items_to_string.at(value))
	}

	enum prop_vect_space_items_enum {
		prop_vect_space_items_WORLD = 0,	
		prop_vect_space_items_OBJECT = 1,	
		prop_vect_space_items_CAMERA = 2	
	};

	std::map<std::string, int> create_string_to_prop_vect_space_items() {
		return {{"WORLD", prop_vect_space_items_WORLD}, {"OBJECT", prop_vect_space_items_OBJECT}, {"CAMERA", prop_vect_space_items_CAMERA}};
	};

	std::map<int, std::string> create_prop_vect_space_items_to_string() {
		return {{prop_vect_space_items_WORLD, "WORLD"}, {prop_vect_space_items_OBJECT, "OBJECT"}, {prop_vect_space_items_CAMERA, "CAMERA"}};
	};

	const std::map<std::string, int> string_to_prop_vect_space_items = create_string_to_prop_vect_space_items();
	const std::map<int, std::string> prop_vect_space_items_to_string = create_prop_vect_space_items_to_string();

	prop_vect_space_items_enum convert_from() {
		STRING_TYPE_GETTER("convert_from", static_cast<prop_vect_space_items_enum>(string_to_prop_vect_space_items.at(resstr)))
	}

	void convert_from(prop_vect_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "convert_from", prop_vect_space_items_to_string.at(value))
	}

	prop_vect_space_items_enum convert_to() {
		STRING_TYPE_GETTER("convert_to", static_cast<prop_vect_space_items_enum>(string_to_prop_vect_space_items.at(resstr)))
	}

	void convert_to(prop_vect_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "convert_to", prop_vect_space_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeSeparateHSV : public ShaderNode {
public:
	ShaderNodeSeparateHSV(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeSeparateHSV() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeCombineHSV : public ShaderNode {
public:
	ShaderNodeCombineHSV(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeCombineHSV() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeUVMap : public ShaderNode {
public:
	ShaderNodeUVMap(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeUVMap() : ShaderNode(0) { }

	bool from_dupli() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "from_dupli")
	}

	void from_dupli(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "from_dupli", value)
	}

	std::string uv_map() {
		STRING_TYPE_GETTER("uv_map", resstr)
	}

	void uv_map(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_map", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeUVAlongStroke : public ShaderNode {
public:
	ShaderNodeUVAlongStroke(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeUVAlongStroke() : ShaderNode(0) { }

	bool use_tips() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tips")
	}

	void use_tips(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tips", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeSeparateXYZ : public ShaderNode {
public:
	ShaderNodeSeparateXYZ(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeSeparateXYZ() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeCombineXYZ : public ShaderNode {
public:
	ShaderNodeCombineXYZ(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeCombineXYZ() : ShaderNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeViewer : public CompositorNode {
public:
	CompositorNodeViewer(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeViewer() : CompositorNode(0) { }

	enum tileorder_items_enum {
		tileorder_items_CENTEROUT = 0,	
		tileorder_items_RANDOM = 1,	
		tileorder_items_BOTTOMUP = 2,	
		tileorder_items_RULE_OF_THIRDS = 3	
	};

	std::map<std::string, int> create_string_to_tileorder_items() {
		return {{"CENTEROUT", tileorder_items_CENTEROUT}, {"RANDOM", tileorder_items_RANDOM}, {"BOTTOMUP", tileorder_items_BOTTOMUP}, {"RULE_OF_THIRDS", tileorder_items_RULE_OF_THIRDS}};
	};

	std::map<int, std::string> create_tileorder_items_to_string() {
		return {{tileorder_items_CENTEROUT, "CENTEROUT"}, {tileorder_items_RANDOM, "RANDOM"}, {tileorder_items_BOTTOMUP, "BOTTOMUP"}, {tileorder_items_RULE_OF_THIRDS, "RULE_OF_THIRDS"}};
	};

	const std::map<std::string, int> string_to_tileorder_items = create_string_to_tileorder_items();
	const std::map<int, std::string> tileorder_items_to_string = create_tileorder_items_to_string();

	tileorder_items_enum tile_order() {
		STRING_TYPE_GETTER("tile_order", static_cast<tileorder_items_enum>(string_to_tileorder_items.at(resstr)))
	}

	void tile_order(tileorder_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "tile_order", tileorder_items_to_string.at(value))
	}

	float center_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "center_x")
	}

	void center_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "center_x", value)
	}

	float center_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "center_y")
	}

	void center_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "center_y", value)
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeRGB : public CompositorNode {
public:
	CompositorNodeRGB(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeRGB() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeValue : public CompositorNode {
public:
	CompositorNodeValue(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeValue() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMixRGB : public CompositorNode {
public:
	CompositorNodeMixRGB(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMixRGB() : CompositorNode(0) { }

	enum ramp_blend_items_enum {
		ramp_blend_items_MIX = 0,	
		ramp_blend_items_ADD = 1,	
		ramp_blend_items_MULTIPLY = 2,	
		ramp_blend_items_SUBTRACT = 3,	
		ramp_blend_items_SCREEN = 4,	
		ramp_blend_items_DIVIDE = 5,	
		ramp_blend_items_DIFFERENCE = 6,	
		ramp_blend_items_DARKEN = 7,	
		ramp_blend_items_LIGHTEN = 8,	
		ramp_blend_items_OVERLAY = 9,	
		ramp_blend_items_DODGE = 10,	
		ramp_blend_items_BURN = 11,	
		ramp_blend_items_HUE = 12,	
		ramp_blend_items_SATURATION = 13,	
		ramp_blend_items_VALUE = 14,	
		ramp_blend_items_COLOR = 15,	
		ramp_blend_items_SOFT_LIGHT = 16,	
		ramp_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_ramp_blend_items() {
		return {{"MIX", ramp_blend_items_MIX}, {"ADD", ramp_blend_items_ADD}, {"MULTIPLY", ramp_blend_items_MULTIPLY}, {"SUBTRACT", ramp_blend_items_SUBTRACT}, {"SCREEN", ramp_blend_items_SCREEN}, {"DIVIDE", ramp_blend_items_DIVIDE}, {"DIFFERENCE", ramp_blend_items_DIFFERENCE}, {"DARKEN", ramp_blend_items_DARKEN}, {"LIGHTEN", ramp_blend_items_LIGHTEN}, {"OVERLAY", ramp_blend_items_OVERLAY}, {"DODGE", ramp_blend_items_DODGE}, {"BURN", ramp_blend_items_BURN}, {"HUE", ramp_blend_items_HUE}, {"SATURATION", ramp_blend_items_SATURATION}, {"VALUE", ramp_blend_items_VALUE}, {"COLOR", ramp_blend_items_COLOR}, {"SOFT_LIGHT", ramp_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", ramp_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_ramp_blend_items_to_string() {
		return {{ramp_blend_items_MIX, "MIX"}, {ramp_blend_items_ADD, "ADD"}, {ramp_blend_items_MULTIPLY, "MULTIPLY"}, {ramp_blend_items_SUBTRACT, "SUBTRACT"}, {ramp_blend_items_SCREEN, "SCREEN"}, {ramp_blend_items_DIVIDE, "DIVIDE"}, {ramp_blend_items_DIFFERENCE, "DIFFERENCE"}, {ramp_blend_items_DARKEN, "DARKEN"}, {ramp_blend_items_LIGHTEN, "LIGHTEN"}, {ramp_blend_items_OVERLAY, "OVERLAY"}, {ramp_blend_items_DODGE, "DODGE"}, {ramp_blend_items_BURN, "BURN"}, {ramp_blend_items_HUE, "HUE"}, {ramp_blend_items_SATURATION, "SATURATION"}, {ramp_blend_items_VALUE, "VALUE"}, {ramp_blend_items_COLOR, "COLOR"}, {ramp_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {ramp_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_ramp_blend_items = create_string_to_ramp_blend_items();
	const std::map<int, std::string> ramp_blend_items_to_string = create_ramp_blend_items_to_string();

	ramp_blend_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<ramp_blend_items_enum>(string_to_ramp_blend_items.at(resstr)))
	}

	void blend_type(ramp_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", ramp_blend_items_to_string.at(value))
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeValToRGB : public CompositorNode {
public:
	CompositorNodeValToRGB(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeValToRGB() : CompositorNode(0) { }

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeRGBToBW : public CompositorNode {
public:
	CompositorNodeRGBToBW(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeRGBToBW() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeNormal : public CompositorNode {
public:
	CompositorNodeNormal(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeNormal() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCurveVec : public CompositorNode {
public:
	CompositorNodeCurveVec(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCurveVec() : CompositorNode(0) { }

	CurveMapping mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCurveRGB : public CompositorNode {
public:
	CompositorNodeCurveRGB(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCurveRGB() : CompositorNode(0) { }

	CurveMapping mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeAlphaOver : public CompositorNode {
public:
	CompositorNodeAlphaOver(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeAlphaOver() : CompositorNode(0) { }

	bool use_premultiply() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_premultiply")
	}

	void use_premultiply(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_premultiply", value)
	}

	float premul() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "premul")
	}

	void premul(float value) {
		PRIMITIVE_TYPES_SETTER("f", "premul", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeBlur : public CompositorNode {
public:
	CompositorNodeBlur(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeBlur() : CompositorNode(0) { }

	bool use_variable_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_variable_size")
	}

	void use_variable_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_variable_size", value)
	}

	int size_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size_x")
	}

	void size_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size_x", value)
	}

	int size_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size_y")
	}

	void size_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size_y", value)
	}

	bool use_relative() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative")
	}

	void use_relative(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative", value)
	}

	enum aspect_correction_type_items_enum {
		aspect_correction_type_items_NONE = 0,	
		aspect_correction_type_items_Y = 1,	
		aspect_correction_type_items_X = 2	
	};

	std::map<std::string, int> create_string_to_aspect_correction_type_items() {
		return {{"NONE", aspect_correction_type_items_NONE}, {"Y", aspect_correction_type_items_Y}, {"X", aspect_correction_type_items_X}};
	};

	std::map<int, std::string> create_aspect_correction_type_items_to_string() {
		return {{aspect_correction_type_items_NONE, "NONE"}, {aspect_correction_type_items_Y, "Y"}, {aspect_correction_type_items_X, "X"}};
	};

	const std::map<std::string, int> string_to_aspect_correction_type_items = create_string_to_aspect_correction_type_items();
	const std::map<int, std::string> aspect_correction_type_items_to_string = create_aspect_correction_type_items_to_string();

	aspect_correction_type_items_enum aspect_correction() {
		STRING_TYPE_GETTER("aspect_correction", static_cast<aspect_correction_type_items_enum>(string_to_aspect_correction_type_items.at(resstr)))
	}

	void aspect_correction(aspect_correction_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "aspect_correction", aspect_correction_type_items_to_string.at(value))
	}

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	float factor_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor_x")
	}

	void factor_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor_x", value)
	}

	float factor_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor_y")
	}

	void factor_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor_y", value)
	}

	enum filter_type_items_enum {
		filter_type_items_FLAT = 0,	
		filter_type_items_TENT = 1,	
		filter_type_items_QUAD = 2,	
		filter_type_items_CUBIC = 3,	
		filter_type_items_GAUSS = 5,	
		filter_type_items_FAST_GAUSS = 7,	
		filter_type_items_CATROM = 4,	
		filter_type_items_MITCH = 6	
	};

	std::map<std::string, int> create_string_to_filter_type_items() {
		return {{"FLAT", filter_type_items_FLAT}, {"TENT", filter_type_items_TENT}, {"QUAD", filter_type_items_QUAD}, {"CUBIC", filter_type_items_CUBIC}, {"GAUSS", filter_type_items_GAUSS}, {"FAST_GAUSS", filter_type_items_FAST_GAUSS}, {"CATROM", filter_type_items_CATROM}, {"MITCH", filter_type_items_MITCH}};
	};

	std::map<int, std::string> create_filter_type_items_to_string() {
		return {{filter_type_items_FLAT, "FLAT"}, {filter_type_items_TENT, "TENT"}, {filter_type_items_QUAD, "QUAD"}, {filter_type_items_CUBIC, "CUBIC"}, {filter_type_items_GAUSS, "GAUSS"}, {filter_type_items_FAST_GAUSS, "FAST_GAUSS"}, {filter_type_items_CATROM, "CATROM"}, {filter_type_items_MITCH, "MITCH"}};
	};

	const std::map<std::string, int> string_to_filter_type_items = create_string_to_filter_type_items();
	const std::map<int, std::string> filter_type_items_to_string = create_filter_type_items_to_string();

	filter_type_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<filter_type_items_enum>(string_to_filter_type_items.at(resstr)))
	}

	void filter_type(filter_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", filter_type_items_to_string.at(value))
	}

	bool use_bokeh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bokeh")
	}

	void use_bokeh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bokeh", value)
	}

	bool use_gamma_correction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_gamma_correction")
	}

	void use_gamma_correction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_gamma_correction", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeFilter : public CompositorNode {
public:
	CompositorNodeFilter(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeFilter() : CompositorNode(0) { }

	enum node_filter_items_enum {
		node_filter_items_SOFTEN = 0,	
		node_filter_items_SHARPEN = 1,	
		node_filter_items_LAPLACE = 2,	
		node_filter_items_SOBEL = 3,	
		node_filter_items_PREWITT = 4,	
		node_filter_items_KIRSCH = 5,	
		node_filter_items_SHADOW = 6	
	};

	std::map<std::string, int> create_string_to_node_filter_items() {
		return {{"SOFTEN", node_filter_items_SOFTEN}, {"SHARPEN", node_filter_items_SHARPEN}, {"LAPLACE", node_filter_items_LAPLACE}, {"SOBEL", node_filter_items_SOBEL}, {"PREWITT", node_filter_items_PREWITT}, {"KIRSCH", node_filter_items_KIRSCH}, {"SHADOW", node_filter_items_SHADOW}};
	};

	std::map<int, std::string> create_node_filter_items_to_string() {
		return {{node_filter_items_SOFTEN, "SOFTEN"}, {node_filter_items_SHARPEN, "SHARPEN"}, {node_filter_items_LAPLACE, "LAPLACE"}, {node_filter_items_SOBEL, "SOBEL"}, {node_filter_items_PREWITT, "PREWITT"}, {node_filter_items_KIRSCH, "KIRSCH"}, {node_filter_items_SHADOW, "SHADOW"}};
	};

	const std::map<std::string, int> string_to_node_filter_items = create_string_to_node_filter_items();
	const std::map<int, std::string> node_filter_items_to_string = create_node_filter_items_to_string();

	node_filter_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<node_filter_items_enum>(string_to_node_filter_items.at(resstr)))
	}

	void filter_type(node_filter_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", node_filter_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMapValue : public CompositorNode {
public:
	CompositorNodeMapValue(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMapValue() : CompositorNode(0) { }

	std::array<float, 1> offset() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "offset", 1)
	}

	void offset(float values[1]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset", 1)
	}

	std::array<float, 1> size() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "size", 1)
	}

	void size(float values[1]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "size", 1)
	}

	bool use_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min")
	}

	void use_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min", value)
	}

	bool use_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max")
	}

	void use_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max", value)
	}

	std::array<float, 1> min() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "min", 1)
	}

	void min(float values[1]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "min", 1)
	}

	std::array<float, 1> max() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "max", 1)
	}

	void max(float values[1]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "max", 1)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMapRange : public CompositorNode {
public:
	CompositorNodeMapRange(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMapRange() : CompositorNode(0) { }

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeTime : public CompositorNode {
public:
	CompositorNodeTime(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeTime() : CompositorNode(0) { }

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeVecBlur : public CompositorNode {
public:
	CompositorNodeVecBlur(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeVecBlur() : CompositorNode(0) { }

	int samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "samples")
	}

	void samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "samples", value)
	}

	int speed_min() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "speed_min")
	}

	void speed_min(int value) {
		PRIMITIVE_TYPES_SETTER("i", "speed_min", value)
	}

	int speed_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "speed_max")
	}

	void speed_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "speed_max", value)
	}

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	bool use_curved() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_curved")
	}

	void use_curved(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_curved", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSepRGBA : public CompositorNode {
public:
	CompositorNodeSepRGBA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSepRGBA() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSepHSVA : public CompositorNode {
public:
	CompositorNodeSepHSVA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSepHSVA() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSetAlpha : public CompositorNode {
public:
	CompositorNodeSetAlpha(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSetAlpha() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeHueSat : public CompositorNode {
public:
	CompositorNodeHueSat(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeHueSat() : CompositorNode(0) { }

	float color_hue() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_hue")
	}

	void color_hue(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_hue", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float color_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_value")
	}

	void color_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_value", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeImage : public CompositorNode {
public:
	CompositorNodeImage(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeImage() : CompositorNode(0) { }

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	bool use_straight_alpha_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_straight_alpha_output")
	}

	void use_straight_alpha_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_straight_alpha_output", value)
	}

	int frame_duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_duration")
	}

	void frame_duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_duration", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_offset() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_offset")
	}

	void frame_offset(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_offset", value)
	}

	bool use_cyclic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic")
	}

	void use_cyclic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic", value)
	}

	bool use_auto_refresh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_refresh")
	}

	void use_auto_refresh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_refresh", value)
	}

	enum prop_image_layer_items_enum {
		prop_image_layer_items_PLACEHOLDER = 0	
	};

	std::map<std::string, int> create_string_to_prop_image_layer_items() {
		return {{"PLACEHOLDER", prop_image_layer_items_PLACEHOLDER}};
	};

	std::map<int, std::string> create_prop_image_layer_items_to_string() {
		return {{prop_image_layer_items_PLACEHOLDER, "PLACEHOLDER"}};
	};

	const std::map<std::string, int> string_to_prop_image_layer_items = create_string_to_prop_image_layer_items();
	const std::map<int, std::string> prop_image_layer_items_to_string = create_prop_image_layer_items_to_string();

	prop_image_layer_items_enum layer() {
		STRING_TYPE_GETTER("layer", static_cast<prop_image_layer_items_enum>(string_to_prop_image_layer_items.at(resstr)))
	}

	void layer(prop_image_layer_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layer", prop_image_layer_items_to_string.at(value))
	}

	bool has_layers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_layers")
	}

	void has_layers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_layers", value)
	}

	enum prop_image_view_items_enum {
		prop_image_view_items_ALL = 0	
	};

	std::map<std::string, int> create_string_to_prop_image_view_items() {
		return {{"ALL", prop_image_view_items_ALL}};
	};

	std::map<int, std::string> create_prop_image_view_items_to_string() {
		return {{prop_image_view_items_ALL, "ALL"}};
	};

	const std::map<std::string, int> string_to_prop_image_view_items = create_string_to_prop_image_view_items();
	const std::map<int, std::string> prop_image_view_items_to_string = create_prop_image_view_items_to_string();

	prop_image_view_items_enum view() {
		STRING_TYPE_GETTER("view", static_cast<prop_image_view_items_enum>(string_to_prop_image_view_items.at(resstr)))
	}

	void view(prop_image_view_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view", prop_image_view_items_to_string.at(value))
	}

	bool has_views() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_views")
	}

	void has_views(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_views", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeRLayers : public CompositorNode {
public:
	CompositorNodeRLayers(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeRLayers() : CompositorNode(0) { }

	Scene scene();

	enum prop_scene_layer_items_enum {
		prop_scene_layer_items_PLACEHOLDER = 0	
	};

	std::map<std::string, int> create_string_to_prop_scene_layer_items() {
		return {{"PLACEHOLDER", prop_scene_layer_items_PLACEHOLDER}};
	};

	std::map<int, std::string> create_prop_scene_layer_items_to_string() {
		return {{prop_scene_layer_items_PLACEHOLDER, "PLACEHOLDER"}};
	};

	const std::map<std::string, int> string_to_prop_scene_layer_items = create_string_to_prop_scene_layer_items();
	const std::map<int, std::string> prop_scene_layer_items_to_string = create_prop_scene_layer_items_to_string();

	prop_scene_layer_items_enum layer() {
		STRING_TYPE_GETTER("layer", static_cast<prop_scene_layer_items_enum>(string_to_prop_scene_layer_items.at(resstr)))
	}

	void layer(prop_scene_layer_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layer", prop_scene_layer_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeComposite : public CompositorNode {
public:
	CompositorNodeComposite(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeComposite() : CompositorNode(0) { }

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeOutputFile : public CompositorNode {
public:
	CompositorNodeOutputFile(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeOutputFile() : CompositorNode(0) { }

	std::string base_path() {
		STRING_TYPE_GETTER("base_path", resstr)
	}

	void base_path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "base_path", value)
	}

	int active_input_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_input_index")
	}

	void active_input_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_input_index", value)
	}

	ImageFormatSettings format();

	std::map<std::string, NodeOutputFileSlotFile> file_slots();

	std::map<std::string, NodeOutputFileSlotLayer> layer_slots();

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeTexture : public CompositorNode {
public:
	CompositorNodeTexture(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeTexture() : CompositorNode(0) { }

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	int node_output() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "node_output")
	}

	void node_output(int value) {
		PRIMITIVE_TYPES_SETTER("i", "node_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeTranslate : public CompositorNode {
public:
	CompositorNodeTranslate(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeTranslate() : CompositorNode(0) { }

	bool use_relative() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative")
	}

	void use_relative(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative", value)
	}

	enum translate_items_enum {
		translate_items_NONE = 0,	
		translate_items_XAXIS = 1,	
		translate_items_YAXIS = 2,	
		translate_items_BOTH = 3	
	};

	std::map<std::string, int> create_string_to_translate_items() {
		return {{"NONE", translate_items_NONE}, {"XAXIS", translate_items_XAXIS}, {"YAXIS", translate_items_YAXIS}, {"BOTH", translate_items_BOTH}};
	};

	std::map<int, std::string> create_translate_items_to_string() {
		return {{translate_items_NONE, "NONE"}, {translate_items_XAXIS, "XAXIS"}, {translate_items_YAXIS, "YAXIS"}, {translate_items_BOTH, "BOTH"}};
	};

	const std::map<std::string, int> string_to_translate_items = create_string_to_translate_items();
	const std::map<int, std::string> translate_items_to_string = create_translate_items_to_string();

	translate_items_enum wrap_axis() {
		STRING_TYPE_GETTER("wrap_axis", static_cast<translate_items_enum>(string_to_translate_items.at(resstr)))
	}

	void wrap_axis(translate_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "wrap_axis", translate_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeZcombine : public CompositorNode {
public:
	CompositorNodeZcombine(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeZcombine() : CompositorNode(0) { }

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool use_antialias_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_antialias_z")
	}

	void use_antialias_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_antialias_z", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCombRGBA : public CompositorNode {
public:
	CompositorNodeCombRGBA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCombRGBA() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDilateErode : public CompositorNode {
public:
	CompositorNodeDilateErode(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDilateErode() : CompositorNode(0) { }

	enum mode_items_enum {
		mode_items_STEP = 0,	
		mode_items_THRESHOLD = 1,	
		mode_items_DISTANCE = 2,	
		mode_items_FEATHER = 3	
	};

	std::map<std::string, int> create_string_to_mode_items() {
		return {{"STEP", mode_items_STEP}, {"THRESHOLD", mode_items_THRESHOLD}, {"DISTANCE", mode_items_DISTANCE}, {"FEATHER", mode_items_FEATHER}};
	};

	std::map<int, std::string> create_mode_items_to_string() {
		return {{mode_items_STEP, "STEP"}, {mode_items_THRESHOLD, "THRESHOLD"}, {mode_items_DISTANCE, "DISTANCE"}, {mode_items_FEATHER, "FEATHER"}};
	};

	const std::map<std::string, int> string_to_mode_items = create_string_to_mode_items();
	const std::map<int, std::string> mode_items_to_string = create_mode_items_to_string();

	mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<mode_items_enum>(string_to_mode_items.at(resstr)))
	}

	void mode(mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", mode_items_to_string.at(value))
	}

	int distance() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "distance")
	}

	void distance(int value) {
		PRIMITIVE_TYPES_SETTER("i", "distance", value)
	}

	float edge() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "edge")
	}

	void edge(float value) {
		PRIMITIVE_TYPES_SETTER("f", "edge", value)
	}

	enum proportional_falloff_curve_only_items_enum {
		proportional_falloff_curve_only_items_SMOOTH = 0,	
		proportional_falloff_curve_only_items_SPHERE = 1,	
		proportional_falloff_curve_only_items_ROOT = 2,	
		proportional_falloff_curve_only_items_INVERSE_SQUARE = 7,	
		proportional_falloff_curve_only_items_SHARP = 3,	
		proportional_falloff_curve_only_items_LINEAR = 4	
	};

	std::map<std::string, int> create_string_to_proportional_falloff_curve_only_items() {
		return {{"SMOOTH", proportional_falloff_curve_only_items_SMOOTH}, {"SPHERE", proportional_falloff_curve_only_items_SPHERE}, {"ROOT", proportional_falloff_curve_only_items_ROOT}, {"INVERSE_SQUARE", proportional_falloff_curve_only_items_INVERSE_SQUARE}, {"SHARP", proportional_falloff_curve_only_items_SHARP}, {"LINEAR", proportional_falloff_curve_only_items_LINEAR}};
	};

	std::map<int, std::string> create_proportional_falloff_curve_only_items_to_string() {
		return {{proportional_falloff_curve_only_items_SMOOTH, "SMOOTH"}, {proportional_falloff_curve_only_items_SPHERE, "SPHERE"}, {proportional_falloff_curve_only_items_ROOT, "ROOT"}, {proportional_falloff_curve_only_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {proportional_falloff_curve_only_items_SHARP, "SHARP"}, {proportional_falloff_curve_only_items_LINEAR, "LINEAR"}};
	};

	const std::map<std::string, int> string_to_proportional_falloff_curve_only_items = create_string_to_proportional_falloff_curve_only_items();
	const std::map<int, std::string> proportional_falloff_curve_only_items_to_string = create_proportional_falloff_curve_only_items_to_string();

	proportional_falloff_curve_only_items_enum falloff() {
		STRING_TYPE_GETTER("falloff", static_cast<proportional_falloff_curve_only_items_enum>(string_to_proportional_falloff_curve_only_items.at(resstr)))
	}

	void falloff(proportional_falloff_curve_only_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff", proportional_falloff_curve_only_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeInpaint : public CompositorNode {
public:
	CompositorNodeInpaint(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeInpaint() : CompositorNode(0) { }

	int distance() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "distance")
	}

	void distance(int value) {
		PRIMITIVE_TYPES_SETTER("i", "distance", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDespeckle : public CompositorNode {
public:
	CompositorNodeDespeckle(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDespeckle() : CompositorNode(0) { }

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	float threshold_neighbor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold_neighbor")
	}

	void threshold_neighbor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold_neighbor", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeRotate : public CompositorNode {
public:
	CompositorNodeRotate(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeRotate() : CompositorNode(0) { }

	enum node_sampler_type_items_enum {
		node_sampler_type_items_NEAREST = 0,	
		node_sampler_type_items_BILINEAR = 1,	
		node_sampler_type_items_BICUBIC = 2	
	};

	std::map<std::string, int> create_string_to_node_sampler_type_items() {
		return {{"NEAREST", node_sampler_type_items_NEAREST}, {"BILINEAR", node_sampler_type_items_BILINEAR}, {"BICUBIC", node_sampler_type_items_BICUBIC}};
	};

	std::map<int, std::string> create_node_sampler_type_items_to_string() {
		return {{node_sampler_type_items_NEAREST, "NEAREST"}, {node_sampler_type_items_BILINEAR, "BILINEAR"}, {node_sampler_type_items_BICUBIC, "BICUBIC"}};
	};

	const std::map<std::string, int> string_to_node_sampler_type_items = create_string_to_node_sampler_type_items();
	const std::map<int, std::string> node_sampler_type_items_to_string = create_node_sampler_type_items_to_string();

	node_sampler_type_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<node_sampler_type_items_enum>(string_to_node_sampler_type_items.at(resstr)))
	}

	void filter_type(node_sampler_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", node_sampler_type_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeScale : public CompositorNode {
public:
	CompositorNodeScale(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeScale() : CompositorNode(0) { }

	enum space_items_enum {
		space_items_RELATIVE = 0,	
		space_items_ABSOLUTE = 1,	
		space_items_SCENE_SIZE = 2,	
		space_items_RENDER_SIZE = 3	
	};

	std::map<std::string, int> create_string_to_space_items() {
		return {{"RELATIVE", space_items_RELATIVE}, {"ABSOLUTE", space_items_ABSOLUTE}, {"SCENE_SIZE", space_items_SCENE_SIZE}, {"RENDER_SIZE", space_items_RENDER_SIZE}};
	};

	std::map<int, std::string> create_space_items_to_string() {
		return {{space_items_RELATIVE, "RELATIVE"}, {space_items_ABSOLUTE, "ABSOLUTE"}, {space_items_SCENE_SIZE, "SCENE_SIZE"}, {space_items_RENDER_SIZE, "RENDER_SIZE"}};
	};

	const std::map<std::string, int> string_to_space_items = create_string_to_space_items();
	const std::map<int, std::string> space_items_to_string = create_space_items_to_string();

	space_items_enum space() {
		STRING_TYPE_GETTER("space", static_cast<space_items_enum>(string_to_space_items.at(resstr)))
	}

	void space(space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "space", space_items_to_string.at(value))
	}

	enum space_frame_items_enum {
		space_frame_items_STRETCH = 0,	
		space_frame_items_FIT = 1,	
		space_frame_items_CROP = 3	
	};

	std::map<std::string, int> create_string_to_space_frame_items() {
		return {{"STRETCH", space_frame_items_STRETCH}, {"FIT", space_frame_items_FIT}, {"CROP", space_frame_items_CROP}};
	};

	std::map<int, std::string> create_space_frame_items_to_string() {
		return {{space_frame_items_STRETCH, "STRETCH"}, {space_frame_items_FIT, "FIT"}, {space_frame_items_CROP, "CROP"}};
	};

	const std::map<std::string, int> string_to_space_frame_items = create_string_to_space_frame_items();
	const std::map<int, std::string> space_frame_items_to_string = create_space_frame_items_to_string();

	space_frame_items_enum frame_method() {
		STRING_TYPE_GETTER("frame_method", static_cast<space_frame_items_enum>(string_to_space_frame_items.at(resstr)))
	}

	void frame_method(space_frame_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "frame_method", space_frame_items_to_string.at(value))
	}

	float offset_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_x")
	}

	void offset_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_x", value)
	}

	float offset_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_y")
	}

	void offset_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_y", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSepYCCA : public CompositorNode {
public:
	CompositorNodeSepYCCA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSepYCCA() : CompositorNode(0) { }

	enum node_ycc_items_enum {
		node_ycc_items_ITUBT601 = 0,	
		node_ycc_items_ITUBT709 = 1,	
		node_ycc_items_JFIF = 2	
	};

	std::map<std::string, int> create_string_to_node_ycc_items() {
		return {{"ITUBT601", node_ycc_items_ITUBT601}, {"ITUBT709", node_ycc_items_ITUBT709}, {"JFIF", node_ycc_items_JFIF}};
	};

	std::map<int, std::string> create_node_ycc_items_to_string() {
		return {{node_ycc_items_ITUBT601, "ITUBT601"}, {node_ycc_items_ITUBT709, "ITUBT709"}, {node_ycc_items_JFIF, "JFIF"}};
	};

	const std::map<std::string, int> string_to_node_ycc_items = create_string_to_node_ycc_items();
	const std::map<int, std::string> node_ycc_items_to_string = create_node_ycc_items_to_string();

	node_ycc_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<node_ycc_items_enum>(string_to_node_ycc_items.at(resstr)))
	}

	void mode(node_ycc_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", node_ycc_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCombYCCA : public CompositorNode {
public:
	CompositorNodeCombYCCA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCombYCCA() : CompositorNode(0) { }

	enum node_ycc_items_enum {
		node_ycc_items_ITUBT601 = 0,	
		node_ycc_items_ITUBT709 = 1,	
		node_ycc_items_JFIF = 2	
	};

	std::map<std::string, int> create_string_to_node_ycc_items() {
		return {{"ITUBT601", node_ycc_items_ITUBT601}, {"ITUBT709", node_ycc_items_ITUBT709}, {"JFIF", node_ycc_items_JFIF}};
	};

	std::map<int, std::string> create_node_ycc_items_to_string() {
		return {{node_ycc_items_ITUBT601, "ITUBT601"}, {node_ycc_items_ITUBT709, "ITUBT709"}, {node_ycc_items_JFIF, "JFIF"}};
	};

	const std::map<std::string, int> string_to_node_ycc_items = create_string_to_node_ycc_items();
	const std::map<int, std::string> node_ycc_items_to_string = create_node_ycc_items_to_string();

	node_ycc_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<node_ycc_items_enum>(string_to_node_ycc_items.at(resstr)))
	}

	void mode(node_ycc_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", node_ycc_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSepYUVA : public CompositorNode {
public:
	CompositorNodeSepYUVA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSepYUVA() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCombYUVA : public CompositorNode {
public:
	CompositorNodeCombYUVA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCombYUVA() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDiffMatte : public CompositorNode {
public:
	CompositorNodeDiffMatte(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDiffMatte() : CompositorNode(0) { }

	float tolerance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tolerance")
	}

	void tolerance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tolerance", value)
	}

	float falloff() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff")
	}

	void falloff(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeColorSpill : public CompositorNode {
public:
	CompositorNodeColorSpill(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeColorSpill() : CompositorNode(0) { }

	enum channel_items_enum {
		channel_items_R = 1,	
		channel_items_G = 2,	
		channel_items_B = 3	
	};

	std::map<std::string, int> create_string_to_channel_items() {
		return {{"R", channel_items_R}, {"G", channel_items_G}, {"B", channel_items_B}};
	};

	std::map<int, std::string> create_channel_items_to_string() {
		return {{channel_items_R, "R"}, {channel_items_G, "G"}, {channel_items_B, "B"}};
	};

	const std::map<std::string, int> string_to_channel_items = create_string_to_channel_items();
	const std::map<int, std::string> channel_items_to_string = create_channel_items_to_string();

	channel_items_enum channel() {
		STRING_TYPE_GETTER("channel", static_cast<channel_items_enum>(string_to_channel_items.at(resstr)))
	}

	void channel(channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "channel", channel_items_to_string.at(value))
	}

	enum algorithm_items_enum {
		algorithm_items_SIMPLE = 0,	
		algorithm_items_AVERAGE = 1	
	};

	std::map<std::string, int> create_string_to_algorithm_items() {
		return {{"SIMPLE", algorithm_items_SIMPLE}, {"AVERAGE", algorithm_items_AVERAGE}};
	};

	std::map<int, std::string> create_algorithm_items_to_string() {
		return {{algorithm_items_SIMPLE, "SIMPLE"}, {algorithm_items_AVERAGE, "AVERAGE"}};
	};

	const std::map<std::string, int> string_to_algorithm_items = create_string_to_algorithm_items();
	const std::map<int, std::string> algorithm_items_to_string = create_algorithm_items_to_string();

	algorithm_items_enum limit_method() {
		STRING_TYPE_GETTER("limit_method", static_cast<algorithm_items_enum>(string_to_algorithm_items.at(resstr)))
	}

	void limit_method(algorithm_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit_method", algorithm_items_to_string.at(value))
	}

	enum limit_channel_items_enum {
		limit_channel_items_R = 1,	
		limit_channel_items_G = 2,	
		limit_channel_items_B = 3	
	};

	std::map<std::string, int> create_string_to_limit_channel_items() {
		return {{"R", limit_channel_items_R}, {"G", limit_channel_items_G}, {"B", limit_channel_items_B}};
	};

	std::map<int, std::string> create_limit_channel_items_to_string() {
		return {{limit_channel_items_R, "R"}, {limit_channel_items_G, "G"}, {limit_channel_items_B, "B"}};
	};

	const std::map<std::string, int> string_to_limit_channel_items = create_string_to_limit_channel_items();
	const std::map<int, std::string> limit_channel_items_to_string = create_limit_channel_items_to_string();

	limit_channel_items_enum limit_channel() {
		STRING_TYPE_GETTER("limit_channel", static_cast<limit_channel_items_enum>(string_to_limit_channel_items.at(resstr)))
	}

	void limit_channel(limit_channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit_channel", limit_channel_items_to_string.at(value))
	}

	float ratio() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ratio")
	}

	void ratio(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ratio", value)
	}

	bool use_unspill() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_unspill")
	}

	void use_unspill(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_unspill", value)
	}

	float unspill_red() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "unspill_red")
	}

	void unspill_red(float value) {
		PRIMITIVE_TYPES_SETTER("f", "unspill_red", value)
	}

	float unspill_green() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "unspill_green")
	}

	void unspill_green(float value) {
		PRIMITIVE_TYPES_SETTER("f", "unspill_green", value)
	}

	float unspill_blue() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "unspill_blue")
	}

	void unspill_blue(float value) {
		PRIMITIVE_TYPES_SETTER("f", "unspill_blue", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeChromaMatte : public CompositorNode {
public:
	CompositorNodeChromaMatte(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeChromaMatte() : CompositorNode(0) { }

	float tolerance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tolerance")
	}

	void tolerance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tolerance", value)
	}

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	float lift() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lift")
	}

	void lift(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lift", value)
	}

	float gain() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gain")
	}

	void gain(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gain", value)
	}

	float shadow_adjust() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_adjust")
	}

	void shadow_adjust(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_adjust", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeChannelMatte : public CompositorNode {
public:
	CompositorNodeChannelMatte(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeChannelMatte() : CompositorNode(0) { }

	enum color_space_items_enum {
		color_space_items_RGB = 1,	
		color_space_items_HSV = 2,	
		color_space_items_YUV = 3,	
		color_space_items_YCC = 4	
	};

	std::map<std::string, int> create_string_to_color_space_items() {
		return {{"RGB", color_space_items_RGB}, {"HSV", color_space_items_HSV}, {"YUV", color_space_items_YUV}, {"YCC", color_space_items_YCC}};
	};

	std::map<int, std::string> create_color_space_items_to_string() {
		return {{color_space_items_RGB, "RGB"}, {color_space_items_HSV, "HSV"}, {color_space_items_YUV, "YUV"}, {color_space_items_YCC, "YCC"}};
	};

	const std::map<std::string, int> string_to_color_space_items = create_string_to_color_space_items();
	const std::map<int, std::string> color_space_items_to_string = create_color_space_items_to_string();

	color_space_items_enum color_space() {
		STRING_TYPE_GETTER("color_space", static_cast<color_space_items_enum>(string_to_color_space_items.at(resstr)))
	}

	void color_space(color_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_space", color_space_items_to_string.at(value))
	}

	enum prop_tri_channel_items_enum {
		prop_tri_channel_items_R = 1,	
		prop_tri_channel_items_G = 2,	
		prop_tri_channel_items_B = 3	
	};

	std::map<std::string, int> create_string_to_prop_tri_channel_items() {
		return {{"R", prop_tri_channel_items_R}, {"G", prop_tri_channel_items_G}, {"B", prop_tri_channel_items_B}};
	};

	std::map<int, std::string> create_prop_tri_channel_items_to_string() {
		return {{prop_tri_channel_items_R, "R"}, {prop_tri_channel_items_G, "G"}, {prop_tri_channel_items_B, "B"}};
	};

	const std::map<std::string, int> string_to_prop_tri_channel_items = create_string_to_prop_tri_channel_items();
	const std::map<int, std::string> prop_tri_channel_items_to_string = create_prop_tri_channel_items_to_string();

	prop_tri_channel_items_enum matte_channel() {
		STRING_TYPE_GETTER("matte_channel", static_cast<prop_tri_channel_items_enum>(string_to_prop_tri_channel_items.at(resstr)))
	}

	void matte_channel(prop_tri_channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "matte_channel", prop_tri_channel_items_to_string.at(value))
	}

	enum algorithm_items_enum {
		algorithm_items_SINGLE = 0,	
		algorithm_items_MAX = 1	
	};

	std::map<std::string, int> create_string_to_algorithm_items() {
		return {{"SINGLE", algorithm_items_SINGLE}, {"MAX", algorithm_items_MAX}};
	};

	std::map<int, std::string> create_algorithm_items_to_string() {
		return {{algorithm_items_SINGLE, "SINGLE"}, {algorithm_items_MAX, "MAX"}};
	};

	const std::map<std::string, int> string_to_algorithm_items = create_string_to_algorithm_items();
	const std::map<int, std::string> algorithm_items_to_string = create_algorithm_items_to_string();

	algorithm_items_enum limit_method() {
		STRING_TYPE_GETTER("limit_method", static_cast<algorithm_items_enum>(string_to_algorithm_items.at(resstr)))
	}

	void limit_method(algorithm_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit_method", algorithm_items_to_string.at(value))
	}

	prop_tri_channel_items_enum limit_channel() {
		STRING_TYPE_GETTER("limit_channel", static_cast<prop_tri_channel_items_enum>(string_to_prop_tri_channel_items.at(resstr)))
	}

	void limit_channel(prop_tri_channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "limit_channel", prop_tri_channel_items_to_string.at(value))
	}

	float limit_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_max")
	}

	void limit_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_max", value)
	}

	float limit_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_min")
	}

	void limit_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_min", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeFlip : public CompositorNode {
public:
	CompositorNodeFlip(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeFlip() : CompositorNode(0) { }

	enum node_flip_items_enum {
		node_flip_items_X = 0,	
		node_flip_items_Y = 1,	
		node_flip_items_XY = 2	
	};

	std::map<std::string, int> create_string_to_node_flip_items() {
		return {{"X", node_flip_items_X}, {"Y", node_flip_items_Y}, {"XY", node_flip_items_XY}};
	};

	std::map<int, std::string> create_node_flip_items_to_string() {
		return {{node_flip_items_X, "X"}, {node_flip_items_Y, "Y"}, {node_flip_items_XY, "XY"}};
	};

	const std::map<std::string, int> string_to_node_flip_items = create_string_to_node_flip_items();
	const std::map<int, std::string> node_flip_items_to_string = create_node_flip_items_to_string();

	node_flip_items_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<node_flip_items_enum>(string_to_node_flip_items.at(resstr)))
	}

	void axis(node_flip_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", node_flip_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSplitViewer : public CompositorNode {
public:
	CompositorNodeSplitViewer(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSplitViewer() : CompositorNode(0) { }

	enum axis_items_enum {
		axis_items_X = 0,	
		axis_items_Y = 1	
	};

	std::map<std::string, int> create_string_to_axis_items() {
		return {{"X", axis_items_X}, {"Y", axis_items_Y}};
	};

	std::map<int, std::string> create_axis_items_to_string() {
		return {{axis_items_X, "X"}, {axis_items_Y, "Y"}};
	};

	const std::map<std::string, int> string_to_axis_items = create_string_to_axis_items();
	const std::map<int, std::string> axis_items_to_string = create_axis_items_to_string();

	axis_items_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<axis_items_enum>(string_to_axis_items.at(resstr)))
	}

	void axis(axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", axis_items_to_string.at(value))
	}

	int factor() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "factor")
	}

	void factor(int value) {
		PRIMITIVE_TYPES_SETTER("i", "factor", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMapUV : public CompositorNode {
public:
	CompositorNodeMapUV(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMapUV() : CompositorNode(0) { }

	int alpha() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "alpha")
	}

	void alpha(int value) {
		PRIMITIVE_TYPES_SETTER("i", "alpha", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeIDMask : public CompositorNode {
public:
	CompositorNodeIDMask(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeIDMask() : CompositorNode(0) { }

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}

	bool use_antialiasing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_antialiasing")
	}

	void use_antialiasing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_antialiasing", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDoubleEdgeMask : public CompositorNode {
public:
	CompositorNodeDoubleEdgeMask(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDoubleEdgeMask() : CompositorNode(0) { }

	enum InnerEdgeMode_items_enum {
		InnerEdgeMode_items_ALL = 0,	
		InnerEdgeMode_items_ADJACENT_ONLY = 1	
	};

	std::map<std::string, int> create_string_to_InnerEdgeMode_items() {
		return {{"ALL", InnerEdgeMode_items_ALL}, {"ADJACENT_ONLY", InnerEdgeMode_items_ADJACENT_ONLY}};
	};

	std::map<int, std::string> create_InnerEdgeMode_items_to_string() {
		return {{InnerEdgeMode_items_ALL, "ALL"}, {InnerEdgeMode_items_ADJACENT_ONLY, "ADJACENT_ONLY"}};
	};

	const std::map<std::string, int> string_to_InnerEdgeMode_items = create_string_to_InnerEdgeMode_items();
	const std::map<int, std::string> InnerEdgeMode_items_to_string = create_InnerEdgeMode_items_to_string();

	InnerEdgeMode_items_enum inner_mode() {
		STRING_TYPE_GETTER("inner_mode", static_cast<InnerEdgeMode_items_enum>(string_to_InnerEdgeMode_items.at(resstr)))
	}

	void inner_mode(InnerEdgeMode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "inner_mode", InnerEdgeMode_items_to_string.at(value))
	}

	enum BufEdgeMode_items_enum {
		BufEdgeMode_items_BLEED_OUT = 0,	
		BufEdgeMode_items_KEEP_IN = 1	
	};

	std::map<std::string, int> create_string_to_BufEdgeMode_items() {
		return {{"BLEED_OUT", BufEdgeMode_items_BLEED_OUT}, {"KEEP_IN", BufEdgeMode_items_KEEP_IN}};
	};

	std::map<int, std::string> create_BufEdgeMode_items_to_string() {
		return {{BufEdgeMode_items_BLEED_OUT, "BLEED_OUT"}, {BufEdgeMode_items_KEEP_IN, "KEEP_IN"}};
	};

	const std::map<std::string, int> string_to_BufEdgeMode_items = create_string_to_BufEdgeMode_items();
	const std::map<int, std::string> BufEdgeMode_items_to_string = create_BufEdgeMode_items_to_string();

	BufEdgeMode_items_enum edge_mode() {
		STRING_TYPE_GETTER("edge_mode", static_cast<BufEdgeMode_items_enum>(string_to_BufEdgeMode_items.at(resstr)))
	}

	void edge_mode(BufEdgeMode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edge_mode", BufEdgeMode_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDefocus : public CompositorNode {
public:
	CompositorNodeDefocus(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDefocus() : CompositorNode(0) { }

	Scene scene();

	enum bokeh_items_enum {
		bokeh_items_OCTAGON = 8,	
		bokeh_items_HEPTAGON = 7,	
		bokeh_items_HEXAGON = 6,	
		bokeh_items_PENTAGON = 5,	
		bokeh_items_SQUARE = 4,	
		bokeh_items_TRIANGLE = 3,	
		bokeh_items_CIRCLE = 0	
	};

	std::map<std::string, int> create_string_to_bokeh_items() {
		return {{"OCTAGON", bokeh_items_OCTAGON}, {"HEPTAGON", bokeh_items_HEPTAGON}, {"HEXAGON", bokeh_items_HEXAGON}, {"PENTAGON", bokeh_items_PENTAGON}, {"SQUARE", bokeh_items_SQUARE}, {"TRIANGLE", bokeh_items_TRIANGLE}, {"CIRCLE", bokeh_items_CIRCLE}};
	};

	std::map<int, std::string> create_bokeh_items_to_string() {
		return {{bokeh_items_OCTAGON, "OCTAGON"}, {bokeh_items_HEPTAGON, "HEPTAGON"}, {bokeh_items_HEXAGON, "HEXAGON"}, {bokeh_items_PENTAGON, "PENTAGON"}, {bokeh_items_SQUARE, "SQUARE"}, {bokeh_items_TRIANGLE, "TRIANGLE"}, {bokeh_items_CIRCLE, "CIRCLE"}};
	};

	const std::map<std::string, int> string_to_bokeh_items = create_string_to_bokeh_items();
	const std::map<int, std::string> bokeh_items_to_string = create_bokeh_items_to_string();

	bokeh_items_enum bokeh() {
		STRING_TYPE_GETTER("bokeh", static_cast<bokeh_items_enum>(string_to_bokeh_items.at(resstr)))
	}

	void bokeh(bokeh_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bokeh", bokeh_items_to_string.at(value))
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	bool use_gamma_correction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_gamma_correction")
	}

	void use_gamma_correction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_gamma_correction", value)
	}

	float f_stop() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "f_stop")
	}

	void f_stop(float value) {
		PRIMITIVE_TYPES_SETTER("f", "f_stop", value)
	}

	float blur_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blur_max")
	}

	void blur_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blur_max", value)
	}

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	bool use_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preview")
	}

	void use_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preview", value)
	}

	bool use_zbuffer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_zbuffer")
	}

	void use_zbuffer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_zbuffer", value)
	}

	float z_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "z_scale")
	}

	void z_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "z_scale", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDisplace : public CompositorNode {
public:
	CompositorNodeDisplace(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDisplace() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCombHSVA : public CompositorNode {
public:
	CompositorNodeCombHSVA(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCombHSVA() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMath : public CompositorNode {
public:
	CompositorNodeMath(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMath() : CompositorNode(0) { }

	enum node_math_items_enum {
		node_math_items_ADD = 0,	
		node_math_items_SUBTRACT = 1,	
		node_math_items_MULTIPLY = 2,	
		node_math_items_DIVIDE = 3,	
		node_math_items_SINE = 4,	
		node_math_items_COSINE = 5,	
		node_math_items_TANGENT = 6,	
		node_math_items_ARCSINE = 7,	
		node_math_items_ARCCOSINE = 8,	
		node_math_items_ARCTANGENT = 9,	
		node_math_items_POWER = 10,	
		node_math_items_LOGARITHM = 11,	
		node_math_items_MINIMUM = 12,	
		node_math_items_MAXIMUM = 13,	
		node_math_items_ROUND = 14,	
		node_math_items_LESS_THAN = 15,	
		node_math_items_GREATER_THAN = 16,	
		node_math_items_MODULO = 17,	
		node_math_items_ABSOLUTE = 18	
	};

	std::map<std::string, int> create_string_to_node_math_items() {
		return {{"ADD", node_math_items_ADD}, {"SUBTRACT", node_math_items_SUBTRACT}, {"MULTIPLY", node_math_items_MULTIPLY}, {"DIVIDE", node_math_items_DIVIDE}, {"SINE", node_math_items_SINE}, {"COSINE", node_math_items_COSINE}, {"TANGENT", node_math_items_TANGENT}, {"ARCSINE", node_math_items_ARCSINE}, {"ARCCOSINE", node_math_items_ARCCOSINE}, {"ARCTANGENT", node_math_items_ARCTANGENT}, {"POWER", node_math_items_POWER}, {"LOGARITHM", node_math_items_LOGARITHM}, {"MINIMUM", node_math_items_MINIMUM}, {"MAXIMUM", node_math_items_MAXIMUM}, {"ROUND", node_math_items_ROUND}, {"LESS_THAN", node_math_items_LESS_THAN}, {"GREATER_THAN", node_math_items_GREATER_THAN}, {"MODULO", node_math_items_MODULO}, {"ABSOLUTE", node_math_items_ABSOLUTE}};
	};

	std::map<int, std::string> create_node_math_items_to_string() {
		return {{node_math_items_ADD, "ADD"}, {node_math_items_SUBTRACT, "SUBTRACT"}, {node_math_items_MULTIPLY, "MULTIPLY"}, {node_math_items_DIVIDE, "DIVIDE"}, {node_math_items_SINE, "SINE"}, {node_math_items_COSINE, "COSINE"}, {node_math_items_TANGENT, "TANGENT"}, {node_math_items_ARCSINE, "ARCSINE"}, {node_math_items_ARCCOSINE, "ARCCOSINE"}, {node_math_items_ARCTANGENT, "ARCTANGENT"}, {node_math_items_POWER, "POWER"}, {node_math_items_LOGARITHM, "LOGARITHM"}, {node_math_items_MINIMUM, "MINIMUM"}, {node_math_items_MAXIMUM, "MAXIMUM"}, {node_math_items_ROUND, "ROUND"}, {node_math_items_LESS_THAN, "LESS_THAN"}, {node_math_items_GREATER_THAN, "GREATER_THAN"}, {node_math_items_MODULO, "MODULO"}, {node_math_items_ABSOLUTE, "ABSOLUTE"}};
	};

	const std::map<std::string, int> string_to_node_math_items = create_string_to_node_math_items();
	const std::map<int, std::string> node_math_items_to_string = create_node_math_items_to_string();

	node_math_items_enum operation() {
		STRING_TYPE_GETTER("operation", static_cast<node_math_items_enum>(string_to_node_math_items.at(resstr)))
	}

	void operation(node_math_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "operation", node_math_items_to_string.at(value))
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeLumaMatte : public CompositorNode {
public:
	CompositorNodeLumaMatte(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeLumaMatte() : CompositorNode(0) { }

	float limit_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_max")
	}

	void limit_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_max", value)
	}

	float limit_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_min")
	}

	void limit_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_min", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeBrightContrast : public CompositorNode {
public:
	CompositorNodeBrightContrast(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeBrightContrast() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeGamma : public CompositorNode {
public:
	CompositorNodeGamma(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeGamma() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeInvert : public CompositorNode {
public:
	CompositorNodeInvert(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeInvert() : CompositorNode(0) { }

	bool invert_rgb() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_rgb")
	}

	void invert_rgb(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_rgb", value)
	}

	bool invert_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_alpha")
	}

	void invert_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_alpha", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeNormalize : public CompositorNode {
public:
	CompositorNodeNormalize(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeNormalize() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCrop : public CompositorNode {
public:
	CompositorNodeCrop(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCrop() : CompositorNode(0) { }

	bool use_crop_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop_size")
	}

	void use_crop_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop_size", value)
	}

	bool relative() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "relative")
	}

	void relative(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "relative", value)
	}

	int min_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_x")
	}

	void min_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_x", value)
	}

	int max_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_x")
	}

	void max_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_x", value)
	}

	int min_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_y")
	}

	void min_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_y", value)
	}

	int max_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_y")
	}

	void max_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_y", value)
	}

	float rel_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rel_min_x")
	}

	void rel_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rel_min_x", value)
	}

	float rel_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rel_max_x")
	}

	void rel_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rel_max_x", value)
	}

	float rel_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rel_min_y")
	}

	void rel_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rel_min_y", value)
	}

	float rel_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rel_max_y")
	}

	void rel_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rel_max_y", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDBlur : public CompositorNode {
public:
	CompositorNodeDBlur(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDBlur() : CompositorNode(0) { }

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	bool use_wrap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_wrap")
	}

	void use_wrap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_wrap", value)
	}

	float center_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "center_x")
	}

	void center_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "center_x", value)
	}

	float center_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "center_y")
	}

	void center_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "center_y", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	float spin() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spin")
	}

	void spin(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spin", value)
	}

	float zoom() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "zoom")
	}

	void zoom(float value) {
		PRIMITIVE_TYPES_SETTER("f", "zoom", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeBilateralblur : public CompositorNode {
public:
	CompositorNodeBilateralblur(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeBilateralblur() : CompositorNode(0) { }

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	float sigma_color() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sigma_color")
	}

	void sigma_color(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sigma_color", value)
	}

	float sigma_space() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sigma_space")
	}

	void sigma_space(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sigma_space", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodePremulKey : public CompositorNode {
public:
	CompositorNodePremulKey(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodePremulKey() : CompositorNode(0) { }

	enum type_items_enum {
		type_items_STRAIGHT_TO_PREMUL = 0,	
		type_items_PREMUL_TO_STRAIGHT = 1	
	};

	std::map<std::string, int> create_string_to_type_items() {
		return {{"STRAIGHT_TO_PREMUL", type_items_STRAIGHT_TO_PREMUL}, {"PREMUL_TO_STRAIGHT", type_items_PREMUL_TO_STRAIGHT}};
	};

	std::map<int, std::string> create_type_items_to_string() {
		return {{type_items_STRAIGHT_TO_PREMUL, "STRAIGHT_TO_PREMUL"}, {type_items_PREMUL_TO_STRAIGHT, "PREMUL_TO_STRAIGHT"}};
	};

	const std::map<std::string, int> string_to_type_items = create_string_to_type_items();
	const std::map<int, std::string> type_items_to_string = create_type_items_to_string();

	type_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<type_items_enum>(string_to_type_items.at(resstr)))
	}

	void mapping(type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", type_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeGlare : public CompositorNode {
public:
	CompositorNodeGlare(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeGlare() : CompositorNode(0) { }

	enum type_items_enum {
		type_items_GHOSTS = 3,	
		type_items_STREAKS = 2,	
		type_items_FOG_GLOW = 1,	
		type_items_SIMPLE_STAR = 0	
	};

	std::map<std::string, int> create_string_to_type_items() {
		return {{"GHOSTS", type_items_GHOSTS}, {"STREAKS", type_items_STREAKS}, {"FOG_GLOW", type_items_FOG_GLOW}, {"SIMPLE_STAR", type_items_SIMPLE_STAR}};
	};

	std::map<int, std::string> create_type_items_to_string() {
		return {{type_items_GHOSTS, "GHOSTS"}, {type_items_STREAKS, "STREAKS"}, {type_items_FOG_GLOW, "FOG_GLOW"}, {type_items_SIMPLE_STAR, "SIMPLE_STAR"}};
	};

	const std::map<std::string, int> string_to_type_items = create_string_to_type_items();
	const std::map<int, std::string> type_items_to_string = create_type_items_to_string();

	type_items_enum glare_type() {
		STRING_TYPE_GETTER("glare_type", static_cast<type_items_enum>(string_to_type_items.at(resstr)))
	}

	void glare_type(type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "glare_type", type_items_to_string.at(value))
	}

	enum quality_items_enum {
		quality_items_HIGH = 0,	
		quality_items_MEDIUM = 1,	
		quality_items_LOW = 2	
	};

	std::map<std::string, int> create_string_to_quality_items() {
		return {{"HIGH", quality_items_HIGH}, {"MEDIUM", quality_items_MEDIUM}, {"LOW", quality_items_LOW}};
	};

	std::map<int, std::string> create_quality_items_to_string() {
		return {{quality_items_HIGH, "HIGH"}, {quality_items_MEDIUM, "MEDIUM"}, {quality_items_LOW, "LOW"}};
	};

	const std::map<std::string, int> string_to_quality_items = create_string_to_quality_items();
	const std::map<int, std::string> quality_items_to_string = create_quality_items_to_string();

	quality_items_enum quality() {
		STRING_TYPE_GETTER("quality", static_cast<quality_items_enum>(string_to_quality_items.at(resstr)))
	}

	void quality(quality_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "quality", quality_items_to_string.at(value))
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	float color_modulation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_modulation")
	}

	void color_modulation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_modulation", value)
	}

	float mix() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mix")
	}

	void mix(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mix", value)
	}

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	int streaks() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "streaks")
	}

	void streaks(int value) {
		PRIMITIVE_TYPES_SETTER("i", "streaks", value)
	}

	float angle_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle_offset")
	}

	void angle_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle_offset", value)
	}

	float fade() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fade")
	}

	void fade(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fade", value)
	}

	bool use_rotate_45() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotate_45")
	}

	void use_rotate_45(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotate_45", value)
	}

	int size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size")
	}

	void size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeTonemap : public CompositorNode {
public:
	CompositorNodeTonemap(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeTonemap() : CompositorNode(0) { }

	enum type_items_enum {
		type_items_RD_PHOTORECEPTOR = 1,	
		type_items_RH_SIMPLE = 0	
	};

	std::map<std::string, int> create_string_to_type_items() {
		return {{"RD_PHOTORECEPTOR", type_items_RD_PHOTORECEPTOR}, {"RH_SIMPLE", type_items_RH_SIMPLE}};
	};

	std::map<int, std::string> create_type_items_to_string() {
		return {{type_items_RD_PHOTORECEPTOR, "RD_PHOTORECEPTOR"}, {type_items_RH_SIMPLE, "RH_SIMPLE"}};
	};

	const std::map<std::string, int> string_to_type_items = create_string_to_type_items();
	const std::map<int, std::string> type_items_to_string = create_type_items_to_string();

	type_items_enum tonemap_type() {
		STRING_TYPE_GETTER("tonemap_type", static_cast<type_items_enum>(string_to_type_items.at(resstr)))
	}

	void tonemap_type(type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "tonemap_type", type_items_to_string.at(value))
	}

	float key() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "key")
	}

	void key(float value) {
		PRIMITIVE_TYPES_SETTER("f", "key", value)
	}

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	float gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gamma")
	}

	void gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gamma", value)
	}

	float intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "intensity")
	}

	void intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "intensity", value)
	}

	float contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "contrast")
	}

	void contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "contrast", value)
	}

	float adaptation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "adaptation")
	}

	void adaptation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "adaptation", value)
	}

	float correction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "correction")
	}

	void correction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "correction", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeLensdist : public CompositorNode {
public:
	CompositorNodeLensdist(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeLensdist() : CompositorNode(0) { }

	bool use_projector() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_projector")
	}

	void use_projector(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_projector", value)
	}

	bool use_jitter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_jitter")
	}

	void use_jitter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_jitter", value)
	}

	bool use_fit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fit")
	}

	void use_fit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fit", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeLevels : public CompositorNode {
public:
	CompositorNodeLevels(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeLevels() : CompositorNode(0) { }

	enum channel_items_enum {
		channel_items_COMBINED_RGB = 1,	
		channel_items_RED = 2,	
		channel_items_GREEN = 3,	
		channel_items_BLUE = 4,	
		channel_items_LUMINANCE = 5	
	};

	std::map<std::string, int> create_string_to_channel_items() {
		return {{"COMBINED_RGB", channel_items_COMBINED_RGB}, {"RED", channel_items_RED}, {"GREEN", channel_items_GREEN}, {"BLUE", channel_items_BLUE}, {"LUMINANCE", channel_items_LUMINANCE}};
	};

	std::map<int, std::string> create_channel_items_to_string() {
		return {{channel_items_COMBINED_RGB, "COMBINED_RGB"}, {channel_items_RED, "RED"}, {channel_items_GREEN, "GREEN"}, {channel_items_BLUE, "BLUE"}, {channel_items_LUMINANCE, "LUMINANCE"}};
	};

	const std::map<std::string, int> string_to_channel_items = create_string_to_channel_items();
	const std::map<int, std::string> channel_items_to_string = create_channel_items_to_string();

	channel_items_enum channel() {
		STRING_TYPE_GETTER("channel", static_cast<channel_items_enum>(string_to_channel_items.at(resstr)))
	}

	void channel(channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "channel", channel_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeColorMatte : public CompositorNode {
public:
	CompositorNodeColorMatte(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeColorMatte() : CompositorNode(0) { }

	float color_hue() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_hue")
	}

	void color_hue(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_hue", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float color_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_value")
	}

	void color_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_value", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeDistanceMatte : public CompositorNode {
public:
	CompositorNodeDistanceMatte(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeDistanceMatte() : CompositorNode(0) { }

	enum color_space_items_enum {
		color_space_items_RGB = 1,	
		color_space_items_YCC = 2	
	};

	std::map<std::string, int> create_string_to_color_space_items() {
		return {{"RGB", color_space_items_RGB}, {"YCC", color_space_items_YCC}};
	};

	std::map<int, std::string> create_color_space_items_to_string() {
		return {{color_space_items_RGB, "RGB"}, {color_space_items_YCC, "YCC"}};
	};

	const std::map<std::string, int> string_to_color_space_items = create_string_to_color_space_items();
	const std::map<int, std::string> color_space_items_to_string = create_color_space_items_to_string();

	color_space_items_enum channel() {
		STRING_TYPE_GETTER("channel", static_cast<color_space_items_enum>(string_to_color_space_items.at(resstr)))
	}

	void channel(color_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "channel", color_space_items_to_string.at(value))
	}

	float tolerance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tolerance")
	}

	void tolerance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tolerance", value)
	}

	float falloff() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff")
	}

	void falloff(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeColorBalance : public CompositorNode {
public:
	CompositorNodeColorBalance(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeColorBalance() : CompositorNode(0) { }

	enum type_items_enum {
		type_items_LIFT_GAMMA_GAIN = 0,	
		type_items_OFFSET_POWER_SLOPE = 1	
	};

	std::map<std::string, int> create_string_to_type_items() {
		return {{"LIFT_GAMMA_GAIN", type_items_LIFT_GAMMA_GAIN}, {"OFFSET_POWER_SLOPE", type_items_OFFSET_POWER_SLOPE}};
	};

	std::map<int, std::string> create_type_items_to_string() {
		return {{type_items_LIFT_GAMMA_GAIN, "LIFT_GAMMA_GAIN"}, {type_items_OFFSET_POWER_SLOPE, "OFFSET_POWER_SLOPE"}};
	};

	const std::map<std::string, int> string_to_type_items = create_string_to_type_items();
	const std::map<int, std::string> type_items_to_string = create_type_items_to_string();

	type_items_enum correction_method() {
		STRING_TYPE_GETTER("correction_method", static_cast<type_items_enum>(string_to_type_items.at(resstr)))
	}

	void correction_method(type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "correction_method", type_items_to_string.at(value))
	}

	VFLOAT3 lift() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "lift", 3)
	}

	void lift(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "lift", 3)
	}

	VFLOAT3 gamma() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gamma", 3)
	}

	void gamma(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gamma", 3)
	}

	VFLOAT3 gain() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gain", 3)
	}

	void gain(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gain", 3)
	}

	VFLOAT3 offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "offset", 3)
	}

	void offset(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset", 3)
	}

	VFLOAT3 power() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "power", 3)
	}

	void power(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "power", 3)
	}

	VFLOAT3 slope() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "slope", 3)
	}

	void slope(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "slope", 3)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeHueCorrect : public CompositorNode {
public:
	CompositorNodeHueCorrect(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeHueCorrect() : CompositorNode(0) { }

	CurveMapping mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMovieClip : public CompositorNode {
public:
	CompositorNodeMovieClip(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMovieClip() : CompositorNode(0) { }

	MovieClip clip();

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeTransform : public CompositorNode {
public:
	CompositorNodeTransform(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeTransform() : CompositorNode(0) { }

	enum node_sampler_type_items_enum {
		node_sampler_type_items_NEAREST = 0,	
		node_sampler_type_items_BILINEAR = 1,	
		node_sampler_type_items_BICUBIC = 2	
	};

	std::map<std::string, int> create_string_to_node_sampler_type_items() {
		return {{"NEAREST", node_sampler_type_items_NEAREST}, {"BILINEAR", node_sampler_type_items_BILINEAR}, {"BICUBIC", node_sampler_type_items_BICUBIC}};
	};

	std::map<int, std::string> create_node_sampler_type_items_to_string() {
		return {{node_sampler_type_items_NEAREST, "NEAREST"}, {node_sampler_type_items_BILINEAR, "BILINEAR"}, {node_sampler_type_items_BICUBIC, "BICUBIC"}};
	};

	const std::map<std::string, int> string_to_node_sampler_type_items = create_string_to_node_sampler_type_items();
	const std::map<int, std::string> node_sampler_type_items_to_string = create_node_sampler_type_items_to_string();

	node_sampler_type_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<node_sampler_type_items_enum>(string_to_node_sampler_type_items.at(resstr)))
	}

	void filter_type(node_sampler_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", node_sampler_type_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeStabilize : public CompositorNode {
public:
	CompositorNodeStabilize(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeStabilize() : CompositorNode(0) { }

	MovieClip clip();

	enum node_sampler_type_items_enum {
		node_sampler_type_items_NEAREST = 0,	
		node_sampler_type_items_BILINEAR = 1,	
		node_sampler_type_items_BICUBIC = 2	
	};

	std::map<std::string, int> create_string_to_node_sampler_type_items() {
		return {{"NEAREST", node_sampler_type_items_NEAREST}, {"BILINEAR", node_sampler_type_items_BILINEAR}, {"BICUBIC", node_sampler_type_items_BICUBIC}};
	};

	std::map<int, std::string> create_node_sampler_type_items_to_string() {
		return {{node_sampler_type_items_NEAREST, "NEAREST"}, {node_sampler_type_items_BILINEAR, "BILINEAR"}, {node_sampler_type_items_BICUBIC, "BICUBIC"}};
	};

	const std::map<std::string, int> string_to_node_sampler_type_items = create_string_to_node_sampler_type_items();
	const std::map<int, std::string> node_sampler_type_items_to_string = create_node_sampler_type_items_to_string();

	node_sampler_type_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<node_sampler_type_items_enum>(string_to_node_sampler_type_items.at(resstr)))
	}

	void filter_type(node_sampler_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", node_sampler_type_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMovieDistortion : public CompositorNode {
public:
	CompositorNodeMovieDistortion(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMovieDistortion() : CompositorNode(0) { }

	MovieClip clip();

	enum distortion_type_items_enum {
		distortion_type_items_UNDISTORT = 0,	
		distortion_type_items_DISTORT = 1	
	};

	std::map<std::string, int> create_string_to_distortion_type_items() {
		return {{"UNDISTORT", distortion_type_items_UNDISTORT}, {"DISTORT", distortion_type_items_DISTORT}};
	};

	std::map<int, std::string> create_distortion_type_items_to_string() {
		return {{distortion_type_items_UNDISTORT, "UNDISTORT"}, {distortion_type_items_DISTORT, "DISTORT"}};
	};

	const std::map<std::string, int> string_to_distortion_type_items = create_string_to_distortion_type_items();
	const std::map<int, std::string> distortion_type_items_to_string = create_distortion_type_items_to_string();

	distortion_type_items_enum distortion_type() {
		STRING_TYPE_GETTER("distortion_type", static_cast<distortion_type_items_enum>(string_to_distortion_type_items.at(resstr)))
	}

	void distortion_type(distortion_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distortion_type", distortion_type_items_to_string.at(value))
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeBoxMask : public CompositorNode {
public:
	CompositorNodeBoxMask(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeBoxMask() : CompositorNode(0) { }

	enum node_masktype_items_enum {
		node_masktype_items_ADD = 0,	
		node_masktype_items_SUBTRACT = 1,	
		node_masktype_items_MULTIPLY = 2,	
		node_masktype_items_NOT = 3	
	};

	std::map<std::string, int> create_string_to_node_masktype_items() {
		return {{"ADD", node_masktype_items_ADD}, {"SUBTRACT", node_masktype_items_SUBTRACT}, {"MULTIPLY", node_masktype_items_MULTIPLY}, {"NOT", node_masktype_items_NOT}};
	};

	std::map<int, std::string> create_node_masktype_items_to_string() {
		return {{node_masktype_items_ADD, "ADD"}, {node_masktype_items_SUBTRACT, "SUBTRACT"}, {node_masktype_items_MULTIPLY, "MULTIPLY"}, {node_masktype_items_NOT, "NOT"}};
	};

	const std::map<std::string, int> string_to_node_masktype_items = create_string_to_node_masktype_items();
	const std::map<int, std::string> node_masktype_items_to_string = create_node_masktype_items_to_string();

	node_masktype_items_enum mask_type() {
		STRING_TYPE_GETTER("mask_type", static_cast<node_masktype_items_enum>(string_to_node_masktype_items.at(resstr)))
	}

	void mask_type(node_masktype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_type", node_masktype_items_to_string.at(value))
	}

	float x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "x")
	}

	void x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "x", value)
	}

	float y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "y")
	}

	void y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "y", value)
	}

	float width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width")
	}

	void width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	float rotation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rotation")
	}

	void rotation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rotation", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeEllipseMask : public CompositorNode {
public:
	CompositorNodeEllipseMask(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeEllipseMask() : CompositorNode(0) { }

	enum node_masktype_items_enum {
		node_masktype_items_ADD = 0,	
		node_masktype_items_SUBTRACT = 1,	
		node_masktype_items_MULTIPLY = 2,	
		node_masktype_items_NOT = 3	
	};

	std::map<std::string, int> create_string_to_node_masktype_items() {
		return {{"ADD", node_masktype_items_ADD}, {"SUBTRACT", node_masktype_items_SUBTRACT}, {"MULTIPLY", node_masktype_items_MULTIPLY}, {"NOT", node_masktype_items_NOT}};
	};

	std::map<int, std::string> create_node_masktype_items_to_string() {
		return {{node_masktype_items_ADD, "ADD"}, {node_masktype_items_SUBTRACT, "SUBTRACT"}, {node_masktype_items_MULTIPLY, "MULTIPLY"}, {node_masktype_items_NOT, "NOT"}};
	};

	const std::map<std::string, int> string_to_node_masktype_items = create_string_to_node_masktype_items();
	const std::map<int, std::string> node_masktype_items_to_string = create_node_masktype_items_to_string();

	node_masktype_items_enum mask_type() {
		STRING_TYPE_GETTER("mask_type", static_cast<node_masktype_items_enum>(string_to_node_masktype_items.at(resstr)))
	}

	void mask_type(node_masktype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_type", node_masktype_items_to_string.at(value))
	}

	float x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "x")
	}

	void x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "x", value)
	}

	float y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "y")
	}

	void y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "y", value)
	}

	float width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "width")
	}

	void width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "width", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	float rotation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rotation")
	}

	void rotation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rotation", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeBokehImage : public CompositorNode {
public:
	CompositorNodeBokehImage(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeBokehImage() : CompositorNode(0) { }

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	int flaps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "flaps")
	}

	void flaps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "flaps", value)
	}

	float rounding() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rounding")
	}

	void rounding(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rounding", value)
	}

	float catadioptric() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "catadioptric")
	}

	void catadioptric(float value) {
		PRIMITIVE_TYPES_SETTER("f", "catadioptric", value)
	}

	float shift() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shift")
	}

	void shift(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shift", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeBokehBlur : public CompositorNode {
public:
	CompositorNodeBokehBlur(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeBokehBlur() : CompositorNode(0) { }

	bool use_variable_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_variable_size")
	}

	void use_variable_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_variable_size", value)
	}

	float blur_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blur_max")
	}

	void blur_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blur_max", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSwitch : public CompositorNode {
public:
	CompositorNodeSwitch(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSwitch() : CompositorNode(0) { }

	bool check() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "check")
	}

	void check(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "check", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSwitchView : public CompositorNode {
public:
	CompositorNodeSwitchView(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSwitchView() : CompositorNode(0) { }

	bool check() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "check")
	}

	void check(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "check", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeColorCorrection : public CompositorNode {
public:
	CompositorNodeColorCorrection(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeColorCorrection() : CompositorNode(0) { }

	bool red() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "red")
	}

	void red(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "red", value)
	}

	bool green() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "green")
	}

	void green(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "green", value)
	}

	bool blue() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "blue")
	}

	void blue(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "blue", value)
	}

	float midtones_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "midtones_start")
	}

	void midtones_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "midtones_start", value)
	}

	float midtones_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "midtones_end")
	}

	void midtones_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "midtones_end", value)
	}

	float master_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "master_saturation")
	}

	void master_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "master_saturation", value)
	}

	float master_contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "master_contrast")
	}

	void master_contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "master_contrast", value)
	}

	float master_gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "master_gamma")
	}

	void master_gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "master_gamma", value)
	}

	float master_gain() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "master_gain")
	}

	void master_gain(float value) {
		PRIMITIVE_TYPES_SETTER("f", "master_gain", value)
	}

	float master_lift() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "master_lift")
	}

	void master_lift(float value) {
		PRIMITIVE_TYPES_SETTER("f", "master_lift", value)
	}

	float shadows_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadows_saturation")
	}

	void shadows_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadows_saturation", value)
	}

	float shadows_contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadows_contrast")
	}

	void shadows_contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadows_contrast", value)
	}

	float shadows_gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadows_gamma")
	}

	void shadows_gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadows_gamma", value)
	}

	float shadows_gain() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadows_gain")
	}

	void shadows_gain(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadows_gain", value)
	}

	float shadows_lift() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadows_lift")
	}

	void shadows_lift(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadows_lift", value)
	}

	float midtones_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "midtones_saturation")
	}

	void midtones_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "midtones_saturation", value)
	}

	float midtones_contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "midtones_contrast")
	}

	void midtones_contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "midtones_contrast", value)
	}

	float midtones_gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "midtones_gamma")
	}

	void midtones_gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "midtones_gamma", value)
	}

	float midtones_gain() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "midtones_gain")
	}

	void midtones_gain(float value) {
		PRIMITIVE_TYPES_SETTER("f", "midtones_gain", value)
	}

	float midtones_lift() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "midtones_lift")
	}

	void midtones_lift(float value) {
		PRIMITIVE_TYPES_SETTER("f", "midtones_lift", value)
	}

	float highlights_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "highlights_saturation")
	}

	void highlights_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "highlights_saturation", value)
	}

	float highlights_contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "highlights_contrast")
	}

	void highlights_contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "highlights_contrast", value)
	}

	float highlights_gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "highlights_gamma")
	}

	void highlights_gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "highlights_gamma", value)
	}

	float highlights_gain() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "highlights_gain")
	}

	void highlights_gain(float value) {
		PRIMITIVE_TYPES_SETTER("f", "highlights_gain", value)
	}

	float highlights_lift() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "highlights_lift")
	}

	void highlights_lift(float value) {
		PRIMITIVE_TYPES_SETTER("f", "highlights_lift", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeMask : public CompositorNode {
public:
	CompositorNodeMask(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeMask() : CompositorNode(0) { }

	Mask mask();

	bool use_antialiasing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_antialiasing")
	}

	void use_antialiasing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_antialiasing", value)
	}

	bool use_feather() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_feather")
	}

	void use_feather(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_feather", value)
	}

	bool use_motion_blur() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_motion_blur")
	}

	void use_motion_blur(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_motion_blur", value)
	}

	int motion_blur_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "motion_blur_samples")
	}

	void motion_blur_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "motion_blur_samples", value)
	}

	float motion_blur_shutter() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motion_blur_shutter")
	}

	void motion_blur_shutter(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motion_blur_shutter", value)
	}

	enum aspect_type_items_enum {
		aspect_type_items_SCENE = 0,	
		aspect_type_items_FIXED = 256,	
		aspect_type_items_FIXED_SCENE = 512	
	};

	std::map<std::string, int> create_string_to_aspect_type_items() {
		return {{"SCENE", aspect_type_items_SCENE}, {"FIXED", aspect_type_items_FIXED}, {"FIXED_SCENE", aspect_type_items_FIXED_SCENE}};
	};

	std::map<int, std::string> create_aspect_type_items_to_string() {
		return {{aspect_type_items_SCENE, "SCENE"}, {aspect_type_items_FIXED, "FIXED"}, {aspect_type_items_FIXED_SCENE, "FIXED_SCENE"}};
	};

	const std::map<std::string, int> string_to_aspect_type_items = create_string_to_aspect_type_items();
	const std::map<int, std::string> aspect_type_items_to_string = create_aspect_type_items_to_string();

	aspect_type_items_enum size_source() {
		STRING_TYPE_GETTER("size_source", static_cast<aspect_type_items_enum>(string_to_aspect_type_items.at(resstr)))
	}

	void size_source(aspect_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "size_source", aspect_type_items_to_string.at(value))
	}

	int size_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size_x")
	}

	void size_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size_x", value)
	}

	int size_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size_y")
	}

	void size_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size_y", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeKeyingScreen : public CompositorNode {
public:
	CompositorNodeKeyingScreen(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeKeyingScreen() : CompositorNode(0) { }

	MovieClip clip();

	std::string tracking_object() {
		STRING_TYPE_GETTER("tracking_object", resstr)
	}

	void tracking_object(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "tracking_object", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeKeying : public CompositorNode {
public:
	CompositorNodeKeying(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeKeying() : CompositorNode(0) { }

	float screen_balance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "screen_balance")
	}

	void screen_balance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "screen_balance", value)
	}

	float despill_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "despill_factor")
	}

	void despill_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "despill_factor", value)
	}

	float despill_balance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "despill_balance")
	}

	void despill_balance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "despill_balance", value)
	}

	float clip_black() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_black")
	}

	void clip_black(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_black", value)
	}

	float clip_white() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_white")
	}

	void clip_white(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_white", value)
	}

	int blur_pre() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "blur_pre")
	}

	void blur_pre(int value) {
		PRIMITIVE_TYPES_SETTER("i", "blur_pre", value)
	}

	int blur_post() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "blur_post")
	}

	void blur_post(int value) {
		PRIMITIVE_TYPES_SETTER("i", "blur_post", value)
	}

	int dilate_distance() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dilate_distance")
	}

	void dilate_distance(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dilate_distance", value)
	}

	int edge_kernel_radius() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "edge_kernel_radius")
	}

	void edge_kernel_radius(int value) {
		PRIMITIVE_TYPES_SETTER("i", "edge_kernel_radius", value)
	}

	float edge_kernel_tolerance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "edge_kernel_tolerance")
	}

	void edge_kernel_tolerance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "edge_kernel_tolerance", value)
	}

	enum proportional_falloff_curve_only_items_enum {
		proportional_falloff_curve_only_items_SMOOTH = 0,	
		proportional_falloff_curve_only_items_SPHERE = 1,	
		proportional_falloff_curve_only_items_ROOT = 2,	
		proportional_falloff_curve_only_items_INVERSE_SQUARE = 7,	
		proportional_falloff_curve_only_items_SHARP = 3,	
		proportional_falloff_curve_only_items_LINEAR = 4	
	};

	std::map<std::string, int> create_string_to_proportional_falloff_curve_only_items() {
		return {{"SMOOTH", proportional_falloff_curve_only_items_SMOOTH}, {"SPHERE", proportional_falloff_curve_only_items_SPHERE}, {"ROOT", proportional_falloff_curve_only_items_ROOT}, {"INVERSE_SQUARE", proportional_falloff_curve_only_items_INVERSE_SQUARE}, {"SHARP", proportional_falloff_curve_only_items_SHARP}, {"LINEAR", proportional_falloff_curve_only_items_LINEAR}};
	};

	std::map<int, std::string> create_proportional_falloff_curve_only_items_to_string() {
		return {{proportional_falloff_curve_only_items_SMOOTH, "SMOOTH"}, {proportional_falloff_curve_only_items_SPHERE, "SPHERE"}, {proportional_falloff_curve_only_items_ROOT, "ROOT"}, {proportional_falloff_curve_only_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {proportional_falloff_curve_only_items_SHARP, "SHARP"}, {proportional_falloff_curve_only_items_LINEAR, "LINEAR"}};
	};

	const std::map<std::string, int> string_to_proportional_falloff_curve_only_items = create_string_to_proportional_falloff_curve_only_items();
	const std::map<int, std::string> proportional_falloff_curve_only_items_to_string = create_proportional_falloff_curve_only_items_to_string();

	proportional_falloff_curve_only_items_enum feather_falloff() {
		STRING_TYPE_GETTER("feather_falloff", static_cast<proportional_falloff_curve_only_items_enum>(string_to_proportional_falloff_curve_only_items.at(resstr)))
	}

	void feather_falloff(proportional_falloff_curve_only_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "feather_falloff", proportional_falloff_curve_only_items_to_string.at(value))
	}

	int feather_distance() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "feather_distance")
	}

	void feather_distance(int value) {
		PRIMITIVE_TYPES_SETTER("i", "feather_distance", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeTrackPos : public CompositorNode {
public:
	CompositorNodeTrackPos(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeTrackPos() : CompositorNode(0) { }

	MovieClip clip();

	enum position_items_enum {
		position_items_ABSOLUTE = 0,	
		position_items_RELATIVE_START = 1,	
		position_items_RELATIVE_FRAME = 2,	
		position_items_ABSOLUTE_FRAME = 3	
	};

	std::map<std::string, int> create_string_to_position_items() {
		return {{"ABSOLUTE", position_items_ABSOLUTE}, {"RELATIVE_START", position_items_RELATIVE_START}, {"RELATIVE_FRAME", position_items_RELATIVE_FRAME}, {"ABSOLUTE_FRAME", position_items_ABSOLUTE_FRAME}};
	};

	std::map<int, std::string> create_position_items_to_string() {
		return {{position_items_ABSOLUTE, "ABSOLUTE"}, {position_items_RELATIVE_START, "RELATIVE_START"}, {position_items_RELATIVE_FRAME, "RELATIVE_FRAME"}, {position_items_ABSOLUTE_FRAME, "ABSOLUTE_FRAME"}};
	};

	const std::map<std::string, int> string_to_position_items = create_string_to_position_items();
	const std::map<int, std::string> position_items_to_string = create_position_items_to_string();

	position_items_enum position() {
		STRING_TYPE_GETTER("position", static_cast<position_items_enum>(string_to_position_items.at(resstr)))
	}

	void position(position_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "position", position_items_to_string.at(value))
	}

	int frame_relative() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_relative")
	}

	void frame_relative(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_relative", value)
	}

	std::string tracking_object() {
		STRING_TYPE_GETTER("tracking_object", resstr)
	}

	void tracking_object(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "tracking_object", value)
	}

	std::string track_name() {
		STRING_TYPE_GETTER("track_name", resstr)
	}

	void track_name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "track_name", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodePixelate : public CompositorNode {
public:
	CompositorNodePixelate(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodePixelate() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodePlaneTrackDeform : public CompositorNode {
public:
	CompositorNodePlaneTrackDeform(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodePlaneTrackDeform() : CompositorNode(0) { }

	MovieClip clip();

	std::string tracking_object() {
		STRING_TYPE_GETTER("tracking_object", resstr)
	}

	void tracking_object(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "tracking_object", value)
	}

	std::string plane_track_name() {
		STRING_TYPE_GETTER("plane_track_name", resstr)
	}

	void plane_track_name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "plane_track_name", value)
	}

	bool use_motion_blur() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_motion_blur")
	}

	void use_motion_blur(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_motion_blur", value)
	}

	int motion_blur_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "motion_blur_samples")
	}

	void motion_blur_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "motion_blur_samples", value)
	}

	float motion_blur_shutter() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motion_blur_shutter")
	}

	void motion_blur_shutter(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motion_blur_shutter", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeCornerPin : public CompositorNode {
public:
	CompositorNodeCornerPin(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeCornerPin() : CompositorNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeSunBeams : public CompositorNode {
public:
	CompositorNodeSunBeams(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeSunBeams() : CompositorNode(0) { }

	VFLOAT2 source() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "source", 2)
	}

	void source(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "source", 2)
	}

	float ray_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ray_length")
	}

	void ray_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ray_length", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeOutput : public TextureNode {
public:
	TextureNodeOutput(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeOutput() : TextureNode(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeChecker : public TextureNode {
public:
	TextureNodeChecker(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeChecker() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexture : public TextureNode {
public:
	TextureNodeTexture(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexture() : TextureNode(0) { }

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	int node_output() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "node_output")
	}

	void node_output(int value) {
		PRIMITIVE_TYPES_SETTER("i", "node_output", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeBricks : public TextureNode {
public:
	TextureNodeBricks(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeBricks() : TextureNode(0) { }

	float offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset")
	}

	void offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset", value)
	}

	int offset_frequency() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "offset_frequency")
	}

	void offset_frequency(int value) {
		PRIMITIVE_TYPES_SETTER("i", "offset_frequency", value)
	}

	float squash() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "squash")
	}

	void squash(float value) {
		PRIMITIVE_TYPES_SETTER("f", "squash", value)
	}

	int squash_frequency() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "squash_frequency")
	}

	void squash_frequency(int value) {
		PRIMITIVE_TYPES_SETTER("i", "squash_frequency", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeMath : public TextureNode {
public:
	TextureNodeMath(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeMath() : TextureNode(0) { }

	enum node_math_items_enum {
		node_math_items_ADD = 0,	
		node_math_items_SUBTRACT = 1,	
		node_math_items_MULTIPLY = 2,	
		node_math_items_DIVIDE = 3,	
		node_math_items_SINE = 4,	
		node_math_items_COSINE = 5,	
		node_math_items_TANGENT = 6,	
		node_math_items_ARCSINE = 7,	
		node_math_items_ARCCOSINE = 8,	
		node_math_items_ARCTANGENT = 9,	
		node_math_items_POWER = 10,	
		node_math_items_LOGARITHM = 11,	
		node_math_items_MINIMUM = 12,	
		node_math_items_MAXIMUM = 13,	
		node_math_items_ROUND = 14,	
		node_math_items_LESS_THAN = 15,	
		node_math_items_GREATER_THAN = 16,	
		node_math_items_MODULO = 17,	
		node_math_items_ABSOLUTE = 18	
	};

	std::map<std::string, int> create_string_to_node_math_items() {
		return {{"ADD", node_math_items_ADD}, {"SUBTRACT", node_math_items_SUBTRACT}, {"MULTIPLY", node_math_items_MULTIPLY}, {"DIVIDE", node_math_items_DIVIDE}, {"SINE", node_math_items_SINE}, {"COSINE", node_math_items_COSINE}, {"TANGENT", node_math_items_TANGENT}, {"ARCSINE", node_math_items_ARCSINE}, {"ARCCOSINE", node_math_items_ARCCOSINE}, {"ARCTANGENT", node_math_items_ARCTANGENT}, {"POWER", node_math_items_POWER}, {"LOGARITHM", node_math_items_LOGARITHM}, {"MINIMUM", node_math_items_MINIMUM}, {"MAXIMUM", node_math_items_MAXIMUM}, {"ROUND", node_math_items_ROUND}, {"LESS_THAN", node_math_items_LESS_THAN}, {"GREATER_THAN", node_math_items_GREATER_THAN}, {"MODULO", node_math_items_MODULO}, {"ABSOLUTE", node_math_items_ABSOLUTE}};
	};

	std::map<int, std::string> create_node_math_items_to_string() {
		return {{node_math_items_ADD, "ADD"}, {node_math_items_SUBTRACT, "SUBTRACT"}, {node_math_items_MULTIPLY, "MULTIPLY"}, {node_math_items_DIVIDE, "DIVIDE"}, {node_math_items_SINE, "SINE"}, {node_math_items_COSINE, "COSINE"}, {node_math_items_TANGENT, "TANGENT"}, {node_math_items_ARCSINE, "ARCSINE"}, {node_math_items_ARCCOSINE, "ARCCOSINE"}, {node_math_items_ARCTANGENT, "ARCTANGENT"}, {node_math_items_POWER, "POWER"}, {node_math_items_LOGARITHM, "LOGARITHM"}, {node_math_items_MINIMUM, "MINIMUM"}, {node_math_items_MAXIMUM, "MAXIMUM"}, {node_math_items_ROUND, "ROUND"}, {node_math_items_LESS_THAN, "LESS_THAN"}, {node_math_items_GREATER_THAN, "GREATER_THAN"}, {node_math_items_MODULO, "MODULO"}, {node_math_items_ABSOLUTE, "ABSOLUTE"}};
	};

	const std::map<std::string, int> string_to_node_math_items = create_string_to_node_math_items();
	const std::map<int, std::string> node_math_items_to_string = create_node_math_items_to_string();

	node_math_items_enum operation() {
		STRING_TYPE_GETTER("operation", static_cast<node_math_items_enum>(string_to_node_math_items.at(resstr)))
	}

	void operation(node_math_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "operation", node_math_items_to_string.at(value))
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeMixRGB : public TextureNode {
public:
	TextureNodeMixRGB(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeMixRGB() : TextureNode(0) { }

	enum ramp_blend_items_enum {
		ramp_blend_items_MIX = 0,	
		ramp_blend_items_ADD = 1,	
		ramp_blend_items_MULTIPLY = 2,	
		ramp_blend_items_SUBTRACT = 3,	
		ramp_blend_items_SCREEN = 4,	
		ramp_blend_items_DIVIDE = 5,	
		ramp_blend_items_DIFFERENCE = 6,	
		ramp_blend_items_DARKEN = 7,	
		ramp_blend_items_LIGHTEN = 8,	
		ramp_blend_items_OVERLAY = 9,	
		ramp_blend_items_DODGE = 10,	
		ramp_blend_items_BURN = 11,	
		ramp_blend_items_HUE = 12,	
		ramp_blend_items_SATURATION = 13,	
		ramp_blend_items_VALUE = 14,	
		ramp_blend_items_COLOR = 15,	
		ramp_blend_items_SOFT_LIGHT = 16,	
		ramp_blend_items_LINEAR_LIGHT = 17	
	};

	std::map<std::string, int> create_string_to_ramp_blend_items() {
		return {{"MIX", ramp_blend_items_MIX}, {"ADD", ramp_blend_items_ADD}, {"MULTIPLY", ramp_blend_items_MULTIPLY}, {"SUBTRACT", ramp_blend_items_SUBTRACT}, {"SCREEN", ramp_blend_items_SCREEN}, {"DIVIDE", ramp_blend_items_DIVIDE}, {"DIFFERENCE", ramp_blend_items_DIFFERENCE}, {"DARKEN", ramp_blend_items_DARKEN}, {"LIGHTEN", ramp_blend_items_LIGHTEN}, {"OVERLAY", ramp_blend_items_OVERLAY}, {"DODGE", ramp_blend_items_DODGE}, {"BURN", ramp_blend_items_BURN}, {"HUE", ramp_blend_items_HUE}, {"SATURATION", ramp_blend_items_SATURATION}, {"VALUE", ramp_blend_items_VALUE}, {"COLOR", ramp_blend_items_COLOR}, {"SOFT_LIGHT", ramp_blend_items_SOFT_LIGHT}, {"LINEAR_LIGHT", ramp_blend_items_LINEAR_LIGHT}};
	};

	std::map<int, std::string> create_ramp_blend_items_to_string() {
		return {{ramp_blend_items_MIX, "MIX"}, {ramp_blend_items_ADD, "ADD"}, {ramp_blend_items_MULTIPLY, "MULTIPLY"}, {ramp_blend_items_SUBTRACT, "SUBTRACT"}, {ramp_blend_items_SCREEN, "SCREEN"}, {ramp_blend_items_DIVIDE, "DIVIDE"}, {ramp_blend_items_DIFFERENCE, "DIFFERENCE"}, {ramp_blend_items_DARKEN, "DARKEN"}, {ramp_blend_items_LIGHTEN, "LIGHTEN"}, {ramp_blend_items_OVERLAY, "OVERLAY"}, {ramp_blend_items_DODGE, "DODGE"}, {ramp_blend_items_BURN, "BURN"}, {ramp_blend_items_HUE, "HUE"}, {ramp_blend_items_SATURATION, "SATURATION"}, {ramp_blend_items_VALUE, "VALUE"}, {ramp_blend_items_COLOR, "COLOR"}, {ramp_blend_items_SOFT_LIGHT, "SOFT_LIGHT"}, {ramp_blend_items_LINEAR_LIGHT, "LINEAR_LIGHT"}};
	};

	const std::map<std::string, int> string_to_ramp_blend_items = create_string_to_ramp_blend_items();
	const std::map<int, std::string> ramp_blend_items_to_string = create_ramp_blend_items_to_string();

	ramp_blend_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<ramp_blend_items_enum>(string_to_ramp_blend_items.at(resstr)))
	}

	void blend_type(ramp_blend_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", ramp_blend_items_to_string.at(value))
	}

	bool use_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha")
	}

	void use_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha", value)
	}

	bool use_clamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clamp")
	}

	void use_clamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clamp", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeRGBToBW : public TextureNode {
public:
	TextureNodeRGBToBW(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeRGBToBW() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeValToRGB : public TextureNode {
public:
	TextureNodeValToRGB(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeValToRGB() : TextureNode(0) { }

	ColorRamp color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeImage : public TextureNode {
public:
	TextureNodeImage(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeImage() : TextureNode(0) { }

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	ImageUser image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeCurveRGB : public TextureNode {
public:
	TextureNodeCurveRGB(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeCurveRGB() : TextureNode(0) { }

	CurveMapping mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "mapping")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeInvert : public TextureNode {
public:
	TextureNodeInvert(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeInvert() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeHueSaturation : public TextureNode {
public:
	TextureNodeHueSaturation(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeHueSaturation() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeCurveTime : public TextureNode {
public:
	TextureNodeCurveTime(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeCurveTime() : TextureNode(0) { }

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeRotate : public TextureNode {
public:
	TextureNodeRotate(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeRotate() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeViewer : public TextureNode {
public:
	TextureNodeViewer(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeViewer() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTranslate : public TextureNode {
public:
	TextureNodeTranslate(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTranslate() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeCoordinates : public TextureNode {
public:
	TextureNodeCoordinates(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeCoordinates() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeDistance : public TextureNode {
public:
	TextureNodeDistance(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeDistance() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeCompose : public TextureNode {
public:
	TextureNodeCompose(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeCompose() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeDecompose : public TextureNode {
public:
	TextureNodeDecompose(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeDecompose() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeValToNor : public TextureNode {
public:
	TextureNodeValToNor(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeValToNor() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeScale : public TextureNode {
public:
	TextureNodeScale(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeScale() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeAt : public TextureNode {
public:
	TextureNodeAt(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeAt() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexVoronoi : public TextureNode {
public:
	TextureNodeTexVoronoi(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexVoronoi() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexBlend : public TextureNode {
public:
	TextureNodeTexBlend(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexBlend() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexMagic : public TextureNode {
public:
	TextureNodeTexMagic(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexMagic() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexMarble : public TextureNode {
public:
	TextureNodeTexMarble(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexMarble() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexClouds : public TextureNode {
public:
	TextureNodeTexClouds(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexClouds() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexWood : public TextureNode {
public:
	TextureNodeTexWood(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexWood() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexMusgrave : public TextureNode {
public:
	TextureNodeTexMusgrave(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexMusgrave() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexNoise : public TextureNode {
public:
	TextureNodeTexNoise(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexNoise() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexStucci : public TextureNode {
public:
	TextureNodeTexStucci(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexStucci() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeTexDistNoise : public TextureNode {
public:
	TextureNodeTexDistNoise(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeTexDistNoise() : TextureNode(0) { }

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class ShaderNodeGroup : public ShaderNode {
public:
	ShaderNodeGroup(PyObject* pyobj) : ShaderNode(pyobj) {}
	ShaderNodeGroup() : ShaderNode(0) { }

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	PropertyGroup interface_value() {
		CLASS_TYPES_GETTER(PropertyGroup, "interface")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class CompositorNodeGroup : public CompositorNode {
public:
	CompositorNodeGroup(PyObject* pyobj) : CompositorNode(pyobj) {}
	CompositorNodeGroup() : CompositorNode(0) { }

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	PropertyGroup interface_value() {
		CLASS_TYPES_GETTER(PropertyGroup, "interface")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class TextureNodeGroup : public TextureNode {
public:
	TextureNodeGroup(PyObject* pyobj) : TextureNode(pyobj) {}
	TextureNodeGroup() : TextureNode(0) { }

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	PropertyGroup interface_value() {
		CLASS_TYPES_GETTER(PropertyGroup, "interface")
	}

	bool is_registered_node_type() {
		PYTHON_FUNCTION_CALL("is_registered_node_type")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	NodeInternalSocketTemplate input_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("input_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}

	NodeInternalSocketTemplate output_template(int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_template", "i", index)
		CLASS_TYPES_RETURN(NodeInternalSocketTemplate)
	}
};

class NodeCustomGroup : public Node {
public:
	NodeCustomGroup(PyObject* pyobj) : Node(pyobj) {}
	NodeCustomGroup() : Node(0) { }

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	PropertyGroup interface_value() {
		CLASS_TYPES_GETTER(PropertyGroup, "interface")
	}
};

class NodeOutputFileSlotFile : public pyUniplug {
public:
	NodeOutputFileSlotFile(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeOutputFileSlotFile() : pyUniplug(0) { }

	bool use_node_format() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_node_format")
	}

	void use_node_format(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_node_format", value)
	}

	ImageFormatSettings format();

	std::string path() {
		STRING_TYPE_GETTER("path", resstr)
	}

	void path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "path", value)
	}
};

class NodeOutputFileSlotLayer : public pyUniplug {
public:
	NodeOutputFileSlotLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeOutputFileSlotLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class NodeInstanceHash : public pyUniplug {
public:
	NodeInstanceHash(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeInstanceHash() : pyUniplug(0) { }

};

class Object : public ID {
public:
	Object(PyObject* pyobj) : ID(pyobj) {}
	Object() : ID(0) { }

	ID data() {
		CLASS_TYPES_GETTER(ID, "data")
	}

	enum object_type_items_enum {
		object_type_items_MESH = 1,	
		object_type_items_CURVE = 2,	
		object_type_items_SURFACE = 3,	
		object_type_items_META = 5,	
		object_type_items_FONT = 4,	
		object_type_items_ARMATURE = 25,	
		object_type_items_LATTICE = 22,	
		object_type_items_EMPTY = 0,	
		object_type_items_CAMERA = 11,	
		object_type_items_LAMP = 10,	
		object_type_items_SPEAKER = 12	
	};

	std::map<std::string, int> create_string_to_object_type_items() {
		return {{"MESH", object_type_items_MESH}, {"CURVE", object_type_items_CURVE}, {"SURFACE", object_type_items_SURFACE}, {"META", object_type_items_META}, {"FONT", object_type_items_FONT}, {"ARMATURE", object_type_items_ARMATURE}, {"LATTICE", object_type_items_LATTICE}, {"EMPTY", object_type_items_EMPTY}, {"CAMERA", object_type_items_CAMERA}, {"LAMP", object_type_items_LAMP}, {"SPEAKER", object_type_items_SPEAKER}};
	};

	std::map<int, std::string> create_object_type_items_to_string() {
		return {{object_type_items_MESH, "MESH"}, {object_type_items_CURVE, "CURVE"}, {object_type_items_SURFACE, "SURFACE"}, {object_type_items_META, "META"}, {object_type_items_FONT, "FONT"}, {object_type_items_ARMATURE, "ARMATURE"}, {object_type_items_LATTICE, "LATTICE"}, {object_type_items_EMPTY, "EMPTY"}, {object_type_items_CAMERA, "CAMERA"}, {object_type_items_LAMP, "LAMP"}, {object_type_items_SPEAKER, "SPEAKER"}};
	};

	const std::map<std::string, int> string_to_object_type_items = create_string_to_object_type_items();
	const std::map<int, std::string> object_type_items_to_string = create_object_type_items_to_string();

	object_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<object_type_items_enum>(string_to_object_type_items.at(resstr)))
	}

	void type(object_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", object_type_items_to_string.at(value))
	}

	enum object_mode_items_enum {
		object_mode_items_OBJECT = 0,	
		object_mode_items_EDIT = 1,	
		object_mode_items_POSE = 64,	
		object_mode_items_SCULPT = 2,	
		object_mode_items_VERTEX_PAINT = 4,	
		object_mode_items_WEIGHT_PAINT = 8,	
		object_mode_items_TEXTURE_PAINT = 16,	
		object_mode_items_PARTICLE_EDIT = 32	
	};

	std::map<std::string, int> create_string_to_object_mode_items() {
		return {{"OBJECT", object_mode_items_OBJECT}, {"EDIT", object_mode_items_EDIT}, {"POSE", object_mode_items_POSE}, {"SCULPT", object_mode_items_SCULPT}, {"VERTEX_PAINT", object_mode_items_VERTEX_PAINT}, {"WEIGHT_PAINT", object_mode_items_WEIGHT_PAINT}, {"TEXTURE_PAINT", object_mode_items_TEXTURE_PAINT}, {"PARTICLE_EDIT", object_mode_items_PARTICLE_EDIT}};
	};

	std::map<int, std::string> create_object_mode_items_to_string() {
		return {{object_mode_items_OBJECT, "OBJECT"}, {object_mode_items_EDIT, "EDIT"}, {object_mode_items_POSE, "POSE"}, {object_mode_items_SCULPT, "SCULPT"}, {object_mode_items_VERTEX_PAINT, "VERTEX_PAINT"}, {object_mode_items_WEIGHT_PAINT, "WEIGHT_PAINT"}, {object_mode_items_TEXTURE_PAINT, "TEXTURE_PAINT"}, {object_mode_items_PARTICLE_EDIT, "PARTICLE_EDIT"}};
	};

	const std::map<std::string, int> string_to_object_mode_items = create_string_to_object_mode_items();
	const std::map<int, std::string> object_mode_items_to_string = create_object_mode_items_to_string();

	object_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<object_mode_items_enum>(string_to_object_mode_items.at(resstr)))
	}

	void mode(object_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", object_mode_items_to_string.at(value))
	}

	std::array<bool, 20> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 20)
	}

	void layers(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 20)
	}

	std::array<bool, 8> layers_local_view() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_local_view", 8)
	}

	void layers_local_view(bool values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_local_view", 8)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	std::array<float, 24> bound_box() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "bound_box", 24)
	}

	void bound_box(float values[24]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "bound_box", 24)
	}

	Object parent() {
		CLASS_TYPES_GETTER(Object, "parent")
	}

	enum parent_type_items_enum {
		parent_type_items_OBJECT = 0,	
		parent_type_items_ARMATURE = 4,	
		parent_type_items_LATTICE = 4,	
		parent_type_items_VERTEX = 5,	
		parent_type_items_VERTEX_3 = 6,	
		parent_type_items_BONE = 7	
	};

	std::map<std::string, int> create_string_to_parent_type_items() {
		return {{"OBJECT", parent_type_items_OBJECT}, {"ARMATURE", parent_type_items_ARMATURE}, {"LATTICE", parent_type_items_LATTICE}, {"VERTEX", parent_type_items_VERTEX}, {"VERTEX_3", parent_type_items_VERTEX_3}, {"BONE", parent_type_items_BONE}};
	};

	std::map<int, std::string> create_parent_type_items_to_string() {
		return {{parent_type_items_OBJECT, "OBJECT"}, {parent_type_items_ARMATURE, "ARMATURE"}, {parent_type_items_LATTICE, "LATTICE"}, {parent_type_items_VERTEX, "VERTEX"}, {parent_type_items_VERTEX_3, "VERTEX_3"}, {parent_type_items_BONE, "BONE"}};
	};

	const std::map<std::string, int> string_to_parent_type_items = create_string_to_parent_type_items();
	const std::map<int, std::string> parent_type_items_to_string = create_parent_type_items_to_string();

	parent_type_items_enum parent_type() {
		STRING_TYPE_GETTER("parent_type", static_cast<parent_type_items_enum>(string_to_parent_type_items.at(resstr)))
	}

	void parent_type(parent_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "parent_type", parent_type_items_to_string.at(value))
	}

	std::array<int, 3> parent_vertices() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "parent_vertices", 3)
	}

	void parent_vertices(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "parent_vertices", 3)
	}

	std::string parent_bone() {
		STRING_TYPE_GETTER("parent_bone", resstr)
	}

	void parent_bone(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "parent_bone", value)
	}

	enum object_axis_items_enum {
		object_axis_items_POS_X = 0,	
		object_axis_items_POS_Y = 1,	
		object_axis_items_POS_Z = 2,	
		object_axis_items_NEG_X = 3,	
		object_axis_items_NEG_Y = 4,	
		object_axis_items_NEG_Z = 5	
	};

	std::map<std::string, int> create_string_to_object_axis_items() {
		return {{"POS_X", object_axis_items_POS_X}, {"POS_Y", object_axis_items_POS_Y}, {"POS_Z", object_axis_items_POS_Z}, {"NEG_X", object_axis_items_NEG_X}, {"NEG_Y", object_axis_items_NEG_Y}, {"NEG_Z", object_axis_items_NEG_Z}};
	};

	std::map<int, std::string> create_object_axis_items_to_string() {
		return {{object_axis_items_POS_X, "POS_X"}, {object_axis_items_POS_Y, "POS_Y"}, {object_axis_items_POS_Z, "POS_Z"}, {object_axis_items_NEG_X, "NEG_X"}, {object_axis_items_NEG_Y, "NEG_Y"}, {object_axis_items_NEG_Z, "NEG_Z"}};
	};

	const std::map<std::string, int> string_to_object_axis_items = create_string_to_object_axis_items();
	const std::map<int, std::string> object_axis_items_to_string = create_object_axis_items_to_string();

	object_axis_items_enum track_axis() {
		STRING_TYPE_GETTER("track_axis", static_cast<object_axis_items_enum>(string_to_object_axis_items.at(resstr)))
	}

	void track_axis(object_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "track_axis", object_axis_items_to_string.at(value))
	}

	enum up_items_enum {
		up_items_X = 0,	
		up_items_Y = 1,	
		up_items_Z = 2	
	};

	std::map<std::string, int> create_string_to_up_items() {
		return {{"X", up_items_X}, {"Y", up_items_Y}, {"Z", up_items_Z}};
	};

	std::map<int, std::string> create_up_items_to_string() {
		return {{up_items_X, "X"}, {up_items_Y, "Y"}, {up_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_up_items = create_string_to_up_items();
	const std::map<int, std::string> up_items_to_string = create_up_items_to_string();

	up_items_enum up_axis() {
		STRING_TYPE_GETTER("up_axis", static_cast<up_items_enum>(string_to_up_items.at(resstr)))
	}

	void up_axis(up_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "up_axis", up_items_to_string.at(value))
	}

	Object proxy() {
		CLASS_TYPES_GETTER(Object, "proxy")
	}

	Object proxy_group() {
		CLASS_TYPES_GETTER(Object, "proxy_group")
	}

	std::map<std::string, MaterialSlot> material_slots();

	Material active_material() {
		CLASS_TYPES_GETTER(Material, "active_material")
	}

	int active_material_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_material_index")
	}

	void active_material_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_material_index", value)
	}

	VFLOAT3 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 3)
	}

	void location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 3)
	}

	VFLOAT4 rotation_quaternion() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation_quaternion", 4)
	}

	void rotation_quaternion(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_quaternion", 4)
	}

	VFLOAT4 rotation_axis_angle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation_axis_angle", 4)
	}

	void rotation_axis_angle(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_axis_angle", 4)
	}

	VFLOAT3 rotation_euler() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation_euler", 3)
	}

	void rotation_euler(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_euler", 3)
	}

	enum prop_rotmode_items_enum {
		prop_rotmode_items_QUATERNION = 0,	
		prop_rotmode_items_XYZ = 1,	
		prop_rotmode_items_XZY = 2,	
		prop_rotmode_items_YXZ = 3,	
		prop_rotmode_items_YZX = 4,	
		prop_rotmode_items_ZXY = 5,	
		prop_rotmode_items_ZYX = 6,	
		prop_rotmode_items_AXIS_ANGLE = -1	
	};

	std::map<std::string, int> create_string_to_prop_rotmode_items() {
		return {{"QUATERNION", prop_rotmode_items_QUATERNION}, {"XYZ", prop_rotmode_items_XYZ}, {"XZY", prop_rotmode_items_XZY}, {"YXZ", prop_rotmode_items_YXZ}, {"YZX", prop_rotmode_items_YZX}, {"ZXY", prop_rotmode_items_ZXY}, {"ZYX", prop_rotmode_items_ZYX}, {"AXIS_ANGLE", prop_rotmode_items_AXIS_ANGLE}};
	};

	std::map<int, std::string> create_prop_rotmode_items_to_string() {
		return {{prop_rotmode_items_QUATERNION, "QUATERNION"}, {prop_rotmode_items_XYZ, "XYZ"}, {prop_rotmode_items_XZY, "XZY"}, {prop_rotmode_items_YXZ, "YXZ"}, {prop_rotmode_items_YZX, "YZX"}, {prop_rotmode_items_ZXY, "ZXY"}, {prop_rotmode_items_ZYX, "ZYX"}, {prop_rotmode_items_AXIS_ANGLE, "AXIS_ANGLE"}};
	};

	const std::map<std::string, int> string_to_prop_rotmode_items = create_string_to_prop_rotmode_items();
	const std::map<int, std::string> prop_rotmode_items_to_string = create_prop_rotmode_items_to_string();

	prop_rotmode_items_enum rotation_mode() {
		STRING_TYPE_GETTER("rotation_mode", static_cast<prop_rotmode_items_enum>(string_to_prop_rotmode_items.at(resstr)))
	}

	void rotation_mode(prop_rotmode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "rotation_mode", prop_rotmode_items_to_string.at(value))
	}

	VFLOAT3 scale() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scale", 3)
	}

	void scale(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scale", 3)
	}

	VFLOAT3 dimensions() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "dimensions", 3)
	}

	void dimensions(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "dimensions", 3)
	}

	VFLOAT3 delta_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "delta_location", 3)
	}

	void delta_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "delta_location", 3)
	}

	VFLOAT3 delta_rotation_euler() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "delta_rotation_euler", 3)
	}

	void delta_rotation_euler(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "delta_rotation_euler", 3)
	}

	VFLOAT4 delta_rotation_quaternion() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "delta_rotation_quaternion", 4)
	}

	void delta_rotation_quaternion(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "delta_rotation_quaternion", 4)
	}

	VFLOAT3 delta_scale() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "delta_scale", 3)
	}

	void delta_scale(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "delta_scale", 3)
	}

	std::array<bool, 3> lock_location() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "lock_location", 3)
	}

	void lock_location(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "lock_location", 3)
	}

	std::array<bool, 3> lock_rotation() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "lock_rotation", 3)
	}

	void lock_rotation(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "lock_rotation", 3)
	}

	bool lock_rotation_w() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_w")
	}

	void lock_rotation_w(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_w", value)
	}

	bool lock_rotations_4d() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotations_4d")
	}

	void lock_rotations_4d(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotations_4d", value)
	}

	std::array<bool, 3> lock_scale() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "lock_scale", 3)
	}

	void lock_scale(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "lock_scale", 3)
	}

	VFLOAT16 matrix_world() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix_world", 16)
	}

	void matrix_world(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix_world", 16)
	}

	VFLOAT16 matrix_local() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix_local", 16)
	}

	void matrix_local(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix_local", 16)
	}

	VFLOAT16 matrix_basis() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix_basis", 16)
	}

	void matrix_basis(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix_basis", 16)
	}

	VFLOAT16 matrix_parent_inverse() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix_parent_inverse", 16)
	}

	void matrix_parent_inverse(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix_parent_inverse", 16)
	}

	std::map<std::string, Modifier> modifiers() {
		MAP_TYPE_GETTER("modifiers", Modifier)
	}

	std::map<std::string, Constraint> constraints() {
		MAP_TYPE_GETTER("constraints", Constraint)
	}

	GameObjectSettings game();

	std::map<std::string, VertexGroup> vertex_groups();

	enum object_empty_drawtype_items_enum {
		object_empty_drawtype_items_PLAIN_AXES = 2,	
		object_empty_drawtype_items_ARROWS = 1,	
		object_empty_drawtype_items_SINGLE_ARROW = 4,	
		object_empty_drawtype_items_CIRCLE = 3,	
		object_empty_drawtype_items_CUBE = 5,	
		object_empty_drawtype_items_SPHERE = 6,	
		object_empty_drawtype_items_CONE = 7,	
		object_empty_drawtype_items_IMAGE = 8	
	};

	std::map<std::string, int> create_string_to_object_empty_drawtype_items() {
		return {{"PLAIN_AXES", object_empty_drawtype_items_PLAIN_AXES}, {"ARROWS", object_empty_drawtype_items_ARROWS}, {"SINGLE_ARROW", object_empty_drawtype_items_SINGLE_ARROW}, {"CIRCLE", object_empty_drawtype_items_CIRCLE}, {"CUBE", object_empty_drawtype_items_CUBE}, {"SPHERE", object_empty_drawtype_items_SPHERE}, {"CONE", object_empty_drawtype_items_CONE}, {"IMAGE", object_empty_drawtype_items_IMAGE}};
	};

	std::map<int, std::string> create_object_empty_drawtype_items_to_string() {
		return {{object_empty_drawtype_items_PLAIN_AXES, "PLAIN_AXES"}, {object_empty_drawtype_items_ARROWS, "ARROWS"}, {object_empty_drawtype_items_SINGLE_ARROW, "SINGLE_ARROW"}, {object_empty_drawtype_items_CIRCLE, "CIRCLE"}, {object_empty_drawtype_items_CUBE, "CUBE"}, {object_empty_drawtype_items_SPHERE, "SPHERE"}, {object_empty_drawtype_items_CONE, "CONE"}, {object_empty_drawtype_items_IMAGE, "IMAGE"}};
	};

	const std::map<std::string, int> string_to_object_empty_drawtype_items = create_string_to_object_empty_drawtype_items();
	const std::map<int, std::string> object_empty_drawtype_items_to_string = create_object_empty_drawtype_items_to_string();

	object_empty_drawtype_items_enum empty_draw_type() {
		STRING_TYPE_GETTER("empty_draw_type", static_cast<object_empty_drawtype_items_enum>(string_to_object_empty_drawtype_items.at(resstr)))
	}

	void empty_draw_type(object_empty_drawtype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "empty_draw_type", object_empty_drawtype_items_to_string.at(value))
	}

	float empty_draw_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "empty_draw_size")
	}

	void empty_draw_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "empty_draw_size", value)
	}

	VFLOAT2 empty_image_offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "empty_image_offset", 2)
	}

	void empty_image_offset(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "empty_image_offset", 2)
	}

	ImageUser image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	int pass_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "pass_index")
	}

	void pass_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "pass_index", value)
	}

	VFLOAT4 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 4)
	}

	void color(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 4)
	}

	FieldSettings field();

	CollisionSettings collision();

	SoftBodySettings soft_body();

	std::map<std::string, ParticleSystem> particle_systems();

	RigidBodyObject rigid_body();

	RigidBodyConstraint rigid_body_constraint();

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool hide_select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_select")
	}

	void hide_select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_select", value)
	}

	bool hide_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_render")
	}

	void hide_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_render", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	AnimViz animation_visualization() {
		CLASS_TYPES_GETTER(AnimViz, "animation_visualization")
	}

	MotionPath motion_path() {
		CLASS_TYPES_GETTER(MotionPath, "motion_path")
	}

	bool use_slow_parent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_slow_parent")
	}

	void use_slow_parent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_slow_parent", value)
	}

	float slow_parent_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "slow_parent_offset")
	}

	void slow_parent_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "slow_parent_offset", value)
	}

	bool use_extra_recalc_object() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_extra_recalc_object")
	}

	void use_extra_recalc_object(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_extra_recalc_object", value)
	}

	bool use_extra_recalc_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_extra_recalc_data")
	}

	void use_extra_recalc_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_extra_recalc_data", value)
	}

	enum dupli_items_enum {
		dupli_items_NONE = 0,	
		dupli_items_FRAMES = 8,	
		dupli_items_VERTS = 16,	
		dupli_items_FACES = 512,	
		dupli_items_GROUP = 256	
	};

	std::map<std::string, int> create_string_to_dupli_items() {
		return {{"NONE", dupli_items_NONE}, {"FRAMES", dupli_items_FRAMES}, {"VERTS", dupli_items_VERTS}, {"FACES", dupli_items_FACES}, {"GROUP", dupli_items_GROUP}};
	};

	std::map<int, std::string> create_dupli_items_to_string() {
		return {{dupli_items_NONE, "NONE"}, {dupli_items_FRAMES, "FRAMES"}, {dupli_items_VERTS, "VERTS"}, {dupli_items_FACES, "FACES"}, {dupli_items_GROUP, "GROUP"}};
	};

	const std::map<std::string, int> string_to_dupli_items = create_string_to_dupli_items();
	const std::map<int, std::string> dupli_items_to_string = create_dupli_items_to_string();

	dupli_items_enum dupli_type() {
		STRING_TYPE_GETTER("dupli_type", static_cast<dupli_items_enum>(string_to_dupli_items.at(resstr)))
	}

	void dupli_type(dupli_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "dupli_type", dupli_items_to_string.at(value))
	}

	bool use_dupli_frames_speed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dupli_frames_speed")
	}

	void use_dupli_frames_speed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dupli_frames_speed", value)
	}

	bool use_dupli_vertices_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dupli_vertices_rotation")
	}

	void use_dupli_vertices_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dupli_vertices_rotation", value)
	}

	bool use_dupli_faces_scale() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dupli_faces_scale")
	}

	void use_dupli_faces_scale(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dupli_faces_scale", value)
	}

	float dupli_faces_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dupli_faces_scale")
	}

	void dupli_faces_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dupli_faces_scale", value)
	}

	Group dupli_group() {
		CLASS_TYPES_GETTER(Group, "dupli_group")
	}

	int dupli_frames_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dupli_frames_start")
	}

	void dupli_frames_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dupli_frames_start", value)
	}

	int dupli_frames_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dupli_frames_end")
	}

	void dupli_frames_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dupli_frames_end", value)
	}

	int dupli_frames_on() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dupli_frames_on")
	}

	void dupli_frames_on(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dupli_frames_on", value)
	}

	int dupli_frames_off() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dupli_frames_off")
	}

	void dupli_frames_off(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dupli_frames_off", value)
	}

	std::map<std::string, DupliObject> dupli_list();

	bool is_duplicator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_duplicator")
	}

	void is_duplicator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_duplicator", value)
	}

	enum drawtype_items_enum {
		drawtype_items_BOUNDS = 1,	
		drawtype_items_WIRE = 2,	
		drawtype_items_SOLID = 3,	
		drawtype_items_TEXTURED = 5	
	};

	std::map<std::string, int> create_string_to_drawtype_items() {
		return {{"BOUNDS", drawtype_items_BOUNDS}, {"WIRE", drawtype_items_WIRE}, {"SOLID", drawtype_items_SOLID}, {"TEXTURED", drawtype_items_TEXTURED}};
	};

	std::map<int, std::string> create_drawtype_items_to_string() {
		return {{drawtype_items_BOUNDS, "BOUNDS"}, {drawtype_items_WIRE, "WIRE"}, {drawtype_items_SOLID, "SOLID"}, {drawtype_items_TEXTURED, "TEXTURED"}};
	};

	const std::map<std::string, int> string_to_drawtype_items = create_string_to_drawtype_items();
	const std::map<int, std::string> drawtype_items_to_string = create_drawtype_items_to_string();

	drawtype_items_enum draw_type() {
		STRING_TYPE_GETTER("draw_type", static_cast<drawtype_items_enum>(string_to_drawtype_items.at(resstr)))
	}

	void draw_type(drawtype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_type", drawtype_items_to_string.at(value))
	}

	bool show_bounds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_bounds")
	}

	void show_bounds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_bounds", value)
	}

	enum boundtype_items_enum {
		boundtype_items_BOX = 0,	
		boundtype_items_SPHERE = 1,	
		boundtype_items_CYLINDER = 2,	
		boundtype_items_CONE = 3,	
		boundtype_items_CAPSULE = 7	
	};

	std::map<std::string, int> create_string_to_boundtype_items() {
		return {{"BOX", boundtype_items_BOX}, {"SPHERE", boundtype_items_SPHERE}, {"CYLINDER", boundtype_items_CYLINDER}, {"CONE", boundtype_items_CONE}, {"CAPSULE", boundtype_items_CAPSULE}};
	};

	std::map<int, std::string> create_boundtype_items_to_string() {
		return {{boundtype_items_BOX, "BOX"}, {boundtype_items_SPHERE, "SPHERE"}, {boundtype_items_CYLINDER, "CYLINDER"}, {boundtype_items_CONE, "CONE"}, {boundtype_items_CAPSULE, "CAPSULE"}};
	};

	const std::map<std::string, int> string_to_boundtype_items = create_string_to_boundtype_items();
	const std::map<int, std::string> boundtype_items_to_string = create_boundtype_items_to_string();

	boundtype_items_enum draw_bounds_type() {
		STRING_TYPE_GETTER("draw_bounds_type", static_cast<boundtype_items_enum>(string_to_boundtype_items.at(resstr)))
	}

	void draw_bounds_type(boundtype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_bounds_type", boundtype_items_to_string.at(value))
	}

	bool show_name() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_name")
	}

	void show_name(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_name", value)
	}

	bool show_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_axis")
	}

	void show_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_axis", value)
	}

	bool show_texture_space() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_texture_space")
	}

	void show_texture_space(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_texture_space", value)
	}

	bool show_wire() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_wire")
	}

	void show_wire(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_wire", value)
	}

	bool show_all_edges() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_all_edges")
	}

	void show_all_edges(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_all_edges", value)
	}

	bool show_transparent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_transparent")
	}

	void show_transparent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_transparent", value)
	}

	bool show_x_ray() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_x_ray")
	}

	void show_x_ray(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_x_ray", value)
	}

	GreasePencil grease_pencil() {
		CLASS_TYPES_GETTER(GreasePencil, "grease_pencil")
	}

	Action pose_library() {
		CLASS_TYPES_GETTER(Action, "pose_library")
	}

	Pose pose();

	bool show_only_shape_key() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_shape_key")
	}

	void show_only_shape_key(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_shape_key", value)
	}

	bool use_shape_key_edit_mode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shape_key_edit_mode")
	}

	void use_shape_key_edit_mode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shape_key_edit_mode", value)
	}

	ShapeKey active_shape_key() {
		CLASS_TYPES_GETTER(ShapeKey, "active_shape_key")
	}

	int active_shape_key_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_shape_key_index")
	}

	void active_shape_key_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_shape_key_index", value)
	}

	bool use_dynamic_topology_sculpting() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dynamic_topology_sculpting")
	}

	void use_dynamic_topology_sculpting(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dynamic_topology_sculpting", value)
	}

	std::map<std::string, LodLevel> lod_levels();

	enum space_items_enum {
		space_items_WORLD = 0,	
		space_items_POSE = 2,	
		space_items_LOCAL_WITH_PARENT = 3,	
		space_items_LOCAL = 1	
	};

	std::map<std::string, int> create_string_to_space_items() {
		return {{"WORLD", space_items_WORLD}, {"POSE", space_items_POSE}, {"LOCAL_WITH_PARENT", space_items_LOCAL_WITH_PARENT}, {"LOCAL", space_items_LOCAL}};
	};

	std::map<int, std::string> create_space_items_to_string() {
		return {{space_items_WORLD, "WORLD"}, {space_items_POSE, "POSE"}, {space_items_LOCAL_WITH_PARENT, "LOCAL_WITH_PARENT"}, {space_items_LOCAL, "LOCAL"}};
	};

	const std::map<std::string, int> string_to_space_items = create_string_to_space_items();
	const std::map<int, std::string> space_items_to_string = create_space_items_to_string();

	VFLOAT16 convert_space(PoseBone pose_bone, VFLOAT16 matrix, space_items_enum from_space = space_items_WORLD, space_items_enum to_space = space_items_WORLD);

	VFLOAT16 calc_matrix_camera(int x = 1, int y = 1, float scale_x = 1.0f, float scale_y = 1.0f) {
		PYTHON_FUNCTION_ARGS_CALL("calc_matrix_camera", "iiff", x, y, scale_x, scale_y)
		CREATE_SINGLE_PYOBJ(result)
		POD_VECTOR_TYPES_CONV(result, FLOAT, (float)PyFloat_AsDouble(item), 16)
		NONCLASS_TYPES_RETURN(result_res)
	}

	struct camera_fit_coords_result {
		VFLOAT3 co_return;	/**< The location to aim to be able to see all given points */
		float scale_return;	/**< The ortho scale to aim to be able to see all given points (if relevant) */
	};

	camera_fit_coords_result camera_fit_coords(Scene scene, float coordinates[1]);

	enum mesh_type_items_enum {
		mesh_type_items_PREVIEW = 1,	
		mesh_type_items_RENDER = 2	
	};

	std::map<std::string, int> create_string_to_mesh_type_items() {
		return {{"PREVIEW", mesh_type_items_PREVIEW}, {"RENDER", mesh_type_items_RENDER}};
	};

	std::map<int, std::string> create_mesh_type_items_to_string() {
		return {{mesh_type_items_PREVIEW, "PREVIEW"}, {mesh_type_items_RENDER, "RENDER"}};
	};

	const std::map<std::string, int> string_to_mesh_type_items = create_string_to_mesh_type_items();
	const std::map<int, std::string> mesh_type_items_to_string = create_mesh_type_items_to_string();

	Mesh to_mesh(Scene scene, bool apply_modifiers, mesh_type_items_enum settings, bool calc_tessface = true, bool calc_undeformed = false);

	enum dupli_eval_mode_items_enum {
		dupli_eval_mode_items_VIEWPORT = 0,	
		dupli_eval_mode_items_PREVIEW = 1,	
		dupli_eval_mode_items_RENDER = 2	
	};

	std::map<std::string, int> create_string_to_dupli_eval_mode_items() {
		return {{"VIEWPORT", dupli_eval_mode_items_VIEWPORT}, {"PREVIEW", dupli_eval_mode_items_PREVIEW}, {"RENDER", dupli_eval_mode_items_RENDER}};
	};

	std::map<int, std::string> create_dupli_eval_mode_items_to_string() {
		return {{dupli_eval_mode_items_VIEWPORT, "VIEWPORT"}, {dupli_eval_mode_items_PREVIEW, "PREVIEW"}, {dupli_eval_mode_items_RENDER, "RENDER"}};
	};

	const std::map<std::string, int> string_to_dupli_eval_mode_items = create_string_to_dupli_eval_mode_items();
	const std::map<int, std::string> dupli_eval_mode_items_to_string = create_dupli_eval_mode_items_to_string();

	void dupli_list_create(Scene scene, dupli_eval_mode_items_enum settings = dupli_eval_mode_items_VIEWPORT);

	void dupli_list_clear() {
		PYTHON_FUNCTION_CALL("dupli_list_clear")
	}

	Object find_armature() {
		PYTHON_FUNCTION_CALL("find_armature")
		CLASS_TYPES_RETURN(Object)
	}

	ShapeKey shape_key_add(const std::string name = "Key", bool from_mix = true) {
		PYTHON_FUNCTION_ARGS_CALL("shape_key_add", "si", name, from_mix)
		CLASS_TYPES_RETURN(ShapeKey)
	}

	void shape_key_remove(ShapeKey key) {
		PYTHON_FUNCTION_ARGS_CALL("shape_key_remove", "O", key.get_pyobjref())
	}

	struct ray_cast_result {
		VFLOAT3 location;	/**< The hit location of this ray cast */
		VFLOAT3 normal;	/**< The face normal at the ray cast hit location */
		int index;	/**< The face index, -1 when no intersection is found */
	};

	ray_cast_result ray_cast(VFLOAT3 start, VFLOAT3 end) {
		ARRAY_TO_PYOBJ(start, "O", 3)
		ARRAY_TO_PYOBJ(end, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("ray_cast", "OO", start_tupleval, end_tupleval)
		DECREF_ARRAY_ITEMS(start, 3)
		DECREF_ARRAY_ITEMS(end, 3)
		CREATE_MULTIPLE_PYOBJS(*location_obj, *normal_obj, *index_obj)
		UNPACK_TUPLE_TO_OBJS("ray_cast", 3, &location_obj, &normal_obj, &index_obj)
		POD_VECTOR_TYPES_CONV(location, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(normal, FLOAT, (float)PyFloat_AsDouble(item), 3)
		PRIMITIVE_TYPES_CONV(index, int, PyLong_AsLong(index_obj))
		NONCLASS_TYPES_RETURN(location_res, normal_res, index_res)
	}

	struct closest_point_on_mesh_result {
		VFLOAT3 location;	/**< The location on the object closest to the point */
		VFLOAT3 normal;	/**< The face normal at the closest point */
		int index;	/**< The face index, -1 when no closest point is found */
	};

	closest_point_on_mesh_result closest_point_on_mesh(VFLOAT3 point, float max_dist = 1.844674e+019f) {
		ARRAY_TO_PYOBJ(point, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("closest_point_on_mesh", "Of", point_tupleval, max_dist)
		DECREF_ARRAY_ITEMS(point, 3)
		CREATE_MULTIPLE_PYOBJS(*location_obj, *normal_obj, *index_obj)
		UNPACK_TUPLE_TO_OBJS("closest_point_on_mesh", 3, &location_obj, &normal_obj, &index_obj)
		POD_VECTOR_TYPES_CONV(location, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(normal, FLOAT, (float)PyFloat_AsDouble(item), 3)
		PRIMITIVE_TYPES_CONV(index, int, PyLong_AsLong(index_obj))
		NONCLASS_TYPES_RETURN(location_res, normal_res, index_res)
	}

	bool is_visible(Scene scene);

	bool is_modified(Scene scene, mesh_type_items_enum settings);

	bool is_deform_modified(Scene scene, mesh_type_items_enum settings);

	enum mesh_dm_info_items_enum {
		mesh_dm_info_items_SOURCE = 0,	
		mesh_dm_info_items_DEFORM = 1,	
		mesh_dm_info_items_FINAL = 2	
	};

	std::map<std::string, int> create_string_to_mesh_dm_info_items() {
		return {{"SOURCE", mesh_dm_info_items_SOURCE}, {"DEFORM", mesh_dm_info_items_DEFORM}, {"FINAL", mesh_dm_info_items_FINAL}};
	};

	std::map<int, std::string> create_mesh_dm_info_items_to_string() {
		return {{mesh_dm_info_items_SOURCE, "SOURCE"}, {mesh_dm_info_items_DEFORM, "DEFORM"}, {mesh_dm_info_items_FINAL, "FINAL"}};
	};

	const std::map<std::string, int> string_to_mesh_dm_info_items = create_string_to_mesh_dm_info_items();
	const std::map<int, std::string> mesh_dm_info_items_to_string = create_mesh_dm_info_items_to_string();

	std::string dm_info(mesh_dm_info_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("dm_info", "s", mesh_dm_info_items_to_string.at(type))
		CREATE_SINGLE_PYOBJ(result)
		STRING_TYPE_CONV(result)
		NONCLASS_TYPES_RETURN(result_res)
	}

	bool update_from_editmode() {
		PYTHON_FUNCTION_CALL("update_from_editmode")
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	void cache_release() {
		PYTHON_FUNCTION_CALL("cache_release")
	}
};

class GameObjectSettings : public pyUniplug {
public:
	GameObjectSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	GameObjectSettings() : pyUniplug(0) { }

	std::map<std::string, Sensor> sensors();

	std::map<std::string, Controller> controllers() {
		MAP_TYPE_GETTER("controllers", Controller)
	}

	std::map<std::string, Actuator> actuators() {
		MAP_TYPE_GETTER("actuators", Actuator)
	}

	std::map<std::string, GameProperty> properties();

	bool show_sensors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sensors")
	}

	void show_sensors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sensors", value)
	}

	bool show_controllers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_controllers")
	}

	void show_controllers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_controllers", value)
	}

	bool show_actuators() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_actuators")
	}

	void show_actuators(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_actuators", value)
	}

	enum body_type_items_enum {
		body_type_items_NO_COLLISION = 0,	
		body_type_items_STATIC = 1,	
		body_type_items_DYNAMIC = 2,	
		body_type_items_RIGID_BODY = 3,	
		body_type_items_SOFT_BODY = 4,	
		body_type_items_OCCLUDER = 5,	
		body_type_items_SENSOR = 6,	
		body_type_items_NAVMESH = 7,	
		body_type_items_CHARACTER = 8	
	};

	std::map<std::string, int> create_string_to_body_type_items() {
		return {{"NO_COLLISION", body_type_items_NO_COLLISION}, {"STATIC", body_type_items_STATIC}, {"DYNAMIC", body_type_items_DYNAMIC}, {"RIGID_BODY", body_type_items_RIGID_BODY}, {"SOFT_BODY", body_type_items_SOFT_BODY}, {"OCCLUDER", body_type_items_OCCLUDER}, {"SENSOR", body_type_items_SENSOR}, {"NAVMESH", body_type_items_NAVMESH}, {"CHARACTER", body_type_items_CHARACTER}};
	};

	std::map<int, std::string> create_body_type_items_to_string() {
		return {{body_type_items_NO_COLLISION, "NO_COLLISION"}, {body_type_items_STATIC, "STATIC"}, {body_type_items_DYNAMIC, "DYNAMIC"}, {body_type_items_RIGID_BODY, "RIGID_BODY"}, {body_type_items_SOFT_BODY, "SOFT_BODY"}, {body_type_items_OCCLUDER, "OCCLUDER"}, {body_type_items_SENSOR, "SENSOR"}, {body_type_items_NAVMESH, "NAVMESH"}, {body_type_items_CHARACTER, "CHARACTER"}};
	};

	const std::map<std::string, int> string_to_body_type_items = create_string_to_body_type_items();
	const std::map<int, std::string> body_type_items_to_string = create_body_type_items_to_string();

	body_type_items_enum physics_type() {
		STRING_TYPE_GETTER("physics_type", static_cast<body_type_items_enum>(string_to_body_type_items.at(resstr)))
	}

	void physics_type(body_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "physics_type", body_type_items_to_string.at(value))
	}

	bool use_record_animation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_record_animation")
	}

	void use_record_animation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_record_animation", value)
	}

	bool use_actor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_actor")
	}

	void use_actor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_actor", value)
	}

	bool use_ghost() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ghost")
	}

	void use_ghost(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ghost", value)
	}

	float mass() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mass")
	}

	void mass(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mass", value)
	}

	float radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radius")
	}

	void radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radius", value)
	}

	bool use_sleep() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sleep")
	}

	void use_sleep(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sleep", value)
	}

	float damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping")
	}

	void damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping", value)
	}

	float rotation_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rotation_damping")
	}

	void rotation_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rotation_damping", value)
	}

	float velocity_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_min")
	}

	void velocity_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_min", value)
	}

	float velocity_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_max")
	}

	void velocity_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_max", value)
	}

	float angular_velocity_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angular_velocity_min")
	}

	void angular_velocity_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angular_velocity_min", value)
	}

	float angular_velocity_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angular_velocity_max")
	}

	void angular_velocity_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angular_velocity_max", value)
	}

	float step_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "step_height")
	}

	void step_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "step_height", value)
	}

	float jump_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "jump_speed")
	}

	void jump_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "jump_speed", value)
	}

	float fall_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fall_speed")
	}

	void fall_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fall_speed", value)
	}

	std::array<bool, 16> collision_group() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "collision_group", 16)
	}

	void collision_group(bool values[16]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "collision_group", 16)
	}

	std::array<bool, 16> collision_mask() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "collision_mask", 16)
	}

	void collision_mask(bool values[16]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "collision_mask", 16)
	}

	bool lock_location_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_location_x")
	}

	void lock_location_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_location_x", value)
	}

	bool lock_location_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_location_y")
	}

	void lock_location_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_location_y", value)
	}

	bool lock_location_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_location_z")
	}

	void lock_location_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_location_z", value)
	}

	bool lock_rotation_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_x")
	}

	void lock_rotation_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_x", value)
	}

	bool lock_rotation_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_y")
	}

	void lock_rotation_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_y", value)
	}

	bool lock_rotation_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_z")
	}

	void lock_rotation_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_z", value)
	}

	bool use_activity_culling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_activity_culling")
	}

	void use_activity_culling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_activity_culling", value)
	}

	bool use_material_physics_fh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_material_physics_fh")
	}

	void use_material_physics_fh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_material_physics_fh", value)
	}

	bool use_rotate_from_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotate_from_normal")
	}

	void use_rotate_from_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotate_from_normal", value)
	}

	float form_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "form_factor")
	}

	void form_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "form_factor", value)
	}

	bool use_anisotropic_friction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_anisotropic_friction")
	}

	void use_anisotropic_friction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_anisotropic_friction", value)
	}

	VFLOAT3 friction_coefficients() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "friction_coefficients", 3)
	}

	void friction_coefficients(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "friction_coefficients", 3)
	}

	bool use_collision_bounds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_collision_bounds")
	}

	void use_collision_bounds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_collision_bounds", value)
	}

	enum collision_bounds_items_enum {
		collision_bounds_items_BOX = 0,	
		collision_bounds_items_SPHERE = 1,	
		collision_bounds_items_CYLINDER = 2,	
		collision_bounds_items_CONE = 3,	
		collision_bounds_items_CONVEX_HULL = 5,	
		collision_bounds_items_TRIANGLE_MESH = 4,	
		collision_bounds_items_CAPSULE = 7	
	};

	std::map<std::string, int> create_string_to_collision_bounds_items() {
		return {{"BOX", collision_bounds_items_BOX}, {"SPHERE", collision_bounds_items_SPHERE}, {"CYLINDER", collision_bounds_items_CYLINDER}, {"CONE", collision_bounds_items_CONE}, {"CONVEX_HULL", collision_bounds_items_CONVEX_HULL}, {"TRIANGLE_MESH", collision_bounds_items_TRIANGLE_MESH}, {"CAPSULE", collision_bounds_items_CAPSULE}};
	};

	std::map<int, std::string> create_collision_bounds_items_to_string() {
		return {{collision_bounds_items_BOX, "BOX"}, {collision_bounds_items_SPHERE, "SPHERE"}, {collision_bounds_items_CYLINDER, "CYLINDER"}, {collision_bounds_items_CONE, "CONE"}, {collision_bounds_items_CONVEX_HULL, "CONVEX_HULL"}, {collision_bounds_items_TRIANGLE_MESH, "TRIANGLE_MESH"}, {collision_bounds_items_CAPSULE, "CAPSULE"}};
	};

	const std::map<std::string, int> string_to_collision_bounds_items = create_string_to_collision_bounds_items();
	const std::map<int, std::string> collision_bounds_items_to_string = create_collision_bounds_items_to_string();

	collision_bounds_items_enum collision_bounds_type() {
		STRING_TYPE_GETTER("collision_bounds_type", static_cast<collision_bounds_items_enum>(string_to_collision_bounds_items.at(resstr)))
	}

	void collision_bounds_type(collision_bounds_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "collision_bounds_type", collision_bounds_items_to_string.at(value))
	}

	bool use_collision_compound() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_collision_compound")
	}

	void use_collision_compound(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_collision_compound", value)
	}

	float collision_margin() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "collision_margin")
	}

	void collision_margin(float value) {
		PRIMITIVE_TYPES_SETTER("f", "collision_margin", value)
	}

	GameSoftBodySettings soft_body();

	bool use_obstacle_create() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_obstacle_create")
	}

	void use_obstacle_create(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_obstacle_create", value)
	}

	float obstacle_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "obstacle_radius")
	}

	void obstacle_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "obstacle_radius", value)
	}

	std::array<bool, 30> states_visible() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "states_visible", 30)
	}

	void states_visible(bool values[30]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "states_visible", 30)
	}

	std::array<bool, 30> used_states() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "used_states", 30)
	}

	void used_states(bool values[30]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "used_states", 30)
	}

	std::array<bool, 30> states_initial() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "states_initial", 30)
	}

	void states_initial(bool values[30]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "states_initial", 30)
	}

	bool show_debug_state() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_debug_state")
	}

	void show_debug_state(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_debug_state", value)
	}

	bool use_all_states() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_all_states")
	}

	void use_all_states(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_all_states", value)
	}

	bool show_state_panel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_state_panel")
	}

	void show_state_panel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_state_panel", value)
	}
};

class ObjectBase : public pyUniplug {
public:
	ObjectBase(PyObject* pyobj) : pyUniplug(pyobj) {}
	ObjectBase() : pyUniplug(0) { }

	Object object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	std::array<bool, 20> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 20)
	}

	void layers(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 20)
	}

	std::array<bool, 8> layers_local_view() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_local_view", 8)
	}

	void layers_local_view(bool values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_local_view", 8)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	void layers_from_view(SpaceView3D view);
};

class VertexGroup : public pyUniplug {
public:
	VertexGroup(PyObject* pyobj) : pyUniplug(pyobj) {}
	VertexGroup() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool lock_weight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_weight")
	}

	void lock_weight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_weight", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}

	enum assign_mode_items_enum {
		assign_mode_items_REPLACE = 1,	
		assign_mode_items_ADD = 2,	
		assign_mode_items_SUBTRACT = 3	
	};

	std::map<std::string, int> create_string_to_assign_mode_items() {
		return {{"REPLACE", assign_mode_items_REPLACE}, {"ADD", assign_mode_items_ADD}, {"SUBTRACT", assign_mode_items_SUBTRACT}};
	};

	std::map<int, std::string> create_assign_mode_items_to_string() {
		return {{assign_mode_items_REPLACE, "REPLACE"}, {assign_mode_items_ADD, "ADD"}, {assign_mode_items_SUBTRACT, "SUBTRACT"}};
	};

	const std::map<std::string, int> string_to_assign_mode_items = create_string_to_assign_mode_items();
	const std::map<int, std::string> assign_mode_items_to_string = create_assign_mode_items_to_string();

	void add(int index[1], float weight, assign_mode_items_enum type) {
		ARRAY_TO_PYOBJ(index, "i", 1)
		PYTHON_FUNCTION_ARGS_CALL("add", "ifs", index_tupleval, weight, assign_mode_items_to_string.at(type))
		DECREF_ARRAY_ITEMS(index, 1)
	}

	void remove(int index[1]) {
		ARRAY_TO_PYOBJ(index, "i", 1)
		PYTHON_FUNCTION_ARGS_CALL("remove", "i", index_tupleval)
		DECREF_ARRAY_ITEMS(index, 1)
	}

	float weight(int index) {
		PYTHON_FUNCTION_ARGS_CALL("weight", "i", index)
		CREATE_SINGLE_PYOBJ(weight)
		PRIMITIVE_TYPES_CONV(weight, float, (float)PyFloat_AsDouble(weight_obj))
		NONCLASS_TYPES_RETURN(weight_res)
	}
};

class MaterialSlot : public pyUniplug {
public:
	MaterialSlot(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaterialSlot() : pyUniplug(0) { }

	Material material() {
		CLASS_TYPES_GETTER(Material, "material")
	}

	enum link_items_enum {
		link_items_OBJECT = 1,	
		link_items_DATA = 0	
	};

	std::map<std::string, int> create_string_to_link_items() {
		return {{"OBJECT", link_items_OBJECT}, {"DATA", link_items_DATA}};
	};

	std::map<int, std::string> create_link_items_to_string() {
		return {{link_items_OBJECT, "OBJECT"}, {link_items_DATA, "DATA"}};
	};

	const std::map<std::string, int> string_to_link_items = create_string_to_link_items();
	const std::map<int, std::string> link_items_to_string = create_link_items_to_string();

	link_items_enum link() {
		STRING_TYPE_GETTER("link", static_cast<link_items_enum>(string_to_link_items.at(resstr)))
	}

	void link(link_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "link", link_items_to_string.at(value))
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class DupliObject : public pyUniplug {
public:
	DupliObject(PyObject* pyobj) : pyUniplug(pyobj) {}
	DupliObject() : pyUniplug(0) { }

	Object object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	VFLOAT16 matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix", 16)
	}

	void matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix", 16)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}

	std::array<int, 8> persistent_id() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "persistent_id", 8)
	}

	void persistent_id(int values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "persistent_id", 8)
	}

	ParticleSystem particle_system();

	VFLOAT3 orco() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "orco", 3)
	}

	void orco(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "orco", 3)
	}

	VFLOAT2 uv() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv", 2)
	}

	void uv(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv", 2)
	}

	enum dupli_items_enum {
		dupli_items_NONE = 0,	
		dupli_items_FRAMES = 8,	
		dupli_items_VERTS = 16,	
		dupli_items_FACES = 512,	
		dupli_items_GROUP = 256	
	};

	std::map<std::string, int> create_string_to_dupli_items() {
		return {{"NONE", dupli_items_NONE}, {"FRAMES", dupli_items_FRAMES}, {"VERTS", dupli_items_VERTS}, {"FACES", dupli_items_FACES}, {"GROUP", dupli_items_GROUP}};
	};

	std::map<int, std::string> create_dupli_items_to_string() {
		return {{dupli_items_NONE, "NONE"}, {dupli_items_FRAMES, "FRAMES"}, {dupli_items_VERTS, "VERTS"}, {dupli_items_FACES, "FACES"}, {dupli_items_GROUP, "GROUP"}};
	};

	const std::map<std::string, int> string_to_dupli_items = create_string_to_dupli_items();
	const std::map<int, std::string> dupli_items_to_string = create_dupli_items_to_string();

	dupli_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<dupli_items_enum>(string_to_dupli_items.at(resstr)))
	}

	void type(dupli_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", dupli_items_to_string.at(value))
	}
};

class LodLevel : public pyUniplug {
public:
	LodLevel(PyObject* pyobj) : pyUniplug(pyobj) {}
	LodLevel() : pyUniplug(0) { }

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	int object_hysteresis_percentage() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "object_hysteresis_percentage")
	}

	void object_hysteresis_percentage(int value) {
		PRIMITIVE_TYPES_SETTER("i", "object_hysteresis_percentage", value)
	}

	Object object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	bool use_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mesh")
	}

	void use_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mesh", value)
	}

	bool use_material() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_material")
	}

	void use_material(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_material", value)
	}

	bool use_object_hysteresis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_object_hysteresis")
	}

	void use_object_hysteresis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_object_hysteresis", value)
	}
};

class PointCache : public pyUniplug {
public:
	PointCache(PyObject* pyobj) : pyUniplug(pyobj) {}
	PointCache() : pyUniplug(0) { }

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	int frame_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_step")
	}

	void frame_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_step", value)
	}

	int index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "index")
	}

	void index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "index", value)
	}

	enum point_cache_compress_items_enum {
		point_cache_compress_items_NO = 0,	
		point_cache_compress_items_LIGHT = 1,	
		point_cache_compress_items_HEAVY = 2	
	};

	std::map<std::string, int> create_string_to_point_cache_compress_items() {
		return {{"NO", point_cache_compress_items_NO}, {"LIGHT", point_cache_compress_items_LIGHT}, {"HEAVY", point_cache_compress_items_HEAVY}};
	};

	std::map<int, std::string> create_point_cache_compress_items_to_string() {
		return {{point_cache_compress_items_NO, "NO"}, {point_cache_compress_items_LIGHT, "LIGHT"}, {point_cache_compress_items_HEAVY, "HEAVY"}};
	};

	const std::map<std::string, int> string_to_point_cache_compress_items = create_string_to_point_cache_compress_items();
	const std::map<int, std::string> point_cache_compress_items_to_string = create_point_cache_compress_items_to_string();

	point_cache_compress_items_enum compression() {
		STRING_TYPE_GETTER("compression", static_cast<point_cache_compress_items_enum>(string_to_point_cache_compress_items.at(resstr)))
	}

	void compression(point_cache_compress_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "compression", point_cache_compress_items_to_string.at(value))
	}

	bool is_baked() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_baked")
	}

	void is_baked(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_baked", value)
	}

	bool is_baking() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_baking")
	}

	void is_baking(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_baking", value)
	}

	bool use_disk_cache() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_disk_cache")
	}

	void use_disk_cache(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_disk_cache", value)
	}

	bool is_outdated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_outdated")
	}

	void is_outdated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_outdated", value)
	}

	bool is_frame_skip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_frame_skip")
	}

	void is_frame_skip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_frame_skip", value)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	std::string info() {
		STRING_TYPE_GETTER("info", resstr)
	}

	void info(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "info", value)
	}

	bool use_external() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_external")
	}

	void use_external(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_external", value)
	}

	bool use_library_path() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_library_path")
	}

	void use_library_path(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_library_path", value)
	}

	std::map<std::string, PointCache> point_caches() {
		MAP_TYPE_GETTER("point_caches", PointCache)
	}
};

class CollisionSettings : public pyUniplug {
public:
	CollisionSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	CollisionSettings() : pyUniplug(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	float damping_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping_factor")
	}

	void damping_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping_factor", value)
	}

	float damping_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping_random")
	}

	void damping_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping_random", value)
	}

	float friction_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "friction_factor")
	}

	void friction_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "friction_factor", value)
	}

	float friction_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "friction_random")
	}

	void friction_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "friction_random", value)
	}

	float permeability() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "permeability")
	}

	void permeability(float value) {
		PRIMITIVE_TYPES_SETTER("f", "permeability", value)
	}

	bool use_particle_kill() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_particle_kill")
	}

	void use_particle_kill(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_particle_kill", value)
	}

	float stickiness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "stickiness")
	}

	void stickiness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "stickiness", value)
	}

	float thickness_inner() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_inner")
	}

	void thickness_inner(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_inner", value)
	}

	float thickness_outer() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_outer")
	}

	void thickness_outer(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_outer", value)
	}

	float damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping")
	}

	void damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping", value)
	}

	float absorption() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "absorption")
	}

	void absorption(float value) {
		PRIMITIVE_TYPES_SETTER("f", "absorption", value)
	}
};

class EffectorWeights : public pyUniplug {
public:
	EffectorWeights(PyObject* pyobj) : pyUniplug(pyobj) {}
	EffectorWeights() : pyUniplug(0) { }

	bool apply_to_hair_growing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "apply_to_hair_growing")
	}

	void apply_to_hair_growing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "apply_to_hair_growing", value)
	}

	Group group() {
		CLASS_TYPES_GETTER(Group, "group")
	}

	float gravity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gravity")
	}

	void gravity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gravity", value)
	}

	float all() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "all")
	}

	void all(float value) {
		PRIMITIVE_TYPES_SETTER("f", "all", value)
	}

	float force() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "force")
	}

	void force(float value) {
		PRIMITIVE_TYPES_SETTER("f", "force", value)
	}

	float vortex() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "vortex")
	}

	void vortex(float value) {
		PRIMITIVE_TYPES_SETTER("f", "vortex", value)
	}

	float magnetic() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "magnetic")
	}

	void magnetic(float value) {
		PRIMITIVE_TYPES_SETTER("f", "magnetic", value)
	}

	float wind() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "wind")
	}

	void wind(float value) {
		PRIMITIVE_TYPES_SETTER("f", "wind", value)
	}

	float curve_guide() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "curve_guide")
	}

	void curve_guide(float value) {
		PRIMITIVE_TYPES_SETTER("f", "curve_guide", value)
	}

	float texture() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "texture")
	}

	void texture(float value) {
		PRIMITIVE_TYPES_SETTER("f", "texture", value)
	}

	float harmonic() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "harmonic")
	}

	void harmonic(float value) {
		PRIMITIVE_TYPES_SETTER("f", "harmonic", value)
	}

	float charge() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "charge")
	}

	void charge(float value) {
		PRIMITIVE_TYPES_SETTER("f", "charge", value)
	}

	float lennardjones() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lennardjones")
	}

	void lennardjones(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lennardjones", value)
	}

	float boid() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "boid")
	}

	void boid(float value) {
		PRIMITIVE_TYPES_SETTER("f", "boid", value)
	}

	float turbulence() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "turbulence")
	}

	void turbulence(float value) {
		PRIMITIVE_TYPES_SETTER("f", "turbulence", value)
	}

	float drag() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "drag")
	}

	void drag(float value) {
		PRIMITIVE_TYPES_SETTER("f", "drag", value)
	}

	float smokeflow() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "smokeflow")
	}

	void smokeflow(float value) {
		PRIMITIVE_TYPES_SETTER("f", "smokeflow", value)
	}
};

class FieldSettings : public pyUniplug {
public:
	FieldSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	FieldSettings() : pyUniplug(0) { }

	enum field_type_items_enum {
		field_type_items_NONE = 0,	
		field_type_items_FORCE = 1,	
		field_type_items_WIND = 4,	
		field_type_items_VORTEX = 2,	
		field_type_items_MAGNET = 3,	
		field_type_items_HARMONIC = 7,	
		field_type_items_CHARGE = 8,	
		field_type_items_LENNARDJ = 9,	
		field_type_items_TEXTURE = 6,	
		field_type_items_GUIDE = 5,	
		field_type_items_BOID = 10,	
		field_type_items_TURBULENCE = 11,	
		field_type_items_DRAG = 12,	
		field_type_items_SMOKE_FLOW = 13	
	};

	std::map<std::string, int> create_string_to_field_type_items() {
		return {{"NONE", field_type_items_NONE}, {"FORCE", field_type_items_FORCE}, {"WIND", field_type_items_WIND}, {"VORTEX", field_type_items_VORTEX}, {"MAGNET", field_type_items_MAGNET}, {"HARMONIC", field_type_items_HARMONIC}, {"CHARGE", field_type_items_CHARGE}, {"LENNARDJ", field_type_items_LENNARDJ}, {"TEXTURE", field_type_items_TEXTURE}, {"GUIDE", field_type_items_GUIDE}, {"BOID", field_type_items_BOID}, {"TURBULENCE", field_type_items_TURBULENCE}, {"DRAG", field_type_items_DRAG}, {"SMOKE_FLOW", field_type_items_SMOKE_FLOW}};
	};

	std::map<int, std::string> create_field_type_items_to_string() {
		return {{field_type_items_NONE, "NONE"}, {field_type_items_FORCE, "FORCE"}, {field_type_items_WIND, "WIND"}, {field_type_items_VORTEX, "VORTEX"}, {field_type_items_MAGNET, "MAGNET"}, {field_type_items_HARMONIC, "HARMONIC"}, {field_type_items_CHARGE, "CHARGE"}, {field_type_items_LENNARDJ, "LENNARDJ"}, {field_type_items_TEXTURE, "TEXTURE"}, {field_type_items_GUIDE, "GUIDE"}, {field_type_items_BOID, "BOID"}, {field_type_items_TURBULENCE, "TURBULENCE"}, {field_type_items_DRAG, "DRAG"}, {field_type_items_SMOKE_FLOW, "SMOKE_FLOW"}};
	};

	const std::map<std::string, int> string_to_field_type_items = create_string_to_field_type_items();
	const std::map<int, std::string> field_type_items_to_string = create_field_type_items_to_string();

	field_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<field_type_items_enum>(string_to_field_type_items.at(resstr)))
	}

	void type(field_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", field_type_items_to_string.at(value))
	}

	enum effector_shape_items_enum {
		effector_shape_items_POINT = 0,	
		effector_shape_items_PLANE = 1,	
		effector_shape_items_SURFACE = 2,	
		effector_shape_items_POINTS = 3	
	};

	std::map<std::string, int> create_string_to_effector_shape_items() {
		return {{"POINT", effector_shape_items_POINT}, {"PLANE", effector_shape_items_PLANE}, {"SURFACE", effector_shape_items_SURFACE}, {"POINTS", effector_shape_items_POINTS}};
	};

	std::map<int, std::string> create_effector_shape_items_to_string() {
		return {{effector_shape_items_POINT, "POINT"}, {effector_shape_items_PLANE, "PLANE"}, {effector_shape_items_SURFACE, "SURFACE"}, {effector_shape_items_POINTS, "POINTS"}};
	};

	const std::map<std::string, int> string_to_effector_shape_items = create_string_to_effector_shape_items();
	const std::map<int, std::string> effector_shape_items_to_string = create_effector_shape_items_to_string();

	effector_shape_items_enum shape() {
		STRING_TYPE_GETTER("shape", static_cast<effector_shape_items_enum>(string_to_effector_shape_items.at(resstr)))
	}

	void shape(effector_shape_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shape", effector_shape_items_to_string.at(value))
	}

	enum falloff_items_enum {
		falloff_items_SPHERE = 0,	
		falloff_items_TUBE = 1,	
		falloff_items_CONE = 2	
	};

	std::map<std::string, int> create_string_to_falloff_items() {
		return {{"SPHERE", falloff_items_SPHERE}, {"TUBE", falloff_items_TUBE}, {"CONE", falloff_items_CONE}};
	};

	std::map<int, std::string> create_falloff_items_to_string() {
		return {{falloff_items_SPHERE, "SPHERE"}, {falloff_items_TUBE, "TUBE"}, {falloff_items_CONE, "CONE"}};
	};

	const std::map<std::string, int> string_to_falloff_items = create_string_to_falloff_items();
	const std::map<int, std::string> falloff_items_to_string = create_falloff_items_to_string();

	falloff_items_enum falloff_type() {
		STRING_TYPE_GETTER("falloff_type", static_cast<falloff_items_enum>(string_to_falloff_items.at(resstr)))
	}

	void falloff_type(falloff_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff_type", falloff_items_to_string.at(value))
	}

	enum texture_items_enum {
		texture_items_RGB = 0,	
		texture_items_GRADIENT = 1,	
		texture_items_CURL = 2	
	};

	std::map<std::string, int> create_string_to_texture_items() {
		return {{"RGB", texture_items_RGB}, {"GRADIENT", texture_items_GRADIENT}, {"CURL", texture_items_CURL}};
	};

	std::map<int, std::string> create_texture_items_to_string() {
		return {{texture_items_RGB, "RGB"}, {texture_items_GRADIENT, "GRADIENT"}, {texture_items_CURL, "CURL"}};
	};

	const std::map<std::string, int> string_to_texture_items = create_string_to_texture_items();
	const std::map<int, std::string> texture_items_to_string = create_texture_items_to_string();

	texture_items_enum texture_mode() {
		STRING_TYPE_GETTER("texture_mode", static_cast<texture_items_enum>(string_to_texture_items.at(resstr)))
	}

	void texture_mode(texture_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_mode", texture_items_to_string.at(value))
	}

	enum zdirection_items_enum {
		zdirection_items_BOTH = 0,	
		zdirection_items_POSITIVE = 1,	
		zdirection_items_NEGATIVE = 2	
	};

	std::map<std::string, int> create_string_to_zdirection_items() {
		return {{"BOTH", zdirection_items_BOTH}, {"POSITIVE", zdirection_items_POSITIVE}, {"NEGATIVE", zdirection_items_NEGATIVE}};
	};

	std::map<int, std::string> create_zdirection_items_to_string() {
		return {{zdirection_items_BOTH, "BOTH"}, {zdirection_items_POSITIVE, "POSITIVE"}, {zdirection_items_NEGATIVE, "NEGATIVE"}};
	};

	const std::map<std::string, int> string_to_zdirection_items = create_string_to_zdirection_items();
	const std::map<int, std::string> zdirection_items_to_string = create_zdirection_items_to_string();

	zdirection_items_enum z_direction() {
		STRING_TYPE_GETTER("z_direction", static_cast<zdirection_items_enum>(string_to_zdirection_items.at(resstr)))
	}

	void z_direction(zdirection_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "z_direction", zdirection_items_to_string.at(value))
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	float linear_drag() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "linear_drag")
	}

	void linear_drag(float value) {
		PRIMITIVE_TYPES_SETTER("f", "linear_drag", value)
	}

	float harmonic_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "harmonic_damping")
	}

	void harmonic_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "harmonic_damping", value)
	}

	float quadratic_drag() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "quadratic_drag")
	}

	void quadratic_drag(float value) {
		PRIMITIVE_TYPES_SETTER("f", "quadratic_drag", value)
	}

	float flow() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flow")
	}

	void flow(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flow", value)
	}

	float inflow() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "inflow")
	}

	void inflow(float value) {
		PRIMITIVE_TYPES_SETTER("f", "inflow", value)
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	float rest_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rest_length")
	}

	void rest_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rest_length", value)
	}

	float falloff_power() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff_power")
	}

	void falloff_power(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff_power", value)
	}

	float distance_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_min")
	}

	void distance_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_min", value)
	}

	float distance_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_max")
	}

	void distance_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_max", value)
	}

	float radial_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radial_min")
	}

	void radial_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radial_min", value)
	}

	float radial_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radial_max")
	}

	void radial_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radial_max", value)
	}

	float radial_falloff() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "radial_falloff")
	}

	void radial_falloff(float value) {
		PRIMITIVE_TYPES_SETTER("f", "radial_falloff", value)
	}

	float texture_nabla() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "texture_nabla")
	}

	void texture_nabla(float value) {
		PRIMITIVE_TYPES_SETTER("f", "texture_nabla", value)
	}

	float noise() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "noise")
	}

	void noise(float value) {
		PRIMITIVE_TYPES_SETTER("f", "noise", value)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}

	bool use_min_distance() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_min_distance")
	}

	void use_min_distance(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_min_distance", value)
	}

	bool use_max_distance() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_max_distance")
	}

	void use_max_distance(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_max_distance", value)
	}

	bool use_radial_min() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_radial_min")
	}

	void use_radial_min(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_radial_min", value)
	}

	bool use_radial_max() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_radial_max")
	}

	void use_radial_max(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_radial_max", value)
	}

	bool use_object_coords() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_object_coords")
	}

	void use_object_coords(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_object_coords", value)
	}

	bool use_global_coords() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_global_coords")
	}

	void use_global_coords(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_global_coords", value)
	}

	bool use_2d_force() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_2d_force")
	}

	void use_2d_force(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_2d_force", value)
	}

	bool use_root_coords() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_root_coords")
	}

	void use_root_coords(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_root_coords", value)
	}

	bool apply_to_location() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "apply_to_location")
	}

	void apply_to_location(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "apply_to_location", value)
	}

	bool apply_to_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "apply_to_rotation")
	}

	void apply_to_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "apply_to_rotation", value)
	}

	bool use_absorption() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_absorption")
	}

	void use_absorption(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_absorption", value)
	}

	bool use_multiple_springs() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multiple_springs")
	}

	void use_multiple_springs(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multiple_springs", value)
	}

	bool use_smoke_density() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smoke_density")
	}

	void use_smoke_density(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smoke_density", value)
	}

	Texture texture() {
		CLASS_TYPES_GETTER(Texture, "texture")
	}

	Object source_object() {
		CLASS_TYPES_GETTER(Object, "source_object")
	}

	float guide_minimum() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "guide_minimum")
	}

	void guide_minimum(float value) {
		PRIMITIVE_TYPES_SETTER("f", "guide_minimum", value)
	}

	float guide_free() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "guide_free")
	}

	void guide_free(float value) {
		PRIMITIVE_TYPES_SETTER("f", "guide_free", value)
	}

	bool use_guide_path_add() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_guide_path_add")
	}

	void use_guide_path_add(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_guide_path_add", value)
	}

	bool use_guide_path_weight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_guide_path_weight")
	}

	void use_guide_path_weight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_guide_path_weight", value)
	}

	float guide_clump_amount() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "guide_clump_amount")
	}

	void guide_clump_amount(float value) {
		PRIMITIVE_TYPES_SETTER("f", "guide_clump_amount", value)
	}

	float guide_clump_shape() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "guide_clump_shape")
	}

	void guide_clump_shape(float value) {
		PRIMITIVE_TYPES_SETTER("f", "guide_clump_shape", value)
	}

	enum guide_kink_items_enum {
		guide_kink_items_NONE = 0,	
		guide_kink_items_CURL = 1,	
		guide_kink_items_RADIAL = 2,	
		guide_kink_items_WAVE = 3,	
		guide_kink_items_BRAID = 4,	
		guide_kink_items_ROTATION = 5,	
		guide_kink_items_ROLL = 6	
	};

	std::map<std::string, int> create_string_to_guide_kink_items() {
		return {{"NONE", guide_kink_items_NONE}, {"CURL", guide_kink_items_CURL}, {"RADIAL", guide_kink_items_RADIAL}, {"WAVE", guide_kink_items_WAVE}, {"BRAID", guide_kink_items_BRAID}, {"ROTATION", guide_kink_items_ROTATION}, {"ROLL", guide_kink_items_ROLL}};
	};

	std::map<int, std::string> create_guide_kink_items_to_string() {
		return {{guide_kink_items_NONE, "NONE"}, {guide_kink_items_CURL, "CURL"}, {guide_kink_items_RADIAL, "RADIAL"}, {guide_kink_items_WAVE, "WAVE"}, {guide_kink_items_BRAID, "BRAID"}, {guide_kink_items_ROTATION, "ROTATION"}, {guide_kink_items_ROLL, "ROLL"}};
	};

	const std::map<std::string, int> string_to_guide_kink_items = create_string_to_guide_kink_items();
	const std::map<int, std::string> guide_kink_items_to_string = create_guide_kink_items_to_string();

	guide_kink_items_enum guide_kink_type() {
		STRING_TYPE_GETTER("guide_kink_type", static_cast<guide_kink_items_enum>(string_to_guide_kink_items.at(resstr)))
	}

	void guide_kink_type(guide_kink_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "guide_kink_type", guide_kink_items_to_string.at(value))
	}

	enum guide_kink_axis_items_enum {
		guide_kink_axis_items_X = 0,	
		guide_kink_axis_items_Y = 1,	
		guide_kink_axis_items_Z = 2	
	};

	std::map<std::string, int> create_string_to_guide_kink_axis_items() {
		return {{"X", guide_kink_axis_items_X}, {"Y", guide_kink_axis_items_Y}, {"Z", guide_kink_axis_items_Z}};
	};

	std::map<int, std::string> create_guide_kink_axis_items_to_string() {
		return {{guide_kink_axis_items_X, "X"}, {guide_kink_axis_items_Y, "Y"}, {guide_kink_axis_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_guide_kink_axis_items = create_string_to_guide_kink_axis_items();
	const std::map<int, std::string> guide_kink_axis_items_to_string = create_guide_kink_axis_items_to_string();

	guide_kink_axis_items_enum guide_kink_axis() {
		STRING_TYPE_GETTER("guide_kink_axis", static_cast<guide_kink_axis_items_enum>(string_to_guide_kink_axis_items.at(resstr)))
	}

	void guide_kink_axis(guide_kink_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "guide_kink_axis", guide_kink_axis_items_to_string.at(value))
	}

	float guide_kink_frequency() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "guide_kink_frequency")
	}

	void guide_kink_frequency(float value) {
		PRIMITIVE_TYPES_SETTER("f", "guide_kink_frequency", value)
	}

	float guide_kink_shape() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "guide_kink_shape")
	}

	void guide_kink_shape(float value) {
		PRIMITIVE_TYPES_SETTER("f", "guide_kink_shape", value)
	}

	float guide_kink_amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "guide_kink_amplitude")
	}

	void guide_kink_amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "guide_kink_amplitude", value)
	}
};

class GameSoftBodySettings : public pyUniplug {
public:
	GameSoftBodySettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	GameSoftBodySettings() : pyUniplug(0) { }

	float linear_stiffness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "linear_stiffness")
	}

	void linear_stiffness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "linear_stiffness", value)
	}

	float dynamic_friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dynamic_friction")
	}

	void dynamic_friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dynamic_friction", value)
	}

	float shape_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shape_threshold")
	}

	void shape_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shape_threshold", value)
	}

	float collision_margin() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "collision_margin")
	}

	void collision_margin(float value) {
		PRIMITIVE_TYPES_SETTER("f", "collision_margin", value)
	}

	float weld_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weld_threshold")
	}

	void weld_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weld_threshold", value)
	}

	int location_iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "location_iterations")
	}

	void location_iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "location_iterations", value)
	}

	int cluster_iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "cluster_iterations")
	}

	void cluster_iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "cluster_iterations", value)
	}

	bool use_shape_match() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shape_match")
	}

	void use_shape_match(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shape_match", value)
	}

	bool use_bending_constraints() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bending_constraints")
	}

	void use_bending_constraints(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bending_constraints", value)
	}

	bool use_cluster_rigid_to_softbody() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cluster_rigid_to_softbody")
	}

	void use_cluster_rigid_to_softbody(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cluster_rigid_to_softbody", value)
	}

	bool use_cluster_soft_to_softbody() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cluster_soft_to_softbody")
	}

	void use_cluster_soft_to_softbody(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cluster_soft_to_softbody", value)
	}
};

class SoftBodySettings : public pyUniplug {
public:
	SoftBodySettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	SoftBodySettings() : pyUniplug(0) { }

	float friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "friction")
	}

	void friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "friction", value)
	}

	float mass() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mass")
	}

	void mass(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mass", value)
	}

	std::string vertex_group_mass() {
		STRING_TYPE_GETTER("vertex_group_mass", resstr)
	}

	void vertex_group_mass(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_mass", value)
	}

	float gravity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gravity")
	}

	void gravity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gravity", value)
	}

	float speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "speed")
	}

	void speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "speed", value)
	}

	std::string vertex_group_goal() {
		STRING_TYPE_GETTER("vertex_group_goal", resstr)
	}

	void vertex_group_goal(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_goal", value)
	}

	float goal_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_min")
	}

	void goal_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_min", value)
	}

	float goal_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_max")
	}

	void goal_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_max", value)
	}

	float goal_default() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_default")
	}

	void goal_default(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_default", value)
	}

	float goal_spring() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_spring")
	}

	void goal_spring(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_spring", value)
	}

	float goal_friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "goal_friction")
	}

	void goal_friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "goal_friction", value)
	}

	float pull() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pull")
	}

	void pull(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pull", value)
	}

	float push() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "push")
	}

	void push(float value) {
		PRIMITIVE_TYPES_SETTER("f", "push", value)
	}

	float damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping")
	}

	void damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping", value)
	}

	int spring_length() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "spring_length")
	}

	void spring_length(int value) {
		PRIMITIVE_TYPES_SETTER("i", "spring_length", value)
	}

	int aero() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "aero")
	}

	void aero(int value) {
		PRIMITIVE_TYPES_SETTER("i", "aero", value)
	}

	int plastic() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "plastic")
	}

	void plastic(int value) {
		PRIMITIVE_TYPES_SETTER("i", "plastic", value)
	}

	float bend() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bend")
	}

	void bend(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bend", value)
	}

	float shear() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shear")
	}

	void shear(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shear", value)
	}

	std::string vertex_group_spring() {
		STRING_TYPE_GETTER("vertex_group_spring", resstr)
	}

	void vertex_group_spring(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_spring", value)
	}

	enum collision_type_items_enum {
		collision_type_items_MANUAL = 0,	
		collision_type_items_AVERAGE = 1,	
		collision_type_items_MINIMAL = 2,	
		collision_type_items_MAXIMAL = 3,	
		collision_type_items_MINMAX = 4	
	};

	std::map<std::string, int> create_string_to_collision_type_items() {
		return {{"MANUAL", collision_type_items_MANUAL}, {"AVERAGE", collision_type_items_AVERAGE}, {"MINIMAL", collision_type_items_MINIMAL}, {"MAXIMAL", collision_type_items_MAXIMAL}, {"MINMAX", collision_type_items_MINMAX}};
	};

	std::map<int, std::string> create_collision_type_items_to_string() {
		return {{collision_type_items_MANUAL, "MANUAL"}, {collision_type_items_AVERAGE, "AVERAGE"}, {collision_type_items_MINIMAL, "MINIMAL"}, {collision_type_items_MAXIMAL, "MAXIMAL"}, {collision_type_items_MINMAX, "MINMAX"}};
	};

	const std::map<std::string, int> string_to_collision_type_items = create_string_to_collision_type_items();
	const std::map<int, std::string> collision_type_items_to_string = create_collision_type_items_to_string();

	collision_type_items_enum collision_type() {
		STRING_TYPE_GETTER("collision_type", static_cast<collision_type_items_enum>(string_to_collision_type_items.at(resstr)))
	}

	void collision_type(collision_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "collision_type", collision_type_items_to_string.at(value))
	}

	float ball_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ball_size")
	}

	void ball_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ball_size", value)
	}

	float ball_stiff() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ball_stiff")
	}

	void ball_stiff(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ball_stiff", value)
	}

	float ball_damp() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ball_damp")
	}

	void ball_damp(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ball_damp", value)
	}

	float error_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "error_threshold")
	}

	void error_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "error_threshold", value)
	}

	int step_min() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "step_min")
	}

	void step_min(int value) {
		PRIMITIVE_TYPES_SETTER("i", "step_min", value)
	}

	int step_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "step_max")
	}

	void step_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "step_max", value)
	}

	int choke() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "choke")
	}

	void choke(int value) {
		PRIMITIVE_TYPES_SETTER("i", "choke", value)
	}

	int fuzzy() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "fuzzy")
	}

	void fuzzy(int value) {
		PRIMITIVE_TYPES_SETTER("i", "fuzzy", value)
	}

	bool use_auto_step() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_step")
	}

	void use_auto_step(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_step", value)
	}

	bool use_diagnose() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_diagnose")
	}

	void use_diagnose(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_diagnose", value)
	}

	bool use_estimate_matrix() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_estimate_matrix")
	}

	void use_estimate_matrix(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_estimate_matrix", value)
	}

	VFLOAT3 location_mass_center() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location_mass_center", 3)
	}

	void location_mass_center(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location_mass_center", 3)
	}

	std::array<float, 9> rotation_estimate() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "rotation_estimate", 9)
	}

	void rotation_estimate(float values[9]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_estimate", 9)
	}

	std::array<float, 9> scale_estimate() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "scale_estimate", 9)
	}

	void scale_estimate(float values[9]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scale_estimate", 9)
	}

	bool use_goal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_goal")
	}

	void use_goal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_goal", value)
	}

	bool use_edges() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edges")
	}

	void use_edges(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edges", value)
	}

	bool use_stiff_quads() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stiff_quads")
	}

	void use_stiff_quads(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stiff_quads", value)
	}

	bool use_edge_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_collision")
	}

	void use_edge_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_collision", value)
	}

	bool use_face_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_face_collision")
	}

	void use_face_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_face_collision", value)
	}

	enum aerodynamics_type_enum {
		aerodynamics_type_SIMPLE = 0,	
		aerodynamics_type_LIFT_FORCE = 1	
	};

	std::map<std::string, int> create_string_to_aerodynamics_type() {
		return {{"SIMPLE", aerodynamics_type_SIMPLE}, {"LIFT_FORCE", aerodynamics_type_LIFT_FORCE}};
	};

	std::map<int, std::string> create_aerodynamics_type_to_string() {
		return {{aerodynamics_type_SIMPLE, "SIMPLE"}, {aerodynamics_type_LIFT_FORCE, "LIFT_FORCE"}};
	};

	const std::map<std::string, int> string_to_aerodynamics_type = create_string_to_aerodynamics_type();
	const std::map<int, std::string> aerodynamics_type_to_string = create_aerodynamics_type_to_string();

	aerodynamics_type_enum aerodynamics_type() {
		STRING_TYPE_GETTER("aerodynamics_type", static_cast<aerodynamics_type_enum>(string_to_aerodynamics_type.at(resstr)))
	}

	void aerodynamics_type(aerodynamics_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "aerodynamics_type", aerodynamics_type_to_string.at(value))
	}

	bool use_self_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_self_collision")
	}

	void use_self_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_self_collision", value)
	}

	EffectorWeights effector_weights() {
		CLASS_TYPES_GETTER(EffectorWeights, "effector_weights")
	}
};

class PackedFile : public pyUniplug {
public:
	PackedFile(PyObject* pyobj) : pyUniplug(pyobj) {}
	PackedFile() : pyUniplug(0) { }

	int size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size")
	}

	void size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size", value)
	}

	std::string data() {
		STRING_TYPE_GETTER("data", resstr)
	}

	void data(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "data", value)
	}
};

class PaletteColor : public pyUniplug {
public:
	PaletteColor(PyObject* pyobj) : pyUniplug(pyobj) {}
	PaletteColor() : pyUniplug(0) { }

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}
};

class Palette : public ID {
public:
	Palette(PyObject* pyobj) : ID(pyobj) {}
	Palette() : ID(0) { }

	std::map<std::string, PaletteColor> colors() {
		MAP_TYPE_GETTER("colors", PaletteColor)
	}
};

class ParticleTarget : public pyUniplug {
public:
	ParticleTarget(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleTarget() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	Object object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	int system() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "system")
	}

	void system(int value) {
		PRIMITIVE_TYPES_SETTER("i", "system", value)
	}

	float time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time")
	}

	void time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time", value)
	}

	float duration() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "duration")
	}

	void duration(float value) {
		PRIMITIVE_TYPES_SETTER("f", "duration", value)
	}

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}

	enum mode_items_enum {
		mode_items_FRIEND = 1,	
		mode_items_NEUTRAL = 0,	
		mode_items_ENEMY = 2	
	};

	std::map<std::string, int> create_string_to_mode_items() {
		return {{"FRIEND", mode_items_FRIEND}, {"NEUTRAL", mode_items_NEUTRAL}, {"ENEMY", mode_items_ENEMY}};
	};

	std::map<int, std::string> create_mode_items_to_string() {
		return {{mode_items_FRIEND, "FRIEND"}, {mode_items_NEUTRAL, "NEUTRAL"}, {mode_items_ENEMY, "ENEMY"}};
	};

	const std::map<std::string, int> string_to_mode_items = create_string_to_mode_items();
	const std::map<int, std::string> mode_items_to_string = create_mode_items_to_string();

	mode_items_enum alliance() {
		STRING_TYPE_GETTER("alliance", static_cast<mode_items_enum>(string_to_mode_items.at(resstr)))
	}

	void alliance(mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alliance", mode_items_to_string.at(value))
	}
};

class SPHFluidSettings : public pyUniplug {
public:
	SPHFluidSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	SPHFluidSettings() : pyUniplug(0) { }

	enum sph_solver_items_enum {
		sph_solver_items_DDR = 0,	
		sph_solver_items_CLASSICAL = 1	
	};

	std::map<std::string, int> create_string_to_sph_solver_items() {
		return {{"DDR", sph_solver_items_DDR}, {"CLASSICAL", sph_solver_items_CLASSICAL}};
	};

	std::map<int, std::string> create_sph_solver_items_to_string() {
		return {{sph_solver_items_DDR, "DDR"}, {sph_solver_items_CLASSICAL, "CLASSICAL"}};
	};

	const std::map<std::string, int> string_to_sph_solver_items = create_string_to_sph_solver_items();
	const std::map<int, std::string> sph_solver_items_to_string = create_sph_solver_items_to_string();

	sph_solver_items_enum solver() {
		STRING_TYPE_GETTER("solver", static_cast<sph_solver_items_enum>(string_to_sph_solver_items.at(resstr)))
	}

	void solver(sph_solver_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "solver", sph_solver_items_to_string.at(value))
	}

	float spring_force() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_force")
	}

	void spring_force(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_force", value)
	}

	float fluid_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fluid_radius")
	}

	void fluid_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fluid_radius", value)
	}

	float rest_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rest_length")
	}

	void rest_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rest_length", value)
	}

	bool use_viscoelastic_springs() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_viscoelastic_springs")
	}

	void use_viscoelastic_springs(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_viscoelastic_springs", value)
	}

	bool use_initial_rest_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_initial_rest_length")
	}

	void use_initial_rest_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_initial_rest_length", value)
	}

	float plasticity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "plasticity")
	}

	void plasticity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "plasticity", value)
	}

	float yield_ratio() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "yield_ratio")
	}

	void yield_ratio(float value) {
		PRIMITIVE_TYPES_SETTER("f", "yield_ratio", value)
	}

	int spring_frames() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "spring_frames")
	}

	void spring_frames(int value) {
		PRIMITIVE_TYPES_SETTER("i", "spring_frames", value)
	}

	float linear_viscosity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "linear_viscosity")
	}

	void linear_viscosity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "linear_viscosity", value)
	}

	float stiff_viscosity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "stiff_viscosity")
	}

	void stiff_viscosity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "stiff_viscosity", value)
	}

	float stiffness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "stiffness")
	}

	void stiffness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "stiffness", value)
	}

	float repulsion() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "repulsion")
	}

	void repulsion(float value) {
		PRIMITIVE_TYPES_SETTER("f", "repulsion", value)
	}

	float rest_density() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rest_density")
	}

	void rest_density(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rest_density", value)
	}

	float buoyancy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "buoyancy")
	}

	void buoyancy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "buoyancy", value)
	}

	bool factor_repulsion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "factor_repulsion")
	}

	void factor_repulsion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "factor_repulsion", value)
	}

	bool use_factor_density() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_factor_density")
	}

	void use_factor_density(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_factor_density", value)
	}

	bool factor_radius() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "factor_radius")
	}

	void factor_radius(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "factor_radius", value)
	}

	bool factor_stiff_viscosity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "factor_stiff_viscosity")
	}

	void factor_stiff_viscosity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "factor_stiff_viscosity", value)
	}

	bool factor_rest_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "factor_rest_length")
	}

	void factor_rest_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "factor_rest_length", value)
	}
};

class ParticleHairKey : public pyUniplug {
public:
	ParticleHairKey(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleHairKey() : pyUniplug(0) { }

	float time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time")
	}

	void time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time", value)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	VFLOAT3 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 3)
	}

	void co(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 3)
	}

	VFLOAT3 co_local() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co_local", 3)
	}

	void co_local(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co_local", 3)
	}

	VFLOAT3 co_object(Object object_value, ParticleSystemModifier modifier, Particle particle);
};

class ParticleKey : public pyUniplug {
public:
	ParticleKey(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleKey() : pyUniplug(0) { }

	VFLOAT3 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 3)
	}

	void location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 3)
	}

	VFLOAT3 velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "velocity", 3)
	}

	void velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "velocity", 3)
	}

	VFLOAT4 rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation", 4)
	}

	void rotation(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation", 4)
	}

	VFLOAT3 angular_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "angular_velocity", 3)
	}

	void angular_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "angular_velocity", 3)
	}

	float time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time")
	}

	void time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time", value)
	}
};

class ChildParticle : public pyUniplug {
public:
	ChildParticle(PyObject* pyobj) : pyUniplug(pyobj) {}
	ChildParticle() : pyUniplug(0) { }

};

class Particle : public pyUniplug {
public:
	Particle(PyObject* pyobj) : pyUniplug(pyobj) {}
	Particle() : pyUniplug(0) { }

	VFLOAT3 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 3)
	}

	void location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 3)
	}

	VFLOAT3 velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "velocity", 3)
	}

	void velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "velocity", 3)
	}

	VFLOAT3 angular_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "angular_velocity", 3)
	}

	void angular_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "angular_velocity", 3)
	}

	VFLOAT4 rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation", 4)
	}

	void rotation(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation", 4)
	}

	VFLOAT3 prev_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "prev_location", 3)
	}

	void prev_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "prev_location", 3)
	}

	VFLOAT3 prev_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "prev_velocity", 3)
	}

	void prev_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "prev_velocity", 3)
	}

	VFLOAT3 prev_angular_velocity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "prev_angular_velocity", 3)
	}

	void prev_angular_velocity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "prev_angular_velocity", 3)
	}

	VFLOAT4 prev_rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "prev_rotation", 4)
	}

	void prev_rotation(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "prev_rotation", 4)
	}

	std::map<std::string, ParticleHairKey> hair_keys() {
		MAP_TYPE_GETTER("hair_keys", ParticleHairKey)
	}

	std::map<std::string, ParticleKey> particle_keys() {
		MAP_TYPE_GETTER("particle_keys", ParticleKey)
	}

	float birth_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "birth_time")
	}

	void birth_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "birth_time", value)
	}

	float lifetime() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lifetime")
	}

	void lifetime(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lifetime", value)
	}

	float die_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "die_time")
	}

	void die_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "die_time", value)
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	bool is_exist() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_exist")
	}

	void is_exist(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_exist", value)
	}

	bool is_visible() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_visible")
	}

	void is_visible(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_visible", value)
	}

	enum alive_items_enum {
		alive_items_DEAD = 1,	
		alive_items_UNBORN = 2,	
		alive_items_ALIVE = 3,	
		alive_items_DYING = 4	
	};

	std::map<std::string, int> create_string_to_alive_items() {
		return {{"DEAD", alive_items_DEAD}, {"UNBORN", alive_items_UNBORN}, {"ALIVE", alive_items_ALIVE}, {"DYING", alive_items_DYING}};
	};

	std::map<int, std::string> create_alive_items_to_string() {
		return {{alive_items_DEAD, "DEAD"}, {alive_items_UNBORN, "UNBORN"}, {alive_items_ALIVE, "ALIVE"}, {alive_items_DYING, "DYING"}};
	};

	const std::map<std::string, int> string_to_alive_items = create_string_to_alive_items();
	const std::map<int, std::string> alive_items_to_string = create_alive_items_to_string();

	alive_items_enum alive_state() {
		STRING_TYPE_GETTER("alive_state", static_cast<alive_items_enum>(string_to_alive_items.at(resstr)))
	}

	void alive_state(alive_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alive_state", alive_items_to_string.at(value))
	}

	VFLOAT2 uv_on_emitter(ParticleSystemModifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("uv_on_emitter", "O", modifier.get_pyobjref())
		CREATE_SINGLE_PYOBJ(uv)
		POD_VECTOR_TYPES_CONV(uv, FLOAT, (float)PyFloat_AsDouble(item), 2)
		NONCLASS_TYPES_RETURN(uv_res)
	}
};

class ParticleDupliWeight : public pyUniplug {
public:
	ParticleDupliWeight(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleDupliWeight() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	int count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "count")
	}

	void count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "count", value)
	}
};

class ParticleSystem : public pyUniplug {
public:
	ParticleSystem(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleSystem() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	ParticleSettings settings();

	std::map<std::string, Particle> particles() {
		MAP_TYPE_GETTER("particles", Particle)
	}

	std::map<std::string, ChildParticle> child_particles() {
		MAP_TYPE_GETTER("child_particles", ChildParticle)
	}

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}

	int child_seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "child_seed")
	}

	void child_seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "child_seed", value)
	}

	bool is_global_hair() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_global_hair")
	}

	void is_global_hair(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_global_hair", value)
	}

	bool use_hair_dynamics() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_hair_dynamics")
	}

	void use_hair_dynamics(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_hair_dynamics", value)
	}

	ClothModifier cloth() {
		CLASS_TYPES_GETTER(ClothModifier, "cloth")
	}

	Object reactor_target_object() {
		CLASS_TYPES_GETTER(Object, "reactor_target_object")
	}

	int reactor_target_particle_system() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "reactor_target_particle_system")
	}

	void reactor_target_particle_system(int value) {
		PRIMITIVE_TYPES_SETTER("i", "reactor_target_particle_system", value)
	}

	bool use_keyed_timing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keyed_timing")
	}

	void use_keyed_timing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keyed_timing", value)
	}

	std::map<std::string, ParticleTarget> targets() {
		MAP_TYPE_GETTER("targets", ParticleTarget)
	}

	ParticleTarget active_particle_target() {
		CLASS_TYPES_GETTER(ParticleTarget, "active_particle_target")
	}

	int active_particle_target_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_particle_target_index")
	}

	void active_particle_target_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_particle_target_index", value)
	}

	std::string billboard_normal_uv() {
		STRING_TYPE_GETTER("billboard_normal_uv", resstr)
	}

	void billboard_normal_uv(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "billboard_normal_uv", value)
	}

	std::string billboard_time_index_uv() {
		STRING_TYPE_GETTER("billboard_time_index_uv", resstr)
	}

	void billboard_time_index_uv(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "billboard_time_index_uv", value)
	}

	std::string billboard_split_uv() {
		STRING_TYPE_GETTER("billboard_split_uv", resstr)
	}

	void billboard_split_uv(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "billboard_split_uv", value)
	}

	std::string vertex_group_density() {
		STRING_TYPE_GETTER("vertex_group_density", resstr)
	}

	void vertex_group_density(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_density", value)
	}

	bool invert_vertex_group_density() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_density")
	}

	void invert_vertex_group_density(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_density", value)
	}

	std::string vertex_group_velocity() {
		STRING_TYPE_GETTER("vertex_group_velocity", resstr)
	}

	void vertex_group_velocity(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_velocity", value)
	}

	bool invert_vertex_group_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_velocity")
	}

	void invert_vertex_group_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_velocity", value)
	}

	std::string vertex_group_length() {
		STRING_TYPE_GETTER("vertex_group_length", resstr)
	}

	void vertex_group_length(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_length", value)
	}

	bool invert_vertex_group_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_length")
	}

	void invert_vertex_group_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_length", value)
	}

	std::string vertex_group_clump() {
		STRING_TYPE_GETTER("vertex_group_clump", resstr)
	}

	void vertex_group_clump(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_clump", value)
	}

	bool invert_vertex_group_clump() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_clump")
	}

	void invert_vertex_group_clump(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_clump", value)
	}

	std::string vertex_group_kink() {
		STRING_TYPE_GETTER("vertex_group_kink", resstr)
	}

	void vertex_group_kink(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_kink", value)
	}

	bool invert_vertex_group_kink() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_kink")
	}

	void invert_vertex_group_kink(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_kink", value)
	}

	std::string vertex_group_roughness_1() {
		STRING_TYPE_GETTER("vertex_group_roughness_1", resstr)
	}

	void vertex_group_roughness_1(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_roughness_1", value)
	}

	bool invert_vertex_group_roughness_1() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_roughness_1")
	}

	void invert_vertex_group_roughness_1(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_roughness_1", value)
	}

	std::string vertex_group_roughness_2() {
		STRING_TYPE_GETTER("vertex_group_roughness_2", resstr)
	}

	void vertex_group_roughness_2(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_roughness_2", value)
	}

	bool invert_vertex_group_roughness_2() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_roughness_2")
	}

	void invert_vertex_group_roughness_2(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_roughness_2", value)
	}

	std::string vertex_group_roughness_end() {
		STRING_TYPE_GETTER("vertex_group_roughness_end", resstr)
	}

	void vertex_group_roughness_end(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_roughness_end", value)
	}

	bool invert_vertex_group_roughness_end() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_roughness_end")
	}

	void invert_vertex_group_roughness_end(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_roughness_end", value)
	}

	std::string vertex_group_size() {
		STRING_TYPE_GETTER("vertex_group_size", resstr)
	}

	void vertex_group_size(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_size", value)
	}

	bool invert_vertex_group_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_size")
	}

	void invert_vertex_group_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_size", value)
	}

	std::string vertex_group_tangent() {
		STRING_TYPE_GETTER("vertex_group_tangent", resstr)
	}

	void vertex_group_tangent(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_tangent", value)
	}

	bool invert_vertex_group_tangent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_tangent")
	}

	void invert_vertex_group_tangent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_tangent", value)
	}

	std::string vertex_group_rotation() {
		STRING_TYPE_GETTER("vertex_group_rotation", resstr)
	}

	void vertex_group_rotation(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_rotation", value)
	}

	bool invert_vertex_group_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_rotation")
	}

	void invert_vertex_group_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_rotation", value)
	}

	std::string vertex_group_field() {
		STRING_TYPE_GETTER("vertex_group_field", resstr)
	}

	void vertex_group_field(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_field", value)
	}

	bool invert_vertex_group_field() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_vertex_group_field")
	}

	void invert_vertex_group_field(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_vertex_group_field", value)
	}

	PointCache point_cache() {
		CLASS_TYPES_GETTER(PointCache, "point_cache")
	}

	bool has_multiple_caches() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_multiple_caches")
	}

	void has_multiple_caches(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_multiple_caches", value)
	}

	Object parent() {
		CLASS_TYPES_GETTER(Object, "parent")
	}

	bool is_editable() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_editable")
	}

	void is_editable(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_editable", value)
	}

	bool is_edited() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_edited")
	}

	void is_edited(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_edited", value)
	}

	float dt_frac() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dt_frac")
	}

	void dt_frac(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dt_frac", value)
	}

	enum resolution_items_enum {
		resolution_items_PREVIEW = 1,	
		resolution_items_RENDER = 2	
	};

	std::map<std::string, int> create_string_to_resolution_items() {
		return {{"PREVIEW", resolution_items_PREVIEW}, {"RENDER", resolution_items_RENDER}};
	};

	std::map<int, std::string> create_resolution_items_to_string() {
		return {{resolution_items_PREVIEW, "PREVIEW"}, {resolution_items_RENDER, "RENDER"}};
	};

	const std::map<std::string, int> string_to_resolution_items = create_string_to_resolution_items();
	const std::map<int, std::string> resolution_items_to_string = create_resolution_items_to_string();

	void set_resolution(Scene scene, Object object_value, resolution_items_enum resolution = resolution_items_PREVIEW);

	VFLOAT3 co_hair(Object object_value, int particle_no = 0, int step = 0) {
		PYTHON_FUNCTION_ARGS_CALL("co_hair", "Oii", object_value.get_pyobjref(), particle_no, step)
		CREATE_SINGLE_PYOBJ(co)
		POD_VECTOR_TYPES_CONV(co, FLOAT, (float)PyFloat_AsDouble(item), 3)
		NONCLASS_TYPES_RETURN(co_res)
	}

	VFLOAT2 uv_on_emitter(ParticleSystemModifier modifier, Particle particle, int particle_no = 0, int uv_no = 0) {
		PYTHON_FUNCTION_ARGS_CALL("uv_on_emitter", "OOii", modifier.get_pyobjref(), particle.get_pyobjref(), particle_no, uv_no)
		CREATE_SINGLE_PYOBJ(uv)
		POD_VECTOR_TYPES_CONV(uv, FLOAT, (float)PyFloat_AsDouble(item), 2)
		NONCLASS_TYPES_RETURN(uv_res)
	}

	VFLOAT3 mcol_on_emitter(ParticleSystemModifier modifier, Particle particle, int particle_no = 0, int vcol_no = 0) {
		PYTHON_FUNCTION_ARGS_CALL("mcol_on_emitter", "OOii", modifier.get_pyobjref(), particle.get_pyobjref(), particle_no, vcol_no)
		CREATE_SINGLE_PYOBJ(mcol)
		POD_VECTOR_TYPES_CONV(mcol, FLOAT, (float)PyFloat_AsDouble(item), 3)
		NONCLASS_TYPES_RETURN(mcol_res)
	}
};

class ParticleSettingsTextureSlot : public TextureSlot {
public:
	ParticleSettingsTextureSlot(PyObject* pyobj) : TextureSlot(pyobj) {}
	ParticleSettingsTextureSlot() : TextureSlot(0) { }

	enum texco_items_enum {
		texco_items_GLOBAL = 8,	
		texco_items_OBJECT = 32,	
		texco_items_UV = 16,	
		texco_items_ORCO = 1,	
		texco_items_STRAND = 8192	
	};

	std::map<std::string, int> create_string_to_texco_items() {
		return {{"GLOBAL", texco_items_GLOBAL}, {"OBJECT", texco_items_OBJECT}, {"UV", texco_items_UV}, {"ORCO", texco_items_ORCO}, {"STRAND", texco_items_STRAND}};
	};

	std::map<int, std::string> create_texco_items_to_string() {
		return {{texco_items_GLOBAL, "GLOBAL"}, {texco_items_OBJECT, "OBJECT"}, {texco_items_UV, "UV"}, {texco_items_ORCO, "ORCO"}, {texco_items_STRAND, "STRAND"}};
	};

	const std::map<std::string, int> string_to_texco_items = create_string_to_texco_items();
	const std::map<int, std::string> texco_items_to_string = create_texco_items_to_string();

	texco_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<texco_items_enum>(string_to_texco_items.at(resstr)))
	}

	void texture_coords(texco_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", texco_items_to_string.at(value))
	}

	Object object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	enum prop_x_mapping_items_enum {
		prop_x_mapping_items_NONE = 0,	
		prop_x_mapping_items_X = 1,	
		prop_x_mapping_items_Y = 2,	
		prop_x_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_x_mapping_items() {
		return {{"NONE", prop_x_mapping_items_NONE}, {"X", prop_x_mapping_items_X}, {"Y", prop_x_mapping_items_Y}, {"Z", prop_x_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_x_mapping_items_to_string() {
		return {{prop_x_mapping_items_NONE, "NONE"}, {prop_x_mapping_items_X, "X"}, {prop_x_mapping_items_Y, "Y"}, {prop_x_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_x_mapping_items = create_string_to_prop_x_mapping_items();
	const std::map<int, std::string> prop_x_mapping_items_to_string = create_prop_x_mapping_items_to_string();

	prop_x_mapping_items_enum mapping_x() {
		STRING_TYPE_GETTER("mapping_x", static_cast<prop_x_mapping_items_enum>(string_to_prop_x_mapping_items.at(resstr)))
	}

	void mapping_x(prop_x_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_x", prop_x_mapping_items_to_string.at(value))
	}

	enum prop_y_mapping_items_enum {
		prop_y_mapping_items_NONE = 0,	
		prop_y_mapping_items_X = 1,	
		prop_y_mapping_items_Y = 2,	
		prop_y_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_y_mapping_items() {
		return {{"NONE", prop_y_mapping_items_NONE}, {"X", prop_y_mapping_items_X}, {"Y", prop_y_mapping_items_Y}, {"Z", prop_y_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_y_mapping_items_to_string() {
		return {{prop_y_mapping_items_NONE, "NONE"}, {prop_y_mapping_items_X, "X"}, {prop_y_mapping_items_Y, "Y"}, {prop_y_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_y_mapping_items = create_string_to_prop_y_mapping_items();
	const std::map<int, std::string> prop_y_mapping_items_to_string = create_prop_y_mapping_items_to_string();

	prop_y_mapping_items_enum mapping_y() {
		STRING_TYPE_GETTER("mapping_y", static_cast<prop_y_mapping_items_enum>(string_to_prop_y_mapping_items.at(resstr)))
	}

	void mapping_y(prop_y_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_y", prop_y_mapping_items_to_string.at(value))
	}

	enum prop_z_mapping_items_enum {
		prop_z_mapping_items_NONE = 0,	
		prop_z_mapping_items_X = 1,	
		prop_z_mapping_items_Y = 2,	
		prop_z_mapping_items_Z = 3	
	};

	std::map<std::string, int> create_string_to_prop_z_mapping_items() {
		return {{"NONE", prop_z_mapping_items_NONE}, {"X", prop_z_mapping_items_X}, {"Y", prop_z_mapping_items_Y}, {"Z", prop_z_mapping_items_Z}};
	};

	std::map<int, std::string> create_prop_z_mapping_items_to_string() {
		return {{prop_z_mapping_items_NONE, "NONE"}, {prop_z_mapping_items_X, "X"}, {prop_z_mapping_items_Y, "Y"}, {prop_z_mapping_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_prop_z_mapping_items = create_string_to_prop_z_mapping_items();
	const std::map<int, std::string> prop_z_mapping_items_to_string = create_prop_z_mapping_items_to_string();

	prop_z_mapping_items_enum mapping_z() {
		STRING_TYPE_GETTER("mapping_z", static_cast<prop_z_mapping_items_enum>(string_to_prop_z_mapping_items.at(resstr)))
	}

	void mapping_z(prop_z_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping_z", prop_z_mapping_items_to_string.at(value))
	}

	enum prop_mapping_items_enum {
		prop_mapping_items_FLAT = 0,	
		prop_mapping_items_CUBE = 1,	
		prop_mapping_items_TUBE = 2,	
		prop_mapping_items_SPHERE = 3	
	};

	std::map<std::string, int> create_string_to_prop_mapping_items() {
		return {{"FLAT", prop_mapping_items_FLAT}, {"CUBE", prop_mapping_items_CUBE}, {"TUBE", prop_mapping_items_TUBE}, {"SPHERE", prop_mapping_items_SPHERE}};
	};

	std::map<int, std::string> create_prop_mapping_items_to_string() {
		return {{prop_mapping_items_FLAT, "FLAT"}, {prop_mapping_items_CUBE, "CUBE"}, {prop_mapping_items_TUBE, "TUBE"}, {prop_mapping_items_SPHERE, "SPHERE"}};
	};

	const std::map<std::string, int> string_to_prop_mapping_items = create_string_to_prop_mapping_items();
	const std::map<int, std::string> prop_mapping_items_to_string = create_prop_mapping_items_to_string();

	prop_mapping_items_enum mapping() {
		STRING_TYPE_GETTER("mapping", static_cast<prop_mapping_items_enum>(string_to_prop_mapping_items.at(resstr)))
	}

	void mapping(prop_mapping_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mapping", prop_mapping_items_to_string.at(value))
	}

	bool use_map_time() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_time")
	}

	void use_map_time(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_time", value)
	}

	bool use_map_life() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_life")
	}

	void use_map_life(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_life", value)
	}

	bool use_map_density() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_density")
	}

	void use_map_density(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_density", value)
	}

	bool use_map_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_size")
	}

	void use_map_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_size", value)
	}

	bool use_map_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_velocity")
	}

	void use_map_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_velocity", value)
	}

	bool use_map_field() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_field")
	}

	void use_map_field(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_field", value)
	}

	bool use_map_gravity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_gravity")
	}

	void use_map_gravity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_gravity", value)
	}

	bool use_map_damp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_damp")
	}

	void use_map_damp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_damp", value)
	}

	bool use_map_clump() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_clump")
	}

	void use_map_clump(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_clump", value)
	}

	bool use_map_kink_amp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_kink_amp")
	}

	void use_map_kink_amp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_kink_amp", value)
	}

	bool use_map_kink_freq() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_kink_freq")
	}

	void use_map_kink_freq(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_kink_freq", value)
	}

	bool use_map_rough() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_rough")
	}

	void use_map_rough(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_rough", value)
	}

	bool use_map_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_length")
	}

	void use_map_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_length", value)
	}

	float time_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_factor")
	}

	void time_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_factor", value)
	}

	float life_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "life_factor")
	}

	void life_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "life_factor", value)
	}

	float density_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "density_factor")
	}

	void density_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "density_factor", value)
	}

	float size_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_factor")
	}

	void size_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_factor", value)
	}

	float velocity_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_factor")
	}

	void velocity_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_factor", value)
	}

	float field_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "field_factor")
	}

	void field_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "field_factor", value)
	}

	float gravity_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gravity_factor")
	}

	void gravity_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gravity_factor", value)
	}

	float damp_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damp_factor")
	}

	void damp_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damp_factor", value)
	}

	float length_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "length_factor")
	}

	void length_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "length_factor", value)
	}

	float clump_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clump_factor")
	}

	void clump_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clump_factor", value)
	}

	float kink_amp_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_amp_factor")
	}

	void kink_amp_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_amp_factor", value)
	}

	float kink_freq_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_freq_factor")
	}

	void kink_freq_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_freq_factor", value)
	}

	float rough_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rough_factor")
	}

	void rough_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rough_factor", value)
	}
};

class ParticleSettings : public ID {
public:
	ParticleSettings(PyObject* pyobj) : ID(pyobj) {}
	ParticleSettings() : ID(0) { }

	std::map<std::string, ParticleSettingsTextureSlot> texture_slots() {
		MAP_TYPE_GETTER("texture_slots", ParticleSettingsTextureSlot)
	}

	Texture active_texture() {
		CLASS_TYPES_GETTER(Texture, "active_texture")
	}

	int active_texture_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_texture_index")
	}

	void active_texture_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_texture_index", value)
	}

	bool is_fluid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_fluid")
	}

	void is_fluid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_fluid", value)
	}

	bool use_react_start_end() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_react_start_end")
	}

	void use_react_start_end(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_react_start_end", value)
	}

	bool use_react_multiple() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_react_multiple")
	}

	void use_react_multiple(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_react_multiple", value)
	}

	bool regrow_hair() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "regrow_hair")
	}

	void regrow_hair(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "regrow_hair", value)
	}

	bool show_unborn() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_unborn")
	}

	void show_unborn(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_unborn", value)
	}

	bool use_dead() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dead")
	}

	void use_dead(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dead", value)
	}

	bool use_emit_random() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_emit_random")
	}

	void use_emit_random(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_emit_random", value)
	}

	bool use_even_distribution() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_even_distribution")
	}

	void use_even_distribution(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_even_distribution", value)
	}

	bool use_die_on_collision() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_die_on_collision")
	}

	void use_die_on_collision(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_die_on_collision", value)
	}

	bool use_size_deflect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_size_deflect")
	}

	void use_size_deflect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_size_deflect", value)
	}

	bool use_rotations() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotations")
	}

	void use_rotations(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotations", value)
	}

	bool use_dynamic_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dynamic_rotation")
	}

	void use_dynamic_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dynamic_rotation", value)
	}

	bool use_multiply_size_mass() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multiply_size_mass")
	}

	void use_multiply_size_mass(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multiply_size_mass", value)
	}

	bool use_advanced_hair() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_advanced_hair")
	}

	void use_advanced_hair(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_advanced_hair", value)
	}

	bool lock_boids_to_surface() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_boids_to_surface")
	}

	void lock_boids_to_surface(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_boids_to_surface", value)
	}

	bool use_hair_bspline() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_hair_bspline")
	}

	void use_hair_bspline(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_hair_bspline", value)
	}

	bool invert_grid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_grid")
	}

	void invert_grid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_grid", value)
	}

	bool hexagonal_grid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hexagonal_grid")
	}

	void hexagonal_grid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hexagonal_grid", value)
	}

	bool apply_effector_to_children() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "apply_effector_to_children")
	}

	void apply_effector_to_children(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "apply_effector_to_children", value)
	}

	bool create_long_hair_children() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "create_long_hair_children")
	}

	void create_long_hair_children(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "create_long_hair_children", value)
	}

	bool apply_guide_to_children() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "apply_guide_to_children")
	}

	void apply_guide_to_children(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "apply_guide_to_children", value)
	}

	bool use_self_effect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_self_effect")
	}

	void use_self_effect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_self_effect", value)
	}

	enum type_items_enum {
		type_items_EMITTER = 0,	
		type_items_HAIR = 2	
	};

	std::map<std::string, int> create_string_to_type_items() {
		return {{"EMITTER", type_items_EMITTER}, {"HAIR", type_items_HAIR}};
	};

	std::map<int, std::string> create_type_items_to_string() {
		return {{type_items_EMITTER, "EMITTER"}, {type_items_HAIR, "HAIR"}};
	};

	const std::map<std::string, int> string_to_type_items = create_string_to_type_items();
	const std::map<int, std::string> type_items_to_string = create_type_items_to_string();

	type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<type_items_enum>(string_to_type_items.at(resstr)))
	}

	void type(type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", type_items_to_string.at(value))
	}

	enum part_reactor_from_items_enum {
		part_reactor_from_items_VERT = 0,	
		part_reactor_from_items_FACE = 1,	
		part_reactor_from_items_VOLUME = 2	
	};

	std::map<std::string, int> create_string_to_part_reactor_from_items() {
		return {{"VERT", part_reactor_from_items_VERT}, {"FACE", part_reactor_from_items_FACE}, {"VOLUME", part_reactor_from_items_VOLUME}};
	};

	std::map<int, std::string> create_part_reactor_from_items_to_string() {
		return {{part_reactor_from_items_VERT, "VERT"}, {part_reactor_from_items_FACE, "FACE"}, {part_reactor_from_items_VOLUME, "VOLUME"}};
	};

	const std::map<std::string, int> string_to_part_reactor_from_items = create_string_to_part_reactor_from_items();
	const std::map<int, std::string> part_reactor_from_items_to_string = create_part_reactor_from_items_to_string();

	part_reactor_from_items_enum emit_from() {
		STRING_TYPE_GETTER("emit_from", static_cast<part_reactor_from_items_enum>(string_to_part_reactor_from_items.at(resstr)))
	}

	void emit_from(part_reactor_from_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "emit_from", part_reactor_from_items_to_string.at(value))
	}

	enum part_dist_items_enum {
		part_dist_items_JIT = 0,	
		part_dist_items_RAND = 1,	
		part_dist_items_GRID = 2	
	};

	std::map<std::string, int> create_string_to_part_dist_items() {
		return {{"JIT", part_dist_items_JIT}, {"RAND", part_dist_items_RAND}, {"GRID", part_dist_items_GRID}};
	};

	std::map<int, std::string> create_part_dist_items_to_string() {
		return {{part_dist_items_JIT, "JIT"}, {part_dist_items_RAND, "RAND"}, {part_dist_items_GRID, "GRID"}};
	};

	const std::map<std::string, int> string_to_part_dist_items = create_string_to_part_dist_items();
	const std::map<int, std::string> part_dist_items_to_string = create_part_dist_items_to_string();

	part_dist_items_enum distribution() {
		STRING_TYPE_GETTER("distribution", static_cast<part_dist_items_enum>(string_to_part_dist_items.at(resstr)))
	}

	void distribution(part_dist_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distribution", part_dist_items_to_string.at(value))
	}

	enum phys_type_items_enum {
		phys_type_items_NO = 0,	
		phys_type_items_NEWTON = 1,	
		phys_type_items_KEYED = 2,	
		phys_type_items_BOIDS = 3,	
		phys_type_items_FLUID = 4	
	};

	std::map<std::string, int> create_string_to_phys_type_items() {
		return {{"NO", phys_type_items_NO}, {"NEWTON", phys_type_items_NEWTON}, {"KEYED", phys_type_items_KEYED}, {"BOIDS", phys_type_items_BOIDS}, {"FLUID", phys_type_items_FLUID}};
	};

	std::map<int, std::string> create_phys_type_items_to_string() {
		return {{phys_type_items_NO, "NO"}, {phys_type_items_NEWTON, "NEWTON"}, {phys_type_items_KEYED, "KEYED"}, {phys_type_items_BOIDS, "BOIDS"}, {phys_type_items_FLUID, "FLUID"}};
	};

	const std::map<std::string, int> string_to_phys_type_items = create_string_to_phys_type_items();
	const std::map<int, std::string> phys_type_items_to_string = create_phys_type_items_to_string();

	phys_type_items_enum physics_type() {
		STRING_TYPE_GETTER("physics_type", static_cast<phys_type_items_enum>(string_to_phys_type_items.at(resstr)))
	}

	void physics_type(phys_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "physics_type", phys_type_items_to_string.at(value))
	}

	enum rot_mode_items_enum {
		rot_mode_items_NONE = 0,	
		rot_mode_items_NOR = 1,	
		rot_mode_items_NOR_TAN = 9,	
		rot_mode_items_VEL = 2,	
		rot_mode_items_GLOB_X = 3,	
		rot_mode_items_GLOB_Y = 4,	
		rot_mode_items_GLOB_Z = 5,	
		rot_mode_items_OB_X = 6,	
		rot_mode_items_OB_Y = 7,	
		rot_mode_items_OB_Z = 8	
	};

	std::map<std::string, int> create_string_to_rot_mode_items() {
		return {{"NONE", rot_mode_items_NONE}, {"NOR", rot_mode_items_NOR}, {"NOR_TAN", rot_mode_items_NOR_TAN}, {"VEL", rot_mode_items_VEL}, {"GLOB_X", rot_mode_items_GLOB_X}, {"GLOB_Y", rot_mode_items_GLOB_Y}, {"GLOB_Z", rot_mode_items_GLOB_Z}, {"OB_X", rot_mode_items_OB_X}, {"OB_Y", rot_mode_items_OB_Y}, {"OB_Z", rot_mode_items_OB_Z}};
	};

	std::map<int, std::string> create_rot_mode_items_to_string() {
		return {{rot_mode_items_NONE, "NONE"}, {rot_mode_items_NOR, "NOR"}, {rot_mode_items_NOR_TAN, "NOR_TAN"}, {rot_mode_items_VEL, "VEL"}, {rot_mode_items_GLOB_X, "GLOB_X"}, {rot_mode_items_GLOB_Y, "GLOB_Y"}, {rot_mode_items_GLOB_Z, "GLOB_Z"}, {rot_mode_items_OB_X, "OB_X"}, {rot_mode_items_OB_Y, "OB_Y"}, {rot_mode_items_OB_Z, "OB_Z"}};
	};

	const std::map<std::string, int> string_to_rot_mode_items = create_string_to_rot_mode_items();
	const std::map<int, std::string> rot_mode_items_to_string = create_rot_mode_items_to_string();

	rot_mode_items_enum rotation_mode() {
		STRING_TYPE_GETTER("rotation_mode", static_cast<rot_mode_items_enum>(string_to_rot_mode_items.at(resstr)))
	}

	void rotation_mode(rot_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "rotation_mode", rot_mode_items_to_string.at(value))
	}

	enum ave_mode_items_enum {
		ave_mode_items_NONE = 0,	
		ave_mode_items_VELOCITY = 1,	
		ave_mode_items_HORIZONTAL = 3,	
		ave_mode_items_VERTICAL = 4,	
		ave_mode_items_GLOBAL_X = 5,	
		ave_mode_items_GLOBAL_Y = 6,	
		ave_mode_items_GLOBAL_Z = 7,	
		ave_mode_items_RAND = 2	
	};

	std::map<std::string, int> create_string_to_ave_mode_items() {
		return {{"NONE", ave_mode_items_NONE}, {"VELOCITY", ave_mode_items_VELOCITY}, {"HORIZONTAL", ave_mode_items_HORIZONTAL}, {"VERTICAL", ave_mode_items_VERTICAL}, {"GLOBAL_X", ave_mode_items_GLOBAL_X}, {"GLOBAL_Y", ave_mode_items_GLOBAL_Y}, {"GLOBAL_Z", ave_mode_items_GLOBAL_Z}, {"RAND", ave_mode_items_RAND}};
	};

	std::map<int, std::string> create_ave_mode_items_to_string() {
		return {{ave_mode_items_NONE, "NONE"}, {ave_mode_items_VELOCITY, "VELOCITY"}, {ave_mode_items_HORIZONTAL, "HORIZONTAL"}, {ave_mode_items_VERTICAL, "VERTICAL"}, {ave_mode_items_GLOBAL_X, "GLOBAL_X"}, {ave_mode_items_GLOBAL_Y, "GLOBAL_Y"}, {ave_mode_items_GLOBAL_Z, "GLOBAL_Z"}, {ave_mode_items_RAND, "RAND"}};
	};

	const std::map<std::string, int> string_to_ave_mode_items = create_string_to_ave_mode_items();
	const std::map<int, std::string> ave_mode_items_to_string = create_ave_mode_items_to_string();

	ave_mode_items_enum angular_velocity_mode() {
		STRING_TYPE_GETTER("angular_velocity_mode", static_cast<ave_mode_items_enum>(string_to_ave_mode_items.at(resstr)))
	}

	void angular_velocity_mode(ave_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "angular_velocity_mode", ave_mode_items_to_string.at(value))
	}

	enum react_event_items_enum {
		react_event_items_DEATH = 0,	
		react_event_items_COLLIDE = 1,	
		react_event_items_NEAR = 2	
	};

	std::map<std::string, int> create_string_to_react_event_items() {
		return {{"DEATH", react_event_items_DEATH}, {"COLLIDE", react_event_items_COLLIDE}, {"NEAR", react_event_items_NEAR}};
	};

	std::map<int, std::string> create_react_event_items_to_string() {
		return {{react_event_items_DEATH, "DEATH"}, {react_event_items_COLLIDE, "COLLIDE"}, {react_event_items_NEAR, "NEAR"}};
	};

	const std::map<std::string, int> string_to_react_event_items = create_string_to_react_event_items();
	const std::map<int, std::string> react_event_items_to_string = create_react_event_items_to_string();

	react_event_items_enum react_event() {
		STRING_TYPE_GETTER("react_event", static_cast<react_event_items_enum>(string_to_react_event_items.at(resstr)))
	}

	void react_event(react_event_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "react_event", react_event_items_to_string.at(value))
	}

	bool show_guide_hairs() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_guide_hairs")
	}

	void show_guide_hairs(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_guide_hairs", value)
	}

	bool show_hair_grid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_hair_grid")
	}

	void show_hair_grid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_hair_grid", value)
	}

	bool show_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_velocity")
	}

	void show_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_velocity", value)
	}

	bool show_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_size")
	}

	void show_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_size", value)
	}

	bool use_render_emitter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_render_emitter")
	}

	void use_render_emitter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_render_emitter", value)
	}

	bool show_health() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_health")
	}

	void show_health(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_health", value)
	}

	bool use_absolute_path_time() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_absolute_path_time")
	}

	void use_absolute_path_time(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_absolute_path_time", value)
	}

	bool use_parent_particles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_parent_particles")
	}

	void use_parent_particles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_parent_particles", value)
	}

	bool show_number() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_number")
	}

	void show_number(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_number", value)
	}

	bool use_group_pick_random() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_group_pick_random")
	}

	void use_group_pick_random(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_group_pick_random", value)
	}

	bool use_group_count() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_group_count")
	}

	void use_group_count(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_group_count", value)
	}

	bool use_global_dupli() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_global_dupli")
	}

	void use_global_dupli(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_global_dupli", value)
	}

	bool use_rotation_dupli() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotation_dupli")
	}

	void use_rotation_dupli(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotation_dupli", value)
	}

	bool use_scale_dupli() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_scale_dupli")
	}

	void use_scale_dupli(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_scale_dupli", value)
	}

	bool use_render_adaptive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_render_adaptive")
	}

	void use_render_adaptive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_render_adaptive", value)
	}

	bool use_velocity_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_velocity_length")
	}

	void use_velocity_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_velocity_length", value)
	}

	bool use_whole_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_whole_group")
	}

	void use_whole_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_whole_group", value)
	}

	bool use_strand_primitive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_strand_primitive")
	}

	void use_strand_primitive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_strand_primitive", value)
	}

	enum part_draw_as_items_enum {
		part_draw_as_items_NONE = 0,	
		part_draw_as_items_RENDER = 10,	
		part_draw_as_items_DOT = 1,	
		part_draw_as_items_CIRC = 2,	
		part_draw_as_items_CROSS = 3,	
		part_draw_as_items_AXIS = 4	
	};

	std::map<std::string, int> create_string_to_part_draw_as_items() {
		return {{"NONE", part_draw_as_items_NONE}, {"RENDER", part_draw_as_items_RENDER}, {"DOT", part_draw_as_items_DOT}, {"CIRC", part_draw_as_items_CIRC}, {"CROSS", part_draw_as_items_CROSS}, {"AXIS", part_draw_as_items_AXIS}};
	};

	std::map<int, std::string> create_part_draw_as_items_to_string() {
		return {{part_draw_as_items_NONE, "NONE"}, {part_draw_as_items_RENDER, "RENDER"}, {part_draw_as_items_DOT, "DOT"}, {part_draw_as_items_CIRC, "CIRC"}, {part_draw_as_items_CROSS, "CROSS"}, {part_draw_as_items_AXIS, "AXIS"}};
	};

	const std::map<std::string, int> string_to_part_draw_as_items = create_string_to_part_draw_as_items();
	const std::map<int, std::string> part_draw_as_items_to_string = create_part_draw_as_items_to_string();

	part_draw_as_items_enum draw_method() {
		STRING_TYPE_GETTER("draw_method", static_cast<part_draw_as_items_enum>(string_to_part_draw_as_items.at(resstr)))
	}

	void draw_method(part_draw_as_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_method", part_draw_as_items_to_string.at(value))
	}

	enum part_ren_as_items_enum {
		part_ren_as_items_NONE = 0,	
		part_ren_as_items_HALO = 1,	
		part_ren_as_items_LINE = 5,	
		part_ren_as_items_PATH = 6,	
		part_ren_as_items_OBJECT = 7,	
		part_ren_as_items_GROUP = 8,	
		part_ren_as_items_BILLBOARD = 9	
	};

	std::map<std::string, int> create_string_to_part_ren_as_items() {
		return {{"NONE", part_ren_as_items_NONE}, {"HALO", part_ren_as_items_HALO}, {"LINE", part_ren_as_items_LINE}, {"PATH", part_ren_as_items_PATH}, {"OBJECT", part_ren_as_items_OBJECT}, {"GROUP", part_ren_as_items_GROUP}, {"BILLBOARD", part_ren_as_items_BILLBOARD}};
	};

	std::map<int, std::string> create_part_ren_as_items_to_string() {
		return {{part_ren_as_items_NONE, "NONE"}, {part_ren_as_items_HALO, "HALO"}, {part_ren_as_items_LINE, "LINE"}, {part_ren_as_items_PATH, "PATH"}, {part_ren_as_items_OBJECT, "OBJECT"}, {part_ren_as_items_GROUP, "GROUP"}, {part_ren_as_items_BILLBOARD, "BILLBOARD"}};
	};

	const std::map<std::string, int> string_to_part_ren_as_items = create_string_to_part_ren_as_items();
	const std::map<int, std::string> part_ren_as_items_to_string = create_part_ren_as_items_to_string();

	part_ren_as_items_enum render_type() {
		STRING_TYPE_GETTER("render_type", static_cast<part_ren_as_items_enum>(string_to_part_ren_as_items.at(resstr)))
	}

	void render_type(part_ren_as_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "render_type", part_ren_as_items_to_string.at(value))
	}

	enum draw_col_items_enum {
		draw_col_items_NONE = 0,	
		draw_col_items_MATERIAL = 1,	
		draw_col_items_VELOCITY = 2,	
		draw_col_items_ACCELERATION = 3	
	};

	std::map<std::string, int> create_string_to_draw_col_items() {
		return {{"NONE", draw_col_items_NONE}, {"MATERIAL", draw_col_items_MATERIAL}, {"VELOCITY", draw_col_items_VELOCITY}, {"ACCELERATION", draw_col_items_ACCELERATION}};
	};

	std::map<int, std::string> create_draw_col_items_to_string() {
		return {{draw_col_items_NONE, "NONE"}, {draw_col_items_MATERIAL, "MATERIAL"}, {draw_col_items_VELOCITY, "VELOCITY"}, {draw_col_items_ACCELERATION, "ACCELERATION"}};
	};

	const std::map<std::string, int> string_to_draw_col_items = create_string_to_draw_col_items();
	const std::map<int, std::string> draw_col_items_to_string = create_draw_col_items_to_string();

	draw_col_items_enum draw_color() {
		STRING_TYPE_GETTER("draw_color", static_cast<draw_col_items_enum>(string_to_draw_col_items.at(resstr)))
	}

	void draw_color(draw_col_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_color", draw_col_items_to_string.at(value))
	}

	int draw_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "draw_size")
	}

	void draw_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "draw_size", value)
	}

	enum child_type_items_enum {
		child_type_items_NONE = 0,	
		child_type_items_SIMPLE = 1,	
		child_type_items_INTERPOLATED = 2	
	};

	std::map<std::string, int> create_string_to_child_type_items() {
		return {{"NONE", child_type_items_NONE}, {"SIMPLE", child_type_items_SIMPLE}, {"INTERPOLATED", child_type_items_INTERPOLATED}};
	};

	std::map<int, std::string> create_child_type_items_to_string() {
		return {{child_type_items_NONE, "NONE"}, {child_type_items_SIMPLE, "SIMPLE"}, {child_type_items_INTERPOLATED, "INTERPOLATED"}};
	};

	const std::map<std::string, int> string_to_child_type_items = create_string_to_child_type_items();
	const std::map<int, std::string> child_type_items_to_string = create_child_type_items_to_string();

	child_type_items_enum child_type() {
		STRING_TYPE_GETTER("child_type", static_cast<child_type_items_enum>(string_to_child_type_items.at(resstr)))
	}

	void child_type(child_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "child_type", child_type_items_to_string.at(value))
	}

	int draw_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "draw_step")
	}

	void draw_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "draw_step", value)
	}

	int render_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "render_step")
	}

	void render_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "render_step", value)
	}

	int hair_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "hair_step")
	}

	void hair_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "hair_step", value)
	}

	float bending_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bending_random")
	}

	void bending_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bending_random", value)
	}

	int keys_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "keys_step")
	}

	void keys_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "keys_step", value)
	}

	int adaptive_angle() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "adaptive_angle")
	}

	void adaptive_angle(int value) {
		PRIMITIVE_TYPES_SETTER("i", "adaptive_angle", value)
	}

	int adaptive_pixel() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "adaptive_pixel")
	}

	void adaptive_pixel(int value) {
		PRIMITIVE_TYPES_SETTER("i", "adaptive_pixel", value)
	}

	int draw_percentage() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "draw_percentage")
	}

	void draw_percentage(int value) {
		PRIMITIVE_TYPES_SETTER("i", "draw_percentage", value)
	}

	int material() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "material")
	}

	void material(int value) {
		PRIMITIVE_TYPES_SETTER("i", "material", value)
	}

	enum part_mat_items_enum {
		part_mat_items_DUMMY = 0	
	};

	std::map<std::string, int> create_string_to_part_mat_items() {
		return {{"DUMMY", part_mat_items_DUMMY}};
	};

	std::map<int, std::string> create_part_mat_items_to_string() {
		return {{part_mat_items_DUMMY, "DUMMY"}};
	};

	const std::map<std::string, int> string_to_part_mat_items = create_string_to_part_mat_items();
	const std::map<int, std::string> part_mat_items_to_string = create_part_mat_items_to_string();

	part_mat_items_enum material_slot() {
		STRING_TYPE_GETTER("material_slot", static_cast<part_mat_items_enum>(string_to_part_mat_items.at(resstr)))
	}

	void material_slot(part_mat_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "material_slot", part_mat_items_to_string.at(value))
	}

	enum integrator_type_items_enum {
		integrator_type_items_EULER = 0,	
		integrator_type_items_VERLET = 3,	
		integrator_type_items_MIDPOINT = 1,	
		integrator_type_items_RK4 = 2	
	};

	std::map<std::string, int> create_string_to_integrator_type_items() {
		return {{"EULER", integrator_type_items_EULER}, {"VERLET", integrator_type_items_VERLET}, {"MIDPOINT", integrator_type_items_MIDPOINT}, {"RK4", integrator_type_items_RK4}};
	};

	std::map<int, std::string> create_integrator_type_items_to_string() {
		return {{integrator_type_items_EULER, "EULER"}, {integrator_type_items_VERLET, "VERLET"}, {integrator_type_items_MIDPOINT, "MIDPOINT"}, {integrator_type_items_RK4, "RK4"}};
	};

	const std::map<std::string, int> string_to_integrator_type_items = create_string_to_integrator_type_items();
	const std::map<int, std::string> integrator_type_items_to_string = create_integrator_type_items_to_string();

	integrator_type_items_enum integrator() {
		STRING_TYPE_GETTER("integrator", static_cast<integrator_type_items_enum>(string_to_integrator_type_items.at(resstr)))
	}

	void integrator(integrator_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "integrator", integrator_type_items_to_string.at(value))
	}

	enum kink_type_items_enum {
		kink_type_items_NO = 0,	
		kink_type_items_CURL = 1,	
		kink_type_items_RADIAL = 2,	
		kink_type_items_WAVE = 3,	
		kink_type_items_BRAID = 4,	
		kink_type_items_SPIRAL = 5	
	};

	std::map<std::string, int> create_string_to_kink_type_items() {
		return {{"NO", kink_type_items_NO}, {"CURL", kink_type_items_CURL}, {"RADIAL", kink_type_items_RADIAL}, {"WAVE", kink_type_items_WAVE}, {"BRAID", kink_type_items_BRAID}, {"SPIRAL", kink_type_items_SPIRAL}};
	};

	std::map<int, std::string> create_kink_type_items_to_string() {
		return {{kink_type_items_NO, "NO"}, {kink_type_items_CURL, "CURL"}, {kink_type_items_RADIAL, "RADIAL"}, {kink_type_items_WAVE, "WAVE"}, {kink_type_items_BRAID, "BRAID"}, {kink_type_items_SPIRAL, "SPIRAL"}};
	};

	const std::map<std::string, int> string_to_kink_type_items = create_string_to_kink_type_items();
	const std::map<int, std::string> kink_type_items_to_string = create_kink_type_items_to_string();

	kink_type_items_enum kink() {
		STRING_TYPE_GETTER("kink", static_cast<kink_type_items_enum>(string_to_kink_type_items.at(resstr)))
	}

	void kink(kink_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "kink", kink_type_items_to_string.at(value))
	}

	enum kink_axis_items_enum {
		kink_axis_items_X = 0,	
		kink_axis_items_Y = 1,	
		kink_axis_items_Z = 2	
	};

	std::map<std::string, int> create_string_to_kink_axis_items() {
		return {{"X", kink_axis_items_X}, {"Y", kink_axis_items_Y}, {"Z", kink_axis_items_Z}};
	};

	std::map<int, std::string> create_kink_axis_items_to_string() {
		return {{kink_axis_items_X, "X"}, {kink_axis_items_Y, "Y"}, {kink_axis_items_Z, "Z"}};
	};

	const std::map<std::string, int> string_to_kink_axis_items = create_string_to_kink_axis_items();
	const std::map<int, std::string> kink_axis_items_to_string = create_kink_axis_items_to_string();

	kink_axis_items_enum kink_axis() {
		STRING_TYPE_GETTER("kink_axis", static_cast<kink_axis_items_enum>(string_to_kink_axis_items.at(resstr)))
	}

	void kink_axis(kink_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "kink_axis", kink_axis_items_to_string.at(value))
	}

	bool lock_billboard() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_billboard")
	}

	void lock_billboard(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_billboard", value)
	}

	enum bb_align_items_enum {
		bb_align_items_X = 0,	
		bb_align_items_Y = 1,	
		bb_align_items_Z = 2,	
		bb_align_items_VIEW = 3,	
		bb_align_items_VEL = 4	
	};

	std::map<std::string, int> create_string_to_bb_align_items() {
		return {{"X", bb_align_items_X}, {"Y", bb_align_items_Y}, {"Z", bb_align_items_Z}, {"VIEW", bb_align_items_VIEW}, {"VEL", bb_align_items_VEL}};
	};

	std::map<int, std::string> create_bb_align_items_to_string() {
		return {{bb_align_items_X, "X"}, {bb_align_items_Y, "Y"}, {bb_align_items_Z, "Z"}, {bb_align_items_VIEW, "VIEW"}, {bb_align_items_VEL, "VEL"}};
	};

	const std::map<std::string, int> string_to_bb_align_items = create_string_to_bb_align_items();
	const std::map<int, std::string> bb_align_items_to_string = create_bb_align_items_to_string();

	bb_align_items_enum billboard_align() {
		STRING_TYPE_GETTER("billboard_align", static_cast<bb_align_items_enum>(string_to_bb_align_items.at(resstr)))
	}

	void billboard_align(bb_align_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "billboard_align", bb_align_items_to_string.at(value))
	}

	int billboard_uv_split() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "billboard_uv_split")
	}

	void billboard_uv_split(int value) {
		PRIMITIVE_TYPES_SETTER("i", "billboard_uv_split", value)
	}

	enum bb_anim_items_enum {
		bb_anim_items_NONE = 0,	
		bb_anim_items_AGE = 1,	
		bb_anim_items_FRAME = 3,	
		bb_anim_items_ANGLE = 2	
	};

	std::map<std::string, int> create_string_to_bb_anim_items() {
		return {{"NONE", bb_anim_items_NONE}, {"AGE", bb_anim_items_AGE}, {"FRAME", bb_anim_items_FRAME}, {"ANGLE", bb_anim_items_ANGLE}};
	};

	std::map<int, std::string> create_bb_anim_items_to_string() {
		return {{bb_anim_items_NONE, "NONE"}, {bb_anim_items_AGE, "AGE"}, {bb_anim_items_FRAME, "FRAME"}, {bb_anim_items_ANGLE, "ANGLE"}};
	};

	const std::map<std::string, int> string_to_bb_anim_items = create_string_to_bb_anim_items();
	const std::map<int, std::string> bb_anim_items_to_string = create_bb_anim_items_to_string();

	bb_anim_items_enum billboard_animation() {
		STRING_TYPE_GETTER("billboard_animation", static_cast<bb_anim_items_enum>(string_to_bb_anim_items.at(resstr)))
	}

	void billboard_animation(bb_anim_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "billboard_animation", bb_anim_items_to_string.at(value))
	}

	enum bb_split_offset_items_enum {
		bb_split_offset_items_NONE = 0,	
		bb_split_offset_items_LINEAR = 1,	
		bb_split_offset_items_RANDOM = 2	
	};

	std::map<std::string, int> create_string_to_bb_split_offset_items() {
		return {{"NONE", bb_split_offset_items_NONE}, {"LINEAR", bb_split_offset_items_LINEAR}, {"RANDOM", bb_split_offset_items_RANDOM}};
	};

	std::map<int, std::string> create_bb_split_offset_items_to_string() {
		return {{bb_split_offset_items_NONE, "NONE"}, {bb_split_offset_items_LINEAR, "LINEAR"}, {bb_split_offset_items_RANDOM, "RANDOM"}};
	};

	const std::map<std::string, int> string_to_bb_split_offset_items = create_string_to_bb_split_offset_items();
	const std::map<int, std::string> bb_split_offset_items_to_string = create_bb_split_offset_items_to_string();

	bb_split_offset_items_enum billboard_offset_split() {
		STRING_TYPE_GETTER("billboard_offset_split", static_cast<bb_split_offset_items_enum>(string_to_bb_split_offset_items.at(resstr)))
	}

	void billboard_offset_split(bb_split_offset_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "billboard_offset_split", bb_split_offset_items_to_string.at(value))
	}

	float billboard_tilt() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "billboard_tilt")
	}

	void billboard_tilt(float value) {
		PRIMITIVE_TYPES_SETTER("f", "billboard_tilt", value)
	}

	float color_maximum() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_maximum")
	}

	void color_maximum(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_maximum", value)
	}

	float billboard_tilt_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "billboard_tilt_random")
	}

	void billboard_tilt_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "billboard_tilt_random", value)
	}

	VFLOAT2 billboard_offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "billboard_offset", 2)
	}

	void billboard_offset(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "billboard_offset", 2)
	}

	VFLOAT2 billboard_size() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "billboard_size", 2)
	}

	void billboard_size(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "billboard_size", 2)
	}

	float billboard_velocity_head() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "billboard_velocity_head")
	}

	void billboard_velocity_head(float value) {
		PRIMITIVE_TYPES_SETTER("f", "billboard_velocity_head", value)
	}

	float billboard_velocity_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "billboard_velocity_tail")
	}

	void billboard_velocity_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "billboard_velocity_tail", value)
	}

	bool use_simplify() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_simplify")
	}

	void use_simplify(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_simplify", value)
	}

	bool use_simplify_viewport() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_simplify_viewport")
	}

	void use_simplify_viewport(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_simplify_viewport", value)
	}

	int simplify_refsize() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "simplify_refsize")
	}

	void simplify_refsize(int value) {
		PRIMITIVE_TYPES_SETTER("i", "simplify_refsize", value)
	}

	float simplify_rate() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simplify_rate")
	}

	void simplify_rate(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simplify_rate", value)
	}

	float simplify_transition() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simplify_transition")
	}

	void simplify_transition(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simplify_transition", value)
	}

	float simplify_viewport() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simplify_viewport")
	}

	void simplify_viewport(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simplify_viewport", value)
	}

	float frame_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_start")
	}

	void frame_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_start", value)
	}

	float frame_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_end")
	}

	void frame_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_end", value)
	}

	float lifetime() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lifetime")
	}

	void lifetime(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lifetime", value)
	}

	float lifetime_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lifetime_random")
	}

	void lifetime_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lifetime_random", value)
	}

	float time_tweak() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_tweak")
	}

	void time_tweak(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_tweak", value)
	}

	float timestep() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "timestep")
	}

	void timestep(float value) {
		PRIMITIVE_TYPES_SETTER("f", "timestep", value)
	}

	bool use_adaptive_subframes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_adaptive_subframes")
	}

	void use_adaptive_subframes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_adaptive_subframes", value)
	}

	int subframes() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "subframes")
	}

	void subframes(int value) {
		PRIMITIVE_TYPES_SETTER("i", "subframes", value)
	}

	float courant_target() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "courant_target")
	}

	void courant_target(float value) {
		PRIMITIVE_TYPES_SETTER("f", "courant_target", value)
	}

	float jitter_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "jitter_factor")
	}

	void jitter_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "jitter_factor", value)
	}

	float effect_hair() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "effect_hair")
	}

	void effect_hair(float value) {
		PRIMITIVE_TYPES_SETTER("f", "effect_hair", value)
	}

	int count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "count")
	}

	void count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "count", value)
	}

	int userjit() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "userjit")
	}

	void userjit(int value) {
		PRIMITIVE_TYPES_SETTER("i", "userjit", value)
	}

	int grid_resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grid_resolution")
	}

	void grid_resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grid_resolution", value)
	}

	float grid_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "grid_random")
	}

	void grid_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "grid_random", value)
	}

	int effector_amount() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "effector_amount")
	}

	void effector_amount(int value) {
		PRIMITIVE_TYPES_SETTER("i", "effector_amount", value)
	}

	float normal_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "normal_factor")
	}

	void normal_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "normal_factor", value)
	}

	float object_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "object_factor")
	}

	void object_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "object_factor", value)
	}

	float factor_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor_random")
	}

	void factor_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor_random", value)
	}

	float particle_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "particle_factor")
	}

	void particle_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "particle_factor", value)
	}

	float tangent_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tangent_factor")
	}

	void tangent_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tangent_factor", value)
	}

	float tangent_phase() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tangent_phase")
	}

	void tangent_phase(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tangent_phase", value)
	}

	float reactor_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "reactor_factor")
	}

	void reactor_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "reactor_factor", value)
	}

	VFLOAT3 object_align_factor() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "object_align_factor", 3)
	}

	void object_align_factor(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "object_align_factor", 3)
	}

	float angular_velocity_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angular_velocity_factor")
	}

	void angular_velocity_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angular_velocity_factor", value)
	}

	float phase_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "phase_factor")
	}

	void phase_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "phase_factor", value)
	}

	float rotation_factor_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rotation_factor_random")
	}

	void rotation_factor_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rotation_factor_random", value)
	}

	float phase_factor_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "phase_factor_random")
	}

	void phase_factor_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "phase_factor_random", value)
	}

	float hair_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "hair_length")
	}

	void hair_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "hair_length", value)
	}

	float mass() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mass")
	}

	void mass(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mass", value)
	}

	float particle_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "particle_size")
	}

	void particle_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "particle_size", value)
	}

	float size_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_random")
	}

	void size_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_random", value)
	}

	float drag_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "drag_factor")
	}

	void drag_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "drag_factor", value)
	}

	float brownian_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "brownian_factor")
	}

	void brownian_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "brownian_factor", value)
	}

	float damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping")
	}

	void damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping", value)
	}

	float length_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "length_random")
	}

	void length_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "length_random", value)
	}

	int child_nbr() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "child_nbr")
	}

	void child_nbr(int value) {
		PRIMITIVE_TYPES_SETTER("i", "child_nbr", value)
	}

	int rendered_child_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "rendered_child_count")
	}

	void rendered_child_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "rendered_child_count", value)
	}

	float virtual_parents() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "virtual_parents")
	}

	void virtual_parents(float value) {
		PRIMITIVE_TYPES_SETTER("f", "virtual_parents", value)
	}

	float child_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_size")
	}

	void child_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_size", value)
	}

	float child_size_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_size_random")
	}

	void child_size_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_size_random", value)
	}

	float child_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_radius")
	}

	void child_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_radius", value)
	}

	float child_roundness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_roundness")
	}

	void child_roundness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_roundness", value)
	}

	float clump_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clump_factor")
	}

	void clump_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clump_factor", value)
	}

	float clump_shape() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clump_shape")
	}

	void clump_shape(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clump_shape", value)
	}

	bool use_clump_curve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clump_curve")
	}

	void use_clump_curve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clump_curve", value)
	}

	CurveMapping clump_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "clump_curve")
	}

	bool use_clump_noise() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clump_noise")
	}

	void use_clump_noise(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clump_noise", value)
	}

	float clump_noise_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clump_noise_size")
	}

	void clump_noise_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clump_noise_size", value)
	}

	float kink_amplitude() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_amplitude")
	}

	void kink_amplitude(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_amplitude", value)
	}

	float kink_amplitude_clump() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_amplitude_clump")
	}

	void kink_amplitude_clump(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_amplitude_clump", value)
	}

	float kink_amplitude_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_amplitude_random")
	}

	void kink_amplitude_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_amplitude_random", value)
	}

	float kink_frequency() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_frequency")
	}

	void kink_frequency(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_frequency", value)
	}

	float kink_shape() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_shape")
	}

	void kink_shape(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_shape", value)
	}

	float kink_flat() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_flat")
	}

	void kink_flat(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_flat", value)
	}

	int kink_extra_steps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "kink_extra_steps")
	}

	void kink_extra_steps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "kink_extra_steps", value)
	}

	float kink_axis_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kink_axis_random")
	}

	void kink_axis_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kink_axis_random", value)
	}

	float roughness_1() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness_1")
	}

	void roughness_1(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness_1", value)
	}

	float roughness_1_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness_1_size")
	}

	void roughness_1_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness_1_size", value)
	}

	float roughness_2() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness_2")
	}

	void roughness_2(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness_2", value)
	}

	float roughness_2_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness_2_size")
	}

	void roughness_2_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness_2_size", value)
	}

	float roughness_2_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness_2_threshold")
	}

	void roughness_2_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness_2_threshold", value)
	}

	float roughness_endpoint() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness_endpoint")
	}

	void roughness_endpoint(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness_endpoint", value)
	}

	float roughness_end_shape() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "roughness_end_shape")
	}

	void roughness_end_shape(float value) {
		PRIMITIVE_TYPES_SETTER("f", "roughness_end_shape", value)
	}

	bool use_roughness_curve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_roughness_curve")
	}

	void use_roughness_curve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_roughness_curve", value)
	}

	CurveMapping roughness_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "roughness_curve")
	}

	float child_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_length")
	}

	void child_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_length", value)
	}

	float child_length_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_length_threshold")
	}

	void child_length_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_length_threshold", value)
	}

	float child_parting_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_parting_factor")
	}

	void child_parting_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_parting_factor", value)
	}

	float child_parting_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_parting_min")
	}

	void child_parting_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_parting_min", value)
	}

	float child_parting_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "child_parting_max")
	}

	void child_parting_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "child_parting_max", value)
	}

	float branch_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "branch_threshold")
	}

	void branch_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "branch_threshold", value)
	}

	float line_length_tail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "line_length_tail")
	}

	void line_length_tail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "line_length_tail", value)
	}

	float line_length_head() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "line_length_head")
	}

	void line_length_head(float value) {
		PRIMITIVE_TYPES_SETTER("f", "line_length_head", value)
	}

	float path_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "path_start")
	}

	void path_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "path_start", value)
	}

	float path_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "path_end")
	}

	void path_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "path_end", value)
	}

	int trail_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "trail_count")
	}

	void trail_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "trail_count", value)
	}

	int keyed_loops() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "keyed_loops")
	}

	void keyed_loops(int value) {
		PRIMITIVE_TYPES_SETTER("i", "keyed_loops", value)
	}

	bool use_modifier_stack() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_modifier_stack")
	}

	void use_modifier_stack(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_modifier_stack", value)
	}

	Group dupli_group() {
		CLASS_TYPES_GETTER(Group, "dupli_group")
	}

	std::map<std::string, ParticleDupliWeight> dupli_weights() {
		MAP_TYPE_GETTER("dupli_weights", ParticleDupliWeight)
	}

	ParticleDupliWeight active_dupliweight() {
		CLASS_TYPES_GETTER(ParticleDupliWeight, "active_dupliweight")
	}

	int active_dupliweight_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_dupliweight_index")
	}

	void active_dupliweight_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_dupliweight_index", value)
	}

	Object dupli_object() {
		CLASS_TYPES_GETTER(Object, "dupli_object")
	}

	Object billboard_object() {
		CLASS_TYPES_GETTER(Object, "billboard_object")
	}

	BoidSettings boids() {
		CLASS_TYPES_GETTER(BoidSettings, "boids")
	}

	SPHFluidSettings fluid() {
		CLASS_TYPES_GETTER(SPHFluidSettings, "fluid")
	}

	EffectorWeights effector_weights() {
		CLASS_TYPES_GETTER(EffectorWeights, "effector_weights")
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	FieldSettings force_field_1() {
		CLASS_TYPES_GETTER(FieldSettings, "force_field_1")
	}

	FieldSettings force_field_2() {
		CLASS_TYPES_GETTER(FieldSettings, "force_field_2")
	}
};

class Pose : public pyUniplug {
public:
	Pose(PyObject* pyobj) : pyUniplug(pyobj) {}
	Pose() : pyUniplug(0) { }

	std::map<std::string, PoseBone> bones();

	std::map<std::string, BoneGroup> bone_groups();

	enum prop_iksolver_items_enum {
		prop_iksolver_items_LEGACY = 0,	
		prop_iksolver_items_ITASC = 1	
	};

	std::map<std::string, int> create_string_to_prop_iksolver_items() {
		return {{"LEGACY", prop_iksolver_items_LEGACY}, {"ITASC", prop_iksolver_items_ITASC}};
	};

	std::map<int, std::string> create_prop_iksolver_items_to_string() {
		return {{prop_iksolver_items_LEGACY, "LEGACY"}, {prop_iksolver_items_ITASC, "ITASC"}};
	};

	const std::map<std::string, int> string_to_prop_iksolver_items = create_string_to_prop_iksolver_items();
	const std::map<int, std::string> prop_iksolver_items_to_string = create_prop_iksolver_items_to_string();

	prop_iksolver_items_enum ik_solver() {
		STRING_TYPE_GETTER("ik_solver", static_cast<prop_iksolver_items_enum>(string_to_prop_iksolver_items.at(resstr)))
	}

	void ik_solver(prop_iksolver_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ik_solver", prop_iksolver_items_to_string.at(value))
	}

	IKParam ik_param();

	AnimViz animation_visualization() {
		CLASS_TYPES_GETTER(AnimViz, "animation_visualization")
	}
};

class PoseBone : public pyUniplug {
public:
	PoseBone(PyObject* pyobj) : pyUniplug(pyobj) {}
	PoseBone() : pyUniplug(0) { }

	std::map<std::string, Constraint> constraints() {
		MAP_TYPE_GETTER("constraints", Constraint)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	MotionPath motion_path() {
		CLASS_TYPES_GETTER(MotionPath, "motion_path")
	}

	Bone bone() {
		CLASS_TYPES_GETTER(Bone, "bone")
	}

	PoseBone parent() {
		CLASS_TYPES_GETTER(PoseBone, "parent")
	}

	PoseBone child() {
		CLASS_TYPES_GETTER(PoseBone, "child")
	}

	VFLOAT3 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 3)
	}

	void location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 3)
	}

	VFLOAT3 scale() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scale", 3)
	}

	void scale(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scale", 3)
	}

	VFLOAT4 rotation_quaternion() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation_quaternion", 4)
	}

	void rotation_quaternion(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_quaternion", 4)
	}

	VFLOAT4 rotation_axis_angle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation_axis_angle", 4)
	}

	void rotation_axis_angle(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_axis_angle", 4)
	}

	VFLOAT3 rotation_euler() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "rotation_euler", 3)
	}

	void rotation_euler(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rotation_euler", 3)
	}

	enum posebone_rotmode_items_enum {
		posebone_rotmode_items_QUATERNION = 0,	
		posebone_rotmode_items_XYZ = 1,	
		posebone_rotmode_items_XZY = 2,	
		posebone_rotmode_items_YXZ = 3,	
		posebone_rotmode_items_YZX = 4,	
		posebone_rotmode_items_ZXY = 5,	
		posebone_rotmode_items_ZYX = 6,	
		posebone_rotmode_items_AXIS_ANGLE = -1	
	};

	std::map<std::string, int> create_string_to_posebone_rotmode_items() {
		return {{"QUATERNION", posebone_rotmode_items_QUATERNION}, {"XYZ", posebone_rotmode_items_XYZ}, {"XZY", posebone_rotmode_items_XZY}, {"YXZ", posebone_rotmode_items_YXZ}, {"YZX", posebone_rotmode_items_YZX}, {"ZXY", posebone_rotmode_items_ZXY}, {"ZYX", posebone_rotmode_items_ZYX}, {"AXIS_ANGLE", posebone_rotmode_items_AXIS_ANGLE}};
	};

	std::map<int, std::string> create_posebone_rotmode_items_to_string() {
		return {{posebone_rotmode_items_QUATERNION, "QUATERNION"}, {posebone_rotmode_items_XYZ, "XYZ"}, {posebone_rotmode_items_XZY, "XZY"}, {posebone_rotmode_items_YXZ, "YXZ"}, {posebone_rotmode_items_YZX, "YZX"}, {posebone_rotmode_items_ZXY, "ZXY"}, {posebone_rotmode_items_ZYX, "ZYX"}, {posebone_rotmode_items_AXIS_ANGLE, "AXIS_ANGLE"}};
	};

	const std::map<std::string, int> string_to_posebone_rotmode_items = create_string_to_posebone_rotmode_items();
	const std::map<int, std::string> posebone_rotmode_items_to_string = create_posebone_rotmode_items_to_string();

	posebone_rotmode_items_enum rotation_mode() {
		STRING_TYPE_GETTER("rotation_mode", static_cast<posebone_rotmode_items_enum>(string_to_posebone_rotmode_items.at(resstr)))
	}

	void rotation_mode(posebone_rotmode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "rotation_mode", posebone_rotmode_items_to_string.at(value))
	}

	VFLOAT16 matrix_channel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix_channel", 16)
	}

	void matrix_channel(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix_channel", 16)
	}

	VFLOAT16 matrix_basis() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix_basis", 16)
	}

	void matrix_basis(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix_basis", 16)
	}

	VFLOAT16 matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix", 16)
	}

	void matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix", 16)
	}

	VFLOAT3 head() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "head", 3)
	}

	void head(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "head", 3)
	}

	VFLOAT3 tail() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tail", 3)
	}

	void tail(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tail", 3)
	}

	bool is_in_ik_chain() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_in_ik_chain")
	}

	void is_in_ik_chain(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_in_ik_chain", value)
	}

	bool lock_ik_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_ik_x")
	}

	void lock_ik_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_ik_x", value)
	}

	bool lock_ik_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_ik_y")
	}

	void lock_ik_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_ik_y", value)
	}

	bool lock_ik_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_ik_z")
	}

	void lock_ik_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_ik_z", value)
	}

	bool use_ik_limit_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ik_limit_x")
	}

	void use_ik_limit_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ik_limit_x", value)
	}

	bool use_ik_limit_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ik_limit_y")
	}

	void use_ik_limit_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ik_limit_y", value)
	}

	bool use_ik_limit_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ik_limit_z")
	}

	void use_ik_limit_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ik_limit_z", value)
	}

	bool use_ik_rotation_control() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ik_rotation_control")
	}

	void use_ik_rotation_control(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ik_rotation_control", value)
	}

	bool use_ik_linear_control() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ik_linear_control")
	}

	void use_ik_linear_control(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ik_linear_control", value)
	}

	float ik_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_min_x")
	}

	void ik_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_min_x", value)
	}

	float ik_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_max_x")
	}

	void ik_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_max_x", value)
	}

	float ik_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_min_y")
	}

	void ik_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_min_y", value)
	}

	float ik_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_max_y")
	}

	void ik_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_max_y", value)
	}

	float ik_min_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_min_z")
	}

	void ik_min_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_min_z", value)
	}

	float ik_max_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_max_z")
	}

	void ik_max_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_max_z", value)
	}

	float ik_stiffness_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_stiffness_x")
	}

	void ik_stiffness_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_stiffness_x", value)
	}

	float ik_stiffness_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_stiffness_y")
	}

	void ik_stiffness_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_stiffness_y", value)
	}

	float ik_stiffness_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_stiffness_z")
	}

	void ik_stiffness_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_stiffness_z", value)
	}

	float ik_stretch() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_stretch")
	}

	void ik_stretch(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_stretch", value)
	}

	float ik_rotation_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_rotation_weight")
	}

	void ik_rotation_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_rotation_weight", value)
	}

	float ik_linear_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ik_linear_weight")
	}

	void ik_linear_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ik_linear_weight", value)
	}

	Object custom_shape() {
		CLASS_TYPES_GETTER(Object, "custom_shape")
	}

	PoseBone custom_shape_transform() {
		CLASS_TYPES_GETTER(PoseBone, "custom_shape_transform")
	}

	int bone_group_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bone_group_index")
	}

	void bone_group_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bone_group_index", value)
	}

	BoneGroup bone_group();

	std::array<bool, 3> lock_location() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "lock_location", 3)
	}

	void lock_location(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "lock_location", 3)
	}

	std::array<bool, 3> lock_rotation() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "lock_rotation", 3)
	}

	void lock_rotation(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "lock_rotation", 3)
	}

	bool lock_rotation_w() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation_w")
	}

	void lock_rotation_w(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation_w", value)
	}

	bool lock_rotations_4d() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotations_4d")
	}

	void lock_rotations_4d(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotations_4d", value)
	}

	std::array<bool, 3> lock_scale() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "lock_scale", 3)
	}

	void lock_scale(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "lock_scale", 3)
	}

	float evaluate_envelope(VFLOAT3 point) {
		ARRAY_TO_PYOBJ(point, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("evaluate_envelope", "O", point_tupleval)
		DECREF_ARRAY_ITEMS(point, 3)
		CREATE_SINGLE_PYOBJ(factor)
		PRIMITIVE_TYPES_CONV(factor, float, (float)PyFloat_AsDouble(factor_obj))
		NONCLASS_TYPES_RETURN(factor_res)
	}
};

class IKParam : public pyUniplug {
public:
	IKParam(PyObject* pyobj) : pyUniplug(pyobj) {}
	IKParam() : pyUniplug(0) { }

	enum prop_iksolver_items_enum {
		prop_iksolver_items_LEGACY = 0,	
		prop_iksolver_items_ITASC = 1	
	};

	std::map<std::string, int> create_string_to_prop_iksolver_items() {
		return {{"LEGACY", prop_iksolver_items_LEGACY}, {"ITASC", prop_iksolver_items_ITASC}};
	};

	std::map<int, std::string> create_prop_iksolver_items_to_string() {
		return {{prop_iksolver_items_LEGACY, "LEGACY"}, {prop_iksolver_items_ITASC, "ITASC"}};
	};

	const std::map<std::string, int> string_to_prop_iksolver_items = create_string_to_prop_iksolver_items();
	const std::map<int, std::string> prop_iksolver_items_to_string = create_prop_iksolver_items_to_string();

	prop_iksolver_items_enum ik_solver() {
		STRING_TYPE_GETTER("ik_solver", static_cast<prop_iksolver_items_enum>(string_to_prop_iksolver_items.at(resstr)))
	}

	void ik_solver(prop_iksolver_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ik_solver", prop_iksolver_items_to_string.at(value))
	}
};

class Itasc : public IKParam {
public:
	Itasc(PyObject* pyobj) : IKParam(pyobj) {}
	Itasc() : IKParam(0) { }

	float precision() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "precision")
	}

	void precision(float value) {
		PRIMITIVE_TYPES_SETTER("f", "precision", value)
	}

	int iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "iterations")
	}

	void iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "iterations", value)
	}

	int step_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "step_count")
	}

	void step_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "step_count", value)
	}

	enum prop_itasc_mode_items_enum {
		prop_itasc_mode_items_ANIMATION = 0,	
		prop_itasc_mode_items_SIMULATION = 8	
	};

	std::map<std::string, int> create_string_to_prop_itasc_mode_items() {
		return {{"ANIMATION", prop_itasc_mode_items_ANIMATION}, {"SIMULATION", prop_itasc_mode_items_SIMULATION}};
	};

	std::map<int, std::string> create_prop_itasc_mode_items_to_string() {
		return {{prop_itasc_mode_items_ANIMATION, "ANIMATION"}, {prop_itasc_mode_items_SIMULATION, "SIMULATION"}};
	};

	const std::map<std::string, int> string_to_prop_itasc_mode_items = create_string_to_prop_itasc_mode_items();
	const std::map<int, std::string> prop_itasc_mode_items_to_string = create_prop_itasc_mode_items_to_string();

	prop_itasc_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<prop_itasc_mode_items_enum>(string_to_prop_itasc_mode_items.at(resstr)))
	}

	void mode(prop_itasc_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", prop_itasc_mode_items_to_string.at(value))
	}

	enum prop_itasc_reiteration_items_enum {
		prop_itasc_reiteration_items_NEVER = 0,	
		prop_itasc_reiteration_items_INITIAL = 2,	
		prop_itasc_reiteration_items_ALWAYS = 6	
	};

	std::map<std::string, int> create_string_to_prop_itasc_reiteration_items() {
		return {{"NEVER", prop_itasc_reiteration_items_NEVER}, {"INITIAL", prop_itasc_reiteration_items_INITIAL}, {"ALWAYS", prop_itasc_reiteration_items_ALWAYS}};
	};

	std::map<int, std::string> create_prop_itasc_reiteration_items_to_string() {
		return {{prop_itasc_reiteration_items_NEVER, "NEVER"}, {prop_itasc_reiteration_items_INITIAL, "INITIAL"}, {prop_itasc_reiteration_items_ALWAYS, "ALWAYS"}};
	};

	const std::map<std::string, int> string_to_prop_itasc_reiteration_items = create_string_to_prop_itasc_reiteration_items();
	const std::map<int, std::string> prop_itasc_reiteration_items_to_string = create_prop_itasc_reiteration_items_to_string();

	prop_itasc_reiteration_items_enum reiteration_method() {
		STRING_TYPE_GETTER("reiteration_method", static_cast<prop_itasc_reiteration_items_enum>(string_to_prop_itasc_reiteration_items.at(resstr)))
	}

	void reiteration_method(prop_itasc_reiteration_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "reiteration_method", prop_itasc_reiteration_items_to_string.at(value))
	}

	bool use_auto_step() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_step")
	}

	void use_auto_step(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_step", value)
	}

	float step_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "step_min")
	}

	void step_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "step_min", value)
	}

	float step_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "step_max")
	}

	void step_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "step_max", value)
	}

	float feedback() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "feedback")
	}

	void feedback(float value) {
		PRIMITIVE_TYPES_SETTER("f", "feedback", value)
	}

	float velocity_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_max")
	}

	void velocity_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_max", value)
	}

	enum prop_solver_items_enum {
		prop_solver_items_SDLS = 0,	
		prop_solver_items_DLS = 1	
	};

	std::map<std::string, int> create_string_to_prop_solver_items() {
		return {{"SDLS", prop_solver_items_SDLS}, {"DLS", prop_solver_items_DLS}};
	};

	std::map<int, std::string> create_prop_solver_items_to_string() {
		return {{prop_solver_items_SDLS, "SDLS"}, {prop_solver_items_DLS, "DLS"}};
	};

	const std::map<std::string, int> string_to_prop_solver_items = create_string_to_prop_solver_items();
	const std::map<int, std::string> prop_solver_items_to_string = create_prop_solver_items_to_string();

	prop_solver_items_enum solver() {
		STRING_TYPE_GETTER("solver", static_cast<prop_solver_items_enum>(string_to_prop_solver_items.at(resstr)))
	}

	void solver(prop_solver_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "solver", prop_solver_items_to_string.at(value))
	}

	float damping_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping_max")
	}

	void damping_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping_max", value)
	}

	float damping_epsilon() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "damping_epsilon")
	}

	void damping_epsilon(float value) {
		PRIMITIVE_TYPES_SETTER("f", "damping_epsilon", value)
	}
};

class BoneGroup : public pyUniplug {
public:
	BoneGroup(PyObject* pyobj) : pyUniplug(pyobj) {}
	BoneGroup() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum color_sets_items_enum {
		color_sets_items_DEFAULT = 0,	
		color_sets_items_THEME01 = 1,	
		color_sets_items_THEME02 = 2,	
		color_sets_items_THEME03 = 3,	
		color_sets_items_THEME04 = 4,	
		color_sets_items_THEME05 = 5,	
		color_sets_items_THEME06 = 6,	
		color_sets_items_THEME07 = 7,	
		color_sets_items_THEME08 = 8,	
		color_sets_items_THEME09 = 9,	
		color_sets_items_THEME10 = 10,	
		color_sets_items_THEME11 = 11,	
		color_sets_items_THEME12 = 12,	
		color_sets_items_THEME13 = 13,	
		color_sets_items_THEME14 = 14,	
		color_sets_items_THEME15 = 15,	
		color_sets_items_THEME16 = 16,	
		color_sets_items_THEME17 = 17,	
		color_sets_items_THEME18 = 18,	
		color_sets_items_THEME19 = 19,	
		color_sets_items_THEME20 = 20,	
		color_sets_items_CUSTOM = -1	
	};

	std::map<std::string, int> create_string_to_color_sets_items() {
		return {{"DEFAULT", color_sets_items_DEFAULT}, {"THEME01", color_sets_items_THEME01}, {"THEME02", color_sets_items_THEME02}, {"THEME03", color_sets_items_THEME03}, {"THEME04", color_sets_items_THEME04}, {"THEME05", color_sets_items_THEME05}, {"THEME06", color_sets_items_THEME06}, {"THEME07", color_sets_items_THEME07}, {"THEME08", color_sets_items_THEME08}, {"THEME09", color_sets_items_THEME09}, {"THEME10", color_sets_items_THEME10}, {"THEME11", color_sets_items_THEME11}, {"THEME12", color_sets_items_THEME12}, {"THEME13", color_sets_items_THEME13}, {"THEME14", color_sets_items_THEME14}, {"THEME15", color_sets_items_THEME15}, {"THEME16", color_sets_items_THEME16}, {"THEME17", color_sets_items_THEME17}, {"THEME18", color_sets_items_THEME18}, {"THEME19", color_sets_items_THEME19}, {"THEME20", color_sets_items_THEME20}, {"CUSTOM", color_sets_items_CUSTOM}};
	};

	std::map<int, std::string> create_color_sets_items_to_string() {
		return {{color_sets_items_DEFAULT, "DEFAULT"}, {color_sets_items_THEME01, "THEME01"}, {color_sets_items_THEME02, "THEME02"}, {color_sets_items_THEME03, "THEME03"}, {color_sets_items_THEME04, "THEME04"}, {color_sets_items_THEME05, "THEME05"}, {color_sets_items_THEME06, "THEME06"}, {color_sets_items_THEME07, "THEME07"}, {color_sets_items_THEME08, "THEME08"}, {color_sets_items_THEME09, "THEME09"}, {color_sets_items_THEME10, "THEME10"}, {color_sets_items_THEME11, "THEME11"}, {color_sets_items_THEME12, "THEME12"}, {color_sets_items_THEME13, "THEME13"}, {color_sets_items_THEME14, "THEME14"}, {color_sets_items_THEME15, "THEME15"}, {color_sets_items_THEME16, "THEME16"}, {color_sets_items_THEME17, "THEME17"}, {color_sets_items_THEME18, "THEME18"}, {color_sets_items_THEME19, "THEME19"}, {color_sets_items_THEME20, "THEME20"}, {color_sets_items_CUSTOM, "CUSTOM"}};
	};

	const std::map<std::string, int> string_to_color_sets_items = create_string_to_color_sets_items();
	const std::map<int, std::string> color_sets_items_to_string = create_color_sets_items_to_string();

	color_sets_items_enum color_set() {
		STRING_TYPE_GETTER("color_set", static_cast<color_sets_items_enum>(string_to_color_sets_items.at(resstr)))
	}

	void color_set(color_sets_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_set", color_sets_items_to_string.at(value))
	}

	bool is_custom_color_set() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_custom_color_set")
	}

	void is_custom_color_set(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_custom_color_set", value)
	}

	ThemeBoneColorSet colors();
};

class GameProperty : public pyUniplug {
public:
	GameProperty(PyObject* pyobj) : pyUniplug(pyobj) {}
	GameProperty() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum gameproperty_type_items_enum {
		gameproperty_type_items_BOOL = 0,	
		gameproperty_type_items_INT = 1,	
		gameproperty_type_items_FLOAT = 2,	
		gameproperty_type_items_STRING = 3,	
		gameproperty_type_items_TIMER = 5	
	};

	std::map<std::string, int> create_string_to_gameproperty_type_items() {
		return {{"BOOL", gameproperty_type_items_BOOL}, {"INT", gameproperty_type_items_INT}, {"FLOAT", gameproperty_type_items_FLOAT}, {"STRING", gameproperty_type_items_STRING}, {"TIMER", gameproperty_type_items_TIMER}};
	};

	std::map<int, std::string> create_gameproperty_type_items_to_string() {
		return {{gameproperty_type_items_BOOL, "BOOL"}, {gameproperty_type_items_INT, "INT"}, {gameproperty_type_items_FLOAT, "FLOAT"}, {gameproperty_type_items_STRING, "STRING"}, {gameproperty_type_items_TIMER, "TIMER"}};
	};

	const std::map<std::string, int> string_to_gameproperty_type_items = create_string_to_gameproperty_type_items();
	const std::map<int, std::string> gameproperty_type_items_to_string = create_gameproperty_type_items_to_string();

	gameproperty_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<gameproperty_type_items_enum>(string_to_gameproperty_type_items.at(resstr)))
	}

	void type(gameproperty_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", gameproperty_type_items_to_string.at(value))
	}

	bool show_debug() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_debug")
	}

	void show_debug(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_debug", value)
	}
};

class GameBooleanProperty : public GameProperty {
public:
	GameBooleanProperty(PyObject* pyobj) : GameProperty(pyobj) {}
	GameBooleanProperty() : GameProperty(0) { }

	bool value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "value")
	}

	void value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "value", value)
	}
};

class GameIntProperty : public GameProperty {
public:
	GameIntProperty(PyObject* pyobj) : GameProperty(pyobj) {}
	GameIntProperty() : GameProperty(0) { }

	int value() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "value")
	}

	void value(int value) {
		PRIMITIVE_TYPES_SETTER("i", "value", value)
	}
};

class GameFloatProperty : public GameProperty {
public:
	GameFloatProperty(PyObject* pyobj) : GameProperty(pyobj) {}
	GameFloatProperty() : GameProperty(0) { }

	float value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value")
	}

	void value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value", value)
	}
};

class GameTimerProperty : public GameProperty {
public:
	GameTimerProperty(PyObject* pyobj) : GameProperty(pyobj) {}
	GameTimerProperty() : GameProperty(0) { }

	float value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value")
	}

	void value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value", value)
	}
};

class GameStringProperty : public GameProperty {
public:
	GameStringProperty(PyObject* pyobj) : GameProperty(pyobj) {}
	GameStringProperty() : GameProperty(0) { }

	std::string value() {
		STRING_TYPE_GETTER("value", resstr)
	}

	void value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "value", value)
	}
};

class RenderEngine : public pyUniplug {
public:
	RenderEngine(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderEngine() : pyUniplug(0) { }

	bool is_animation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_animation")
	}

	void is_animation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_animation", value)
	}

	bool is_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_preview")
	}

	void is_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_preview", value)
	}

	Object camera_override() {
		CLASS_TYPES_GETTER(Object, "camera_override")
	}

	std::array<bool, 20> layer_override() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layer_override", 20)
	}

	void layer_override(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layer_override", 20)
	}

	int tile_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tile_x")
	}

	void tile_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tile_x", value)
	}

	int tile_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tile_y")
	}

	void tile_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tile_y", value)
	}

	int resolution_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_x")
	}

	void resolution_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_x", value)
	}

	int resolution_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_y")
	}

	void resolution_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_y", value)
	}

	RenderSettings render();

	bool use_highlight_tiles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_highlight_tiles")
	}

	void use_highlight_tiles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_highlight_tiles", value)
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	bool bl_use_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "bl_use_preview")
	}

	void bl_use_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "bl_use_preview", value)
	}

	bool bl_use_texture_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "bl_use_texture_preview")
	}

	void bl_use_texture_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "bl_use_texture_preview", value)
	}

	bool bl_use_postprocess() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "bl_use_postprocess")
	}

	void bl_use_postprocess(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "bl_use_postprocess", value)
	}

	bool bl_use_shading_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "bl_use_shading_nodes")
	}

	void bl_use_shading_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "bl_use_shading_nodes", value)
	}

	bool bl_use_shading_nodes_custom() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "bl_use_shading_nodes_custom")
	}

	void bl_use_shading_nodes_custom(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "bl_use_shading_nodes_custom", value)
	}

	bool bl_use_exclude_layers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "bl_use_exclude_layers")
	}

	void bl_use_exclude_layers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "bl_use_exclude_layers", value)
	}

	bool bl_use_save_buffers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "bl_use_save_buffers")
	}

	void bl_use_save_buffers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "bl_use_save_buffers", value)
	}

	void tag_redraw() {
		PYTHON_FUNCTION_CALL("tag_redraw")
	}

	void tag_update() {
		PYTHON_FUNCTION_CALL("tag_update")
	}

	RenderResult begin_result(int x, int y, int w, int h, const std::string layer = NULL, const std::string view = NULL);

	void update_result(RenderResult result);

	void end_result(RenderResult result, bool cancel = false, bool do_merge_results = false);

	bool test_break() {
		PYTHON_FUNCTION_CALL("test_break")
		CREATE_SINGLE_PYOBJ(do_break)
		PRIMITIVE_TYPES_CONV(do_break, bool, PyLong_AsLong(do_break_obj)==1)
		NONCLASS_TYPES_RETURN(do_break_res)
	}

	void active_view_set(const std::string view = NULL) {
		PYTHON_FUNCTION_ARGS_CALL("active_view_set", "s", view)
	}

	float camera_shift_x(Object camera) {
		PYTHON_FUNCTION_ARGS_CALL("camera_shift_x", "O", camera.get_pyobjref())
		CREATE_SINGLE_PYOBJ(shift_x)
		PRIMITIVE_TYPES_CONV(shift_x, float, (float)PyFloat_AsDouble(shift_x_obj))
		NONCLASS_TYPES_RETURN(shift_x_res)
	}

	void camera_model_matrix(Object camera, VFLOAT16 r_model_matrix) {
		ARRAY_TO_PYOBJ(r_model_matrix, "O", 16)
		PYTHON_FUNCTION_ARGS_CALL("camera_model_matrix", "OO", camera.get_pyobjref(), r_model_matrix_tupleval)
		DECREF_ARRAY_ITEMS(r_model_matrix, 16)
	}

	void update_stats(const std::string stats, const std::string info) {
		PYTHON_FUNCTION_ARGS_CALL("update_stats", "ss", stats, info)
	}

	void frame_set(int frame, float subframe) {
		PYTHON_FUNCTION_ARGS_CALL("frame_set", "if", frame, subframe)
	}

	void update_progress(float progress) {
		PYTHON_FUNCTION_ARGS_CALL("update_progress", "f", progress)
	}

	void update_memory_stats(float memory_used = 0.0f, float memory_peak = 0.0f) {
		PYTHON_FUNCTION_ARGS_CALL("update_memory_stats", "ff", memory_used, memory_peak)
	}

	enum items_enum {
		items_DEBUG = 1,	
		items_INFO = 2,	
		items_OPERATOR = 4,	
		items_PROPERTY = 8,	
		items_WARNING = 16,	
		items_ERROR = 32,	
		items_ERROR_INVALID_INPUT = 64,	
		items_ERROR_INVALID_CONTEXT = 128,	
		items_ERROR_OUT_OF_MEMORY = 256	
	};

	std::map<std::string, int> create_string_to_items() {
		return {{"DEBUG", items_DEBUG}, {"INFO", items_INFO}, {"OPERATOR", items_OPERATOR}, {"PROPERTY", items_PROPERTY}, {"WARNING", items_WARNING}, {"ERROR", items_ERROR}, {"ERROR_INVALID_INPUT", items_ERROR_INVALID_INPUT}, {"ERROR_INVALID_CONTEXT", items_ERROR_INVALID_CONTEXT}, {"ERROR_OUT_OF_MEMORY", items_ERROR_OUT_OF_MEMORY}};
	};

	std::map<int, std::string> create_items_to_string() {
		return {{items_DEBUG, "DEBUG"}, {items_INFO, "INFO"}, {items_OPERATOR, "OPERATOR"}, {items_PROPERTY, "PROPERTY"}, {items_WARNING, "WARNING"}, {items_ERROR, "ERROR"}, {items_ERROR_INVALID_INPUT, "ERROR_INVALID_INPUT"}, {items_ERROR_INVALID_CONTEXT, "ERROR_INVALID_CONTEXT"}, {items_ERROR_OUT_OF_MEMORY, "ERROR_OUT_OF_MEMORY"}};
	};

	const std::map<std::string, int> string_to_items = create_string_to_items();
	const std::map<int, std::string> items_to_string = create_items_to_string();

	void report(items_enum type, const std::string message) {
		PYTHON_FUNCTION_ARGS_CALL("report", "ss", items_to_string.at(type), message)
	}

	void error_set(const std::string message) {
		PYTHON_FUNCTION_ARGS_CALL("error_set", "s", message)
	}

	void bind_display_space_shader(Scene scene);

	void unbind_display_space_shader() {
		PYTHON_FUNCTION_CALL("unbind_display_space_shader")
	}

	bool support_display_space_shader(Scene scene);
};

class RenderResult : public pyUniplug {
public:
	RenderResult(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderResult() : pyUniplug(0) { }

	int resolution_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_x")
	}

	void resolution_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_x", value)
	}

	int resolution_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_y")
	}

	void resolution_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_y", value)
	}

	std::map<std::string, RenderLayer> layers();

	std::map<std::string, RenderView> views();

	void load_from_file(const std::string filename) {
		PYTHON_FUNCTION_ARGS_CALL("load_from_file", "s", filename)
	}
};

class RenderView : public pyUniplug {
public:
	RenderView(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderView() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class RenderLayer : public pyUniplug {
public:
	RenderLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	Material material_override() {
		CLASS_TYPES_GETTER(Material, "material_override")
	}

	Group light_override() {
		CLASS_TYPES_GETTER(Group, "light_override")
	}

	std::array<bool, 20> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 20)
	}

	void layers(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 20)
	}

	std::array<bool, 20> layers_zmask() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_zmask", 20)
	}

	void layers_zmask(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_zmask", 20)
	}

	std::array<bool, 20> layers_exclude() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_exclude", 20)
	}

	void layers_exclude(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_exclude", 20)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool use_zmask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_zmask")
	}

	void use_zmask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_zmask", value)
	}

	bool invert_zmask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_zmask")
	}

	void invert_zmask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_zmask", value)
	}

	bool use_all_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_all_z")
	}

	void use_all_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_all_z", value)
	}

	bool use_solid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_solid")
	}

	void use_solid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_solid", value)
	}

	bool use_halo() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_halo")
	}

	void use_halo(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_halo", value)
	}

	bool use_ztransp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ztransp")
	}

	void use_ztransp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ztransp", value)
	}

	bool use_sky() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sky")
	}

	void use_sky(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sky", value)
	}

	bool use_edge_enhance() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_enhance")
	}

	void use_edge_enhance(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_enhance", value)
	}

	bool use_strand() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_strand")
	}

	void use_strand(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_strand", value)
	}

	bool use_freestyle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_freestyle")
	}

	void use_freestyle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_freestyle", value)
	}

	bool use_pass_combined() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_combined")
	}

	void use_pass_combined(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_combined", value)
	}

	bool use_pass_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_z")
	}

	void use_pass_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_z", value)
	}

	bool use_pass_vector() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_vector")
	}

	void use_pass_vector(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_vector", value)
	}

	bool use_pass_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_normal")
	}

	void use_pass_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_normal", value)
	}

	bool use_pass_uv() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_uv")
	}

	void use_pass_uv(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_uv", value)
	}

	bool use_pass_mist() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_mist")
	}

	void use_pass_mist(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_mist", value)
	}

	bool use_pass_object_index() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_object_index")
	}

	void use_pass_object_index(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_object_index", value)
	}

	bool use_pass_material_index() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_material_index")
	}

	void use_pass_material_index(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_material_index", value)
	}

	bool use_pass_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_color")
	}

	void use_pass_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_color", value)
	}

	bool use_pass_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse")
	}

	void use_pass_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse", value)
	}

	bool use_pass_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_specular")
	}

	void use_pass_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_specular", value)
	}

	bool use_pass_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_shadow")
	}

	void use_pass_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_shadow", value)
	}

	bool use_pass_ambient_occlusion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_ambient_occlusion")
	}

	void use_pass_ambient_occlusion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_ambient_occlusion", value)
	}

	bool use_pass_reflection() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_reflection")
	}

	void use_pass_reflection(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_reflection", value)
	}

	bool use_pass_refraction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_refraction")
	}

	void use_pass_refraction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_refraction", value)
	}

	bool use_pass_emit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_emit")
	}

	void use_pass_emit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_emit", value)
	}

	bool use_pass_environment() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_environment")
	}

	void use_pass_environment(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_environment", value)
	}

	bool use_pass_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_indirect")
	}

	void use_pass_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_indirect", value)
	}

	bool exclude_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_specular")
	}

	void exclude_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_specular", value)
	}

	bool exclude_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_shadow")
	}

	void exclude_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_shadow", value)
	}

	bool exclude_ambient_occlusion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_ambient_occlusion")
	}

	void exclude_ambient_occlusion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_ambient_occlusion", value)
	}

	bool exclude_reflection() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_reflection")
	}

	void exclude_reflection(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_reflection", value)
	}

	bool exclude_refraction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_refraction")
	}

	void exclude_refraction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_refraction", value)
	}

	bool exclude_emit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_emit")
	}

	void exclude_emit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_emit", value)
	}

	bool exclude_environment() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_environment")
	}

	void exclude_environment(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_environment", value)
	}

	bool exclude_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_indirect")
	}

	void exclude_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_indirect", value)
	}

	bool use_pass_diffuse_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse_direct")
	}

	void use_pass_diffuse_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse_direct", value)
	}

	bool use_pass_diffuse_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse_indirect")
	}

	void use_pass_diffuse_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse_indirect", value)
	}

	bool use_pass_diffuse_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse_color")
	}

	void use_pass_diffuse_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse_color", value)
	}

	bool use_pass_glossy_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_glossy_direct")
	}

	void use_pass_glossy_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_glossy_direct", value)
	}

	bool use_pass_glossy_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_glossy_indirect")
	}

	void use_pass_glossy_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_glossy_indirect", value)
	}

	bool use_pass_glossy_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_glossy_color")
	}

	void use_pass_glossy_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_glossy_color", value)
	}

	bool use_pass_transmission_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_transmission_direct")
	}

	void use_pass_transmission_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_transmission_direct", value)
	}

	bool use_pass_transmission_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_transmission_indirect")
	}

	void use_pass_transmission_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_transmission_indirect", value)
	}

	bool use_pass_transmission_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_transmission_color")
	}

	void use_pass_transmission_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_transmission_color", value)
	}

	bool use_pass_subsurface_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_subsurface_direct")
	}

	void use_pass_subsurface_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_subsurface_direct", value)
	}

	bool use_pass_subsurface_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_subsurface_indirect")
	}

	void use_pass_subsurface_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_subsurface_indirect", value)
	}

	bool use_pass_subsurface_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_subsurface_color")
	}

	void use_pass_subsurface_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_subsurface_color", value)
	}

	std::map<std::string, RenderPass> passes();

	void load_from_file(const std::string filename, int x = 0, int y = 0) {
		PYTHON_FUNCTION_ARGS_CALL("load_from_file", "sii", filename, x, y)
	}
};

class RenderPass : public pyUniplug {
public:
	RenderPass(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderPass() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string channel_id() {
		STRING_TYPE_GETTER("channel_id", resstr)
	}

	void channel_id(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "channel_id", value)
	}

	int channels() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "channels")
	}

	void channels(int value) {
		PRIMITIVE_TYPES_SETTER("i", "channels", value)
	}

	enum render_pass_type_items_enum {
		render_pass_type_items_COMBINED = 1,	
		render_pass_type_items_Z = 2,	
		render_pass_type_items_COLOR = 4,	
		render_pass_type_items_DIFFUSE = 8,	
		render_pass_type_items_SPECULAR = 16,	
		render_pass_type_items_SHADOW = 32,	
		render_pass_type_items_AO = 64,	
		render_pass_type_items_REFLECTION = 128,	
		render_pass_type_items_NORMAL = 256,	
		render_pass_type_items_VECTOR = 512,	
		render_pass_type_items_REFRACTION = 1024,	
		render_pass_type_items_OBJECT_INDEX = 2048,	
		render_pass_type_items_UV = 4096,	
		render_pass_type_items_MIST = 16384,	
		render_pass_type_items_EMIT = 65536,	
		render_pass_type_items_ENVIRONMENT = 131072,	
		render_pass_type_items_MATERIAL_INDEX = 262144,	
		render_pass_type_items_DIFFUSE_DIRECT = 524288,	
		render_pass_type_items_DIFFUSE_INDIRECT = 1048576,	
		render_pass_type_items_DIFFUSE_COLOR = 2097152,	
		render_pass_type_items_GLOSSY_DIRECT = 4194304,	
		render_pass_type_items_GLOSSY_INDIRECT = 8388608,	
		render_pass_type_items_GLOSSY_COLOR = 16777216,	
		render_pass_type_items_TRANSMISSION_DIRECT = 33554432,	
		render_pass_type_items_TRANSMISSION_INDIRECT = 67108864,	
		render_pass_type_items_TRANSMISSION_COLOR = 134217728,	
		render_pass_type_items_SUBSURFACE_DIRECT = 268435456,	
		render_pass_type_items_SUBSURFACE_INDIRECT = 536870912,	
		render_pass_type_items_SUBSURFACE_COLOR = 1073741824	
	};

	std::map<std::string, int> create_string_to_render_pass_type_items() {
		return {{"COMBINED", render_pass_type_items_COMBINED}, {"Z", render_pass_type_items_Z}, {"COLOR", render_pass_type_items_COLOR}, {"DIFFUSE", render_pass_type_items_DIFFUSE}, {"SPECULAR", render_pass_type_items_SPECULAR}, {"SHADOW", render_pass_type_items_SHADOW}, {"AO", render_pass_type_items_AO}, {"REFLECTION", render_pass_type_items_REFLECTION}, {"NORMAL", render_pass_type_items_NORMAL}, {"VECTOR", render_pass_type_items_VECTOR}, {"REFRACTION", render_pass_type_items_REFRACTION}, {"OBJECT_INDEX", render_pass_type_items_OBJECT_INDEX}, {"UV", render_pass_type_items_UV}, {"MIST", render_pass_type_items_MIST}, {"EMIT", render_pass_type_items_EMIT}, {"ENVIRONMENT", render_pass_type_items_ENVIRONMENT}, {"MATERIAL_INDEX", render_pass_type_items_MATERIAL_INDEX}, {"DIFFUSE_DIRECT", render_pass_type_items_DIFFUSE_DIRECT}, {"DIFFUSE_INDIRECT", render_pass_type_items_DIFFUSE_INDIRECT}, {"DIFFUSE_COLOR", render_pass_type_items_DIFFUSE_COLOR}, {"GLOSSY_DIRECT", render_pass_type_items_GLOSSY_DIRECT}, {"GLOSSY_INDIRECT", render_pass_type_items_GLOSSY_INDIRECT}, {"GLOSSY_COLOR", render_pass_type_items_GLOSSY_COLOR}, {"TRANSMISSION_DIRECT", render_pass_type_items_TRANSMISSION_DIRECT}, {"TRANSMISSION_INDIRECT", render_pass_type_items_TRANSMISSION_INDIRECT}, {"TRANSMISSION_COLOR", render_pass_type_items_TRANSMISSION_COLOR}, {"SUBSURFACE_DIRECT", render_pass_type_items_SUBSURFACE_DIRECT}, {"SUBSURFACE_INDIRECT", render_pass_type_items_SUBSURFACE_INDIRECT}, {"SUBSURFACE_COLOR", render_pass_type_items_SUBSURFACE_COLOR}};
	};

	std::map<int, std::string> create_render_pass_type_items_to_string() {
		return {{render_pass_type_items_COMBINED, "COMBINED"}, {render_pass_type_items_Z, "Z"}, {render_pass_type_items_COLOR, "COLOR"}, {render_pass_type_items_DIFFUSE, "DIFFUSE"}, {render_pass_type_items_SPECULAR, "SPECULAR"}, {render_pass_type_items_SHADOW, "SHADOW"}, {render_pass_type_items_AO, "AO"}, {render_pass_type_items_REFLECTION, "REFLECTION"}, {render_pass_type_items_NORMAL, "NORMAL"}, {render_pass_type_items_VECTOR, "VECTOR"}, {render_pass_type_items_REFRACTION, "REFRACTION"}, {render_pass_type_items_OBJECT_INDEX, "OBJECT_INDEX"}, {render_pass_type_items_UV, "UV"}, {render_pass_type_items_MIST, "MIST"}, {render_pass_type_items_EMIT, "EMIT"}, {render_pass_type_items_ENVIRONMENT, "ENVIRONMENT"}, {render_pass_type_items_MATERIAL_INDEX, "MATERIAL_INDEX"}, {render_pass_type_items_DIFFUSE_DIRECT, "DIFFUSE_DIRECT"}, {render_pass_type_items_DIFFUSE_INDIRECT, "DIFFUSE_INDIRECT"}, {render_pass_type_items_DIFFUSE_COLOR, "DIFFUSE_COLOR"}, {render_pass_type_items_GLOSSY_DIRECT, "GLOSSY_DIRECT"}, {render_pass_type_items_GLOSSY_INDIRECT, "GLOSSY_INDIRECT"}, {render_pass_type_items_GLOSSY_COLOR, "GLOSSY_COLOR"}, {render_pass_type_items_TRANSMISSION_DIRECT, "TRANSMISSION_DIRECT"}, {render_pass_type_items_TRANSMISSION_INDIRECT, "TRANSMISSION_INDIRECT"}, {render_pass_type_items_TRANSMISSION_COLOR, "TRANSMISSION_COLOR"}, {render_pass_type_items_SUBSURFACE_DIRECT, "SUBSURFACE_DIRECT"}, {render_pass_type_items_SUBSURFACE_INDIRECT, "SUBSURFACE_INDIRECT"}, {render_pass_type_items_SUBSURFACE_COLOR, "SUBSURFACE_COLOR"}};
	};

	const std::map<std::string, int> string_to_render_pass_type_items = create_string_to_render_pass_type_items();
	const std::map<int, std::string> render_pass_type_items_to_string = create_render_pass_type_items_to_string();

	render_pass_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<render_pass_type_items_enum>(string_to_render_pass_type_items.at(resstr)))
	}

	void type(render_pass_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", render_pass_type_items_to_string.at(value))
	}

	std::vector<float> rect() {
		PRIMITIVE_TYPES_VECTOR_GETTER(float, (float)PyFloat_AsDouble(item), "rect")
	}

	void rect(float values[]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "rect", sizeof(values)/sizeof(values[0]))
	}

	int view_id() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "view_id")
	}

	void view_id(int value) {
		PRIMITIVE_TYPES_SETTER("i", "view_id", value)
	}

	enum render_pass_debug_type_items_enum {
		render_pass_debug_type_items_BVH_TRAVERSAL_STEPS = 0,	
		render_pass_debug_type_items_BVH_TRAVERSED_INSTANCES = 1,	
		render_pass_debug_type_items_RAY_BOUNCES = 2	
	};

	std::map<std::string, int> create_string_to_render_pass_debug_type_items() {
		return {{"BVH_TRAVERSAL_STEPS", render_pass_debug_type_items_BVH_TRAVERSAL_STEPS}, {"BVH_TRAVERSED_INSTANCES", render_pass_debug_type_items_BVH_TRAVERSED_INSTANCES}, {"RAY_BOUNCES", render_pass_debug_type_items_RAY_BOUNCES}};
	};

	std::map<int, std::string> create_render_pass_debug_type_items_to_string() {
		return {{render_pass_debug_type_items_BVH_TRAVERSAL_STEPS, "BVH_TRAVERSAL_STEPS"}, {render_pass_debug_type_items_BVH_TRAVERSED_INSTANCES, "BVH_TRAVERSED_INSTANCES"}, {render_pass_debug_type_items_RAY_BOUNCES, "RAY_BOUNCES"}};
	};

	const std::map<std::string, int> string_to_render_pass_debug_type_items = create_string_to_render_pass_debug_type_items();
	const std::map<int, std::string> render_pass_debug_type_items_to_string = create_render_pass_debug_type_items_to_string();

	render_pass_debug_type_items_enum debug_type() {
		STRING_TYPE_GETTER("debug_type", static_cast<render_pass_debug_type_items_enum>(string_to_render_pass_debug_type_items.at(resstr)))
	}

	void debug_type(render_pass_debug_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "debug_type", render_pass_debug_type_items_to_string.at(value))
	}
};

class BakePixel : public pyUniplug {
public:
	BakePixel(PyObject* pyobj) : pyUniplug(pyobj) {}
	BakePixel() : pyUniplug(0) { }

	int primitive_id() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "primitive_id")
	}

	void primitive_id(int value) {
		PRIMITIVE_TYPES_SETTER("i", "primitive_id", value)
	}

	int object_id() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "object_id")
	}

	void object_id(int value) {
		PRIMITIVE_TYPES_SETTER("i", "object_id", value)
	}

	VFLOAT2 uv() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv", 2)
	}

	void uv(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv", 2)
	}

	float du_dx() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "du_dx")
	}

	void du_dx(float value) {
		PRIMITIVE_TYPES_SETTER("f", "du_dx", value)
	}

	float du_dy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "du_dy")
	}

	void du_dy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "du_dy", value)
	}

	float dv_dx() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dv_dx")
	}

	void dv_dx(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dv_dx", value)
	}

	float dv_dy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dv_dy")
	}

	void dv_dy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dv_dy", value)
	}

	BakePixel next() {
		CLASS_TYPES_GETTER(BakePixel, "next")
	}
};

class RigidBodyWorld : public pyUniplug {
public:
	RigidBodyWorld(PyObject* pyobj) : pyUniplug(pyobj) {}
	RigidBodyWorld() : pyUniplug(0) { }

	Group group() {
		CLASS_TYPES_GETTER(Group, "group")
	}

	Group constraints() {
		CLASS_TYPES_GETTER(Group, "constraints")
	}

	bool enabled() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "enabled")
	}

	void enabled(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "enabled", value)
	}

	float time_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_scale")
	}

	void time_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_scale", value)
	}

	int steps_per_second() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "steps_per_second")
	}

	void steps_per_second(int value) {
		PRIMITIVE_TYPES_SETTER("i", "steps_per_second", value)
	}

	int solver_iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "solver_iterations")
	}

	void solver_iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "solver_iterations", value)
	}

	bool use_split_impulse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_split_impulse")
	}

	void use_split_impulse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_split_impulse", value)
	}

	PointCache point_cache() {
		CLASS_TYPES_GETTER(PointCache, "point_cache")
	}

	EffectorWeights effector_weights() {
		CLASS_TYPES_GETTER(EffectorWeights, "effector_weights")
	}

	struct convex_sweep_test_result {
		VFLOAT3 object_location;	/**< The hit location of this sweep test */
		VFLOAT3 hitpoint;	/**< The hit location of this sweep test */
		VFLOAT3 normal;	/**< The face normal at the sweep test hit location */
		int has_hit;	/**< If the function has found collision point, value is 1, otherwise 0 */
	};

	convex_sweep_test_result convex_sweep_test(Object object_value, VFLOAT3 start, VFLOAT3 end) {
		ARRAY_TO_PYOBJ(start, "O", 3)
		ARRAY_TO_PYOBJ(end, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("convex_sweep_test", "OOO", object_value.get_pyobjref(), start_tupleval, end_tupleval)
		DECREF_ARRAY_ITEMS(start, 3)
		DECREF_ARRAY_ITEMS(end, 3)
		CREATE_MULTIPLE_PYOBJS(*object_location_obj, *hitpoint_obj, *normal_obj, *has_hit_obj)
		UNPACK_TUPLE_TO_OBJS("convex_sweep_test", 4, &object_location_obj, &hitpoint_obj, &normal_obj, &has_hit_obj)
		POD_VECTOR_TYPES_CONV(object_location, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(hitpoint, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(normal, FLOAT, (float)PyFloat_AsDouble(item), 3)
		PRIMITIVE_TYPES_CONV(has_hit, int, PyLong_AsLong(has_hit_obj))
		NONCLASS_TYPES_RETURN(object_location_res, hitpoint_res, normal_res, has_hit_res)
	}
};

class RigidBodyObject : public pyUniplug {
public:
	RigidBodyObject(PyObject* pyobj) : pyUniplug(pyobj) {}
	RigidBodyObject() : pyUniplug(0) { }

	enum rigidbody_object_type_items_enum {
		rigidbody_object_type_items_ACTIVE = 0,	
		rigidbody_object_type_items_PASSIVE = 1	
	};

	std::map<std::string, int> create_string_to_rigidbody_object_type_items() {
		return {{"ACTIVE", rigidbody_object_type_items_ACTIVE}, {"PASSIVE", rigidbody_object_type_items_PASSIVE}};
	};

	std::map<int, std::string> create_rigidbody_object_type_items_to_string() {
		return {{rigidbody_object_type_items_ACTIVE, "ACTIVE"}, {rigidbody_object_type_items_PASSIVE, "PASSIVE"}};
	};

	const std::map<std::string, int> string_to_rigidbody_object_type_items = create_string_to_rigidbody_object_type_items();
	const std::map<int, std::string> rigidbody_object_type_items_to_string = create_rigidbody_object_type_items_to_string();

	rigidbody_object_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<rigidbody_object_type_items_enum>(string_to_rigidbody_object_type_items.at(resstr)))
	}

	void type(rigidbody_object_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", rigidbody_object_type_items_to_string.at(value))
	}

	enum rigidbody_mesh_source_items_enum {
		rigidbody_mesh_source_items_BASE = 0,	
		rigidbody_mesh_source_items_DEFORM = 1,	
		rigidbody_mesh_source_items_FINAL = 2	
	};

	std::map<std::string, int> create_string_to_rigidbody_mesh_source_items() {
		return {{"BASE", rigidbody_mesh_source_items_BASE}, {"DEFORM", rigidbody_mesh_source_items_DEFORM}, {"FINAL", rigidbody_mesh_source_items_FINAL}};
	};

	std::map<int, std::string> create_rigidbody_mesh_source_items_to_string() {
		return {{rigidbody_mesh_source_items_BASE, "BASE"}, {rigidbody_mesh_source_items_DEFORM, "DEFORM"}, {rigidbody_mesh_source_items_FINAL, "FINAL"}};
	};

	const std::map<std::string, int> string_to_rigidbody_mesh_source_items = create_string_to_rigidbody_mesh_source_items();
	const std::map<int, std::string> rigidbody_mesh_source_items_to_string = create_rigidbody_mesh_source_items_to_string();

	rigidbody_mesh_source_items_enum mesh_source() {
		STRING_TYPE_GETTER("mesh_source", static_cast<rigidbody_mesh_source_items_enum>(string_to_rigidbody_mesh_source_items.at(resstr)))
	}

	void mesh_source(rigidbody_mesh_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mesh_source", rigidbody_mesh_source_items_to_string.at(value))
	}

	bool enabled() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "enabled")
	}

	void enabled(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "enabled", value)
	}

	enum rigidbody_object_shape_items_enum {
		rigidbody_object_shape_items_BOX = 0,	
		rigidbody_object_shape_items_SPHERE = 1,	
		rigidbody_object_shape_items_CAPSULE = 2,	
		rigidbody_object_shape_items_CYLINDER = 3,	
		rigidbody_object_shape_items_CONE = 4,	
		rigidbody_object_shape_items_CONVEX_HULL = 5,	
		rigidbody_object_shape_items_MESH = 6	
	};

	std::map<std::string, int> create_string_to_rigidbody_object_shape_items() {
		return {{"BOX", rigidbody_object_shape_items_BOX}, {"SPHERE", rigidbody_object_shape_items_SPHERE}, {"CAPSULE", rigidbody_object_shape_items_CAPSULE}, {"CYLINDER", rigidbody_object_shape_items_CYLINDER}, {"CONE", rigidbody_object_shape_items_CONE}, {"CONVEX_HULL", rigidbody_object_shape_items_CONVEX_HULL}, {"MESH", rigidbody_object_shape_items_MESH}};
	};

	std::map<int, std::string> create_rigidbody_object_shape_items_to_string() {
		return {{rigidbody_object_shape_items_BOX, "BOX"}, {rigidbody_object_shape_items_SPHERE, "SPHERE"}, {rigidbody_object_shape_items_CAPSULE, "CAPSULE"}, {rigidbody_object_shape_items_CYLINDER, "CYLINDER"}, {rigidbody_object_shape_items_CONE, "CONE"}, {rigidbody_object_shape_items_CONVEX_HULL, "CONVEX_HULL"}, {rigidbody_object_shape_items_MESH, "MESH"}};
	};

	const std::map<std::string, int> string_to_rigidbody_object_shape_items = create_string_to_rigidbody_object_shape_items();
	const std::map<int, std::string> rigidbody_object_shape_items_to_string = create_rigidbody_object_shape_items_to_string();

	rigidbody_object_shape_items_enum collision_shape() {
		STRING_TYPE_GETTER("collision_shape", static_cast<rigidbody_object_shape_items_enum>(string_to_rigidbody_object_shape_items.at(resstr)))
	}

	void collision_shape(rigidbody_object_shape_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "collision_shape", rigidbody_object_shape_items_to_string.at(value))
	}

	bool kinematic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "kinematic")
	}

	void kinematic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "kinematic", value)
	}

	bool use_deform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deform")
	}

	void use_deform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deform", value)
	}

	float mass() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mass")
	}

	void mass(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mass", value)
	}

	bool use_deactivation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deactivation")
	}

	void use_deactivation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deactivation", value)
	}

	bool use_start_deactivated() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_start_deactivated")
	}

	void use_start_deactivated(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_start_deactivated", value)
	}

	float deactivate_linear_velocity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "deactivate_linear_velocity")
	}

	void deactivate_linear_velocity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "deactivate_linear_velocity", value)
	}

	float deactivate_angular_velocity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "deactivate_angular_velocity")
	}

	void deactivate_angular_velocity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "deactivate_angular_velocity", value)
	}

	float linear_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "linear_damping")
	}

	void linear_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "linear_damping", value)
	}

	float angular_damping() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angular_damping")
	}

	void angular_damping(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angular_damping", value)
	}

	float friction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "friction")
	}

	void friction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "friction", value)
	}

	float restitution() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "restitution")
	}

	void restitution(float value) {
		PRIMITIVE_TYPES_SETTER("f", "restitution", value)
	}

	bool use_margin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_margin")
	}

	void use_margin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_margin", value)
	}

	float collision_margin() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "collision_margin")
	}

	void collision_margin(float value) {
		PRIMITIVE_TYPES_SETTER("f", "collision_margin", value)
	}

	std::array<bool, 20> collision_groups() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "collision_groups", 20)
	}

	void collision_groups(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "collision_groups", 20)
	}
};

class RigidBodyConstraint : public pyUniplug {
public:
	RigidBodyConstraint(PyObject* pyobj) : pyUniplug(pyobj) {}
	RigidBodyConstraint() : pyUniplug(0) { }

	enum rigidbody_constraint_type_items_enum {
		rigidbody_constraint_type_items_FIXED = 8,	
		rigidbody_constraint_type_items_POINT = 0,	
		rigidbody_constraint_type_items_HINGE = 1,	
		rigidbody_constraint_type_items_SLIDER = 3,	
		rigidbody_constraint_type_items_PISTON = 9,	
		rigidbody_constraint_type_items_GENERIC = 5,	
		rigidbody_constraint_type_items_GENERIC_SPRING = 6,	
		rigidbody_constraint_type_items_MOTOR = 11	
	};

	std::map<std::string, int> create_string_to_rigidbody_constraint_type_items() {
		return {{"FIXED", rigidbody_constraint_type_items_FIXED}, {"POINT", rigidbody_constraint_type_items_POINT}, {"HINGE", rigidbody_constraint_type_items_HINGE}, {"SLIDER", rigidbody_constraint_type_items_SLIDER}, {"PISTON", rigidbody_constraint_type_items_PISTON}, {"GENERIC", rigidbody_constraint_type_items_GENERIC}, {"GENERIC_SPRING", rigidbody_constraint_type_items_GENERIC_SPRING}, {"MOTOR", rigidbody_constraint_type_items_MOTOR}};
	};

	std::map<int, std::string> create_rigidbody_constraint_type_items_to_string() {
		return {{rigidbody_constraint_type_items_FIXED, "FIXED"}, {rigidbody_constraint_type_items_POINT, "POINT"}, {rigidbody_constraint_type_items_HINGE, "HINGE"}, {rigidbody_constraint_type_items_SLIDER, "SLIDER"}, {rigidbody_constraint_type_items_PISTON, "PISTON"}, {rigidbody_constraint_type_items_GENERIC, "GENERIC"}, {rigidbody_constraint_type_items_GENERIC_SPRING, "GENERIC_SPRING"}, {rigidbody_constraint_type_items_MOTOR, "MOTOR"}};
	};

	const std::map<std::string, int> string_to_rigidbody_constraint_type_items = create_string_to_rigidbody_constraint_type_items();
	const std::map<int, std::string> rigidbody_constraint_type_items_to_string = create_rigidbody_constraint_type_items_to_string();

	rigidbody_constraint_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<rigidbody_constraint_type_items_enum>(string_to_rigidbody_constraint_type_items.at(resstr)))
	}

	void type(rigidbody_constraint_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", rigidbody_constraint_type_items_to_string.at(value))
	}

	bool enabled() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "enabled")
	}

	void enabled(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "enabled", value)
	}

	bool disable_collisions() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "disable_collisions")
	}

	void disable_collisions(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "disable_collisions", value)
	}

	Object object1() {
		CLASS_TYPES_GETTER(Object, "object1")
	}

	Object object2() {
		CLASS_TYPES_GETTER(Object, "object2")
	}

	bool use_breaking() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_breaking")
	}

	void use_breaking(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_breaking", value)
	}

	float breaking_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "breaking_threshold")
	}

	void breaking_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "breaking_threshold", value)
	}

	bool use_override_solver_iterations() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_override_solver_iterations")
	}

	void use_override_solver_iterations(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_override_solver_iterations", value)
	}

	int solver_iterations() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "solver_iterations")
	}

	void solver_iterations(int value) {
		PRIMITIVE_TYPES_SETTER("i", "solver_iterations", value)
	}

	bool use_limit_lin_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_lin_x")
	}

	void use_limit_lin_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_lin_x", value)
	}

	bool use_limit_lin_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_lin_y")
	}

	void use_limit_lin_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_lin_y", value)
	}

	bool use_limit_lin_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_lin_z")
	}

	void use_limit_lin_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_lin_z", value)
	}

	bool use_limit_ang_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_ang_x")
	}

	void use_limit_ang_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_ang_x", value)
	}

	bool use_limit_ang_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_ang_y")
	}

	void use_limit_ang_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_ang_y", value)
	}

	bool use_limit_ang_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limit_ang_z")
	}

	void use_limit_ang_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limit_ang_z", value)
	}

	bool use_spring_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_spring_x")
	}

	void use_spring_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_spring_x", value)
	}

	bool use_spring_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_spring_y")
	}

	void use_spring_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_spring_y", value)
	}

	bool use_spring_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_spring_z")
	}

	void use_spring_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_spring_z", value)
	}

	bool use_motor_lin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_motor_lin")
	}

	void use_motor_lin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_motor_lin", value)
	}

	bool use_motor_ang() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_motor_ang")
	}

	void use_motor_ang(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_motor_ang", value)
	}

	float limit_lin_x_lower() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_lin_x_lower")
	}

	void limit_lin_x_lower(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_lin_x_lower", value)
	}

	float limit_lin_x_upper() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_lin_x_upper")
	}

	void limit_lin_x_upper(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_lin_x_upper", value)
	}

	float limit_lin_y_lower() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_lin_y_lower")
	}

	void limit_lin_y_lower(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_lin_y_lower", value)
	}

	float limit_lin_y_upper() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_lin_y_upper")
	}

	void limit_lin_y_upper(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_lin_y_upper", value)
	}

	float limit_lin_z_lower() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_lin_z_lower")
	}

	void limit_lin_z_lower(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_lin_z_lower", value)
	}

	float limit_lin_z_upper() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_lin_z_upper")
	}

	void limit_lin_z_upper(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_lin_z_upper", value)
	}

	float limit_ang_x_lower() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_ang_x_lower")
	}

	void limit_ang_x_lower(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_ang_x_lower", value)
	}

	float limit_ang_x_upper() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_ang_x_upper")
	}

	void limit_ang_x_upper(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_ang_x_upper", value)
	}

	float limit_ang_y_lower() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_ang_y_lower")
	}

	void limit_ang_y_lower(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_ang_y_lower", value)
	}

	float limit_ang_y_upper() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_ang_y_upper")
	}

	void limit_ang_y_upper(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_ang_y_upper", value)
	}

	float limit_ang_z_lower() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_ang_z_lower")
	}

	void limit_ang_z_lower(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_ang_z_lower", value)
	}

	float limit_ang_z_upper() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "limit_ang_z_upper")
	}

	void limit_ang_z_upper(float value) {
		PRIMITIVE_TYPES_SETTER("f", "limit_ang_z_upper", value)
	}

	float spring_stiffness_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_stiffness_x")
	}

	void spring_stiffness_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_stiffness_x", value)
	}

	float spring_stiffness_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_stiffness_y")
	}

	void spring_stiffness_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_stiffness_y", value)
	}

	float spring_stiffness_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_stiffness_z")
	}

	void spring_stiffness_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_stiffness_z", value)
	}

	float spring_damping_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_damping_x")
	}

	void spring_damping_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_damping_x", value)
	}

	float spring_damping_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_damping_y")
	}

	void spring_damping_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_damping_y", value)
	}

	float spring_damping_z() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "spring_damping_z")
	}

	void spring_damping_z(float value) {
		PRIMITIVE_TYPES_SETTER("f", "spring_damping_z", value)
	}

	float motor_lin_target_velocity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motor_lin_target_velocity")
	}

	void motor_lin_target_velocity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motor_lin_target_velocity", value)
	}

	float motor_lin_max_impulse() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motor_lin_max_impulse")
	}

	void motor_lin_max_impulse(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motor_lin_max_impulse", value)
	}

	float motor_ang_target_velocity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motor_ang_target_velocity")
	}

	void motor_ang_target_velocity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motor_ang_target_velocity", value)
	}

	float motor_ang_max_impulse() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motor_ang_max_impulse")
	}

	void motor_ang_max_impulse(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motor_ang_max_impulse", value)
	}
};

class Scene : public ID {
public:
	Scene(PyObject* pyobj) : ID(pyobj) {}
	Scene() : ID(0) { }

	Object camera() {
		CLASS_TYPES_GETTER(Object, "camera")
	}

	Scene background_set() {
		CLASS_TYPES_GETTER(Scene, "background_set")
	}

	World world();

	VFLOAT3 cursor_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor_location", 3)
	}

	void cursor_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor_location", 3)
	}

	std::map<std::string, ObjectBase> object_bases() {
		MAP_TYPE_GETTER("object_bases", ObjectBase)
	}

	std::map<std::string, Object> objects() {
		MAP_TYPE_GETTER("objects", Object)
	}

	std::array<bool, 20> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 20)
	}

	void layers(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 20)
	}

	int active_layer() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_layer")
	}

	void active_layer(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_layer", value)
	}

	int frame_current() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_current")
	}

	void frame_current(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_current", value)
	}

	float frame_subframe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_subframe")
	}

	void frame_subframe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_subframe", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	int frame_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_step")
	}

	void frame_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_step", value)
	}

	float frame_current_final() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "frame_current_final")
	}

	void frame_current_final(float value) {
		PRIMITIVE_TYPES_SETTER("f", "frame_current_final", value)
	}

	bool lock_frame_selection_to_range() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_frame_selection_to_range")
	}

	void lock_frame_selection_to_range(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_frame_selection_to_range", value)
	}

	bool use_preview_range() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preview_range")
	}

	void use_preview_range(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preview_range", value)
	}

	int frame_preview_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_preview_start")
	}

	void frame_preview_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_preview_start", value)
	}

	int frame_preview_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_preview_end")
	}

	void frame_preview_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_preview_end", value)
	}

	bool show_keys_from_selected_only() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_keys_from_selected_only")
	}

	void show_keys_from_selected_only(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_keys_from_selected_only", value)
	}

	std::string use_stamp_note() {
		STRING_TYPE_GETTER("use_stamp_note", resstr)
	}

	void use_stamp_note(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "use_stamp_note", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	bool is_nla_tweakmode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_nla_tweakmode")
	}

	void is_nla_tweakmode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_nla_tweakmode", value)
	}

	bool use_frame_drop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_frame_drop")
	}

	void use_frame_drop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_frame_drop", value)
	}

	enum sync_mode_items_enum {
		sync_mode_items_NONE = 0,	
		sync_mode_items_FRAME_DROP = 8,	
		sync_mode_items_AUDIO_SYNC = 2	
	};

	std::map<std::string, int> create_string_to_sync_mode_items() {
		return {{"NONE", sync_mode_items_NONE}, {"FRAME_DROP", sync_mode_items_FRAME_DROP}, {"AUDIO_SYNC", sync_mode_items_AUDIO_SYNC}};
	};

	std::map<int, std::string> create_sync_mode_items_to_string() {
		return {{sync_mode_items_NONE, "NONE"}, {sync_mode_items_FRAME_DROP, "FRAME_DROP"}, {sync_mode_items_AUDIO_SYNC, "AUDIO_SYNC"}};
	};

	const std::map<std::string, int> string_to_sync_mode_items = create_string_to_sync_mode_items();
	const std::map<int, std::string> sync_mode_items_to_string = create_sync_mode_items_to_string();

	sync_mode_items_enum sync_mode() {
		STRING_TYPE_GETTER("sync_mode", static_cast<sync_mode_items_enum>(string_to_sync_mode_items.at(resstr)))
	}

	void sync_mode(sync_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sync_mode", sync_mode_items_to_string.at(value))
	}

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	bool use_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_nodes")
	}

	void use_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_nodes", value)
	}

	SequenceEditor sequence_editor();

	std::map<std::string, KeyingSet> keying_sets() {
		MAP_TYPE_GETTER("keying_sets", KeyingSet)
	}

	std::map<std::string, KeyingSet> keying_sets_all() {
		MAP_TYPE_GETTER("keying_sets_all", KeyingSet)
	}

	RigidBodyWorld rigidbody_world() {
		CLASS_TYPES_GETTER(RigidBodyWorld, "rigidbody_world")
	}

	ToolSettings tool_settings();

	UnitSettings unit_settings();

	VFLOAT3 gravity() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gravity", 3)
	}

	void gravity(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gravity", 3)
	}

	bool use_gravity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_gravity")
	}

	void use_gravity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_gravity", value)
	}

	RenderSettings render();

	DisplaySafeAreas safe_areas();

	std::map<std::string, TimelineMarker> timeline_markers();

	bool use_audio() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_audio")
	}

	void use_audio(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_audio", value)
	}

	bool use_audio_sync() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_audio_sync")
	}

	void use_audio_sync(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_audio_sync", value)
	}

	bool use_audio_scrub() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_audio_scrub")
	}

	void use_audio_scrub(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_audio_scrub", value)
	}

	float audio_doppler_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "audio_doppler_speed")
	}

	void audio_doppler_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "audio_doppler_speed", value)
	}

	float audio_doppler_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "audio_doppler_factor")
	}

	void audio_doppler_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "audio_doppler_factor", value)
	}

	enum audio_distance_model_items_enum {
		audio_distance_model_items_NONE = 0,	
		audio_distance_model_items_INVERSE = 1,	
		audio_distance_model_items_INVERSE_CLAMPED = 2,	
		audio_distance_model_items_LINEAR = 3,	
		audio_distance_model_items_LINEAR_CLAMPED = 4,	
		audio_distance_model_items_EXPONENT = 5,	
		audio_distance_model_items_EXPONENT_CLAMPED = 6	
	};

	std::map<std::string, int> create_string_to_audio_distance_model_items() {
		return {{"NONE", audio_distance_model_items_NONE}, {"INVERSE", audio_distance_model_items_INVERSE}, {"INVERSE_CLAMPED", audio_distance_model_items_INVERSE_CLAMPED}, {"LINEAR", audio_distance_model_items_LINEAR}, {"LINEAR_CLAMPED", audio_distance_model_items_LINEAR_CLAMPED}, {"EXPONENT", audio_distance_model_items_EXPONENT}, {"EXPONENT_CLAMPED", audio_distance_model_items_EXPONENT_CLAMPED}};
	};

	std::map<int, std::string> create_audio_distance_model_items_to_string() {
		return {{audio_distance_model_items_NONE, "NONE"}, {audio_distance_model_items_INVERSE, "INVERSE"}, {audio_distance_model_items_INVERSE_CLAMPED, "INVERSE_CLAMPED"}, {audio_distance_model_items_LINEAR, "LINEAR"}, {audio_distance_model_items_LINEAR_CLAMPED, "LINEAR_CLAMPED"}, {audio_distance_model_items_EXPONENT, "EXPONENT"}, {audio_distance_model_items_EXPONENT_CLAMPED, "EXPONENT_CLAMPED"}};
	};

	const std::map<std::string, int> string_to_audio_distance_model_items = create_string_to_audio_distance_model_items();
	const std::map<int, std::string> audio_distance_model_items_to_string = create_audio_distance_model_items_to_string();

	audio_distance_model_items_enum audio_distance_model() {
		STRING_TYPE_GETTER("audio_distance_model", static_cast<audio_distance_model_items_enum>(string_to_audio_distance_model_items.at(resstr)))
	}

	void audio_distance_model(audio_distance_model_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_distance_model", audio_distance_model_items_to_string.at(value))
	}

	float audio_volume() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "audio_volume")
	}

	void audio_volume(float value) {
		PRIMITIVE_TYPES_SETTER("f", "audio_volume", value)
	}

	SceneGameData game_settings();

	GreasePencil grease_pencil() {
		CLASS_TYPES_GETTER(GreasePencil, "grease_pencil")
	}

	std::map<std::string, TransformOrientation> orientations();

	MovieClip active_clip();

	ColorManagedViewSettings view_settings() {
		CLASS_TYPES_GETTER(ColorManagedViewSettings, "view_settings")
	}

	ColorManagedDisplaySettings display_settings() {
		CLASS_TYPES_GETTER(ColorManagedDisplaySettings, "display_settings")
	}

	ColorManagedSequencerColorspaceSettings sequencer_colorspace_settings() {
		CLASS_TYPES_GETTER(ColorManagedSequencerColorspaceSettings, "sequencer_colorspace_settings")
	}

	Depsgraph depsgraph() {
		CLASS_TYPES_GETTER(Depsgraph, "depsgraph")
	}

	SequenceEditor sequence_editor_create();

	void sequence_editor_clear() {
		PYTHON_FUNCTION_CALL("sequence_editor_clear")
	}

	const std::string statistics() {
		PYTHON_FUNCTION_CALL("statistics")
		CREATE_SINGLE_PYOBJ(statistics)
		STRING_TYPE_CONV(statistics)
		NONCLASS_TYPES_RETURN(statistics_res)
	}

	void frame_set(int frame, float subframe = 0.0f) {
		PYTHON_FUNCTION_ARGS_CALL("frame_set", "if", frame, subframe)
	}

	void update() {
		PYTHON_FUNCTION_CALL("update")
	}

	VFLOAT2 uvedit_aspect(Object object_value) {
		PYTHON_FUNCTION_ARGS_CALL("uvedit_aspect", "O", object_value.get_pyobjref())
		CREATE_SINGLE_PYOBJ(result)
		POD_VECTOR_TYPES_CONV(result, FLOAT, (float)PyFloat_AsDouble(item), 2)
		NONCLASS_TYPES_RETURN(result_res)
	}

	struct ray_cast_result {
		bool result;
		Object object_value;	/**< Ray cast object */
		VFLOAT16 matrix;	/**< Matrix */
		VFLOAT3 location;	/**< The hit location of this ray cast */
		VFLOAT3 normal;	/**< The face normal at the ray cast hit location */
	};

	ray_cast_result ray_cast(VFLOAT3 start, VFLOAT3 end) {
		ARRAY_TO_PYOBJ(start, "O", 3)
		ARRAY_TO_PYOBJ(end, "O", 3)
		PYTHON_FUNCTION_ARGS_CALL("ray_cast", "OO", start_tupleval, end_tupleval)
		DECREF_ARRAY_ITEMS(start, 3)
		DECREF_ARRAY_ITEMS(end, 3)
		CREATE_MULTIPLE_PYOBJS(*result_obj, *object_value_obj, *matrix_obj, *location_obj, *normal_obj)
		UNPACK_TUPLE_TO_OBJS("ray_cast", 5, &result_obj, &object_value_obj, &matrix_obj, &location_obj, &normal_obj)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		CLASS_TYPES_CONV(object_value, Object)
		POD_VECTOR_TYPES_CONV(matrix, FLOAT, (float)PyFloat_AsDouble(item), 16)
		POD_VECTOR_TYPES_CONV(location, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(normal, FLOAT, (float)PyFloat_AsDouble(item), 3)
		NONCLASS_TYPES_RETURN(result_res, object_value_res, matrix_res, location_res, normal_res)
	}

	void collada_export(const std::string filepath, bool apply_modifiers = false, int export_mesh_type = 0, bool selected = false, bool include_children = false, bool include_armatures = false, bool include_shapekeys = false, bool deform_bones_only = false, bool active_uv_only = false, bool include_uv_textures = false, bool include_material_textures = false, bool use_texture_copies = false, bool use_ngons = true, bool use_object_instantiation = true, bool sort_by_name = false, bool open_sim = false, int export_transformation_type = 0) {
		PYTHON_FUNCTION_ARGS_CALL("collada_export", "siiiiiiiiiiiiiiii", filepath, apply_modifiers, export_mesh_type, selected, include_children, include_armatures, include_shapekeys, deform_bones_only, active_uv_only, include_uv_textures, include_material_textures, use_texture_copies, use_ngons, use_object_instantiation, sort_by_name, open_sim, export_transformation_type)
	}
};

class ToolSettings : public pyUniplug {
public:
	ToolSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ToolSettings() : pyUniplug(0) { }

	Sculpt sculpt();

	bool use_auto_normalize() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_normalize")
	}

	void use_auto_normalize(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_normalize", value)
	}

	bool use_multipaint() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multipaint")
	}

	void use_multipaint(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multipaint", value)
	}

	enum draw_groupuser_items_enum {
		draw_groupuser_items_NONE = 0,	
		draw_groupuser_items_ACTIVE = 1,	
		draw_groupuser_items_ALL = 2	
	};

	std::map<std::string, int> create_string_to_draw_groupuser_items() {
		return {{"NONE", draw_groupuser_items_NONE}, {"ACTIVE", draw_groupuser_items_ACTIVE}, {"ALL", draw_groupuser_items_ALL}};
	};

	std::map<int, std::string> create_draw_groupuser_items_to_string() {
		return {{draw_groupuser_items_NONE, "NONE"}, {draw_groupuser_items_ACTIVE, "ACTIVE"}, {draw_groupuser_items_ALL, "ALL"}};
	};

	const std::map<std::string, int> string_to_draw_groupuser_items = create_string_to_draw_groupuser_items();
	const std::map<int, std::string> draw_groupuser_items_to_string = create_draw_groupuser_items_to_string();

	draw_groupuser_items_enum vertex_group_user() {
		STRING_TYPE_GETTER("vertex_group_user", static_cast<draw_groupuser_items_enum>(string_to_draw_groupuser_items.at(resstr)))
	}

	void vertex_group_user(draw_groupuser_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_user", draw_groupuser_items_to_string.at(value))
	}

	enum vertex_group_select_items_enum {
		vertex_group_select_items_ALL = 0,	
		vertex_group_select_items_BONE_DEFORM = 3,	
		vertex_group_select_items_OTHER_DEFORM = 4	
	};

	std::map<std::string, int> create_string_to_vertex_group_select_items() {
		return {{"ALL", vertex_group_select_items_ALL}, {"BONE_DEFORM", vertex_group_select_items_BONE_DEFORM}, {"OTHER_DEFORM", vertex_group_select_items_OTHER_DEFORM}};
	};

	std::map<int, std::string> create_vertex_group_select_items_to_string() {
		return {{vertex_group_select_items_ALL, "ALL"}, {vertex_group_select_items_BONE_DEFORM, "BONE_DEFORM"}, {vertex_group_select_items_OTHER_DEFORM, "OTHER_DEFORM"}};
	};

	const std::map<std::string, int> string_to_vertex_group_select_items = create_string_to_vertex_group_select_items();
	const std::map<int, std::string> vertex_group_select_items_to_string = create_vertex_group_select_items_to_string();

	vertex_group_select_items_enum vertex_group_subset() {
		STRING_TYPE_GETTER("vertex_group_subset", static_cast<vertex_group_select_items_enum>(string_to_vertex_group_select_items.at(resstr)))
	}

	void vertex_group_subset(vertex_group_select_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vertex_group_subset", vertex_group_select_items_to_string.at(value))
	}

	VertexPaint vertex_paint();

	VertexPaint weight_paint();

	ImagePaint image_paint();

	UvSculpt uv_sculpt();

	ParticleEdit particle_edit();

	bool use_uv_sculpt() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_uv_sculpt")
	}

	void use_uv_sculpt(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_uv_sculpt", value)
	}

	bool uv_sculpt_lock_borders() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "uv_sculpt_lock_borders")
	}

	void uv_sculpt_lock_borders(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "uv_sculpt_lock_borders", value)
	}

	bool uv_sculpt_all_islands() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "uv_sculpt_all_islands")
	}

	void uv_sculpt_all_islands(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "uv_sculpt_all_islands", value)
	}

	enum uv_sculpt_tool_items_enum {
		uv_sculpt_tool_items_PINCH = 1,	
		uv_sculpt_tool_items_RELAX = 2,	
		uv_sculpt_tool_items_GRAB = 3	
	};

	std::map<std::string, int> create_string_to_uv_sculpt_tool_items() {
		return {{"PINCH", uv_sculpt_tool_items_PINCH}, {"RELAX", uv_sculpt_tool_items_RELAX}, {"GRAB", uv_sculpt_tool_items_GRAB}};
	};

	std::map<int, std::string> create_uv_sculpt_tool_items_to_string() {
		return {{uv_sculpt_tool_items_PINCH, "PINCH"}, {uv_sculpt_tool_items_RELAX, "RELAX"}, {uv_sculpt_tool_items_GRAB, "GRAB"}};
	};

	const std::map<std::string, int> string_to_uv_sculpt_tool_items = create_string_to_uv_sculpt_tool_items();
	const std::map<int, std::string> uv_sculpt_tool_items_to_string = create_uv_sculpt_tool_items_to_string();

	uv_sculpt_tool_items_enum uv_sculpt_tool() {
		STRING_TYPE_GETTER("uv_sculpt_tool", static_cast<uv_sculpt_tool_items_enum>(string_to_uv_sculpt_tool_items.at(resstr)))
	}

	void uv_sculpt_tool(uv_sculpt_tool_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_sculpt_tool", uv_sculpt_tool_items_to_string.at(value))
	}

	enum uv_sculpt_relaxation_items_enum {
		uv_sculpt_relaxation_items_LAPLACIAN = 1,	
		uv_sculpt_relaxation_items_HC = 2	
	};

	std::map<std::string, int> create_string_to_uv_sculpt_relaxation_items() {
		return {{"LAPLACIAN", uv_sculpt_relaxation_items_LAPLACIAN}, {"HC", uv_sculpt_relaxation_items_HC}};
	};

	std::map<int, std::string> create_uv_sculpt_relaxation_items_to_string() {
		return {{uv_sculpt_relaxation_items_LAPLACIAN, "LAPLACIAN"}, {uv_sculpt_relaxation_items_HC, "HC"}};
	};

	const std::map<std::string, int> string_to_uv_sculpt_relaxation_items = create_string_to_uv_sculpt_relaxation_items();
	const std::map<int, std::string> uv_sculpt_relaxation_items_to_string = create_uv_sculpt_relaxation_items_to_string();

	uv_sculpt_relaxation_items_enum uv_relax_method() {
		STRING_TYPE_GETTER("uv_relax_method", static_cast<uv_sculpt_relaxation_items_enum>(string_to_uv_sculpt_relaxation_items.at(resstr)))
	}

	void uv_relax_method(uv_sculpt_relaxation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_relax_method", uv_sculpt_relaxation_items_to_string.at(value))
	}

	enum proportional_editing_items_enum {
		proportional_editing_items_DISABLED = 0,	
		proportional_editing_items_ENABLED = 1,	
		proportional_editing_items_PROJECTED = 3,	
		proportional_editing_items_CONNECTED = 2	
	};

	std::map<std::string, int> create_string_to_proportional_editing_items() {
		return {{"DISABLED", proportional_editing_items_DISABLED}, {"ENABLED", proportional_editing_items_ENABLED}, {"PROJECTED", proportional_editing_items_PROJECTED}, {"CONNECTED", proportional_editing_items_CONNECTED}};
	};

	std::map<int, std::string> create_proportional_editing_items_to_string() {
		return {{proportional_editing_items_DISABLED, "DISABLED"}, {proportional_editing_items_ENABLED, "ENABLED"}, {proportional_editing_items_PROJECTED, "PROJECTED"}, {proportional_editing_items_CONNECTED, "CONNECTED"}};
	};

	const std::map<std::string, int> string_to_proportional_editing_items = create_string_to_proportional_editing_items();
	const std::map<int, std::string> proportional_editing_items_to_string = create_proportional_editing_items_to_string();

	proportional_editing_items_enum proportional_edit() {
		STRING_TYPE_GETTER("proportional_edit", static_cast<proportional_editing_items_enum>(string_to_proportional_editing_items.at(resstr)))
	}

	void proportional_edit(proportional_editing_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proportional_edit", proportional_editing_items_to_string.at(value))
	}

	bool use_proportional_edit_objects() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proportional_edit_objects")
	}

	void use_proportional_edit_objects(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proportional_edit_objects", value)
	}

	bool use_proportional_edit_mask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proportional_edit_mask")
	}

	void use_proportional_edit_mask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proportional_edit_mask", value)
	}

	bool use_proportional_action() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proportional_action")
	}

	void use_proportional_action(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proportional_action", value)
	}

	bool use_proportional_fcurve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proportional_fcurve")
	}

	void use_proportional_fcurve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proportional_fcurve", value)
	}

	bool lock_markers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_markers")
	}

	void lock_markers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_markers", value)
	}

	enum proportional_falloff_items_enum {
		proportional_falloff_items_SMOOTH = 0,	
		proportional_falloff_items_SPHERE = 1,	
		proportional_falloff_items_ROOT = 2,	
		proportional_falloff_items_INVERSE_SQUARE = 7,	
		proportional_falloff_items_SHARP = 3,	
		proportional_falloff_items_LINEAR = 4,	
		proportional_falloff_items_CONSTANT = 5,	
		proportional_falloff_items_RANDOM = 6	
	};

	std::map<std::string, int> create_string_to_proportional_falloff_items() {
		return {{"SMOOTH", proportional_falloff_items_SMOOTH}, {"SPHERE", proportional_falloff_items_SPHERE}, {"ROOT", proportional_falloff_items_ROOT}, {"INVERSE_SQUARE", proportional_falloff_items_INVERSE_SQUARE}, {"SHARP", proportional_falloff_items_SHARP}, {"LINEAR", proportional_falloff_items_LINEAR}, {"CONSTANT", proportional_falloff_items_CONSTANT}, {"RANDOM", proportional_falloff_items_RANDOM}};
	};

	std::map<int, std::string> create_proportional_falloff_items_to_string() {
		return {{proportional_falloff_items_SMOOTH, "SMOOTH"}, {proportional_falloff_items_SPHERE, "SPHERE"}, {proportional_falloff_items_ROOT, "ROOT"}, {proportional_falloff_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {proportional_falloff_items_SHARP, "SHARP"}, {proportional_falloff_items_LINEAR, "LINEAR"}, {proportional_falloff_items_CONSTANT, "CONSTANT"}, {proportional_falloff_items_RANDOM, "RANDOM"}};
	};

	const std::map<std::string, int> string_to_proportional_falloff_items = create_string_to_proportional_falloff_items();
	const std::map<int, std::string> proportional_falloff_items_to_string = create_proportional_falloff_items_to_string();

	proportional_falloff_items_enum proportional_edit_falloff() {
		STRING_TYPE_GETTER("proportional_edit_falloff", static_cast<proportional_falloff_items_enum>(string_to_proportional_falloff_items.at(resstr)))
	}

	void proportional_edit_falloff(proportional_falloff_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proportional_edit_falloff", proportional_falloff_items_to_string.at(value))
	}

	float proportional_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "proportional_size")
	}

	void proportional_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "proportional_size", value)
	}

	float normal_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "normal_size")
	}

	void normal_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "normal_size", value)
	}

	float double_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "double_threshold")
	}

	void double_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "double_threshold", value)
	}

	bool use_mesh_automerge() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mesh_automerge")
	}

	void use_mesh_automerge(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mesh_automerge", value)
	}

	bool use_snap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_snap")
	}

	void use_snap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_snap", value)
	}

	bool use_snap_align_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_snap_align_rotation")
	}

	void use_snap_align_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_snap_align_rotation", value)
	}

	bool use_snap_grid_absolute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_snap_grid_absolute")
	}

	void use_snap_grid_absolute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_snap_grid_absolute", value)
	}

	enum snap_element_items_enum {
		snap_element_items_INCREMENT = 0,	
		snap_element_items_VERTEX = 1,	
		snap_element_items_EDGE = 2,	
		snap_element_items_FACE = 3,	
		snap_element_items_VOLUME = 4	
	};

	std::map<std::string, int> create_string_to_snap_element_items() {
		return {{"INCREMENT", snap_element_items_INCREMENT}, {"VERTEX", snap_element_items_VERTEX}, {"EDGE", snap_element_items_EDGE}, {"FACE", snap_element_items_FACE}, {"VOLUME", snap_element_items_VOLUME}};
	};

	std::map<int, std::string> create_snap_element_items_to_string() {
		return {{snap_element_items_INCREMENT, "INCREMENT"}, {snap_element_items_VERTEX, "VERTEX"}, {snap_element_items_EDGE, "EDGE"}, {snap_element_items_FACE, "FACE"}, {snap_element_items_VOLUME, "VOLUME"}};
	};

	const std::map<std::string, int> string_to_snap_element_items = create_string_to_snap_element_items();
	const std::map<int, std::string> snap_element_items_to_string = create_snap_element_items_to_string();

	snap_element_items_enum snap_element() {
		STRING_TYPE_GETTER("snap_element", static_cast<snap_element_items_enum>(string_to_snap_element_items.at(resstr)))
	}

	void snap_element(snap_element_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "snap_element", snap_element_items_to_string.at(value))
	}

	enum snap_node_element_items_enum {
		snap_node_element_items_GRID = 8,	
		snap_node_element_items_NODE_X = 5,	
		snap_node_element_items_NODE_Y = 6,	
		snap_node_element_items_NODE_XY = 7	
	};

	std::map<std::string, int> create_string_to_snap_node_element_items() {
		return {{"GRID", snap_node_element_items_GRID}, {"NODE_X", snap_node_element_items_NODE_X}, {"NODE_Y", snap_node_element_items_NODE_Y}, {"NODE_XY", snap_node_element_items_NODE_XY}};
	};

	std::map<int, std::string> create_snap_node_element_items_to_string() {
		return {{snap_node_element_items_GRID, "GRID"}, {snap_node_element_items_NODE_X, "NODE_X"}, {snap_node_element_items_NODE_Y, "NODE_Y"}, {snap_node_element_items_NODE_XY, "NODE_XY"}};
	};

	const std::map<std::string, int> string_to_snap_node_element_items = create_string_to_snap_node_element_items();
	const std::map<int, std::string> snap_node_element_items_to_string = create_snap_node_element_items_to_string();

	snap_node_element_items_enum snap_node_element() {
		STRING_TYPE_GETTER("snap_node_element", static_cast<snap_node_element_items_enum>(string_to_snap_node_element_items.at(resstr)))
	}

	void snap_node_element(snap_node_element_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "snap_node_element", snap_node_element_items_to_string.at(value))
	}

	enum snap_uv_element_items_enum {
		snap_uv_element_items_INCREMENT = 0,	
		snap_uv_element_items_VERTEX = 1	
	};

	std::map<std::string, int> create_string_to_snap_uv_element_items() {
		return {{"INCREMENT", snap_uv_element_items_INCREMENT}, {"VERTEX", snap_uv_element_items_VERTEX}};
	};

	std::map<int, std::string> create_snap_uv_element_items_to_string() {
		return {{snap_uv_element_items_INCREMENT, "INCREMENT"}, {snap_uv_element_items_VERTEX, "VERTEX"}};
	};

	const std::map<std::string, int> string_to_snap_uv_element_items = create_string_to_snap_uv_element_items();
	const std::map<int, std::string> snap_uv_element_items_to_string = create_snap_uv_element_items_to_string();

	snap_uv_element_items_enum snap_uv_element() {
		STRING_TYPE_GETTER("snap_uv_element", static_cast<snap_uv_element_items_enum>(string_to_snap_uv_element_items.at(resstr)))
	}

	void snap_uv_element(snap_uv_element_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "snap_uv_element", snap_uv_element_items_to_string.at(value))
	}

	enum snap_target_items_enum {
		snap_target_items_CLOSEST = 0,	
		snap_target_items_CENTER = 1,	
		snap_target_items_MEDIAN = 2,	
		snap_target_items_ACTIVE = 3	
	};

	std::map<std::string, int> create_string_to_snap_target_items() {
		return {{"CLOSEST", snap_target_items_CLOSEST}, {"CENTER", snap_target_items_CENTER}, {"MEDIAN", snap_target_items_MEDIAN}, {"ACTIVE", snap_target_items_ACTIVE}};
	};

	std::map<int, std::string> create_snap_target_items_to_string() {
		return {{snap_target_items_CLOSEST, "CLOSEST"}, {snap_target_items_CENTER, "CENTER"}, {snap_target_items_MEDIAN, "MEDIAN"}, {snap_target_items_ACTIVE, "ACTIVE"}};
	};

	const std::map<std::string, int> string_to_snap_target_items = create_string_to_snap_target_items();
	const std::map<int, std::string> snap_target_items_to_string = create_snap_target_items_to_string();

	snap_target_items_enum snap_target() {
		STRING_TYPE_GETTER("snap_target", static_cast<snap_target_items_enum>(string_to_snap_target_items.at(resstr)))
	}

	void snap_target(snap_target_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "snap_target", snap_target_items_to_string.at(value))
	}

	bool use_snap_peel_object() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_snap_peel_object")
	}

	void use_snap_peel_object(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_snap_peel_object", value)
	}

	bool use_snap_project() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_snap_project")
	}

	void use_snap_project(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_snap_project", value)
	}

	bool use_snap_self() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_snap_self")
	}

	void use_snap_self(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_snap_self", value)
	}

	bool use_grease_pencil_sessions() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_grease_pencil_sessions")
	}

	void use_grease_pencil_sessions(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_grease_pencil_sessions", value)
	}

	enum gpencil_source_3d_items_enum {
		gpencil_source_3d_items_SCENE = 0,	
		gpencil_source_3d_items_OBJECT = 1	
	};

	std::map<std::string, int> create_string_to_gpencil_source_3d_items() {
		return {{"SCENE", gpencil_source_3d_items_SCENE}, {"OBJECT", gpencil_source_3d_items_OBJECT}};
	};

	std::map<int, std::string> create_gpencil_source_3d_items_to_string() {
		return {{gpencil_source_3d_items_SCENE, "SCENE"}, {gpencil_source_3d_items_OBJECT, "OBJECT"}};
	};

	const std::map<std::string, int> string_to_gpencil_source_3d_items = create_string_to_gpencil_source_3d_items();
	const std::map<int, std::string> gpencil_source_3d_items_to_string = create_gpencil_source_3d_items_to_string();

	gpencil_source_3d_items_enum grease_pencil_source() {
		STRING_TYPE_GETTER("grease_pencil_source", static_cast<gpencil_source_3d_items_enum>(string_to_gpencil_source_3d_items.at(resstr)))
	}

	void grease_pencil_source(gpencil_source_3d_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "grease_pencil_source", gpencil_source_3d_items_to_string.at(value))
	}

	bool use_keyframe_insert_auto() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keyframe_insert_auto")
	}

	void use_keyframe_insert_auto(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keyframe_insert_auto", value)
	}

	enum auto_key_items_enum {
		auto_key_items_ADD_REPLACE_KEYS = 2,	
		auto_key_items_REPLACE_KEYS = 4	
	};

	std::map<std::string, int> create_string_to_auto_key_items() {
		return {{"ADD_REPLACE_KEYS", auto_key_items_ADD_REPLACE_KEYS}, {"REPLACE_KEYS", auto_key_items_REPLACE_KEYS}};
	};

	std::map<int, std::string> create_auto_key_items_to_string() {
		return {{auto_key_items_ADD_REPLACE_KEYS, "ADD_REPLACE_KEYS"}, {auto_key_items_REPLACE_KEYS, "REPLACE_KEYS"}};
	};

	const std::map<std::string, int> string_to_auto_key_items = create_string_to_auto_key_items();
	const std::map<int, std::string> auto_key_items_to_string = create_auto_key_items_to_string();

	auto_key_items_enum auto_keying_mode() {
		STRING_TYPE_GETTER("auto_keying_mode", static_cast<auto_key_items_enum>(string_to_auto_key_items.at(resstr)))
	}

	void auto_keying_mode(auto_key_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "auto_keying_mode", auto_key_items_to_string.at(value))
	}

	bool use_record_with_nla() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_record_with_nla")
	}

	void use_record_with_nla(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_record_with_nla", value)
	}

	bool use_keyframe_insert_keyingset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keyframe_insert_keyingset")
	}

	void use_keyframe_insert_keyingset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keyframe_insert_keyingset", value)
	}

	enum uv_select_mode_items_enum {
		uv_select_mode_items_VERTEX = 1,	
		uv_select_mode_items_EDGE = 2,	
		uv_select_mode_items_FACE = 4,	
		uv_select_mode_items_ISLAND = 8	
	};

	std::map<std::string, int> create_string_to_uv_select_mode_items() {
		return {{"VERTEX", uv_select_mode_items_VERTEX}, {"EDGE", uv_select_mode_items_EDGE}, {"FACE", uv_select_mode_items_FACE}, {"ISLAND", uv_select_mode_items_ISLAND}};
	};

	std::map<int, std::string> create_uv_select_mode_items_to_string() {
		return {{uv_select_mode_items_VERTEX, "VERTEX"}, {uv_select_mode_items_EDGE, "EDGE"}, {uv_select_mode_items_FACE, "FACE"}, {uv_select_mode_items_ISLAND, "ISLAND"}};
	};

	const std::map<std::string, int> string_to_uv_select_mode_items = create_string_to_uv_select_mode_items();
	const std::map<int, std::string> uv_select_mode_items_to_string = create_uv_select_mode_items_to_string();

	uv_select_mode_items_enum uv_select_mode() {
		STRING_TYPE_GETTER("uv_select_mode", static_cast<uv_select_mode_items_enum>(string_to_uv_select_mode_items.at(resstr)))
	}

	void uv_select_mode(uv_select_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_select_mode", uv_select_mode_items_to_string.at(value))
	}

	bool use_uv_select_sync() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_uv_select_sync")
	}

	void use_uv_select_sync(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_uv_select_sync", value)
	}

	bool show_uv_local_view() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_uv_local_view")
	}

	void show_uv_local_view(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_uv_local_view", value)
	}

	std::array<bool, 3> mesh_select_mode() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "mesh_select_mode", 3)
	}

	void mesh_select_mode(bool values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "mesh_select_mode", 3)
	}

	float vertex_group_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "vertex_group_weight")
	}

	void vertex_group_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "vertex_group_weight", value)
	}

	enum edge_tag_items_enum {
		edge_tag_items_SELECT = 0,	
		edge_tag_items_SEAM = 1,	
		edge_tag_items_SHARP = 2,	
		edge_tag_items_CREASE = 3,	
		edge_tag_items_BEVEL = 4,	
		edge_tag_items_FREESTYLE = 5	
	};

	std::map<std::string, int> create_string_to_edge_tag_items() {
		return {{"SELECT", edge_tag_items_SELECT}, {"SEAM", edge_tag_items_SEAM}, {"SHARP", edge_tag_items_SHARP}, {"CREASE", edge_tag_items_CREASE}, {"BEVEL", edge_tag_items_BEVEL}, {"FREESTYLE", edge_tag_items_FREESTYLE}};
	};

	std::map<int, std::string> create_edge_tag_items_to_string() {
		return {{edge_tag_items_SELECT, "SELECT"}, {edge_tag_items_SEAM, "SEAM"}, {edge_tag_items_SHARP, "SHARP"}, {edge_tag_items_CREASE, "CREASE"}, {edge_tag_items_BEVEL, "BEVEL"}, {edge_tag_items_FREESTYLE, "FREESTYLE"}};
	};

	const std::map<std::string, int> string_to_edge_tag_items = create_string_to_edge_tag_items();
	const std::map<int, std::string> edge_tag_items_to_string = create_edge_tag_items_to_string();

	edge_tag_items_enum edge_path_mode() {
		STRING_TYPE_GETTER("edge_path_mode", static_cast<edge_tag_items_enum>(string_to_edge_tag_items.at(resstr)))
	}

	void edge_path_mode(edge_tag_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edge_path_mode", edge_tag_items_to_string.at(value))
	}

	bool edge_path_live_unwrap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "edge_path_live_unwrap")
	}

	void edge_path_live_unwrap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "edge_path_live_unwrap", value)
	}

	bool use_bone_sketching() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bone_sketching")
	}

	void use_bone_sketching(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bone_sketching", value)
	}

	bool use_etch_quick() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_etch_quick")
	}

	void use_etch_quick(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_etch_quick", value)
	}

	bool use_etch_overdraw() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_etch_overdraw")
	}

	void use_etch_overdraw(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_etch_overdraw", value)
	}

	bool use_etch_autoname() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_etch_autoname")
	}

	void use_etch_autoname(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_etch_autoname", value)
	}

	std::string etch_number() {
		STRING_TYPE_GETTER("etch_number", resstr)
	}

	void etch_number(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "etch_number", value)
	}

	std::string etch_side() {
		STRING_TYPE_GETTER("etch_side", resstr)
	}

	void etch_side(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "etch_side", value)
	}

	Object etch_template() {
		CLASS_TYPES_GETTER(Object, "etch_template")
	}

	int etch_subdivision_number() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "etch_subdivision_number")
	}

	void etch_subdivision_number(int value) {
		PRIMITIVE_TYPES_SETTER("i", "etch_subdivision_number", value)
	}

	float etch_adaptive_limit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "etch_adaptive_limit")
	}

	void etch_adaptive_limit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "etch_adaptive_limit", value)
	}

	float etch_length_limit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "etch_length_limit")
	}

	void etch_length_limit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "etch_length_limit", value)
	}

	enum retarget_roll_items_enum {
		retarget_roll_items_NONE = 0,	
		retarget_roll_items_VIEW = 1,	
		retarget_roll_items_JOINT = 2	
	};

	std::map<std::string, int> create_string_to_retarget_roll_items() {
		return {{"NONE", retarget_roll_items_NONE}, {"VIEW", retarget_roll_items_VIEW}, {"JOINT", retarget_roll_items_JOINT}};
	};

	std::map<int, std::string> create_retarget_roll_items_to_string() {
		return {{retarget_roll_items_NONE, "NONE"}, {retarget_roll_items_VIEW, "VIEW"}, {retarget_roll_items_JOINT, "JOINT"}};
	};

	const std::map<std::string, int> string_to_retarget_roll_items = create_string_to_retarget_roll_items();
	const std::map<int, std::string> retarget_roll_items_to_string = create_retarget_roll_items_to_string();

	retarget_roll_items_enum etch_roll_mode() {
		STRING_TYPE_GETTER("etch_roll_mode", static_cast<retarget_roll_items_enum>(string_to_retarget_roll_items.at(resstr)))
	}

	void etch_roll_mode(retarget_roll_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "etch_roll_mode", retarget_roll_items_to_string.at(value))
	}

	enum sketch_convert_items_enum {
		sketch_convert_items_FIXED = 0,	
		sketch_convert_items_LENGTH = 1,	
		sketch_convert_items_ADAPTIVE = 2,	
		sketch_convert_items_RETARGET = 3	
	};

	std::map<std::string, int> create_string_to_sketch_convert_items() {
		return {{"FIXED", sketch_convert_items_FIXED}, {"LENGTH", sketch_convert_items_LENGTH}, {"ADAPTIVE", sketch_convert_items_ADAPTIVE}, {"RETARGET", sketch_convert_items_RETARGET}};
	};

	std::map<int, std::string> create_sketch_convert_items_to_string() {
		return {{sketch_convert_items_FIXED, "FIXED"}, {sketch_convert_items_LENGTH, "LENGTH"}, {sketch_convert_items_ADAPTIVE, "ADAPTIVE"}, {sketch_convert_items_RETARGET, "RETARGET"}};
	};

	const std::map<std::string, int> string_to_sketch_convert_items = create_string_to_sketch_convert_items();
	const std::map<int, std::string> sketch_convert_items_to_string = create_sketch_convert_items_to_string();

	sketch_convert_items_enum etch_convert_mode() {
		STRING_TYPE_GETTER("etch_convert_mode", static_cast<sketch_convert_items_enum>(string_to_sketch_convert_items.at(resstr)))
	}

	void etch_convert_mode(sketch_convert_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "etch_convert_mode", sketch_convert_items_to_string.at(value))
	}

	UnifiedPaintSettings unified_paint_settings();

	MeshStatVis statvis();
};

class UnifiedPaintSettings : public pyUniplug {
public:
	UnifiedPaintSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	UnifiedPaintSettings() : pyUniplug(0) { }

	bool use_unified_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_unified_size")
	}

	void use_unified_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_unified_size", value)
	}

	bool use_unified_strength() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_unified_strength")
	}

	void use_unified_strength(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_unified_strength", value)
	}

	bool use_unified_weight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_unified_weight")
	}

	void use_unified_weight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_unified_weight", value)
	}

	bool use_unified_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_unified_color")
	}

	void use_unified_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_unified_color", value)
	}

	int size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size")
	}

	void size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size", value)
	}

	float unprojected_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "unprojected_radius")
	}

	void unprojected_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "unprojected_radius", value)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	VFLOAT3 secondary_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "secondary_color", 3)
	}

	void secondary_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "secondary_color", 3)
	}

	bool use_pressure_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pressure_size")
	}

	void use_pressure_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pressure_size", value)
	}

	bool use_pressure_strength() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pressure_strength")
	}

	void use_pressure_strength(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pressure_strength", value)
	}

	bool use_locked_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_locked_size")
	}

	void use_locked_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_locked_size", value)
	}
};

class MeshStatVis : public pyUniplug {
public:
	MeshStatVis(PyObject* pyobj) : pyUniplug(pyobj) {}
	MeshStatVis() : pyUniplug(0) { }

	enum stat_type_enum {
		stat_type_OVERHANG = 0,	
		stat_type_THICKNESS = 1,	
		stat_type_INTERSECT = 2,	
		stat_type_DISTORT = 3,	
		stat_type_SHARP = 4	
	};

	std::map<std::string, int> create_string_to_stat_type() {
		return {{"OVERHANG", stat_type_OVERHANG}, {"THICKNESS", stat_type_THICKNESS}, {"INTERSECT", stat_type_INTERSECT}, {"DISTORT", stat_type_DISTORT}, {"SHARP", stat_type_SHARP}};
	};

	std::map<int, std::string> create_stat_type_to_string() {
		return {{stat_type_OVERHANG, "OVERHANG"}, {stat_type_THICKNESS, "THICKNESS"}, {stat_type_INTERSECT, "INTERSECT"}, {stat_type_DISTORT, "DISTORT"}, {stat_type_SHARP, "SHARP"}};
	};

	const std::map<std::string, int> string_to_stat_type = create_string_to_stat_type();
	const std::map<int, std::string> stat_type_to_string = create_stat_type_to_string();

	stat_type_enum type() {
		STRING_TYPE_GETTER("type", static_cast<stat_type_enum>(string_to_stat_type.at(resstr)))
	}

	void type(stat_type_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", stat_type_to_string.at(value))
	}

	float overhang_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "overhang_min")
	}

	void overhang_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "overhang_min", value)
	}

	float overhang_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "overhang_max")
	}

	void overhang_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "overhang_max", value)
	}

	enum object_axis_items_enum {
		object_axis_items_POS_X = 0,	
		object_axis_items_POS_Y = 1,	
		object_axis_items_POS_Z = 2,	
		object_axis_items_NEG_X = 3,	
		object_axis_items_NEG_Y = 4,	
		object_axis_items_NEG_Z = 5	
	};

	std::map<std::string, int> create_string_to_object_axis_items() {
		return {{"POS_X", object_axis_items_POS_X}, {"POS_Y", object_axis_items_POS_Y}, {"POS_Z", object_axis_items_POS_Z}, {"NEG_X", object_axis_items_NEG_X}, {"NEG_Y", object_axis_items_NEG_Y}, {"NEG_Z", object_axis_items_NEG_Z}};
	};

	std::map<int, std::string> create_object_axis_items_to_string() {
		return {{object_axis_items_POS_X, "POS_X"}, {object_axis_items_POS_Y, "POS_Y"}, {object_axis_items_POS_Z, "POS_Z"}, {object_axis_items_NEG_X, "NEG_X"}, {object_axis_items_NEG_Y, "NEG_Y"}, {object_axis_items_NEG_Z, "NEG_Z"}};
	};

	const std::map<std::string, int> string_to_object_axis_items = create_string_to_object_axis_items();
	const std::map<int, std::string> object_axis_items_to_string = create_object_axis_items_to_string();

	object_axis_items_enum overhang_axis() {
		STRING_TYPE_GETTER("overhang_axis", static_cast<object_axis_items_enum>(string_to_object_axis_items.at(resstr)))
	}

	void overhang_axis(object_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "overhang_axis", object_axis_items_to_string.at(value))
	}

	float thickness_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_min")
	}

	void thickness_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_min", value)
	}

	float thickness_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "thickness_max")
	}

	void thickness_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "thickness_max", value)
	}

	int thickness_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "thickness_samples")
	}

	void thickness_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "thickness_samples", value)
	}

	float distort_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distort_min")
	}

	void distort_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distort_min", value)
	}

	float distort_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distort_max")
	}

	void distort_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distort_max", value)
	}

	float sharp_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sharp_min")
	}

	void sharp_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sharp_min", value)
	}

	float sharp_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sharp_max")
	}

	void sharp_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sharp_max", value)
	}
};

class UnitSettings : public pyUniplug {
public:
	UnitSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	UnitSettings() : pyUniplug(0) { }

	enum unit_systems_enum {
		unit_systems_NONE = 0,	
		unit_systems_METRIC = 1,	
		unit_systems_IMPERIAL = 2	
	};

	std::map<std::string, int> create_string_to_unit_systems() {
		return {{"NONE", unit_systems_NONE}, {"METRIC", unit_systems_METRIC}, {"IMPERIAL", unit_systems_IMPERIAL}};
	};

	std::map<int, std::string> create_unit_systems_to_string() {
		return {{unit_systems_NONE, "NONE"}, {unit_systems_METRIC, "METRIC"}, {unit_systems_IMPERIAL, "IMPERIAL"}};
	};

	const std::map<std::string, int> string_to_unit_systems = create_string_to_unit_systems();
	const std::map<int, std::string> unit_systems_to_string = create_unit_systems_to_string();

	unit_systems_enum system() {
		STRING_TYPE_GETTER("system", static_cast<unit_systems_enum>(string_to_unit_systems.at(resstr)))
	}

	void system(unit_systems_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "system", unit_systems_to_string.at(value))
	}

	enum rotation_units_enum {
		rotation_units_DEGREES = 0,	
		rotation_units_RADIANS = 2	
	};

	std::map<std::string, int> create_string_to_rotation_units() {
		return {{"DEGREES", rotation_units_DEGREES}, {"RADIANS", rotation_units_RADIANS}};
	};

	std::map<int, std::string> create_rotation_units_to_string() {
		return {{rotation_units_DEGREES, "DEGREES"}, {rotation_units_RADIANS, "RADIANS"}};
	};

	const std::map<std::string, int> string_to_rotation_units = create_string_to_rotation_units();
	const std::map<int, std::string> rotation_units_to_string = create_rotation_units_to_string();

	rotation_units_enum system_rotation() {
		STRING_TYPE_GETTER("system_rotation", static_cast<rotation_units_enum>(string_to_rotation_units.at(resstr)))
	}

	void system_rotation(rotation_units_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "system_rotation", rotation_units_to_string.at(value))
	}

	float scale_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_length")
	}

	void scale_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_length", value)
	}

	bool use_separate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_separate")
	}

	void use_separate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_separate", value)
	}
};

class Stereo3dFormat : public pyUniplug {
public:
	Stereo3dFormat(PyObject* pyobj) : pyUniplug(pyobj) {}
	Stereo3dFormat() : pyUniplug(0) { }

	enum stereo3d_display_items_enum {
		stereo3d_display_items_ANAGLYPH = 0,	
		stereo3d_display_items_INTERLACE = 1,	
		stereo3d_display_items_SIDEBYSIDE = 3,	
		stereo3d_display_items_TOPBOTTOM = 4	
	};

	std::map<std::string, int> create_string_to_stereo3d_display_items() {
		return {{"ANAGLYPH", stereo3d_display_items_ANAGLYPH}, {"INTERLACE", stereo3d_display_items_INTERLACE}, {"SIDEBYSIDE", stereo3d_display_items_SIDEBYSIDE}, {"TOPBOTTOM", stereo3d_display_items_TOPBOTTOM}};
	};

	std::map<int, std::string> create_stereo3d_display_items_to_string() {
		return {{stereo3d_display_items_ANAGLYPH, "ANAGLYPH"}, {stereo3d_display_items_INTERLACE, "INTERLACE"}, {stereo3d_display_items_SIDEBYSIDE, "SIDEBYSIDE"}, {stereo3d_display_items_TOPBOTTOM, "TOPBOTTOM"}};
	};

	const std::map<std::string, int> string_to_stereo3d_display_items = create_string_to_stereo3d_display_items();
	const std::map<int, std::string> stereo3d_display_items_to_string = create_stereo3d_display_items_to_string();

	stereo3d_display_items_enum display_mode() {
		STRING_TYPE_GETTER("display_mode", static_cast<stereo3d_display_items_enum>(string_to_stereo3d_display_items.at(resstr)))
	}

	void display_mode(stereo3d_display_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "display_mode", stereo3d_display_items_to_string.at(value))
	}

	enum stereo3d_anaglyph_type_items_enum {
		stereo3d_anaglyph_type_items_RED_CYAN = 0,	
		stereo3d_anaglyph_type_items_GREEN_MAGENTA = 1,	
		stereo3d_anaglyph_type_items_YELLOW_BLUE = 2	
	};

	std::map<std::string, int> create_string_to_stereo3d_anaglyph_type_items() {
		return {{"RED_CYAN", stereo3d_anaglyph_type_items_RED_CYAN}, {"GREEN_MAGENTA", stereo3d_anaglyph_type_items_GREEN_MAGENTA}, {"YELLOW_BLUE", stereo3d_anaglyph_type_items_YELLOW_BLUE}};
	};

	std::map<int, std::string> create_stereo3d_anaglyph_type_items_to_string() {
		return {{stereo3d_anaglyph_type_items_RED_CYAN, "RED_CYAN"}, {stereo3d_anaglyph_type_items_GREEN_MAGENTA, "GREEN_MAGENTA"}, {stereo3d_anaglyph_type_items_YELLOW_BLUE, "YELLOW_BLUE"}};
	};

	const std::map<std::string, int> string_to_stereo3d_anaglyph_type_items = create_string_to_stereo3d_anaglyph_type_items();
	const std::map<int, std::string> stereo3d_anaglyph_type_items_to_string = create_stereo3d_anaglyph_type_items_to_string();

	stereo3d_anaglyph_type_items_enum anaglyph_type() {
		STRING_TYPE_GETTER("anaglyph_type", static_cast<stereo3d_anaglyph_type_items_enum>(string_to_stereo3d_anaglyph_type_items.at(resstr)))
	}

	void anaglyph_type(stereo3d_anaglyph_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "anaglyph_type", stereo3d_anaglyph_type_items_to_string.at(value))
	}

	enum stereo3d_interlace_type_items_enum {
		stereo3d_interlace_type_items_ROW_INTERLEAVED = 0,	
		stereo3d_interlace_type_items_COLUMN_INTERLEAVED = 1,	
		stereo3d_interlace_type_items_CHECKERBOARD_INTERLEAVED = 2	
	};

	std::map<std::string, int> create_string_to_stereo3d_interlace_type_items() {
		return {{"ROW_INTERLEAVED", stereo3d_interlace_type_items_ROW_INTERLEAVED}, {"COLUMN_INTERLEAVED", stereo3d_interlace_type_items_COLUMN_INTERLEAVED}, {"CHECKERBOARD_INTERLEAVED", stereo3d_interlace_type_items_CHECKERBOARD_INTERLEAVED}};
	};

	std::map<int, std::string> create_stereo3d_interlace_type_items_to_string() {
		return {{stereo3d_interlace_type_items_ROW_INTERLEAVED, "ROW_INTERLEAVED"}, {stereo3d_interlace_type_items_COLUMN_INTERLEAVED, "COLUMN_INTERLEAVED"}, {stereo3d_interlace_type_items_CHECKERBOARD_INTERLEAVED, "CHECKERBOARD_INTERLEAVED"}};
	};

	const std::map<std::string, int> string_to_stereo3d_interlace_type_items = create_string_to_stereo3d_interlace_type_items();
	const std::map<int, std::string> stereo3d_interlace_type_items_to_string = create_stereo3d_interlace_type_items_to_string();

	stereo3d_interlace_type_items_enum interlace_type() {
		STRING_TYPE_GETTER("interlace_type", static_cast<stereo3d_interlace_type_items_enum>(string_to_stereo3d_interlace_type_items.at(resstr)))
	}

	void interlace_type(stereo3d_interlace_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interlace_type", stereo3d_interlace_type_items_to_string.at(value))
	}

	bool use_interlace_swap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_interlace_swap")
	}

	void use_interlace_swap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_interlace_swap", value)
	}

	bool use_sidebyside_crosseyed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sidebyside_crosseyed")
	}

	void use_sidebyside_crosseyed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sidebyside_crosseyed", value)
	}

	bool use_squeezed_frame() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_squeezed_frame")
	}

	void use_squeezed_frame(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_squeezed_frame", value)
	}
};

class ImageFormatSettings : public pyUniplug {
public:
	ImageFormatSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	ImageFormatSettings() : pyUniplug(0) { }

	enum image_type_items_enum {
		image_type_items_BMP = 20,	
		image_type_items_IRIS = 1,	
		image_type_items_PNG = 17,	
		image_type_items_JPEG = 4,	
		image_type_items_JPEG2000 = 30,	
		image_type_items_TARGA = 0,	
		image_type_items_TARGA_RAW = 14,	
		image_type_items_CINEON = 26,	
		image_type_items_DPX = 27,	
		image_type_items_OPEN_EXR_MULTILAYER = 28,	
		image_type_items_OPEN_EXR = 23,	
		image_type_items_HDR = 21,	
		image_type_items_TIFF = 22,	
		image_type_items_AVI_JPEG = 16,	
		image_type_items_AVI_RAW = 15,	
		image_type_items_FRAMESERVER = 25,	
		image_type_items_H264 = 31,	
		image_type_items_FFMPEG = 24,	
		image_type_items_THEORA = 33,	
		image_type_items_XVID = 32	
	};

	std::map<std::string, int> create_string_to_image_type_items() {
		return {{"BMP", image_type_items_BMP}, {"IRIS", image_type_items_IRIS}, {"PNG", image_type_items_PNG}, {"JPEG", image_type_items_JPEG}, {"JPEG2000", image_type_items_JPEG2000}, {"TARGA", image_type_items_TARGA}, {"TARGA_RAW", image_type_items_TARGA_RAW}, {"CINEON", image_type_items_CINEON}, {"DPX", image_type_items_DPX}, {"OPEN_EXR_MULTILAYER", image_type_items_OPEN_EXR_MULTILAYER}, {"OPEN_EXR", image_type_items_OPEN_EXR}, {"HDR", image_type_items_HDR}, {"TIFF", image_type_items_TIFF}, {"AVI_JPEG", image_type_items_AVI_JPEG}, {"AVI_RAW", image_type_items_AVI_RAW}, {"FRAMESERVER", image_type_items_FRAMESERVER}, {"H264", image_type_items_H264}, {"FFMPEG", image_type_items_FFMPEG}, {"THEORA", image_type_items_THEORA}, {"XVID", image_type_items_XVID}};
	};

	std::map<int, std::string> create_image_type_items_to_string() {
		return {{image_type_items_BMP, "BMP"}, {image_type_items_IRIS, "IRIS"}, {image_type_items_PNG, "PNG"}, {image_type_items_JPEG, "JPEG"}, {image_type_items_JPEG2000, "JPEG2000"}, {image_type_items_TARGA, "TARGA"}, {image_type_items_TARGA_RAW, "TARGA_RAW"}, {image_type_items_CINEON, "CINEON"}, {image_type_items_DPX, "DPX"}, {image_type_items_OPEN_EXR_MULTILAYER, "OPEN_EXR_MULTILAYER"}, {image_type_items_OPEN_EXR, "OPEN_EXR"}, {image_type_items_HDR, "HDR"}, {image_type_items_TIFF, "TIFF"}, {image_type_items_AVI_JPEG, "AVI_JPEG"}, {image_type_items_AVI_RAW, "AVI_RAW"}, {image_type_items_FRAMESERVER, "FRAMESERVER"}, {image_type_items_H264, "H264"}, {image_type_items_FFMPEG, "FFMPEG"}, {image_type_items_THEORA, "THEORA"}, {image_type_items_XVID, "XVID"}};
	};

	const std::map<std::string, int> string_to_image_type_items = create_string_to_image_type_items();
	const std::map<int, std::string> image_type_items_to_string = create_image_type_items_to_string();

	image_type_items_enum file_format() {
		STRING_TYPE_GETTER("file_format", static_cast<image_type_items_enum>(string_to_image_type_items.at(resstr)))
	}

	void file_format(image_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "file_format", image_type_items_to_string.at(value))
	}

	enum image_color_mode_items_enum {
		image_color_mode_items_BW = 8,	
		image_color_mode_items_RGB = 24,	
		image_color_mode_items_RGBA = 32	
	};

	std::map<std::string, int> create_string_to_image_color_mode_items() {
		return {{"BW", image_color_mode_items_BW}, {"RGB", image_color_mode_items_RGB}, {"RGBA", image_color_mode_items_RGBA}};
	};

	std::map<int, std::string> create_image_color_mode_items_to_string() {
		return {{image_color_mode_items_BW, "BW"}, {image_color_mode_items_RGB, "RGB"}, {image_color_mode_items_RGBA, "RGBA"}};
	};

	const std::map<std::string, int> string_to_image_color_mode_items = create_string_to_image_color_mode_items();
	const std::map<int, std::string> image_color_mode_items_to_string = create_image_color_mode_items_to_string();

	image_color_mode_items_enum color_mode() {
		STRING_TYPE_GETTER("color_mode", static_cast<image_color_mode_items_enum>(string_to_image_color_mode_items.at(resstr)))
	}

	void color_mode(image_color_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_mode", image_color_mode_items_to_string.at(value))
	}

	enum image_color_depth_items_enum {
		image_color_depth_items_8 = 2,	
		image_color_depth_items_10 = 4,	
		image_color_depth_items_12 = 8,	
		image_color_depth_items_16 = 16,	
		image_color_depth_items_32 = 64	
	};

	std::map<std::string, int> create_string_to_image_color_depth_items() {
		return {{"8", image_color_depth_items_8}, {"10", image_color_depth_items_10}, {"12", image_color_depth_items_12}, {"16", image_color_depth_items_16}, {"32", image_color_depth_items_32}};
	};

	std::map<int, std::string> create_image_color_depth_items_to_string() {
		return {{image_color_depth_items_8, "8"}, {image_color_depth_items_10, "10"}, {image_color_depth_items_12, "12"}, {image_color_depth_items_16, "16"}, {image_color_depth_items_32, "32"}};
	};

	const std::map<std::string, int> string_to_image_color_depth_items = create_string_to_image_color_depth_items();
	const std::map<int, std::string> image_color_depth_items_to_string = create_image_color_depth_items_to_string();

	image_color_depth_items_enum color_depth() {
		STRING_TYPE_GETTER("color_depth", static_cast<image_color_depth_items_enum>(string_to_image_color_depth_items.at(resstr)))
	}

	void color_depth(image_color_depth_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_depth", image_color_depth_items_to_string.at(value))
	}

	int quality() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "quality")
	}

	void quality(int value) {
		PRIMITIVE_TYPES_SETTER("i", "quality", value)
	}

	int compression() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "compression")
	}

	void compression(int value) {
		PRIMITIVE_TYPES_SETTER("i", "compression", value)
	}

	bool use_zbuffer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_zbuffer")
	}

	void use_zbuffer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_zbuffer", value)
	}

	bool use_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preview")
	}

	void use_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preview", value)
	}

	enum exr_codec_items_enum {
		exr_codec_items_NONE = 0,	
		exr_codec_items_PXR24 = 1,	
		exr_codec_items_ZIP = 2,	
		exr_codec_items_PIZ = 3,	
		exr_codec_items_RLE = 4,	
		exr_codec_items_ZIPS = 5,	
		exr_codec_items_B44 = 6,	
		exr_codec_items_B44A = 7,	
		exr_codec_items_DWAA = 8,	
		exr_codec_items_DWAB = 9	
	};

	std::map<std::string, int> create_string_to_exr_codec_items() {
		return {{"NONE", exr_codec_items_NONE}, {"PXR24", exr_codec_items_PXR24}, {"ZIP", exr_codec_items_ZIP}, {"PIZ", exr_codec_items_PIZ}, {"RLE", exr_codec_items_RLE}, {"ZIPS", exr_codec_items_ZIPS}, {"B44", exr_codec_items_B44}, {"B44A", exr_codec_items_B44A}, {"DWAA", exr_codec_items_DWAA}, {"DWAB", exr_codec_items_DWAB}};
	};

	std::map<int, std::string> create_exr_codec_items_to_string() {
		return {{exr_codec_items_NONE, "NONE"}, {exr_codec_items_PXR24, "PXR24"}, {exr_codec_items_ZIP, "ZIP"}, {exr_codec_items_PIZ, "PIZ"}, {exr_codec_items_RLE, "RLE"}, {exr_codec_items_ZIPS, "ZIPS"}, {exr_codec_items_B44, "B44"}, {exr_codec_items_B44A, "B44A"}, {exr_codec_items_DWAA, "DWAA"}, {exr_codec_items_DWAB, "DWAB"}};
	};

	const std::map<std::string, int> string_to_exr_codec_items = create_string_to_exr_codec_items();
	const std::map<int, std::string> exr_codec_items_to_string = create_exr_codec_items_to_string();

	exr_codec_items_enum exr_codec() {
		STRING_TYPE_GETTER("exr_codec", static_cast<exr_codec_items_enum>(string_to_exr_codec_items.at(resstr)))
	}

	void exr_codec(exr_codec_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "exr_codec", exr_codec_items_to_string.at(value))
	}

	bool use_jpeg2k_ycc() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_jpeg2k_ycc")
	}

	void use_jpeg2k_ycc(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_jpeg2k_ycc", value)
	}

	bool use_jpeg2k_cinema_preset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_jpeg2k_cinema_preset")
	}

	void use_jpeg2k_cinema_preset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_jpeg2k_cinema_preset", value)
	}

	bool use_jpeg2k_cinema_48() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_jpeg2k_cinema_48")
	}

	void use_jpeg2k_cinema_48(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_jpeg2k_cinema_48", value)
	}

	enum jp2_codec_items_enum {
		jp2_codec_items_JP2 = 0,	
		jp2_codec_items_J2K = 1	
	};

	std::map<std::string, int> create_string_to_jp2_codec_items() {
		return {{"JP2", jp2_codec_items_JP2}, {"J2K", jp2_codec_items_J2K}};
	};

	std::map<int, std::string> create_jp2_codec_items_to_string() {
		return {{jp2_codec_items_JP2, "JP2"}, {jp2_codec_items_J2K, "J2K"}};
	};

	const std::map<std::string, int> string_to_jp2_codec_items = create_string_to_jp2_codec_items();
	const std::map<int, std::string> jp2_codec_items_to_string = create_jp2_codec_items_to_string();

	jp2_codec_items_enum jpeg2k_codec() {
		STRING_TYPE_GETTER("jpeg2k_codec", static_cast<jp2_codec_items_enum>(string_to_jp2_codec_items.at(resstr)))
	}

	void jpeg2k_codec(jp2_codec_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "jpeg2k_codec", jp2_codec_items_to_string.at(value))
	}

	bool use_cineon_log() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cineon_log")
	}

	void use_cineon_log(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cineon_log", value)
	}

	int cineon_black() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "cineon_black")
	}

	void cineon_black(int value) {
		PRIMITIVE_TYPES_SETTER("i", "cineon_black", value)
	}

	int cineon_white() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "cineon_white")
	}

	void cineon_white(int value) {
		PRIMITIVE_TYPES_SETTER("i", "cineon_white", value)
	}

	float cineon_gamma() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cineon_gamma")
	}

	void cineon_gamma(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cineon_gamma", value)
	}

	enum views_format_items_enum {
		views_format_items_INDIVIDUAL = 0,	
		views_format_items_STEREO_3D = 1	
	};

	std::map<std::string, int> create_string_to_views_format_items() {
		return {{"INDIVIDUAL", views_format_items_INDIVIDUAL}, {"STEREO_3D", views_format_items_STEREO_3D}};
	};

	std::map<int, std::string> create_views_format_items_to_string() {
		return {{views_format_items_INDIVIDUAL, "INDIVIDUAL"}, {views_format_items_STEREO_3D, "STEREO_3D"}};
	};

	const std::map<std::string, int> string_to_views_format_items = create_string_to_views_format_items();
	const std::map<int, std::string> views_format_items_to_string = create_views_format_items_to_string();

	views_format_items_enum views_format() {
		STRING_TYPE_GETTER("views_format", static_cast<views_format_items_enum>(string_to_views_format_items.at(resstr)))
	}

	void views_format(views_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "views_format", views_format_items_to_string.at(value))
	}

	Stereo3dFormat stereo_3d_format() {
		CLASS_TYPES_GETTER(Stereo3dFormat, "stereo_3d_format")
	}

	ColorManagedViewSettings view_settings() {
		CLASS_TYPES_GETTER(ColorManagedViewSettings, "view_settings")
	}

	ColorManagedDisplaySettings display_settings() {
		CLASS_TYPES_GETTER(ColorManagedDisplaySettings, "display_settings")
	}
};

class SceneGameData : public pyUniplug {
public:
	SceneGameData(PyObject* pyobj) : pyUniplug(pyobj) {}
	SceneGameData() : pyUniplug(0) { }

	int resolution_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_x")
	}

	void resolution_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_x", value)
	}

	int resolution_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_y")
	}

	void resolution_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_y", value)
	}

	enum vsync_items_enum {
		vsync_items_OFF = 1,	
		vsync_items_ON = 0,	
		vsync_items_ADAPTIVE = 2	
	};

	std::map<std::string, int> create_string_to_vsync_items() {
		return {{"OFF", vsync_items_OFF}, {"ON", vsync_items_ON}, {"ADAPTIVE", vsync_items_ADAPTIVE}};
	};

	std::map<int, std::string> create_vsync_items_to_string() {
		return {{vsync_items_OFF, "OFF"}, {vsync_items_ON, "ON"}, {vsync_items_ADAPTIVE, "ADAPTIVE"}};
	};

	const std::map<std::string, int> string_to_vsync_items = create_string_to_vsync_items();
	const std::map<int, std::string> vsync_items_to_string = create_vsync_items_to_string();

	vsync_items_enum vsync() {
		STRING_TYPE_GETTER("vsync", static_cast<vsync_items_enum>(string_to_vsync_items.at(resstr)))
	}

	void vsync(vsync_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "vsync", vsync_items_to_string.at(value))
	}

	enum aasamples_items_enum {
		aasamples_items_SAMPLES_0 = 0,	
		aasamples_items_SAMPLES_2 = 2,	
		aasamples_items_SAMPLES_4 = 4,	
		aasamples_items_SAMPLES_8 = 8,	
		aasamples_items_SAMPLES_16 = 16	
	};

	std::map<std::string, int> create_string_to_aasamples_items() {
		return {{"SAMPLES_0", aasamples_items_SAMPLES_0}, {"SAMPLES_2", aasamples_items_SAMPLES_2}, {"SAMPLES_4", aasamples_items_SAMPLES_4}, {"SAMPLES_8", aasamples_items_SAMPLES_8}, {"SAMPLES_16", aasamples_items_SAMPLES_16}};
	};

	std::map<int, std::string> create_aasamples_items_to_string() {
		return {{aasamples_items_SAMPLES_0, "SAMPLES_0"}, {aasamples_items_SAMPLES_2, "SAMPLES_2"}, {aasamples_items_SAMPLES_4, "SAMPLES_4"}, {aasamples_items_SAMPLES_8, "SAMPLES_8"}, {aasamples_items_SAMPLES_16, "SAMPLES_16"}};
	};

	const std::map<std::string, int> string_to_aasamples_items = create_string_to_aasamples_items();
	const std::map<int, std::string> aasamples_items_to_string = create_aasamples_items_to_string();

	aasamples_items_enum samples() {
		STRING_TYPE_GETTER("samples", static_cast<aasamples_items_enum>(string_to_aasamples_items.at(resstr)))
	}

	void samples(aasamples_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "samples", aasamples_items_to_string.at(value))
	}

	int depth() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "depth")
	}

	void depth(int value) {
		PRIMITIVE_TYPES_SETTER("i", "depth", value)
	}

	enum event_type_items_enum {
		event_type_items_NONE = 0,	
		event_type_items_LEFTMOUSE = 1,	
		event_type_items_MIDDLEMOUSE = 2,	
		event_type_items_RIGHTMOUSE = 3,	
		event_type_items_BUTTON4MOUSE = 7,	
		event_type_items_BUTTON5MOUSE = 8,	
		event_type_items_BUTTON6MOUSE = 18,	
		event_type_items_BUTTON7MOUSE = 19,	
		event_type_items_ACTIONMOUSE = 5,	
		event_type_items_SELECTMOUSE = 6,	
		event_type_items_MOUSEMOVE = 4,	
		event_type_items_INBETWEEN_MOUSEMOVE = 17,	
		event_type_items_TRACKPADPAN = 14,	
		event_type_items_TRACKPADZOOM = 15,	
		event_type_items_MOUSEROTATE = 16,	
		event_type_items_WHEELUPMOUSE = 10,	
		event_type_items_WHEELDOWNMOUSE = 11,	
		event_type_items_WHEELINMOUSE = 12,	
		event_type_items_WHEELOUTMOUSE = 13,	
		event_type_items_EVT_TWEAK_L = 20482,	
		event_type_items_EVT_TWEAK_M = 20483,	
		event_type_items_EVT_TWEAK_R = 20484,	
		event_type_items_EVT_TWEAK_A = 20485,	
		event_type_items_EVT_TWEAK_S = 20486,	
		event_type_items_A = 97,	
		event_type_items_B = 98,	
		event_type_items_C = 99,	
		event_type_items_D = 100,	
		event_type_items_E = 101,	
		event_type_items_F = 102,	
		event_type_items_G = 103,	
		event_type_items_H = 104,	
		event_type_items_I = 105,	
		event_type_items_J = 106,	
		event_type_items_K = 107,	
		event_type_items_L = 108,	
		event_type_items_M = 109,	
		event_type_items_N = 110,	
		event_type_items_O = 111,	
		event_type_items_P = 112,	
		event_type_items_Q = 113,	
		event_type_items_R = 114,	
		event_type_items_S = 115,	
		event_type_items_T = 116,	
		event_type_items_U = 117,	
		event_type_items_V = 118,	
		event_type_items_W = 119,	
		event_type_items_X = 120,	
		event_type_items_Y = 121,	
		event_type_items_Z = 122,	
		event_type_items_ZERO = 48,	
		event_type_items_ONE = 49,	
		event_type_items_TWO = 50,	
		event_type_items_THREE = 51,	
		event_type_items_FOUR = 52,	
		event_type_items_FIVE = 53,	
		event_type_items_SIX = 54,	
		event_type_items_SEVEN = 55,	
		event_type_items_EIGHT = 56,	
		event_type_items_NINE = 57,	
		event_type_items_LEFT_CTRL = 212,	
		event_type_items_LEFT_ALT = 213,	
		event_type_items_LEFT_SHIFT = 217,	
		event_type_items_RIGHT_ALT = 214,	
		event_type_items_RIGHT_CTRL = 215,	
		event_type_items_RIGHT_SHIFT = 216,	
		event_type_items_OSKEY = 172,	
		event_type_items_GRLESS = 173,	
		event_type_items_ESC = 218,	
		event_type_items_TAB = 219,	
		event_type_items_RET = 220,	
		event_type_items_SPACE = 221,	
		event_type_items_LINE_FEED = 222,	
		event_type_items_BACK_SPACE = 223,	
		event_type_items_DEL = 224,	
		event_type_items_SEMI_COLON = 225,	
		event_type_items_PERIOD = 226,	
		event_type_items_COMMA = 227,	
		event_type_items_QUOTE = 228,	
		event_type_items_ACCENT_GRAVE = 229,	
		event_type_items_MINUS = 230,	
		event_type_items_SLASH = 232,	
		event_type_items_BACK_SLASH = 233,	
		event_type_items_EQUAL = 234,	
		event_type_items_LEFT_BRACKET = 235,	
		event_type_items_RIGHT_BRACKET = 236,	
		event_type_items_LEFT_ARROW = 137,	
		event_type_items_DOWN_ARROW = 138,	
		event_type_items_RIGHT_ARROW = 139,	
		event_type_items_UP_ARROW = 140,	
		event_type_items_NUMPAD_2 = 152,	
		event_type_items_NUMPAD_4 = 154,	
		event_type_items_NUMPAD_6 = 156,	
		event_type_items_NUMPAD_8 = 158,	
		event_type_items_NUMPAD_1 = 151,	
		event_type_items_NUMPAD_3 = 153,	
		event_type_items_NUMPAD_5 = 155,	
		event_type_items_NUMPAD_7 = 157,	
		event_type_items_NUMPAD_9 = 159,	
		event_type_items_NUMPAD_PERIOD = 199,	
		event_type_items_NUMPAD_SLASH = 161,	
		event_type_items_NUMPAD_ASTERIX = 160,	
		event_type_items_NUMPAD_0 = 150,	
		event_type_items_NUMPAD_MINUS = 162,	
		event_type_items_NUMPAD_ENTER = 163,	
		event_type_items_NUMPAD_PLUS = 164,	
		event_type_items_F1 = 300,	
		event_type_items_F2 = 301,	
		event_type_items_F3 = 302,	
		event_type_items_F4 = 303,	
		event_type_items_F5 = 304,	
		event_type_items_F6 = 305,	
		event_type_items_F7 = 306,	
		event_type_items_F8 = 307,	
		event_type_items_F9 = 308,	
		event_type_items_F10 = 309,	
		event_type_items_F11 = 310,	
		event_type_items_F12 = 311,	
		event_type_items_F13 = 312,	
		event_type_items_F14 = 313,	
		event_type_items_F15 = 314,	
		event_type_items_F16 = 315,	
		event_type_items_F17 = 316,	
		event_type_items_F18 = 317,	
		event_type_items_F19 = 318,	
		event_type_items_PAUSE = 165,	
		event_type_items_INSERT = 166,	
		event_type_items_HOME = 167,	
		event_type_items_PAGE_UP = 168,	
		event_type_items_PAGE_DOWN = 169,	
		event_type_items_END = 170,	
		event_type_items_MEDIA_PLAY = 174,	
		event_type_items_MEDIA_STOP = 175,	
		event_type_items_MEDIA_FIRST = 176,	
		event_type_items_MEDIA_LAST = 177,	
		event_type_items_TEXTINPUT = -2,	
		event_type_items_WINDOW_DEACTIVATE = 260,	
		event_type_items_TIMER = 272,	
		event_type_items_TIMER0 = 273,	
		event_type_items_TIMER1 = 274,	
		event_type_items_TIMER2 = 275,	
		event_type_items_TIMER_JOBS = 276,	
		event_type_items_TIMER_AUTOSAVE = 277,	
		event_type_items_TIMER_REPORT = 278,	
		event_type_items_TIMERREGION = 279,	
		event_type_items_NDOF_MOTION = 400,	
		event_type_items_NDOF_BUTTON_MENU = 401,	
		event_type_items_NDOF_BUTTON_FIT = 402,	
		event_type_items_NDOF_BUTTON_TOP = 403,	
		event_type_items_NDOF_BUTTON_BOTTOM = 404,	
		event_type_items_NDOF_BUTTON_LEFT = 405,	
		event_type_items_NDOF_BUTTON_RIGHT = 406,	
		event_type_items_NDOF_BUTTON_FRONT = 407,	
		event_type_items_NDOF_BUTTON_BACK = 408,	
		event_type_items_NDOF_BUTTON_ISO1 = 409,	
		event_type_items_NDOF_BUTTON_ISO2 = 410,	
		event_type_items_NDOF_BUTTON_ROLL_CW = 411,	
		event_type_items_NDOF_BUTTON_ROLL_CCW = 412,	
		event_type_items_NDOF_BUTTON_SPIN_CW = 413,	
		event_type_items_NDOF_BUTTON_SPIN_CCW = 414,	
		event_type_items_NDOF_BUTTON_TILT_CW = 415,	
		event_type_items_NDOF_BUTTON_TILT_CCW = 416,	
		event_type_items_NDOF_BUTTON_ROTATE = 417,	
		event_type_items_NDOF_BUTTON_PANZOOM = 418,	
		event_type_items_NDOF_BUTTON_DOMINANT = 419,	
		event_type_items_NDOF_BUTTON_PLUS = 420,	
		event_type_items_NDOF_BUTTON_MINUS = 421,	
		event_type_items_NDOF_BUTTON_ESC = 422,	
		event_type_items_NDOF_BUTTON_ALT = 423,	
		event_type_items_NDOF_BUTTON_SHIFT = 424,	
		event_type_items_NDOF_BUTTON_CTRL = 425,	
		event_type_items_NDOF_BUTTON_1 = 426,	
		event_type_items_NDOF_BUTTON_2 = 427,	
		event_type_items_NDOF_BUTTON_3 = 428,	
		event_type_items_NDOF_BUTTON_4 = 429,	
		event_type_items_NDOF_BUTTON_5 = 430,	
		event_type_items_NDOF_BUTTON_6 = 431,	
		event_type_items_NDOF_BUTTON_7 = 432,	
		event_type_items_NDOF_BUTTON_8 = 433,	
		event_type_items_NDOF_BUTTON_9 = 434,	
		event_type_items_NDOF_BUTTON_10 = 435,	
		event_type_items_NDOF_BUTTON_A = 436,	
		event_type_items_NDOF_BUTTON_B = 437,	
		event_type_items_NDOF_BUTTON_C = 438	
	};

	std::map<std::string, int> create_string_to_event_type_items() {
		return {{"NONE", event_type_items_NONE}, {"LEFTMOUSE", event_type_items_LEFTMOUSE}, {"MIDDLEMOUSE", event_type_items_MIDDLEMOUSE}, {"RIGHTMOUSE", event_type_items_RIGHTMOUSE}, {"BUTTON4MOUSE", event_type_items_BUTTON4MOUSE}, {"BUTTON5MOUSE", event_type_items_BUTTON5MOUSE}, {"BUTTON6MOUSE", event_type_items_BUTTON6MOUSE}, {"BUTTON7MOUSE", event_type_items_BUTTON7MOUSE}, {"ACTIONMOUSE", event_type_items_ACTIONMOUSE}, {"SELECTMOUSE", event_type_items_SELECTMOUSE}, {"MOUSEMOVE", event_type_items_MOUSEMOVE}, {"INBETWEEN_MOUSEMOVE", event_type_items_INBETWEEN_MOUSEMOVE}, {"TRACKPADPAN", event_type_items_TRACKPADPAN}, {"TRACKPADZOOM", event_type_items_TRACKPADZOOM}, {"MOUSEROTATE", event_type_items_MOUSEROTATE}, {"WHEELUPMOUSE", event_type_items_WHEELUPMOUSE}, {"WHEELDOWNMOUSE", event_type_items_WHEELDOWNMOUSE}, {"WHEELINMOUSE", event_type_items_WHEELINMOUSE}, {"WHEELOUTMOUSE", event_type_items_WHEELOUTMOUSE}, {"EVT_TWEAK_L", event_type_items_EVT_TWEAK_L}, {"EVT_TWEAK_M", event_type_items_EVT_TWEAK_M}, {"EVT_TWEAK_R", event_type_items_EVT_TWEAK_R}, {"EVT_TWEAK_A", event_type_items_EVT_TWEAK_A}, {"EVT_TWEAK_S", event_type_items_EVT_TWEAK_S}, {"A", event_type_items_A}, {"B", event_type_items_B}, {"C", event_type_items_C}, {"D", event_type_items_D}, {"E", event_type_items_E}, {"F", event_type_items_F}, {"G", event_type_items_G}, {"H", event_type_items_H}, {"I", event_type_items_I}, {"J", event_type_items_J}, {"K", event_type_items_K}, {"L", event_type_items_L}, {"M", event_type_items_M}, {"N", event_type_items_N}, {"O", event_type_items_O}, {"P", event_type_items_P}, {"Q", event_type_items_Q}, {"R", event_type_items_R}, {"S", event_type_items_S}, {"T", event_type_items_T}, {"U", event_type_items_U}, {"V", event_type_items_V}, {"W", event_type_items_W}, {"X", event_type_items_X}, {"Y", event_type_items_Y}, {"Z", event_type_items_Z}, {"ZERO", event_type_items_ZERO}, {"ONE", event_type_items_ONE}, {"TWO", event_type_items_TWO}, {"THREE", event_type_items_THREE}, {"FOUR", event_type_items_FOUR}, {"FIVE", event_type_items_FIVE}, {"SIX", event_type_items_SIX}, {"SEVEN", event_type_items_SEVEN}, {"EIGHT", event_type_items_EIGHT}, {"NINE", event_type_items_NINE}, {"LEFT_CTRL", event_type_items_LEFT_CTRL}, {"LEFT_ALT", event_type_items_LEFT_ALT}, {"LEFT_SHIFT", event_type_items_LEFT_SHIFT}, {"RIGHT_ALT", event_type_items_RIGHT_ALT}, {"RIGHT_CTRL", event_type_items_RIGHT_CTRL}, {"RIGHT_SHIFT", event_type_items_RIGHT_SHIFT}, {"OSKEY", event_type_items_OSKEY}, {"GRLESS", event_type_items_GRLESS}, {"ESC", event_type_items_ESC}, {"TAB", event_type_items_TAB}, {"RET", event_type_items_RET}, {"SPACE", event_type_items_SPACE}, {"LINE_FEED", event_type_items_LINE_FEED}, {"BACK_SPACE", event_type_items_BACK_SPACE}, {"DEL", event_type_items_DEL}, {"SEMI_COLON", event_type_items_SEMI_COLON}, {"PERIOD", event_type_items_PERIOD}, {"COMMA", event_type_items_COMMA}, {"QUOTE", event_type_items_QUOTE}, {"ACCENT_GRAVE", event_type_items_ACCENT_GRAVE}, {"MINUS", event_type_items_MINUS}, {"SLASH", event_type_items_SLASH}, {"BACK_SLASH", event_type_items_BACK_SLASH}, {"EQUAL", event_type_items_EQUAL}, {"LEFT_BRACKET", event_type_items_LEFT_BRACKET}, {"RIGHT_BRACKET", event_type_items_RIGHT_BRACKET}, {"LEFT_ARROW", event_type_items_LEFT_ARROW}, {"DOWN_ARROW", event_type_items_DOWN_ARROW}, {"RIGHT_ARROW", event_type_items_RIGHT_ARROW}, {"UP_ARROW", event_type_items_UP_ARROW}, {"NUMPAD_2", event_type_items_NUMPAD_2}, {"NUMPAD_4", event_type_items_NUMPAD_4}, {"NUMPAD_6", event_type_items_NUMPAD_6}, {"NUMPAD_8", event_type_items_NUMPAD_8}, {"NUMPAD_1", event_type_items_NUMPAD_1}, {"NUMPAD_3", event_type_items_NUMPAD_3}, {"NUMPAD_5", event_type_items_NUMPAD_5}, {"NUMPAD_7", event_type_items_NUMPAD_7}, {"NUMPAD_9", event_type_items_NUMPAD_9}, {"NUMPAD_PERIOD", event_type_items_NUMPAD_PERIOD}, {"NUMPAD_SLASH", event_type_items_NUMPAD_SLASH}, {"NUMPAD_ASTERIX", event_type_items_NUMPAD_ASTERIX}, {"NUMPAD_0", event_type_items_NUMPAD_0}, {"NUMPAD_MINUS", event_type_items_NUMPAD_MINUS}, {"NUMPAD_ENTER", event_type_items_NUMPAD_ENTER}, {"NUMPAD_PLUS", event_type_items_NUMPAD_PLUS}, {"F1", event_type_items_F1}, {"F2", event_type_items_F2}, {"F3", event_type_items_F3}, {"F4", event_type_items_F4}, {"F5", event_type_items_F5}, {"F6", event_type_items_F6}, {"F7", event_type_items_F7}, {"F8", event_type_items_F8}, {"F9", event_type_items_F9}, {"F10", event_type_items_F10}, {"F11", event_type_items_F11}, {"F12", event_type_items_F12}, {"F13", event_type_items_F13}, {"F14", event_type_items_F14}, {"F15", event_type_items_F15}, {"F16", event_type_items_F16}, {"F17", event_type_items_F17}, {"F18", event_type_items_F18}, {"F19", event_type_items_F19}, {"PAUSE", event_type_items_PAUSE}, {"INSERT", event_type_items_INSERT}, {"HOME", event_type_items_HOME}, {"PAGE_UP", event_type_items_PAGE_UP}, {"PAGE_DOWN", event_type_items_PAGE_DOWN}, {"END", event_type_items_END}, {"MEDIA_PLAY", event_type_items_MEDIA_PLAY}, {"MEDIA_STOP", event_type_items_MEDIA_STOP}, {"MEDIA_FIRST", event_type_items_MEDIA_FIRST}, {"MEDIA_LAST", event_type_items_MEDIA_LAST}, {"TEXTINPUT", event_type_items_TEXTINPUT}, {"WINDOW_DEACTIVATE", event_type_items_WINDOW_DEACTIVATE}, {"TIMER", event_type_items_TIMER}, {"TIMER0", event_type_items_TIMER0}, {"TIMER1", event_type_items_TIMER1}, {"TIMER2", event_type_items_TIMER2}, {"TIMER_JOBS", event_type_items_TIMER_JOBS}, {"TIMER_AUTOSAVE", event_type_items_TIMER_AUTOSAVE}, {"TIMER_REPORT", event_type_items_TIMER_REPORT}, {"TIMERREGION", event_type_items_TIMERREGION}, {"NDOF_MOTION", event_type_items_NDOF_MOTION}, {"NDOF_BUTTON_MENU", event_type_items_NDOF_BUTTON_MENU}, {"NDOF_BUTTON_FIT", event_type_items_NDOF_BUTTON_FIT}, {"NDOF_BUTTON_TOP", event_type_items_NDOF_BUTTON_TOP}, {"NDOF_BUTTON_BOTTOM", event_type_items_NDOF_BUTTON_BOTTOM}, {"NDOF_BUTTON_LEFT", event_type_items_NDOF_BUTTON_LEFT}, {"NDOF_BUTTON_RIGHT", event_type_items_NDOF_BUTTON_RIGHT}, {"NDOF_BUTTON_FRONT", event_type_items_NDOF_BUTTON_FRONT}, {"NDOF_BUTTON_BACK", event_type_items_NDOF_BUTTON_BACK}, {"NDOF_BUTTON_ISO1", event_type_items_NDOF_BUTTON_ISO1}, {"NDOF_BUTTON_ISO2", event_type_items_NDOF_BUTTON_ISO2}, {"NDOF_BUTTON_ROLL_CW", event_type_items_NDOF_BUTTON_ROLL_CW}, {"NDOF_BUTTON_ROLL_CCW", event_type_items_NDOF_BUTTON_ROLL_CCW}, {"NDOF_BUTTON_SPIN_CW", event_type_items_NDOF_BUTTON_SPIN_CW}, {"NDOF_BUTTON_SPIN_CCW", event_type_items_NDOF_BUTTON_SPIN_CCW}, {"NDOF_BUTTON_TILT_CW", event_type_items_NDOF_BUTTON_TILT_CW}, {"NDOF_BUTTON_TILT_CCW", event_type_items_NDOF_BUTTON_TILT_CCW}, {"NDOF_BUTTON_ROTATE", event_type_items_NDOF_BUTTON_ROTATE}, {"NDOF_BUTTON_PANZOOM", event_type_items_NDOF_BUTTON_PANZOOM}, {"NDOF_BUTTON_DOMINANT", event_type_items_NDOF_BUTTON_DOMINANT}, {"NDOF_BUTTON_PLUS", event_type_items_NDOF_BUTTON_PLUS}, {"NDOF_BUTTON_MINUS", event_type_items_NDOF_BUTTON_MINUS}, {"NDOF_BUTTON_ESC", event_type_items_NDOF_BUTTON_ESC}, {"NDOF_BUTTON_ALT", event_type_items_NDOF_BUTTON_ALT}, {"NDOF_BUTTON_SHIFT", event_type_items_NDOF_BUTTON_SHIFT}, {"NDOF_BUTTON_CTRL", event_type_items_NDOF_BUTTON_CTRL}, {"NDOF_BUTTON_1", event_type_items_NDOF_BUTTON_1}, {"NDOF_BUTTON_2", event_type_items_NDOF_BUTTON_2}, {"NDOF_BUTTON_3", event_type_items_NDOF_BUTTON_3}, {"NDOF_BUTTON_4", event_type_items_NDOF_BUTTON_4}, {"NDOF_BUTTON_5", event_type_items_NDOF_BUTTON_5}, {"NDOF_BUTTON_6", event_type_items_NDOF_BUTTON_6}, {"NDOF_BUTTON_7", event_type_items_NDOF_BUTTON_7}, {"NDOF_BUTTON_8", event_type_items_NDOF_BUTTON_8}, {"NDOF_BUTTON_9", event_type_items_NDOF_BUTTON_9}, {"NDOF_BUTTON_10", event_type_items_NDOF_BUTTON_10}, {"NDOF_BUTTON_A", event_type_items_NDOF_BUTTON_A}, {"NDOF_BUTTON_B", event_type_items_NDOF_BUTTON_B}, {"NDOF_BUTTON_C", event_type_items_NDOF_BUTTON_C}};
	};

	std::map<int, std::string> create_event_type_items_to_string() {
		return {{event_type_items_NONE, "NONE"}, {event_type_items_LEFTMOUSE, "LEFTMOUSE"}, {event_type_items_MIDDLEMOUSE, "MIDDLEMOUSE"}, {event_type_items_RIGHTMOUSE, "RIGHTMOUSE"}, {event_type_items_BUTTON4MOUSE, "BUTTON4MOUSE"}, {event_type_items_BUTTON5MOUSE, "BUTTON5MOUSE"}, {event_type_items_BUTTON6MOUSE, "BUTTON6MOUSE"}, {event_type_items_BUTTON7MOUSE, "BUTTON7MOUSE"}, {event_type_items_ACTIONMOUSE, "ACTIONMOUSE"}, {event_type_items_SELECTMOUSE, "SELECTMOUSE"}, {event_type_items_MOUSEMOVE, "MOUSEMOVE"}, {event_type_items_INBETWEEN_MOUSEMOVE, "INBETWEEN_MOUSEMOVE"}, {event_type_items_TRACKPADPAN, "TRACKPADPAN"}, {event_type_items_TRACKPADZOOM, "TRACKPADZOOM"}, {event_type_items_MOUSEROTATE, "MOUSEROTATE"}, {event_type_items_WHEELUPMOUSE, "WHEELUPMOUSE"}, {event_type_items_WHEELDOWNMOUSE, "WHEELDOWNMOUSE"}, {event_type_items_WHEELINMOUSE, "WHEELINMOUSE"}, {event_type_items_WHEELOUTMOUSE, "WHEELOUTMOUSE"}, {event_type_items_EVT_TWEAK_L, "EVT_TWEAK_L"}, {event_type_items_EVT_TWEAK_M, "EVT_TWEAK_M"}, {event_type_items_EVT_TWEAK_R, "EVT_TWEAK_R"}, {event_type_items_EVT_TWEAK_A, "EVT_TWEAK_A"}, {event_type_items_EVT_TWEAK_S, "EVT_TWEAK_S"}, {event_type_items_A, "A"}, {event_type_items_B, "B"}, {event_type_items_C, "C"}, {event_type_items_D, "D"}, {event_type_items_E, "E"}, {event_type_items_F, "F"}, {event_type_items_G, "G"}, {event_type_items_H, "H"}, {event_type_items_I, "I"}, {event_type_items_J, "J"}, {event_type_items_K, "K"}, {event_type_items_L, "L"}, {event_type_items_M, "M"}, {event_type_items_N, "N"}, {event_type_items_O, "O"}, {event_type_items_P, "P"}, {event_type_items_Q, "Q"}, {event_type_items_R, "R"}, {event_type_items_S, "S"}, {event_type_items_T, "T"}, {event_type_items_U, "U"}, {event_type_items_V, "V"}, {event_type_items_W, "W"}, {event_type_items_X, "X"}, {event_type_items_Y, "Y"}, {event_type_items_Z, "Z"}, {event_type_items_ZERO, "ZERO"}, {event_type_items_ONE, "ONE"}, {event_type_items_TWO, "TWO"}, {event_type_items_THREE, "THREE"}, {event_type_items_FOUR, "FOUR"}, {event_type_items_FIVE, "FIVE"}, {event_type_items_SIX, "SIX"}, {event_type_items_SEVEN, "SEVEN"}, {event_type_items_EIGHT, "EIGHT"}, {event_type_items_NINE, "NINE"}, {event_type_items_LEFT_CTRL, "LEFT_CTRL"}, {event_type_items_LEFT_ALT, "LEFT_ALT"}, {event_type_items_LEFT_SHIFT, "LEFT_SHIFT"}, {event_type_items_RIGHT_ALT, "RIGHT_ALT"}, {event_type_items_RIGHT_CTRL, "RIGHT_CTRL"}, {event_type_items_RIGHT_SHIFT, "RIGHT_SHIFT"}, {event_type_items_OSKEY, "OSKEY"}, {event_type_items_GRLESS, "GRLESS"}, {event_type_items_ESC, "ESC"}, {event_type_items_TAB, "TAB"}, {event_type_items_RET, "RET"}, {event_type_items_SPACE, "SPACE"}, {event_type_items_LINE_FEED, "LINE_FEED"}, {event_type_items_BACK_SPACE, "BACK_SPACE"}, {event_type_items_DEL, "DEL"}, {event_type_items_SEMI_COLON, "SEMI_COLON"}, {event_type_items_PERIOD, "PERIOD"}, {event_type_items_COMMA, "COMMA"}, {event_type_items_QUOTE, "QUOTE"}, {event_type_items_ACCENT_GRAVE, "ACCENT_GRAVE"}, {event_type_items_MINUS, "MINUS"}, {event_type_items_SLASH, "SLASH"}, {event_type_items_BACK_SLASH, "BACK_SLASH"}, {event_type_items_EQUAL, "EQUAL"}, {event_type_items_LEFT_BRACKET, "LEFT_BRACKET"}, {event_type_items_RIGHT_BRACKET, "RIGHT_BRACKET"}, {event_type_items_LEFT_ARROW, "LEFT_ARROW"}, {event_type_items_DOWN_ARROW, "DOWN_ARROW"}, {event_type_items_RIGHT_ARROW, "RIGHT_ARROW"}, {event_type_items_UP_ARROW, "UP_ARROW"}, {event_type_items_NUMPAD_2, "NUMPAD_2"}, {event_type_items_NUMPAD_4, "NUMPAD_4"}, {event_type_items_NUMPAD_6, "NUMPAD_6"}, {event_type_items_NUMPAD_8, "NUMPAD_8"}, {event_type_items_NUMPAD_1, "NUMPAD_1"}, {event_type_items_NUMPAD_3, "NUMPAD_3"}, {event_type_items_NUMPAD_5, "NUMPAD_5"}, {event_type_items_NUMPAD_7, "NUMPAD_7"}, {event_type_items_NUMPAD_9, "NUMPAD_9"}, {event_type_items_NUMPAD_PERIOD, "NUMPAD_PERIOD"}, {event_type_items_NUMPAD_SLASH, "NUMPAD_SLASH"}, {event_type_items_NUMPAD_ASTERIX, "NUMPAD_ASTERIX"}, {event_type_items_NUMPAD_0, "NUMPAD_0"}, {event_type_items_NUMPAD_MINUS, "NUMPAD_MINUS"}, {event_type_items_NUMPAD_ENTER, "NUMPAD_ENTER"}, {event_type_items_NUMPAD_PLUS, "NUMPAD_PLUS"}, {event_type_items_F1, "F1"}, {event_type_items_F2, "F2"}, {event_type_items_F3, "F3"}, {event_type_items_F4, "F4"}, {event_type_items_F5, "F5"}, {event_type_items_F6, "F6"}, {event_type_items_F7, "F7"}, {event_type_items_F8, "F8"}, {event_type_items_F9, "F9"}, {event_type_items_F10, "F10"}, {event_type_items_F11, "F11"}, {event_type_items_F12, "F12"}, {event_type_items_F13, "F13"}, {event_type_items_F14, "F14"}, {event_type_items_F15, "F15"}, {event_type_items_F16, "F16"}, {event_type_items_F17, "F17"}, {event_type_items_F18, "F18"}, {event_type_items_F19, "F19"}, {event_type_items_PAUSE, "PAUSE"}, {event_type_items_INSERT, "INSERT"}, {event_type_items_HOME, "HOME"}, {event_type_items_PAGE_UP, "PAGE_UP"}, {event_type_items_PAGE_DOWN, "PAGE_DOWN"}, {event_type_items_END, "END"}, {event_type_items_MEDIA_PLAY, "MEDIA_PLAY"}, {event_type_items_MEDIA_STOP, "MEDIA_STOP"}, {event_type_items_MEDIA_FIRST, "MEDIA_FIRST"}, {event_type_items_MEDIA_LAST, "MEDIA_LAST"}, {event_type_items_TEXTINPUT, "TEXTINPUT"}, {event_type_items_WINDOW_DEACTIVATE, "WINDOW_DEACTIVATE"}, {event_type_items_TIMER, "TIMER"}, {event_type_items_TIMER0, "TIMER0"}, {event_type_items_TIMER1, "TIMER1"}, {event_type_items_TIMER2, "TIMER2"}, {event_type_items_TIMER_JOBS, "TIMER_JOBS"}, {event_type_items_TIMER_AUTOSAVE, "TIMER_AUTOSAVE"}, {event_type_items_TIMER_REPORT, "TIMER_REPORT"}, {event_type_items_TIMERREGION, "TIMERREGION"}, {event_type_items_NDOF_MOTION, "NDOF_MOTION"}, {event_type_items_NDOF_BUTTON_MENU, "NDOF_BUTTON_MENU"}, {event_type_items_NDOF_BUTTON_FIT, "NDOF_BUTTON_FIT"}, {event_type_items_NDOF_BUTTON_TOP, "NDOF_BUTTON_TOP"}, {event_type_items_NDOF_BUTTON_BOTTOM, "NDOF_BUTTON_BOTTOM"}, {event_type_items_NDOF_BUTTON_LEFT, "NDOF_BUTTON_LEFT"}, {event_type_items_NDOF_BUTTON_RIGHT, "NDOF_BUTTON_RIGHT"}, {event_type_items_NDOF_BUTTON_FRONT, "NDOF_BUTTON_FRONT"}, {event_type_items_NDOF_BUTTON_BACK, "NDOF_BUTTON_BACK"}, {event_type_items_NDOF_BUTTON_ISO1, "NDOF_BUTTON_ISO1"}, {event_type_items_NDOF_BUTTON_ISO2, "NDOF_BUTTON_ISO2"}, {event_type_items_NDOF_BUTTON_ROLL_CW, "NDOF_BUTTON_ROLL_CW"}, {event_type_items_NDOF_BUTTON_ROLL_CCW, "NDOF_BUTTON_ROLL_CCW"}, {event_type_items_NDOF_BUTTON_SPIN_CW, "NDOF_BUTTON_SPIN_CW"}, {event_type_items_NDOF_BUTTON_SPIN_CCW, "NDOF_BUTTON_SPIN_CCW"}, {event_type_items_NDOF_BUTTON_TILT_CW, "NDOF_BUTTON_TILT_CW"}, {event_type_items_NDOF_BUTTON_TILT_CCW, "NDOF_BUTTON_TILT_CCW"}, {event_type_items_NDOF_BUTTON_ROTATE, "NDOF_BUTTON_ROTATE"}, {event_type_items_NDOF_BUTTON_PANZOOM, "NDOF_BUTTON_PANZOOM"}, {event_type_items_NDOF_BUTTON_DOMINANT, "NDOF_BUTTON_DOMINANT"}, {event_type_items_NDOF_BUTTON_PLUS, "NDOF_BUTTON_PLUS"}, {event_type_items_NDOF_BUTTON_MINUS, "NDOF_BUTTON_MINUS"}, {event_type_items_NDOF_BUTTON_ESC, "NDOF_BUTTON_ESC"}, {event_type_items_NDOF_BUTTON_ALT, "NDOF_BUTTON_ALT"}, {event_type_items_NDOF_BUTTON_SHIFT, "NDOF_BUTTON_SHIFT"}, {event_type_items_NDOF_BUTTON_CTRL, "NDOF_BUTTON_CTRL"}, {event_type_items_NDOF_BUTTON_1, "NDOF_BUTTON_1"}, {event_type_items_NDOF_BUTTON_2, "NDOF_BUTTON_2"}, {event_type_items_NDOF_BUTTON_3, "NDOF_BUTTON_3"}, {event_type_items_NDOF_BUTTON_4, "NDOF_BUTTON_4"}, {event_type_items_NDOF_BUTTON_5, "NDOF_BUTTON_5"}, {event_type_items_NDOF_BUTTON_6, "NDOF_BUTTON_6"}, {event_type_items_NDOF_BUTTON_7, "NDOF_BUTTON_7"}, {event_type_items_NDOF_BUTTON_8, "NDOF_BUTTON_8"}, {event_type_items_NDOF_BUTTON_9, "NDOF_BUTTON_9"}, {event_type_items_NDOF_BUTTON_10, "NDOF_BUTTON_10"}, {event_type_items_NDOF_BUTTON_A, "NDOF_BUTTON_A"}, {event_type_items_NDOF_BUTTON_B, "NDOF_BUTTON_B"}, {event_type_items_NDOF_BUTTON_C, "NDOF_BUTTON_C"}};
	};

	const std::map<std::string, int> string_to_event_type_items = create_string_to_event_type_items();
	const std::map<int, std::string> event_type_items_to_string = create_event_type_items_to_string();

	event_type_items_enum exit_key() {
		STRING_TYPE_GETTER("exit_key", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void exit_key(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "exit_key", event_type_items_to_string.at(value))
	}

	enum storage_items_enum {
		storage_items_AUTO = 0,	
		storage_items_IMMEDIATE = 1,	
		storage_items_VERTEX_ARRAY = 2	
	};

	std::map<std::string, int> create_string_to_storage_items() {
		return {{"AUTO", storage_items_AUTO}, {"IMMEDIATE", storage_items_IMMEDIATE}, {"VERTEX_ARRAY", storage_items_VERTEX_ARRAY}};
	};

	std::map<int, std::string> create_storage_items_to_string() {
		return {{storage_items_AUTO, "AUTO"}, {storage_items_IMMEDIATE, "IMMEDIATE"}, {storage_items_VERTEX_ARRAY, "VERTEX_ARRAY"}};
	};

	const std::map<std::string, int> string_to_storage_items = create_string_to_storage_items();
	const std::map<int, std::string> storage_items_to_string = create_storage_items_to_string();

	storage_items_enum raster_storage() {
		STRING_TYPE_GETTER("raster_storage", static_cast<storage_items_enum>(string_to_storage_items.at(resstr)))
	}

	void raster_storage(storage_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "raster_storage", storage_items_to_string.at(value))
	}

	int frequency() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frequency")
	}

	void frequency(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frequency", value)
	}

	bool show_fullscreen() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_fullscreen")
	}

	void show_fullscreen(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_fullscreen", value)
	}

	bool use_desktop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_desktop")
	}

	void use_desktop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_desktop", value)
	}

	enum framing_types_items_enum {
		framing_types_items_LETTERBOX = 0,	
		framing_types_items_EXTEND = 1,	
		framing_types_items_SCALE = 2	
	};

	std::map<std::string, int> create_string_to_framing_types_items() {
		return {{"LETTERBOX", framing_types_items_LETTERBOX}, {"EXTEND", framing_types_items_EXTEND}, {"SCALE", framing_types_items_SCALE}};
	};

	std::map<int, std::string> create_framing_types_items_to_string() {
		return {{framing_types_items_LETTERBOX, "LETTERBOX"}, {framing_types_items_EXTEND, "EXTEND"}, {framing_types_items_SCALE, "SCALE"}};
	};

	const std::map<std::string, int> string_to_framing_types_items = create_string_to_framing_types_items();
	const std::map<int, std::string> framing_types_items_to_string = create_framing_types_items_to_string();

	framing_types_items_enum frame_type() {
		STRING_TYPE_GETTER("frame_type", static_cast<framing_types_items_enum>(string_to_framing_types_items.at(resstr)))
	}

	void frame_type(framing_types_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "frame_type", framing_types_items_to_string.at(value))
	}

	VFLOAT3 frame_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_color", 3)
	}

	void frame_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_color", 3)
	}

	enum stereo_items_enum {
		stereo_items_NONE = 1,	
		stereo_items_STEREO = 2,	
		stereo_items_DOME = 3	
	};

	std::map<std::string, int> create_string_to_stereo_items() {
		return {{"NONE", stereo_items_NONE}, {"STEREO", stereo_items_STEREO}, {"DOME", stereo_items_DOME}};
	};

	std::map<int, std::string> create_stereo_items_to_string() {
		return {{stereo_items_NONE, "NONE"}, {stereo_items_STEREO, "STEREO"}, {stereo_items_DOME, "DOME"}};
	};

	const std::map<std::string, int> string_to_stereo_items = create_string_to_stereo_items();
	const std::map<int, std::string> stereo_items_to_string = create_stereo_items_to_string();

	stereo_items_enum stereo() {
		STRING_TYPE_GETTER("stereo", static_cast<stereo_items_enum>(string_to_stereo_items.at(resstr)))
	}

	void stereo(stereo_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "stereo", stereo_items_to_string.at(value))
	}

	enum stereo_modes_items_enum {
		stereo_modes_items_QUADBUFFERED = 2,	
		stereo_modes_items_ABOVEBELOW = 3,	
		stereo_modes_items_INTERLACED = 4,	
		stereo_modes_items_ANAGLYPH = 5,	
		stereo_modes_items_SIDEBYSIDE = 6,	
		stereo_modes_items_VINTERLACE = 7,	
		stereo_modes_items_3DTVTOPBOTTOM = 9	
	};

	std::map<std::string, int> create_string_to_stereo_modes_items() {
		return {{"QUADBUFFERED", stereo_modes_items_QUADBUFFERED}, {"ABOVEBELOW", stereo_modes_items_ABOVEBELOW}, {"INTERLACED", stereo_modes_items_INTERLACED}, {"ANAGLYPH", stereo_modes_items_ANAGLYPH}, {"SIDEBYSIDE", stereo_modes_items_SIDEBYSIDE}, {"VINTERLACE", stereo_modes_items_VINTERLACE}, {"3DTVTOPBOTTOM", stereo_modes_items_3DTVTOPBOTTOM}};
	};

	std::map<int, std::string> create_stereo_modes_items_to_string() {
		return {{stereo_modes_items_QUADBUFFERED, "QUADBUFFERED"}, {stereo_modes_items_ABOVEBELOW, "ABOVEBELOW"}, {stereo_modes_items_INTERLACED, "INTERLACED"}, {stereo_modes_items_ANAGLYPH, "ANAGLYPH"}, {stereo_modes_items_SIDEBYSIDE, "SIDEBYSIDE"}, {stereo_modes_items_VINTERLACE, "VINTERLACE"}, {stereo_modes_items_3DTVTOPBOTTOM, "3DTVTOPBOTTOM"}};
	};

	const std::map<std::string, int> string_to_stereo_modes_items = create_string_to_stereo_modes_items();
	const std::map<int, std::string> stereo_modes_items_to_string = create_stereo_modes_items_to_string();

	stereo_modes_items_enum stereo_mode() {
		STRING_TYPE_GETTER("stereo_mode", static_cast<stereo_modes_items_enum>(string_to_stereo_modes_items.at(resstr)))
	}

	void stereo_mode(stereo_modes_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "stereo_mode", stereo_modes_items_to_string.at(value))
	}

	float stereo_eye_separation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "stereo_eye_separation")
	}

	void stereo_eye_separation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "stereo_eye_separation", value)
	}

	enum dome_modes_items_enum {
		dome_modes_items_FISHEYE = 1,	
		dome_modes_items_TRUNCATED_FRONT = 2,	
		dome_modes_items_TRUNCATED_REAR = 3,	
		dome_modes_items_ENVMAP = 4,	
		dome_modes_items_PANORAM_SPH = 5	
	};

	std::map<std::string, int> create_string_to_dome_modes_items() {
		return {{"FISHEYE", dome_modes_items_FISHEYE}, {"TRUNCATED_FRONT", dome_modes_items_TRUNCATED_FRONT}, {"TRUNCATED_REAR", dome_modes_items_TRUNCATED_REAR}, {"ENVMAP", dome_modes_items_ENVMAP}, {"PANORAM_SPH", dome_modes_items_PANORAM_SPH}};
	};

	std::map<int, std::string> create_dome_modes_items_to_string() {
		return {{dome_modes_items_FISHEYE, "FISHEYE"}, {dome_modes_items_TRUNCATED_FRONT, "TRUNCATED_FRONT"}, {dome_modes_items_TRUNCATED_REAR, "TRUNCATED_REAR"}, {dome_modes_items_ENVMAP, "ENVMAP"}, {dome_modes_items_PANORAM_SPH, "PANORAM_SPH"}};
	};

	const std::map<std::string, int> string_to_dome_modes_items = create_string_to_dome_modes_items();
	const std::map<int, std::string> dome_modes_items_to_string = create_dome_modes_items_to_string();

	dome_modes_items_enum dome_mode() {
		STRING_TYPE_GETTER("dome_mode", static_cast<dome_modes_items_enum>(string_to_dome_modes_items.at(resstr)))
	}

	void dome_mode(dome_modes_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "dome_mode", dome_modes_items_to_string.at(value))
	}

	int dome_tessellation() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dome_tessellation")
	}

	void dome_tessellation(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dome_tessellation", value)
	}

	float dome_buffer_resolution() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dome_buffer_resolution")
	}

	void dome_buffer_resolution(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dome_buffer_resolution", value)
	}

	int dome_angle() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dome_angle")
	}

	void dome_angle(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dome_angle", value)
	}

	int dome_tilt() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dome_tilt")
	}

	void dome_tilt(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dome_tilt", value)
	}

	Text dome_text();

	enum physics_engine_items_enum {
		physics_engine_items_NONE = 0,	
		physics_engine_items_BULLET = 5	
	};

	std::map<std::string, int> create_string_to_physics_engine_items() {
		return {{"NONE", physics_engine_items_NONE}, {"BULLET", physics_engine_items_BULLET}};
	};

	std::map<int, std::string> create_physics_engine_items_to_string() {
		return {{physics_engine_items_NONE, "NONE"}, {physics_engine_items_BULLET, "BULLET"}};
	};

	const std::map<std::string, int> string_to_physics_engine_items = create_string_to_physics_engine_items();
	const std::map<int, std::string> physics_engine_items_to_string = create_physics_engine_items_to_string();

	physics_engine_items_enum physics_engine() {
		STRING_TYPE_GETTER("physics_engine", static_cast<physics_engine_items_enum>(string_to_physics_engine_items.at(resstr)))
	}

	void physics_engine(physics_engine_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "physics_engine", physics_engine_items_to_string.at(value))
	}

	float physics_gravity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "physics_gravity")
	}

	void physics_gravity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "physics_gravity", value)
	}

	int occlusion_culling_resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "occlusion_culling_resolution")
	}

	void occlusion_culling_resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "occlusion_culling_resolution", value)
	}

	int fps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "fps")
	}

	void fps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "fps", value)
	}

	int logic_step_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "logic_step_max")
	}

	void logic_step_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "logic_step_max", value)
	}

	int physics_step_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "physics_step_max")
	}

	void physics_step_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "physics_step_max", value)
	}

	int physics_step_sub() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "physics_step_sub")
	}

	void physics_step_sub(int value) {
		PRIMITIVE_TYPES_SETTER("i", "physics_step_sub", value)
	}

	float deactivation_linear_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "deactivation_linear_threshold")
	}

	void deactivation_linear_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "deactivation_linear_threshold", value)
	}

	float deactivation_angular_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "deactivation_angular_threshold")
	}

	void deactivation_angular_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "deactivation_angular_threshold", value)
	}

	float deactivation_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "deactivation_time")
	}

	void deactivation_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "deactivation_time", value)
	}

	bool use_occlusion_culling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_occlusion_culling")
	}

	void use_occlusion_culling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_occlusion_culling", value)
	}

	bool use_activity_culling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_activity_culling")
	}

	void use_activity_culling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_activity_culling", value)
	}

	float activity_culling_box_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "activity_culling_box_radius")
	}

	void activity_culling_box_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "activity_culling_box_radius", value)
	}

	bool show_debug_properties() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_debug_properties")
	}

	void show_debug_properties(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_debug_properties", value)
	}

	bool show_framerate_profile() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_framerate_profile")
	}

	void show_framerate_profile(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_framerate_profile", value)
	}

	bool show_physics_visualization() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_physics_visualization")
	}

	void show_physics_visualization(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_physics_visualization", value)
	}

	bool show_mouse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_mouse")
	}

	void show_mouse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_mouse", value)
	}

	bool use_frame_rate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_frame_rate")
	}

	void use_frame_rate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_frame_rate", value)
	}

	bool use_display_lists() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_display_lists")
	}

	void use_display_lists(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_display_lists", value)
	}

	bool use_deprecation_warnings() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deprecation_warnings")
	}

	void use_deprecation_warnings(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deprecation_warnings", value)
	}

	bool use_animation_record() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_animation_record")
	}

	void use_animation_record(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_animation_record", value)
	}

	bool use_auto_start() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_start")
	}

	void use_auto_start(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_start", value)
	}

	bool use_restrict_animation_updates() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_restrict_animation_updates")
	}

	void use_restrict_animation_updates(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_restrict_animation_updates", value)
	}

	enum material_items_enum {
		material_items_MULTITEXTURE = 1,	
		material_items_GLSL = 2	
	};

	std::map<std::string, int> create_string_to_material_items() {
		return {{"MULTITEXTURE", material_items_MULTITEXTURE}, {"GLSL", material_items_GLSL}};
	};

	std::map<int, std::string> create_material_items_to_string() {
		return {{material_items_MULTITEXTURE, "MULTITEXTURE"}, {material_items_GLSL, "GLSL"}};
	};

	const std::map<std::string, int> string_to_material_items = create_string_to_material_items();
	const std::map<int, std::string> material_items_to_string = create_material_items_to_string();

	material_items_enum material_mode() {
		STRING_TYPE_GETTER("material_mode", static_cast<material_items_enum>(string_to_material_items.at(resstr)))
	}

	void material_mode(material_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "material_mode", material_items_to_string.at(value))
	}

	bool use_glsl_lights() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glsl_lights")
	}

	void use_glsl_lights(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glsl_lights", value)
	}

	bool use_glsl_shaders() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glsl_shaders")
	}

	void use_glsl_shaders(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glsl_shaders", value)
	}

	bool use_glsl_shadows() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glsl_shadows")
	}

	void use_glsl_shadows(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glsl_shadows", value)
	}

	bool use_glsl_ramps() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glsl_ramps")
	}

	void use_glsl_ramps(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glsl_ramps", value)
	}

	bool use_glsl_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glsl_nodes")
	}

	void use_glsl_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glsl_nodes", value)
	}

	bool use_glsl_color_management() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glsl_color_management")
	}

	void use_glsl_color_management(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glsl_color_management", value)
	}

	bool use_glsl_extra_textures() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glsl_extra_textures")
	}

	void use_glsl_extra_textures(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glsl_extra_textures", value)
	}

	bool use_material_caching() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_material_caching")
	}

	void use_material_caching(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_material_caching", value)
	}

	enum obstacle_simulation_items_enum {
		obstacle_simulation_items_NONE = 0,	
		obstacle_simulation_items_RVO_RAYS = 1,	
		obstacle_simulation_items_RVO_CELLS = 2	
	};

	std::map<std::string, int> create_string_to_obstacle_simulation_items() {
		return {{"NONE", obstacle_simulation_items_NONE}, {"RVO_RAYS", obstacle_simulation_items_RVO_RAYS}, {"RVO_CELLS", obstacle_simulation_items_RVO_CELLS}};
	};

	std::map<int, std::string> create_obstacle_simulation_items_to_string() {
		return {{obstacle_simulation_items_NONE, "NONE"}, {obstacle_simulation_items_RVO_RAYS, "RVO_RAYS"}, {obstacle_simulation_items_RVO_CELLS, "RVO_CELLS"}};
	};

	const std::map<std::string, int> string_to_obstacle_simulation_items = create_string_to_obstacle_simulation_items();
	const std::map<int, std::string> obstacle_simulation_items_to_string = create_obstacle_simulation_items_to_string();

	obstacle_simulation_items_enum obstacle_simulation() {
		STRING_TYPE_GETTER("obstacle_simulation", static_cast<obstacle_simulation_items_enum>(string_to_obstacle_simulation_items.at(resstr)))
	}

	void obstacle_simulation(obstacle_simulation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "obstacle_simulation", obstacle_simulation_items_to_string.at(value))
	}

	float level_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "level_height")
	}

	void level_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "level_height", value)
	}

	bool show_obstacle_simulation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_obstacle_simulation")
	}

	void show_obstacle_simulation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_obstacle_simulation", value)
	}

	SceneGameRecastData recast_data();

	bool use_scene_hysteresis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_scene_hysteresis")
	}

	void use_scene_hysteresis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_scene_hysteresis", value)
	}

	int scene_hysteresis_percentage() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "scene_hysteresis_percentage")
	}

	void scene_hysteresis_percentage(int value) {
		PRIMITIVE_TYPES_SETTER("i", "scene_hysteresis_percentage", value)
	}
};

class SceneGameRecastData : public pyUniplug {
public:
	SceneGameRecastData(PyObject* pyobj) : pyUniplug(pyobj) {}
	SceneGameRecastData() : pyUniplug(0) { }

	float cell_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cell_size")
	}

	void cell_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cell_size", value)
	}

	float cell_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cell_height")
	}

	void cell_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cell_height", value)
	}

	float agent_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "agent_height")
	}

	void agent_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "agent_height", value)
	}

	float agent_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "agent_radius")
	}

	void agent_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "agent_radius", value)
	}

	float climb_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "climb_max")
	}

	void climb_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "climb_max", value)
	}

	float slope_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "slope_max")
	}

	void slope_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "slope_max", value)
	}

	float region_min_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "region_min_size")
	}

	void region_min_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "region_min_size", value)
	}

	float region_merge_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "region_merge_size")
	}

	void region_merge_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "region_merge_size", value)
	}

	float edge_max_len() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "edge_max_len")
	}

	void edge_max_len(float value) {
		PRIMITIVE_TYPES_SETTER("f", "edge_max_len", value)
	}

	float edge_max_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "edge_max_error")
	}

	void edge_max_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "edge_max_error", value)
	}

	int verts_per_poly() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "verts_per_poly")
	}

	void verts_per_poly(int value) {
		PRIMITIVE_TYPES_SETTER("i", "verts_per_poly", value)
	}

	float sample_dist() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sample_dist")
	}

	void sample_dist(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sample_dist", value)
	}

	float sample_max_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sample_max_error")
	}

	void sample_max_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sample_max_error", value)
	}
};

class TransformOrientation : public pyUniplug {
public:
	TransformOrientation(PyObject* pyobj) : pyUniplug(pyobj) {}
	TransformOrientation() : pyUniplug(0) { }

	std::array<float, 9> matrix() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "matrix", 9)
	}

	void matrix(float values[9]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix", 9)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class SelectedUvElement : public PropertyGroup {
public:
	SelectedUvElement(PyObject* pyobj) : PropertyGroup(pyobj) {}
	SelectedUvElement() : PropertyGroup(0) { }

	int element_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "element_index")
	}

	void element_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "element_index", value)
	}

	int face_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "face_index")
	}

	void face_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "face_index", value)
	}
};

class DisplaySafeAreas : public pyUniplug {
public:
	DisplaySafeAreas(PyObject* pyobj) : pyUniplug(pyobj) {}
	DisplaySafeAreas() : pyUniplug(0) { }

	VFLOAT2 title() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "title", 2)
	}

	void title(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "title", 2)
	}

	VFLOAT2 action() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "action", 2)
	}

	void action(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "action", 2)
	}

	VFLOAT2 title_center() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "title_center", 2)
	}

	void title_center(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "title_center", 2)
	}

	VFLOAT2 action_center() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "action_center", 2)
	}

	void action_center(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "action_center", 2)
	}
};

class FFmpegSettings : public pyUniplug {
public:
	FFmpegSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	FFmpegSettings() : pyUniplug(0) { }

	enum ffmpeg_format_items_enum {
		ffmpeg_format_items_MPEG1 = 0,	
		ffmpeg_format_items_MPEG2 = 1,	
		ffmpeg_format_items_MPEG4 = 2,	
		ffmpeg_format_items_AVI = 3,	
		ffmpeg_format_items_QUICKTIME = 4,	
		ffmpeg_format_items_DV = 5,	
		ffmpeg_format_items_H264 = 6,	
		ffmpeg_format_items_XVID = 7,	
		ffmpeg_format_items_OGG = 10,	
		ffmpeg_format_items_MKV = 9,	
		ffmpeg_format_items_FLASH = 8	
	};

	std::map<std::string, int> create_string_to_ffmpeg_format_items() {
		return {{"MPEG1", ffmpeg_format_items_MPEG1}, {"MPEG2", ffmpeg_format_items_MPEG2}, {"MPEG4", ffmpeg_format_items_MPEG4}, {"AVI", ffmpeg_format_items_AVI}, {"QUICKTIME", ffmpeg_format_items_QUICKTIME}, {"DV", ffmpeg_format_items_DV}, {"H264", ffmpeg_format_items_H264}, {"XVID", ffmpeg_format_items_XVID}, {"OGG", ffmpeg_format_items_OGG}, {"MKV", ffmpeg_format_items_MKV}, {"FLASH", ffmpeg_format_items_FLASH}};
	};

	std::map<int, std::string> create_ffmpeg_format_items_to_string() {
		return {{ffmpeg_format_items_MPEG1, "MPEG1"}, {ffmpeg_format_items_MPEG2, "MPEG2"}, {ffmpeg_format_items_MPEG4, "MPEG4"}, {ffmpeg_format_items_AVI, "AVI"}, {ffmpeg_format_items_QUICKTIME, "QUICKTIME"}, {ffmpeg_format_items_DV, "DV"}, {ffmpeg_format_items_H264, "H264"}, {ffmpeg_format_items_XVID, "XVID"}, {ffmpeg_format_items_OGG, "OGG"}, {ffmpeg_format_items_MKV, "MKV"}, {ffmpeg_format_items_FLASH, "FLASH"}};
	};

	const std::map<std::string, int> string_to_ffmpeg_format_items = create_string_to_ffmpeg_format_items();
	const std::map<int, std::string> ffmpeg_format_items_to_string = create_ffmpeg_format_items_to_string();

	ffmpeg_format_items_enum format() {
		STRING_TYPE_GETTER("format", static_cast<ffmpeg_format_items_enum>(string_to_ffmpeg_format_items.at(resstr)))
	}

	void format(ffmpeg_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "format", ffmpeg_format_items_to_string.at(value))
	}

	enum ffmpeg_codec_items_enum {
		ffmpeg_codec_items_NONE = 0,	
		ffmpeg_codec_items_MPEG1 = 1,	
		ffmpeg_codec_items_MPEG2 = 2,	
		ffmpeg_codec_items_MPEG4 = 13,	
		ffmpeg_codec_items_HUFFYUV = 26,	
		ffmpeg_codec_items_DV = 25,	
		ffmpeg_codec_items_H264 = 28,	
		ffmpeg_codec_items_THEORA = 31,	
		ffmpeg_codec_items_FLASH = 22,	
		ffmpeg_codec_items_FFV1 = 34,	
		ffmpeg_codec_items_QTRLE = 56,	
		ffmpeg_codec_items_DNXHD = 100,	
		ffmpeg_codec_items_PNG = 62	
	};

	std::map<std::string, int> create_string_to_ffmpeg_codec_items() {
		return {{"NONE", ffmpeg_codec_items_NONE}, {"MPEG1", ffmpeg_codec_items_MPEG1}, {"MPEG2", ffmpeg_codec_items_MPEG2}, {"MPEG4", ffmpeg_codec_items_MPEG4}, {"HUFFYUV", ffmpeg_codec_items_HUFFYUV}, {"DV", ffmpeg_codec_items_DV}, {"H264", ffmpeg_codec_items_H264}, {"THEORA", ffmpeg_codec_items_THEORA}, {"FLASH", ffmpeg_codec_items_FLASH}, {"FFV1", ffmpeg_codec_items_FFV1}, {"QTRLE", ffmpeg_codec_items_QTRLE}, {"DNXHD", ffmpeg_codec_items_DNXHD}, {"PNG", ffmpeg_codec_items_PNG}};
	};

	std::map<int, std::string> create_ffmpeg_codec_items_to_string() {
		return {{ffmpeg_codec_items_NONE, "NONE"}, {ffmpeg_codec_items_MPEG1, "MPEG1"}, {ffmpeg_codec_items_MPEG2, "MPEG2"}, {ffmpeg_codec_items_MPEG4, "MPEG4"}, {ffmpeg_codec_items_HUFFYUV, "HUFFYUV"}, {ffmpeg_codec_items_DV, "DV"}, {ffmpeg_codec_items_H264, "H264"}, {ffmpeg_codec_items_THEORA, "THEORA"}, {ffmpeg_codec_items_FLASH, "FLASH"}, {ffmpeg_codec_items_FFV1, "FFV1"}, {ffmpeg_codec_items_QTRLE, "QTRLE"}, {ffmpeg_codec_items_DNXHD, "DNXHD"}, {ffmpeg_codec_items_PNG, "PNG"}};
	};

	const std::map<std::string, int> string_to_ffmpeg_codec_items = create_string_to_ffmpeg_codec_items();
	const std::map<int, std::string> ffmpeg_codec_items_to_string = create_ffmpeg_codec_items_to_string();

	ffmpeg_codec_items_enum codec() {
		STRING_TYPE_GETTER("codec", static_cast<ffmpeg_codec_items_enum>(string_to_ffmpeg_codec_items.at(resstr)))
	}

	void codec(ffmpeg_codec_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "codec", ffmpeg_codec_items_to_string.at(value))
	}

	int video_bitrate() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "video_bitrate")
	}

	void video_bitrate(int value) {
		PRIMITIVE_TYPES_SETTER("i", "video_bitrate", value)
	}

	int minrate() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "minrate")
	}

	void minrate(int value) {
		PRIMITIVE_TYPES_SETTER("i", "minrate", value)
	}

	int maxrate() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "maxrate")
	}

	void maxrate(int value) {
		PRIMITIVE_TYPES_SETTER("i", "maxrate", value)
	}

	int muxrate() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "muxrate")
	}

	void muxrate(int value) {
		PRIMITIVE_TYPES_SETTER("i", "muxrate", value)
	}

	int gopsize() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gopsize")
	}

	void gopsize(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gopsize", value)
	}

	int buffersize() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "buffersize")
	}

	void buffersize(int value) {
		PRIMITIVE_TYPES_SETTER("i", "buffersize", value)
	}

	int packetsize() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "packetsize")
	}

	void packetsize(int value) {
		PRIMITIVE_TYPES_SETTER("i", "packetsize", value)
	}

	bool use_autosplit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_autosplit")
	}

	void use_autosplit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_autosplit", value)
	}

	bool use_lossless_output() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_lossless_output")
	}

	void use_lossless_output(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_lossless_output", value)
	}

	enum ffmpeg_audio_codec_items_enum {
		ffmpeg_audio_codec_items_NONE = 0,	
		ffmpeg_audio_codec_items_MP2 = 86016,	
		ffmpeg_audio_codec_items_MP3 = 86017,	
		ffmpeg_audio_codec_items_AC3 = 86019,	
		ffmpeg_audio_codec_items_AAC = 86018,	
		ffmpeg_audio_codec_items_VORBIS = 86021,	
		ffmpeg_audio_codec_items_FLAC = 86028,	
		ffmpeg_audio_codec_items_PCM = 65536	
	};

	std::map<std::string, int> create_string_to_ffmpeg_audio_codec_items() {
		return {{"NONE", ffmpeg_audio_codec_items_NONE}, {"MP2", ffmpeg_audio_codec_items_MP2}, {"MP3", ffmpeg_audio_codec_items_MP3}, {"AC3", ffmpeg_audio_codec_items_AC3}, {"AAC", ffmpeg_audio_codec_items_AAC}, {"VORBIS", ffmpeg_audio_codec_items_VORBIS}, {"FLAC", ffmpeg_audio_codec_items_FLAC}, {"PCM", ffmpeg_audio_codec_items_PCM}};
	};

	std::map<int, std::string> create_ffmpeg_audio_codec_items_to_string() {
		return {{ffmpeg_audio_codec_items_NONE, "NONE"}, {ffmpeg_audio_codec_items_MP2, "MP2"}, {ffmpeg_audio_codec_items_MP3, "MP3"}, {ffmpeg_audio_codec_items_AC3, "AC3"}, {ffmpeg_audio_codec_items_AAC, "AAC"}, {ffmpeg_audio_codec_items_VORBIS, "VORBIS"}, {ffmpeg_audio_codec_items_FLAC, "FLAC"}, {ffmpeg_audio_codec_items_PCM, "PCM"}};
	};

	const std::map<std::string, int> string_to_ffmpeg_audio_codec_items = create_string_to_ffmpeg_audio_codec_items();
	const std::map<int, std::string> ffmpeg_audio_codec_items_to_string = create_ffmpeg_audio_codec_items_to_string();

	ffmpeg_audio_codec_items_enum audio_codec() {
		STRING_TYPE_GETTER("audio_codec", static_cast<ffmpeg_audio_codec_items_enum>(string_to_ffmpeg_audio_codec_items.at(resstr)))
	}

	void audio_codec(ffmpeg_audio_codec_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_codec", ffmpeg_audio_codec_items_to_string.at(value))
	}

	int audio_bitrate() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "audio_bitrate")
	}

	void audio_bitrate(int value) {
		PRIMITIVE_TYPES_SETTER("i", "audio_bitrate", value)
	}

	float audio_volume() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "audio_volume")
	}

	void audio_volume(float value) {
		PRIMITIVE_TYPES_SETTER("f", "audio_volume", value)
	}

	int audio_mixrate() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "audio_mixrate")
	}

	void audio_mixrate(int value) {
		PRIMITIVE_TYPES_SETTER("i", "audio_mixrate", value)
	}

	enum audio_channel_items_enum {
		audio_channel_items_MONO = 1,	
		audio_channel_items_STEREO = 2,	
		audio_channel_items_SURROUND4 = 4,	
		audio_channel_items_SURROUND51 = 6,	
		audio_channel_items_SURROUND71 = 8	
	};

	std::map<std::string, int> create_string_to_audio_channel_items() {
		return {{"MONO", audio_channel_items_MONO}, {"STEREO", audio_channel_items_STEREO}, {"SURROUND4", audio_channel_items_SURROUND4}, {"SURROUND51", audio_channel_items_SURROUND51}, {"SURROUND71", audio_channel_items_SURROUND71}};
	};

	std::map<int, std::string> create_audio_channel_items_to_string() {
		return {{audio_channel_items_MONO, "MONO"}, {audio_channel_items_STEREO, "STEREO"}, {audio_channel_items_SURROUND4, "SURROUND4"}, {audio_channel_items_SURROUND51, "SURROUND51"}, {audio_channel_items_SURROUND71, "SURROUND71"}};
	};

	const std::map<std::string, int> string_to_audio_channel_items = create_string_to_audio_channel_items();
	const std::map<int, std::string> audio_channel_items_to_string = create_audio_channel_items_to_string();

	audio_channel_items_enum audio_channels() {
		STRING_TYPE_GETTER("audio_channels", static_cast<audio_channel_items_enum>(string_to_audio_channel_items.at(resstr)))
	}

	void audio_channels(audio_channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_channels", audio_channel_items_to_string.at(value))
	}
};

class RenderSettings : public pyUniplug {
public:
	RenderSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	RenderSettings() : pyUniplug(0) { }

	ImageFormatSettings image_settings() {
		CLASS_TYPES_GETTER(ImageFormatSettings, "image_settings")
	}

	int resolution_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_x")
	}

	void resolution_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_x", value)
	}

	int resolution_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_y")
	}

	void resolution_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_y", value)
	}

	int resolution_percentage() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_percentage")
	}

	void resolution_percentage(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_percentage", value)
	}

	int tile_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tile_x")
	}

	void tile_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tile_x", value)
	}

	int tile_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tile_y")
	}

	void tile_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tile_y", value)
	}

	int preview_start_resolution() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "preview_start_resolution")
	}

	void preview_start_resolution(int value) {
		PRIMITIVE_TYPES_SETTER("i", "preview_start_resolution", value)
	}

	float pixel_aspect_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pixel_aspect_x")
	}

	void pixel_aspect_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pixel_aspect_x", value)
	}

	float pixel_aspect_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pixel_aspect_y")
	}

	void pixel_aspect_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pixel_aspect_y", value)
	}

	FFmpegSettings ffmpeg() {
		CLASS_TYPES_GETTER(FFmpegSettings, "ffmpeg")
	}

	int fps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "fps")
	}

	void fps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "fps", value)
	}

	float fps_base() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fps_base")
	}

	void fps_base(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fps_base", value)
	}

	int frame_map_old() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_map_old")
	}

	void frame_map_old(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_map_old", value)
	}

	int frame_map_new() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_map_new")
	}

	void frame_map_new(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_map_new", value)
	}

	float dither_intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dither_intensity")
	}

	void dither_intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dither_intensity", value)
	}

	enum pixel_filter_items_enum {
		pixel_filter_items_BOX = 0,	
		pixel_filter_items_TENT = 1,	
		pixel_filter_items_QUADRATIC = 2,	
		pixel_filter_items_CUBIC = 3,	
		pixel_filter_items_CATMULLROM = 4,	
		pixel_filter_items_GAUSSIAN = 5,	
		pixel_filter_items_MITCHELL = 6	
	};

	std::map<std::string, int> create_string_to_pixel_filter_items() {
		return {{"BOX", pixel_filter_items_BOX}, {"TENT", pixel_filter_items_TENT}, {"QUADRATIC", pixel_filter_items_QUADRATIC}, {"CUBIC", pixel_filter_items_CUBIC}, {"CATMULLROM", pixel_filter_items_CATMULLROM}, {"GAUSSIAN", pixel_filter_items_GAUSSIAN}, {"MITCHELL", pixel_filter_items_MITCHELL}};
	};

	std::map<int, std::string> create_pixel_filter_items_to_string() {
		return {{pixel_filter_items_BOX, "BOX"}, {pixel_filter_items_TENT, "TENT"}, {pixel_filter_items_QUADRATIC, "QUADRATIC"}, {pixel_filter_items_CUBIC, "CUBIC"}, {pixel_filter_items_CATMULLROM, "CATMULLROM"}, {pixel_filter_items_GAUSSIAN, "GAUSSIAN"}, {pixel_filter_items_MITCHELL, "MITCHELL"}};
	};

	const std::map<std::string, int> string_to_pixel_filter_items = create_string_to_pixel_filter_items();
	const std::map<int, std::string> pixel_filter_items_to_string = create_pixel_filter_items_to_string();

	pixel_filter_items_enum pixel_filter_type() {
		STRING_TYPE_GETTER("pixel_filter_type", static_cast<pixel_filter_items_enum>(string_to_pixel_filter_items.at(resstr)))
	}

	void pixel_filter_type(pixel_filter_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pixel_filter_type", pixel_filter_items_to_string.at(value))
	}

	float filter_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "filter_size")
	}

	void filter_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "filter_size", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_SKY = 0,	
		alpha_mode_items_TRANSPARENT = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"SKY", alpha_mode_items_SKY}, {"TRANSPARENT", alpha_mode_items_TRANSPARENT}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_SKY, "SKY"}, {alpha_mode_items_TRANSPARENT, "TRANSPARENT"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	enum octree_resolution_items_enum {
		octree_resolution_items_64 = 64,	
		octree_resolution_items_128 = 128,	
		octree_resolution_items_256 = 256,	
		octree_resolution_items_512 = 512	
	};

	std::map<std::string, int> create_string_to_octree_resolution_items() {
		return {{"64", octree_resolution_items_64}, {"128", octree_resolution_items_128}, {"256", octree_resolution_items_256}, {"512", octree_resolution_items_512}};
	};

	std::map<int, std::string> create_octree_resolution_items_to_string() {
		return {{octree_resolution_items_64, "64"}, {octree_resolution_items_128, "128"}, {octree_resolution_items_256, "256"}, {octree_resolution_items_512, "512"}};
	};

	const std::map<std::string, int> string_to_octree_resolution_items = create_string_to_octree_resolution_items();
	const std::map<int, std::string> octree_resolution_items_to_string = create_octree_resolution_items_to_string();

	octree_resolution_items_enum octree_resolution() {
		STRING_TYPE_GETTER("octree_resolution", static_cast<octree_resolution_items_enum>(string_to_octree_resolution_items.at(resstr)))
	}

	void octree_resolution(octree_resolution_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "octree_resolution", octree_resolution_items_to_string.at(value))
	}

	enum raytrace_structure_items_enum {
		raytrace_structure_items_AUTO = 0,	
		raytrace_structure_items_OCTREE = 1,	
		raytrace_structure_items_VBVH = 3,	
		raytrace_structure_items_SIMD_SVBVH = 4,	
		raytrace_structure_items_SIMD_QBVH = 5	
	};

	std::map<std::string, int> create_string_to_raytrace_structure_items() {
		return {{"AUTO", raytrace_structure_items_AUTO}, {"OCTREE", raytrace_structure_items_OCTREE}, {"VBVH", raytrace_structure_items_VBVH}, {"SIMD_SVBVH", raytrace_structure_items_SIMD_SVBVH}, {"SIMD_QBVH", raytrace_structure_items_SIMD_QBVH}};
	};

	std::map<int, std::string> create_raytrace_structure_items_to_string() {
		return {{raytrace_structure_items_AUTO, "AUTO"}, {raytrace_structure_items_OCTREE, "OCTREE"}, {raytrace_structure_items_VBVH, "VBVH"}, {raytrace_structure_items_SIMD_SVBVH, "SIMD_SVBVH"}, {raytrace_structure_items_SIMD_QBVH, "SIMD_QBVH"}};
	};

	const std::map<std::string, int> string_to_raytrace_structure_items = create_string_to_raytrace_structure_items();
	const std::map<int, std::string> raytrace_structure_items_to_string = create_raytrace_structure_items_to_string();

	raytrace_structure_items_enum raytrace_method() {
		STRING_TYPE_GETTER("raytrace_method", static_cast<raytrace_structure_items_enum>(string_to_raytrace_structure_items.at(resstr)))
	}

	void raytrace_method(raytrace_structure_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "raytrace_method", raytrace_structure_items_to_string.at(value))
	}

	bool use_instances() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_instances")
	}

	void use_instances(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_instances", value)
	}

	bool use_local_coords() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_local_coords")
	}

	void use_local_coords(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_local_coords", value)
	}

	bool use_antialiasing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_antialiasing")
	}

	void use_antialiasing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_antialiasing", value)
	}

	enum fixed_oversample_items_enum {
		fixed_oversample_items_5 = 5,	
		fixed_oversample_items_8 = 8,	
		fixed_oversample_items_11 = 11,	
		fixed_oversample_items_16 = 16	
	};

	std::map<std::string, int> create_string_to_fixed_oversample_items() {
		return {{"5", fixed_oversample_items_5}, {"8", fixed_oversample_items_8}, {"11", fixed_oversample_items_11}, {"16", fixed_oversample_items_16}};
	};

	std::map<int, std::string> create_fixed_oversample_items_to_string() {
		return {{fixed_oversample_items_5, "5"}, {fixed_oversample_items_8, "8"}, {fixed_oversample_items_11, "11"}, {fixed_oversample_items_16, "16"}};
	};

	const std::map<std::string, int> string_to_fixed_oversample_items = create_string_to_fixed_oversample_items();
	const std::map<int, std::string> fixed_oversample_items_to_string = create_fixed_oversample_items_to_string();

	fixed_oversample_items_enum antialiasing_samples() {
		STRING_TYPE_GETTER("antialiasing_samples", static_cast<fixed_oversample_items_enum>(string_to_fixed_oversample_items.at(resstr)))
	}

	void antialiasing_samples(fixed_oversample_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "antialiasing_samples", fixed_oversample_items_to_string.at(value))
	}

	bool use_fields() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fields")
	}

	void use_fields(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fields", value)
	}

	enum field_order_items_enum {
		field_order_items_EVEN_FIRST = 0,	
		field_order_items_ODD_FIRST = 8192	
	};

	std::map<std::string, int> create_string_to_field_order_items() {
		return {{"EVEN_FIRST", field_order_items_EVEN_FIRST}, {"ODD_FIRST", field_order_items_ODD_FIRST}};
	};

	std::map<int, std::string> create_field_order_items_to_string() {
		return {{field_order_items_EVEN_FIRST, "EVEN_FIRST"}, {field_order_items_ODD_FIRST, "ODD_FIRST"}};
	};

	const std::map<std::string, int> string_to_field_order_items = create_string_to_field_order_items();
	const std::map<int, std::string> field_order_items_to_string = create_field_order_items_to_string();

	field_order_items_enum field_order() {
		STRING_TYPE_GETTER("field_order", static_cast<field_order_items_enum>(string_to_field_order_items.at(resstr)))
	}

	void field_order(field_order_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "field_order", field_order_items_to_string.at(value))
	}

	bool use_fields_still() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fields_still")
	}

	void use_fields_still(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fields_still", value)
	}

	bool use_shadows() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadows")
	}

	void use_shadows(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadows", value)
	}

	bool use_envmaps() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_envmaps")
	}

	void use_envmaps(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_envmaps", value)
	}

	bool use_sss() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sss")
	}

	void use_sss(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sss", value)
	}

	bool use_raytrace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_raytrace")
	}

	void use_raytrace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_raytrace", value)
	}

	bool use_textures() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_textures")
	}

	void use_textures(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_textures", value)
	}

	bool use_edge_enhance() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_enhance")
	}

	void use_edge_enhance(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_enhance", value)
	}

	int edge_threshold() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "edge_threshold")
	}

	void edge_threshold(int value) {
		PRIMITIVE_TYPES_SETTER("i", "edge_threshold", value)
	}

	VFLOAT3 edge_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "edge_color", 3)
	}

	void edge_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "edge_color", 3)
	}

	bool use_freestyle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_freestyle")
	}

	void use_freestyle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_freestyle", value)
	}

	int threads() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "threads")
	}

	void threads(int value) {
		PRIMITIVE_TYPES_SETTER("i", "threads", value)
	}

	enum threads_mode_items_enum {
		threads_mode_items_AUTO = 0,	
		threads_mode_items_FIXED = 524288	
	};

	std::map<std::string, int> create_string_to_threads_mode_items() {
		return {{"AUTO", threads_mode_items_AUTO}, {"FIXED", threads_mode_items_FIXED}};
	};

	std::map<int, std::string> create_threads_mode_items_to_string() {
		return {{threads_mode_items_AUTO, "AUTO"}, {threads_mode_items_FIXED, "FIXED"}};
	};

	const std::map<std::string, int> string_to_threads_mode_items = create_string_to_threads_mode_items();
	const std::map<int, std::string> threads_mode_items_to_string = create_threads_mode_items_to_string();

	threads_mode_items_enum threads_mode() {
		STRING_TYPE_GETTER("threads_mode", static_cast<threads_mode_items_enum>(string_to_threads_mode_items.at(resstr)))
	}

	void threads_mode(threads_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "threads_mode", threads_mode_items_to_string.at(value))
	}

	bool use_motion_blur() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_motion_blur")
	}

	void use_motion_blur(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_motion_blur", value)
	}

	int motion_blur_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "motion_blur_samples")
	}

	void motion_blur_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "motion_blur_samples", value)
	}

	float motion_blur_shutter() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "motion_blur_shutter")
	}

	void motion_blur_shutter(float value) {
		PRIMITIVE_TYPES_SETTER("f", "motion_blur_shutter", value)
	}

	bool use_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_border")
	}

	void use_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_border", value)
	}

	float border_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "border_min_x")
	}

	void border_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "border_min_x", value)
	}

	float border_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "border_min_y")
	}

	void border_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "border_min_y", value)
	}

	float border_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "border_max_x")
	}

	void border_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "border_max_x", value)
	}

	float border_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "border_max_y")
	}

	void border_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "border_max_y", value)
	}

	bool use_crop_to_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop_to_border")
	}

	void use_crop_to_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop_to_border", value)
	}

	bool use_placeholder() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_placeholder")
	}

	void use_placeholder(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_placeholder", value)
	}

	bool use_overwrite() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_overwrite")
	}

	void use_overwrite(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_overwrite", value)
	}

	bool use_compositing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_compositing")
	}

	void use_compositing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_compositing", value)
	}

	bool use_sequencer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sequencer")
	}

	void use_sequencer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sequencer", value)
	}

	bool use_file_extension() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_file_extension")
	}

	void use_file_extension(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_file_extension", value)
	}

	std::string file_extension() {
		STRING_TYPE_GETTER("file_extension", resstr)
	}

	void file_extension(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "file_extension", value)
	}

	bool is_movie_format() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_movie_format")
	}

	void is_movie_format(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_movie_format", value)
	}

	bool use_free_image_textures() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_free_image_textures")
	}

	void use_free_image_textures(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_free_image_textures", value)
	}

	bool use_free_unused_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_free_unused_nodes")
	}

	void use_free_unused_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_free_unused_nodes", value)
	}

	bool use_save_buffers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_save_buffers")
	}

	void use_save_buffers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_save_buffers", value)
	}

	bool use_full_sample() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_full_sample")
	}

	void use_full_sample(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_full_sample", value)
	}

	enum display_mode_items_enum {
		display_mode_items_SCREEN = 0,	
		display_mode_items_AREA = 1,	
		display_mode_items_WINDOW = 2,	
		display_mode_items_NONE = 3	
	};

	std::map<std::string, int> create_string_to_display_mode_items() {
		return {{"SCREEN", display_mode_items_SCREEN}, {"AREA", display_mode_items_AREA}, {"WINDOW", display_mode_items_WINDOW}, {"NONE", display_mode_items_NONE}};
	};

	std::map<int, std::string> create_display_mode_items_to_string() {
		return {{display_mode_items_SCREEN, "SCREEN"}, {display_mode_items_AREA, "AREA"}, {display_mode_items_WINDOW, "WINDOW"}, {display_mode_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_display_mode_items = create_string_to_display_mode_items();
	const std::map<int, std::string> display_mode_items_to_string = create_display_mode_items_to_string();

	display_mode_items_enum display_mode() {
		STRING_TYPE_GETTER("display_mode", static_cast<display_mode_items_enum>(string_to_display_mode_items.at(resstr)))
	}

	void display_mode(display_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "display_mode", display_mode_items_to_string.at(value))
	}

	bool use_lock_interface() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_lock_interface")
	}

	void use_lock_interface(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_lock_interface", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool use_render_cache() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_render_cache")
	}

	void use_render_cache(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_render_cache", value)
	}

	enum bake_mode_items_enum {
		bake_mode_items_FULL = 1,	
		bake_mode_items_AO = 2,	
		bake_mode_items_SHADOW = 6,	
		bake_mode_items_NORMALS = 3,	
		bake_mode_items_TEXTURE = 4,	
		bake_mode_items_DISPLACEMENT = 5,	
		bake_mode_items_DERIVATIVE = 13,	
		bake_mode_items_VERTEX_COLORS = 14,	
		bake_mode_items_EMIT = 12,	
		bake_mode_items_ALPHA = 11,	
		bake_mode_items_MIRROR_INTENSITY = 10,	
		bake_mode_items_MIRROR_COLOR = 9,	
		bake_mode_items_SPEC_INTENSITY = 8,	
		bake_mode_items_SPEC_COLOR = 7	
	};

	std::map<std::string, int> create_string_to_bake_mode_items() {
		return {{"FULL", bake_mode_items_FULL}, {"AO", bake_mode_items_AO}, {"SHADOW", bake_mode_items_SHADOW}, {"NORMALS", bake_mode_items_NORMALS}, {"TEXTURE", bake_mode_items_TEXTURE}, {"DISPLACEMENT", bake_mode_items_DISPLACEMENT}, {"DERIVATIVE", bake_mode_items_DERIVATIVE}, {"VERTEX_COLORS", bake_mode_items_VERTEX_COLORS}, {"EMIT", bake_mode_items_EMIT}, {"ALPHA", bake_mode_items_ALPHA}, {"MIRROR_INTENSITY", bake_mode_items_MIRROR_INTENSITY}, {"MIRROR_COLOR", bake_mode_items_MIRROR_COLOR}, {"SPEC_INTENSITY", bake_mode_items_SPEC_INTENSITY}, {"SPEC_COLOR", bake_mode_items_SPEC_COLOR}};
	};

	std::map<int, std::string> create_bake_mode_items_to_string() {
		return {{bake_mode_items_FULL, "FULL"}, {bake_mode_items_AO, "AO"}, {bake_mode_items_SHADOW, "SHADOW"}, {bake_mode_items_NORMALS, "NORMALS"}, {bake_mode_items_TEXTURE, "TEXTURE"}, {bake_mode_items_DISPLACEMENT, "DISPLACEMENT"}, {bake_mode_items_DERIVATIVE, "DERIVATIVE"}, {bake_mode_items_VERTEX_COLORS, "VERTEX_COLORS"}, {bake_mode_items_EMIT, "EMIT"}, {bake_mode_items_ALPHA, "ALPHA"}, {bake_mode_items_MIRROR_INTENSITY, "MIRROR_INTENSITY"}, {bake_mode_items_MIRROR_COLOR, "MIRROR_COLOR"}, {bake_mode_items_SPEC_INTENSITY, "SPEC_INTENSITY"}, {bake_mode_items_SPEC_COLOR, "SPEC_COLOR"}};
	};

	const std::map<std::string, int> string_to_bake_mode_items = create_string_to_bake_mode_items();
	const std::map<int, std::string> bake_mode_items_to_string = create_bake_mode_items_to_string();

	bake_mode_items_enum bake_type() {
		STRING_TYPE_GETTER("bake_type", static_cast<bake_mode_items_enum>(string_to_bake_mode_items.at(resstr)))
	}

	void bake_type(bake_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bake_type", bake_mode_items_to_string.at(value))
	}

	enum bake_normal_space_items_enum {
		bake_normal_space_items_CAMERA = 0,	
		bake_normal_space_items_WORLD = 1,	
		bake_normal_space_items_OBJECT = 2,	
		bake_normal_space_items_TANGENT = 3	
	};

	std::map<std::string, int> create_string_to_bake_normal_space_items() {
		return {{"CAMERA", bake_normal_space_items_CAMERA}, {"WORLD", bake_normal_space_items_WORLD}, {"OBJECT", bake_normal_space_items_OBJECT}, {"TANGENT", bake_normal_space_items_TANGENT}};
	};

	std::map<int, std::string> create_bake_normal_space_items_to_string() {
		return {{bake_normal_space_items_CAMERA, "CAMERA"}, {bake_normal_space_items_WORLD, "WORLD"}, {bake_normal_space_items_OBJECT, "OBJECT"}, {bake_normal_space_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_bake_normal_space_items = create_string_to_bake_normal_space_items();
	const std::map<int, std::string> bake_normal_space_items_to_string = create_bake_normal_space_items_to_string();

	bake_normal_space_items_enum bake_normal_space() {
		STRING_TYPE_GETTER("bake_normal_space", static_cast<bake_normal_space_items_enum>(string_to_bake_normal_space_items.at(resstr)))
	}

	void bake_normal_space(bake_normal_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bake_normal_space", bake_normal_space_items_to_string.at(value))
	}

	enum bake_qyad_split_items_enum {
		bake_qyad_split_items_AUTO = 0,	
		bake_qyad_split_items_FIXED = 1,	
		bake_qyad_split_items_FIXED_ALT = 2	
	};

	std::map<std::string, int> create_string_to_bake_qyad_split_items() {
		return {{"AUTO", bake_qyad_split_items_AUTO}, {"FIXED", bake_qyad_split_items_FIXED}, {"FIXED_ALT", bake_qyad_split_items_FIXED_ALT}};
	};

	std::map<int, std::string> create_bake_qyad_split_items_to_string() {
		return {{bake_qyad_split_items_AUTO, "AUTO"}, {bake_qyad_split_items_FIXED, "FIXED"}, {bake_qyad_split_items_FIXED_ALT, "FIXED_ALT"}};
	};

	const std::map<std::string, int> string_to_bake_qyad_split_items = create_string_to_bake_qyad_split_items();
	const std::map<int, std::string> bake_qyad_split_items_to_string = create_bake_qyad_split_items_to_string();

	bake_qyad_split_items_enum bake_quad_split() {
		STRING_TYPE_GETTER("bake_quad_split", static_cast<bake_qyad_split_items_enum>(string_to_bake_qyad_split_items.at(resstr)))
	}

	void bake_quad_split(bake_qyad_split_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bake_quad_split", bake_qyad_split_items_to_string.at(value))
	}

	fixed_oversample_items_enum bake_aa_mode() {
		STRING_TYPE_GETTER("bake_aa_mode", static_cast<fixed_oversample_items_enum>(string_to_fixed_oversample_items.at(resstr)))
	}

	void bake_aa_mode(fixed_oversample_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bake_aa_mode", fixed_oversample_items_to_string.at(value))
	}

	bool use_bake_selected_to_active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_selected_to_active")
	}

	void use_bake_selected_to_active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_selected_to_active", value)
	}

	bool use_bake_normalize() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_normalize")
	}

	void use_bake_normalize(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_normalize", value)
	}

	bool use_bake_clear() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_clear")
	}

	void use_bake_clear(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_clear", value)
	}

	bool use_bake_antialiasing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_antialiasing")
	}

	void use_bake_antialiasing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_antialiasing", value)
	}

	int bake_margin() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bake_margin")
	}

	void bake_margin(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bake_margin", value)
	}

	float bake_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bake_distance")
	}

	void bake_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bake_distance", value)
	}

	float bake_bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bake_bias")
	}

	void bake_bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bake_bias", value)
	}

	bool use_bake_multires() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_multires")
	}

	void use_bake_multires(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_multires", value)
	}

	bool use_bake_lores_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_lores_mesh")
	}

	void use_bake_lores_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_lores_mesh", value)
	}

	int bake_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bake_samples")
	}

	void bake_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bake_samples", value)
	}

	bool use_bake_to_vertex_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_to_vertex_color")
	}

	void use_bake_to_vertex_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_to_vertex_color", value)
	}

	bool use_bake_user_scale() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_bake_user_scale")
	}

	void use_bake_user_scale(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_bake_user_scale", value)
	}

	float bake_user_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bake_user_scale")
	}

	void bake_user_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bake_user_scale", value)
	}

	bool use_stamp_time() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_time")
	}

	void use_stamp_time(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_time", value)
	}

	bool use_stamp_date() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_date")
	}

	void use_stamp_date(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_date", value)
	}

	bool use_stamp_frame() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_frame")
	}

	void use_stamp_frame(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_frame", value)
	}

	bool use_stamp_camera() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_camera")
	}

	void use_stamp_camera(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_camera", value)
	}

	bool use_stamp_lens() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_lens")
	}

	void use_stamp_lens(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_lens", value)
	}

	bool use_stamp_scene() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_scene")
	}

	void use_stamp_scene(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_scene", value)
	}

	bool use_stamp_note() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_note")
	}

	void use_stamp_note(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_note", value)
	}

	bool use_stamp_marker() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_marker")
	}

	void use_stamp_marker(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_marker", value)
	}

	bool use_stamp_filename() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_filename")
	}

	void use_stamp_filename(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_filename", value)
	}

	bool use_stamp_sequencer_strip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_sequencer_strip")
	}

	void use_stamp_sequencer_strip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_sequencer_strip", value)
	}

	bool use_stamp_render_time() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_render_time")
	}

	void use_stamp_render_time(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_render_time", value)
	}

	std::string stamp_note_text() {
		STRING_TYPE_GETTER("stamp_note_text", resstr)
	}

	void stamp_note_text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "stamp_note_text", value)
	}

	bool use_stamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp")
	}

	void use_stamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp", value)
	}

	bool use_stamp_strip_meta() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stamp_strip_meta")
	}

	void use_stamp_strip_meta(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stamp_strip_meta", value)
	}

	int stamp_font_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "stamp_font_size")
	}

	void stamp_font_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "stamp_font_size", value)
	}

	VFLOAT4 stamp_foreground() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "stamp_foreground", 4)
	}

	void stamp_foreground(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "stamp_foreground", 4)
	}

	VFLOAT4 stamp_background() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "stamp_background", 4)
	}

	void stamp_background(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "stamp_background", 4)
	}

	bool use_sequencer_gl_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sequencer_gl_preview")
	}

	void use_sequencer_gl_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sequencer_gl_preview", value)
	}

	enum viewport_shade_items_enum {
		viewport_shade_items_BOUNDBOX = 1,	
		viewport_shade_items_WIREFRAME = 2,	
		viewport_shade_items_SOLID = 3,	
		viewport_shade_items_TEXTURED = 5,	
		viewport_shade_items_MATERIAL = 4,	
		viewport_shade_items_RENDERED = 6	
	};

	std::map<std::string, int> create_string_to_viewport_shade_items() {
		return {{"BOUNDBOX", viewport_shade_items_BOUNDBOX}, {"WIREFRAME", viewport_shade_items_WIREFRAME}, {"SOLID", viewport_shade_items_SOLID}, {"TEXTURED", viewport_shade_items_TEXTURED}, {"MATERIAL", viewport_shade_items_MATERIAL}, {"RENDERED", viewport_shade_items_RENDERED}};
	};

	std::map<int, std::string> create_viewport_shade_items_to_string() {
		return {{viewport_shade_items_BOUNDBOX, "BOUNDBOX"}, {viewport_shade_items_WIREFRAME, "WIREFRAME"}, {viewport_shade_items_SOLID, "SOLID"}, {viewport_shade_items_TEXTURED, "TEXTURED"}, {viewport_shade_items_MATERIAL, "MATERIAL"}, {viewport_shade_items_RENDERED, "RENDERED"}};
	};

	const std::map<std::string, int> string_to_viewport_shade_items = create_string_to_viewport_shade_items();
	const std::map<int, std::string> viewport_shade_items_to_string = create_viewport_shade_items_to_string();

	viewport_shade_items_enum sequencer_gl_preview() {
		STRING_TYPE_GETTER("sequencer_gl_preview", static_cast<viewport_shade_items_enum>(string_to_viewport_shade_items.at(resstr)))
	}

	void sequencer_gl_preview(viewport_shade_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sequencer_gl_preview", viewport_shade_items_to_string.at(value))
	}

	viewport_shade_items_enum sequencer_gl_render() {
		STRING_TYPE_GETTER("sequencer_gl_render", static_cast<viewport_shade_items_enum>(string_to_viewport_shade_items.at(resstr)))
	}

	void sequencer_gl_render(viewport_shade_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sequencer_gl_render", viewport_shade_items_to_string.at(value))
	}

	bool use_sequencer_gl_textured_solid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sequencer_gl_textured_solid")
	}

	void use_sequencer_gl_textured_solid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sequencer_gl_textured_solid", value)
	}

	std::map<std::string, SceneRenderLayer> layers();

	bool use_single_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_single_layer")
	}

	void use_single_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_single_layer", value)
	}

	std::map<std::string, SceneRenderView> views();

	std::map<std::string, SceneRenderView> stereo_views();

	bool use_multiview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multiview")
	}

	void use_multiview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multiview", value)
	}

	enum views_format_items_enum {
		views_format_items_STEREO_3D = 0,	
		views_format_items_MULTIVIEW = 1	
	};

	std::map<std::string, int> create_string_to_views_format_items() {
		return {{"STEREO_3D", views_format_items_STEREO_3D}, {"MULTIVIEW", views_format_items_MULTIVIEW}};
	};

	std::map<int, std::string> create_views_format_items_to_string() {
		return {{views_format_items_STEREO_3D, "STEREO_3D"}, {views_format_items_MULTIVIEW, "MULTIVIEW"}};
	};

	const std::map<std::string, int> string_to_views_format_items = create_string_to_views_format_items();
	const std::map<int, std::string> views_format_items_to_string = create_views_format_items_to_string();

	views_format_items_enum views_format() {
		STRING_TYPE_GETTER("views_format", static_cast<views_format_items_enum>(string_to_views_format_items.at(resstr)))
	}

	void views_format(views_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "views_format", views_format_items_to_string.at(value))
	}

	enum engine_items_enum {
		engine_items_BLENDER_RENDER = 0	
	};

	std::map<std::string, int> create_string_to_engine_items() {
		return {{"BLENDER_RENDER", engine_items_BLENDER_RENDER}};
	};

	std::map<int, std::string> create_engine_items_to_string() {
		return {{engine_items_BLENDER_RENDER, "BLENDER_RENDER"}};
	};

	const std::map<std::string, int> string_to_engine_items = create_string_to_engine_items();
	const std::map<int, std::string> engine_items_to_string = create_engine_items_to_string();

	engine_items_enum engine() {
		STRING_TYPE_GETTER("engine", static_cast<engine_items_enum>(string_to_engine_items.at(resstr)))
	}

	void engine(engine_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "engine", engine_items_to_string.at(value))
	}

	bool has_multiple_engines() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_multiple_engines")
	}

	void has_multiple_engines(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_multiple_engines", value)
	}

	bool use_shading_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shading_nodes")
	}

	void use_shading_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shading_nodes", value)
	}

	bool use_game_engine() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_game_engine")
	}

	void use_game_engine(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_game_engine", value)
	}

	bool use_simplify() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_simplify")
	}

	void use_simplify(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_simplify", value)
	}

	int simplify_subdivision() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "simplify_subdivision")
	}

	void simplify_subdivision(int value) {
		PRIMITIVE_TYPES_SETTER("i", "simplify_subdivision", value)
	}

	float simplify_child_particles() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simplify_child_particles")
	}

	void simplify_child_particles(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simplify_child_particles", value)
	}

	int simplify_subdivision_render() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "simplify_subdivision_render")
	}

	void simplify_subdivision_render(int value) {
		PRIMITIVE_TYPES_SETTER("i", "simplify_subdivision_render", value)
	}

	float simplify_child_particles_render() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simplify_child_particles_render")
	}

	void simplify_child_particles_render(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simplify_child_particles_render", value)
	}

	int simplify_shadow_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "simplify_shadow_samples")
	}

	void simplify_shadow_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "simplify_shadow_samples", value)
	}

	float simplify_ao_sss() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "simplify_ao_sss")
	}

	void simplify_ao_sss(float value) {
		PRIMITIVE_TYPES_SETTER("f", "simplify_ao_sss", value)
	}

	bool use_simplify_triangulate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_simplify_triangulate")
	}

	void use_simplify_triangulate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_simplify_triangulate", value)
	}

	bool use_persistent_data() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_persistent_data")
	}

	void use_persistent_data(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_persistent_data", value)
	}

	enum freestyle_thickness_items_enum {
		freestyle_thickness_items_ABSOLUTE = 1,	
		freestyle_thickness_items_RELATIVE = 2	
	};

	std::map<std::string, int> create_string_to_freestyle_thickness_items() {
		return {{"ABSOLUTE", freestyle_thickness_items_ABSOLUTE}, {"RELATIVE", freestyle_thickness_items_RELATIVE}};
	};

	std::map<int, std::string> create_freestyle_thickness_items_to_string() {
		return {{freestyle_thickness_items_ABSOLUTE, "ABSOLUTE"}, {freestyle_thickness_items_RELATIVE, "RELATIVE"}};
	};

	const std::map<std::string, int> string_to_freestyle_thickness_items = create_string_to_freestyle_thickness_items();
	const std::map<int, std::string> freestyle_thickness_items_to_string = create_freestyle_thickness_items_to_string();

	freestyle_thickness_items_enum line_thickness_mode() {
		STRING_TYPE_GETTER("line_thickness_mode", static_cast<freestyle_thickness_items_enum>(string_to_freestyle_thickness_items.at(resstr)))
	}

	void line_thickness_mode(freestyle_thickness_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "line_thickness_mode", freestyle_thickness_items_to_string.at(value))
	}

	float line_thickness() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "line_thickness")
	}

	void line_thickness(float value) {
		PRIMITIVE_TYPES_SETTER("f", "line_thickness", value)
	}

	BakeSettings bake();

	std::string frame_path(int frame = INT_MIN, bool preview = false, const std::string view = NULL) {
		PYTHON_FUNCTION_ARGS_CALL("frame_path", "iis", frame, preview, view)
		CREATE_SINGLE_PYOBJ(filepath)
		STRING_TYPE_CONV(filepath)
		NONCLASS_TYPES_RETURN(filepath_res)
	}
};

class BakeSettings : public pyUniplug {
public:
	BakeSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	BakeSettings() : pyUniplug(0) { }

	std::string cage_object() {
		STRING_TYPE_GETTER("cage_object", resstr)
	}

	void cage_object(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "cage_object", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	int width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "width")
	}

	void width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "width", value)
	}

	int height() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "height")
	}

	void height(int value) {
		PRIMITIVE_TYPES_SETTER("i", "height", value)
	}

	int margin() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "margin")
	}

	void margin(int value) {
		PRIMITIVE_TYPES_SETTER("i", "margin", value)
	}

	float cage_extrusion() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cage_extrusion")
	}

	void cage_extrusion(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cage_extrusion", value)
	}

	enum normal_space_items_enum {
		normal_space_items_OBJECT = 2,	
		normal_space_items_TANGENT = 3	
	};

	std::map<std::string, int> create_string_to_normal_space_items() {
		return {{"OBJECT", normal_space_items_OBJECT}, {"TANGENT", normal_space_items_TANGENT}};
	};

	std::map<int, std::string> create_normal_space_items_to_string() {
		return {{normal_space_items_OBJECT, "OBJECT"}, {normal_space_items_TANGENT, "TANGENT"}};
	};

	const std::map<std::string, int> string_to_normal_space_items = create_string_to_normal_space_items();
	const std::map<int, std::string> normal_space_items_to_string = create_normal_space_items_to_string();

	normal_space_items_enum normal_space() {
		STRING_TYPE_GETTER("normal_space", static_cast<normal_space_items_enum>(string_to_normal_space_items.at(resstr)))
	}

	void normal_space(normal_space_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "normal_space", normal_space_items_to_string.at(value))
	}

	enum normal_swizzle_items_enum {
		normal_swizzle_items_POS_X = 0,	
		normal_swizzle_items_POS_Y = 1,	
		normal_swizzle_items_POS_Z = 2,	
		normal_swizzle_items_NEG_X = 3,	
		normal_swizzle_items_NEG_Y = 4,	
		normal_swizzle_items_NEG_Z = 5	
	};

	std::map<std::string, int> create_string_to_normal_swizzle_items() {
		return {{"POS_X", normal_swizzle_items_POS_X}, {"POS_Y", normal_swizzle_items_POS_Y}, {"POS_Z", normal_swizzle_items_POS_Z}, {"NEG_X", normal_swizzle_items_NEG_X}, {"NEG_Y", normal_swizzle_items_NEG_Y}, {"NEG_Z", normal_swizzle_items_NEG_Z}};
	};

	std::map<int, std::string> create_normal_swizzle_items_to_string() {
		return {{normal_swizzle_items_POS_X, "POS_X"}, {normal_swizzle_items_POS_Y, "POS_Y"}, {normal_swizzle_items_POS_Z, "POS_Z"}, {normal_swizzle_items_NEG_X, "NEG_X"}, {normal_swizzle_items_NEG_Y, "NEG_Y"}, {normal_swizzle_items_NEG_Z, "NEG_Z"}};
	};

	const std::map<std::string, int> string_to_normal_swizzle_items = create_string_to_normal_swizzle_items();
	const std::map<int, std::string> normal_swizzle_items_to_string = create_normal_swizzle_items_to_string();

	normal_swizzle_items_enum normal_r() {
		STRING_TYPE_GETTER("normal_r", static_cast<normal_swizzle_items_enum>(string_to_normal_swizzle_items.at(resstr)))
	}

	void normal_r(normal_swizzle_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "normal_r", normal_swizzle_items_to_string.at(value))
	}

	normal_swizzle_items_enum normal_g() {
		STRING_TYPE_GETTER("normal_g", static_cast<normal_swizzle_items_enum>(string_to_normal_swizzle_items.at(resstr)))
	}

	void normal_g(normal_swizzle_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "normal_g", normal_swizzle_items_to_string.at(value))
	}

	normal_swizzle_items_enum normal_b() {
		STRING_TYPE_GETTER("normal_b", static_cast<normal_swizzle_items_enum>(string_to_normal_swizzle_items.at(resstr)))
	}

	void normal_b(normal_swizzle_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "normal_b", normal_swizzle_items_to_string.at(value))
	}

	ImageFormatSettings image_settings() {
		CLASS_TYPES_GETTER(ImageFormatSettings, "image_settings")
	}

	enum bake_save_mode_items_enum {
		bake_save_mode_items_INTERNAL = 0,	
		bake_save_mode_items_EXTERNAL = 1	
	};

	std::map<std::string, int> create_string_to_bake_save_mode_items() {
		return {{"INTERNAL", bake_save_mode_items_INTERNAL}, {"EXTERNAL", bake_save_mode_items_EXTERNAL}};
	};

	std::map<int, std::string> create_bake_save_mode_items_to_string() {
		return {{bake_save_mode_items_INTERNAL, "INTERNAL"}, {bake_save_mode_items_EXTERNAL, "EXTERNAL"}};
	};

	const std::map<std::string, int> string_to_bake_save_mode_items = create_string_to_bake_save_mode_items();
	const std::map<int, std::string> bake_save_mode_items_to_string = create_bake_save_mode_items_to_string();

	bake_save_mode_items_enum save_mode() {
		STRING_TYPE_GETTER("save_mode", static_cast<bake_save_mode_items_enum>(string_to_bake_save_mode_items.at(resstr)))
	}

	void save_mode(bake_save_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "save_mode", bake_save_mode_items_to_string.at(value))
	}

	bool use_selected_to_active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_selected_to_active")
	}

	void use_selected_to_active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_selected_to_active", value)
	}

	bool use_clear() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clear")
	}

	void use_clear(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clear", value)
	}

	bool use_split_materials() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_split_materials")
	}

	void use_split_materials(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_split_materials", value)
	}

	bool use_automatic_name() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_automatic_name")
	}

	void use_automatic_name(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_automatic_name", value)
	}

	bool use_cage() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cage")
	}

	void use_cage(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cage", value)
	}
};

class SceneRenderLayer : public pyUniplug {
public:
	SceneRenderLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	SceneRenderLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	Material material_override() {
		CLASS_TYPES_GETTER(Material, "material_override")
	}

	Group light_override() {
		CLASS_TYPES_GETTER(Group, "light_override")
	}

	std::array<bool, 20> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 20)
	}

	void layers(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 20)
	}

	std::array<bool, 20> layers_zmask() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_zmask", 20)
	}

	void layers_zmask(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_zmask", 20)
	}

	std::array<bool, 20> layers_exclude() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_exclude", 20)
	}

	void layers_exclude(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_exclude", 20)
	}

	int samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "samples")
	}

	void samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "samples", value)
	}

	float pass_alpha_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pass_alpha_threshold")
	}

	void pass_alpha_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pass_alpha_threshold", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	bool use_zmask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_zmask")
	}

	void use_zmask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_zmask", value)
	}

	bool invert_zmask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_zmask")
	}

	void invert_zmask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_zmask", value)
	}

	bool use_all_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_all_z")
	}

	void use_all_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_all_z", value)
	}

	bool use_solid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_solid")
	}

	void use_solid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_solid", value)
	}

	bool use_halo() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_halo")
	}

	void use_halo(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_halo", value)
	}

	bool use_ztransp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ztransp")
	}

	void use_ztransp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ztransp", value)
	}

	bool use_sky() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sky")
	}

	void use_sky(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sky", value)
	}

	bool use_edge_enhance() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_edge_enhance")
	}

	void use_edge_enhance(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_edge_enhance", value)
	}

	bool use_strand() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_strand")
	}

	void use_strand(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_strand", value)
	}

	bool use_freestyle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_freestyle")
	}

	void use_freestyle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_freestyle", value)
	}

	bool use_pass_combined() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_combined")
	}

	void use_pass_combined(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_combined", value)
	}

	bool use_pass_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_z")
	}

	void use_pass_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_z", value)
	}

	bool use_pass_vector() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_vector")
	}

	void use_pass_vector(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_vector", value)
	}

	bool use_pass_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_normal")
	}

	void use_pass_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_normal", value)
	}

	bool use_pass_uv() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_uv")
	}

	void use_pass_uv(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_uv", value)
	}

	bool use_pass_mist() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_mist")
	}

	void use_pass_mist(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_mist", value)
	}

	bool use_pass_object_index() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_object_index")
	}

	void use_pass_object_index(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_object_index", value)
	}

	bool use_pass_material_index() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_material_index")
	}

	void use_pass_material_index(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_material_index", value)
	}

	bool use_pass_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_color")
	}

	void use_pass_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_color", value)
	}

	bool use_pass_diffuse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse")
	}

	void use_pass_diffuse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse", value)
	}

	bool use_pass_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_specular")
	}

	void use_pass_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_specular", value)
	}

	bool use_pass_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_shadow")
	}

	void use_pass_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_shadow", value)
	}

	bool use_pass_ambient_occlusion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_ambient_occlusion")
	}

	void use_pass_ambient_occlusion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_ambient_occlusion", value)
	}

	bool use_pass_reflection() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_reflection")
	}

	void use_pass_reflection(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_reflection", value)
	}

	bool use_pass_refraction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_refraction")
	}

	void use_pass_refraction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_refraction", value)
	}

	bool use_pass_emit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_emit")
	}

	void use_pass_emit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_emit", value)
	}

	bool use_pass_environment() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_environment")
	}

	void use_pass_environment(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_environment", value)
	}

	bool use_pass_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_indirect")
	}

	void use_pass_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_indirect", value)
	}

	bool exclude_specular() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_specular")
	}

	void exclude_specular(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_specular", value)
	}

	bool exclude_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_shadow")
	}

	void exclude_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_shadow", value)
	}

	bool exclude_ambient_occlusion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_ambient_occlusion")
	}

	void exclude_ambient_occlusion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_ambient_occlusion", value)
	}

	bool exclude_reflection() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_reflection")
	}

	void exclude_reflection(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_reflection", value)
	}

	bool exclude_refraction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_refraction")
	}

	void exclude_refraction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_refraction", value)
	}

	bool exclude_emit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_emit")
	}

	void exclude_emit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_emit", value)
	}

	bool exclude_environment() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_environment")
	}

	void exclude_environment(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_environment", value)
	}

	bool exclude_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_indirect")
	}

	void exclude_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_indirect", value)
	}

	bool use_pass_diffuse_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse_direct")
	}

	void use_pass_diffuse_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse_direct", value)
	}

	bool use_pass_diffuse_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse_indirect")
	}

	void use_pass_diffuse_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse_indirect", value)
	}

	bool use_pass_diffuse_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_diffuse_color")
	}

	void use_pass_diffuse_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_diffuse_color", value)
	}

	bool use_pass_glossy_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_glossy_direct")
	}

	void use_pass_glossy_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_glossy_direct", value)
	}

	bool use_pass_glossy_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_glossy_indirect")
	}

	void use_pass_glossy_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_glossy_indirect", value)
	}

	bool use_pass_glossy_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_glossy_color")
	}

	void use_pass_glossy_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_glossy_color", value)
	}

	bool use_pass_transmission_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_transmission_direct")
	}

	void use_pass_transmission_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_transmission_direct", value)
	}

	bool use_pass_transmission_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_transmission_indirect")
	}

	void use_pass_transmission_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_transmission_indirect", value)
	}

	bool use_pass_transmission_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_transmission_color")
	}

	void use_pass_transmission_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_transmission_color", value)
	}

	bool use_pass_subsurface_direct() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_subsurface_direct")
	}

	void use_pass_subsurface_direct(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_subsurface_direct", value)
	}

	bool use_pass_subsurface_indirect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_subsurface_indirect")
	}

	void use_pass_subsurface_indirect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_subsurface_indirect", value)
	}

	bool use_pass_subsurface_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pass_subsurface_color")
	}

	void use_pass_subsurface_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pass_subsurface_color", value)
	}

	FreestyleSettings freestyle_settings();
};

class FreestyleLineSet : public pyUniplug {
public:
	FreestyleLineSet(PyObject* pyobj) : pyUniplug(pyobj) {}
	FreestyleLineSet() : pyUniplug(0) { }

	FreestyleLineStyle linestyle() {
		CLASS_TYPES_GETTER(FreestyleLineStyle, "linestyle")
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool show_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_render")
	}

	void show_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_render", value)
	}

	bool select_by_visibility() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_by_visibility")
	}

	void select_by_visibility(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_by_visibility", value)
	}

	bool select_by_edge_types() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_by_edge_types")
	}

	void select_by_edge_types(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_by_edge_types", value)
	}

	bool select_by_group() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_by_group")
	}

	void select_by_group(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_by_group", value)
	}

	bool select_by_image_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_by_image_border")
	}

	void select_by_image_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_by_image_border", value)
	}

	bool select_by_face_marks() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_by_face_marks")
	}

	void select_by_face_marks(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_by_face_marks", value)
	}

	enum edge_type_negation_items_enum {
		edge_type_negation_items_INCLUSIVE = 0,	
		edge_type_negation_items_EXCLUSIVE = 4	
	};

	std::map<std::string, int> create_string_to_edge_type_negation_items() {
		return {{"INCLUSIVE", edge_type_negation_items_INCLUSIVE}, {"EXCLUSIVE", edge_type_negation_items_EXCLUSIVE}};
	};

	std::map<int, std::string> create_edge_type_negation_items_to_string() {
		return {{edge_type_negation_items_INCLUSIVE, "INCLUSIVE"}, {edge_type_negation_items_EXCLUSIVE, "EXCLUSIVE"}};
	};

	const std::map<std::string, int> string_to_edge_type_negation_items = create_string_to_edge_type_negation_items();
	const std::map<int, std::string> edge_type_negation_items_to_string = create_edge_type_negation_items_to_string();

	edge_type_negation_items_enum edge_type_negation() {
		STRING_TYPE_GETTER("edge_type_negation", static_cast<edge_type_negation_items_enum>(string_to_edge_type_negation_items.at(resstr)))
	}

	void edge_type_negation(edge_type_negation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edge_type_negation", edge_type_negation_items_to_string.at(value))
	}

	enum edge_type_combination_items_enum {
		edge_type_combination_items_OR = 0,	
		edge_type_combination_items_AND = 8	
	};

	std::map<std::string, int> create_string_to_edge_type_combination_items() {
		return {{"OR", edge_type_combination_items_OR}, {"AND", edge_type_combination_items_AND}};
	};

	std::map<int, std::string> create_edge_type_combination_items_to_string() {
		return {{edge_type_combination_items_OR, "OR"}, {edge_type_combination_items_AND, "AND"}};
	};

	const std::map<std::string, int> string_to_edge_type_combination_items = create_string_to_edge_type_combination_items();
	const std::map<int, std::string> edge_type_combination_items_to_string = create_edge_type_combination_items_to_string();

	edge_type_combination_items_enum edge_type_combination() {
		STRING_TYPE_GETTER("edge_type_combination", static_cast<edge_type_combination_items_enum>(string_to_edge_type_combination_items.at(resstr)))
	}

	void edge_type_combination(edge_type_combination_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edge_type_combination", edge_type_combination_items_to_string.at(value))
	}

	Group group() {
		CLASS_TYPES_GETTER(Group, "group")
	}

	enum group_negation_items_enum {
		group_negation_items_INCLUSIVE = 0,	
		group_negation_items_EXCLUSIVE = 16	
	};

	std::map<std::string, int> create_string_to_group_negation_items() {
		return {{"INCLUSIVE", group_negation_items_INCLUSIVE}, {"EXCLUSIVE", group_negation_items_EXCLUSIVE}};
	};

	std::map<int, std::string> create_group_negation_items_to_string() {
		return {{group_negation_items_INCLUSIVE, "INCLUSIVE"}, {group_negation_items_EXCLUSIVE, "EXCLUSIVE"}};
	};

	const std::map<std::string, int> string_to_group_negation_items = create_string_to_group_negation_items();
	const std::map<int, std::string> group_negation_items_to_string = create_group_negation_items_to_string();

	group_negation_items_enum group_negation() {
		STRING_TYPE_GETTER("group_negation", static_cast<group_negation_items_enum>(string_to_group_negation_items.at(resstr)))
	}

	void group_negation(group_negation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "group_negation", group_negation_items_to_string.at(value))
	}

	enum face_mark_negation_items_enum {
		face_mark_negation_items_INCLUSIVE = 0,	
		face_mark_negation_items_EXCLUSIVE = 32	
	};

	std::map<std::string, int> create_string_to_face_mark_negation_items() {
		return {{"INCLUSIVE", face_mark_negation_items_INCLUSIVE}, {"EXCLUSIVE", face_mark_negation_items_EXCLUSIVE}};
	};

	std::map<int, std::string> create_face_mark_negation_items_to_string() {
		return {{face_mark_negation_items_INCLUSIVE, "INCLUSIVE"}, {face_mark_negation_items_EXCLUSIVE, "EXCLUSIVE"}};
	};

	const std::map<std::string, int> string_to_face_mark_negation_items = create_string_to_face_mark_negation_items();
	const std::map<int, std::string> face_mark_negation_items_to_string = create_face_mark_negation_items_to_string();

	face_mark_negation_items_enum face_mark_negation() {
		STRING_TYPE_GETTER("face_mark_negation", static_cast<face_mark_negation_items_enum>(string_to_face_mark_negation_items.at(resstr)))
	}

	void face_mark_negation(face_mark_negation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "face_mark_negation", face_mark_negation_items_to_string.at(value))
	}

	enum face_mark_condition_items_enum {
		face_mark_condition_items_ONE = 0,	
		face_mark_condition_items_BOTH = 64	
	};

	std::map<std::string, int> create_string_to_face_mark_condition_items() {
		return {{"ONE", face_mark_condition_items_ONE}, {"BOTH", face_mark_condition_items_BOTH}};
	};

	std::map<int, std::string> create_face_mark_condition_items_to_string() {
		return {{face_mark_condition_items_ONE, "ONE"}, {face_mark_condition_items_BOTH, "BOTH"}};
	};

	const std::map<std::string, int> string_to_face_mark_condition_items = create_string_to_face_mark_condition_items();
	const std::map<int, std::string> face_mark_condition_items_to_string = create_face_mark_condition_items_to_string();

	face_mark_condition_items_enum face_mark_condition() {
		STRING_TYPE_GETTER("face_mark_condition", static_cast<face_mark_condition_items_enum>(string_to_face_mark_condition_items.at(resstr)))
	}

	void face_mark_condition(face_mark_condition_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "face_mark_condition", face_mark_condition_items_to_string.at(value))
	}

	bool select_silhouette() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_silhouette")
	}

	void select_silhouette(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_silhouette", value)
	}

	bool select_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_border")
	}

	void select_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_border", value)
	}

	bool select_crease() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_crease")
	}

	void select_crease(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_crease", value)
	}

	bool select_ridge_valley() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_ridge_valley")
	}

	void select_ridge_valley(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_ridge_valley", value)
	}

	bool select_suggestive_contour() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_suggestive_contour")
	}

	void select_suggestive_contour(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_suggestive_contour", value)
	}

	bool select_material_boundary() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_material_boundary")
	}

	void select_material_boundary(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_material_boundary", value)
	}

	bool select_contour() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_contour")
	}

	void select_contour(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_contour", value)
	}

	bool select_external_contour() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_external_contour")
	}

	void select_external_contour(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_external_contour", value)
	}

	bool select_edge_mark() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_edge_mark")
	}

	void select_edge_mark(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_edge_mark", value)
	}

	bool exclude_silhouette() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_silhouette")
	}

	void exclude_silhouette(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_silhouette", value)
	}

	bool exclude_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_border")
	}

	void exclude_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_border", value)
	}

	bool exclude_crease() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_crease")
	}

	void exclude_crease(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_crease", value)
	}

	bool exclude_ridge_valley() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_ridge_valley")
	}

	void exclude_ridge_valley(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_ridge_valley", value)
	}

	bool exclude_suggestive_contour() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_suggestive_contour")
	}

	void exclude_suggestive_contour(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_suggestive_contour", value)
	}

	bool exclude_material_boundary() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_material_boundary")
	}

	void exclude_material_boundary(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_material_boundary", value)
	}

	bool exclude_contour() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_contour")
	}

	void exclude_contour(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_contour", value)
	}

	bool exclude_external_contour() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_external_contour")
	}

	void exclude_external_contour(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_external_contour", value)
	}

	bool exclude_edge_mark() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "exclude_edge_mark")
	}

	void exclude_edge_mark(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "exclude_edge_mark", value)
	}

	enum visibility_items_enum {
		visibility_items_VISIBLE = 1,	
		visibility_items_HIDDEN = 2,	
		visibility_items_RANGE = 3	
	};

	std::map<std::string, int> create_string_to_visibility_items() {
		return {{"VISIBLE", visibility_items_VISIBLE}, {"HIDDEN", visibility_items_HIDDEN}, {"RANGE", visibility_items_RANGE}};
	};

	std::map<int, std::string> create_visibility_items_to_string() {
		return {{visibility_items_VISIBLE, "VISIBLE"}, {visibility_items_HIDDEN, "HIDDEN"}, {visibility_items_RANGE, "RANGE"}};
	};

	const std::map<std::string, int> string_to_visibility_items = create_string_to_visibility_items();
	const std::map<int, std::string> visibility_items_to_string = create_visibility_items_to_string();

	visibility_items_enum visibility() {
		STRING_TYPE_GETTER("visibility", static_cast<visibility_items_enum>(string_to_visibility_items.at(resstr)))
	}

	void visibility(visibility_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "visibility", visibility_items_to_string.at(value))
	}

	int qi_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "qi_start")
	}

	void qi_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "qi_start", value)
	}

	int qi_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "qi_end")
	}

	void qi_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "qi_end", value)
	}
};

class FreestyleModuleSettings : public pyUniplug {
public:
	FreestyleModuleSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	FreestyleModuleSettings() : pyUniplug(0) { }

	Text script();

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}
};

class FreestyleSettings : public pyUniplug {
public:
	FreestyleSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	FreestyleSettings() : pyUniplug(0) { }

	std::map<std::string, FreestyleModuleSettings> modules() {
		MAP_TYPE_GETTER("modules", FreestyleModuleSettings)
	}

	enum freestyle_ui_mode_items_enum {
		freestyle_ui_mode_items_SCRIPT = 1,	
		freestyle_ui_mode_items_EDITOR = 2	
	};

	std::map<std::string, int> create_string_to_freestyle_ui_mode_items() {
		return {{"SCRIPT", freestyle_ui_mode_items_SCRIPT}, {"EDITOR", freestyle_ui_mode_items_EDITOR}};
	};

	std::map<int, std::string> create_freestyle_ui_mode_items_to_string() {
		return {{freestyle_ui_mode_items_SCRIPT, "SCRIPT"}, {freestyle_ui_mode_items_EDITOR, "EDITOR"}};
	};

	const std::map<std::string, int> string_to_freestyle_ui_mode_items = create_string_to_freestyle_ui_mode_items();
	const std::map<int, std::string> freestyle_ui_mode_items_to_string = create_freestyle_ui_mode_items_to_string();

	freestyle_ui_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<freestyle_ui_mode_items_enum>(string_to_freestyle_ui_mode_items.at(resstr)))
	}

	void mode(freestyle_ui_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", freestyle_ui_mode_items_to_string.at(value))
	}

	bool use_culling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_culling")
	}

	void use_culling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_culling", value)
	}

	bool use_suggestive_contours() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_suggestive_contours")
	}

	void use_suggestive_contours(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_suggestive_contours", value)
	}

	bool use_ridges_and_valleys() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ridges_and_valleys")
	}

	void use_ridges_and_valleys(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ridges_and_valleys", value)
	}

	bool use_material_boundaries() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_material_boundaries")
	}

	void use_material_boundaries(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_material_boundaries", value)
	}

	bool use_smoothness() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smoothness")
	}

	void use_smoothness(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smoothness", value)
	}

	bool use_advanced_options() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_advanced_options")
	}

	void use_advanced_options(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_advanced_options", value)
	}

	bool use_view_map_cache() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_view_map_cache")
	}

	void use_view_map_cache(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_view_map_cache", value)
	}

	float sphere_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sphere_radius")
	}

	void sphere_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sphere_radius", value)
	}

	float kr_derivative_epsilon() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "kr_derivative_epsilon")
	}

	void kr_derivative_epsilon(float value) {
		PRIMITIVE_TYPES_SETTER("f", "kr_derivative_epsilon", value)
	}

	float crease_angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "crease_angle")
	}

	void crease_angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "crease_angle", value)
	}

	std::map<std::string, FreestyleLineSet> linesets() {
		MAP_TYPE_GETTER("linesets", FreestyleLineSet)
	}
};

class GPUSSAOSettings : public pyUniplug {
public:
	GPUSSAOSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPUSSAOSettings() : pyUniplug(0) { }

	float factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "factor")
	}

	void factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "factor", value)
	}

	float distance_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_max")
	}

	void distance_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_max", value)
	}

	float attenuation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "attenuation")
	}

	void attenuation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "attenuation", value)
	}

	int samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "samples")
	}

	void samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "samples", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}
};

class GPUDOFSettings : public pyUniplug {
public:
	GPUDOFSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPUDOFSettings() : pyUniplug(0) { }

	float focus_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "focus_distance")
	}

	void focus_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "focus_distance", value)
	}

	float focal_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "focal_length")
	}

	void focal_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "focal_length", value)
	}

	float sensor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sensor")
	}

	void sensor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sensor", value)
	}

	float fstop() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fstop")
	}

	void fstop(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fstop", value)
	}

	int blades() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "blades")
	}

	void blades(int value) {
		PRIMITIVE_TYPES_SETTER("i", "blades", value)
	}

	bool use_high_quality() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_high_quality")
	}

	void use_high_quality(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_high_quality", value)
	}

	bool is_hq_supported() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_hq_supported")
	}

	void is_hq_supported(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_hq_supported", value)
	}
};

class GPUFXSettings : public pyUniplug {
public:
	GPUFXSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	GPUFXSettings() : pyUniplug(0) { }

	GPUDOFSettings dof() {
		CLASS_TYPES_GETTER(GPUDOFSettings, "dof")
	}

	bool use_dof() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dof")
	}

	void use_dof(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dof", value)
	}

	GPUSSAOSettings ssao() {
		CLASS_TYPES_GETTER(GPUSSAOSettings, "ssao")
	}

	bool use_ssao() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ssao")
	}

	void use_ssao(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ssao", value)
	}
};

class SceneRenderView : public pyUniplug {
public:
	SceneRenderView(PyObject* pyobj) : pyUniplug(pyobj) {}
	SceneRenderView() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::string file_suffix() {
		STRING_TYPE_GETTER("file_suffix", resstr)
	}

	void file_suffix(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "file_suffix", value)
	}

	std::string camera_suffix() {
		STRING_TYPE_GETTER("camera_suffix", resstr)
	}

	void camera_suffix(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "camera_suffix", value)
	}

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}
};

class Screen : public ID {
public:
	Screen(PyObject* pyobj) : ID(pyobj) {}
	Screen() : ID(0) { }

	Scene scene() {
		CLASS_TYPES_GETTER(Scene, "scene")
	}

	std::map<std::string, Area> areas();

	bool is_animation_playing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_animation_playing")
	}

	void is_animation_playing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_animation_playing", value)
	}

	bool show_fullscreen() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_fullscreen")
	}

	void show_fullscreen(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_fullscreen", value)
	}

	bool use_play_top_left_3d_editor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_top_left_3d_editor")
	}

	void use_play_top_left_3d_editor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_top_left_3d_editor", value)
	}

	bool use_play_3d_editors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_3d_editors")
	}

	void use_play_3d_editors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_3d_editors", value)
	}

	bool use_follow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_follow")
	}

	void use_follow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_follow", value)
	}

	bool use_play_animation_editors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_animation_editors")
	}

	void use_play_animation_editors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_animation_editors", value)
	}

	bool use_play_properties_editors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_properties_editors")
	}

	void use_play_properties_editors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_properties_editors", value)
	}

	bool use_play_image_editors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_image_editors")
	}

	void use_play_image_editors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_image_editors", value)
	}

	bool use_play_sequence_editors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_sequence_editors")
	}

	void use_play_sequence_editors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_sequence_editors", value)
	}

	bool use_play_node_editors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_node_editors")
	}

	void use_play_node_editors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_node_editors", value)
	}

	bool use_play_clip_editors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_play_clip_editors")
	}

	void use_play_clip_editors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_play_clip_editors", value)
	}
};

class Area : public pyUniplug {
public:
	Area(PyObject* pyobj) : pyUniplug(pyobj) {}
	Area() : pyUniplug(0) { }

	std::map<std::string, Space> spaces();

	std::map<std::string, Region> regions();

	bool show_menus() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_menus")
	}

	void show_menus(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_menus", value)
	}

	enum space_type_items_enum {
		space_type_items_EMPTY = 0,	
		space_type_items_VIEW_3D = 1,	
		space_type_items_TIMELINE = 15,	
		space_type_items_GRAPH_EDITOR = 2,	
		space_type_items_DOPESHEET_EDITOR = 12,	
		space_type_items_NLA_EDITOR = 13,	
		space_type_items_IMAGE_EDITOR = 6,	
		space_type_items_SEQUENCE_EDITOR = 8,	
		space_type_items_CLIP_EDITOR = 20,	
		space_type_items_TEXT_EDITOR = 9,	
		space_type_items_NODE_EDITOR = 16,	
		space_type_items_LOGIC_EDITOR = 17,	
		space_type_items_PROPERTIES = 4,	
		space_type_items_OUTLINER = 3,	
		space_type_items_USER_PREFERENCES = 19,	
		space_type_items_INFO = 7,	
		space_type_items_FILE_BROWSER = 5,	
		space_type_items_CONSOLE = 18	
	};

	std::map<std::string, int> create_string_to_space_type_items() {
		return {{"EMPTY", space_type_items_EMPTY}, {"VIEW_3D", space_type_items_VIEW_3D}, {"TIMELINE", space_type_items_TIMELINE}, {"GRAPH_EDITOR", space_type_items_GRAPH_EDITOR}, {"DOPESHEET_EDITOR", space_type_items_DOPESHEET_EDITOR}, {"NLA_EDITOR", space_type_items_NLA_EDITOR}, {"IMAGE_EDITOR", space_type_items_IMAGE_EDITOR}, {"SEQUENCE_EDITOR", space_type_items_SEQUENCE_EDITOR}, {"CLIP_EDITOR", space_type_items_CLIP_EDITOR}, {"TEXT_EDITOR", space_type_items_TEXT_EDITOR}, {"NODE_EDITOR", space_type_items_NODE_EDITOR}, {"LOGIC_EDITOR", space_type_items_LOGIC_EDITOR}, {"PROPERTIES", space_type_items_PROPERTIES}, {"OUTLINER", space_type_items_OUTLINER}, {"USER_PREFERENCES", space_type_items_USER_PREFERENCES}, {"INFO", space_type_items_INFO}, {"FILE_BROWSER", space_type_items_FILE_BROWSER}, {"CONSOLE", space_type_items_CONSOLE}};
	};

	std::map<int, std::string> create_space_type_items_to_string() {
		return {{space_type_items_EMPTY, "EMPTY"}, {space_type_items_VIEW_3D, "VIEW_3D"}, {space_type_items_TIMELINE, "TIMELINE"}, {space_type_items_GRAPH_EDITOR, "GRAPH_EDITOR"}, {space_type_items_DOPESHEET_EDITOR, "DOPESHEET_EDITOR"}, {space_type_items_NLA_EDITOR, "NLA_EDITOR"}, {space_type_items_IMAGE_EDITOR, "IMAGE_EDITOR"}, {space_type_items_SEQUENCE_EDITOR, "SEQUENCE_EDITOR"}, {space_type_items_CLIP_EDITOR, "CLIP_EDITOR"}, {space_type_items_TEXT_EDITOR, "TEXT_EDITOR"}, {space_type_items_NODE_EDITOR, "NODE_EDITOR"}, {space_type_items_LOGIC_EDITOR, "LOGIC_EDITOR"}, {space_type_items_PROPERTIES, "PROPERTIES"}, {space_type_items_OUTLINER, "OUTLINER"}, {space_type_items_USER_PREFERENCES, "USER_PREFERENCES"}, {space_type_items_INFO, "INFO"}, {space_type_items_FILE_BROWSER, "FILE_BROWSER"}, {space_type_items_CONSOLE, "CONSOLE"}};
	};

	const std::map<std::string, int> string_to_space_type_items = create_string_to_space_type_items();
	const std::map<int, std::string> space_type_items_to_string = create_space_type_items_to_string();

	space_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<space_type_items_enum>(string_to_space_type_items.at(resstr)))
	}

	void type(space_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", space_type_items_to_string.at(value))
	}

	int x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "x")
	}

	void x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "x", value)
	}

	int y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "y")
	}

	void y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "y", value)
	}

	int width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "width")
	}

	void width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "width", value)
	}

	int height() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "height")
	}

	void height(int value) {
		PRIMITIVE_TYPES_SETTER("i", "height", value)
	}

	void tag_redraw() {
		PYTHON_FUNCTION_CALL("tag_redraw")
	}

	void header_text_set(const std::string text = NULL) {
		PYTHON_FUNCTION_ARGS_CALL("header_text_set", "s", text)
	}
};

class Region : public pyUniplug {
public:
	Region(PyObject* pyobj) : pyUniplug(pyobj) {}
	Region() : pyUniplug(0) { }

	int id() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "id")
	}

	void id(int value) {
		PRIMITIVE_TYPES_SETTER("i", "id", value)
	}

	enum region_type_items_enum {
		region_type_items_WINDOW = 0,	
		region_type_items_HEADER = 1,	
		region_type_items_CHANNELS = 2,	
		region_type_items_TEMPORARY = 3,	
		region_type_items_UI = 4,	
		region_type_items_TOOLS = 5,	
		region_type_items_TOOL_PROPS = 6,	
		region_type_items_PREVIEW = 7	
	};

	std::map<std::string, int> create_string_to_region_type_items() {
		return {{"WINDOW", region_type_items_WINDOW}, {"HEADER", region_type_items_HEADER}, {"CHANNELS", region_type_items_CHANNELS}, {"TEMPORARY", region_type_items_TEMPORARY}, {"UI", region_type_items_UI}, {"TOOLS", region_type_items_TOOLS}, {"TOOL_PROPS", region_type_items_TOOL_PROPS}, {"PREVIEW", region_type_items_PREVIEW}};
	};

	std::map<int, std::string> create_region_type_items_to_string() {
		return {{region_type_items_WINDOW, "WINDOW"}, {region_type_items_HEADER, "HEADER"}, {region_type_items_CHANNELS, "CHANNELS"}, {region_type_items_TEMPORARY, "TEMPORARY"}, {region_type_items_UI, "UI"}, {region_type_items_TOOLS, "TOOLS"}, {region_type_items_TOOL_PROPS, "TOOL_PROPS"}, {region_type_items_PREVIEW, "PREVIEW"}};
	};

	const std::map<std::string, int> string_to_region_type_items = create_string_to_region_type_items();
	const std::map<int, std::string> region_type_items_to_string = create_region_type_items_to_string();

	region_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<region_type_items_enum>(string_to_region_type_items.at(resstr)))
	}

	void type(region_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", region_type_items_to_string.at(value))
	}

	int x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "x")
	}

	void x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "x", value)
	}

	int y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "y")
	}

	void y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "y", value)
	}

	int width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "width")
	}

	void width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "width", value)
	}

	int height() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "height")
	}

	void height(int value) {
		PRIMITIVE_TYPES_SETTER("i", "height", value)
	}

	View2D view2d();

	void tag_redraw() {
		PYTHON_FUNCTION_CALL("tag_redraw")
	}
};

class View2D : public pyUniplug {
public:
	View2D(PyObject* pyobj) : pyUniplug(pyobj) {}
	View2D() : pyUniplug(0) { }

	VFLOAT2 region_to_view(int x, int y) {
		PYTHON_FUNCTION_ARGS_CALL("region_to_view", "ii", x, y)
		CREATE_SINGLE_PYOBJ(result)
		POD_VECTOR_TYPES_CONV(result, FLOAT, (float)PyFloat_AsDouble(item), 2)
		NONCLASS_TYPES_RETURN(result_res)
	}

	std::array<int, 2> view_to_region(float x, float y, bool clip = true) {
		PYTHON_FUNCTION_ARGS_CALL("view_to_region", "ffi", x, y, clip)
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_ARRAY_CONV(result, int, PyLong_AsLong(item), 2)
		NONCLASS_TYPES_RETURN(result_res)
	}
};

class PaintCurve : public ID {
public:
	PaintCurve(PyObject* pyobj) : ID(pyobj) {}
	PaintCurve() : ID(0) { }
};

class Paint : public pyUniplug {
public:
	Paint(PyObject* pyobj) : pyUniplug(pyobj) {}
	Paint() : pyUniplug(0) { }

	Brush brush() {
		CLASS_TYPES_GETTER(Brush, "brush")
	}

	Palette palette() {
		CLASS_TYPES_GETTER(Palette, "palette")
	}

	bool show_brush() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_brush")
	}

	void show_brush(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_brush", value)
	}

	bool show_brush_on_surface() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_brush_on_surface")
	}

	void show_brush_on_surface(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_brush_on_surface", value)
	}

	bool show_low_resolution() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_low_resolution")
	}

	void show_low_resolution(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_low_resolution", value)
	}

	int input_samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_samples")
	}

	void input_samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_samples", value)
	}

	bool use_symmetry_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_symmetry_x")
	}

	void use_symmetry_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_symmetry_x", value)
	}

	bool use_symmetry_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_symmetry_y")
	}

	void use_symmetry_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_symmetry_y", value)
	}

	bool use_symmetry_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_symmetry_z")
	}

	void use_symmetry_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_symmetry_z", value)
	}

	bool use_symmetry_feather() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_symmetry_feather")
	}

	void use_symmetry_feather(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_symmetry_feather", value)
	}

	CurveMapping cavity_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "cavity_curve")
	}

	bool use_cavity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cavity")
	}

	void use_cavity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cavity", value)
	}
};

class Sculpt : public Paint {
public:
	Sculpt(PyObject* pyobj) : Paint(pyobj) {}
	Sculpt() : Paint(0) { }

	std::array<int, 3> radial_symmetry() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "radial_symmetry", 3)
	}

	void radial_symmetry(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "radial_symmetry", 3)
	}

	bool lock_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_x")
	}

	void lock_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_x", value)
	}

	bool lock_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_y")
	}

	void lock_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_y", value)
	}

	bool lock_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_z")
	}

	void lock_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_z", value)
	}

	bool use_threaded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_threaded")
	}

	void use_threaded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_threaded", value)
	}

	bool use_deform_only() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deform_only")
	}

	void use_deform_only(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deform_only", value)
	}

	bool show_diffuse_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_diffuse_color")
	}

	void show_diffuse_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_diffuse_color", value)
	}

	float detail_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "detail_size")
	}

	void detail_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "detail_size", value)
	}

	float detail_percent() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "detail_percent")
	}

	void detail_percent(float value) {
		PRIMITIVE_TYPES_SETTER("f", "detail_percent", value)
	}

	float constant_detail() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "constant_detail")
	}

	void constant_detail(float value) {
		PRIMITIVE_TYPES_SETTER("f", "constant_detail", value)
	}

	bool use_smooth_shading() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_smooth_shading")
	}

	void use_smooth_shading(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_smooth_shading", value)
	}

	enum symmetrize_direction_items_enum {
		symmetrize_direction_items_NEGATIVE_X = 0,	
		symmetrize_direction_items_POSITIVE_X = 3,	
		symmetrize_direction_items_NEGATIVE_Y = 1,	
		symmetrize_direction_items_POSITIVE_Y = 4,	
		symmetrize_direction_items_NEGATIVE_Z = 2,	
		symmetrize_direction_items_POSITIVE_Z = 5	
	};

	std::map<std::string, int> create_string_to_symmetrize_direction_items() {
		return {{"NEGATIVE_X", symmetrize_direction_items_NEGATIVE_X}, {"POSITIVE_X", symmetrize_direction_items_POSITIVE_X}, {"NEGATIVE_Y", symmetrize_direction_items_NEGATIVE_Y}, {"POSITIVE_Y", symmetrize_direction_items_POSITIVE_Y}, {"NEGATIVE_Z", symmetrize_direction_items_NEGATIVE_Z}, {"POSITIVE_Z", symmetrize_direction_items_POSITIVE_Z}};
	};

	std::map<int, std::string> create_symmetrize_direction_items_to_string() {
		return {{symmetrize_direction_items_NEGATIVE_X, "NEGATIVE_X"}, {symmetrize_direction_items_POSITIVE_X, "POSITIVE_X"}, {symmetrize_direction_items_NEGATIVE_Y, "NEGATIVE_Y"}, {symmetrize_direction_items_POSITIVE_Y, "POSITIVE_Y"}, {symmetrize_direction_items_NEGATIVE_Z, "NEGATIVE_Z"}, {symmetrize_direction_items_POSITIVE_Z, "POSITIVE_Z"}};
	};

	const std::map<std::string, int> string_to_symmetrize_direction_items = create_string_to_symmetrize_direction_items();
	const std::map<int, std::string> symmetrize_direction_items_to_string = create_symmetrize_direction_items_to_string();

	symmetrize_direction_items_enum symmetrize_direction() {
		STRING_TYPE_GETTER("symmetrize_direction", static_cast<symmetrize_direction_items_enum>(string_to_symmetrize_direction_items.at(resstr)))
	}

	void symmetrize_direction(symmetrize_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "symmetrize_direction", symmetrize_direction_items_to_string.at(value))
	}

	enum detail_refine_items_enum {
		detail_refine_items_SUBDIVIDE = 4096,	
		detail_refine_items_COLLAPSE = 2048,	
		detail_refine_items_SUBDIVIDE_COLLAPSE = 6144	
	};

	std::map<std::string, int> create_string_to_detail_refine_items() {
		return {{"SUBDIVIDE", detail_refine_items_SUBDIVIDE}, {"COLLAPSE", detail_refine_items_COLLAPSE}, {"SUBDIVIDE_COLLAPSE", detail_refine_items_SUBDIVIDE_COLLAPSE}};
	};

	std::map<int, std::string> create_detail_refine_items_to_string() {
		return {{detail_refine_items_SUBDIVIDE, "SUBDIVIDE"}, {detail_refine_items_COLLAPSE, "COLLAPSE"}, {detail_refine_items_SUBDIVIDE_COLLAPSE, "SUBDIVIDE_COLLAPSE"}};
	};

	const std::map<std::string, int> string_to_detail_refine_items = create_string_to_detail_refine_items();
	const std::map<int, std::string> detail_refine_items_to_string = create_detail_refine_items_to_string();

	detail_refine_items_enum detail_refine_method() {
		STRING_TYPE_GETTER("detail_refine_method", static_cast<detail_refine_items_enum>(string_to_detail_refine_items.at(resstr)))
	}

	void detail_refine_method(detail_refine_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "detail_refine_method", detail_refine_items_to_string.at(value))
	}

	enum detail_type_items_enum {
		detail_type_items_RELATIVE = 0,	
		detail_type_items_CONSTANT = 8192,	
		detail_type_items_BRUSH = 16384	
	};

	std::map<std::string, int> create_string_to_detail_type_items() {
		return {{"RELATIVE", detail_type_items_RELATIVE}, {"CONSTANT", detail_type_items_CONSTANT}, {"BRUSH", detail_type_items_BRUSH}};
	};

	std::map<int, std::string> create_detail_type_items_to_string() {
		return {{detail_type_items_RELATIVE, "RELATIVE"}, {detail_type_items_CONSTANT, "CONSTANT"}, {detail_type_items_BRUSH, "BRUSH"}};
	};

	const std::map<std::string, int> string_to_detail_type_items = create_string_to_detail_type_items();
	const std::map<int, std::string> detail_type_items_to_string = create_detail_type_items_to_string();

	detail_type_items_enum detail_type_method() {
		STRING_TYPE_GETTER("detail_type_method", static_cast<detail_type_items_enum>(string_to_detail_type_items.at(resstr)))
	}

	void detail_type_method(detail_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "detail_type_method", detail_type_items_to_string.at(value))
	}

	float gravity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gravity")
	}

	void gravity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gravity", value)
	}

	Object gravity_object() {
		CLASS_TYPES_GETTER(Object, "gravity_object")
	}
};

class UvSculpt : public Paint {
public:
	UvSculpt(PyObject* pyobj) : Paint(pyobj) {}
	UvSculpt() : Paint(0) { }
};

class VertexPaint : public Paint {
public:
	VertexPaint(PyObject* pyobj) : Paint(pyobj) {}
	VertexPaint() : Paint(0) { }

	bool use_normal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal")
	}

	void use_normal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal", value)
	}

	bool use_spray() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_spray")
	}

	void use_spray(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_spray", value)
	}

	bool use_group_restrict() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_group_restrict")
	}

	void use_group_restrict(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_group_restrict", value)
	}
};

class ImagePaint : public Paint {
public:
	ImagePaint(PyObject* pyobj) : Paint(pyobj) {}
	ImagePaint() : Paint(0) { }

	bool use_occlude() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_occlude")
	}

	void use_occlude(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_occlude", value)
	}

	bool use_backface_culling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_backface_culling")
	}

	void use_backface_culling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_backface_culling", value)
	}

	bool use_normal_falloff() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normal_falloff")
	}

	void use_normal_falloff(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normal_falloff", value)
	}

	bool use_stencil_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stencil_layer")
	}

	void use_stencil_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stencil_layer", value)
	}

	bool invert_stencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_stencil")
	}

	void invert_stencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_stencil", value)
	}

	Image stencil_image() {
		CLASS_TYPES_GETTER(Image, "stencil_image")
	}

	Image canvas() {
		CLASS_TYPES_GETTER(Image, "canvas")
	}

	Image clone_image() {
		CLASS_TYPES_GETTER(Image, "clone_image")
	}

	VFLOAT3 stencil_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "stencil_color", 3)
	}

	void stencil_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "stencil_color", 3)
	}

	float dither() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "dither")
	}

	void dither(float value) {
		PRIMITIVE_TYPES_SETTER("f", "dither", value)
	}

	bool use_clone_layer() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_clone_layer")
	}

	void use_clone_layer(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_clone_layer", value)
	}

	int seam_bleed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seam_bleed")
	}

	void seam_bleed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seam_bleed", value)
	}

	int normal_angle() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "normal_angle")
	}

	void normal_angle(int value) {
		PRIMITIVE_TYPES_SETTER("i", "normal_angle", value)
	}

	std::array<int, 2> screen_grab_size() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "screen_grab_size", 2)
	}

	void screen_grab_size(int values[2]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "screen_grab_size", 2)
	}

	enum paint_type_items_enum {
		paint_type_items_MATERIAL = 0,	
		paint_type_items_IMAGE = 1	
	};

	std::map<std::string, int> create_string_to_paint_type_items() {
		return {{"MATERIAL", paint_type_items_MATERIAL}, {"IMAGE", paint_type_items_IMAGE}};
	};

	std::map<int, std::string> create_paint_type_items_to_string() {
		return {{paint_type_items_MATERIAL, "MATERIAL"}, {paint_type_items_IMAGE, "IMAGE"}};
	};

	const std::map<std::string, int> string_to_paint_type_items = create_string_to_paint_type_items();
	const std::map<int, std::string> paint_type_items_to_string = create_paint_type_items_to_string();

	paint_type_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<paint_type_items_enum>(string_to_paint_type_items.at(resstr)))
	}

	void mode(paint_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", paint_type_items_to_string.at(value))
	}

	bool missing_uvs() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "missing_uvs")
	}

	void missing_uvs(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "missing_uvs", value)
	}

	bool missing_materials() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "missing_materials")
	}

	void missing_materials(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "missing_materials", value)
	}

	bool missing_stencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "missing_stencil")
	}

	void missing_stencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "missing_stencil", value)
	}

	bool missing_texture() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "missing_texture")
	}

	void missing_texture(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "missing_texture", value)
	}

	bool detect_data() {
		PYTHON_FUNCTION_CALL("detect_data")
		CREATE_SINGLE_PYOBJ(ok)
		PRIMITIVE_TYPES_CONV(ok, bool, PyLong_AsLong(ok_obj)==1)
		NONCLASS_TYPES_RETURN(ok_res)
	}
};

class ParticleEdit : public pyUniplug {
public:
	ParticleEdit(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleEdit() : pyUniplug(0) { }

	enum particle_edit_hair_brush_items_enum {
		particle_edit_hair_brush_items_NONE = -1,	
		particle_edit_hair_brush_items_COMB = 0,	
		particle_edit_hair_brush_items_SMOOTH = 5,	
		particle_edit_hair_brush_items_ADD = 4,	
		particle_edit_hair_brush_items_LENGTH = 2,	
		particle_edit_hair_brush_items_PUFF = 3,	
		particle_edit_hair_brush_items_CUT = 1,	
		particle_edit_hair_brush_items_WEIGHT = 6	
	};

	std::map<std::string, int> create_string_to_particle_edit_hair_brush_items() {
		return {{"NONE", particle_edit_hair_brush_items_NONE}, {"COMB", particle_edit_hair_brush_items_COMB}, {"SMOOTH", particle_edit_hair_brush_items_SMOOTH}, {"ADD", particle_edit_hair_brush_items_ADD}, {"LENGTH", particle_edit_hair_brush_items_LENGTH}, {"PUFF", particle_edit_hair_brush_items_PUFF}, {"CUT", particle_edit_hair_brush_items_CUT}, {"WEIGHT", particle_edit_hair_brush_items_WEIGHT}};
	};

	std::map<int, std::string> create_particle_edit_hair_brush_items_to_string() {
		return {{particle_edit_hair_brush_items_NONE, "NONE"}, {particle_edit_hair_brush_items_COMB, "COMB"}, {particle_edit_hair_brush_items_SMOOTH, "SMOOTH"}, {particle_edit_hair_brush_items_ADD, "ADD"}, {particle_edit_hair_brush_items_LENGTH, "LENGTH"}, {particle_edit_hair_brush_items_PUFF, "PUFF"}, {particle_edit_hair_brush_items_CUT, "CUT"}, {particle_edit_hair_brush_items_WEIGHT, "WEIGHT"}};
	};

	const std::map<std::string, int> string_to_particle_edit_hair_brush_items = create_string_to_particle_edit_hair_brush_items();
	const std::map<int, std::string> particle_edit_hair_brush_items_to_string = create_particle_edit_hair_brush_items_to_string();

	particle_edit_hair_brush_items_enum tool() {
		STRING_TYPE_GETTER("tool", static_cast<particle_edit_hair_brush_items_enum>(string_to_particle_edit_hair_brush_items.at(resstr)))
	}

	void tool(particle_edit_hair_brush_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "tool", particle_edit_hair_brush_items_to_string.at(value))
	}

	enum select_mode_items_enum {
		select_mode_items_PATH = 1,	
		select_mode_items_POINT = 2,	
		select_mode_items_TIP = 4	
	};

	std::map<std::string, int> create_string_to_select_mode_items() {
		return {{"PATH", select_mode_items_PATH}, {"POINT", select_mode_items_POINT}, {"TIP", select_mode_items_TIP}};
	};

	std::map<int, std::string> create_select_mode_items_to_string() {
		return {{select_mode_items_PATH, "PATH"}, {select_mode_items_POINT, "POINT"}, {select_mode_items_TIP, "TIP"}};
	};

	const std::map<std::string, int> string_to_select_mode_items = create_string_to_select_mode_items();
	const std::map<int, std::string> select_mode_items_to_string = create_select_mode_items_to_string();

	select_mode_items_enum select_mode() {
		STRING_TYPE_GETTER("select_mode", static_cast<select_mode_items_enum>(string_to_select_mode_items.at(resstr)))
	}

	void select_mode(select_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "select_mode", select_mode_items_to_string.at(value))
	}

	bool use_preserve_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preserve_length")
	}

	void use_preserve_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preserve_length", value)
	}

	bool use_preserve_root() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preserve_root")
	}

	void use_preserve_root(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preserve_root", value)
	}

	bool use_emitter_deflect() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_emitter_deflect")
	}

	void use_emitter_deflect(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_emitter_deflect", value)
	}

	float emitter_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "emitter_distance")
	}

	void emitter_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "emitter_distance", value)
	}

	bool use_fade_time() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fade_time")
	}

	void use_fade_time(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fade_time", value)
	}

	bool use_auto_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_velocity")
	}

	void use_auto_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_velocity", value)
	}

	bool show_particles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_particles")
	}

	void show_particles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_particles", value)
	}

	bool use_default_interpolate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_interpolate")
	}

	void use_default_interpolate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_interpolate", value)
	}

	int default_key_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_key_count")
	}

	void default_key_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_key_count", value)
	}

	ParticleBrush brush();

	int draw_step() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "draw_step")
	}

	void draw_step(int value) {
		PRIMITIVE_TYPES_SETTER("i", "draw_step", value)
	}

	int fade_frames() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "fade_frames")
	}

	void fade_frames(int value) {
		PRIMITIVE_TYPES_SETTER("i", "fade_frames", value)
	}

	enum edit_type_items_enum {
		edit_type_items_PARTICLES = 0,	
		edit_type_items_SOFT_BODY = 1,	
		edit_type_items_CLOTH = 2	
	};

	std::map<std::string, int> create_string_to_edit_type_items() {
		return {{"PARTICLES", edit_type_items_PARTICLES}, {"SOFT_BODY", edit_type_items_SOFT_BODY}, {"CLOTH", edit_type_items_CLOTH}};
	};

	std::map<int, std::string> create_edit_type_items_to_string() {
		return {{edit_type_items_PARTICLES, "PARTICLES"}, {edit_type_items_SOFT_BODY, "SOFT_BODY"}, {edit_type_items_CLOTH, "CLOTH"}};
	};

	const std::map<std::string, int> string_to_edit_type_items = create_string_to_edit_type_items();
	const std::map<int, std::string> edit_type_items_to_string = create_edit_type_items_to_string();

	edit_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<edit_type_items_enum>(string_to_edit_type_items.at(resstr)))
	}

	void type(edit_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", edit_type_items_to_string.at(value))
	}

	bool is_editable() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_editable")
	}

	void is_editable(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_editable", value)
	}

	bool is_hair() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_hair")
	}

	void is_hair(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_hair", value)
	}

	Object object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object shape_object() {
		CLASS_TYPES_GETTER(Object, "shape_object")
	}
};

class ParticleBrush : public pyUniplug {
public:
	ParticleBrush(PyObject* pyobj) : pyUniplug(pyobj) {}
	ParticleBrush() : pyUniplug(0) { }

	int size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "size")
	}

	void size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "size", value)
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	int count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "count")
	}

	void count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "count", value)
	}

	int steps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "steps")
	}

	void steps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "steps", value)
	}

	enum puff_mode_enum {
		puff_mode_ADD = 0,	
		puff_mode_SUB = 1	
	};

	std::map<std::string, int> create_string_to_puff_mode() {
		return {{"ADD", puff_mode_ADD}, {"SUB", puff_mode_SUB}};
	};

	std::map<int, std::string> create_puff_mode_to_string() {
		return {{puff_mode_ADD, "ADD"}, {puff_mode_SUB, "SUB"}};
	};

	const std::map<std::string, int> string_to_puff_mode = create_string_to_puff_mode();
	const std::map<int, std::string> puff_mode_to_string = create_puff_mode_to_string();

	puff_mode_enum puff_mode() {
		STRING_TYPE_GETTER("puff_mode", static_cast<puff_mode_enum>(string_to_puff_mode.at(resstr)))
	}

	void puff_mode(puff_mode_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "puff_mode", puff_mode_to_string.at(value))
	}

	bool use_puff_volume() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_puff_volume")
	}

	void use_puff_volume(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_puff_volume", value)
	}

	enum length_mode_enum {
		length_mode_GROW = 0,	
		length_mode_SHRINK = 1	
	};

	std::map<std::string, int> create_string_to_length_mode() {
		return {{"GROW", length_mode_GROW}, {"SHRINK", length_mode_SHRINK}};
	};

	std::map<int, std::string> create_length_mode_to_string() {
		return {{length_mode_GROW, "GROW"}, {length_mode_SHRINK, "SHRINK"}};
	};

	const std::map<std::string, int> string_to_length_mode = create_string_to_length_mode();
	const std::map<int, std::string> length_mode_to_string = create_length_mode_to_string();

	length_mode_enum length_mode() {
		STRING_TYPE_GETTER("length_mode", static_cast<length_mode_enum>(string_to_length_mode.at(resstr)))
	}

	void length_mode(length_mode_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "length_mode", length_mode_to_string.at(value))
	}

	CurveMapping curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}
};

class Sensor : public pyUniplug {
public:
	Sensor(PyObject* pyobj) : pyUniplug(pyobj) {}
	Sensor() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum sensor_type_items_enum {
		sensor_type_items_ACTUATOR = 12,	
		sensor_type_items_ALWAYS = 0,	
		sensor_type_items_ARMATURE = 14,	
		sensor_type_items_COLLISION = 6,	
		sensor_type_items_DELAY = 13,	
		sensor_type_items_JOYSTICK = 11,	
		sensor_type_items_KEYBOARD = 3,	
		sensor_type_items_MESSAGE = 10,	
		sensor_type_items_MOUSE = 5,	
		sensor_type_items_NEAR = 2,	
		sensor_type_items_PROPERTY = 4,	
		sensor_type_items_RADAR = 7,	
		sensor_type_items_RANDOM = 8,	
		sensor_type_items_RAY = 9	
	};

	std::map<std::string, int> create_string_to_sensor_type_items() {
		return {{"ACTUATOR", sensor_type_items_ACTUATOR}, {"ALWAYS", sensor_type_items_ALWAYS}, {"ARMATURE", sensor_type_items_ARMATURE}, {"COLLISION", sensor_type_items_COLLISION}, {"DELAY", sensor_type_items_DELAY}, {"JOYSTICK", sensor_type_items_JOYSTICK}, {"KEYBOARD", sensor_type_items_KEYBOARD}, {"MESSAGE", sensor_type_items_MESSAGE}, {"MOUSE", sensor_type_items_MOUSE}, {"NEAR", sensor_type_items_NEAR}, {"PROPERTY", sensor_type_items_PROPERTY}, {"RADAR", sensor_type_items_RADAR}, {"RANDOM", sensor_type_items_RANDOM}, {"RAY", sensor_type_items_RAY}};
	};

	std::map<int, std::string> create_sensor_type_items_to_string() {
		return {{sensor_type_items_ACTUATOR, "ACTUATOR"}, {sensor_type_items_ALWAYS, "ALWAYS"}, {sensor_type_items_ARMATURE, "ARMATURE"}, {sensor_type_items_COLLISION, "COLLISION"}, {sensor_type_items_DELAY, "DELAY"}, {sensor_type_items_JOYSTICK, "JOYSTICK"}, {sensor_type_items_KEYBOARD, "KEYBOARD"}, {sensor_type_items_MESSAGE, "MESSAGE"}, {sensor_type_items_MOUSE, "MOUSE"}, {sensor_type_items_NEAR, "NEAR"}, {sensor_type_items_PROPERTY, "PROPERTY"}, {sensor_type_items_RADAR, "RADAR"}, {sensor_type_items_RANDOM, "RANDOM"}, {sensor_type_items_RAY, "RAY"}};
	};

	const std::map<std::string, int> string_to_sensor_type_items = create_string_to_sensor_type_items();
	const std::map<int, std::string> sensor_type_items_to_string = create_sensor_type_items_to_string();

	sensor_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<sensor_type_items_enum>(string_to_sensor_type_items.at(resstr)))
	}

	void type(sensor_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", sensor_type_items_to_string.at(value))
	}

	bool pin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "pin")
	}

	void pin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "pin", value)
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	bool use_level() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_level")
	}

	void use_level(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_level", value)
	}

	bool use_pulse_true_level() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pulse_true_level")
	}

	void use_pulse_true_level(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pulse_true_level", value)
	}

	bool use_pulse_false_level() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pulse_false_level")
	}

	void use_pulse_false_level(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pulse_false_level", value)
	}

	int tick_skip() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tick_skip")
	}

	void tick_skip(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tick_skip", value)
	}

	bool use_tap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tap")
	}

	void use_tap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tap", value)
	}

	std::map<std::string, Controller> controllers() {
		MAP_TYPE_GETTER("controllers", Controller)
	}

	void link(Controller controller) {
		PYTHON_FUNCTION_ARGS_CALL("link", "O", controller.get_pyobjref())
	}

	void unlink(Controller controller) {
		PYTHON_FUNCTION_ARGS_CALL("unlink", "O", controller.get_pyobjref())
	}
};

class AlwaysSensor : public Sensor {
public:
	AlwaysSensor(PyObject* pyobj) : Sensor(pyobj) {}
	AlwaysSensor() : Sensor(0) { }
};

class NearSensor : public Sensor {
public:
	NearSensor(PyObject* pyobj) : Sensor(pyobj) {}
	NearSensor() : Sensor(0) { }

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	float reset_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "reset_distance")
	}

	void reset_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "reset_distance", value)
	}
};

class MouseSensor : public Sensor {
public:
	MouseSensor(PyObject* pyobj) : Sensor(pyobj) {}
	MouseSensor() : Sensor(0) { }

	enum mouse_event_items_enum {
		mouse_event_items_LEFTCLICK = 1,	
		mouse_event_items_MIDDLECLICK = 2,	
		mouse_event_items_RIGHTCLICK = 4,	
		mouse_event_items_WHEELUP = 5,	
		mouse_event_items_WHEELDOWN = 6,	
		mouse_event_items_MOVEMENT = 8,	
		mouse_event_items_MOUSEOVER = 16,	
		mouse_event_items_MOUSEOVERANY = 32	
	};

	std::map<std::string, int> create_string_to_mouse_event_items() {
		return {{"LEFTCLICK", mouse_event_items_LEFTCLICK}, {"MIDDLECLICK", mouse_event_items_MIDDLECLICK}, {"RIGHTCLICK", mouse_event_items_RIGHTCLICK}, {"WHEELUP", mouse_event_items_WHEELUP}, {"WHEELDOWN", mouse_event_items_WHEELDOWN}, {"MOVEMENT", mouse_event_items_MOVEMENT}, {"MOUSEOVER", mouse_event_items_MOUSEOVER}, {"MOUSEOVERANY", mouse_event_items_MOUSEOVERANY}};
	};

	std::map<int, std::string> create_mouse_event_items_to_string() {
		return {{mouse_event_items_LEFTCLICK, "LEFTCLICK"}, {mouse_event_items_MIDDLECLICK, "MIDDLECLICK"}, {mouse_event_items_RIGHTCLICK, "RIGHTCLICK"}, {mouse_event_items_WHEELUP, "WHEELUP"}, {mouse_event_items_WHEELDOWN, "WHEELDOWN"}, {mouse_event_items_MOVEMENT, "MOVEMENT"}, {mouse_event_items_MOUSEOVER, "MOUSEOVER"}, {mouse_event_items_MOUSEOVERANY, "MOUSEOVERANY"}};
	};

	const std::map<std::string, int> string_to_mouse_event_items = create_string_to_mouse_event_items();
	const std::map<int, std::string> mouse_event_items_to_string = create_mouse_event_items_to_string();

	mouse_event_items_enum mouse_event() {
		STRING_TYPE_GETTER("mouse_event", static_cast<mouse_event_items_enum>(string_to_mouse_event_items.at(resstr)))
	}

	void mouse_event(mouse_event_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mouse_event", mouse_event_items_to_string.at(value))
	}

	bool use_pulse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pulse")
	}

	void use_pulse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pulse", value)
	}

	enum prop_mouse_type_items_enum {
		prop_mouse_type_items_PROPERTY = 0,	
		prop_mouse_type_items_MATERIAL = 1	
	};

	std::map<std::string, int> create_string_to_prop_mouse_type_items() {
		return {{"PROPERTY", prop_mouse_type_items_PROPERTY}, {"MATERIAL", prop_mouse_type_items_MATERIAL}};
	};

	std::map<int, std::string> create_prop_mouse_type_items_to_string() {
		return {{prop_mouse_type_items_PROPERTY, "PROPERTY"}, {prop_mouse_type_items_MATERIAL, "MATERIAL"}};
	};

	const std::map<std::string, int> string_to_prop_mouse_type_items = create_string_to_prop_mouse_type_items();
	const std::map<int, std::string> prop_mouse_type_items_to_string = create_prop_mouse_type_items_to_string();

	prop_mouse_type_items_enum use_material() {
		STRING_TYPE_GETTER("use_material", static_cast<prop_mouse_type_items_enum>(string_to_prop_mouse_type_items.at(resstr)))
	}

	void use_material(prop_mouse_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "use_material", prop_mouse_type_items_to_string.at(value))
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	std::string material() {
		STRING_TYPE_GETTER("material", resstr)
	}

	void material(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "material", value)
	}

	bool use_x_ray() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x_ray")
	}

	void use_x_ray(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x_ray", value)
	}
};

class KeyboardSensor : public Sensor {
public:
	KeyboardSensor(PyObject* pyobj) : Sensor(pyobj) {}
	KeyboardSensor() : Sensor(0) { }

	enum event_type_items_enum {
		event_type_items_NONE = 0,	
		event_type_items_LEFTMOUSE = 1,	
		event_type_items_MIDDLEMOUSE = 2,	
		event_type_items_RIGHTMOUSE = 3,	
		event_type_items_BUTTON4MOUSE = 7,	
		event_type_items_BUTTON5MOUSE = 8,	
		event_type_items_BUTTON6MOUSE = 18,	
		event_type_items_BUTTON7MOUSE = 19,	
		event_type_items_ACTIONMOUSE = 5,	
		event_type_items_SELECTMOUSE = 6,	
		event_type_items_MOUSEMOVE = 4,	
		event_type_items_INBETWEEN_MOUSEMOVE = 17,	
		event_type_items_TRACKPADPAN = 14,	
		event_type_items_TRACKPADZOOM = 15,	
		event_type_items_MOUSEROTATE = 16,	
		event_type_items_WHEELUPMOUSE = 10,	
		event_type_items_WHEELDOWNMOUSE = 11,	
		event_type_items_WHEELINMOUSE = 12,	
		event_type_items_WHEELOUTMOUSE = 13,	
		event_type_items_EVT_TWEAK_L = 20482,	
		event_type_items_EVT_TWEAK_M = 20483,	
		event_type_items_EVT_TWEAK_R = 20484,	
		event_type_items_EVT_TWEAK_A = 20485,	
		event_type_items_EVT_TWEAK_S = 20486,	
		event_type_items_A = 97,	
		event_type_items_B = 98,	
		event_type_items_C = 99,	
		event_type_items_D = 100,	
		event_type_items_E = 101,	
		event_type_items_F = 102,	
		event_type_items_G = 103,	
		event_type_items_H = 104,	
		event_type_items_I = 105,	
		event_type_items_J = 106,	
		event_type_items_K = 107,	
		event_type_items_L = 108,	
		event_type_items_M = 109,	
		event_type_items_N = 110,	
		event_type_items_O = 111,	
		event_type_items_P = 112,	
		event_type_items_Q = 113,	
		event_type_items_R = 114,	
		event_type_items_S = 115,	
		event_type_items_T = 116,	
		event_type_items_U = 117,	
		event_type_items_V = 118,	
		event_type_items_W = 119,	
		event_type_items_X = 120,	
		event_type_items_Y = 121,	
		event_type_items_Z = 122,	
		event_type_items_ZERO = 48,	
		event_type_items_ONE = 49,	
		event_type_items_TWO = 50,	
		event_type_items_THREE = 51,	
		event_type_items_FOUR = 52,	
		event_type_items_FIVE = 53,	
		event_type_items_SIX = 54,	
		event_type_items_SEVEN = 55,	
		event_type_items_EIGHT = 56,	
		event_type_items_NINE = 57,	
		event_type_items_LEFT_CTRL = 212,	
		event_type_items_LEFT_ALT = 213,	
		event_type_items_LEFT_SHIFT = 217,	
		event_type_items_RIGHT_ALT = 214,	
		event_type_items_RIGHT_CTRL = 215,	
		event_type_items_RIGHT_SHIFT = 216,	
		event_type_items_OSKEY = 172,	
		event_type_items_GRLESS = 173,	
		event_type_items_ESC = 218,	
		event_type_items_TAB = 219,	
		event_type_items_RET = 220,	
		event_type_items_SPACE = 221,	
		event_type_items_LINE_FEED = 222,	
		event_type_items_BACK_SPACE = 223,	
		event_type_items_DEL = 224,	
		event_type_items_SEMI_COLON = 225,	
		event_type_items_PERIOD = 226,	
		event_type_items_COMMA = 227,	
		event_type_items_QUOTE = 228,	
		event_type_items_ACCENT_GRAVE = 229,	
		event_type_items_MINUS = 230,	
		event_type_items_SLASH = 232,	
		event_type_items_BACK_SLASH = 233,	
		event_type_items_EQUAL = 234,	
		event_type_items_LEFT_BRACKET = 235,	
		event_type_items_RIGHT_BRACKET = 236,	
		event_type_items_LEFT_ARROW = 137,	
		event_type_items_DOWN_ARROW = 138,	
		event_type_items_RIGHT_ARROW = 139,	
		event_type_items_UP_ARROW = 140,	
		event_type_items_NUMPAD_2 = 152,	
		event_type_items_NUMPAD_4 = 154,	
		event_type_items_NUMPAD_6 = 156,	
		event_type_items_NUMPAD_8 = 158,	
		event_type_items_NUMPAD_1 = 151,	
		event_type_items_NUMPAD_3 = 153,	
		event_type_items_NUMPAD_5 = 155,	
		event_type_items_NUMPAD_7 = 157,	
		event_type_items_NUMPAD_9 = 159,	
		event_type_items_NUMPAD_PERIOD = 199,	
		event_type_items_NUMPAD_SLASH = 161,	
		event_type_items_NUMPAD_ASTERIX = 160,	
		event_type_items_NUMPAD_0 = 150,	
		event_type_items_NUMPAD_MINUS = 162,	
		event_type_items_NUMPAD_ENTER = 163,	
		event_type_items_NUMPAD_PLUS = 164,	
		event_type_items_F1 = 300,	
		event_type_items_F2 = 301,	
		event_type_items_F3 = 302,	
		event_type_items_F4 = 303,	
		event_type_items_F5 = 304,	
		event_type_items_F6 = 305,	
		event_type_items_F7 = 306,	
		event_type_items_F8 = 307,	
		event_type_items_F9 = 308,	
		event_type_items_F10 = 309,	
		event_type_items_F11 = 310,	
		event_type_items_F12 = 311,	
		event_type_items_F13 = 312,	
		event_type_items_F14 = 313,	
		event_type_items_F15 = 314,	
		event_type_items_F16 = 315,	
		event_type_items_F17 = 316,	
		event_type_items_F18 = 317,	
		event_type_items_F19 = 318,	
		event_type_items_PAUSE = 165,	
		event_type_items_INSERT = 166,	
		event_type_items_HOME = 167,	
		event_type_items_PAGE_UP = 168,	
		event_type_items_PAGE_DOWN = 169,	
		event_type_items_END = 170,	
		event_type_items_MEDIA_PLAY = 174,	
		event_type_items_MEDIA_STOP = 175,	
		event_type_items_MEDIA_FIRST = 176,	
		event_type_items_MEDIA_LAST = 177,	
		event_type_items_TEXTINPUT = -2,	
		event_type_items_WINDOW_DEACTIVATE = 260,	
		event_type_items_TIMER = 272,	
		event_type_items_TIMER0 = 273,	
		event_type_items_TIMER1 = 274,	
		event_type_items_TIMER2 = 275,	
		event_type_items_TIMER_JOBS = 276,	
		event_type_items_TIMER_AUTOSAVE = 277,	
		event_type_items_TIMER_REPORT = 278,	
		event_type_items_TIMERREGION = 279,	
		event_type_items_NDOF_MOTION = 400,	
		event_type_items_NDOF_BUTTON_MENU = 401,	
		event_type_items_NDOF_BUTTON_FIT = 402,	
		event_type_items_NDOF_BUTTON_TOP = 403,	
		event_type_items_NDOF_BUTTON_BOTTOM = 404,	
		event_type_items_NDOF_BUTTON_LEFT = 405,	
		event_type_items_NDOF_BUTTON_RIGHT = 406,	
		event_type_items_NDOF_BUTTON_FRONT = 407,	
		event_type_items_NDOF_BUTTON_BACK = 408,	
		event_type_items_NDOF_BUTTON_ISO1 = 409,	
		event_type_items_NDOF_BUTTON_ISO2 = 410,	
		event_type_items_NDOF_BUTTON_ROLL_CW = 411,	
		event_type_items_NDOF_BUTTON_ROLL_CCW = 412,	
		event_type_items_NDOF_BUTTON_SPIN_CW = 413,	
		event_type_items_NDOF_BUTTON_SPIN_CCW = 414,	
		event_type_items_NDOF_BUTTON_TILT_CW = 415,	
		event_type_items_NDOF_BUTTON_TILT_CCW = 416,	
		event_type_items_NDOF_BUTTON_ROTATE = 417,	
		event_type_items_NDOF_BUTTON_PANZOOM = 418,	
		event_type_items_NDOF_BUTTON_DOMINANT = 419,	
		event_type_items_NDOF_BUTTON_PLUS = 420,	
		event_type_items_NDOF_BUTTON_MINUS = 421,	
		event_type_items_NDOF_BUTTON_ESC = 422,	
		event_type_items_NDOF_BUTTON_ALT = 423,	
		event_type_items_NDOF_BUTTON_SHIFT = 424,	
		event_type_items_NDOF_BUTTON_CTRL = 425,	
		event_type_items_NDOF_BUTTON_1 = 426,	
		event_type_items_NDOF_BUTTON_2 = 427,	
		event_type_items_NDOF_BUTTON_3 = 428,	
		event_type_items_NDOF_BUTTON_4 = 429,	
		event_type_items_NDOF_BUTTON_5 = 430,	
		event_type_items_NDOF_BUTTON_6 = 431,	
		event_type_items_NDOF_BUTTON_7 = 432,	
		event_type_items_NDOF_BUTTON_8 = 433,	
		event_type_items_NDOF_BUTTON_9 = 434,	
		event_type_items_NDOF_BUTTON_10 = 435,	
		event_type_items_NDOF_BUTTON_A = 436,	
		event_type_items_NDOF_BUTTON_B = 437,	
		event_type_items_NDOF_BUTTON_C = 438	
	};

	std::map<std::string, int> create_string_to_event_type_items() {
		return {{"NONE", event_type_items_NONE}, {"LEFTMOUSE", event_type_items_LEFTMOUSE}, {"MIDDLEMOUSE", event_type_items_MIDDLEMOUSE}, {"RIGHTMOUSE", event_type_items_RIGHTMOUSE}, {"BUTTON4MOUSE", event_type_items_BUTTON4MOUSE}, {"BUTTON5MOUSE", event_type_items_BUTTON5MOUSE}, {"BUTTON6MOUSE", event_type_items_BUTTON6MOUSE}, {"BUTTON7MOUSE", event_type_items_BUTTON7MOUSE}, {"ACTIONMOUSE", event_type_items_ACTIONMOUSE}, {"SELECTMOUSE", event_type_items_SELECTMOUSE}, {"MOUSEMOVE", event_type_items_MOUSEMOVE}, {"INBETWEEN_MOUSEMOVE", event_type_items_INBETWEEN_MOUSEMOVE}, {"TRACKPADPAN", event_type_items_TRACKPADPAN}, {"TRACKPADZOOM", event_type_items_TRACKPADZOOM}, {"MOUSEROTATE", event_type_items_MOUSEROTATE}, {"WHEELUPMOUSE", event_type_items_WHEELUPMOUSE}, {"WHEELDOWNMOUSE", event_type_items_WHEELDOWNMOUSE}, {"WHEELINMOUSE", event_type_items_WHEELINMOUSE}, {"WHEELOUTMOUSE", event_type_items_WHEELOUTMOUSE}, {"EVT_TWEAK_L", event_type_items_EVT_TWEAK_L}, {"EVT_TWEAK_M", event_type_items_EVT_TWEAK_M}, {"EVT_TWEAK_R", event_type_items_EVT_TWEAK_R}, {"EVT_TWEAK_A", event_type_items_EVT_TWEAK_A}, {"EVT_TWEAK_S", event_type_items_EVT_TWEAK_S}, {"A", event_type_items_A}, {"B", event_type_items_B}, {"C", event_type_items_C}, {"D", event_type_items_D}, {"E", event_type_items_E}, {"F", event_type_items_F}, {"G", event_type_items_G}, {"H", event_type_items_H}, {"I", event_type_items_I}, {"J", event_type_items_J}, {"K", event_type_items_K}, {"L", event_type_items_L}, {"M", event_type_items_M}, {"N", event_type_items_N}, {"O", event_type_items_O}, {"P", event_type_items_P}, {"Q", event_type_items_Q}, {"R", event_type_items_R}, {"S", event_type_items_S}, {"T", event_type_items_T}, {"U", event_type_items_U}, {"V", event_type_items_V}, {"W", event_type_items_W}, {"X", event_type_items_X}, {"Y", event_type_items_Y}, {"Z", event_type_items_Z}, {"ZERO", event_type_items_ZERO}, {"ONE", event_type_items_ONE}, {"TWO", event_type_items_TWO}, {"THREE", event_type_items_THREE}, {"FOUR", event_type_items_FOUR}, {"FIVE", event_type_items_FIVE}, {"SIX", event_type_items_SIX}, {"SEVEN", event_type_items_SEVEN}, {"EIGHT", event_type_items_EIGHT}, {"NINE", event_type_items_NINE}, {"LEFT_CTRL", event_type_items_LEFT_CTRL}, {"LEFT_ALT", event_type_items_LEFT_ALT}, {"LEFT_SHIFT", event_type_items_LEFT_SHIFT}, {"RIGHT_ALT", event_type_items_RIGHT_ALT}, {"RIGHT_CTRL", event_type_items_RIGHT_CTRL}, {"RIGHT_SHIFT", event_type_items_RIGHT_SHIFT}, {"OSKEY", event_type_items_OSKEY}, {"GRLESS", event_type_items_GRLESS}, {"ESC", event_type_items_ESC}, {"TAB", event_type_items_TAB}, {"RET", event_type_items_RET}, {"SPACE", event_type_items_SPACE}, {"LINE_FEED", event_type_items_LINE_FEED}, {"BACK_SPACE", event_type_items_BACK_SPACE}, {"DEL", event_type_items_DEL}, {"SEMI_COLON", event_type_items_SEMI_COLON}, {"PERIOD", event_type_items_PERIOD}, {"COMMA", event_type_items_COMMA}, {"QUOTE", event_type_items_QUOTE}, {"ACCENT_GRAVE", event_type_items_ACCENT_GRAVE}, {"MINUS", event_type_items_MINUS}, {"SLASH", event_type_items_SLASH}, {"BACK_SLASH", event_type_items_BACK_SLASH}, {"EQUAL", event_type_items_EQUAL}, {"LEFT_BRACKET", event_type_items_LEFT_BRACKET}, {"RIGHT_BRACKET", event_type_items_RIGHT_BRACKET}, {"LEFT_ARROW", event_type_items_LEFT_ARROW}, {"DOWN_ARROW", event_type_items_DOWN_ARROW}, {"RIGHT_ARROW", event_type_items_RIGHT_ARROW}, {"UP_ARROW", event_type_items_UP_ARROW}, {"NUMPAD_2", event_type_items_NUMPAD_2}, {"NUMPAD_4", event_type_items_NUMPAD_4}, {"NUMPAD_6", event_type_items_NUMPAD_6}, {"NUMPAD_8", event_type_items_NUMPAD_8}, {"NUMPAD_1", event_type_items_NUMPAD_1}, {"NUMPAD_3", event_type_items_NUMPAD_3}, {"NUMPAD_5", event_type_items_NUMPAD_5}, {"NUMPAD_7", event_type_items_NUMPAD_7}, {"NUMPAD_9", event_type_items_NUMPAD_9}, {"NUMPAD_PERIOD", event_type_items_NUMPAD_PERIOD}, {"NUMPAD_SLASH", event_type_items_NUMPAD_SLASH}, {"NUMPAD_ASTERIX", event_type_items_NUMPAD_ASTERIX}, {"NUMPAD_0", event_type_items_NUMPAD_0}, {"NUMPAD_MINUS", event_type_items_NUMPAD_MINUS}, {"NUMPAD_ENTER", event_type_items_NUMPAD_ENTER}, {"NUMPAD_PLUS", event_type_items_NUMPAD_PLUS}, {"F1", event_type_items_F1}, {"F2", event_type_items_F2}, {"F3", event_type_items_F3}, {"F4", event_type_items_F4}, {"F5", event_type_items_F5}, {"F6", event_type_items_F6}, {"F7", event_type_items_F7}, {"F8", event_type_items_F8}, {"F9", event_type_items_F9}, {"F10", event_type_items_F10}, {"F11", event_type_items_F11}, {"F12", event_type_items_F12}, {"F13", event_type_items_F13}, {"F14", event_type_items_F14}, {"F15", event_type_items_F15}, {"F16", event_type_items_F16}, {"F17", event_type_items_F17}, {"F18", event_type_items_F18}, {"F19", event_type_items_F19}, {"PAUSE", event_type_items_PAUSE}, {"INSERT", event_type_items_INSERT}, {"HOME", event_type_items_HOME}, {"PAGE_UP", event_type_items_PAGE_UP}, {"PAGE_DOWN", event_type_items_PAGE_DOWN}, {"END", event_type_items_END}, {"MEDIA_PLAY", event_type_items_MEDIA_PLAY}, {"MEDIA_STOP", event_type_items_MEDIA_STOP}, {"MEDIA_FIRST", event_type_items_MEDIA_FIRST}, {"MEDIA_LAST", event_type_items_MEDIA_LAST}, {"TEXTINPUT", event_type_items_TEXTINPUT}, {"WINDOW_DEACTIVATE", event_type_items_WINDOW_DEACTIVATE}, {"TIMER", event_type_items_TIMER}, {"TIMER0", event_type_items_TIMER0}, {"TIMER1", event_type_items_TIMER1}, {"TIMER2", event_type_items_TIMER2}, {"TIMER_JOBS", event_type_items_TIMER_JOBS}, {"TIMER_AUTOSAVE", event_type_items_TIMER_AUTOSAVE}, {"TIMER_REPORT", event_type_items_TIMER_REPORT}, {"TIMERREGION", event_type_items_TIMERREGION}, {"NDOF_MOTION", event_type_items_NDOF_MOTION}, {"NDOF_BUTTON_MENU", event_type_items_NDOF_BUTTON_MENU}, {"NDOF_BUTTON_FIT", event_type_items_NDOF_BUTTON_FIT}, {"NDOF_BUTTON_TOP", event_type_items_NDOF_BUTTON_TOP}, {"NDOF_BUTTON_BOTTOM", event_type_items_NDOF_BUTTON_BOTTOM}, {"NDOF_BUTTON_LEFT", event_type_items_NDOF_BUTTON_LEFT}, {"NDOF_BUTTON_RIGHT", event_type_items_NDOF_BUTTON_RIGHT}, {"NDOF_BUTTON_FRONT", event_type_items_NDOF_BUTTON_FRONT}, {"NDOF_BUTTON_BACK", event_type_items_NDOF_BUTTON_BACK}, {"NDOF_BUTTON_ISO1", event_type_items_NDOF_BUTTON_ISO1}, {"NDOF_BUTTON_ISO2", event_type_items_NDOF_BUTTON_ISO2}, {"NDOF_BUTTON_ROLL_CW", event_type_items_NDOF_BUTTON_ROLL_CW}, {"NDOF_BUTTON_ROLL_CCW", event_type_items_NDOF_BUTTON_ROLL_CCW}, {"NDOF_BUTTON_SPIN_CW", event_type_items_NDOF_BUTTON_SPIN_CW}, {"NDOF_BUTTON_SPIN_CCW", event_type_items_NDOF_BUTTON_SPIN_CCW}, {"NDOF_BUTTON_TILT_CW", event_type_items_NDOF_BUTTON_TILT_CW}, {"NDOF_BUTTON_TILT_CCW", event_type_items_NDOF_BUTTON_TILT_CCW}, {"NDOF_BUTTON_ROTATE", event_type_items_NDOF_BUTTON_ROTATE}, {"NDOF_BUTTON_PANZOOM", event_type_items_NDOF_BUTTON_PANZOOM}, {"NDOF_BUTTON_DOMINANT", event_type_items_NDOF_BUTTON_DOMINANT}, {"NDOF_BUTTON_PLUS", event_type_items_NDOF_BUTTON_PLUS}, {"NDOF_BUTTON_MINUS", event_type_items_NDOF_BUTTON_MINUS}, {"NDOF_BUTTON_ESC", event_type_items_NDOF_BUTTON_ESC}, {"NDOF_BUTTON_ALT", event_type_items_NDOF_BUTTON_ALT}, {"NDOF_BUTTON_SHIFT", event_type_items_NDOF_BUTTON_SHIFT}, {"NDOF_BUTTON_CTRL", event_type_items_NDOF_BUTTON_CTRL}, {"NDOF_BUTTON_1", event_type_items_NDOF_BUTTON_1}, {"NDOF_BUTTON_2", event_type_items_NDOF_BUTTON_2}, {"NDOF_BUTTON_3", event_type_items_NDOF_BUTTON_3}, {"NDOF_BUTTON_4", event_type_items_NDOF_BUTTON_4}, {"NDOF_BUTTON_5", event_type_items_NDOF_BUTTON_5}, {"NDOF_BUTTON_6", event_type_items_NDOF_BUTTON_6}, {"NDOF_BUTTON_7", event_type_items_NDOF_BUTTON_7}, {"NDOF_BUTTON_8", event_type_items_NDOF_BUTTON_8}, {"NDOF_BUTTON_9", event_type_items_NDOF_BUTTON_9}, {"NDOF_BUTTON_10", event_type_items_NDOF_BUTTON_10}, {"NDOF_BUTTON_A", event_type_items_NDOF_BUTTON_A}, {"NDOF_BUTTON_B", event_type_items_NDOF_BUTTON_B}, {"NDOF_BUTTON_C", event_type_items_NDOF_BUTTON_C}};
	};

	std::map<int, std::string> create_event_type_items_to_string() {
		return {{event_type_items_NONE, "NONE"}, {event_type_items_LEFTMOUSE, "LEFTMOUSE"}, {event_type_items_MIDDLEMOUSE, "MIDDLEMOUSE"}, {event_type_items_RIGHTMOUSE, "RIGHTMOUSE"}, {event_type_items_BUTTON4MOUSE, "BUTTON4MOUSE"}, {event_type_items_BUTTON5MOUSE, "BUTTON5MOUSE"}, {event_type_items_BUTTON6MOUSE, "BUTTON6MOUSE"}, {event_type_items_BUTTON7MOUSE, "BUTTON7MOUSE"}, {event_type_items_ACTIONMOUSE, "ACTIONMOUSE"}, {event_type_items_SELECTMOUSE, "SELECTMOUSE"}, {event_type_items_MOUSEMOVE, "MOUSEMOVE"}, {event_type_items_INBETWEEN_MOUSEMOVE, "INBETWEEN_MOUSEMOVE"}, {event_type_items_TRACKPADPAN, "TRACKPADPAN"}, {event_type_items_TRACKPADZOOM, "TRACKPADZOOM"}, {event_type_items_MOUSEROTATE, "MOUSEROTATE"}, {event_type_items_WHEELUPMOUSE, "WHEELUPMOUSE"}, {event_type_items_WHEELDOWNMOUSE, "WHEELDOWNMOUSE"}, {event_type_items_WHEELINMOUSE, "WHEELINMOUSE"}, {event_type_items_WHEELOUTMOUSE, "WHEELOUTMOUSE"}, {event_type_items_EVT_TWEAK_L, "EVT_TWEAK_L"}, {event_type_items_EVT_TWEAK_M, "EVT_TWEAK_M"}, {event_type_items_EVT_TWEAK_R, "EVT_TWEAK_R"}, {event_type_items_EVT_TWEAK_A, "EVT_TWEAK_A"}, {event_type_items_EVT_TWEAK_S, "EVT_TWEAK_S"}, {event_type_items_A, "A"}, {event_type_items_B, "B"}, {event_type_items_C, "C"}, {event_type_items_D, "D"}, {event_type_items_E, "E"}, {event_type_items_F, "F"}, {event_type_items_G, "G"}, {event_type_items_H, "H"}, {event_type_items_I, "I"}, {event_type_items_J, "J"}, {event_type_items_K, "K"}, {event_type_items_L, "L"}, {event_type_items_M, "M"}, {event_type_items_N, "N"}, {event_type_items_O, "O"}, {event_type_items_P, "P"}, {event_type_items_Q, "Q"}, {event_type_items_R, "R"}, {event_type_items_S, "S"}, {event_type_items_T, "T"}, {event_type_items_U, "U"}, {event_type_items_V, "V"}, {event_type_items_W, "W"}, {event_type_items_X, "X"}, {event_type_items_Y, "Y"}, {event_type_items_Z, "Z"}, {event_type_items_ZERO, "ZERO"}, {event_type_items_ONE, "ONE"}, {event_type_items_TWO, "TWO"}, {event_type_items_THREE, "THREE"}, {event_type_items_FOUR, "FOUR"}, {event_type_items_FIVE, "FIVE"}, {event_type_items_SIX, "SIX"}, {event_type_items_SEVEN, "SEVEN"}, {event_type_items_EIGHT, "EIGHT"}, {event_type_items_NINE, "NINE"}, {event_type_items_LEFT_CTRL, "LEFT_CTRL"}, {event_type_items_LEFT_ALT, "LEFT_ALT"}, {event_type_items_LEFT_SHIFT, "LEFT_SHIFT"}, {event_type_items_RIGHT_ALT, "RIGHT_ALT"}, {event_type_items_RIGHT_CTRL, "RIGHT_CTRL"}, {event_type_items_RIGHT_SHIFT, "RIGHT_SHIFT"}, {event_type_items_OSKEY, "OSKEY"}, {event_type_items_GRLESS, "GRLESS"}, {event_type_items_ESC, "ESC"}, {event_type_items_TAB, "TAB"}, {event_type_items_RET, "RET"}, {event_type_items_SPACE, "SPACE"}, {event_type_items_LINE_FEED, "LINE_FEED"}, {event_type_items_BACK_SPACE, "BACK_SPACE"}, {event_type_items_DEL, "DEL"}, {event_type_items_SEMI_COLON, "SEMI_COLON"}, {event_type_items_PERIOD, "PERIOD"}, {event_type_items_COMMA, "COMMA"}, {event_type_items_QUOTE, "QUOTE"}, {event_type_items_ACCENT_GRAVE, "ACCENT_GRAVE"}, {event_type_items_MINUS, "MINUS"}, {event_type_items_SLASH, "SLASH"}, {event_type_items_BACK_SLASH, "BACK_SLASH"}, {event_type_items_EQUAL, "EQUAL"}, {event_type_items_LEFT_BRACKET, "LEFT_BRACKET"}, {event_type_items_RIGHT_BRACKET, "RIGHT_BRACKET"}, {event_type_items_LEFT_ARROW, "LEFT_ARROW"}, {event_type_items_DOWN_ARROW, "DOWN_ARROW"}, {event_type_items_RIGHT_ARROW, "RIGHT_ARROW"}, {event_type_items_UP_ARROW, "UP_ARROW"}, {event_type_items_NUMPAD_2, "NUMPAD_2"}, {event_type_items_NUMPAD_4, "NUMPAD_4"}, {event_type_items_NUMPAD_6, "NUMPAD_6"}, {event_type_items_NUMPAD_8, "NUMPAD_8"}, {event_type_items_NUMPAD_1, "NUMPAD_1"}, {event_type_items_NUMPAD_3, "NUMPAD_3"}, {event_type_items_NUMPAD_5, "NUMPAD_5"}, {event_type_items_NUMPAD_7, "NUMPAD_7"}, {event_type_items_NUMPAD_9, "NUMPAD_9"}, {event_type_items_NUMPAD_PERIOD, "NUMPAD_PERIOD"}, {event_type_items_NUMPAD_SLASH, "NUMPAD_SLASH"}, {event_type_items_NUMPAD_ASTERIX, "NUMPAD_ASTERIX"}, {event_type_items_NUMPAD_0, "NUMPAD_0"}, {event_type_items_NUMPAD_MINUS, "NUMPAD_MINUS"}, {event_type_items_NUMPAD_ENTER, "NUMPAD_ENTER"}, {event_type_items_NUMPAD_PLUS, "NUMPAD_PLUS"}, {event_type_items_F1, "F1"}, {event_type_items_F2, "F2"}, {event_type_items_F3, "F3"}, {event_type_items_F4, "F4"}, {event_type_items_F5, "F5"}, {event_type_items_F6, "F6"}, {event_type_items_F7, "F7"}, {event_type_items_F8, "F8"}, {event_type_items_F9, "F9"}, {event_type_items_F10, "F10"}, {event_type_items_F11, "F11"}, {event_type_items_F12, "F12"}, {event_type_items_F13, "F13"}, {event_type_items_F14, "F14"}, {event_type_items_F15, "F15"}, {event_type_items_F16, "F16"}, {event_type_items_F17, "F17"}, {event_type_items_F18, "F18"}, {event_type_items_F19, "F19"}, {event_type_items_PAUSE, "PAUSE"}, {event_type_items_INSERT, "INSERT"}, {event_type_items_HOME, "HOME"}, {event_type_items_PAGE_UP, "PAGE_UP"}, {event_type_items_PAGE_DOWN, "PAGE_DOWN"}, {event_type_items_END, "END"}, {event_type_items_MEDIA_PLAY, "MEDIA_PLAY"}, {event_type_items_MEDIA_STOP, "MEDIA_STOP"}, {event_type_items_MEDIA_FIRST, "MEDIA_FIRST"}, {event_type_items_MEDIA_LAST, "MEDIA_LAST"}, {event_type_items_TEXTINPUT, "TEXTINPUT"}, {event_type_items_WINDOW_DEACTIVATE, "WINDOW_DEACTIVATE"}, {event_type_items_TIMER, "TIMER"}, {event_type_items_TIMER0, "TIMER0"}, {event_type_items_TIMER1, "TIMER1"}, {event_type_items_TIMER2, "TIMER2"}, {event_type_items_TIMER_JOBS, "TIMER_JOBS"}, {event_type_items_TIMER_AUTOSAVE, "TIMER_AUTOSAVE"}, {event_type_items_TIMER_REPORT, "TIMER_REPORT"}, {event_type_items_TIMERREGION, "TIMERREGION"}, {event_type_items_NDOF_MOTION, "NDOF_MOTION"}, {event_type_items_NDOF_BUTTON_MENU, "NDOF_BUTTON_MENU"}, {event_type_items_NDOF_BUTTON_FIT, "NDOF_BUTTON_FIT"}, {event_type_items_NDOF_BUTTON_TOP, "NDOF_BUTTON_TOP"}, {event_type_items_NDOF_BUTTON_BOTTOM, "NDOF_BUTTON_BOTTOM"}, {event_type_items_NDOF_BUTTON_LEFT, "NDOF_BUTTON_LEFT"}, {event_type_items_NDOF_BUTTON_RIGHT, "NDOF_BUTTON_RIGHT"}, {event_type_items_NDOF_BUTTON_FRONT, "NDOF_BUTTON_FRONT"}, {event_type_items_NDOF_BUTTON_BACK, "NDOF_BUTTON_BACK"}, {event_type_items_NDOF_BUTTON_ISO1, "NDOF_BUTTON_ISO1"}, {event_type_items_NDOF_BUTTON_ISO2, "NDOF_BUTTON_ISO2"}, {event_type_items_NDOF_BUTTON_ROLL_CW, "NDOF_BUTTON_ROLL_CW"}, {event_type_items_NDOF_BUTTON_ROLL_CCW, "NDOF_BUTTON_ROLL_CCW"}, {event_type_items_NDOF_BUTTON_SPIN_CW, "NDOF_BUTTON_SPIN_CW"}, {event_type_items_NDOF_BUTTON_SPIN_CCW, "NDOF_BUTTON_SPIN_CCW"}, {event_type_items_NDOF_BUTTON_TILT_CW, "NDOF_BUTTON_TILT_CW"}, {event_type_items_NDOF_BUTTON_TILT_CCW, "NDOF_BUTTON_TILT_CCW"}, {event_type_items_NDOF_BUTTON_ROTATE, "NDOF_BUTTON_ROTATE"}, {event_type_items_NDOF_BUTTON_PANZOOM, "NDOF_BUTTON_PANZOOM"}, {event_type_items_NDOF_BUTTON_DOMINANT, "NDOF_BUTTON_DOMINANT"}, {event_type_items_NDOF_BUTTON_PLUS, "NDOF_BUTTON_PLUS"}, {event_type_items_NDOF_BUTTON_MINUS, "NDOF_BUTTON_MINUS"}, {event_type_items_NDOF_BUTTON_ESC, "NDOF_BUTTON_ESC"}, {event_type_items_NDOF_BUTTON_ALT, "NDOF_BUTTON_ALT"}, {event_type_items_NDOF_BUTTON_SHIFT, "NDOF_BUTTON_SHIFT"}, {event_type_items_NDOF_BUTTON_CTRL, "NDOF_BUTTON_CTRL"}, {event_type_items_NDOF_BUTTON_1, "NDOF_BUTTON_1"}, {event_type_items_NDOF_BUTTON_2, "NDOF_BUTTON_2"}, {event_type_items_NDOF_BUTTON_3, "NDOF_BUTTON_3"}, {event_type_items_NDOF_BUTTON_4, "NDOF_BUTTON_4"}, {event_type_items_NDOF_BUTTON_5, "NDOF_BUTTON_5"}, {event_type_items_NDOF_BUTTON_6, "NDOF_BUTTON_6"}, {event_type_items_NDOF_BUTTON_7, "NDOF_BUTTON_7"}, {event_type_items_NDOF_BUTTON_8, "NDOF_BUTTON_8"}, {event_type_items_NDOF_BUTTON_9, "NDOF_BUTTON_9"}, {event_type_items_NDOF_BUTTON_10, "NDOF_BUTTON_10"}, {event_type_items_NDOF_BUTTON_A, "NDOF_BUTTON_A"}, {event_type_items_NDOF_BUTTON_B, "NDOF_BUTTON_B"}, {event_type_items_NDOF_BUTTON_C, "NDOF_BUTTON_C"}};
	};

	const std::map<std::string, int> string_to_event_type_items = create_string_to_event_type_items();
	const std::map<int, std::string> event_type_items_to_string = create_event_type_items_to_string();

	event_type_items_enum key() {
		STRING_TYPE_GETTER("key", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void key(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "key", event_type_items_to_string.at(value))
	}

	event_type_items_enum modifier_key_1() {
		STRING_TYPE_GETTER("modifier_key_1", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void modifier_key_1(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "modifier_key_1", event_type_items_to_string.at(value))
	}

	event_type_items_enum modifier_key_2() {
		STRING_TYPE_GETTER("modifier_key_2", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void modifier_key_2(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "modifier_key_2", event_type_items_to_string.at(value))
	}

	std::string target() {
		STRING_TYPE_GETTER("target", resstr)
	}

	void target(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "target", value)
	}

	std::string log() {
		STRING_TYPE_GETTER("log", resstr)
	}

	void log(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "log", value)
	}

	bool use_all_keys() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_all_keys")
	}

	void use_all_keys(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_all_keys", value)
	}
};

class PropertySensor : public Sensor {
public:
	PropertySensor(PyObject* pyobj) : Sensor(pyobj) {}
	PropertySensor() : Sensor(0) { }

	enum prop_type_items_enum {
		prop_type_items_PROPEQUAL = 0,	
		prop_type_items_PROPNEQUAL = 1,	
		prop_type_items_PROPINTERVAL = 2,	
		prop_type_items_PROPCHANGED = 3,	
		prop_type_items_PROPLESSTHAN = 5,	
		prop_type_items_PROPGREATERTHAN = 6	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"PROPEQUAL", prop_type_items_PROPEQUAL}, {"PROPNEQUAL", prop_type_items_PROPNEQUAL}, {"PROPINTERVAL", prop_type_items_PROPINTERVAL}, {"PROPCHANGED", prop_type_items_PROPCHANGED}, {"PROPLESSTHAN", prop_type_items_PROPLESSTHAN}, {"PROPGREATERTHAN", prop_type_items_PROPGREATERTHAN}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_PROPEQUAL, "PROPEQUAL"}, {prop_type_items_PROPNEQUAL, "PROPNEQUAL"}, {prop_type_items_PROPINTERVAL, "PROPINTERVAL"}, {prop_type_items_PROPCHANGED, "PROPCHANGED"}, {prop_type_items_PROPLESSTHAN, "PROPLESSTHAN"}, {prop_type_items_PROPGREATERTHAN, "PROPGREATERTHAN"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum evaluation_type() {
		STRING_TYPE_GETTER("evaluation_type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void evaluation_type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "evaluation_type", prop_type_items_to_string.at(value))
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	std::string value() {
		STRING_TYPE_GETTER("value", resstr)
	}

	void value(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "value", value)
	}

	std::string value_min() {
		STRING_TYPE_GETTER("value_min", resstr)
	}

	void value_min(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "value_min", value)
	}

	std::string value_max() {
		STRING_TYPE_GETTER("value_max", resstr)
	}

	void value_max(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "value_max", value)
	}
};

class ArmatureSensor : public Sensor {
public:
	ArmatureSensor(PyObject* pyobj) : Sensor(pyobj) {}
	ArmatureSensor() : Sensor(0) { }

	enum prop_type_items_enum {
		prop_type_items_STATECHG = 0,	
		prop_type_items_LINERRORBELOW = 1,	
		prop_type_items_LINERRORABOVE = 2,	
		prop_type_items_ROTERRORBELOW = 3,	
		prop_type_items_ROTERRORABOVE = 4	
	};

	std::map<std::string, int> create_string_to_prop_type_items() {
		return {{"STATECHG", prop_type_items_STATECHG}, {"LINERRORBELOW", prop_type_items_LINERRORBELOW}, {"LINERRORABOVE", prop_type_items_LINERRORABOVE}, {"ROTERRORBELOW", prop_type_items_ROTERRORBELOW}, {"ROTERRORABOVE", prop_type_items_ROTERRORABOVE}};
	};

	std::map<int, std::string> create_prop_type_items_to_string() {
		return {{prop_type_items_STATECHG, "STATECHG"}, {prop_type_items_LINERRORBELOW, "LINERRORBELOW"}, {prop_type_items_LINERRORABOVE, "LINERRORABOVE"}, {prop_type_items_ROTERRORBELOW, "ROTERRORBELOW"}, {prop_type_items_ROTERRORABOVE, "ROTERRORABOVE"}};
	};

	const std::map<std::string, int> string_to_prop_type_items = create_string_to_prop_type_items();
	const std::map<int, std::string> prop_type_items_to_string = create_prop_type_items_to_string();

	prop_type_items_enum test_type() {
		STRING_TYPE_GETTER("test_type", static_cast<prop_type_items_enum>(string_to_prop_type_items.at(resstr)))
	}

	void test_type(prop_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "test_type", prop_type_items_to_string.at(value))
	}

	std::string bone() {
		STRING_TYPE_GETTER("bone", resstr)
	}

	void bone(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bone", value)
	}

	std::string constraint() {
		STRING_TYPE_GETTER("constraint", resstr)
	}

	void constraint(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "constraint", value)
	}

	float value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "value")
	}

	void value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "value", value)
	}
};

class ActuatorSensor : public Sensor {
public:
	ActuatorSensor(PyObject* pyobj) : Sensor(pyobj) {}
	ActuatorSensor() : Sensor(0) { }

	std::string actuator() {
		STRING_TYPE_GETTER("actuator", resstr)
	}

	void actuator(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "actuator", value)
	}
};

class DelaySensor : public Sensor {
public:
	DelaySensor(PyObject* pyobj) : Sensor(pyobj) {}
	DelaySensor() : Sensor(0) { }

	int delay() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "delay")
	}

	void delay(int value) {
		PRIMITIVE_TYPES_SETTER("i", "delay", value)
	}

	int duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "duration")
	}

	void duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "duration", value)
	}

	bool use_repeat() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_repeat")
	}

	void use_repeat(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_repeat", value)
	}
};

class CollisionSensor : public Sensor {
public:
	CollisionSensor(PyObject* pyobj) : Sensor(pyobj) {}
	CollisionSensor() : Sensor(0) { }

	bool use_pulse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pulse")
	}

	void use_pulse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pulse", value)
	}

	bool use_material() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_material")
	}

	void use_material(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_material", value)
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	std::string material() {
		STRING_TYPE_GETTER("material", resstr)
	}

	void material(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "material", value)
	}
};

class RadarSensor : public Sensor {
public:
	RadarSensor(PyObject* pyobj) : Sensor(pyobj) {}
	RadarSensor() : Sensor(0) { }

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	enum axis_items_enum {
		axis_items_XAXIS = 0,	
		axis_items_YAXIS = 1,	
		axis_items_ZAXIS = 2,	
		axis_items_NEGXAXIS = 3,	
		axis_items_NEGYAXIS = 4,	
		axis_items_NEGZAXIS = 5	
	};

	std::map<std::string, int> create_string_to_axis_items() {
		return {{"XAXIS", axis_items_XAXIS}, {"YAXIS", axis_items_YAXIS}, {"ZAXIS", axis_items_ZAXIS}, {"NEGXAXIS", axis_items_NEGXAXIS}, {"NEGYAXIS", axis_items_NEGYAXIS}, {"NEGZAXIS", axis_items_NEGZAXIS}};
	};

	std::map<int, std::string> create_axis_items_to_string() {
		return {{axis_items_XAXIS, "XAXIS"}, {axis_items_YAXIS, "YAXIS"}, {axis_items_ZAXIS, "ZAXIS"}, {axis_items_NEGXAXIS, "NEGXAXIS"}, {axis_items_NEGYAXIS, "NEGYAXIS"}, {axis_items_NEGZAXIS, "NEGZAXIS"}};
	};

	const std::map<std::string, int> string_to_axis_items = create_string_to_axis_items();
	const std::map<int, std::string> axis_items_to_string = create_axis_items_to_string();

	axis_items_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<axis_items_enum>(string_to_axis_items.at(resstr)))
	}

	void axis(axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", axis_items_to_string.at(value))
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}
};

class RandomSensor : public Sensor {
public:
	RandomSensor(PyObject* pyobj) : Sensor(pyobj) {}
	RandomSensor() : Sensor(0) { }

	int seed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "seed")
	}

	void seed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "seed", value)
	}
};

class RaySensor : public Sensor {
public:
	RaySensor(PyObject* pyobj) : Sensor(pyobj) {}
	RaySensor() : Sensor(0) { }

	enum prop_ray_type_items_enum {
		prop_ray_type_items_PROPERTY = 0,	
		prop_ray_type_items_MATERIAL = 1	
	};

	std::map<std::string, int> create_string_to_prop_ray_type_items() {
		return {{"PROPERTY", prop_ray_type_items_PROPERTY}, {"MATERIAL", prop_ray_type_items_MATERIAL}};
	};

	std::map<int, std::string> create_prop_ray_type_items_to_string() {
		return {{prop_ray_type_items_PROPERTY, "PROPERTY"}, {prop_ray_type_items_MATERIAL, "MATERIAL"}};
	};

	const std::map<std::string, int> string_to_prop_ray_type_items = create_string_to_prop_ray_type_items();
	const std::map<int, std::string> prop_ray_type_items_to_string = create_prop_ray_type_items_to_string();

	prop_ray_type_items_enum ray_type() {
		STRING_TYPE_GETTER("ray_type", static_cast<prop_ray_type_items_enum>(string_to_prop_ray_type_items.at(resstr)))
	}

	void ray_type(prop_ray_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ray_type", prop_ray_type_items_to_string.at(value))
	}

	std::string property() {
		STRING_TYPE_GETTER("property", resstr)
	}

	void property(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "property", value)
	}

	std::string material() {
		STRING_TYPE_GETTER("material", resstr)
	}

	void material(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "material", value)
	}

	bool use_x_ray() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_x_ray")
	}

	void use_x_ray(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_x_ray", value)
	}

	float range() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "range")
	}

	void range(float value) {
		PRIMITIVE_TYPES_SETTER("f", "range", value)
	}

	enum axis_items_enum {
		axis_items_XAXIS = 1,	
		axis_items_YAXIS = 0,	
		axis_items_ZAXIS = 2,	
		axis_items_NEGXAXIS = 3,	
		axis_items_NEGYAXIS = 4,	
		axis_items_NEGZAXIS = 5	
	};

	std::map<std::string, int> create_string_to_axis_items() {
		return {{"XAXIS", axis_items_XAXIS}, {"YAXIS", axis_items_YAXIS}, {"ZAXIS", axis_items_ZAXIS}, {"NEGXAXIS", axis_items_NEGXAXIS}, {"NEGYAXIS", axis_items_NEGYAXIS}, {"NEGZAXIS", axis_items_NEGZAXIS}};
	};

	std::map<int, std::string> create_axis_items_to_string() {
		return {{axis_items_XAXIS, "XAXIS"}, {axis_items_YAXIS, "YAXIS"}, {axis_items_ZAXIS, "ZAXIS"}, {axis_items_NEGXAXIS, "NEGXAXIS"}, {axis_items_NEGYAXIS, "NEGYAXIS"}, {axis_items_NEGZAXIS, "NEGZAXIS"}};
	};

	const std::map<std::string, int> string_to_axis_items = create_string_to_axis_items();
	const std::map<int, std::string> axis_items_to_string = create_axis_items_to_string();

	axis_items_enum axis() {
		STRING_TYPE_GETTER("axis", static_cast<axis_items_enum>(string_to_axis_items.at(resstr)))
	}

	void axis(axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis", axis_items_to_string.at(value))
	}
};

class MessageSensor : public Sensor {
public:
	MessageSensor(PyObject* pyobj) : Sensor(pyobj) {}
	MessageSensor() : Sensor(0) { }

	std::string subject() {
		STRING_TYPE_GETTER("subject", resstr)
	}

	void subject(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "subject", value)
	}
};

class JoystickSensor : public Sensor {
public:
	JoystickSensor(PyObject* pyobj) : Sensor(pyobj) {}
	JoystickSensor() : Sensor(0) { }

	int joystick_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "joystick_index")
	}

	void joystick_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "joystick_index", value)
	}

	enum event_type_items_enum {
		event_type_items_BUTTON = 0,	
		event_type_items_AXIS = 1,	
		event_type_items_HAT = 2,	
		event_type_items_AXIS_SINGLE = 3	
	};

	std::map<std::string, int> create_string_to_event_type_items() {
		return {{"BUTTON", event_type_items_BUTTON}, {"AXIS", event_type_items_AXIS}, {"HAT", event_type_items_HAT}, {"AXIS_SINGLE", event_type_items_AXIS_SINGLE}};
	};

	std::map<int, std::string> create_event_type_items_to_string() {
		return {{event_type_items_BUTTON, "BUTTON"}, {event_type_items_AXIS, "AXIS"}, {event_type_items_HAT, "HAT"}, {event_type_items_AXIS_SINGLE, "AXIS_SINGLE"}};
	};

	const std::map<std::string, int> string_to_event_type_items = create_string_to_event_type_items();
	const std::map<int, std::string> event_type_items_to_string = create_event_type_items_to_string();

	event_type_items_enum event_type() {
		STRING_TYPE_GETTER("event_type", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void event_type(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "event_type", event_type_items_to_string.at(value))
	}

	bool use_all_events() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_all_events")
	}

	void use_all_events(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_all_events", value)
	}

	int button_number() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "button_number")
	}

	void button_number(int value) {
		PRIMITIVE_TYPES_SETTER("i", "button_number", value)
	}

	int axis_number() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "axis_number")
	}

	void axis_number(int value) {
		PRIMITIVE_TYPES_SETTER("i", "axis_number", value)
	}

	int axis_threshold() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "axis_threshold")
	}

	void axis_threshold(int value) {
		PRIMITIVE_TYPES_SETTER("i", "axis_threshold", value)
	}

	enum axis_direction_items_enum {
		axis_direction_items_RIGHTAXIS = 0,	
		axis_direction_items_UPAXIS = 1,	
		axis_direction_items_LEFTAXIS = 2,	
		axis_direction_items_DOWNAXIS = 3	
	};

	std::map<std::string, int> create_string_to_axis_direction_items() {
		return {{"RIGHTAXIS", axis_direction_items_RIGHTAXIS}, {"UPAXIS", axis_direction_items_UPAXIS}, {"LEFTAXIS", axis_direction_items_LEFTAXIS}, {"DOWNAXIS", axis_direction_items_DOWNAXIS}};
	};

	std::map<int, std::string> create_axis_direction_items_to_string() {
		return {{axis_direction_items_RIGHTAXIS, "RIGHTAXIS"}, {axis_direction_items_UPAXIS, "UPAXIS"}, {axis_direction_items_LEFTAXIS, "LEFTAXIS"}, {axis_direction_items_DOWNAXIS, "DOWNAXIS"}};
	};

	const std::map<std::string, int> string_to_axis_direction_items = create_string_to_axis_direction_items();
	const std::map<int, std::string> axis_direction_items_to_string = create_axis_direction_items_to_string();

	axis_direction_items_enum axis_direction() {
		STRING_TYPE_GETTER("axis_direction", static_cast<axis_direction_items_enum>(string_to_axis_direction_items.at(resstr)))
	}

	void axis_direction(axis_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "axis_direction", axis_direction_items_to_string.at(value))
	}

	int single_axis_number() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "single_axis_number")
	}

	void single_axis_number(int value) {
		PRIMITIVE_TYPES_SETTER("i", "single_axis_number", value)
	}

	int hat_number() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "hat_number")
	}

	void hat_number(int value) {
		PRIMITIVE_TYPES_SETTER("i", "hat_number", value)
	}

	enum hat_direction_items_enum {
		hat_direction_items_UP = 1,	
		hat_direction_items_DOWN = 4,	
		hat_direction_items_LEFT = 8,	
		hat_direction_items_RIGHT = 2,	
		hat_direction_items_UPRIGHT = 3,	
		hat_direction_items_DOWNLEFT = 12,	
		hat_direction_items_UPLEFT = 9,	
		hat_direction_items_DOWNRIGHT = 6	
	};

	std::map<std::string, int> create_string_to_hat_direction_items() {
		return {{"UP", hat_direction_items_UP}, {"DOWN", hat_direction_items_DOWN}, {"LEFT", hat_direction_items_LEFT}, {"RIGHT", hat_direction_items_RIGHT}, {"UPRIGHT", hat_direction_items_UPRIGHT}, {"DOWNLEFT", hat_direction_items_DOWNLEFT}, {"UPLEFT", hat_direction_items_UPLEFT}, {"DOWNRIGHT", hat_direction_items_DOWNRIGHT}};
	};

	std::map<int, std::string> create_hat_direction_items_to_string() {
		return {{hat_direction_items_UP, "UP"}, {hat_direction_items_DOWN, "DOWN"}, {hat_direction_items_LEFT, "LEFT"}, {hat_direction_items_RIGHT, "RIGHT"}, {hat_direction_items_UPRIGHT, "UPRIGHT"}, {hat_direction_items_DOWNLEFT, "DOWNLEFT"}, {hat_direction_items_UPLEFT, "UPLEFT"}, {hat_direction_items_DOWNRIGHT, "DOWNRIGHT"}};
	};

	const std::map<std::string, int> string_to_hat_direction_items = create_string_to_hat_direction_items();
	const std::map<int, std::string> hat_direction_items_to_string = create_hat_direction_items_to_string();

	hat_direction_items_enum hat_direction() {
		STRING_TYPE_GETTER("hat_direction", static_cast<hat_direction_items_enum>(string_to_hat_direction_items.at(resstr)))
	}

	void hat_direction(hat_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "hat_direction", hat_direction_items_to_string.at(value))
	}
};

class SequenceColorBalanceData : public pyUniplug {
public:
	SequenceColorBalanceData(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceColorBalanceData() : pyUniplug(0) { }

	VFLOAT3 lift() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "lift", 3)
	}

	void lift(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "lift", 3)
	}

	VFLOAT3 gamma() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gamma", 3)
	}

	void gamma(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gamma", 3)
	}

	VFLOAT3 gain() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gain", 3)
	}

	void gain(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gain", 3)
	}

	bool invert_gain() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_gain")
	}

	void invert_gain(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_gain", value)
	}

	bool invert_gamma() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_gamma")
	}

	void invert_gamma(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_gamma", value)
	}

	bool invert_lift() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_lift")
	}

	void invert_lift(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_lift", value)
	}
};

class SequenceElement : public pyUniplug {
public:
	SequenceElement(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceElement() : pyUniplug(0) { }

	std::string filename() {
		STRING_TYPE_GETTER("filename", resstr)
	}

	void filename(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filename", value)
	}

	int orig_width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "orig_width")
	}

	void orig_width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "orig_width", value)
	}

	int orig_height() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "orig_height")
	}

	void orig_height(int value) {
		PRIMITIVE_TYPES_SETTER("i", "orig_height", value)
	}
};

class SequenceProxy : public pyUniplug {
public:
	SequenceProxy(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceProxy() : pyUniplug(0) { }

	std::string directory() {
		STRING_TYPE_GETTER("directory", resstr)
	}

	void directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "directory", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool use_overwrite() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_overwrite")
	}

	void use_overwrite(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_overwrite", value)
	}

	bool build_25() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_25")
	}

	void build_25(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_25", value)
	}

	bool build_50() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_50")
	}

	void build_50(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_50", value)
	}

	bool build_75() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_75")
	}

	void build_75(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_75", value)
	}

	bool build_100() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_100")
	}

	void build_100(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_100", value)
	}

	bool build_record_run() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_record_run")
	}

	void build_record_run(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_record_run", value)
	}

	bool build_free_run() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_free_run")
	}

	void build_free_run(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_free_run", value)
	}

	bool build_free_run_rec_date() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_free_run_rec_date")
	}

	void build_free_run_rec_date(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_free_run_rec_date", value)
	}

	int quality() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "quality")
	}

	void quality(int value) {
		PRIMITIVE_TYPES_SETTER("i", "quality", value)
	}

	enum seq_tc_items_enum {
		seq_tc_items_NONE = 0,	
		seq_tc_items_RECORD_RUN = 1,	
		seq_tc_items_FREE_RUN = 2,	
		seq_tc_items_FREE_RUN_REC_DATE = 4,	
		seq_tc_items_RECORD_RUN_NO_GAPS = 8	
	};

	std::map<std::string, int> create_string_to_seq_tc_items() {
		return {{"NONE", seq_tc_items_NONE}, {"RECORD_RUN", seq_tc_items_RECORD_RUN}, {"FREE_RUN", seq_tc_items_FREE_RUN}, {"FREE_RUN_REC_DATE", seq_tc_items_FREE_RUN_REC_DATE}, {"RECORD_RUN_NO_GAPS", seq_tc_items_RECORD_RUN_NO_GAPS}};
	};

	std::map<int, std::string> create_seq_tc_items_to_string() {
		return {{seq_tc_items_NONE, "NONE"}, {seq_tc_items_RECORD_RUN, "RECORD_RUN"}, {seq_tc_items_FREE_RUN, "FREE_RUN"}, {seq_tc_items_FREE_RUN_REC_DATE, "FREE_RUN_REC_DATE"}, {seq_tc_items_RECORD_RUN_NO_GAPS, "RECORD_RUN_NO_GAPS"}};
	};

	const std::map<std::string, int> string_to_seq_tc_items = create_string_to_seq_tc_items();
	const std::map<int, std::string> seq_tc_items_to_string = create_seq_tc_items_to_string();

	seq_tc_items_enum timecode() {
		STRING_TYPE_GETTER("timecode", static_cast<seq_tc_items_enum>(string_to_seq_tc_items.at(resstr)))
	}

	void timecode(seq_tc_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "timecode", seq_tc_items_to_string.at(value))
	}

	bool use_proxy_custom_directory() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy_custom_directory")
	}

	void use_proxy_custom_directory(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy_custom_directory", value)
	}

	bool use_proxy_custom_file() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy_custom_file")
	}

	void use_proxy_custom_file(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy_custom_file", value)
	}
};

class SequenceColorBalance : public SequenceColorBalanceData {
public:
	SequenceColorBalance(PyObject* pyobj) : SequenceColorBalanceData(pyobj) {}
	SequenceColorBalance() : SequenceColorBalanceData(0) { }
};

class SequenceCrop : public pyUniplug {
public:
	SequenceCrop(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceCrop() : pyUniplug(0) { }

	int max_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_y")
	}

	void max_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_y", value)
	}

	int min_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_y")
	}

	void min_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_y", value)
	}

	int min_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "min_x")
	}

	void min_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "min_x", value)
	}

	int max_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "max_x")
	}

	void max_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "max_x", value)
	}
};

class SequenceTransform : public pyUniplug {
public:
	SequenceTransform(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceTransform() : pyUniplug(0) { }

	int offset_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "offset_x")
	}

	void offset_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "offset_x", value)
	}

	int offset_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "offset_y")
	}

	void offset_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "offset_y", value)
	}
};

class Sequence : public pyUniplug {
public:
	Sequence(PyObject* pyobj) : pyUniplug(pyobj) {}
	Sequence() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum seq_type_items_enum {
		seq_type_items_IMAGE = 0,	
		seq_type_items_META = 1,	
		seq_type_items_SCENE = 2,	
		seq_type_items_MOVIE = 3,	
		seq_type_items_MOVIECLIP = 6,	
		seq_type_items_MASK = 7,	
		seq_type_items_SOUND = 4,	
		seq_type_items_CROSS = 8,	
		seq_type_items_ADD = 9,	
		seq_type_items_SUBTRACT = 10,	
		seq_type_items_ALPHA_OVER = 11,	
		seq_type_items_ALPHA_UNDER = 12,	
		seq_type_items_GAMMA_CROSS = 13,	
		seq_type_items_MULTIPLY = 14,	
		seq_type_items_OVER_DROP = 15,	
		seq_type_items_WIPE = 25,	
		seq_type_items_GLOW = 26,	
		seq_type_items_TRANSFORM = 27,	
		seq_type_items_COLOR = 28,	
		seq_type_items_SPEED = 29,	
		seq_type_items_MULTICAM = 30,	
		seq_type_items_ADJUSTMENT = 31,	
		seq_type_items_GAUSSIAN_BLUR = 40,	
		seq_type_items_TEXT = 41	
	};

	std::map<std::string, int> create_string_to_seq_type_items() {
		return {{"IMAGE", seq_type_items_IMAGE}, {"META", seq_type_items_META}, {"SCENE", seq_type_items_SCENE}, {"MOVIE", seq_type_items_MOVIE}, {"MOVIECLIP", seq_type_items_MOVIECLIP}, {"MASK", seq_type_items_MASK}, {"SOUND", seq_type_items_SOUND}, {"CROSS", seq_type_items_CROSS}, {"ADD", seq_type_items_ADD}, {"SUBTRACT", seq_type_items_SUBTRACT}, {"ALPHA_OVER", seq_type_items_ALPHA_OVER}, {"ALPHA_UNDER", seq_type_items_ALPHA_UNDER}, {"GAMMA_CROSS", seq_type_items_GAMMA_CROSS}, {"MULTIPLY", seq_type_items_MULTIPLY}, {"OVER_DROP", seq_type_items_OVER_DROP}, {"WIPE", seq_type_items_WIPE}, {"GLOW", seq_type_items_GLOW}, {"TRANSFORM", seq_type_items_TRANSFORM}, {"COLOR", seq_type_items_COLOR}, {"SPEED", seq_type_items_SPEED}, {"MULTICAM", seq_type_items_MULTICAM}, {"ADJUSTMENT", seq_type_items_ADJUSTMENT}, {"GAUSSIAN_BLUR", seq_type_items_GAUSSIAN_BLUR}, {"TEXT", seq_type_items_TEXT}};
	};

	std::map<int, std::string> create_seq_type_items_to_string() {
		return {{seq_type_items_IMAGE, "IMAGE"}, {seq_type_items_META, "META"}, {seq_type_items_SCENE, "SCENE"}, {seq_type_items_MOVIE, "MOVIE"}, {seq_type_items_MOVIECLIP, "MOVIECLIP"}, {seq_type_items_MASK, "MASK"}, {seq_type_items_SOUND, "SOUND"}, {seq_type_items_CROSS, "CROSS"}, {seq_type_items_ADD, "ADD"}, {seq_type_items_SUBTRACT, "SUBTRACT"}, {seq_type_items_ALPHA_OVER, "ALPHA_OVER"}, {seq_type_items_ALPHA_UNDER, "ALPHA_UNDER"}, {seq_type_items_GAMMA_CROSS, "GAMMA_CROSS"}, {seq_type_items_MULTIPLY, "MULTIPLY"}, {seq_type_items_OVER_DROP, "OVER_DROP"}, {seq_type_items_WIPE, "WIPE"}, {seq_type_items_GLOW, "GLOW"}, {seq_type_items_TRANSFORM, "TRANSFORM"}, {seq_type_items_COLOR, "COLOR"}, {seq_type_items_SPEED, "SPEED"}, {seq_type_items_MULTICAM, "MULTICAM"}, {seq_type_items_ADJUSTMENT, "ADJUSTMENT"}, {seq_type_items_GAUSSIAN_BLUR, "GAUSSIAN_BLUR"}, {seq_type_items_TEXT, "TEXT"}};
	};

	const std::map<std::string, int> string_to_seq_type_items = create_string_to_seq_type_items();
	const std::map<int, std::string> seq_type_items_to_string = create_seq_type_items_to_string();

	seq_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<seq_type_items_enum>(string_to_seq_type_items.at(resstr)))
	}

	void type(seq_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", seq_type_items_to_string.at(value))
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool select_left_handle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_left_handle")
	}

	void select_left_handle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_left_handle", value)
	}

	bool select_right_handle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_right_handle")
	}

	void select_right_handle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_right_handle", value)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool lock_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock")
	}

	void lock_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock", value)
	}

	int frame_final_duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_final_duration")
	}

	void frame_final_duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_final_duration", value)
	}

	int frame_duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_duration")
	}

	void frame_duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_duration", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_final_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_final_start")
	}

	void frame_final_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_final_start", value)
	}

	int frame_final_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_final_end")
	}

	void frame_final_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_final_end", value)
	}

	int frame_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_offset_start")
	}

	void frame_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_offset_start", value)
	}

	int frame_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_offset_end")
	}

	void frame_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_offset_end", value)
	}

	int frame_still_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_still_start")
	}

	void frame_still_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_still_start", value)
	}

	int frame_still_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_still_end")
	}

	void frame_still_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_still_end", value)
	}

	int channel() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "channel")
	}

	void channel(int value) {
		PRIMITIVE_TYPES_SETTER("i", "channel", value)
	}

	bool use_linear_modifiers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_linear_modifiers")
	}

	void use_linear_modifiers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_linear_modifiers", value)
	}

	enum blend_mode_items_enum {
		blend_mode_items_REPLACE = 0,	
		blend_mode_items_CROSS = 8,	
		blend_mode_items_ADD = 9,	
		blend_mode_items_SUBTRACT = 10,	
		blend_mode_items_ALPHA_OVER = 11,	
		blend_mode_items_ALPHA_UNDER = 12,	
		blend_mode_items_GAMMA_CROSS = 13,	
		blend_mode_items_MULTIPLY = 14,	
		blend_mode_items_OVER_DROP = 15	
	};

	std::map<std::string, int> create_string_to_blend_mode_items() {
		return {{"REPLACE", blend_mode_items_REPLACE}, {"CROSS", blend_mode_items_CROSS}, {"ADD", blend_mode_items_ADD}, {"SUBTRACT", blend_mode_items_SUBTRACT}, {"ALPHA_OVER", blend_mode_items_ALPHA_OVER}, {"ALPHA_UNDER", blend_mode_items_ALPHA_UNDER}, {"GAMMA_CROSS", blend_mode_items_GAMMA_CROSS}, {"MULTIPLY", blend_mode_items_MULTIPLY}, {"OVER_DROP", blend_mode_items_OVER_DROP}};
	};

	std::map<int, std::string> create_blend_mode_items_to_string() {
		return {{blend_mode_items_REPLACE, "REPLACE"}, {blend_mode_items_CROSS, "CROSS"}, {blend_mode_items_ADD, "ADD"}, {blend_mode_items_SUBTRACT, "SUBTRACT"}, {blend_mode_items_ALPHA_OVER, "ALPHA_OVER"}, {blend_mode_items_ALPHA_UNDER, "ALPHA_UNDER"}, {blend_mode_items_GAMMA_CROSS, "GAMMA_CROSS"}, {blend_mode_items_MULTIPLY, "MULTIPLY"}, {blend_mode_items_OVER_DROP, "OVER_DROP"}};
	};

	const std::map<std::string, int> string_to_blend_mode_items = create_string_to_blend_mode_items();
	const std::map<int, std::string> blend_mode_items_to_string = create_blend_mode_items_to_string();

	blend_mode_items_enum blend_type() {
		STRING_TYPE_GETTER("blend_type", static_cast<blend_mode_items_enum>(string_to_blend_mode_items.at(resstr)))
	}

	void blend_type(blend_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend_type", blend_mode_items_to_string.at(value))
	}

	float blend_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_alpha")
	}

	void blend_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_alpha", value)
	}

	float effect_fader() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "effect_fader")
	}

	void effect_fader(float value) {
		PRIMITIVE_TYPES_SETTER("f", "effect_fader", value)
	}

	bool use_default_fade() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_fade")
	}

	void use_default_fade(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_fade", value)
	}

	float speed_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "speed_factor")
	}

	void speed_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "speed_factor", value)
	}

	std::map<std::string, SequenceModifier> modifiers();

	void update(bool data = false) {
		PYTHON_FUNCTION_ARGS_CALL("update", "i", data)
	}

	SequenceElement strip_elem_from_frame(int frame) {
		PYTHON_FUNCTION_ARGS_CALL("strip_elem_from_frame", "i", frame)
		CLASS_TYPES_RETURN(SequenceElement)
	}

	void swap(Sequence other) {
		PYTHON_FUNCTION_ARGS_CALL("swap", "O", other.get_pyobjref())
	}
};

class SequenceEditor : public pyUniplug {
public:
	SequenceEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceEditor() : pyUniplug(0) { }

	std::map<std::string, Sequence> sequences() {
		MAP_TYPE_GETTER("sequences", Sequence)
	}

	std::map<std::string, Sequence> sequences_all() {
		MAP_TYPE_GETTER("sequences_all", Sequence)
	}

	std::map<std::string, Sequence> meta_stack() {
		MAP_TYPE_GETTER("meta_stack", Sequence)
	}

	Sequence active_strip() {
		CLASS_TYPES_GETTER(Sequence, "active_strip")
	}

	bool show_overlay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_overlay")
	}

	void show_overlay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_overlay", value)
	}

	bool use_overlay_lock() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_overlay_lock")
	}

	void use_overlay_lock(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_overlay_lock", value)
	}

	int overlay_frame() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "overlay_frame")
	}

	void overlay_frame(int value) {
		PRIMITIVE_TYPES_SETTER("i", "overlay_frame", value)
	}

	enum editing_storage_items_enum {
		editing_storage_items_PER_STRIP = 0,	
		editing_storage_items_PROJECT = 1	
	};

	std::map<std::string, int> create_string_to_editing_storage_items() {
		return {{"PER_STRIP", editing_storage_items_PER_STRIP}, {"PROJECT", editing_storage_items_PROJECT}};
	};

	std::map<int, std::string> create_editing_storage_items_to_string() {
		return {{editing_storage_items_PER_STRIP, "PER_STRIP"}, {editing_storage_items_PROJECT, "PROJECT"}};
	};

	const std::map<std::string, int> string_to_editing_storage_items = create_string_to_editing_storage_items();
	const std::map<int, std::string> editing_storage_items_to_string = create_editing_storage_items_to_string();

	editing_storage_items_enum proxy_storage() {
		STRING_TYPE_GETTER("proxy_storage", static_cast<editing_storage_items_enum>(string_to_editing_storage_items.at(resstr)))
	}

	void proxy_storage(editing_storage_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proxy_storage", editing_storage_items_to_string.at(value))
	}

	std::string proxy_dir() {
		STRING_TYPE_GETTER("proxy_dir", resstr)
	}

	void proxy_dir(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "proxy_dir", value)
	}
};

class ImageSequence : public Sequence {
public:
	ImageSequence(PyObject* pyobj) : Sequence(pyobj) {}
	ImageSequence() : Sequence(0) { }

	std::string directory() {
		STRING_TYPE_GETTER("directory", resstr)
	}

	void directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "directory", value)
	}

	std::map<std::string, SequenceElement> elements() {
		MAP_TYPE_GETTER("elements", SequenceElement)
	}

	bool use_multiview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multiview")
	}

	void use_multiview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multiview", value)
	}

	enum views_format_items_enum {
		views_format_items_INDIVIDUAL = 0,	
		views_format_items_STEREO_3D = 1	
	};

	std::map<std::string, int> create_string_to_views_format_items() {
		return {{"INDIVIDUAL", views_format_items_INDIVIDUAL}, {"STEREO_3D", views_format_items_STEREO_3D}};
	};

	std::map<int, std::string> create_views_format_items_to_string() {
		return {{views_format_items_INDIVIDUAL, "INDIVIDUAL"}, {views_format_items_STEREO_3D, "STEREO_3D"}};
	};

	const std::map<std::string, int> string_to_views_format_items = create_string_to_views_format_items();
	const std::map<int, std::string> views_format_items_to_string = create_views_format_items_to_string();

	views_format_items_enum views_format() {
		STRING_TYPE_GETTER("views_format", static_cast<views_format_items_enum>(string_to_views_format_items.at(resstr)))
	}

	void views_format(views_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "views_format", views_format_items_to_string.at(value))
	}

	Stereo3dFormat stereo_3d_format() {
		CLASS_TYPES_GETTER(Stereo3dFormat, "stereo_3d_format")
	}

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	bool use_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_float")
	}

	void use_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_float", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float strobe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strobe")
	}

	void strobe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strobe", value)
	}

	bool use_translation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translation")
	}

	void use_translation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translation", value)
	}

	SequenceTransform transform() {
		CLASS_TYPES_GETTER(SequenceTransform, "transform")
	}

	bool use_crop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop")
	}

	void use_crop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop", value)
	}

	SequenceCrop crop() {
		CLASS_TYPES_GETTER(SequenceCrop, "crop")
	}

	bool use_proxy() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy")
	}

	void use_proxy(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy", value)
	}

	SequenceProxy proxy() {
		CLASS_TYPES_GETTER(SequenceProxy, "proxy")
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}

	ColorManagedInputColorspaceSettings colorspace_settings() {
		CLASS_TYPES_GETTER(ColorManagedInputColorspaceSettings, "colorspace_settings")
	}
};

class MetaSequence : public Sequence {
public:
	MetaSequence(PyObject* pyobj) : Sequence(pyobj) {}
	MetaSequence() : Sequence(0) { }

	std::map<std::string, Sequence> sequences() {
		MAP_TYPE_GETTER("sequences", Sequence)
	}

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	bool use_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_float")
	}

	void use_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_float", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float strobe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strobe")
	}

	void strobe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strobe", value)
	}

	bool use_translation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translation")
	}

	void use_translation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translation", value)
	}

	SequenceTransform transform() {
		CLASS_TYPES_GETTER(SequenceTransform, "transform")
	}

	bool use_crop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop")
	}

	void use_crop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop", value)
	}

	SequenceCrop crop() {
		CLASS_TYPES_GETTER(SequenceCrop, "crop")
	}

	bool use_proxy() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy")
	}

	void use_proxy(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy", value)
	}

	SequenceProxy proxy() {
		CLASS_TYPES_GETTER(SequenceProxy, "proxy")
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}
};

class SceneSequence : public Sequence {
public:
	SceneSequence(PyObject* pyobj) : Sequence(pyobj) {}
	SceneSequence() : Sequence(0) { }

	Scene scene() {
		CLASS_TYPES_GETTER(Scene, "scene")
	}

	Object scene_camera() {
		CLASS_TYPES_GETTER(Object, "scene_camera")
	}

	bool use_grease_pencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_grease_pencil")
	}

	void use_grease_pencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_grease_pencil", value)
	}

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	bool use_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_float")
	}

	void use_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_float", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float strobe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strobe")
	}

	void strobe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strobe", value)
	}

	bool use_translation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translation")
	}

	void use_translation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translation", value)
	}

	SequenceTransform transform() {
		CLASS_TYPES_GETTER(SequenceTransform, "transform")
	}

	bool use_crop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop")
	}

	void use_crop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop", value)
	}

	SequenceCrop crop() {
		CLASS_TYPES_GETTER(SequenceCrop, "crop")
	}

	bool use_proxy() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy")
	}

	void use_proxy(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy", value)
	}

	SequenceProxy proxy() {
		CLASS_TYPES_GETTER(SequenceProxy, "proxy")
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}
};

class MovieSequence : public Sequence {
public:
	MovieSequence(PyObject* pyobj) : Sequence(pyobj) {}
	MovieSequence() : Sequence(0) { }

	int mpeg_preseek() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mpeg_preseek")
	}

	void mpeg_preseek(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mpeg_preseek", value)
	}

	int stream_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "stream_index")
	}

	void stream_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "stream_index", value)
	}

	std::map<std::string, SequenceElement> elements() {
		MAP_TYPE_GETTER("elements", SequenceElement)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool use_multiview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_multiview")
	}

	void use_multiview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_multiview", value)
	}

	enum views_format_items_enum {
		views_format_items_INDIVIDUAL = 0,	
		views_format_items_STEREO_3D = 1	
	};

	std::map<std::string, int> create_string_to_views_format_items() {
		return {{"INDIVIDUAL", views_format_items_INDIVIDUAL}, {"STEREO_3D", views_format_items_STEREO_3D}};
	};

	std::map<int, std::string> create_views_format_items_to_string() {
		return {{views_format_items_INDIVIDUAL, "INDIVIDUAL"}, {views_format_items_STEREO_3D, "STEREO_3D"}};
	};

	const std::map<std::string, int> string_to_views_format_items = create_string_to_views_format_items();
	const std::map<int, std::string> views_format_items_to_string = create_views_format_items_to_string();

	views_format_items_enum views_format() {
		STRING_TYPE_GETTER("views_format", static_cast<views_format_items_enum>(string_to_views_format_items.at(resstr)))
	}

	void views_format(views_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "views_format", views_format_items_to_string.at(value))
	}

	Stereo3dFormat stereo_3d_format() {
		CLASS_TYPES_GETTER(Stereo3dFormat, "stereo_3d_format")
	}

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	bool use_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_float")
	}

	void use_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_float", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float strobe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strobe")
	}

	void strobe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strobe", value)
	}

	bool use_translation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translation")
	}

	void use_translation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translation", value)
	}

	SequenceTransform transform() {
		CLASS_TYPES_GETTER(SequenceTransform, "transform")
	}

	bool use_crop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop")
	}

	void use_crop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop", value)
	}

	SequenceCrop crop() {
		CLASS_TYPES_GETTER(SequenceCrop, "crop")
	}

	bool use_proxy() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy")
	}

	void use_proxy(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy", value)
	}

	SequenceProxy proxy() {
		CLASS_TYPES_GETTER(SequenceProxy, "proxy")
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}

	ColorManagedInputColorspaceSettings colorspace_settings() {
		CLASS_TYPES_GETTER(ColorManagedInputColorspaceSettings, "colorspace_settings")
	}
};

class MovieClipSequence : public Sequence {
public:
	MovieClipSequence(PyObject* pyobj) : Sequence(pyobj) {}
	MovieClipSequence() : Sequence(0) { }

	bool undistort() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "undistort")
	}

	void undistort(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "undistort", value)
	}

	bool stabilize2d() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "stabilize2d")
	}

	void stabilize2d(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "stabilize2d", value)
	}

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	bool use_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_float")
	}

	void use_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_float", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float strobe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strobe")
	}

	void strobe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strobe", value)
	}

	bool use_translation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translation")
	}

	void use_translation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translation", value)
	}

	SequenceTransform transform() {
		CLASS_TYPES_GETTER(SequenceTransform, "transform")
	}

	bool use_crop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop")
	}

	void use_crop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop", value)
	}

	SequenceCrop crop() {
		CLASS_TYPES_GETTER(SequenceCrop, "crop")
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}
};

class MaskSequence : public Sequence {
public:
	MaskSequence(PyObject* pyobj) : Sequence(pyobj) {}
	MaskSequence() : Sequence(0) { }

	Mask mask();

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	bool use_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_float")
	}

	void use_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_float", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float strobe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strobe")
	}

	void strobe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strobe", value)
	}

	bool use_translation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translation")
	}

	void use_translation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translation", value)
	}

	SequenceTransform transform() {
		CLASS_TYPES_GETTER(SequenceTransform, "transform")
	}

	bool use_crop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop")
	}

	void use_crop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop", value)
	}

	SequenceCrop crop() {
		CLASS_TYPES_GETTER(SequenceCrop, "crop")
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}
};

class SoundSequence : public Sequence {
public:
	SoundSequence(PyObject* pyobj) : Sequence(pyobj) {}
	SoundSequence() : Sequence(0) { }

	Sound sound();

	float volume() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume")
	}

	void volume(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume", value)
	}

	float pitch() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pitch")
	}

	void pitch(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pitch", value)
	}

	float pan() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pan")
	}

	void pan(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pan", value)
	}

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool show_waveform() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_waveform")
	}

	void show_waveform(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_waveform", value)
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}
};

class EffectSequence : public Sequence {
public:
	EffectSequence(PyObject* pyobj) : Sequence(pyobj) {}
	EffectSequence() : Sequence(0) { }

	bool use_deinterlace() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_deinterlace")
	}

	void use_deinterlace(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_deinterlace", value)
	}

	enum alpha_mode_items_enum {
		alpha_mode_items_STRAIGHT = 0,	
		alpha_mode_items_PREMUL = 1	
	};

	std::map<std::string, int> create_string_to_alpha_mode_items() {
		return {{"STRAIGHT", alpha_mode_items_STRAIGHT}, {"PREMUL", alpha_mode_items_PREMUL}};
	};

	std::map<int, std::string> create_alpha_mode_items_to_string() {
		return {{alpha_mode_items_STRAIGHT, "STRAIGHT"}, {alpha_mode_items_PREMUL, "PREMUL"}};
	};

	const std::map<std::string, int> string_to_alpha_mode_items = create_string_to_alpha_mode_items();
	const std::map<int, std::string> alpha_mode_items_to_string = create_alpha_mode_items_to_string();

	alpha_mode_items_enum alpha_mode() {
		STRING_TYPE_GETTER("alpha_mode", static_cast<alpha_mode_items_enum>(string_to_alpha_mode_items.at(resstr)))
	}

	void alpha_mode(alpha_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alpha_mode", alpha_mode_items_to_string.at(value))
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	bool use_float() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_float")
	}

	void use_float(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_float", value)
	}

	bool use_reverse_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_reverse_frames")
	}

	void use_reverse_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_reverse_frames", value)
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}

	float color_saturation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_saturation")
	}

	void color_saturation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_saturation", value)
	}

	float strobe() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strobe")
	}

	void strobe(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strobe", value)
	}

	bool use_translation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translation")
	}

	void use_translation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translation", value)
	}

	SequenceTransform transform() {
		CLASS_TYPES_GETTER(SequenceTransform, "transform")
	}

	bool use_crop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_crop")
	}

	void use_crop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_crop", value)
	}

	SequenceCrop crop() {
		CLASS_TYPES_GETTER(SequenceCrop, "crop")
	}

	bool use_proxy() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy")
	}

	void use_proxy(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy", value)
	}

	SequenceProxy proxy() {
		CLASS_TYPES_GETTER(SequenceProxy, "proxy")
	}
};

class AddSequence : public EffectSequence {
public:
	AddSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	AddSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class AdjustmentSequence : public EffectSequence {
public:
	AdjustmentSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	AdjustmentSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}
};

class AlphaOverSequence : public EffectSequence {
public:
	AlphaOverSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	AlphaOverSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class AlphaUnderSequence : public EffectSequence {
public:
	AlphaUnderSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	AlphaUnderSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class ColorSequence : public EffectSequence {
public:
	ColorSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	ColorSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}
};

class CrossSequence : public EffectSequence {
public:
	CrossSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	CrossSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class GammaCrossSequence : public EffectSequence {
public:
	GammaCrossSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	GammaCrossSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class GlowSequence : public EffectSequence {
public:
	GlowSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	GlowSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	float clamp() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clamp")
	}

	void clamp(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clamp", value)
	}

	float boost_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "boost_factor")
	}

	void boost_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "boost_factor", value)
	}

	float blur_radius() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blur_radius")
	}

	void blur_radius(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blur_radius", value)
	}

	int quality() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "quality")
	}

	void quality(int value) {
		PRIMITIVE_TYPES_SETTER("i", "quality", value)
	}

	bool use_only_boost() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_boost")
	}

	void use_only_boost(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_boost", value)
	}
};

class MulticamSequence : public EffectSequence {
public:
	MulticamSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	MulticamSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	int multicam_source() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "multicam_source")
	}

	void multicam_source(int value) {
		PRIMITIVE_TYPES_SETTER("i", "multicam_source", value)
	}

	int animation_offset_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_start")
	}

	void animation_offset_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_start", value)
	}

	int animation_offset_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "animation_offset_end")
	}

	void animation_offset_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "animation_offset_end", value)
	}
};

class MultiplySequence : public EffectSequence {
public:
	MultiplySequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	MultiplySequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class OverDropSequence : public EffectSequence {
public:
	OverDropSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	OverDropSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class SpeedControlSequence : public EffectSequence {
public:
	SpeedControlSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	SpeedControlSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	float multiply_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "multiply_speed")
	}

	void multiply_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "multiply_speed", value)
	}

	bool use_as_speed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_as_speed")
	}

	void use_as_speed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_as_speed", value)
	}

	bool scale_to_length() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "scale_to_length")
	}

	void scale_to_length(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "scale_to_length", value)
	}
};

class SubtractSequence : public EffectSequence {
public:
	SubtractSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	SubtractSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	Sequence input_2() {
		CLASS_TYPES_GETTER(Sequence, "input_2")
	}
};

class TransformSequence : public EffectSequence {
public:
	TransformSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	TransformSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	float scale_start_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_start_x")
	}

	void scale_start_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_start_x", value)
	}

	float scale_start_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_start_y")
	}

	void scale_start_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_start_y", value)
	}

	bool use_uniform_scale() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_uniform_scale")
	}

	void use_uniform_scale(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_uniform_scale", value)
	}

	float translate_start_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "translate_start_x")
	}

	void translate_start_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "translate_start_x", value)
	}

	float translate_start_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "translate_start_y")
	}

	void translate_start_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "translate_start_y", value)
	}

	float rotation_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rotation_start")
	}

	void rotation_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rotation_start", value)
	}

	enum translation_unit_items_enum {
		translation_unit_items_PIXELS = 0,	
		translation_unit_items_PERCENT = 1	
	};

	std::map<std::string, int> create_string_to_translation_unit_items() {
		return {{"PIXELS", translation_unit_items_PIXELS}, {"PERCENT", translation_unit_items_PERCENT}};
	};

	std::map<int, std::string> create_translation_unit_items_to_string() {
		return {{translation_unit_items_PIXELS, "PIXELS"}, {translation_unit_items_PERCENT, "PERCENT"}};
	};

	const std::map<std::string, int> string_to_translation_unit_items = create_string_to_translation_unit_items();
	const std::map<int, std::string> translation_unit_items_to_string = create_translation_unit_items_to_string();

	translation_unit_items_enum translation_unit() {
		STRING_TYPE_GETTER("translation_unit", static_cast<translation_unit_items_enum>(string_to_translation_unit_items.at(resstr)))
	}

	void translation_unit(translation_unit_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "translation_unit", translation_unit_items_to_string.at(value))
	}

	enum interpolation_items_enum {
		interpolation_items_NONE = 0,	
		interpolation_items_BILINEAR = 1,	
		interpolation_items_BICUBIC = 2	
	};

	std::map<std::string, int> create_string_to_interpolation_items() {
		return {{"NONE", interpolation_items_NONE}, {"BILINEAR", interpolation_items_BILINEAR}, {"BICUBIC", interpolation_items_BICUBIC}};
	};

	std::map<int, std::string> create_interpolation_items_to_string() {
		return {{interpolation_items_NONE, "NONE"}, {interpolation_items_BILINEAR, "BILINEAR"}, {interpolation_items_BICUBIC, "BICUBIC"}};
	};

	const std::map<std::string, int> string_to_interpolation_items = create_string_to_interpolation_items();
	const std::map<int, std::string> interpolation_items_to_string = create_interpolation_items_to_string();

	interpolation_items_enum interpolation() {
		STRING_TYPE_GETTER("interpolation", static_cast<interpolation_items_enum>(string_to_interpolation_items.at(resstr)))
	}

	void interpolation(interpolation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interpolation", interpolation_items_to_string.at(value))
	}
};

class WipeSequence : public EffectSequence {
public:
	WipeSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	WipeSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	float blur_width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blur_width")
	}

	void blur_width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blur_width", value)
	}

	float angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "angle")
	}

	void angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "angle", value)
	}

	enum wipe_direction_items_enum {
		wipe_direction_items_OUT = 0,	
		wipe_direction_items_IN = 1	
	};

	std::map<std::string, int> create_string_to_wipe_direction_items() {
		return {{"OUT", wipe_direction_items_OUT}, {"IN", wipe_direction_items_IN}};
	};

	std::map<int, std::string> create_wipe_direction_items_to_string() {
		return {{wipe_direction_items_OUT, "OUT"}, {wipe_direction_items_IN, "IN"}};
	};

	const std::map<std::string, int> string_to_wipe_direction_items = create_string_to_wipe_direction_items();
	const std::map<int, std::string> wipe_direction_items_to_string = create_wipe_direction_items_to_string();

	wipe_direction_items_enum direction() {
		STRING_TYPE_GETTER("direction", static_cast<wipe_direction_items_enum>(string_to_wipe_direction_items.at(resstr)))
	}

	void direction(wipe_direction_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "direction", wipe_direction_items_to_string.at(value))
	}

	enum wipe_type_items_enum {
		wipe_type_items_SINGLE = 0,	
		wipe_type_items_DOUBLE = 1,	
		wipe_type_items_IRIS = 4,	
		wipe_type_items_CLOCK = 5	
	};

	std::map<std::string, int> create_string_to_wipe_type_items() {
		return {{"SINGLE", wipe_type_items_SINGLE}, {"DOUBLE", wipe_type_items_DOUBLE}, {"IRIS", wipe_type_items_IRIS}, {"CLOCK", wipe_type_items_CLOCK}};
	};

	std::map<int, std::string> create_wipe_type_items_to_string() {
		return {{wipe_type_items_SINGLE, "SINGLE"}, {wipe_type_items_DOUBLE, "DOUBLE"}, {wipe_type_items_IRIS, "IRIS"}, {wipe_type_items_CLOCK, "CLOCK"}};
	};

	const std::map<std::string, int> string_to_wipe_type_items = create_string_to_wipe_type_items();
	const std::map<int, std::string> wipe_type_items_to_string = create_wipe_type_items_to_string();

	wipe_type_items_enum transition_type() {
		STRING_TYPE_GETTER("transition_type", static_cast<wipe_type_items_enum>(string_to_wipe_type_items.at(resstr)))
	}

	void transition_type(wipe_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "transition_type", wipe_type_items_to_string.at(value))
	}
};

class GaussianBlurSequence : public EffectSequence {
public:
	GaussianBlurSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	GaussianBlurSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	Sequence input_1() {
		CLASS_TYPES_GETTER(Sequence, "input_1")
	}

	float size_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_x")
	}

	void size_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_x", value)
	}

	float size_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size_y")
	}

	void size_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size_y", value)
	}
};

class TextSequence : public EffectSequence {
public:
	TextSequence(PyObject* pyobj) : EffectSequence(pyobj) {}
	TextSequence() : EffectSequence(0) { }

	int input_count() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "input_count")
	}

	void input_count(int value) {
		PRIMITIVE_TYPES_SETTER("i", "input_count", value)
	}

	int font_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "font_size")
	}

	void font_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "font_size", value)
	}

	VFLOAT2 location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "location", 2)
	}

	void location(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "location", 2)
	}

	enum text_align_items_enum {
		text_align_items_LEFT = 0,	
		text_align_items_CENTER = 1,	
		text_align_items_RIGHT = 2	
	};

	std::map<std::string, int> create_string_to_text_align_items() {
		return {{"LEFT", text_align_items_LEFT}, {"CENTER", text_align_items_CENTER}, {"RIGHT", text_align_items_RIGHT}};
	};

	std::map<int, std::string> create_text_align_items_to_string() {
		return {{text_align_items_LEFT, "LEFT"}, {text_align_items_CENTER, "CENTER"}, {text_align_items_RIGHT, "RIGHT"}};
	};

	const std::map<std::string, int> string_to_text_align_items = create_string_to_text_align_items();
	const std::map<int, std::string> text_align_items_to_string = create_text_align_items_to_string();

	text_align_items_enum align() {
		STRING_TYPE_GETTER("align", static_cast<text_align_items_enum>(string_to_text_align_items.at(resstr)))
	}

	void align(text_align_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "align", text_align_items_to_string.at(value))
	}

	std::string text() {
		STRING_TYPE_GETTER("text", resstr)
	}

	void text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "text", value)
	}

	bool use_shadow() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_shadow")
	}

	void use_shadow(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_shadow", value)
	}
};

class SequenceModifier : public pyUniplug {
public:
	SequenceModifier(PyObject* pyobj) : pyUniplug(pyobj) {}
	SequenceModifier() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum sequence_modifier_type_items_enum {
		sequence_modifier_type_items_COLOR_BALANCE = 1,	
		sequence_modifier_type_items_CURVES = 2,	
		sequence_modifier_type_items_HUE_CORRECT = 3,	
		sequence_modifier_type_items_BRIGHT_CONTRAST = 4,	
		sequence_modifier_type_items_MASK = 5	
	};

	std::map<std::string, int> create_string_to_sequence_modifier_type_items() {
		return {{"COLOR_BALANCE", sequence_modifier_type_items_COLOR_BALANCE}, {"CURVES", sequence_modifier_type_items_CURVES}, {"HUE_CORRECT", sequence_modifier_type_items_HUE_CORRECT}, {"BRIGHT_CONTRAST", sequence_modifier_type_items_BRIGHT_CONTRAST}, {"MASK", sequence_modifier_type_items_MASK}};
	};

	std::map<int, std::string> create_sequence_modifier_type_items_to_string() {
		return {{sequence_modifier_type_items_COLOR_BALANCE, "COLOR_BALANCE"}, {sequence_modifier_type_items_CURVES, "CURVES"}, {sequence_modifier_type_items_HUE_CORRECT, "HUE_CORRECT"}, {sequence_modifier_type_items_BRIGHT_CONTRAST, "BRIGHT_CONTRAST"}, {sequence_modifier_type_items_MASK, "MASK"}};
	};

	const std::map<std::string, int> string_to_sequence_modifier_type_items = create_string_to_sequence_modifier_type_items();
	const std::map<int, std::string> sequence_modifier_type_items_to_string = create_sequence_modifier_type_items_to_string();

	sequence_modifier_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<sequence_modifier_type_items_enum>(string_to_sequence_modifier_type_items.at(resstr)))
	}

	void type(sequence_modifier_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", sequence_modifier_type_items_to_string.at(value))
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	enum mask_input_type_items_enum {
		mask_input_type_items_STRIP = 0,	
		mask_input_type_items_ID = 1	
	};

	std::map<std::string, int> create_string_to_mask_input_type_items() {
		return {{"STRIP", mask_input_type_items_STRIP}, {"ID", mask_input_type_items_ID}};
	};

	std::map<int, std::string> create_mask_input_type_items_to_string() {
		return {{mask_input_type_items_STRIP, "STRIP"}, {mask_input_type_items_ID, "ID"}};
	};

	const std::map<std::string, int> string_to_mask_input_type_items = create_string_to_mask_input_type_items();
	const std::map<int, std::string> mask_input_type_items_to_string = create_mask_input_type_items_to_string();

	mask_input_type_items_enum input_mask_type() {
		STRING_TYPE_GETTER("input_mask_type", static_cast<mask_input_type_items_enum>(string_to_mask_input_type_items.at(resstr)))
	}

	void input_mask_type(mask_input_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "input_mask_type", mask_input_type_items_to_string.at(value))
	}

	Sequence input_mask_strip() {
		CLASS_TYPES_GETTER(Sequence, "input_mask_strip")
	}

	Mask input_mask_id();
};

class ColorBalanceModifier : public SequenceModifier {
public:
	ColorBalanceModifier(PyObject* pyobj) : SequenceModifier(pyobj) {}
	ColorBalanceModifier() : SequenceModifier(0) { }

	SequenceColorBalanceData color_balance() {
		CLASS_TYPES_GETTER(SequenceColorBalanceData, "color_balance")
	}

	float color_multiply() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_multiply")
	}

	void color_multiply(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_multiply", value)
	}
};

class CurvesModifier : public SequenceModifier {
public:
	CurvesModifier(PyObject* pyobj) : SequenceModifier(pyobj) {}
	CurvesModifier() : SequenceModifier(0) { }

	CurveMapping curve_mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "curve_mapping")
	}
};

class HueCorrectModifier : public SequenceModifier {
public:
	HueCorrectModifier(PyObject* pyobj) : SequenceModifier(pyobj) {}
	HueCorrectModifier() : SequenceModifier(0) { }

	CurveMapping curve_mapping() {
		CLASS_TYPES_GETTER(CurveMapping, "curve_mapping")
	}
};

class BrightContrastModifier : public SequenceModifier {
public:
	BrightContrastModifier(PyObject* pyobj) : SequenceModifier(pyobj) {}
	BrightContrastModifier() : SequenceModifier(0) { }

	float bright() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bright")
	}

	void bright(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bright", value)
	}

	float contrast() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "contrast")
	}

	void contrast(float value) {
		PRIMITIVE_TYPES_SETTER("f", "contrast", value)
	}
};

class SmokeDomainSettings : public pyUniplug {
public:
	SmokeDomainSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	SmokeDomainSettings() : pyUniplug(0) { }

	int resolution_max() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "resolution_max")
	}

	void resolution_max(int value) {
		PRIMITIVE_TYPES_SETTER("i", "resolution_max", value)
	}

	int amplify() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "amplify")
	}

	void amplify(int value) {
		PRIMITIVE_TYPES_SETTER("i", "amplify", value)
	}

	bool use_high_resolution() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_high_resolution")
	}

	void use_high_resolution(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_high_resolution", value)
	}

	bool show_high_resolution() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_high_resolution")
	}

	void show_high_resolution(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_high_resolution", value)
	}

	enum prop_noise_type_items_enum {
		prop_noise_type_items_NOISEWAVE = 1,	
		prop_noise_type_items_NOISEFFT = 2	
	};

	std::map<std::string, int> create_string_to_prop_noise_type_items() {
		return {{"NOISEWAVE", prop_noise_type_items_NOISEWAVE}, {"NOISEFFT", prop_noise_type_items_NOISEFFT}};
	};

	std::map<int, std::string> create_prop_noise_type_items_to_string() {
		return {{prop_noise_type_items_NOISEWAVE, "NOISEWAVE"}, {prop_noise_type_items_NOISEFFT, "NOISEFFT"}};
	};

	const std::map<std::string, int> string_to_prop_noise_type_items = create_string_to_prop_noise_type_items();
	const std::map<int, std::string> prop_noise_type_items_to_string = create_prop_noise_type_items_to_string();

	prop_noise_type_items_enum noise_type() {
		STRING_TYPE_GETTER("noise_type", static_cast<prop_noise_type_items_enum>(string_to_prop_noise_type_items.at(resstr)))
	}

	void noise_type(prop_noise_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "noise_type", prop_noise_type_items_to_string.at(value))
	}

	float alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha")
	}

	void alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha", value)
	}

	float beta() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "beta")
	}

	void beta(float value) {
		PRIMITIVE_TYPES_SETTER("f", "beta", value)
	}

	Group collision_group() {
		CLASS_TYPES_GETTER(Group, "collision_group")
	}

	Group fluid_group() {
		CLASS_TYPES_GETTER(Group, "fluid_group")
	}

	Group effector_group() {
		CLASS_TYPES_GETTER(Group, "effector_group")
	}

	float strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "strength")
	}

	void strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "strength", value)
	}

	int dissolve_speed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dissolve_speed")
	}

	void dissolve_speed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dissolve_speed", value)
	}

	bool use_dissolve_smoke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dissolve_smoke")
	}

	void use_dissolve_smoke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dissolve_smoke", value)
	}

	bool use_dissolve_smoke_log() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_dissolve_smoke_log")
	}

	void use_dissolve_smoke_log(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_dissolve_smoke_log", value)
	}

	PointCache point_cache() {
		CLASS_TYPES_GETTER(PointCache, "point_cache")
	}

	enum smoke_cache_comp_items_enum {
		smoke_cache_comp_items_CACHELIGHT = 0,	
		smoke_cache_comp_items_CACHEHEAVY = 1	
	};

	std::map<std::string, int> create_string_to_smoke_cache_comp_items() {
		return {{"CACHELIGHT", smoke_cache_comp_items_CACHELIGHT}, {"CACHEHEAVY", smoke_cache_comp_items_CACHEHEAVY}};
	};

	std::map<int, std::string> create_smoke_cache_comp_items_to_string() {
		return {{smoke_cache_comp_items_CACHELIGHT, "CACHELIGHT"}, {smoke_cache_comp_items_CACHEHEAVY, "CACHEHEAVY"}};
	};

	const std::map<std::string, int> string_to_smoke_cache_comp_items = create_string_to_smoke_cache_comp_items();
	const std::map<int, std::string> smoke_cache_comp_items_to_string = create_smoke_cache_comp_items_to_string();

	smoke_cache_comp_items_enum point_cache_compress_type() {
		STRING_TYPE_GETTER("point_cache_compress_type", static_cast<smoke_cache_comp_items_enum>(string_to_smoke_cache_comp_items.at(resstr)))
	}

	void point_cache_compress_type(smoke_cache_comp_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "point_cache_compress_type", smoke_cache_comp_items_to_string.at(value))
	}

	enum smoke_domain_colli_items_enum {
		smoke_domain_colli_items_BORDEROPEN = 0,	
		smoke_domain_colli_items_BORDERVERTICAL = 1,	
		smoke_domain_colli_items_BORDERCLOSED = 2	
	};

	std::map<std::string, int> create_string_to_smoke_domain_colli_items() {
		return {{"BORDEROPEN", smoke_domain_colli_items_BORDEROPEN}, {"BORDERVERTICAL", smoke_domain_colli_items_BORDERVERTICAL}, {"BORDERCLOSED", smoke_domain_colli_items_BORDERCLOSED}};
	};

	std::map<int, std::string> create_smoke_domain_colli_items_to_string() {
		return {{smoke_domain_colli_items_BORDEROPEN, "BORDEROPEN"}, {smoke_domain_colli_items_BORDERVERTICAL, "BORDERVERTICAL"}, {smoke_domain_colli_items_BORDERCLOSED, "BORDERCLOSED"}};
	};

	const std::map<std::string, int> string_to_smoke_domain_colli_items = create_string_to_smoke_domain_colli_items();
	const std::map<int, std::string> smoke_domain_colli_items_to_string = create_smoke_domain_colli_items_to_string();

	smoke_domain_colli_items_enum collision_extents() {
		STRING_TYPE_GETTER("collision_extents", static_cast<smoke_domain_colli_items_enum>(string_to_smoke_domain_colli_items.at(resstr)))
	}

	void collision_extents(smoke_domain_colli_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "collision_extents", smoke_domain_colli_items_to_string.at(value))
	}

	EffectorWeights effector_weights() {
		CLASS_TYPES_GETTER(EffectorWeights, "effector_weights")
	}

	enum smoke_highres_sampling_items_enum {
		smoke_highres_sampling_items_FULLSAMPLE = 2,	
		smoke_highres_sampling_items_LINEAR = 1,	
		smoke_highres_sampling_items_NEAREST = 0	
	};

	std::map<std::string, int> create_string_to_smoke_highres_sampling_items() {
		return {{"FULLSAMPLE", smoke_highres_sampling_items_FULLSAMPLE}, {"LINEAR", smoke_highres_sampling_items_LINEAR}, {"NEAREST", smoke_highres_sampling_items_NEAREST}};
	};

	std::map<int, std::string> create_smoke_highres_sampling_items_to_string() {
		return {{smoke_highres_sampling_items_FULLSAMPLE, "FULLSAMPLE"}, {smoke_highres_sampling_items_LINEAR, "LINEAR"}, {smoke_highres_sampling_items_NEAREST, "NEAREST"}};
	};

	const std::map<std::string, int> string_to_smoke_highres_sampling_items = create_string_to_smoke_highres_sampling_items();
	const std::map<int, std::string> smoke_highres_sampling_items_to_string = create_smoke_highres_sampling_items_to_string();

	smoke_highres_sampling_items_enum highres_sampling() {
		STRING_TYPE_GETTER("highres_sampling", static_cast<smoke_highres_sampling_items_enum>(string_to_smoke_highres_sampling_items.at(resstr)))
	}

	void highres_sampling(smoke_highres_sampling_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "highres_sampling", smoke_highres_sampling_items_to_string.at(value))
	}

	float time_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_scale")
	}

	void time_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_scale", value)
	}

	float vorticity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "vorticity")
	}

	void vorticity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "vorticity", value)
	}

	std::array<float, 32> density_grid() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "density_grid", 32)
	}

	void density_grid(float values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "density_grid", 32)
	}

	std::array<float, 32> velocity_grid() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "velocity_grid", 32)
	}

	void velocity_grid(float values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "velocity_grid", 32)
	}

	std::array<float, 32> flame_grid() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "flame_grid", 32)
	}

	void flame_grid(float values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "flame_grid", 32)
	}

	std::array<float, 32> color_grid() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "color_grid", 32)
	}

	void color_grid(float values[32]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color_grid", 32)
	}

	VFLOAT3 cell_size() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cell_size", 3)
	}

	void cell_size(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cell_size", 3)
	}

	VFLOAT3 start_point() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "start_point", 3)
	}

	void start_point(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "start_point", 3)
	}

	std::array<int, 3> domain_resolution() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "domain_resolution", 3)
	}

	void domain_resolution(int values[3]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "domain_resolution", 3)
	}

	float burning_rate() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "burning_rate")
	}

	void burning_rate(float value) {
		PRIMITIVE_TYPES_SETTER("f", "burning_rate", value)
	}

	float flame_smoke() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flame_smoke")
	}

	void flame_smoke(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flame_smoke", value)
	}

	float flame_vorticity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flame_vorticity")
	}

	void flame_vorticity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flame_vorticity", value)
	}

	float flame_ignition() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flame_ignition")
	}

	void flame_ignition(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flame_ignition", value)
	}

	float flame_max_temp() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "flame_max_temp")
	}

	void flame_max_temp(float value) {
		PRIMITIVE_TYPES_SETTER("f", "flame_max_temp", value)
	}

	VFLOAT3 flame_smoke_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "flame_smoke_color", 3)
	}

	void flame_smoke_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "flame_smoke_color", 3)
	}

	bool use_adaptive_domain() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_adaptive_domain")
	}

	void use_adaptive_domain(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_adaptive_domain", value)
	}

	int additional_res() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "additional_res")
	}

	void additional_res(int value) {
		PRIMITIVE_TYPES_SETTER("i", "additional_res", value)
	}

	int adapt_margin() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "adapt_margin")
	}

	void adapt_margin(int value) {
		PRIMITIVE_TYPES_SETTER("i", "adapt_margin", value)
	}

	float adapt_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "adapt_threshold")
	}

	void adapt_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "adapt_threshold", value)
	}
};

class SmokeFlowSettings : public pyUniplug {
public:
	SmokeFlowSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	SmokeFlowSettings() : pyUniplug(0) { }

	float density() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "density")
	}

	void density(float value) {
		PRIMITIVE_TYPES_SETTER("f", "density", value)
	}

	VFLOAT3 smoke_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "smoke_color", 3)
	}

	void smoke_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "smoke_color", 3)
	}

	float fuel_amount() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fuel_amount")
	}

	void fuel_amount(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fuel_amount", value)
	}

	float temperature() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "temperature")
	}

	void temperature(float value) {
		PRIMITIVE_TYPES_SETTER("f", "temperature", value)
	}

	ParticleSystem particle_system() {
		CLASS_TYPES_GETTER(ParticleSystem, "particle_system")
	}

	enum smoke_flow_types_enum {
		smoke_flow_types_OUTFLOW = 2,	
		smoke_flow_types_SMOKE = 0,	
		smoke_flow_types_BOTH = 3,	
		smoke_flow_types_FIRE = 1	
	};

	std::map<std::string, int> create_string_to_smoke_flow_types() {
		return {{"OUTFLOW", smoke_flow_types_OUTFLOW}, {"SMOKE", smoke_flow_types_SMOKE}, {"BOTH", smoke_flow_types_BOTH}, {"FIRE", smoke_flow_types_FIRE}};
	};

	std::map<int, std::string> create_smoke_flow_types_to_string() {
		return {{smoke_flow_types_OUTFLOW, "OUTFLOW"}, {smoke_flow_types_SMOKE, "SMOKE"}, {smoke_flow_types_BOTH, "BOTH"}, {smoke_flow_types_FIRE, "FIRE"}};
	};

	const std::map<std::string, int> string_to_smoke_flow_types = create_string_to_smoke_flow_types();
	const std::map<int, std::string> smoke_flow_types_to_string = create_smoke_flow_types_to_string();

	smoke_flow_types_enum smoke_flow_type() {
		STRING_TYPE_GETTER("smoke_flow_type", static_cast<smoke_flow_types_enum>(string_to_smoke_flow_types.at(resstr)))
	}

	void smoke_flow_type(smoke_flow_types_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "smoke_flow_type", smoke_flow_types_to_string.at(value))
	}

	enum smoke_flow_sources_enum {
		smoke_flow_sources_PARTICLES = 0,	
		smoke_flow_sources_MESH = 1	
	};

	std::map<std::string, int> create_string_to_smoke_flow_sources() {
		return {{"PARTICLES", smoke_flow_sources_PARTICLES}, {"MESH", smoke_flow_sources_MESH}};
	};

	std::map<int, std::string> create_smoke_flow_sources_to_string() {
		return {{smoke_flow_sources_PARTICLES, "PARTICLES"}, {smoke_flow_sources_MESH, "MESH"}};
	};

	const std::map<std::string, int> string_to_smoke_flow_sources = create_string_to_smoke_flow_sources();
	const std::map<int, std::string> smoke_flow_sources_to_string = create_smoke_flow_sources_to_string();

	smoke_flow_sources_enum smoke_flow_source() {
		STRING_TYPE_GETTER("smoke_flow_source", static_cast<smoke_flow_sources_enum>(string_to_smoke_flow_sources.at(resstr)))
	}

	void smoke_flow_source(smoke_flow_sources_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "smoke_flow_source", smoke_flow_sources_to_string.at(value))
	}

	bool use_absolute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_absolute")
	}

	void use_absolute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_absolute", value)
	}

	bool use_initial_velocity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_initial_velocity")
	}

	void use_initial_velocity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_initial_velocity", value)
	}

	float velocity_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_factor")
	}

	void velocity_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_factor", value)
	}

	float velocity_normal() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_normal")
	}

	void velocity_normal(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_normal", value)
	}

	float velocity_random() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "velocity_random")
	}

	void velocity_random(float value) {
		PRIMITIVE_TYPES_SETTER("f", "velocity_random", value)
	}

	float volume_density() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume_density")
	}

	void volume_density(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume_density", value)
	}

	float surface_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "surface_distance")
	}

	void surface_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "surface_distance", value)
	}

	float particle_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "particle_size")
	}

	void particle_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "particle_size", value)
	}

	bool use_particle_size() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_particle_size")
	}

	void use_particle_size(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_particle_size", value)
	}

	int subframes() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "subframes")
	}

	void subframes(int value) {
		PRIMITIVE_TYPES_SETTER("i", "subframes", value)
	}

	std::string density_vertex_group() {
		STRING_TYPE_GETTER("density_vertex_group", resstr)
	}

	void density_vertex_group(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "density_vertex_group", value)
	}

	bool use_texture() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_texture")
	}

	void use_texture(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_texture", value)
	}

	enum smoke_flow_texture_types_enum {
		smoke_flow_texture_types_AUTO = 0,	
		smoke_flow_texture_types_UV = 1	
	};

	std::map<std::string, int> create_string_to_smoke_flow_texture_types() {
		return {{"AUTO", smoke_flow_texture_types_AUTO}, {"UV", smoke_flow_texture_types_UV}};
	};

	std::map<int, std::string> create_smoke_flow_texture_types_to_string() {
		return {{smoke_flow_texture_types_AUTO, "AUTO"}, {smoke_flow_texture_types_UV, "UV"}};
	};

	const std::map<std::string, int> string_to_smoke_flow_texture_types = create_string_to_smoke_flow_texture_types();
	const std::map<int, std::string> smoke_flow_texture_types_to_string = create_smoke_flow_texture_types_to_string();

	smoke_flow_texture_types_enum texture_map_type() {
		STRING_TYPE_GETTER("texture_map_type", static_cast<smoke_flow_texture_types_enum>(string_to_smoke_flow_texture_types.at(resstr)))
	}

	void texture_map_type(smoke_flow_texture_types_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_map_type", smoke_flow_texture_types_to_string.at(value))
	}

	std::string uv_layer() {
		STRING_TYPE_GETTER("uv_layer", resstr)
	}

	void uv_layer(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "uv_layer", value)
	}

	Texture noise_texture() {
		CLASS_TYPES_GETTER(Texture, "noise_texture")
	}

	float texture_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "texture_size")
	}

	void texture_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "texture_size", value)
	}

	float texture_offset() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "texture_offset")
	}

	void texture_offset(float value) {
		PRIMITIVE_TYPES_SETTER("f", "texture_offset", value)
	}
};

class SmokeCollSettings : public pyUniplug {
public:
	SmokeCollSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	SmokeCollSettings() : pyUniplug(0) { }

	enum smoke_coll_type_items_enum {
		smoke_coll_type_items_COLLSTATIC = 0,	
		smoke_coll_type_items_COLLRIGID = 1,	
		smoke_coll_type_items_COLLANIMATED = 2	
	};

	std::map<std::string, int> create_string_to_smoke_coll_type_items() {
		return {{"COLLSTATIC", smoke_coll_type_items_COLLSTATIC}, {"COLLRIGID", smoke_coll_type_items_COLLRIGID}, {"COLLANIMATED", smoke_coll_type_items_COLLANIMATED}};
	};

	std::map<int, std::string> create_smoke_coll_type_items_to_string() {
		return {{smoke_coll_type_items_COLLSTATIC, "COLLSTATIC"}, {smoke_coll_type_items_COLLRIGID, "COLLRIGID"}, {smoke_coll_type_items_COLLANIMATED, "COLLANIMATED"}};
	};

	const std::map<std::string, int> string_to_smoke_coll_type_items = create_string_to_smoke_coll_type_items();
	const std::map<int, std::string> smoke_coll_type_items_to_string = create_smoke_coll_type_items_to_string();

	smoke_coll_type_items_enum collision_type() {
		STRING_TYPE_GETTER("collision_type", static_cast<smoke_coll_type_items_enum>(string_to_smoke_coll_type_items.at(resstr)))
	}

	void collision_type(smoke_coll_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "collision_type", smoke_coll_type_items_to_string.at(value))
	}
};

class Space : public pyUniplug {
public:
	Space(PyObject* pyobj) : pyUniplug(pyobj) {}
	Space() : pyUniplug(0) { }

	enum space_type_items_enum {
		space_type_items_EMPTY = 0,	
		space_type_items_VIEW_3D = 1,	
		space_type_items_TIMELINE = 15,	
		space_type_items_GRAPH_EDITOR = 2,	
		space_type_items_DOPESHEET_EDITOR = 12,	
		space_type_items_NLA_EDITOR = 13,	
		space_type_items_IMAGE_EDITOR = 6,	
		space_type_items_SEQUENCE_EDITOR = 8,	
		space_type_items_CLIP_EDITOR = 20,	
		space_type_items_TEXT_EDITOR = 9,	
		space_type_items_NODE_EDITOR = 16,	
		space_type_items_LOGIC_EDITOR = 17,	
		space_type_items_PROPERTIES = 4,	
		space_type_items_OUTLINER = 3,	
		space_type_items_USER_PREFERENCES = 19,	
		space_type_items_INFO = 7,	
		space_type_items_FILE_BROWSER = 5,	
		space_type_items_CONSOLE = 18	
	};

	std::map<std::string, int> create_string_to_space_type_items() {
		return {{"EMPTY", space_type_items_EMPTY}, {"VIEW_3D", space_type_items_VIEW_3D}, {"TIMELINE", space_type_items_TIMELINE}, {"GRAPH_EDITOR", space_type_items_GRAPH_EDITOR}, {"DOPESHEET_EDITOR", space_type_items_DOPESHEET_EDITOR}, {"NLA_EDITOR", space_type_items_NLA_EDITOR}, {"IMAGE_EDITOR", space_type_items_IMAGE_EDITOR}, {"SEQUENCE_EDITOR", space_type_items_SEQUENCE_EDITOR}, {"CLIP_EDITOR", space_type_items_CLIP_EDITOR}, {"TEXT_EDITOR", space_type_items_TEXT_EDITOR}, {"NODE_EDITOR", space_type_items_NODE_EDITOR}, {"LOGIC_EDITOR", space_type_items_LOGIC_EDITOR}, {"PROPERTIES", space_type_items_PROPERTIES}, {"OUTLINER", space_type_items_OUTLINER}, {"USER_PREFERENCES", space_type_items_USER_PREFERENCES}, {"INFO", space_type_items_INFO}, {"FILE_BROWSER", space_type_items_FILE_BROWSER}, {"CONSOLE", space_type_items_CONSOLE}};
	};

	std::map<int, std::string> create_space_type_items_to_string() {
		return {{space_type_items_EMPTY, "EMPTY"}, {space_type_items_VIEW_3D, "VIEW_3D"}, {space_type_items_TIMELINE, "TIMELINE"}, {space_type_items_GRAPH_EDITOR, "GRAPH_EDITOR"}, {space_type_items_DOPESHEET_EDITOR, "DOPESHEET_EDITOR"}, {space_type_items_NLA_EDITOR, "NLA_EDITOR"}, {space_type_items_IMAGE_EDITOR, "IMAGE_EDITOR"}, {space_type_items_SEQUENCE_EDITOR, "SEQUENCE_EDITOR"}, {space_type_items_CLIP_EDITOR, "CLIP_EDITOR"}, {space_type_items_TEXT_EDITOR, "TEXT_EDITOR"}, {space_type_items_NODE_EDITOR, "NODE_EDITOR"}, {space_type_items_LOGIC_EDITOR, "LOGIC_EDITOR"}, {space_type_items_PROPERTIES, "PROPERTIES"}, {space_type_items_OUTLINER, "OUTLINER"}, {space_type_items_USER_PREFERENCES, "USER_PREFERENCES"}, {space_type_items_INFO, "INFO"}, {space_type_items_FILE_BROWSER, "FILE_BROWSER"}, {space_type_items_CONSOLE, "CONSOLE"}};
	};

	const std::map<std::string, int> string_to_space_type_items = create_string_to_space_type_items();
	const std::map<int, std::string> space_type_items_to_string = create_space_type_items_to_string();

	space_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<space_type_items_enum>(string_to_space_type_items.at(resstr)))
	}

	void type(space_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", space_type_items_to_string.at(value))
	}

	bool show_locked_time() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_locked_time")
	}

	void show_locked_time(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_locked_time", value)
	}
};

class SpaceImageEditor : public Space {
public:
	SpaceImageEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceImageEditor() : Space(0) { }

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	ImageUser image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	Scopes scopes() {
		CLASS_TYPES_GETTER(Scopes, "scopes")
	}

	bool use_image_pin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_image_pin")
	}

	void use_image_pin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_image_pin", value)
	}

	Histogram sample_histogram() {
		CLASS_TYPES_GETTER(Histogram, "sample_histogram")
	}

	VFLOAT2 zoom() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "zoom", 2)
	}

	void zoom(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "zoom", 2)
	}

	bool show_repeat() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_repeat")
	}

	void show_repeat(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_repeat", value)
	}

	bool show_grease_pencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_grease_pencil")
	}

	void show_grease_pencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_grease_pencil", value)
	}

	enum draw_channels_items_enum {
		draw_channels_items_COLOR_ALPHA = 4096,	
		draw_channels_items_COLOR = 0,	
		draw_channels_items_ALPHA = 8192,	
		draw_channels_items_Z_BUFFER = 16384	
	};

	std::map<std::string, int> create_string_to_draw_channels_items() {
		return {{"COLOR_ALPHA", draw_channels_items_COLOR_ALPHA}, {"COLOR", draw_channels_items_COLOR}, {"ALPHA", draw_channels_items_ALPHA}, {"Z_BUFFER", draw_channels_items_Z_BUFFER}};
	};

	std::map<int, std::string> create_draw_channels_items_to_string() {
		return {{draw_channels_items_COLOR_ALPHA, "COLOR_ALPHA"}, {draw_channels_items_COLOR, "COLOR"}, {draw_channels_items_ALPHA, "ALPHA"}, {draw_channels_items_Z_BUFFER, "Z_BUFFER"}};
	};

	const std::map<std::string, int> string_to_draw_channels_items = create_string_to_draw_channels_items();
	const std::map<int, std::string> draw_channels_items_to_string = create_draw_channels_items_to_string();

	draw_channels_items_enum draw_channels() {
		STRING_TYPE_GETTER("draw_channels", static_cast<draw_channels_items_enum>(string_to_draw_channels_items.at(resstr)))
	}

	void draw_channels(draw_channels_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_channels", draw_channels_items_to_string.at(value))
	}

	bool show_stereo_3d() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_stereo_3d")
	}

	void show_stereo_3d(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_stereo_3d", value)
	}

	SpaceUVEditor uv_editor();

	enum image_space_mode_items_enum {
		image_space_mode_items_VIEW = 0,	
		image_space_mode_items_PAINT = 1,	
		image_space_mode_items_MASK = 2	
	};

	std::map<std::string, int> create_string_to_image_space_mode_items() {
		return {{"VIEW", image_space_mode_items_VIEW}, {"PAINT", image_space_mode_items_PAINT}, {"MASK", image_space_mode_items_MASK}};
	};

	std::map<int, std::string> create_image_space_mode_items_to_string() {
		return {{image_space_mode_items_VIEW, "VIEW"}, {image_space_mode_items_PAINT, "PAINT"}, {image_space_mode_items_MASK, "MASK"}};
	};

	const std::map<std::string, int> string_to_image_space_mode_items = create_string_to_image_space_mode_items();
	const std::map<int, std::string> image_space_mode_items_to_string = create_image_space_mode_items_to_string();

	image_space_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<image_space_mode_items_enum>(string_to_image_space_mode_items.at(resstr)))
	}

	void mode(image_space_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", image_space_mode_items_to_string.at(value))
	}

	VFLOAT2 cursor_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor_location", 2)
	}

	void cursor_location(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor_location", 2)
	}

	enum pivot_items_full_enum {
		pivot_items_full_BOUNDING_BOX_CENTER = 0,	
		pivot_items_full_CURSOR = 1,	
		pivot_items_full_INDIVIDUAL_ORIGINS = 2,	
		pivot_items_full_MEDIAN_POINT = 3,	
		pivot_items_full_ACTIVE_ELEMENT = 4	
	};

	std::map<std::string, int> create_string_to_pivot_items_full() {
		return {{"BOUNDING_BOX_CENTER", pivot_items_full_BOUNDING_BOX_CENTER}, {"CURSOR", pivot_items_full_CURSOR}, {"INDIVIDUAL_ORIGINS", pivot_items_full_INDIVIDUAL_ORIGINS}, {"MEDIAN_POINT", pivot_items_full_MEDIAN_POINT}, {"ACTIVE_ELEMENT", pivot_items_full_ACTIVE_ELEMENT}};
	};

	std::map<int, std::string> create_pivot_items_full_to_string() {
		return {{pivot_items_full_BOUNDING_BOX_CENTER, "BOUNDING_BOX_CENTER"}, {pivot_items_full_CURSOR, "CURSOR"}, {pivot_items_full_INDIVIDUAL_ORIGINS, "INDIVIDUAL_ORIGINS"}, {pivot_items_full_MEDIAN_POINT, "MEDIAN_POINT"}, {pivot_items_full_ACTIVE_ELEMENT, "ACTIVE_ELEMENT"}};
	};

	const std::map<std::string, int> string_to_pivot_items_full = create_string_to_pivot_items_full();
	const std::map<int, std::string> pivot_items_full_to_string = create_pivot_items_full_to_string();

	pivot_items_full_enum pivot_point() {
		STRING_TYPE_GETTER("pivot_point", static_cast<pivot_items_full_enum>(string_to_pivot_items_full.at(resstr)))
	}

	void pivot_point(pivot_items_full_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pivot_point", pivot_items_full_to_string.at(value))
	}

	GreasePencil grease_pencil() {
		CLASS_TYPES_GETTER(GreasePencil, "grease_pencil")
	}

	bool use_realtime_update() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_realtime_update")
	}

	void use_realtime_update(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_realtime_update", value)
	}

	bool show_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_render")
	}

	void show_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_render", value)
	}

	bool show_paint() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_paint")
	}

	void show_paint(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_paint", value)
	}

	bool show_uvedit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_uvedit")
	}

	void show_uvedit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_uvedit", value)
	}

	bool show_maskedit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_maskedit")
	}

	void show_maskedit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_maskedit", value)
	}

	Mask mask();

	enum dt_uv_items_enum {
		dt_uv_items_OUTLINE = 0,	
		dt_uv_items_DASH = 1,	
		dt_uv_items_BLACK = 2,	
		dt_uv_items_WHITE = 3	
	};

	std::map<std::string, int> create_string_to_dt_uv_items() {
		return {{"OUTLINE", dt_uv_items_OUTLINE}, {"DASH", dt_uv_items_DASH}, {"BLACK", dt_uv_items_BLACK}, {"WHITE", dt_uv_items_WHITE}};
	};

	std::map<int, std::string> create_dt_uv_items_to_string() {
		return {{dt_uv_items_OUTLINE, "OUTLINE"}, {dt_uv_items_DASH, "DASH"}, {dt_uv_items_BLACK, "BLACK"}, {dt_uv_items_WHITE, "WHITE"}};
	};

	const std::map<std::string, int> string_to_dt_uv_items = create_string_to_dt_uv_items();
	const std::map<int, std::string> dt_uv_items_to_string = create_dt_uv_items_to_string();

	dt_uv_items_enum mask_draw_type() {
		STRING_TYPE_GETTER("mask_draw_type", static_cast<dt_uv_items_enum>(string_to_dt_uv_items.at(resstr)))
	}

	void mask_draw_type(dt_uv_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_draw_type", dt_uv_items_to_string.at(value))
	}

	bool show_mask_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_mask_smooth")
	}

	void show_mask_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_mask_smooth", value)
	}

	bool show_mask_overlay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_mask_overlay")
	}

	void show_mask_overlay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_mask_overlay", value)
	}

	enum overlay_mode_items_enum {
		overlay_mode_items_ALPHACHANNEL = 0,	
		overlay_mode_items_COMBINED = 1	
	};

	std::map<std::string, int> create_string_to_overlay_mode_items() {
		return {{"ALPHACHANNEL", overlay_mode_items_ALPHACHANNEL}, {"COMBINED", overlay_mode_items_COMBINED}};
	};

	std::map<int, std::string> create_overlay_mode_items_to_string() {
		return {{overlay_mode_items_ALPHACHANNEL, "ALPHACHANNEL"}, {overlay_mode_items_COMBINED, "COMBINED"}};
	};

	const std::map<std::string, int> string_to_overlay_mode_items = create_string_to_overlay_mode_items();
	const std::map<int, std::string> overlay_mode_items_to_string = create_overlay_mode_items_to_string();

	overlay_mode_items_enum mask_overlay_mode() {
		STRING_TYPE_GETTER("mask_overlay_mode", static_cast<overlay_mode_items_enum>(string_to_overlay_mode_items.at(resstr)))
	}

	void mask_overlay_mode(overlay_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_overlay_mode", overlay_mode_items_to_string.at(value))
	}
};

class SpaceUVEditor : public pyUniplug {
public:
	SpaceUVEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	SpaceUVEditor() : pyUniplug(0) { }

	enum sticky_mode_items_enum {
		sticky_mode_items_DISABLED = 1,	
		sticky_mode_items_SHARED_LOCATION = 0,	
		sticky_mode_items_SHARED_VERTEX = 2	
	};

	std::map<std::string, int> create_string_to_sticky_mode_items() {
		return {{"DISABLED", sticky_mode_items_DISABLED}, {"SHARED_LOCATION", sticky_mode_items_SHARED_LOCATION}, {"SHARED_VERTEX", sticky_mode_items_SHARED_VERTEX}};
	};

	std::map<int, std::string> create_sticky_mode_items_to_string() {
		return {{sticky_mode_items_DISABLED, "DISABLED"}, {sticky_mode_items_SHARED_LOCATION, "SHARED_LOCATION"}, {sticky_mode_items_SHARED_VERTEX, "SHARED_VERTEX"}};
	};

	const std::map<std::string, int> string_to_sticky_mode_items = create_string_to_sticky_mode_items();
	const std::map<int, std::string> sticky_mode_items_to_string = create_sticky_mode_items_to_string();

	sticky_mode_items_enum sticky_select_mode() {
		STRING_TYPE_GETTER("sticky_select_mode", static_cast<sticky_mode_items_enum>(string_to_sticky_mode_items.at(resstr)))
	}

	void sticky_select_mode(sticky_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sticky_select_mode", sticky_mode_items_to_string.at(value))
	}

	enum dt_uv_items_enum {
		dt_uv_items_OUTLINE = 0,	
		dt_uv_items_DASH = 1,	
		dt_uv_items_BLACK = 2,	
		dt_uv_items_WHITE = 3	
	};

	std::map<std::string, int> create_string_to_dt_uv_items() {
		return {{"OUTLINE", dt_uv_items_OUTLINE}, {"DASH", dt_uv_items_DASH}, {"BLACK", dt_uv_items_BLACK}, {"WHITE", dt_uv_items_WHITE}};
	};

	std::map<int, std::string> create_dt_uv_items_to_string() {
		return {{dt_uv_items_OUTLINE, "OUTLINE"}, {dt_uv_items_DASH, "DASH"}, {dt_uv_items_BLACK, "BLACK"}, {dt_uv_items_WHITE, "WHITE"}};
	};

	const std::map<std::string, int> string_to_dt_uv_items = create_string_to_dt_uv_items();
	const std::map<int, std::string> dt_uv_items_to_string = create_dt_uv_items_to_string();

	dt_uv_items_enum edge_draw_type() {
		STRING_TYPE_GETTER("edge_draw_type", static_cast<dt_uv_items_enum>(string_to_dt_uv_items.at(resstr)))
	}

	void edge_draw_type(dt_uv_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "edge_draw_type", dt_uv_items_to_string.at(value))
	}

	bool show_smooth_edges() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_smooth_edges")
	}

	void show_smooth_edges(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_smooth_edges", value)
	}

	bool show_stretch() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_stretch")
	}

	void show_stretch(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_stretch", value)
	}

	enum dt_uvstretch_items_enum {
		dt_uvstretch_items_ANGLE = 0,	
		dt_uvstretch_items_AREA = 1	
	};

	std::map<std::string, int> create_string_to_dt_uvstretch_items() {
		return {{"ANGLE", dt_uvstretch_items_ANGLE}, {"AREA", dt_uvstretch_items_AREA}};
	};

	std::map<int, std::string> create_dt_uvstretch_items_to_string() {
		return {{dt_uvstretch_items_ANGLE, "ANGLE"}, {dt_uvstretch_items_AREA, "AREA"}};
	};

	const std::map<std::string, int> string_to_dt_uvstretch_items = create_string_to_dt_uvstretch_items();
	const std::map<int, std::string> dt_uvstretch_items_to_string = create_dt_uvstretch_items_to_string();

	dt_uvstretch_items_enum draw_stretch_type() {
		STRING_TYPE_GETTER("draw_stretch_type", static_cast<dt_uvstretch_items_enum>(string_to_dt_uvstretch_items.at(resstr)))
	}

	void draw_stretch_type(dt_uvstretch_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_stretch_type", dt_uvstretch_items_to_string.at(value))
	}

	bool show_modified_edges() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_modified_edges")
	}

	void show_modified_edges(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_modified_edges", value)
	}

	bool show_other_objects() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_other_objects")
	}

	void show_other_objects(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_other_objects", value)
	}

	bool show_metadata() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_metadata")
	}

	void show_metadata(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_metadata", value)
	}

	bool show_texpaint() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_texpaint")
	}

	void show_texpaint(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_texpaint", value)
	}

	bool show_normalized_coords() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_normalized_coords")
	}

	void show_normalized_coords(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_normalized_coords", value)
	}

	bool show_faces() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_faces")
	}

	void show_faces(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_faces", value)
	}

	bool use_snap_to_pixels() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_snap_to_pixels")
	}

	void use_snap_to_pixels(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_snap_to_pixels", value)
	}

	bool lock_bounds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_bounds")
	}

	void lock_bounds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_bounds", value)
	}

	bool use_live_unwrap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_live_unwrap")
	}

	void use_live_unwrap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_live_unwrap", value)
	}
};

class SpaceSequenceEditor : public Space {
public:
	SpaceSequenceEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceSequenceEditor() : Space(0) { }

	enum view_type_items_enum {
		view_type_items_SEQUENCER = 1,	
		view_type_items_PREVIEW = 2,	
		view_type_items_SEQUENCER_PREVIEW = 3	
	};

	std::map<std::string, int> create_string_to_view_type_items() {
		return {{"SEQUENCER", view_type_items_SEQUENCER}, {"PREVIEW", view_type_items_PREVIEW}, {"SEQUENCER_PREVIEW", view_type_items_SEQUENCER_PREVIEW}};
	};

	std::map<int, std::string> create_view_type_items_to_string() {
		return {{view_type_items_SEQUENCER, "SEQUENCER"}, {view_type_items_PREVIEW, "PREVIEW"}, {view_type_items_SEQUENCER_PREVIEW, "SEQUENCER_PREVIEW"}};
	};

	const std::map<std::string, int> string_to_view_type_items = create_string_to_view_type_items();
	const std::map<int, std::string> view_type_items_to_string = create_view_type_items_to_string();

	view_type_items_enum view_type() {
		STRING_TYPE_GETTER("view_type", static_cast<view_type_items_enum>(string_to_view_type_items.at(resstr)))
	}

	void view_type(view_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_type", view_type_items_to_string.at(value))
	}

	enum display_mode_items_enum {
		display_mode_items_IMAGE = 1,	
		display_mode_items_WAVEFORM = 2,	
		display_mode_items_VECTOR_SCOPE = 3,	
		display_mode_items_HISTOGRAM = 4	
	};

	std::map<std::string, int> create_string_to_display_mode_items() {
		return {{"IMAGE", display_mode_items_IMAGE}, {"WAVEFORM", display_mode_items_WAVEFORM}, {"VECTOR_SCOPE", display_mode_items_VECTOR_SCOPE}, {"HISTOGRAM", display_mode_items_HISTOGRAM}};
	};

	std::map<int, std::string> create_display_mode_items_to_string() {
		return {{display_mode_items_IMAGE, "IMAGE"}, {display_mode_items_WAVEFORM, "WAVEFORM"}, {display_mode_items_VECTOR_SCOPE, "VECTOR_SCOPE"}, {display_mode_items_HISTOGRAM, "HISTOGRAM"}};
	};

	const std::map<std::string, int> string_to_display_mode_items = create_string_to_display_mode_items();
	const std::map<int, std::string> display_mode_items_to_string = create_display_mode_items_to_string();

	display_mode_items_enum display_mode() {
		STRING_TYPE_GETTER("display_mode", static_cast<display_mode_items_enum>(string_to_display_mode_items.at(resstr)))
	}

	void display_mode(display_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "display_mode", display_mode_items_to_string.at(value))
	}

	bool show_frame_indicator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_frame_indicator")
	}

	void show_frame_indicator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_frame_indicator", value)
	}

	bool show_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_frames")
	}

	void show_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_frames", value)
	}

	bool use_marker_sync() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_marker_sync")
	}

	void use_marker_sync(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_marker_sync", value)
	}

	bool show_separate_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_separate_color")
	}

	void show_separate_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_separate_color", value)
	}

	bool show_safe_areas() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_safe_areas")
	}

	void show_safe_areas(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_safe_areas", value)
	}

	bool show_safe_center() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_safe_center")
	}

	void show_safe_center(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_safe_center", value)
	}

	bool show_metadata() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_metadata")
	}

	void show_metadata(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_metadata", value)
	}

	bool show_seconds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_seconds")
	}

	void show_seconds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_seconds", value)
	}

	bool show_grease_pencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_grease_pencil")
	}

	void show_grease_pencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_grease_pencil", value)
	}

	int display_channel() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "display_channel")
	}

	void display_channel(int value) {
		PRIMITIVE_TYPES_SETTER("i", "display_channel", value)
	}

	enum preview_channels_items_enum {
		preview_channels_items_COLOR_ALPHA = 64,	
		preview_channels_items_COLOR = 0	
	};

	std::map<std::string, int> create_string_to_preview_channels_items() {
		return {{"COLOR_ALPHA", preview_channels_items_COLOR_ALPHA}, {"COLOR", preview_channels_items_COLOR}};
	};

	std::map<int, std::string> create_preview_channels_items_to_string() {
		return {{preview_channels_items_COLOR_ALPHA, "COLOR_ALPHA"}, {preview_channels_items_COLOR, "COLOR"}};
	};

	const std::map<std::string, int> string_to_preview_channels_items = create_string_to_preview_channels_items();
	const std::map<int, std::string> preview_channels_items_to_string = create_preview_channels_items_to_string();

	preview_channels_items_enum preview_channels() {
		STRING_TYPE_GETTER("preview_channels", static_cast<preview_channels_items_enum>(string_to_preview_channels_items.at(resstr)))
	}

	void preview_channels(preview_channels_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "preview_channels", preview_channels_items_to_string.at(value))
	}

	enum waveform_type_draw_items_enum {
		waveform_type_draw_items_NO_WAVEFORMS = 256,	
		waveform_type_draw_items_ALL_WAVEFORMS = 128,	
		waveform_type_draw_items_DEFAULT_WAVEFORMS = 0	
	};

	std::map<std::string, int> create_string_to_waveform_type_draw_items() {
		return {{"NO_WAVEFORMS", waveform_type_draw_items_NO_WAVEFORMS}, {"ALL_WAVEFORMS", waveform_type_draw_items_ALL_WAVEFORMS}, {"DEFAULT_WAVEFORMS", waveform_type_draw_items_DEFAULT_WAVEFORMS}};
	};

	std::map<int, std::string> create_waveform_type_draw_items_to_string() {
		return {{waveform_type_draw_items_NO_WAVEFORMS, "NO_WAVEFORMS"}, {waveform_type_draw_items_ALL_WAVEFORMS, "ALL_WAVEFORMS"}, {waveform_type_draw_items_DEFAULT_WAVEFORMS, "DEFAULT_WAVEFORMS"}};
	};

	const std::map<std::string, int> string_to_waveform_type_draw_items = create_string_to_waveform_type_draw_items();
	const std::map<int, std::string> waveform_type_draw_items_to_string = create_waveform_type_draw_items_to_string();

	waveform_type_draw_items_enum waveform_draw_type() {
		STRING_TYPE_GETTER("waveform_draw_type", static_cast<waveform_type_draw_items_enum>(string_to_waveform_type_draw_items.at(resstr)))
	}

	void waveform_draw_type(waveform_type_draw_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "waveform_draw_type", waveform_type_draw_items_to_string.at(value))
	}

	int draw_overexposed() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "draw_overexposed")
	}

	void draw_overexposed(int value) {
		PRIMITIVE_TYPES_SETTER("i", "draw_overexposed", value)
	}

	enum proxy_render_size_items_enum {
		proxy_render_size_items_NONE = -1,	
		proxy_render_size_items_SCENE = 0,	
		proxy_render_size_items_PROXY_25 = 25,	
		proxy_render_size_items_PROXY_50 = 50,	
		proxy_render_size_items_PROXY_75 = 75,	
		proxy_render_size_items_PROXY_100 = 99,	
		proxy_render_size_items_FULL = 100	
	};

	std::map<std::string, int> create_string_to_proxy_render_size_items() {
		return {{"NONE", proxy_render_size_items_NONE}, {"SCENE", proxy_render_size_items_SCENE}, {"PROXY_25", proxy_render_size_items_PROXY_25}, {"PROXY_50", proxy_render_size_items_PROXY_50}, {"PROXY_75", proxy_render_size_items_PROXY_75}, {"PROXY_100", proxy_render_size_items_PROXY_100}, {"FULL", proxy_render_size_items_FULL}};
	};

	std::map<int, std::string> create_proxy_render_size_items_to_string() {
		return {{proxy_render_size_items_NONE, "NONE"}, {proxy_render_size_items_SCENE, "SCENE"}, {proxy_render_size_items_PROXY_25, "PROXY_25"}, {proxy_render_size_items_PROXY_50, "PROXY_50"}, {proxy_render_size_items_PROXY_75, "PROXY_75"}, {proxy_render_size_items_PROXY_100, "PROXY_100"}, {proxy_render_size_items_FULL, "FULL"}};
	};

	const std::map<std::string, int> string_to_proxy_render_size_items = create_string_to_proxy_render_size_items();
	const std::map<int, std::string> proxy_render_size_items_to_string = create_proxy_render_size_items_to_string();

	proxy_render_size_items_enum proxy_render_size() {
		STRING_TYPE_GETTER("proxy_render_size", static_cast<proxy_render_size_items_enum>(string_to_proxy_render_size_items.at(resstr)))
	}

	void proxy_render_size(proxy_render_size_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proxy_render_size", proxy_render_size_items_to_string.at(value))
	}

	GreasePencil grease_pencil() {
		CLASS_TYPES_GETTER(GreasePencil, "grease_pencil")
	}

	enum overlay_type_items_enum {
		overlay_type_items_RECTANGLE = 0,	
		overlay_type_items_REFERENCE = 1,	
		overlay_type_items_CURRENT = 2	
	};

	std::map<std::string, int> create_string_to_overlay_type_items() {
		return {{"RECTANGLE", overlay_type_items_RECTANGLE}, {"REFERENCE", overlay_type_items_REFERENCE}, {"CURRENT", overlay_type_items_CURRENT}};
	};

	std::map<int, std::string> create_overlay_type_items_to_string() {
		return {{overlay_type_items_RECTANGLE, "RECTANGLE"}, {overlay_type_items_REFERENCE, "REFERENCE"}, {overlay_type_items_CURRENT, "CURRENT"}};
	};

	const std::map<std::string, int> string_to_overlay_type_items = create_string_to_overlay_type_items();
	const std::map<int, std::string> overlay_type_items_to_string = create_overlay_type_items_to_string();

	overlay_type_items_enum overlay_type() {
		STRING_TYPE_GETTER("overlay_type", static_cast<overlay_type_items_enum>(string_to_overlay_type_items.at(resstr)))
	}

	void overlay_type(overlay_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "overlay_type", overlay_type_items_to_string.at(value))
	}

	bool show_backdrop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_backdrop")
	}

	void show_backdrop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_backdrop", value)
	}

	bool show_strip_offset() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_strip_offset")
	}

	void show_strip_offset(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_strip_offset", value)
	}
};

class SpaceTextEditor : public Space {
public:
	SpaceTextEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceTextEditor() : Space(0) { }

	Text text();

	bool show_word_wrap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_word_wrap")
	}

	void show_word_wrap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_word_wrap", value)
	}

	bool show_line_numbers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_line_numbers")
	}

	void show_line_numbers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_line_numbers", value)
	}

	bool show_syntax_highlight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_syntax_highlight")
	}

	void show_syntax_highlight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_syntax_highlight", value)
	}

	bool show_line_highlight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_line_highlight")
	}

	void show_line_highlight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_line_highlight", value)
	}

	int tab_width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tab_width")
	}

	void tab_width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tab_width", value)
	}

	int font_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "font_size")
	}

	void font_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "font_size", value)
	}

	bool show_margin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_margin")
	}

	void show_margin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_margin", value)
	}

	int margin_column() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "margin_column")
	}

	void margin_column(int value) {
		PRIMITIVE_TYPES_SETTER("i", "margin_column", value)
	}

	int top() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "top")
	}

	void top(int value) {
		PRIMITIVE_TYPES_SETTER("i", "top", value)
	}

	int visible_lines() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "visible_lines")
	}

	void visible_lines(int value) {
		PRIMITIVE_TYPES_SETTER("i", "visible_lines", value)
	}

	bool use_overwrite() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_overwrite")
	}

	void use_overwrite(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_overwrite", value)
	}

	bool use_live_edit() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_live_edit")
	}

	void use_live_edit(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_live_edit", value)
	}

	bool use_find_all() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_find_all")
	}

	void use_find_all(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_find_all", value)
	}

	bool use_find_wrap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_find_wrap")
	}

	void use_find_wrap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_find_wrap", value)
	}

	bool use_match_case() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_match_case")
	}

	void use_match_case(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_match_case", value)
	}

	std::string find_text() {
		STRING_TYPE_GETTER("find_text", resstr)
	}

	void find_text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "find_text", value)
	}

	std::string replace_text() {
		STRING_TYPE_GETTER("replace_text", resstr)
	}

	void replace_text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "replace_text", value)
	}

	std::array<int, 2> region_location_from_cursor(int line, int column) {
		PYTHON_FUNCTION_ARGS_CALL("region_location_from_cursor", "ii", line, column)
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_ARRAY_CONV(result, int, PyLong_AsLong(item), 2)
		NONCLASS_TYPES_RETURN(result_res)
	}
};

class FileSelectParams : public pyUniplug {
public:
	FileSelectParams(PyObject* pyobj) : pyUniplug(pyobj) {}
	FileSelectParams() : pyUniplug(0) { }

	std::string title() {
		STRING_TYPE_GETTER("title", resstr)
	}

	void title(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "title", value)
	}

	std::string directory() {
		STRING_TYPE_GETTER("directory", resstr)
	}

	void directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "directory", value)
	}

	std::string filename() {
		STRING_TYPE_GETTER("filename", resstr)
	}

	void filename(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filename", value)
	}

	enum file_display_items_enum {
		file_display_items_FILE_SHORTDISPLAY = 1,	
		file_display_items_FILE_LONGDISPLAY = 2,	
		file_display_items_FILE_IMGDISPLAY = 3	
	};

	std::map<std::string, int> create_string_to_file_display_items() {
		return {{"FILE_SHORTDISPLAY", file_display_items_FILE_SHORTDISPLAY}, {"FILE_LONGDISPLAY", file_display_items_FILE_LONGDISPLAY}, {"FILE_IMGDISPLAY", file_display_items_FILE_IMGDISPLAY}};
	};

	std::map<int, std::string> create_file_display_items_to_string() {
		return {{file_display_items_FILE_SHORTDISPLAY, "FILE_SHORTDISPLAY"}, {file_display_items_FILE_LONGDISPLAY, "FILE_LONGDISPLAY"}, {file_display_items_FILE_IMGDISPLAY, "FILE_IMGDISPLAY"}};
	};

	const std::map<std::string, int> string_to_file_display_items = create_string_to_file_display_items();
	const std::map<int, std::string> file_display_items_to_string = create_file_display_items_to_string();

	file_display_items_enum display_type() {
		STRING_TYPE_GETTER("display_type", static_cast<file_display_items_enum>(string_to_file_display_items.at(resstr)))
	}

	void display_type(file_display_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "display_type", file_display_items_to_string.at(value))
	}

	bool use_filter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter")
	}

	void use_filter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter", value)
	}

	bool show_hidden() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_hidden")
	}

	void show_hidden(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_hidden", value)
	}

	enum file_sort_items_enum {
		file_sort_items_FILE_SORT_ALPHA = 1,	
		file_sort_items_FILE_SORT_EXTENSION = 2,	
		file_sort_items_FILE_SORT_TIME = 3,	
		file_sort_items_FILE_SORT_SIZE = 4	
	};

	std::map<std::string, int> create_string_to_file_sort_items() {
		return {{"FILE_SORT_ALPHA", file_sort_items_FILE_SORT_ALPHA}, {"FILE_SORT_EXTENSION", file_sort_items_FILE_SORT_EXTENSION}, {"FILE_SORT_TIME", file_sort_items_FILE_SORT_TIME}, {"FILE_SORT_SIZE", file_sort_items_FILE_SORT_SIZE}};
	};

	std::map<int, std::string> create_file_sort_items_to_string() {
		return {{file_sort_items_FILE_SORT_ALPHA, "FILE_SORT_ALPHA"}, {file_sort_items_FILE_SORT_EXTENSION, "FILE_SORT_EXTENSION"}, {file_sort_items_FILE_SORT_TIME, "FILE_SORT_TIME"}, {file_sort_items_FILE_SORT_SIZE, "FILE_SORT_SIZE"}};
	};

	const std::map<std::string, int> string_to_file_sort_items = create_string_to_file_sort_items();
	const std::map<int, std::string> file_sort_items_to_string = create_file_sort_items_to_string();

	file_sort_items_enum sort_method() {
		STRING_TYPE_GETTER("sort_method", static_cast<file_sort_items_enum>(string_to_file_sort_items.at(resstr)))
	}

	void sort_method(file_sort_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sort_method", file_sort_items_to_string.at(value))
	}

	bool use_filter_image() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_image")
	}

	void use_filter_image(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_image", value)
	}

	bool use_filter_blender() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_blender")
	}

	void use_filter_blender(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_blender", value)
	}

	bool use_filter_backup() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_backup")
	}

	void use_filter_backup(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_backup", value)
	}

	bool use_filter_movie() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_movie")
	}

	void use_filter_movie(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_movie", value)
	}

	bool use_filter_script() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_script")
	}

	void use_filter_script(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_script", value)
	}

	bool use_filter_font() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_font")
	}

	void use_filter_font(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_font", value)
	}

	bool use_filter_sound() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_sound")
	}

	void use_filter_sound(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_sound", value)
	}

	bool use_filter_text() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_text")
	}

	void use_filter_text(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_text", value)
	}

	bool use_filter_folder() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_folder")
	}

	void use_filter_folder(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_folder", value)
	}

	std::string filter_glob() {
		STRING_TYPE_GETTER("filter_glob", resstr)
	}

	void filter_glob(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_glob", value)
	}

	std::string filter_search() {
		STRING_TYPE_GETTER("filter_search", resstr)
	}

	void filter_search(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_search", value)
	}

	enum thumbnail_size_items_enum {
		thumbnail_size_items_TINY = 32,	
		thumbnail_size_items_SMALL = 64,	
		thumbnail_size_items_NORMAL = 128,	
		thumbnail_size_items_LARGE = 256	
	};

	std::map<std::string, int> create_string_to_thumbnail_size_items() {
		return {{"TINY", thumbnail_size_items_TINY}, {"SMALL", thumbnail_size_items_SMALL}, {"NORMAL", thumbnail_size_items_NORMAL}, {"LARGE", thumbnail_size_items_LARGE}};
	};

	std::map<int, std::string> create_thumbnail_size_items_to_string() {
		return {{thumbnail_size_items_TINY, "TINY"}, {thumbnail_size_items_SMALL, "SMALL"}, {thumbnail_size_items_NORMAL, "NORMAL"}, {thumbnail_size_items_LARGE, "LARGE"}};
	};

	const std::map<std::string, int> string_to_thumbnail_size_items = create_string_to_thumbnail_size_items();
	const std::map<int, std::string> thumbnail_size_items_to_string = create_thumbnail_size_items_to_string();

	thumbnail_size_items_enum thumbnail_size() {
		STRING_TYPE_GETTER("thumbnail_size", static_cast<thumbnail_size_items_enum>(string_to_thumbnail_size_items.at(resstr)))
	}

	void thumbnail_size(thumbnail_size_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "thumbnail_size", thumbnail_size_items_to_string.at(value))
	}
};

class FileBrowserFSMenuEntry : public pyUniplug {
public:
	FileBrowserFSMenuEntry(PyObject* pyobj) : pyUniplug(pyobj) {}
	FileBrowserFSMenuEntry() : pyUniplug(0) { }

	std::string path() {
		STRING_TYPE_GETTER("path", resstr)
	}

	void path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "path", value)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool use_save() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_save")
	}

	void use_save(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_save", value)
	}

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}
};

class SpaceFileBrowser : public Space {
public:
	SpaceFileBrowser(PyObject* pyobj) : Space(pyobj) {}
	SpaceFileBrowser() : Space(0) { }

	FileSelectParams params_value() {
		CLASS_TYPES_GETTER(FileSelectParams, "params")
	}

	Operator active_operator();

	Operator operator_value();

	std::map<std::string, FileBrowserFSMenuEntry> system_folders() {
		MAP_TYPE_GETTER("system_folders", FileBrowserFSMenuEntry)
	}

	int system_folders_active() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "system_folders_active")
	}

	void system_folders_active(int value) {
		PRIMITIVE_TYPES_SETTER("i", "system_folders_active", value)
	}

	std::map<std::string, FileBrowserFSMenuEntry> system_bookmarks() {
		MAP_TYPE_GETTER("system_bookmarks", FileBrowserFSMenuEntry)
	}

	int system_bookmarks_active() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "system_bookmarks_active")
	}

	void system_bookmarks_active(int value) {
		PRIMITIVE_TYPES_SETTER("i", "system_bookmarks_active", value)
	}

	std::map<std::string, FileBrowserFSMenuEntry> bookmarks() {
		MAP_TYPE_GETTER("bookmarks", FileBrowserFSMenuEntry)
	}

	int bookmarks_active() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bookmarks_active")
	}

	void bookmarks_active(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bookmarks_active", value)
	}

	std::map<std::string, FileBrowserFSMenuEntry> recent_folders() {
		MAP_TYPE_GETTER("recent_folders", FileBrowserFSMenuEntry)
	}

	int recent_folders_active() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "recent_folders_active")
	}

	void recent_folders_active(int value) {
		PRIMITIVE_TYPES_SETTER("i", "recent_folders_active", value)
	}
};

class SpaceOutliner : public Space {
public:
	SpaceOutliner(PyObject* pyobj) : Space(pyobj) {}
	SpaceOutliner() : Space(0) { }

	enum display_mode_items_enum {
		display_mode_items_ALL_SCENES = 0,	
		display_mode_items_CURRENT_SCENE = 1,	
		display_mode_items_VISIBLE_LAYERS = 2,	
		display_mode_items_SELECTED = 3,	
		display_mode_items_ACTIVE = 4,	
		display_mode_items_SAME_TYPES = 5,	
		display_mode_items_GROUPS = 6,	
		display_mode_items_SEQUENCE = 10,	
		display_mode_items_LIBRARIES = 7,	
		display_mode_items_DATABLOCKS = 11,	
		display_mode_items_USER_PREFERENCES = 12,	
		display_mode_items_ORPHAN_DATA = 14	
	};

	std::map<std::string, int> create_string_to_display_mode_items() {
		return {{"ALL_SCENES", display_mode_items_ALL_SCENES}, {"CURRENT_SCENE", display_mode_items_CURRENT_SCENE}, {"VISIBLE_LAYERS", display_mode_items_VISIBLE_LAYERS}, {"SELECTED", display_mode_items_SELECTED}, {"ACTIVE", display_mode_items_ACTIVE}, {"SAME_TYPES", display_mode_items_SAME_TYPES}, {"GROUPS", display_mode_items_GROUPS}, {"SEQUENCE", display_mode_items_SEQUENCE}, {"LIBRARIES", display_mode_items_LIBRARIES}, {"DATABLOCKS", display_mode_items_DATABLOCKS}, {"USER_PREFERENCES", display_mode_items_USER_PREFERENCES}, {"ORPHAN_DATA", display_mode_items_ORPHAN_DATA}};
	};

	std::map<int, std::string> create_display_mode_items_to_string() {
		return {{display_mode_items_ALL_SCENES, "ALL_SCENES"}, {display_mode_items_CURRENT_SCENE, "CURRENT_SCENE"}, {display_mode_items_VISIBLE_LAYERS, "VISIBLE_LAYERS"}, {display_mode_items_SELECTED, "SELECTED"}, {display_mode_items_ACTIVE, "ACTIVE"}, {display_mode_items_SAME_TYPES, "SAME_TYPES"}, {display_mode_items_GROUPS, "GROUPS"}, {display_mode_items_SEQUENCE, "SEQUENCE"}, {display_mode_items_LIBRARIES, "LIBRARIES"}, {display_mode_items_DATABLOCKS, "DATABLOCKS"}, {display_mode_items_USER_PREFERENCES, "USER_PREFERENCES"}, {display_mode_items_ORPHAN_DATA, "ORPHAN_DATA"}};
	};

	const std::map<std::string, int> string_to_display_mode_items = create_string_to_display_mode_items();
	const std::map<int, std::string> display_mode_items_to_string = create_display_mode_items_to_string();

	display_mode_items_enum display_mode() {
		STRING_TYPE_GETTER("display_mode", static_cast<display_mode_items_enum>(string_to_display_mode_items.at(resstr)))
	}

	void display_mode(display_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "display_mode", display_mode_items_to_string.at(value))
	}

	std::string filter_text() {
		STRING_TYPE_GETTER("filter_text", resstr)
	}

	void filter_text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_text", value)
	}

	bool use_filter_case_sensitive() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_case_sensitive")
	}

	void use_filter_case_sensitive(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_case_sensitive", value)
	}

	bool use_filter_complete() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_complete")
	}

	void use_filter_complete(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_complete", value)
	}

	bool use_sort_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sort_alpha")
	}

	void use_sort_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sort_alpha", value)
	}

	bool show_restrict_columns() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_restrict_columns")
	}

	void show_restrict_columns(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_restrict_columns", value)
	}
};

class BackgroundImage : public pyUniplug {
public:
	BackgroundImage(PyObject* pyobj) : pyUniplug(pyobj) {}
	BackgroundImage() : pyUniplug(0) { }

	enum bgpic_source_items_enum {
		bgpic_source_items_IMAGE = 0,	
		bgpic_source_items_MOVIE_CLIP = 1	
	};

	std::map<std::string, int> create_string_to_bgpic_source_items() {
		return {{"IMAGE", bgpic_source_items_IMAGE}, {"MOVIE_CLIP", bgpic_source_items_MOVIE_CLIP}};
	};

	std::map<int, std::string> create_bgpic_source_items_to_string() {
		return {{bgpic_source_items_IMAGE, "IMAGE"}, {bgpic_source_items_MOVIE_CLIP, "MOVIE_CLIP"}};
	};

	const std::map<std::string, int> string_to_bgpic_source_items = create_string_to_bgpic_source_items();
	const std::map<int, std::string> bgpic_source_items_to_string = create_bgpic_source_items_to_string();

	bgpic_source_items_enum source() {
		STRING_TYPE_GETTER("source", static_cast<bgpic_source_items_enum>(string_to_bgpic_source_items.at(resstr)))
	}

	void source(bgpic_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "source", bgpic_source_items_to_string.at(value))
	}

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	MovieClip clip();

	ImageUser image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	MovieClipUser clip_user();

	float offset_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_x")
	}

	void offset_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_x", value)
	}

	float offset_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "offset_y")
	}

	void offset_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "offset_y", value)
	}

	float size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "size")
	}

	void size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "size", value)
	}

	float rotation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rotation")
	}

	void rotation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rotation", value)
	}

	bool use_flip_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_x")
	}

	void use_flip_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_x", value)
	}

	bool use_flip_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_flip_y")
	}

	void use_flip_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_flip_y", value)
	}

	float opacity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "opacity")
	}

	void opacity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "opacity", value)
	}

	enum bgpic_axis_items_enum {
		bgpic_axis_items_LEFT = 8,	
		bgpic_axis_items_RIGHT = 16,	
		bgpic_axis_items_BACK = 4,	
		bgpic_axis_items_FRONT = 2,	
		bgpic_axis_items_BOTTOM = 64,	
		bgpic_axis_items_TOP = 32,	
		bgpic_axis_items_ALL = 0,	
		bgpic_axis_items_CAMERA = 256	
	};

	std::map<std::string, int> create_string_to_bgpic_axis_items() {
		return {{"LEFT", bgpic_axis_items_LEFT}, {"RIGHT", bgpic_axis_items_RIGHT}, {"BACK", bgpic_axis_items_BACK}, {"FRONT", bgpic_axis_items_FRONT}, {"BOTTOM", bgpic_axis_items_BOTTOM}, {"TOP", bgpic_axis_items_TOP}, {"ALL", bgpic_axis_items_ALL}, {"CAMERA", bgpic_axis_items_CAMERA}};
	};

	std::map<int, std::string> create_bgpic_axis_items_to_string() {
		return {{bgpic_axis_items_LEFT, "LEFT"}, {bgpic_axis_items_RIGHT, "RIGHT"}, {bgpic_axis_items_BACK, "BACK"}, {bgpic_axis_items_FRONT, "FRONT"}, {bgpic_axis_items_BOTTOM, "BOTTOM"}, {bgpic_axis_items_TOP, "TOP"}, {bgpic_axis_items_ALL, "ALL"}, {bgpic_axis_items_CAMERA, "CAMERA"}};
	};

	const std::map<std::string, int> string_to_bgpic_axis_items = create_string_to_bgpic_axis_items();
	const std::map<int, std::string> bgpic_axis_items_to_string = create_bgpic_axis_items_to_string();

	bgpic_axis_items_enum view_axis() {
		STRING_TYPE_GETTER("view_axis", static_cast<bgpic_axis_items_enum>(string_to_bgpic_axis_items.at(resstr)))
	}

	void view_axis(bgpic_axis_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_axis", bgpic_axis_items_to_string.at(value))
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	bool use_camera_clip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_camera_clip")
	}

	void use_camera_clip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_camera_clip", value)
	}

	bool show_background_image() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_background_image")
	}

	void show_background_image(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_background_image", value)
	}

	bool show_on_foreground() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_on_foreground")
	}

	void show_on_foreground(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_on_foreground", value)
	}

	enum bgpic_draw_depth_items_enum {
		bgpic_draw_depth_items_BACK = 0,	
		bgpic_draw_depth_items_FRONT = 16	
	};

	std::map<std::string, int> create_string_to_bgpic_draw_depth_items() {
		return {{"BACK", bgpic_draw_depth_items_BACK}, {"FRONT", bgpic_draw_depth_items_FRONT}};
	};

	std::map<int, std::string> create_bgpic_draw_depth_items_to_string() {
		return {{bgpic_draw_depth_items_BACK, "BACK"}, {bgpic_draw_depth_items_FRONT, "FRONT"}};
	};

	const std::map<std::string, int> string_to_bgpic_draw_depth_items = create_string_to_bgpic_draw_depth_items();
	const std::map<int, std::string> bgpic_draw_depth_items_to_string = create_bgpic_draw_depth_items_to_string();

	bgpic_draw_depth_items_enum draw_depth() {
		STRING_TYPE_GETTER("draw_depth", static_cast<bgpic_draw_depth_items_enum>(string_to_bgpic_draw_depth_items.at(resstr)))
	}

	void draw_depth(bgpic_draw_depth_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "draw_depth", bgpic_draw_depth_items_to_string.at(value))
	}

	enum bgpic_camera_frame_items_enum {
		bgpic_camera_frame_items_STRETCH = 0,	
		bgpic_camera_frame_items_FIT = 32,	
		bgpic_camera_frame_items_CROP = 96	
	};

	std::map<std::string, int> create_string_to_bgpic_camera_frame_items() {
		return {{"STRETCH", bgpic_camera_frame_items_STRETCH}, {"FIT", bgpic_camera_frame_items_FIT}, {"CROP", bgpic_camera_frame_items_CROP}};
	};

	std::map<int, std::string> create_bgpic_camera_frame_items_to_string() {
		return {{bgpic_camera_frame_items_STRETCH, "STRETCH"}, {bgpic_camera_frame_items_FIT, "FIT"}, {bgpic_camera_frame_items_CROP, "CROP"}};
	};

	const std::map<std::string, int> string_to_bgpic_camera_frame_items = create_string_to_bgpic_camera_frame_items();
	const std::map<int, std::string> bgpic_camera_frame_items_to_string = create_bgpic_camera_frame_items_to_string();

	bgpic_camera_frame_items_enum frame_method() {
		STRING_TYPE_GETTER("frame_method", static_cast<bgpic_camera_frame_items_enum>(string_to_bgpic_camera_frame_items.at(resstr)))
	}

	void frame_method(bgpic_camera_frame_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "frame_method", bgpic_camera_frame_items_to_string.at(value))
	}
};

class SpaceView3D : public Space {
public:
	SpaceView3D(PyObject* pyobj) : Space(pyobj) {}
	SpaceView3D() : Space(0) { }

	Object camera() {
		CLASS_TYPES_GETTER(Object, "camera")
	}

	bool use_render_border() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_render_border")
	}

	void use_render_border(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_render_border", value)
	}

	float render_border_min_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "render_border_min_x")
	}

	void render_border_min_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "render_border_min_x", value)
	}

	float render_border_min_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "render_border_min_y")
	}

	void render_border_min_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "render_border_min_y", value)
	}

	float render_border_max_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "render_border_max_x")
	}

	void render_border_max_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "render_border_max_x", value)
	}

	float render_border_max_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "render_border_max_y")
	}

	void render_border_max_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "render_border_max_y", value)
	}

	Object lock_object() {
		CLASS_TYPES_GETTER(Object, "lock_object")
	}

	std::string lock_bone() {
		STRING_TYPE_GETTER("lock_bone", resstr)
	}

	void lock_bone(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "lock_bone", value)
	}

	bool lock_cursor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_cursor")
	}

	void lock_cursor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_cursor", value)
	}

	enum viewport_shade_items_enum {
		viewport_shade_items_BOUNDBOX = 1,	
		viewport_shade_items_WIREFRAME = 2,	
		viewport_shade_items_SOLID = 3,	
		viewport_shade_items_TEXTURED = 5,	
		viewport_shade_items_MATERIAL = 4,	
		viewport_shade_items_RENDERED = 6	
	};

	std::map<std::string, int> create_string_to_viewport_shade_items() {
		return {{"BOUNDBOX", viewport_shade_items_BOUNDBOX}, {"WIREFRAME", viewport_shade_items_WIREFRAME}, {"SOLID", viewport_shade_items_SOLID}, {"TEXTURED", viewport_shade_items_TEXTURED}, {"MATERIAL", viewport_shade_items_MATERIAL}, {"RENDERED", viewport_shade_items_RENDERED}};
	};

	std::map<int, std::string> create_viewport_shade_items_to_string() {
		return {{viewport_shade_items_BOUNDBOX, "BOUNDBOX"}, {viewport_shade_items_WIREFRAME, "WIREFRAME"}, {viewport_shade_items_SOLID, "SOLID"}, {viewport_shade_items_TEXTURED, "TEXTURED"}, {viewport_shade_items_MATERIAL, "MATERIAL"}, {viewport_shade_items_RENDERED, "RENDERED"}};
	};

	const std::map<std::string, int> string_to_viewport_shade_items = create_string_to_viewport_shade_items();
	const std::map<int, std::string> viewport_shade_items_to_string = create_viewport_shade_items_to_string();

	viewport_shade_items_enum viewport_shade() {
		STRING_TYPE_GETTER("viewport_shade", static_cast<viewport_shade_items_enum>(string_to_viewport_shade_items.at(resstr)))
	}

	void viewport_shade(viewport_shade_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "viewport_shade", viewport_shade_items_to_string.at(value))
	}

	SpaceView3D local_view() {
		CLASS_TYPES_GETTER(SpaceView3D, "local_view")
	}

	VFLOAT3 cursor_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor_location", 3)
	}

	void cursor_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor_location", 3)
	}

	float lens() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "lens")
	}

	void lens(float value) {
		PRIMITIVE_TYPES_SETTER("f", "lens", value)
	}

	float clip_start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_start")
	}

	void clip_start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_start", value)
	}

	float clip_end() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clip_end")
	}

	void clip_end(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clip_end", value)
	}

	float grid_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "grid_scale")
	}

	void grid_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "grid_scale", value)
	}

	int grid_lines() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grid_lines")
	}

	void grid_lines(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grid_lines", value)
	}

	int grid_subdivisions() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grid_subdivisions")
	}

	void grid_subdivisions(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grid_subdivisions", value)
	}

	float grid_scale_unit() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "grid_scale_unit")
	}

	void grid_scale_unit(float value) {
		PRIMITIVE_TYPES_SETTER("f", "grid_scale_unit", value)
	}

	bool show_floor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_floor")
	}

	void show_floor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_floor", value)
	}

	bool show_axis_x() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_axis_x")
	}

	void show_axis_x(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_axis_x", value)
	}

	bool show_axis_y() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_axis_y")
	}

	void show_axis_y(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_axis_y", value)
	}

	bool show_axis_z() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_axis_z")
	}

	void show_axis_z(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_axis_z", value)
	}

	bool show_outline_selected() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_outline_selected")
	}

	void show_outline_selected(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_outline_selected", value)
	}

	bool show_all_objects_origin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_all_objects_origin")
	}

	void show_all_objects_origin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_all_objects_origin", value)
	}

	bool show_relationship_lines() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_relationship_lines")
	}

	void show_relationship_lines(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_relationship_lines", value)
	}

	bool show_grease_pencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_grease_pencil")
	}

	void show_grease_pencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_grease_pencil", value)
	}

	bool show_textured_solid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_textured_solid")
	}

	void show_textured_solid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_textured_solid", value)
	}

	bool show_backface_culling() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_backface_culling")
	}

	void show_backface_culling(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_backface_culling", value)
	}

	bool show_textured_shadeless() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_textured_shadeless")
	}

	void show_textured_shadeless(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_textured_shadeless", value)
	}

	bool show_occlude_wire() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_occlude_wire")
	}

	void show_occlude_wire(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_occlude_wire", value)
	}

	bool lock_camera() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_camera")
	}

	void lock_camera(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_camera", value)
	}

	bool show_only_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_render")
	}

	void show_only_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_render", value)
	}

	bool show_world() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_world")
	}

	void show_world(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_world", value)
	}

	bool use_occlude_geometry() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_occlude_geometry")
	}

	void use_occlude_geometry(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_occlude_geometry", value)
	}

	std::map<std::string, BackgroundImage> background_images() {
		MAP_TYPE_GETTER("background_images", BackgroundImage)
	}

	bool show_background_images() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_background_images")
	}

	void show_background_images(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_background_images", value)
	}

	enum pivot_items_full_enum {
		pivot_items_full_BOUNDING_BOX_CENTER = 0,	
		pivot_items_full_CURSOR = 1,	
		pivot_items_full_INDIVIDUAL_ORIGINS = 2,	
		pivot_items_full_MEDIAN_POINT = 3,	
		pivot_items_full_ACTIVE_ELEMENT = 4	
	};

	std::map<std::string, int> create_string_to_pivot_items_full() {
		return {{"BOUNDING_BOX_CENTER", pivot_items_full_BOUNDING_BOX_CENTER}, {"CURSOR", pivot_items_full_CURSOR}, {"INDIVIDUAL_ORIGINS", pivot_items_full_INDIVIDUAL_ORIGINS}, {"MEDIAN_POINT", pivot_items_full_MEDIAN_POINT}, {"ACTIVE_ELEMENT", pivot_items_full_ACTIVE_ELEMENT}};
	};

	std::map<int, std::string> create_pivot_items_full_to_string() {
		return {{pivot_items_full_BOUNDING_BOX_CENTER, "BOUNDING_BOX_CENTER"}, {pivot_items_full_CURSOR, "CURSOR"}, {pivot_items_full_INDIVIDUAL_ORIGINS, "INDIVIDUAL_ORIGINS"}, {pivot_items_full_MEDIAN_POINT, "MEDIAN_POINT"}, {pivot_items_full_ACTIVE_ELEMENT, "ACTIVE_ELEMENT"}};
	};

	const std::map<std::string, int> string_to_pivot_items_full = create_string_to_pivot_items_full();
	const std::map<int, std::string> pivot_items_full_to_string = create_pivot_items_full_to_string();

	pivot_items_full_enum pivot_point() {
		STRING_TYPE_GETTER("pivot_point", static_cast<pivot_items_full_enum>(string_to_pivot_items_full.at(resstr)))
	}

	void pivot_point(pivot_items_full_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pivot_point", pivot_items_full_to_string.at(value))
	}

	bool use_pivot_point_align() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pivot_point_align")
	}

	void use_pivot_point_align(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pivot_point_align", value)
	}

	bool show_manipulator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_manipulator")
	}

	void show_manipulator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_manipulator", value)
	}

	enum manipulators_items_enum {
		manipulators_items_TRANSLATE = 1,	
		manipulators_items_ROTATE = 2,	
		manipulators_items_SCALE = 4	
	};

	std::map<std::string, int> create_string_to_manipulators_items() {
		return {{"TRANSLATE", manipulators_items_TRANSLATE}, {"ROTATE", manipulators_items_ROTATE}, {"SCALE", manipulators_items_SCALE}};
	};

	std::map<int, std::string> create_manipulators_items_to_string() {
		return {{manipulators_items_TRANSLATE, "TRANSLATE"}, {manipulators_items_ROTATE, "ROTATE"}, {manipulators_items_SCALE, "SCALE"}};
	};

	const std::map<std::string, int> string_to_manipulators_items = create_string_to_manipulators_items();
	const std::map<int, std::string> manipulators_items_to_string = create_manipulators_items_to_string();

	manipulators_items_enum transform_manipulators() {
		STRING_TYPE_GETTER("transform_manipulators", static_cast<manipulators_items_enum>(string_to_manipulators_items.at(resstr)))
	}

	void transform_manipulators(manipulators_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "transform_manipulators", manipulators_items_to_string.at(value))
	}

	enum transform_orientation_items_enum {
		transform_orientation_items_GLOBAL = 0,	
		transform_orientation_items_LOCAL = 1,	
		transform_orientation_items_NORMAL = 2,	
		transform_orientation_items_GIMBAL = 4,	
		transform_orientation_items_VIEW = 3	
	};

	std::map<std::string, int> create_string_to_transform_orientation_items() {
		return {{"GLOBAL", transform_orientation_items_GLOBAL}, {"LOCAL", transform_orientation_items_LOCAL}, {"NORMAL", transform_orientation_items_NORMAL}, {"GIMBAL", transform_orientation_items_GIMBAL}, {"VIEW", transform_orientation_items_VIEW}};
	};

	std::map<int, std::string> create_transform_orientation_items_to_string() {
		return {{transform_orientation_items_GLOBAL, "GLOBAL"}, {transform_orientation_items_LOCAL, "LOCAL"}, {transform_orientation_items_NORMAL, "NORMAL"}, {transform_orientation_items_GIMBAL, "GIMBAL"}, {transform_orientation_items_VIEW, "VIEW"}};
	};

	const std::map<std::string, int> string_to_transform_orientation_items = create_string_to_transform_orientation_items();
	const std::map<int, std::string> transform_orientation_items_to_string = create_transform_orientation_items_to_string();

	transform_orientation_items_enum transform_orientation() {
		STRING_TYPE_GETTER("transform_orientation", static_cast<transform_orientation_items_enum>(string_to_transform_orientation_items.at(resstr)))
	}

	void transform_orientation(transform_orientation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "transform_orientation", transform_orientation_items_to_string.at(value))
	}

	TransformOrientation current_orientation() {
		CLASS_TYPES_GETTER(TransformOrientation, "current_orientation")
	}

	bool lock_camera_and_layers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_camera_and_layers")
	}

	void lock_camera_and_layers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_camera_and_layers", value)
	}

	std::array<bool, 20> layers() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers", 20)
	}

	void layers(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers", 20)
	}

	std::array<bool, 8> layers_local_view() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_local_view", 8)
	}

	void layers_local_view(bool values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_local_view", 8)
	}

	std::array<bool, 20> layers_used() {
		PRIMITIVE_TYPES_ARRAY_GETTER(bool, PyLong_AsLong(item)==1, "layers_used", 20)
	}

	void layers_used(bool values[20]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "layers_used", 20)
	}

	RegionView3D region_3d();

	std::map<std::string, RegionView3D> region_quadviews();

	bool show_reconstruction() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_reconstruction")
	}

	void show_reconstruction(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_reconstruction", value)
	}

	float tracks_draw_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "tracks_draw_size")
	}

	void tracks_draw_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "tracks_draw_size", value)
	}

	enum bundle_drawtype_items_enum {
		bundle_drawtype_items_PLAIN_AXES = 2,	
		bundle_drawtype_items_ARROWS = 1,	
		bundle_drawtype_items_SINGLE_ARROW = 4,	
		bundle_drawtype_items_CIRCLE = 3,	
		bundle_drawtype_items_CUBE = 5,	
		bundle_drawtype_items_SPHERE = 6,	
		bundle_drawtype_items_CONE = 7	
	};

	std::map<std::string, int> create_string_to_bundle_drawtype_items() {
		return {{"PLAIN_AXES", bundle_drawtype_items_PLAIN_AXES}, {"ARROWS", bundle_drawtype_items_ARROWS}, {"SINGLE_ARROW", bundle_drawtype_items_SINGLE_ARROW}, {"CIRCLE", bundle_drawtype_items_CIRCLE}, {"CUBE", bundle_drawtype_items_CUBE}, {"SPHERE", bundle_drawtype_items_SPHERE}, {"CONE", bundle_drawtype_items_CONE}};
	};

	std::map<int, std::string> create_bundle_drawtype_items_to_string() {
		return {{bundle_drawtype_items_PLAIN_AXES, "PLAIN_AXES"}, {bundle_drawtype_items_ARROWS, "ARROWS"}, {bundle_drawtype_items_SINGLE_ARROW, "SINGLE_ARROW"}, {bundle_drawtype_items_CIRCLE, "CIRCLE"}, {bundle_drawtype_items_CUBE, "CUBE"}, {bundle_drawtype_items_SPHERE, "SPHERE"}, {bundle_drawtype_items_CONE, "CONE"}};
	};

	const std::map<std::string, int> string_to_bundle_drawtype_items = create_string_to_bundle_drawtype_items();
	const std::map<int, std::string> bundle_drawtype_items_to_string = create_bundle_drawtype_items_to_string();

	bundle_drawtype_items_enum tracks_draw_type() {
		STRING_TYPE_GETTER("tracks_draw_type", static_cast<bundle_drawtype_items_enum>(string_to_bundle_drawtype_items.at(resstr)))
	}

	void tracks_draw_type(bundle_drawtype_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "tracks_draw_type", bundle_drawtype_items_to_string.at(value))
	}

	bool show_camera_path() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_camera_path")
	}

	void show_camera_path(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_camera_path", value)
	}

	bool show_bundle_names() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_bundle_names")
	}

	void show_bundle_names(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_bundle_names", value)
	}

	bool use_matcap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_matcap")
	}

	void use_matcap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_matcap", value)
	}

	enum view3d_matcap_items_enum {
		view3d_matcap_items_01 = 812,	
		view3d_matcap_items_02 = 813,	
		view3d_matcap_items_03 = 814,	
		view3d_matcap_items_04 = 815,	
		view3d_matcap_items_05 = 816,	
		view3d_matcap_items_06 = 817,	
		view3d_matcap_items_07 = 818,	
		view3d_matcap_items_08 = 819,	
		view3d_matcap_items_09 = 820,	
		view3d_matcap_items_10 = 821,	
		view3d_matcap_items_11 = 822,	
		view3d_matcap_items_12 = 823,	
		view3d_matcap_items_13 = 824,	
		view3d_matcap_items_14 = 825,	
		view3d_matcap_items_15 = 826,	
		view3d_matcap_items_16 = 827,	
		view3d_matcap_items_17 = 828,	
		view3d_matcap_items_18 = 829,	
		view3d_matcap_items_19 = 830,	
		view3d_matcap_items_20 = 831,	
		view3d_matcap_items_21 = 832,	
		view3d_matcap_items_22 = 833,	
		view3d_matcap_items_23 = 834,	
		view3d_matcap_items_24 = 835	
	};

	std::map<std::string, int> create_string_to_view3d_matcap_items() {
		return {{"01", view3d_matcap_items_01}, {"02", view3d_matcap_items_02}, {"03", view3d_matcap_items_03}, {"04", view3d_matcap_items_04}, {"05", view3d_matcap_items_05}, {"06", view3d_matcap_items_06}, {"07", view3d_matcap_items_07}, {"08", view3d_matcap_items_08}, {"09", view3d_matcap_items_09}, {"10", view3d_matcap_items_10}, {"11", view3d_matcap_items_11}, {"12", view3d_matcap_items_12}, {"13", view3d_matcap_items_13}, {"14", view3d_matcap_items_14}, {"15", view3d_matcap_items_15}, {"16", view3d_matcap_items_16}, {"17", view3d_matcap_items_17}, {"18", view3d_matcap_items_18}, {"19", view3d_matcap_items_19}, {"20", view3d_matcap_items_20}, {"21", view3d_matcap_items_21}, {"22", view3d_matcap_items_22}, {"23", view3d_matcap_items_23}, {"24", view3d_matcap_items_24}};
	};

	std::map<int, std::string> create_view3d_matcap_items_to_string() {
		return {{view3d_matcap_items_01, "01"}, {view3d_matcap_items_02, "02"}, {view3d_matcap_items_03, "03"}, {view3d_matcap_items_04, "04"}, {view3d_matcap_items_05, "05"}, {view3d_matcap_items_06, "06"}, {view3d_matcap_items_07, "07"}, {view3d_matcap_items_08, "08"}, {view3d_matcap_items_09, "09"}, {view3d_matcap_items_10, "10"}, {view3d_matcap_items_11, "11"}, {view3d_matcap_items_12, "12"}, {view3d_matcap_items_13, "13"}, {view3d_matcap_items_14, "14"}, {view3d_matcap_items_15, "15"}, {view3d_matcap_items_16, "16"}, {view3d_matcap_items_17, "17"}, {view3d_matcap_items_18, "18"}, {view3d_matcap_items_19, "19"}, {view3d_matcap_items_20, "20"}, {view3d_matcap_items_21, "21"}, {view3d_matcap_items_22, "22"}, {view3d_matcap_items_23, "23"}, {view3d_matcap_items_24, "24"}};
	};

	const std::map<std::string, int> string_to_view3d_matcap_items = create_string_to_view3d_matcap_items();
	const std::map<int, std::string> view3d_matcap_items_to_string = create_view3d_matcap_items_to_string();

	view3d_matcap_items_enum matcap_icon() {
		STRING_TYPE_GETTER("matcap_icon", static_cast<view3d_matcap_items_enum>(string_to_view3d_matcap_items.at(resstr)))
	}

	void matcap_icon(view3d_matcap_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "matcap_icon", view3d_matcap_items_to_string.at(value))
	}

	GPUFXSettings fx_settings() {
		CLASS_TYPES_GETTER(GPUFXSettings, "fx_settings")
	}

	enum stereo3d_eye_items_enum {
		stereo3d_eye_items_LEFT_EYE = 0,	
		stereo3d_eye_items_RIGHT_EYE = 1	
	};

	std::map<std::string, int> create_string_to_stereo3d_eye_items() {
		return {{"LEFT_EYE", stereo3d_eye_items_LEFT_EYE}, {"RIGHT_EYE", stereo3d_eye_items_RIGHT_EYE}};
	};

	std::map<int, std::string> create_stereo3d_eye_items_to_string() {
		return {{stereo3d_eye_items_LEFT_EYE, "LEFT_EYE"}, {stereo3d_eye_items_RIGHT_EYE, "RIGHT_EYE"}};
	};

	const std::map<std::string, int> string_to_stereo3d_eye_items = create_string_to_stereo3d_eye_items();
	const std::map<int, std::string> stereo3d_eye_items_to_string = create_stereo3d_eye_items_to_string();

	stereo3d_eye_items_enum stereo_3d_eye() {
		STRING_TYPE_GETTER("stereo_3d_eye", static_cast<stereo3d_eye_items_enum>(string_to_stereo3d_eye_items.at(resstr)))
	}

	void stereo_3d_eye(stereo3d_eye_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "stereo_3d_eye", stereo3d_eye_items_to_string.at(value))
	}

	enum stereo3d_camera_items_enum {
		stereo3d_camera_items_LEFT = 0,	
		stereo3d_camera_items_RIGHT = 1,	
		stereo3d_camera_items_S3D = 2	
	};

	std::map<std::string, int> create_string_to_stereo3d_camera_items() {
		return {{"LEFT", stereo3d_camera_items_LEFT}, {"RIGHT", stereo3d_camera_items_RIGHT}, {"S3D", stereo3d_camera_items_S3D}};
	};

	std::map<int, std::string> create_stereo3d_camera_items_to_string() {
		return {{stereo3d_camera_items_LEFT, "LEFT"}, {stereo3d_camera_items_RIGHT, "RIGHT"}, {stereo3d_camera_items_S3D, "S3D"}};
	};

	const std::map<std::string, int> string_to_stereo3d_camera_items = create_string_to_stereo3d_camera_items();
	const std::map<int, std::string> stereo3d_camera_items_to_string = create_stereo3d_camera_items_to_string();

	stereo3d_camera_items_enum stereo_3d_camera() {
		STRING_TYPE_GETTER("stereo_3d_camera", static_cast<stereo3d_camera_items_enum>(string_to_stereo3d_camera_items.at(resstr)))
	}

	void stereo_3d_camera(stereo3d_camera_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "stereo_3d_camera", stereo3d_camera_items_to_string.at(value))
	}

	bool show_stereo_3d_cameras() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_stereo_3d_cameras")
	}

	void show_stereo_3d_cameras(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_stereo_3d_cameras", value)
	}

	bool show_stereo_3d_convergence_plane() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_stereo_3d_convergence_plane")
	}

	void show_stereo_3d_convergence_plane(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_stereo_3d_convergence_plane", value)
	}

	float stereo_3d_convergence_plane_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "stereo_3d_convergence_plane_alpha")
	}

	void stereo_3d_convergence_plane_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "stereo_3d_convergence_plane_alpha", value)
	}

	bool show_stereo_3d_volume() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_stereo_3d_volume")
	}

	void show_stereo_3d_volume(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_stereo_3d_volume", value)
	}

	float stereo_3d_volume_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "stereo_3d_volume_alpha")
	}

	void stereo_3d_volume_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "stereo_3d_volume_alpha", value)
	}
};

class RegionView3D : public pyUniplug {
public:
	RegionView3D(PyObject* pyobj) : pyUniplug(pyobj) {}
	RegionView3D() : pyUniplug(0) { }

	bool lock_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_rotation")
	}

	void lock_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_rotation", value)
	}

	bool show_sync_view() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sync_view")
	}

	void show_sync_view(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sync_view", value)
	}

	bool use_box_clip() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_box_clip")
	}

	void use_box_clip(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_box_clip", value)
	}

	VFLOAT16 perspective_matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "perspective_matrix", 16)
	}

	void perspective_matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "perspective_matrix", 16)
	}

	VFLOAT16 window_matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "window_matrix", 16)
	}

	void window_matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "window_matrix", 16)
	}

	VFLOAT16 view_matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_matrix", 16)
	}

	void view_matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_matrix", 16)
	}

	enum rv3d_persp_items_enum {
		rv3d_persp_items_PERSP = 1,	
		rv3d_persp_items_ORTHO = 0,	
		rv3d_persp_items_CAMERA = 2	
	};

	std::map<std::string, int> create_string_to_rv3d_persp_items() {
		return {{"PERSP", rv3d_persp_items_PERSP}, {"ORTHO", rv3d_persp_items_ORTHO}, {"CAMERA", rv3d_persp_items_CAMERA}};
	};

	std::map<int, std::string> create_rv3d_persp_items_to_string() {
		return {{rv3d_persp_items_PERSP, "PERSP"}, {rv3d_persp_items_ORTHO, "ORTHO"}, {rv3d_persp_items_CAMERA, "CAMERA"}};
	};

	const std::map<std::string, int> string_to_rv3d_persp_items = create_string_to_rv3d_persp_items();
	const std::map<int, std::string> rv3d_persp_items_to_string = create_rv3d_persp_items_to_string();

	rv3d_persp_items_enum view_perspective() {
		STRING_TYPE_GETTER("view_perspective", static_cast<rv3d_persp_items_enum>(string_to_rv3d_persp_items.at(resstr)))
	}

	void view_perspective(rv3d_persp_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_perspective", rv3d_persp_items_to_string.at(value))
	}

	bool is_perspective() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_perspective")
	}

	void is_perspective(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_perspective", value)
	}

	VFLOAT3 view_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_location", 3)
	}

	void view_location(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_location", 3)
	}

	VFLOAT4 view_rotation() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_rotation", 4)
	}

	void view_rotation(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_rotation", 4)
	}

	float view_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "view_distance")
	}

	void view_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "view_distance", value)
	}

	float view_camera_zoom() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "view_camera_zoom")
	}

	void view_camera_zoom(float value) {
		PRIMITIVE_TYPES_SETTER("f", "view_camera_zoom", value)
	}

	VFLOAT2 view_camera_offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_camera_offset", 2)
	}

	void view_camera_offset(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_camera_offset", 2)
	}

	void update() {
		PYTHON_FUNCTION_CALL("update")
	}
};

class SpaceProperties : public Space {
public:
	SpaceProperties(PyObject* pyobj) : Space(pyobj) {}
	SpaceProperties() : Space(0) { }

	enum buttons_context_items_enum {
		buttons_context_items_SCENE = 1,	
		buttons_context_items_RENDER = 0,	
		buttons_context_items_RENDER_LAYER = 13,	
		buttons_context_items_WORLD = 2,	
		buttons_context_items_OBJECT = 3,	
		buttons_context_items_CONSTRAINT = 11,	
		buttons_context_items_MODIFIER = 10,	
		buttons_context_items_DATA = 4,	
		buttons_context_items_BONE = 9,	
		buttons_context_items_BONE_CONSTRAINT = 12,	
		buttons_context_items_MATERIAL = 5,	
		buttons_context_items_TEXTURE = 6,	
		buttons_context_items_PARTICLES = 7,	
		buttons_context_items_PHYSICS = 8	
	};

	std::map<std::string, int> create_string_to_buttons_context_items() {
		return {{"SCENE", buttons_context_items_SCENE}, {"RENDER", buttons_context_items_RENDER}, {"RENDER_LAYER", buttons_context_items_RENDER_LAYER}, {"WORLD", buttons_context_items_WORLD}, {"OBJECT", buttons_context_items_OBJECT}, {"CONSTRAINT", buttons_context_items_CONSTRAINT}, {"MODIFIER", buttons_context_items_MODIFIER}, {"DATA", buttons_context_items_DATA}, {"BONE", buttons_context_items_BONE}, {"BONE_CONSTRAINT", buttons_context_items_BONE_CONSTRAINT}, {"MATERIAL", buttons_context_items_MATERIAL}, {"TEXTURE", buttons_context_items_TEXTURE}, {"PARTICLES", buttons_context_items_PARTICLES}, {"PHYSICS", buttons_context_items_PHYSICS}};
	};

	std::map<int, std::string> create_buttons_context_items_to_string() {
		return {{buttons_context_items_SCENE, "SCENE"}, {buttons_context_items_RENDER, "RENDER"}, {buttons_context_items_RENDER_LAYER, "RENDER_LAYER"}, {buttons_context_items_WORLD, "WORLD"}, {buttons_context_items_OBJECT, "OBJECT"}, {buttons_context_items_CONSTRAINT, "CONSTRAINT"}, {buttons_context_items_MODIFIER, "MODIFIER"}, {buttons_context_items_DATA, "DATA"}, {buttons_context_items_BONE, "BONE"}, {buttons_context_items_BONE_CONSTRAINT, "BONE_CONSTRAINT"}, {buttons_context_items_MATERIAL, "MATERIAL"}, {buttons_context_items_TEXTURE, "TEXTURE"}, {buttons_context_items_PARTICLES, "PARTICLES"}, {buttons_context_items_PHYSICS, "PHYSICS"}};
	};

	const std::map<std::string, int> string_to_buttons_context_items = create_string_to_buttons_context_items();
	const std::map<int, std::string> buttons_context_items_to_string = create_buttons_context_items_to_string();

	buttons_context_items_enum context() {
		STRING_TYPE_GETTER("context", static_cast<buttons_context_items_enum>(string_to_buttons_context_items.at(resstr)))
	}

	void context(buttons_context_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "context", buttons_context_items_to_string.at(value))
	}

	enum align_items_enum {
		align_items_HORIZONTAL = 1,	
		align_items_VERTICAL = 2	
	};

	std::map<std::string, int> create_string_to_align_items() {
		return {{"HORIZONTAL", align_items_HORIZONTAL}, {"VERTICAL", align_items_VERTICAL}};
	};

	std::map<int, std::string> create_align_items_to_string() {
		return {{align_items_HORIZONTAL, "HORIZONTAL"}, {align_items_VERTICAL, "VERTICAL"}};
	};

	const std::map<std::string, int> string_to_align_items = create_string_to_align_items();
	const std::map<int, std::string> align_items_to_string = create_align_items_to_string();

	align_items_enum align() {
		STRING_TYPE_GETTER("align", static_cast<align_items_enum>(string_to_align_items.at(resstr)))
	}

	void align(align_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "align", align_items_to_string.at(value))
	}

	enum buttons_texture_context_items_enum {
		buttons_texture_context_items_MATERIAL = 0,	
		buttons_texture_context_items_WORLD = 1,	
		buttons_texture_context_items_LAMP = 2,	
		buttons_texture_context_items_PARTICLES = 3,	
		buttons_texture_context_items_LINESTYLE = 5,	
		buttons_texture_context_items_OTHER = 4	
	};

	std::map<std::string, int> create_string_to_buttons_texture_context_items() {
		return {{"MATERIAL", buttons_texture_context_items_MATERIAL}, {"WORLD", buttons_texture_context_items_WORLD}, {"LAMP", buttons_texture_context_items_LAMP}, {"PARTICLES", buttons_texture_context_items_PARTICLES}, {"LINESTYLE", buttons_texture_context_items_LINESTYLE}, {"OTHER", buttons_texture_context_items_OTHER}};
	};

	std::map<int, std::string> create_buttons_texture_context_items_to_string() {
		return {{buttons_texture_context_items_MATERIAL, "MATERIAL"}, {buttons_texture_context_items_WORLD, "WORLD"}, {buttons_texture_context_items_LAMP, "LAMP"}, {buttons_texture_context_items_PARTICLES, "PARTICLES"}, {buttons_texture_context_items_LINESTYLE, "LINESTYLE"}, {buttons_texture_context_items_OTHER, "OTHER"}};
	};

	const std::map<std::string, int> string_to_buttons_texture_context_items = create_string_to_buttons_texture_context_items();
	const std::map<int, std::string> buttons_texture_context_items_to_string = create_buttons_texture_context_items_to_string();

	buttons_texture_context_items_enum texture_context() {
		STRING_TYPE_GETTER("texture_context", static_cast<buttons_texture_context_items_enum>(string_to_buttons_texture_context_items.at(resstr)))
	}

	void texture_context(buttons_texture_context_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_context", buttons_texture_context_items_to_string.at(value))
	}

	bool use_limited_texture_context() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_limited_texture_context")
	}

	void use_limited_texture_context(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_limited_texture_context", value)
	}

	ID pin_id() {
		CLASS_TYPES_GETTER(ID, "pin_id")
	}

	bool use_pin_id() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pin_id")
	}

	void use_pin_id(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pin_id", value)
	}
};

class SpaceDopeSheetEditor : public Space {
public:
	SpaceDopeSheetEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceDopeSheetEditor() : Space(0) { }

	Action action() {
		CLASS_TYPES_GETTER(Action, "action")
	}

	enum mode_items_enum {
		mode_items_DOPESHEET = 3,	
		mode_items_ACTION = 0,	
		mode_items_SHAPEKEY = 1,	
		mode_items_GPENCIL = 2,	
		mode_items_MASK = 4	
	};

	std::map<std::string, int> create_string_to_mode_items() {
		return {{"DOPESHEET", mode_items_DOPESHEET}, {"ACTION", mode_items_ACTION}, {"SHAPEKEY", mode_items_SHAPEKEY}, {"GPENCIL", mode_items_GPENCIL}, {"MASK", mode_items_MASK}};
	};

	std::map<int, std::string> create_mode_items_to_string() {
		return {{mode_items_DOPESHEET, "DOPESHEET"}, {mode_items_ACTION, "ACTION"}, {mode_items_SHAPEKEY, "SHAPEKEY"}, {mode_items_GPENCIL, "GPENCIL"}, {mode_items_MASK, "MASK"}};
	};

	const std::map<std::string, int> string_to_mode_items = create_string_to_mode_items();
	const std::map<int, std::string> mode_items_to_string = create_mode_items_to_string();

	mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<mode_items_enum>(string_to_mode_items.at(resstr)))
	}

	void mode(mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", mode_items_to_string.at(value))
	}

	bool show_seconds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_seconds")
	}

	void show_seconds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_seconds", value)
	}

	bool show_frame_indicator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_frame_indicator")
	}

	void show_frame_indicator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_frame_indicator", value)
	}

	bool show_sliders() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sliders")
	}

	void show_sliders(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sliders", value)
	}

	bool show_pose_markers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_pose_markers")
	}

	void show_pose_markers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_pose_markers", value)
	}

	bool show_group_colors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_group_colors")
	}

	void show_group_colors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_group_colors", value)
	}

	bool use_auto_merge_keyframes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_merge_keyframes")
	}

	void use_auto_merge_keyframes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_merge_keyframes", value)
	}

	bool use_realtime_update() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_realtime_update")
	}

	void use_realtime_update(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_realtime_update", value)
	}

	bool use_marker_sync() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_marker_sync")
	}

	void use_marker_sync(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_marker_sync", value)
	}

	DopeSheet dopesheet() {
		CLASS_TYPES_GETTER(DopeSheet, "dopesheet")
	}

	enum autosnap_items_enum {
		autosnap_items_NONE = 0,	
		autosnap_items_STEP = 1,	
		autosnap_items_TIME_STEP = 5,	
		autosnap_items_FRAME = 2,	
		autosnap_items_SECOND = 4,	
		autosnap_items_MARKER = 3	
	};

	std::map<std::string, int> create_string_to_autosnap_items() {
		return {{"NONE", autosnap_items_NONE}, {"STEP", autosnap_items_STEP}, {"TIME_STEP", autosnap_items_TIME_STEP}, {"FRAME", autosnap_items_FRAME}, {"SECOND", autosnap_items_SECOND}, {"MARKER", autosnap_items_MARKER}};
	};

	std::map<int, std::string> create_autosnap_items_to_string() {
		return {{autosnap_items_NONE, "NONE"}, {autosnap_items_STEP, "STEP"}, {autosnap_items_TIME_STEP, "TIME_STEP"}, {autosnap_items_FRAME, "FRAME"}, {autosnap_items_SECOND, "SECOND"}, {autosnap_items_MARKER, "MARKER"}};
	};

	const std::map<std::string, int> string_to_autosnap_items = create_string_to_autosnap_items();
	const std::map<int, std::string> autosnap_items_to_string = create_autosnap_items_to_string();

	autosnap_items_enum auto_snap() {
		STRING_TYPE_GETTER("auto_snap", static_cast<autosnap_items_enum>(string_to_autosnap_items.at(resstr)))
	}

	void auto_snap(autosnap_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "auto_snap", autosnap_items_to_string.at(value))
	}
};

class SpaceGraphEditor : public Space {
public:
	SpaceGraphEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceGraphEditor() : Space(0) { }

	enum mode_items_enum {
		mode_items_FCURVES = 0,	
		mode_items_DRIVERS = 1	
	};

	std::map<std::string, int> create_string_to_mode_items() {
		return {{"FCURVES", mode_items_FCURVES}, {"DRIVERS", mode_items_DRIVERS}};
	};

	std::map<int, std::string> create_mode_items_to_string() {
		return {{mode_items_FCURVES, "FCURVES"}, {mode_items_DRIVERS, "DRIVERS"}};
	};

	const std::map<std::string, int> string_to_mode_items = create_string_to_mode_items();
	const std::map<int, std::string> mode_items_to_string = create_mode_items_to_string();

	mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<mode_items_enum>(string_to_mode_items.at(resstr)))
	}

	void mode(mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", mode_items_to_string.at(value))
	}

	bool show_seconds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_seconds")
	}

	void show_seconds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_seconds", value)
	}

	bool show_frame_indicator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_frame_indicator")
	}

	void show_frame_indicator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_frame_indicator", value)
	}

	bool show_sliders() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sliders")
	}

	void show_sliders(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sliders", value)
	}

	bool show_handles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_handles")
	}

	void show_handles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_handles", value)
	}

	bool use_only_selected_curves_handles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_selected_curves_handles")
	}

	void use_only_selected_curves_handles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_selected_curves_handles", value)
	}

	bool use_only_selected_keyframe_handles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_only_selected_keyframe_handles")
	}

	void use_only_selected_keyframe_handles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_only_selected_keyframe_handles", value)
	}

	bool use_beauty_drawing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_beauty_drawing")
	}

	void use_beauty_drawing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_beauty_drawing", value)
	}

	bool show_group_colors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_group_colors")
	}

	void show_group_colors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_group_colors", value)
	}

	bool use_auto_merge_keyframes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_merge_keyframes")
	}

	void use_auto_merge_keyframes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_merge_keyframes", value)
	}

	bool use_realtime_update() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_realtime_update")
	}

	void use_realtime_update(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_realtime_update", value)
	}

	bool show_cursor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_cursor")
	}

	void show_cursor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_cursor", value)
	}

	float cursor_position_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cursor_position_y")
	}

	void cursor_position_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cursor_position_y", value)
	}

	enum gpivot_items_enum {
		gpivot_items_BOUNDING_BOX_CENTER = 0,	
		gpivot_items_CURSOR = 1,	
		gpivot_items_INDIVIDUAL_ORIGINS = 2	
	};

	std::map<std::string, int> create_string_to_gpivot_items() {
		return {{"BOUNDING_BOX_CENTER", gpivot_items_BOUNDING_BOX_CENTER}, {"CURSOR", gpivot_items_CURSOR}, {"INDIVIDUAL_ORIGINS", gpivot_items_INDIVIDUAL_ORIGINS}};
	};

	std::map<int, std::string> create_gpivot_items_to_string() {
		return {{gpivot_items_BOUNDING_BOX_CENTER, "BOUNDING_BOX_CENTER"}, {gpivot_items_CURSOR, "CURSOR"}, {gpivot_items_INDIVIDUAL_ORIGINS, "INDIVIDUAL_ORIGINS"}};
	};

	const std::map<std::string, int> string_to_gpivot_items = create_string_to_gpivot_items();
	const std::map<int, std::string> gpivot_items_to_string = create_gpivot_items_to_string();

	gpivot_items_enum pivot_point() {
		STRING_TYPE_GETTER("pivot_point", static_cast<gpivot_items_enum>(string_to_gpivot_items.at(resstr)))
	}

	void pivot_point(gpivot_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pivot_point", gpivot_items_to_string.at(value))
	}

	DopeSheet dopesheet() {
		CLASS_TYPES_GETTER(DopeSheet, "dopesheet")
	}

	enum autosnap_items_enum {
		autosnap_items_NONE = 0,	
		autosnap_items_STEP = 1,	
		autosnap_items_TIME_STEP = 5,	
		autosnap_items_FRAME = 2,	
		autosnap_items_SECOND = 4,	
		autosnap_items_MARKER = 3	
	};

	std::map<std::string, int> create_string_to_autosnap_items() {
		return {{"NONE", autosnap_items_NONE}, {"STEP", autosnap_items_STEP}, {"TIME_STEP", autosnap_items_TIME_STEP}, {"FRAME", autosnap_items_FRAME}, {"SECOND", autosnap_items_SECOND}, {"MARKER", autosnap_items_MARKER}};
	};

	std::map<int, std::string> create_autosnap_items_to_string() {
		return {{autosnap_items_NONE, "NONE"}, {autosnap_items_STEP, "STEP"}, {autosnap_items_TIME_STEP, "TIME_STEP"}, {autosnap_items_FRAME, "FRAME"}, {autosnap_items_SECOND, "SECOND"}, {autosnap_items_MARKER, "MARKER"}};
	};

	const std::map<std::string, int> string_to_autosnap_items = create_string_to_autosnap_items();
	const std::map<int, std::string> autosnap_items_to_string = create_autosnap_items_to_string();

	autosnap_items_enum auto_snap() {
		STRING_TYPE_GETTER("auto_snap", static_cast<autosnap_items_enum>(string_to_autosnap_items.at(resstr)))
	}

	void auto_snap(autosnap_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "auto_snap", autosnap_items_to_string.at(value))
	}

	bool has_ghost_curves() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_ghost_curves")
	}

	void has_ghost_curves(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_ghost_curves", value)
	}

	bool use_normalization() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normalization")
	}

	void use_normalization(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normalization", value)
	}

	bool use_auto_normalization() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_normalization")
	}

	void use_auto_normalization(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_normalization", value)
	}
};

class SpaceNLA : public Space {
public:
	SpaceNLA(PyObject* pyobj) : Space(pyobj) {}
	SpaceNLA() : Space(0) { }

	bool show_seconds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_seconds")
	}

	void show_seconds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_seconds", value)
	}

	bool show_frame_indicator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_frame_indicator")
	}

	void show_frame_indicator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_frame_indicator", value)
	}

	bool show_strip_curves() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_strip_curves")
	}

	void show_strip_curves(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_strip_curves", value)
	}

	bool use_realtime_update() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_realtime_update")
	}

	void use_realtime_update(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_realtime_update", value)
	}

	DopeSheet dopesheet() {
		CLASS_TYPES_GETTER(DopeSheet, "dopesheet")
	}

	enum autosnap_items_enum {
		autosnap_items_NONE = 0,	
		autosnap_items_STEP = 1,	
		autosnap_items_TIME_STEP = 5,	
		autosnap_items_FRAME = 2,	
		autosnap_items_SECOND = 4,	
		autosnap_items_MARKER = 3	
	};

	std::map<std::string, int> create_string_to_autosnap_items() {
		return {{"NONE", autosnap_items_NONE}, {"STEP", autosnap_items_STEP}, {"TIME_STEP", autosnap_items_TIME_STEP}, {"FRAME", autosnap_items_FRAME}, {"SECOND", autosnap_items_SECOND}, {"MARKER", autosnap_items_MARKER}};
	};

	std::map<int, std::string> create_autosnap_items_to_string() {
		return {{autosnap_items_NONE, "NONE"}, {autosnap_items_STEP, "STEP"}, {autosnap_items_TIME_STEP, "TIME_STEP"}, {autosnap_items_FRAME, "FRAME"}, {autosnap_items_SECOND, "SECOND"}, {autosnap_items_MARKER, "MARKER"}};
	};

	const std::map<std::string, int> string_to_autosnap_items = create_string_to_autosnap_items();
	const std::map<int, std::string> autosnap_items_to_string = create_autosnap_items_to_string();

	autosnap_items_enum auto_snap() {
		STRING_TYPE_GETTER("auto_snap", static_cast<autosnap_items_enum>(string_to_autosnap_items.at(resstr)))
	}

	void auto_snap(autosnap_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "auto_snap", autosnap_items_to_string.at(value))
	}
};

class SpaceTimeline : public Space {
public:
	SpaceTimeline(PyObject* pyobj) : Space(pyobj) {}
	SpaceTimeline() : Space(0) { }

	bool show_frame_indicator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_frame_indicator")
	}

	void show_frame_indicator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_frame_indicator", value)
	}

	bool show_seconds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_seconds")
	}

	void show_seconds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_seconds", value)
	}

	bool show_cache() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_cache")
	}

	void show_cache(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_cache", value)
	}

	bool cache_softbody() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "cache_softbody")
	}

	void cache_softbody(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "cache_softbody", value)
	}

	bool cache_particles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "cache_particles")
	}

	void cache_particles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "cache_particles", value)
	}

	bool cache_cloth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "cache_cloth")
	}

	void cache_cloth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "cache_cloth", value)
	}

	bool cache_smoke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "cache_smoke")
	}

	void cache_smoke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "cache_smoke", value)
	}

	bool cache_dynamicpaint() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "cache_dynamicpaint")
	}

	void cache_dynamicpaint(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "cache_dynamicpaint", value)
	}

	bool cache_rigidbody() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "cache_rigidbody")
	}

	void cache_rigidbody(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "cache_rigidbody", value)
	}
};

class SpaceConsole : public Space {
public:
	SpaceConsole(PyObject* pyobj) : Space(pyobj) {}
	SpaceConsole() : Space(0) { }

	int font_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "font_size")
	}

	void font_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "font_size", value)
	}

	int select_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "select_start")
	}

	void select_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "select_start", value)
	}

	int select_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "select_end")
	}

	void select_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "select_end", value)
	}

	std::string prompt() {
		STRING_TYPE_GETTER("prompt", resstr)
	}

	void prompt(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "prompt", value)
	}

	std::string language() {
		STRING_TYPE_GETTER("language", resstr)
	}

	void language(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "language", value)
	}

	std::map<std::string, ConsoleLine> history();

	std::map<std::string, ConsoleLine> scrollback();
};

class ConsoleLine : public pyUniplug {
public:
	ConsoleLine(PyObject* pyobj) : pyUniplug(pyobj) {}
	ConsoleLine() : pyUniplug(0) { }

	std::string body() {
		STRING_TYPE_GETTER("body", resstr)
	}

	void body(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "body", value)
	}

	int current_character() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "current_character")
	}

	void current_character(int value) {
		PRIMITIVE_TYPES_SETTER("i", "current_character", value)
	}

	enum console_line_type_items_enum {
		console_line_type_items_OUTPUT = 0,	
		console_line_type_items_INPUT = 1,	
		console_line_type_items_INFO = 2,	
		console_line_type_items_ERROR = 3	
	};

	std::map<std::string, int> create_string_to_console_line_type_items() {
		return {{"OUTPUT", console_line_type_items_OUTPUT}, {"INPUT", console_line_type_items_INPUT}, {"INFO", console_line_type_items_INFO}, {"ERROR", console_line_type_items_ERROR}};
	};

	std::map<int, std::string> create_console_line_type_items_to_string() {
		return {{console_line_type_items_OUTPUT, "OUTPUT"}, {console_line_type_items_INPUT, "INPUT"}, {console_line_type_items_INFO, "INFO"}, {console_line_type_items_ERROR, "ERROR"}};
	};

	const std::map<std::string, int> string_to_console_line_type_items = create_string_to_console_line_type_items();
	const std::map<int, std::string> console_line_type_items_to_string = create_console_line_type_items_to_string();

	console_line_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<console_line_type_items_enum>(string_to_console_line_type_items.at(resstr)))
	}

	void type(console_line_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", console_line_type_items_to_string.at(value))
	}
};

class SpaceInfo : public Space {
public:
	SpaceInfo(PyObject* pyobj) : Space(pyobj) {}
	SpaceInfo() : Space(0) { }

	bool show_report_debug() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_report_debug")
	}

	void show_report_debug(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_report_debug", value)
	}

	bool show_report_info() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_report_info")
	}

	void show_report_info(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_report_info", value)
	}

	bool show_report_operator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_report_operator")
	}

	void show_report_operator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_report_operator", value)
	}

	bool show_report_warning() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_report_warning")
	}

	void show_report_warning(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_report_warning", value)
	}

	bool show_report_error() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_report_error")
	}

	void show_report_error(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_report_error", value)
	}
};

class SpaceUserPreferences : public Space {
public:
	SpaceUserPreferences(PyObject* pyobj) : Space(pyobj) {}
	SpaceUserPreferences() : Space(0) { }

	enum filter_type_items_enum {
		filter_type_items_NAME = 0,	
		filter_type_items_KEY = 1	
	};

	std::map<std::string, int> create_string_to_filter_type_items() {
		return {{"NAME", filter_type_items_NAME}, {"KEY", filter_type_items_KEY}};
	};

	std::map<int, std::string> create_filter_type_items_to_string() {
		return {{filter_type_items_NAME, "NAME"}, {filter_type_items_KEY, "KEY"}};
	};

	const std::map<std::string, int> string_to_filter_type_items = create_string_to_filter_type_items();
	const std::map<int, std::string> filter_type_items_to_string = create_filter_type_items_to_string();

	filter_type_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<filter_type_items_enum>(string_to_filter_type_items.at(resstr)))
	}

	void filter_type(filter_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", filter_type_items_to_string.at(value))
	}

	std::string filter_text() {
		STRING_TYPE_GETTER("filter_text", resstr)
	}

	void filter_text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_text", value)
	}
};

class NodeTreePath : public pyUniplug {
public:
	NodeTreePath(PyObject* pyobj) : pyUniplug(pyobj) {}
	NodeTreePath() : pyUniplug(0) { }

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}
};

class SpaceNodeEditor : public Space {
public:
	SpaceNodeEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceNodeEditor() : Space(0) { }

	enum dummy_items_enum {
		dummy_items_DUMMY = 0	
	};

	std::map<std::string, int> create_string_to_dummy_items() {
		return {{"DUMMY", dummy_items_DUMMY}};
	};

	std::map<int, std::string> create_dummy_items_to_string() {
		return {{dummy_items_DUMMY, "DUMMY"}};
	};

	const std::map<std::string, int> string_to_dummy_items = create_string_to_dummy_items();
	const std::map<int, std::string> dummy_items_to_string = create_dummy_items_to_string();

	dummy_items_enum tree_type() {
		STRING_TYPE_GETTER("tree_type", static_cast<dummy_items_enum>(string_to_dummy_items.at(resstr)))
	}

	void tree_type(dummy_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "tree_type", dummy_items_to_string.at(value))
	}

	enum texture_type_items_enum {
		texture_type_items_OBJECT = 0,	
		texture_type_items_WORLD = 1,	
		texture_type_items_BRUSH = 2,	
		texture_type_items_LINESTYLE = 3	
	};

	std::map<std::string, int> create_string_to_texture_type_items() {
		return {{"OBJECT", texture_type_items_OBJECT}, {"WORLD", texture_type_items_WORLD}, {"BRUSH", texture_type_items_BRUSH}, {"LINESTYLE", texture_type_items_LINESTYLE}};
	};

	std::map<int, std::string> create_texture_type_items_to_string() {
		return {{texture_type_items_OBJECT, "OBJECT"}, {texture_type_items_WORLD, "WORLD"}, {texture_type_items_BRUSH, "BRUSH"}, {texture_type_items_LINESTYLE, "LINESTYLE"}};
	};

	const std::map<std::string, int> string_to_texture_type_items = create_string_to_texture_type_items();
	const std::map<int, std::string> texture_type_items_to_string = create_texture_type_items_to_string();

	texture_type_items_enum texture_type() {
		STRING_TYPE_GETTER("texture_type", static_cast<texture_type_items_enum>(string_to_texture_type_items.at(resstr)))
	}

	void texture_type(texture_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_type", texture_type_items_to_string.at(value))
	}

	enum shader_type_items_enum {
		shader_type_items_OBJECT = 0,	
		shader_type_items_WORLD = 1,	
		shader_type_items_LINESTYLE = 2	
	};

	std::map<std::string, int> create_string_to_shader_type_items() {
		return {{"OBJECT", shader_type_items_OBJECT}, {"WORLD", shader_type_items_WORLD}, {"LINESTYLE", shader_type_items_LINESTYLE}};
	};

	std::map<int, std::string> create_shader_type_items_to_string() {
		return {{shader_type_items_OBJECT, "OBJECT"}, {shader_type_items_WORLD, "WORLD"}, {shader_type_items_LINESTYLE, "LINESTYLE"}};
	};

	const std::map<std::string, int> string_to_shader_type_items = create_string_to_shader_type_items();
	const std::map<int, std::string> shader_type_items_to_string = create_shader_type_items_to_string();

	shader_type_items_enum shader_type() {
		STRING_TYPE_GETTER("shader_type", static_cast<shader_type_items_enum>(string_to_shader_type_items.at(resstr)))
	}

	void shader_type(shader_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "shader_type", shader_type_items_to_string.at(value))
	}

	ID id() {
		CLASS_TYPES_GETTER(ID, "id")
	}

	ID id_from() {
		CLASS_TYPES_GETTER(ID, "id_from")
	}

	std::map<std::string, NodeTreePath> path() {
		MAP_TYPE_GETTER("path", NodeTreePath)
	}

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	NodeTree edit_tree() {
		CLASS_TYPES_GETTER(NodeTree, "edit_tree")
	}

	bool pin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "pin")
	}

	void pin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "pin", value)
	}

	bool show_backdrop() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_backdrop")
	}

	void show_backdrop(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_backdrop", value)
	}

	bool show_grease_pencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_grease_pencil")
	}

	void show_grease_pencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_grease_pencil", value)
	}

	bool use_auto_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_render")
	}

	void use_auto_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_render", value)
	}

	float backdrop_zoom() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "backdrop_zoom")
	}

	void backdrop_zoom(float value) {
		PRIMITIVE_TYPES_SETTER("f", "backdrop_zoom", value)
	}

	float backdrop_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "backdrop_x")
	}

	void backdrop_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "backdrop_x", value)
	}

	float backdrop_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "backdrop_y")
	}

	void backdrop_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "backdrop_y", value)
	}

	enum backdrop_channels_items_enum {
		backdrop_channels_items_COLOR_ALPHA = 8,	
		backdrop_channels_items_COLOR = 0,	
		backdrop_channels_items_ALPHA = 16,	
		backdrop_channels_items_RED = 128,	
		backdrop_channels_items_GREEN = 256,	
		backdrop_channels_items_BLUE = 512	
	};

	std::map<std::string, int> create_string_to_backdrop_channels_items() {
		return {{"COLOR_ALPHA", backdrop_channels_items_COLOR_ALPHA}, {"COLOR", backdrop_channels_items_COLOR}, {"ALPHA", backdrop_channels_items_ALPHA}, {"RED", backdrop_channels_items_RED}, {"GREEN", backdrop_channels_items_GREEN}, {"BLUE", backdrop_channels_items_BLUE}};
	};

	std::map<int, std::string> create_backdrop_channels_items_to_string() {
		return {{backdrop_channels_items_COLOR_ALPHA, "COLOR_ALPHA"}, {backdrop_channels_items_COLOR, "COLOR"}, {backdrop_channels_items_ALPHA, "ALPHA"}, {backdrop_channels_items_RED, "RED"}, {backdrop_channels_items_GREEN, "GREEN"}, {backdrop_channels_items_BLUE, "BLUE"}};
	};

	const std::map<std::string, int> string_to_backdrop_channels_items = create_string_to_backdrop_channels_items();
	const std::map<int, std::string> backdrop_channels_items_to_string = create_backdrop_channels_items_to_string();

	backdrop_channels_items_enum backdrop_channels() {
		STRING_TYPE_GETTER("backdrop_channels", static_cast<backdrop_channels_items_enum>(string_to_backdrop_channels_items.at(resstr)))
	}

	void backdrop_channels(backdrop_channels_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "backdrop_channels", backdrop_channels_items_to_string.at(value))
	}

	bool show_highlight() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_highlight")
	}

	void show_highlight(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_highlight", value)
	}

	VFLOAT2 cursor_location() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor_location", 2)
	}

	void cursor_location(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor_location", 2)
	}

	void cursor_location_from_region(int x, int y) {
		PYTHON_FUNCTION_ARGS_CALL("cursor_location_from_region", "ii", x, y)
	}
};

class SpaceLogicEditor : public Space {
public:
	SpaceLogicEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceLogicEditor() : Space(0) { }

	bool show_sensors_selected_objects() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sensors_selected_objects")
	}

	void show_sensors_selected_objects(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sensors_selected_objects", value)
	}

	bool show_sensors_active_object() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sensors_active_object")
	}

	void show_sensors_active_object(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sensors_active_object", value)
	}

	bool show_sensors_linked_controller() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sensors_linked_controller")
	}

	void show_sensors_linked_controller(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sensors_linked_controller", value)
	}

	bool show_sensors_active_states() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_sensors_active_states")
	}

	void show_sensors_active_states(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_sensors_active_states", value)
	}

	bool show_controllers_selected_objects() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_controllers_selected_objects")
	}

	void show_controllers_selected_objects(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_controllers_selected_objects", value)
	}

	bool show_controllers_active_object() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_controllers_active_object")
	}

	void show_controllers_active_object(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_controllers_active_object", value)
	}

	bool show_controllers_linked_controller() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_controllers_linked_controller")
	}

	void show_controllers_linked_controller(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_controllers_linked_controller", value)
	}

	bool show_actuators_selected_objects() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_actuators_selected_objects")
	}

	void show_actuators_selected_objects(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_actuators_selected_objects", value)
	}

	bool show_actuators_active_object() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_actuators_active_object")
	}

	void show_actuators_active_object(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_actuators_active_object", value)
	}

	bool show_actuators_linked_controller() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_actuators_linked_controller")
	}

	void show_actuators_linked_controller(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_actuators_linked_controller", value)
	}

	bool show_actuators_active_states() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_actuators_active_states")
	}

	void show_actuators_active_states(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_actuators_active_states", value)
	}
};

class SpaceClipEditor : public Space {
public:
	SpaceClipEditor(PyObject* pyobj) : Space(pyobj) {}
	SpaceClipEditor() : Space(0) { }

	MovieClip clip();

	MovieClipUser clip_user();

	Mask mask();

	enum dt_uv_items_enum {
		dt_uv_items_OUTLINE = 0,	
		dt_uv_items_DASH = 1,	
		dt_uv_items_BLACK = 2,	
		dt_uv_items_WHITE = 3	
	};

	std::map<std::string, int> create_string_to_dt_uv_items() {
		return {{"OUTLINE", dt_uv_items_OUTLINE}, {"DASH", dt_uv_items_DASH}, {"BLACK", dt_uv_items_BLACK}, {"WHITE", dt_uv_items_WHITE}};
	};

	std::map<int, std::string> create_dt_uv_items_to_string() {
		return {{dt_uv_items_OUTLINE, "OUTLINE"}, {dt_uv_items_DASH, "DASH"}, {dt_uv_items_BLACK, "BLACK"}, {dt_uv_items_WHITE, "WHITE"}};
	};

	const std::map<std::string, int> string_to_dt_uv_items = create_string_to_dt_uv_items();
	const std::map<int, std::string> dt_uv_items_to_string = create_dt_uv_items_to_string();

	dt_uv_items_enum mask_draw_type() {
		STRING_TYPE_GETTER("mask_draw_type", static_cast<dt_uv_items_enum>(string_to_dt_uv_items.at(resstr)))
	}

	void mask_draw_type(dt_uv_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_draw_type", dt_uv_items_to_string.at(value))
	}

	bool show_mask_smooth() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_mask_smooth")
	}

	void show_mask_smooth(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_mask_smooth", value)
	}

	bool show_mask_overlay() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_mask_overlay")
	}

	void show_mask_overlay(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_mask_overlay", value)
	}

	enum overlay_mode_items_enum {
		overlay_mode_items_ALPHACHANNEL = 0,	
		overlay_mode_items_COMBINED = 1	
	};

	std::map<std::string, int> create_string_to_overlay_mode_items() {
		return {{"ALPHACHANNEL", overlay_mode_items_ALPHACHANNEL}, {"COMBINED", overlay_mode_items_COMBINED}};
	};

	std::map<int, std::string> create_overlay_mode_items_to_string() {
		return {{overlay_mode_items_ALPHACHANNEL, "ALPHACHANNEL"}, {overlay_mode_items_COMBINED, "COMBINED"}};
	};

	const std::map<std::string, int> string_to_overlay_mode_items = create_string_to_overlay_mode_items();
	const std::map<int, std::string> overlay_mode_items_to_string = create_overlay_mode_items_to_string();

	overlay_mode_items_enum mask_overlay_mode() {
		STRING_TYPE_GETTER("mask_overlay_mode", static_cast<overlay_mode_items_enum>(string_to_overlay_mode_items.at(resstr)))
	}

	void mask_overlay_mode(overlay_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mask_overlay_mode", overlay_mode_items_to_string.at(value))
	}

	enum clip_editor_mode_items_enum {
		clip_editor_mode_items_TRACKING = 0,	
		clip_editor_mode_items_MASK = 3	
	};

	std::map<std::string, int> create_string_to_clip_editor_mode_items() {
		return {{"TRACKING", clip_editor_mode_items_TRACKING}, {"MASK", clip_editor_mode_items_MASK}};
	};

	std::map<int, std::string> create_clip_editor_mode_items_to_string() {
		return {{clip_editor_mode_items_TRACKING, "TRACKING"}, {clip_editor_mode_items_MASK, "MASK"}};
	};

	const std::map<std::string, int> string_to_clip_editor_mode_items = create_string_to_clip_editor_mode_items();
	const std::map<int, std::string> clip_editor_mode_items_to_string = create_clip_editor_mode_items_to_string();

	clip_editor_mode_items_enum mode() {
		STRING_TYPE_GETTER("mode", static_cast<clip_editor_mode_items_enum>(string_to_clip_editor_mode_items.at(resstr)))
	}

	void mode(clip_editor_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "mode", clip_editor_mode_items_to_string.at(value))
	}

	enum view_items_enum {
		view_items_CLIP = 0,	
		view_items_GRAPH = 1,	
		view_items_DOPESHEET = 2	
	};

	std::map<std::string, int> create_string_to_view_items() {
		return {{"CLIP", view_items_CLIP}, {"GRAPH", view_items_GRAPH}, {"DOPESHEET", view_items_DOPESHEET}};
	};

	std::map<int, std::string> create_view_items_to_string() {
		return {{view_items_CLIP, "CLIP"}, {view_items_GRAPH, "GRAPH"}, {view_items_DOPESHEET, "DOPESHEET"}};
	};

	const std::map<std::string, int> string_to_view_items = create_string_to_view_items();
	const std::map<int, std::string> view_items_to_string = create_view_items_to_string();

	view_items_enum view() {
		STRING_TYPE_GETTER("view", static_cast<view_items_enum>(string_to_view_items.at(resstr)))
	}

	void view(view_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view", view_items_to_string.at(value))
	}

	bool show_marker_pattern() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_marker_pattern")
	}

	void show_marker_pattern(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_marker_pattern", value)
	}

	bool show_marker_search() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_marker_search")
	}

	void show_marker_search(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_marker_search", value)
	}

	bool lock_selection() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_selection")
	}

	void lock_selection(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_selection", value)
	}

	bool lock_time_cursor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock_time_cursor")
	}

	void lock_time_cursor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock_time_cursor", value)
	}

	bool show_track_path() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_track_path")
	}

	void show_track_path(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_track_path", value)
	}

	int path_length() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "path_length")
	}

	void path_length(int value) {
		PRIMITIVE_TYPES_SETTER("i", "path_length", value)
	}

	bool show_tiny_markers() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_tiny_markers")
	}

	void show_tiny_markers(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_tiny_markers", value)
	}

	bool show_bundles() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_bundles")
	}

	void show_bundles(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_bundles", value)
	}

	bool use_mute_footage() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mute_footage")
	}

	void use_mute_footage(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mute_footage", value)
	}

	bool show_disabled() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_disabled")
	}

	void show_disabled(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_disabled", value)
	}

	bool show_metadata() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_metadata")
	}

	void show_metadata(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_metadata", value)
	}

	MovieClipScopes scopes();

	bool show_names() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_names")
	}

	void show_names(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_names", value)
	}

	bool show_grid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_grid")
	}

	void show_grid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_grid", value)
	}

	bool show_stable() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_stable")
	}

	void show_stable(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_stable", value)
	}

	bool use_manual_calibration() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_manual_calibration")
	}

	void use_manual_calibration(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_manual_calibration", value)
	}

	bool show_grease_pencil() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_grease_pencil")
	}

	void show_grease_pencil(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_grease_pencil", value)
	}

	bool show_filters() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_filters")
	}

	void show_filters(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_filters", value)
	}

	bool show_graph_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_graph_frames")
	}

	void show_graph_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_graph_frames", value)
	}

	bool show_graph_tracks_motion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_graph_tracks_motion")
	}

	void show_graph_tracks_motion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_graph_tracks_motion", value)
	}

	bool show_graph_tracks_error() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_graph_tracks_error")
	}

	void show_graph_tracks_error(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_graph_tracks_error", value)
	}

	bool show_graph_only_selected() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_graph_only_selected")
	}

	void show_graph_only_selected(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_graph_only_selected", value)
	}

	bool show_graph_hidden() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_graph_hidden")
	}

	void show_graph_hidden(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_graph_hidden", value)
	}

	bool show_red_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_red_channel")
	}

	void show_red_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_red_channel", value)
	}

	bool show_green_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_green_channel")
	}

	void show_green_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_green_channel", value)
	}

	bool show_blue_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_blue_channel")
	}

	void show_blue_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_blue_channel", value)
	}

	bool use_grayscale_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_grayscale_preview")
	}

	void use_grayscale_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_grayscale_preview", value)
	}

	bool show_seconds() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_seconds")
	}

	void show_seconds(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_seconds", value)
	}

	enum gpencil_source_items_enum {
		gpencil_source_items_CLIP = 0,	
		gpencil_source_items_TRACK = 1	
	};

	std::map<std::string, int> create_string_to_gpencil_source_items() {
		return {{"CLIP", gpencil_source_items_CLIP}, {"TRACK", gpencil_source_items_TRACK}};
	};

	std::map<int, std::string> create_gpencil_source_items_to_string() {
		return {{gpencil_source_items_CLIP, "CLIP"}, {gpencil_source_items_TRACK, "TRACK"}};
	};

	const std::map<std::string, int> string_to_gpencil_source_items = create_string_to_gpencil_source_items();
	const std::map<int, std::string> gpencil_source_items_to_string = create_gpencil_source_items_to_string();

	gpencil_source_items_enum grease_pencil_source() {
		STRING_TYPE_GETTER("grease_pencil_source", static_cast<gpencil_source_items_enum>(string_to_gpencil_source_items.at(resstr)))
	}

	void grease_pencil_source(gpencil_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "grease_pencil_source", gpencil_source_items_to_string.at(value))
	}

	enum pivot_items_enum {
		pivot_items_BOUNDING_BOX_CENTER = 0,	
		pivot_items_CURSOR = 1,	
		pivot_items_INDIVIDUAL_ORIGINS = 2,	
		pivot_items_MEDIAN_POINT = 3	
	};

	std::map<std::string, int> create_string_to_pivot_items() {
		return {{"BOUNDING_BOX_CENTER", pivot_items_BOUNDING_BOX_CENTER}, {"CURSOR", pivot_items_CURSOR}, {"INDIVIDUAL_ORIGINS", pivot_items_INDIVIDUAL_ORIGINS}, {"MEDIAN_POINT", pivot_items_MEDIAN_POINT}};
	};

	std::map<int, std::string> create_pivot_items_to_string() {
		return {{pivot_items_BOUNDING_BOX_CENTER, "BOUNDING_BOX_CENTER"}, {pivot_items_CURSOR, "CURSOR"}, {pivot_items_INDIVIDUAL_ORIGINS, "INDIVIDUAL_ORIGINS"}, {pivot_items_MEDIAN_POINT, "MEDIAN_POINT"}};
	};

	const std::map<std::string, int> string_to_pivot_items = create_string_to_pivot_items();
	const std::map<int, std::string> pivot_items_to_string = create_pivot_items_to_string();

	pivot_items_enum pivot_point() {
		STRING_TYPE_GETTER("pivot_point", static_cast<pivot_items_enum>(string_to_pivot_items.at(resstr)))
	}

	void pivot_point(pivot_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pivot_point", pivot_items_to_string.at(value))
	}
};

class Speaker : public ID {
public:
	Speaker(PyObject* pyobj) : ID(pyobj) {}
	Speaker() : ID(0) { }

	bool muted() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "muted")
	}

	void muted(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "muted", value)
	}

	bool relative() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "relative")
	}

	void relative(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "relative", value)
	}

	Sound sound();

	float volume_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume_max")
	}

	void volume_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume_max", value)
	}

	float volume_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume_min")
	}

	void volume_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume_min", value)
	}

	float distance_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_max")
	}

	void distance_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_max", value)
	}

	float distance_reference() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance_reference")
	}

	void distance_reference(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance_reference", value)
	}

	float attenuation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "attenuation")
	}

	void attenuation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "attenuation", value)
	}

	float cone_angle_outer() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cone_angle_outer")
	}

	void cone_angle_outer(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cone_angle_outer", value)
	}

	float cone_angle_inner() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cone_angle_inner")
	}

	void cone_angle_inner(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cone_angle_inner", value)
	}

	float cone_volume_outer() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "cone_volume_outer")
	}

	void cone_volume_outer(float value) {
		PRIMITIVE_TYPES_SETTER("f", "cone_volume_outer", value)
	}

	float volume() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "volume")
	}

	void volume(float value) {
		PRIMITIVE_TYPES_SETTER("f", "volume", value)
	}

	float pitch() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pitch")
	}

	void pitch(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pitch", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}
};

class TextLine : public pyUniplug {
public:
	TextLine(PyObject* pyobj) : pyUniplug(pyobj) {}
	TextLine() : pyUniplug(0) { }

	std::string body() {
		STRING_TYPE_GETTER("body", resstr)
	}

	void body(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "body", value)
	}
};

class Text : public ID {
public:
	Text(PyObject* pyobj) : ID(pyobj) {}
	Text() : ID(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	bool is_dirty() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_dirty")
	}

	void is_dirty(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_dirty", value)
	}

	bool is_modified() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_modified")
	}

	void is_modified(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_modified", value)
	}

	bool is_in_memory() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_in_memory")
	}

	void is_in_memory(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_in_memory", value)
	}

	bool use_module() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_module")
	}

	void use_module(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_module", value)
	}

	bool use_tabs_as_spaces() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tabs_as_spaces")
	}

	void use_tabs_as_spaces(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tabs_as_spaces", value)
	}

	std::map<std::string, TextLine> lines() {
		MAP_TYPE_GETTER("lines", TextLine)
	}

	TextLine current_line() {
		CLASS_TYPES_GETTER(TextLine, "current_line")
	}

	int current_character() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "current_character")
	}

	void current_character(int value) {
		PRIMITIVE_TYPES_SETTER("i", "current_character", value)
	}

	int current_line_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "current_line_index")
	}

	void current_line_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "current_line_index", value)
	}

	TextLine select_end_line() {
		CLASS_TYPES_GETTER(TextLine, "select_end_line")
	}

	int select_end_character() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "select_end_character")
	}

	void select_end_character(int value) {
		PRIMITIVE_TYPES_SETTER("i", "select_end_character", value)
	}

	void clear() {
		PYTHON_FUNCTION_CALL("clear")
	}

	void write(const std::string text) {
		PYTHON_FUNCTION_ARGS_CALL("write", "s", text)
	}
};

class TimelineMarker : public pyUniplug {
public:
	TimelineMarker(PyObject* pyobj) : pyUniplug(pyobj) {}
	TimelineMarker() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	int frame() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame")
	}

	void frame(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	Object camera() {
		CLASS_TYPES_GETTER(Object, "camera")
	}
};

class Sound : public ID {
public:
	Sound(PyObject* pyobj) : ID(pyobj) {}
	Sound() : ID(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	PackedFile packed_file() {
		CLASS_TYPES_GETTER(PackedFile, "packed_file")
	}

	bool use_memory_cache() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_memory_cache")
	}

	void use_memory_cache(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_memory_cache", value)
	}

	bool use_mono() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mono")
	}

	void use_mono(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mono", value)
	}

	void pack() {
		PYTHON_FUNCTION_CALL("pack")
	}

	enum unpack_method_items_enum {
		unpack_method_items_USE_LOCAL = 5,	
		unpack_method_items_WRITE_LOCAL = 4,	
		unpack_method_items_USE_ORIGINAL = 6,	
		unpack_method_items_WRITE_ORIGINAL = 3	
	};

	std::map<std::string, int> create_string_to_unpack_method_items() {
		return {{"USE_LOCAL", unpack_method_items_USE_LOCAL}, {"WRITE_LOCAL", unpack_method_items_WRITE_LOCAL}, {"USE_ORIGINAL", unpack_method_items_USE_ORIGINAL}, {"WRITE_ORIGINAL", unpack_method_items_WRITE_ORIGINAL}};
	};

	std::map<int, std::string> create_unpack_method_items_to_string() {
		return {{unpack_method_items_USE_LOCAL, "USE_LOCAL"}, {unpack_method_items_WRITE_LOCAL, "WRITE_LOCAL"}, {unpack_method_items_USE_ORIGINAL, "USE_ORIGINAL"}, {unpack_method_items_WRITE_ORIGINAL, "WRITE_ORIGINAL"}};
	};

	const std::map<std::string, int> string_to_unpack_method_items = create_string_to_unpack_method_items();
	const std::map<int, std::string> unpack_method_items_to_string = create_unpack_method_items_to_string();

	void unpack(unpack_method_items_enum method = unpack_method_items_USE_LOCAL) {
		PYTHON_FUNCTION_ARGS_CALL("unpack", "s", unpack_method_items_to_string.at(method))
	}
};

class UILayout : public pyUniplug {
public:
	UILayout(PyObject* pyobj) : pyUniplug(pyobj) {}
	UILayout() : pyUniplug(0) { }

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	enum operator_context_items_enum {
		operator_context_items_INVOKE_DEFAULT = 0,	
		operator_context_items_INVOKE_REGION_WIN = 1,	
		operator_context_items_INVOKE_REGION_CHANNELS = 2,	
		operator_context_items_INVOKE_REGION_PREVIEW = 3,	
		operator_context_items_INVOKE_AREA = 4,	
		operator_context_items_INVOKE_SCREEN = 5,	
		operator_context_items_EXEC_DEFAULT = 6,	
		operator_context_items_EXEC_REGION_WIN = 7,	
		operator_context_items_EXEC_REGION_CHANNELS = 8,	
		operator_context_items_EXEC_REGION_PREVIEW = 9,	
		operator_context_items_EXEC_AREA = 10,	
		operator_context_items_EXEC_SCREEN = 11	
	};

	std::map<std::string, int> create_string_to_operator_context_items() {
		return {{"INVOKE_DEFAULT", operator_context_items_INVOKE_DEFAULT}, {"INVOKE_REGION_WIN", operator_context_items_INVOKE_REGION_WIN}, {"INVOKE_REGION_CHANNELS", operator_context_items_INVOKE_REGION_CHANNELS}, {"INVOKE_REGION_PREVIEW", operator_context_items_INVOKE_REGION_PREVIEW}, {"INVOKE_AREA", operator_context_items_INVOKE_AREA}, {"INVOKE_SCREEN", operator_context_items_INVOKE_SCREEN}, {"EXEC_DEFAULT", operator_context_items_EXEC_DEFAULT}, {"EXEC_REGION_WIN", operator_context_items_EXEC_REGION_WIN}, {"EXEC_REGION_CHANNELS", operator_context_items_EXEC_REGION_CHANNELS}, {"EXEC_REGION_PREVIEW", operator_context_items_EXEC_REGION_PREVIEW}, {"EXEC_AREA", operator_context_items_EXEC_AREA}, {"EXEC_SCREEN", operator_context_items_EXEC_SCREEN}};
	};

	std::map<int, std::string> create_operator_context_items_to_string() {
		return {{operator_context_items_INVOKE_DEFAULT, "INVOKE_DEFAULT"}, {operator_context_items_INVOKE_REGION_WIN, "INVOKE_REGION_WIN"}, {operator_context_items_INVOKE_REGION_CHANNELS, "INVOKE_REGION_CHANNELS"}, {operator_context_items_INVOKE_REGION_PREVIEW, "INVOKE_REGION_PREVIEW"}, {operator_context_items_INVOKE_AREA, "INVOKE_AREA"}, {operator_context_items_INVOKE_SCREEN, "INVOKE_SCREEN"}, {operator_context_items_EXEC_DEFAULT, "EXEC_DEFAULT"}, {operator_context_items_EXEC_REGION_WIN, "EXEC_REGION_WIN"}, {operator_context_items_EXEC_REGION_CHANNELS, "EXEC_REGION_CHANNELS"}, {operator_context_items_EXEC_REGION_PREVIEW, "EXEC_REGION_PREVIEW"}, {operator_context_items_EXEC_AREA, "EXEC_AREA"}, {operator_context_items_EXEC_SCREEN, "EXEC_SCREEN"}};
	};

	const std::map<std::string, int> string_to_operator_context_items = create_string_to_operator_context_items();
	const std::map<int, std::string> operator_context_items_to_string = create_operator_context_items_to_string();

	operator_context_items_enum operator_context() {
		STRING_TYPE_GETTER("operator_context", static_cast<operator_context_items_enum>(string_to_operator_context_items.at(resstr)))
	}

	void operator_context(operator_context_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "operator_context", operator_context_items_to_string.at(value))
	}

	bool enabled() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "enabled")
	}

	void enabled(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "enabled", value)
	}

	bool alert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "alert")
	}

	void alert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "alert", value)
	}

	enum alignment_items_enum {
		alignment_items_EXPAND = 0,	
		alignment_items_LEFT = 1,	
		alignment_items_CENTER = 2,	
		alignment_items_RIGHT = 3	
	};

	std::map<std::string, int> create_string_to_alignment_items() {
		return {{"EXPAND", alignment_items_EXPAND}, {"LEFT", alignment_items_LEFT}, {"CENTER", alignment_items_CENTER}, {"RIGHT", alignment_items_RIGHT}};
	};

	std::map<int, std::string> create_alignment_items_to_string() {
		return {{alignment_items_EXPAND, "EXPAND"}, {alignment_items_LEFT, "LEFT"}, {alignment_items_CENTER, "CENTER"}, {alignment_items_RIGHT, "RIGHT"}};
	};

	const std::map<std::string, int> string_to_alignment_items = create_string_to_alignment_items();
	const std::map<int, std::string> alignment_items_to_string = create_alignment_items_to_string();

	alignment_items_enum alignment() {
		STRING_TYPE_GETTER("alignment", static_cast<alignment_items_enum>(string_to_alignment_items.at(resstr)))
	}

	void alignment(alignment_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "alignment", alignment_items_to_string.at(value))
	}

	float scale_x() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_x")
	}

	void scale_x(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_x", value)
	}

	float scale_y() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_y")
	}

	void scale_y(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_y", value)
	}

	UILayout row(bool align = false) {
		PYTHON_FUNCTION_ARGS_CALL("row", "i", align)
		CLASS_TYPES_RETURN(UILayout)
	}

	UILayout column(bool align = false) {
		PYTHON_FUNCTION_ARGS_CALL("column", "i", align)
		CLASS_TYPES_RETURN(UILayout)
	}

	UILayout column_flow(int columns = 0, bool align = false) {
		PYTHON_FUNCTION_ARGS_CALL("column_flow", "ii", columns, align)
		CLASS_TYPES_RETURN(UILayout)
	}

	UILayout box() {
		PYTHON_FUNCTION_CALL("box")
		CLASS_TYPES_RETURN(UILayout)
	}

	UILayout split(float percentage = 0.0f, bool align = false) {
		PYTHON_FUNCTION_ARGS_CALL("split", "fi", percentage, align)
		CLASS_TYPES_RETURN(UILayout)
	}

	UILayout menu_pie() {
		PYTHON_FUNCTION_CALL("menu_pie")
		CLASS_TYPES_RETURN(UILayout)
	}

	int icon(AnyType data) {
		PYTHON_FUNCTION_ARGS_CALL("icon", "O", data.get_pyobjref())
		CREATE_SINGLE_PYOBJ(icon_value)
		PRIMITIVE_TYPES_CONV(icon_value, int, PyLong_AsLong(icon_value_obj))
		NONCLASS_TYPES_RETURN(icon_value_res)
	}

	const std::string enum_item_name(AnyType data, const std::string property, const std::string identifier) {
		PYTHON_FUNCTION_ARGS_CALL("enum_item_name", "Oss", data.get_pyobjref(), property, identifier)
		CREATE_SINGLE_PYOBJ(name)
		STRING_TYPE_CONV(name)
		NONCLASS_TYPES_RETURN(name_res)
	}

	const std::string enum_item_description(AnyType data, const std::string property, const std::string identifier) {
		PYTHON_FUNCTION_ARGS_CALL("enum_item_description", "Oss", data.get_pyobjref(), property, identifier)
		CREATE_SINGLE_PYOBJ(description)
		STRING_TYPE_CONV(description)
		NONCLASS_TYPES_RETURN(description_res)
	}

	int enum_item_icon(AnyType data, const std::string property, const std::string identifier) {
		PYTHON_FUNCTION_ARGS_CALL("enum_item_icon", "Oss", data.get_pyobjref(), property, identifier)
		CREATE_SINGLE_PYOBJ(icon_value)
		PRIMITIVE_TYPES_CONV(icon_value, int, PyLong_AsLong(icon_value_obj))
		NONCLASS_TYPES_RETURN(icon_value_res)
	}

	enum icon_items_enum {
		icon_items_NONE = 0,	
		icon_items_QUESTION = 1,	
		icon_items_ERROR = 2,	
		icon_items_CANCEL = 3,	
		icon_items_TRIA_RIGHT = 4,	
		icon_items_TRIA_DOWN = 5,	
		icon_items_TRIA_LEFT = 6,	
		icon_items_TRIA_UP = 7,	
		icon_items_ARROW_LEFTRIGHT = 8,	
		icon_items_PLUS = 9,	
		icon_items_DISCLOSURE_TRI_DOWN = 10,	
		icon_items_DISCLOSURE_TRI_RIGHT = 11,	
		icon_items_RADIOBUT_OFF = 12,	
		icon_items_RADIOBUT_ON = 13,	
		icon_items_MENU_PANEL = 14,	
		icon_items_BLENDER = 15,	
		icon_items_GRIP = 16,	
		icon_items_DOT = 17,	
		icon_items_COLLAPSEMENU = 18,	
		icon_items_X = 19,	
		icon_items_GO_LEFT = 21,	
		icon_items_PLUG = 22,	
		icon_items_UI = 23,	
		icon_items_NODE = 24,	
		icon_items_NODE_SEL = 25,	
		icon_items_FULLSCREEN = 26,	
		icon_items_SPLITSCREEN = 27,	
		icon_items_RIGHTARROW_THIN = 28,	
		icon_items_BORDERMOVE = 29,	
		icon_items_VIEWZOOM = 30,	
		icon_items_ZOOMIN = 31,	
		icon_items_ZOOMOUT = 32,	
		icon_items_PANEL_CLOSE = 33,	
		icon_items_COPY_ID = 34,	
		icon_items_EYEDROPPER = 35,	
		icon_items_LINK_AREA = 36,	
		icon_items_AUTO = 37,	
		icon_items_CHECKBOX_DEHLT = 38,	
		icon_items_CHECKBOX_HLT = 39,	
		icon_items_UNLOCKED = 40,	
		icon_items_LOCKED = 41,	
		icon_items_UNPINNED = 42,	
		icon_items_PINNED = 43,	
		icon_items_SCREEN_BACK = 44,	
		icon_items_RIGHTARROW = 45,	
		icon_items_DOWNARROW_HLT = 46,	
		icon_items_DOTSUP = 47,	
		icon_items_DOTSDOWN = 48,	
		icon_items_LINK = 49,	
		icon_items_INLINK = 50,	
		icon_items_PLUGIN = 51,	
		icon_items_HELP = 52,	
		icon_items_GHOST_ENABLED = 53,	
		icon_items_COLOR = 54,	
		icon_items_LINKED = 55,	
		icon_items_UNLINKED = 56,	
		icon_items_HAND = 57,	
		icon_items_ZOOM_ALL = 58,	
		icon_items_ZOOM_SELECTED = 59,	
		icon_items_ZOOM_PREVIOUS = 60,	
		icon_items_ZOOM_IN = 61,	
		icon_items_ZOOM_OUT = 62,	
		icon_items_RENDER_REGION = 63,	
		icon_items_BORDER_RECT = 64,	
		icon_items_BORDER_LASSO = 65,	
		icon_items_FREEZE = 66,	
		icon_items_STYLUS_PRESSURE = 67,	
		icon_items_GHOST_DISABLED = 68,	
		icon_items_NEW = 69,	
		icon_items_FILE_TICK = 70,	
		icon_items_QUIT = 71,	
		icon_items_URL = 72,	
		icon_items_RECOVER_LAST = 73,	
		icon_items_FULLSCREEN_ENTER = 75,	
		icon_items_FULLSCREEN_EXIT = 76,	
		icon_items_BLANK1 = 77,	
		icon_items_LAMP = 78,	
		icon_items_MATERIAL = 79,	
		icon_items_TEXTURE = 80,	
		icon_items_ANIM = 81,	
		icon_items_WORLD = 82,	
		icon_items_SCENE = 83,	
		icon_items_EDIT = 84,	
		icon_items_GAME = 85,	
		icon_items_RADIO = 86,	
		icon_items_SCRIPT = 87,	
		icon_items_PARTICLES = 88,	
		icon_items_PHYSICS = 89,	
		icon_items_SPEAKER = 90,	
		icon_items_TEXTURE_SHADED = 91,	
		icon_items_VIEW3D = 104,	
		icon_items_IPO = 105,	
		icon_items_OOPS = 106,	
		icon_items_BUTS = 107,	
		icon_items_FILESEL = 108,	
		icon_items_IMAGE_COL = 109,	
		icon_items_INFO = 110,	
		icon_items_SEQUENCE = 111,	
		icon_items_TEXT = 112,	
		icon_items_IMASEL = 113,	
		icon_items_SOUND = 114,	
		icon_items_ACTION = 115,	
		icon_items_NLA = 116,	
		icon_items_SCRIPTWIN = 117,	
		icon_items_TIME = 118,	
		icon_items_NODETREE = 119,	
		icon_items_LOGIC = 120,	
		icon_items_CONSOLE = 121,	
		icon_items_PREFERENCES = 122,	
		icon_items_CLIP = 123,	
		icon_items_ASSET_MANAGER = 124,	
		icon_items_OBJECT_DATAMODE = 130,	
		icon_items_EDITMODE_HLT = 131,	
		icon_items_FACESEL_HLT = 132,	
		icon_items_VPAINT_HLT = 133,	
		icon_items_TPAINT_HLT = 134,	
		icon_items_WPAINT_HLT = 135,	
		icon_items_SCULPTMODE_HLT = 136,	
		icon_items_POSE_HLT = 137,	
		icon_items_PARTICLEMODE = 138,	
		icon_items_LIGHTPAINT = 139,	
		icon_items_SCENE_DATA = 156,	
		icon_items_RENDERLAYERS = 157,	
		icon_items_WORLD_DATA = 158,	
		icon_items_OBJECT_DATA = 159,	
		icon_items_MESH_DATA = 160,	
		icon_items_CURVE_DATA = 161,	
		icon_items_META_DATA = 162,	
		icon_items_LATTICE_DATA = 163,	
		icon_items_LAMP_DATA = 164,	
		icon_items_MATERIAL_DATA = 165,	
		icon_items_TEXTURE_DATA = 166,	
		icon_items_ANIM_DATA = 167,	
		icon_items_CAMERA_DATA = 168,	
		icon_items_PARTICLE_DATA = 169,	
		icon_items_LIBRARY_DATA_DIRECT = 170,	
		icon_items_GROUP = 171,	
		icon_items_ARMATURE_DATA = 172,	
		icon_items_POSE_DATA = 173,	
		icon_items_BONE_DATA = 174,	
		icon_items_CONSTRAINT = 175,	
		icon_items_SHAPEKEY_DATA = 176,	
		icon_items_CONSTRAINT_BONE = 177,	
		icon_items_CAMERA_STEREO = 178,	
		icon_items_PACKAGE = 179,	
		icon_items_UGLYPACKAGE = 180,	
		icon_items_BRUSH_DATA = 182,	
		icon_items_IMAGE_DATA = 183,	
		icon_items_FILE = 184,	
		icon_items_FCURVE = 185,	
		icon_items_FONT_DATA = 186,	
		icon_items_RENDER_RESULT = 187,	
		icon_items_SURFACE_DATA = 188,	
		icon_items_EMPTY_DATA = 189,	
		icon_items_SETTINGS = 190,	
		icon_items_RENDER_ANIMATION = 191,	
		icon_items_RENDER_STILL = 192,	
		icon_items_LIBRARY_DATA_BROKEN = 193,	
		icon_items_BOIDS = 194,	
		icon_items_STRANDS = 195,	
		icon_items_LIBRARY_DATA_INDIRECT = 196,	
		icon_items_GREASEPENCIL = 197,	
		icon_items_LINE_DATA = 198,	
		icon_items_GROUP_BONE = 200,	
		icon_items_GROUP_VERTEX = 201,	
		icon_items_GROUP_VCOL = 202,	
		icon_items_GROUP_UVS = 203,	
		icon_items_RNA = 206,	
		icon_items_RNA_ADD = 207,	
		icon_items_OUTLINER_OB_EMPTY = 234,	
		icon_items_OUTLINER_OB_MESH = 235,	
		icon_items_OUTLINER_OB_CURVE = 236,	
		icon_items_OUTLINER_OB_LATTICE = 237,	
		icon_items_OUTLINER_OB_META = 238,	
		icon_items_OUTLINER_OB_LAMP = 239,	
		icon_items_OUTLINER_OB_CAMERA = 240,	
		icon_items_OUTLINER_OB_ARMATURE = 241,	
		icon_items_OUTLINER_OB_FONT = 242,	
		icon_items_OUTLINER_OB_SURFACE = 243,	
		icon_items_OUTLINER_OB_SPEAKER = 244,	
		icon_items_RESTRICT_VIEW_OFF = 253,	
		icon_items_RESTRICT_VIEW_ON = 254,	
		icon_items_RESTRICT_SELECT_OFF = 255,	
		icon_items_RESTRICT_SELECT_ON = 256,	
		icon_items_RESTRICT_RENDER_OFF = 257,	
		icon_items_RESTRICT_RENDER_ON = 258,	
		icon_items_OUTLINER_DATA_EMPTY = 260,	
		icon_items_OUTLINER_DATA_MESH = 261,	
		icon_items_OUTLINER_DATA_CURVE = 262,	
		icon_items_OUTLINER_DATA_LATTICE = 263,	
		icon_items_OUTLINER_DATA_META = 264,	
		icon_items_OUTLINER_DATA_LAMP = 265,	
		icon_items_OUTLINER_DATA_CAMERA = 266,	
		icon_items_OUTLINER_DATA_ARMATURE = 267,	
		icon_items_OUTLINER_DATA_FONT = 268,	
		icon_items_OUTLINER_DATA_SURFACE = 269,	
		icon_items_OUTLINER_DATA_SPEAKER = 270,	
		icon_items_OUTLINER_DATA_POSE = 271,	
		icon_items_MESH_PLANE = 286,	
		icon_items_MESH_CUBE = 287,	
		icon_items_MESH_CIRCLE = 288,	
		icon_items_MESH_UVSPHERE = 289,	
		icon_items_MESH_ICOSPHERE = 290,	
		icon_items_MESH_GRID = 291,	
		icon_items_MESH_MONKEY = 292,	
		icon_items_MESH_CYLINDER = 293,	
		icon_items_MESH_TORUS = 294,	
		icon_items_MESH_CONE = 295,	
		icon_items_LAMP_POINT = 298,	
		icon_items_LAMP_SUN = 299,	
		icon_items_LAMP_SPOT = 300,	
		icon_items_LAMP_HEMI = 301,	
		icon_items_LAMP_AREA = 302,	
		icon_items_META_EMPTY = 305,	
		icon_items_META_PLANE = 306,	
		icon_items_META_CUBE = 307,	
		icon_items_META_BALL = 308,	
		icon_items_META_ELLIPSOID = 309,	
		icon_items_META_CAPSULE = 310,	
		icon_items_SURFACE_NCURVE = 312,	
		icon_items_SURFACE_NCIRCLE = 313,	
		icon_items_SURFACE_NSURFACE = 314,	
		icon_items_SURFACE_NCYLINDER = 315,	
		icon_items_SURFACE_NSPHERE = 316,	
		icon_items_SURFACE_NTORUS = 317,	
		icon_items_CURVE_BEZCURVE = 321,	
		icon_items_CURVE_BEZCIRCLE = 322,	
		icon_items_CURVE_NCURVE = 323,	
		icon_items_CURVE_NCIRCLE = 324,	
		icon_items_CURVE_PATH = 325,	
		icon_items_COLOR_RED = 331,	
		icon_items_COLOR_GREEN = 332,	
		icon_items_COLOR_BLUE = 333,	
		icon_items_TRIA_RIGHT_BAR = 334,	
		icon_items_TRIA_DOWN_BAR = 335,	
		icon_items_TRIA_LEFT_BAR = 336,	
		icon_items_TRIA_UP_BAR = 337,	
		icon_items_FORCE_FORCE = 338,	
		icon_items_FORCE_WIND = 339,	
		icon_items_FORCE_VORTEX = 340,	
		icon_items_FORCE_MAGNETIC = 341,	
		icon_items_FORCE_HARMONIC = 342,	
		icon_items_FORCE_CHARGE = 343,	
		icon_items_FORCE_LENNARDJONES = 344,	
		icon_items_FORCE_TEXTURE = 345,	
		icon_items_FORCE_CURVE = 346,	
		icon_items_FORCE_BOID = 347,	
		icon_items_FORCE_TURBULENCE = 348,	
		icon_items_FORCE_DRAG = 349,	
		icon_items_FORCE_SMOKEFLOW = 350,	
		icon_items_MODIFIER = 442,	
		icon_items_MOD_WAVE = 443,	
		icon_items_MOD_BUILD = 444,	
		icon_items_MOD_DECIM = 445,	
		icon_items_MOD_MIRROR = 446,	
		icon_items_MOD_SOFT = 447,	
		icon_items_MOD_SUBSURF = 448,	
		icon_items_HOOK = 449,	
		icon_items_MOD_PHYSICS = 450,	
		icon_items_MOD_PARTICLES = 451,	
		icon_items_MOD_BOOLEAN = 452,	
		icon_items_MOD_EDGESPLIT = 453,	
		icon_items_MOD_ARRAY = 454,	
		icon_items_MOD_UVPROJECT = 455,	
		icon_items_MOD_DISPLACE = 456,	
		icon_items_MOD_CURVE = 457,	
		icon_items_MOD_LATTICE = 458,	
		icon_items_CONSTRAINT_DATA = 459,	
		icon_items_MOD_ARMATURE = 460,	
		icon_items_MOD_SHRINKWRAP = 461,	
		icon_items_MOD_CAST = 462,	
		icon_items_MOD_MESHDEFORM = 463,	
		icon_items_MOD_BEVEL = 464,	
		icon_items_MOD_SMOOTH = 465,	
		icon_items_MOD_SIMPLEDEFORM = 466,	
		icon_items_MOD_MASK = 467,	
		icon_items_MOD_CLOTH = 468,	
		icon_items_MOD_EXPLODE = 469,	
		icon_items_MOD_FLUIDSIM = 470,	
		icon_items_MOD_MULTIRES = 471,	
		icon_items_MOD_SMOKE = 472,	
		icon_items_MOD_SOLIDIFY = 473,	
		icon_items_MOD_SCREW = 474,	
		icon_items_MOD_VERTEX_WEIGHT = 475,	
		icon_items_MOD_DYNAMICPAINT = 476,	
		icon_items_MOD_REMESH = 477,	
		icon_items_MOD_OCEAN = 478,	
		icon_items_MOD_WARP = 479,	
		icon_items_MOD_SKIN = 480,	
		icon_items_MOD_TRIANGULATE = 481,	
		icon_items_MOD_WIREFRAME = 482,	
		icon_items_MOD_DATA_TRANSFER = 483,	
		icon_items_MOD_NORMALEDIT = 484,	
		icon_items_REC = 494,	
		icon_items_PLAY = 495,	
		icon_items_FF = 496,	
		icon_items_REW = 497,	
		icon_items_PAUSE = 498,	
		icon_items_PREV_KEYFRAME = 499,	
		icon_items_NEXT_KEYFRAME = 500,	
		icon_items_PLAY_AUDIO = 501,	
		icon_items_PLAY_REVERSE = 502,	
		icon_items_PREVIEW_RANGE = 503,	
		icon_items_ACTION_TWEAK = 504,	
		icon_items_PMARKER_ACT = 505,	
		icon_items_PMARKER_SEL = 506,	
		icon_items_PMARKER = 507,	
		icon_items_MARKER_HLT = 508,	
		icon_items_MARKER = 509,	
		icon_items_SPACE2 = 510,	
		icon_items_SPACE3 = 511,	
		icon_items_KEYINGSET = 512,	
		icon_items_KEY_DEHLT = 513,	
		icon_items_KEY_HLT = 514,	
		icon_items_MUTE_IPO_OFF = 515,	
		icon_items_MUTE_IPO_ON = 516,	
		icon_items_VISIBLE_IPO_OFF = 517,	
		icon_items_VISIBLE_IPO_ON = 518,	
		icon_items_DRIVER = 519,	
		icon_items_SOLO_OFF = 520,	
		icon_items_SOLO_ON = 521,	
		icon_items_FRAME_PREV = 522,	
		icon_items_FRAME_NEXT = 523,	
		icon_items_NLA_PUSHDOWN = 524,	
		icon_items_IPO_CONSTANT = 525,	
		icon_items_IPO_LINEAR = 526,	
		icon_items_IPO_BEZIER = 527,	
		icon_items_IPO_SINE = 528,	
		icon_items_IPO_QUAD = 529,	
		icon_items_IPO_CUBIC = 530,	
		icon_items_IPO_QUART = 531,	
		icon_items_IPO_QUINT = 532,	
		icon_items_IPO_EXPO = 533,	
		icon_items_IPO_CIRC = 534,	
		icon_items_IPO_BOUNCE = 535,	
		icon_items_IPO_ELASTIC = 536,	
		icon_items_IPO_BACK = 537,	
		icon_items_IPO_EASE_IN = 538,	
		icon_items_IPO_EASE_OUT = 539,	
		icon_items_IPO_EASE_IN_OUT = 540,	
		icon_items_VERTEXSEL = 546,	
		icon_items_EDGESEL = 547,	
		icon_items_FACESEL = 548,	
		icon_items_LOOPSEL = 549,	
		icon_items_ROTATE = 551,	
		icon_items_CURSOR = 552,	
		icon_items_ROTATECOLLECTION = 553,	
		icon_items_ROTATECENTER = 554,	
		icon_items_ROTACTIVE = 555,	
		icon_items_ALIGN = 556,	
		icon_items_SMOOTHCURVE = 558,	
		icon_items_SPHERECURVE = 559,	
		icon_items_ROOTCURVE = 560,	
		icon_items_SHARPCURVE = 561,	
		icon_items_LINCURVE = 562,	
		icon_items_NOCURVE = 563,	
		icon_items_RNDCURVE = 564,	
		icon_items_PROP_OFF = 565,	
		icon_items_PROP_ON = 566,	
		icon_items_PROP_CON = 567,	
		icon_items_SCULPT_DYNTOPO = 568,	
		icon_items_PARTICLE_POINT = 569,	
		icon_items_PARTICLE_TIP = 570,	
		icon_items_PARTICLE_PATH = 571,	
		icon_items_MAN_TRANS = 572,	
		icon_items_MAN_ROT = 573,	
		icon_items_MAN_SCALE = 574,	
		icon_items_MANIPUL = 575,	
		icon_items_SNAP_OFF = 576,	
		icon_items_SNAP_ON = 577,	
		icon_items_SNAP_NORMAL = 578,	
		icon_items_SNAP_INCREMENT = 579,	
		icon_items_SNAP_VERTEX = 580,	
		icon_items_SNAP_EDGE = 581,	
		icon_items_SNAP_FACE = 582,	
		icon_items_SNAP_VOLUME = 583,	
		icon_items_STICKY_UVS_LOC = 585,	
		icon_items_STICKY_UVS_DISABLE = 586,	
		icon_items_STICKY_UVS_VERT = 587,	
		icon_items_CLIPUV_DEHLT = 588,	
		icon_items_CLIPUV_HLT = 589,	
		icon_items_SNAP_PEEL_OBJECT = 590,	
		icon_items_GRID = 591,	
		icon_items_PASTEDOWN = 598,	
		icon_items_COPYDOWN = 599,	
		icon_items_PASTEFLIPUP = 600,	
		icon_items_PASTEFLIPDOWN = 601,	
		icon_items_SNAP_SURFACE = 606,	
		icon_items_AUTOMERGE_ON = 607,	
		icon_items_AUTOMERGE_OFF = 608,	
		icon_items_RETOPO = 609,	
		icon_items_UV_VERTEXSEL = 610,	
		icon_items_UV_EDGESEL = 611,	
		icon_items_UV_FACESEL = 612,	
		icon_items_UV_ISLANDSEL = 613,	
		icon_items_UV_SYNC_SELECT = 614,	
		icon_items_BBOX = 624,	
		icon_items_WIRE = 625,	
		icon_items_SOLID = 626,	
		icon_items_SMOOTH = 627,	
		icon_items_POTATO = 628,	
		icon_items_ORTHO = 630,	
		icon_items_LOCKVIEW_OFF = 633,	
		icon_items_LOCKVIEW_ON = 634,	
		icon_items_AXIS_SIDE = 636,	
		icon_items_AXIS_FRONT = 637,	
		icon_items_AXIS_TOP = 638,	
		icon_items_NDOF_DOM = 639,	
		icon_items_NDOF_TURN = 640,	
		icon_items_NDOF_FLY = 641,	
		icon_items_NDOF_TRANS = 642,	
		icon_items_LAYER_USED = 643,	
		icon_items_LAYER_ACTIVE = 644,	
		icon_items_SORTALPHA = 676,	
		icon_items_SORTBYEXT = 677,	
		icon_items_SORTTIME = 678,	
		icon_items_SORTSIZE = 679,	
		icon_items_LONGDISPLAY = 680,	
		icon_items_SHORTDISPLAY = 681,	
		icon_items_GHOST = 682,	
		icon_items_IMGDISPLAY = 683,	
		icon_items_SAVE_AS = 684,	
		icon_items_SAVE_COPY = 685,	
		icon_items_BOOKMARKS = 686,	
		icon_items_FONTPREVIEW = 687,	
		icon_items_FILTER = 688,	
		icon_items_NEWFOLDER = 689,	
		icon_items_OPEN_RECENT = 690,	
		icon_items_FILE_PARENT = 691,	
		icon_items_FILE_REFRESH = 692,	
		icon_items_FILE_FOLDER = 693,	
		icon_items_FILE_BLANK = 694,	
		icon_items_FILE_BLEND = 695,	
		icon_items_FILE_IMAGE = 696,	
		icon_items_FILE_MOVIE = 697,	
		icon_items_FILE_SCRIPT = 698,	
		icon_items_FILE_SOUND = 699,	
		icon_items_FILE_FONT = 700,	
		icon_items_FILE_TEXT = 701,	
		icon_items_RECOVER_AUTO = 702,	
		icon_items_SAVE_PREFS = 703,	
		icon_items_LINK_BLEND = 704,	
		icon_items_APPEND_BLEND = 705,	
		icon_items_IMPORT = 706,	
		icon_items_EXPORT = 707,	
		icon_items_EXTERNAL_DATA = 708,	
		icon_items_LOAD_FACTORY = 709,	
		icon_items_LOOP_BACK = 715,	
		icon_items_LOOP_FORWARDS = 716,	
		icon_items_BACK = 717,	
		icon_items_FORWARD = 718,	
		icon_items_FILE_HIDDEN = 725,	
		icon_items_FILE_BACKUP = 726,	
		icon_items_DISK_DRIVE = 727,	
		icon_items_MATPLANE = 728,	
		icon_items_MATSPHERE = 729,	
		icon_items_MATCUBE = 730,	
		icon_items_MONKEY = 731,	
		icon_items_HAIR = 732,	
		icon_items_ALIASED = 733,	
		icon_items_ANTIALIASED = 734,	
		icon_items_MAT_SPHERE_SKY = 735,	
		icon_items_WORDWRAP_OFF = 740,	
		icon_items_WORDWRAP_ON = 741,	
		icon_items_SYNTAX_OFF = 742,	
		icon_items_SYNTAX_ON = 743,	
		icon_items_LINENUMBERS_OFF = 744,	
		icon_items_LINENUMBERS_ON = 745,	
		icon_items_SCRIPTPLUGINS = 746,	
		icon_items_SEQ_SEQUENCER = 754,	
		icon_items_SEQ_PREVIEW = 755,	
		icon_items_SEQ_LUMA_WAVEFORM = 756,	
		icon_items_SEQ_CHROMA_SCOPE = 757,	
		icon_items_SEQ_HISTOGRAM = 758,	
		icon_items_SEQ_SPLITVIEW = 759,	
		icon_items_IMAGE_RGB = 763,	
		icon_items_IMAGE_RGB_ALPHA = 764,	
		icon_items_IMAGE_ALPHA = 765,	
		icon_items_IMAGE_ZDEPTH = 766,	
		icon_items_IMAGEFILE = 767,	
		icon_items_BRUSH_ADD = 780,	
		icon_items_BRUSH_BLOB = 781,	
		icon_items_BRUSH_BLUR = 782,	
		icon_items_BRUSH_CLAY = 783,	
		icon_items_BRUSH_CLAY_STRIPS = 784,	
		icon_items_BRUSH_CLONE = 785,	
		icon_items_BRUSH_CREASE = 786,	
		icon_items_BRUSH_DARKEN = 787,	
		icon_items_BRUSH_FILL = 788,	
		icon_items_BRUSH_FLATTEN = 789,	
		icon_items_BRUSH_GRAB = 790,	
		icon_items_BRUSH_INFLATE = 791,	
		icon_items_BRUSH_LAYER = 792,	
		icon_items_BRUSH_LIGHTEN = 793,	
		icon_items_BRUSH_MASK = 794,	
		icon_items_BRUSH_MIX = 795,	
		icon_items_BRUSH_MULTIPLY = 796,	
		icon_items_BRUSH_NUDGE = 797,	
		icon_items_BRUSH_PINCH = 798,	
		icon_items_BRUSH_SCRAPE = 799,	
		icon_items_BRUSH_SCULPT_DRAW = 800,	
		icon_items_BRUSH_SMEAR = 801,	
		icon_items_BRUSH_SMOOTH = 802,	
		icon_items_BRUSH_SNAKE_HOOK = 803,	
		icon_items_BRUSH_SOFTEN = 804,	
		icon_items_BRUSH_SUBTRACT = 805,	
		icon_items_BRUSH_TEXDRAW = 806,	
		icon_items_BRUSH_TEXFILL = 807,	
		icon_items_BRUSH_TEXMASK = 808,	
		icon_items_BRUSH_THUMB = 809,	
		icon_items_BRUSH_ROTATE = 810,	
		icon_items_BRUSH_VERTEXDRAW = 811,	
		icon_items_MATCAP_01 = 812,	
		icon_items_MATCAP_02 = 813,	
		icon_items_MATCAP_03 = 814,	
		icon_items_MATCAP_04 = 815,	
		icon_items_MATCAP_05 = 816,	
		icon_items_MATCAP_06 = 817,	
		icon_items_MATCAP_07 = 818,	
		icon_items_MATCAP_08 = 819,	
		icon_items_MATCAP_09 = 820,	
		icon_items_MATCAP_10 = 821,	
		icon_items_MATCAP_11 = 822,	
		icon_items_MATCAP_12 = 823,	
		icon_items_MATCAP_13 = 824,	
		icon_items_MATCAP_14 = 825,	
		icon_items_MATCAP_15 = 826,	
		icon_items_MATCAP_16 = 827,	
		icon_items_MATCAP_17 = 828,	
		icon_items_MATCAP_18 = 829,	
		icon_items_MATCAP_19 = 830,	
		icon_items_MATCAP_20 = 831,	
		icon_items_MATCAP_21 = 832,	
		icon_items_MATCAP_22 = 833,	
		icon_items_MATCAP_23 = 834,	
		icon_items_MATCAP_24 = 835,	
		icon_items_VIEW3D_VEC = 836,	
		icon_items_EDIT_VEC = 837,	
		icon_items_EDITMODE_VEC_DEHLT = 838,	
		icon_items_EDITMODE_VEC_HLT = 839,	
		icon_items_DISCLOSURE_TRI_RIGHT_VEC = 840,	
		icon_items_DISCLOSURE_TRI_DOWN_VEC = 841,	
		icon_items_MOVE_UP_VEC = 842,	
		icon_items_MOVE_DOWN_VEC = 843,	
		icon_items_X_VEC = 844,	
		icon_items_SMALL_TRI_RIGHT_VEC = 845	
	};

	std::map<std::string, int> create_string_to_icon_items() {
		return {{"NONE", icon_items_NONE}, {"QUESTION", icon_items_QUESTION}, {"ERROR", icon_items_ERROR}, {"CANCEL", icon_items_CANCEL}, {"TRIA_RIGHT", icon_items_TRIA_RIGHT}, {"TRIA_DOWN", icon_items_TRIA_DOWN}, {"TRIA_LEFT", icon_items_TRIA_LEFT}, {"TRIA_UP", icon_items_TRIA_UP}, {"ARROW_LEFTRIGHT", icon_items_ARROW_LEFTRIGHT}, {"PLUS", icon_items_PLUS}, {"DISCLOSURE_TRI_DOWN", icon_items_DISCLOSURE_TRI_DOWN}, {"DISCLOSURE_TRI_RIGHT", icon_items_DISCLOSURE_TRI_RIGHT}, {"RADIOBUT_OFF", icon_items_RADIOBUT_OFF}, {"RADIOBUT_ON", icon_items_RADIOBUT_ON}, {"MENU_PANEL", icon_items_MENU_PANEL}, {"BLENDER", icon_items_BLENDER}, {"GRIP", icon_items_GRIP}, {"DOT", icon_items_DOT}, {"COLLAPSEMENU", icon_items_COLLAPSEMENU}, {"X", icon_items_X}, {"GO_LEFT", icon_items_GO_LEFT}, {"PLUG", icon_items_PLUG}, {"UI", icon_items_UI}, {"NODE", icon_items_NODE}, {"NODE_SEL", icon_items_NODE_SEL}, {"FULLSCREEN", icon_items_FULLSCREEN}, {"SPLITSCREEN", icon_items_SPLITSCREEN}, {"RIGHTARROW_THIN", icon_items_RIGHTARROW_THIN}, {"BORDERMOVE", icon_items_BORDERMOVE}, {"VIEWZOOM", icon_items_VIEWZOOM}, {"ZOOMIN", icon_items_ZOOMIN}, {"ZOOMOUT", icon_items_ZOOMOUT}, {"PANEL_CLOSE", icon_items_PANEL_CLOSE}, {"COPY_ID", icon_items_COPY_ID}, {"EYEDROPPER", icon_items_EYEDROPPER}, {"LINK_AREA", icon_items_LINK_AREA}, {"AUTO", icon_items_AUTO}, {"CHECKBOX_DEHLT", icon_items_CHECKBOX_DEHLT}, {"CHECKBOX_HLT", icon_items_CHECKBOX_HLT}, {"UNLOCKED", icon_items_UNLOCKED}, {"LOCKED", icon_items_LOCKED}, {"UNPINNED", icon_items_UNPINNED}, {"PINNED", icon_items_PINNED}, {"SCREEN_BACK", icon_items_SCREEN_BACK}, {"RIGHTARROW", icon_items_RIGHTARROW}, {"DOWNARROW_HLT", icon_items_DOWNARROW_HLT}, {"DOTSUP", icon_items_DOTSUP}, {"DOTSDOWN", icon_items_DOTSDOWN}, {"LINK", icon_items_LINK}, {"INLINK", icon_items_INLINK}, {"PLUGIN", icon_items_PLUGIN}, {"HELP", icon_items_HELP}, {"GHOST_ENABLED", icon_items_GHOST_ENABLED}, {"COLOR", icon_items_COLOR}, {"LINKED", icon_items_LINKED}, {"UNLINKED", icon_items_UNLINKED}, {"HAND", icon_items_HAND}, {"ZOOM_ALL", icon_items_ZOOM_ALL}, {"ZOOM_SELECTED", icon_items_ZOOM_SELECTED}, {"ZOOM_PREVIOUS", icon_items_ZOOM_PREVIOUS}, {"ZOOM_IN", icon_items_ZOOM_IN}, {"ZOOM_OUT", icon_items_ZOOM_OUT}, {"RENDER_REGION", icon_items_RENDER_REGION}, {"BORDER_RECT", icon_items_BORDER_RECT}, {"BORDER_LASSO", icon_items_BORDER_LASSO}, {"FREEZE", icon_items_FREEZE}, {"STYLUS_PRESSURE", icon_items_STYLUS_PRESSURE}, {"GHOST_DISABLED", icon_items_GHOST_DISABLED}, {"NEW", icon_items_NEW}, {"FILE_TICK", icon_items_FILE_TICK}, {"QUIT", icon_items_QUIT}, {"URL", icon_items_URL}, {"RECOVER_LAST", icon_items_RECOVER_LAST}, {"FULLSCREEN_ENTER", icon_items_FULLSCREEN_ENTER}, {"FULLSCREEN_EXIT", icon_items_FULLSCREEN_EXIT}, {"BLANK1", icon_items_BLANK1}, {"LAMP", icon_items_LAMP}, {"MATERIAL", icon_items_MATERIAL}, {"TEXTURE", icon_items_TEXTURE}, {"ANIM", icon_items_ANIM}, {"WORLD", icon_items_WORLD}, {"SCENE", icon_items_SCENE}, {"EDIT", icon_items_EDIT}, {"GAME", icon_items_GAME}, {"RADIO", icon_items_RADIO}, {"SCRIPT", icon_items_SCRIPT}, {"PARTICLES", icon_items_PARTICLES}, {"PHYSICS", icon_items_PHYSICS}, {"SPEAKER", icon_items_SPEAKER}, {"TEXTURE_SHADED", icon_items_TEXTURE_SHADED}, {"VIEW3D", icon_items_VIEW3D}, {"IPO", icon_items_IPO}, {"OOPS", icon_items_OOPS}, {"BUTS", icon_items_BUTS}, {"FILESEL", icon_items_FILESEL}, {"IMAGE_COL", icon_items_IMAGE_COL}, {"INFO", icon_items_INFO}, {"SEQUENCE", icon_items_SEQUENCE}, {"TEXT", icon_items_TEXT}, {"IMASEL", icon_items_IMASEL}, {"SOUND", icon_items_SOUND}, {"ACTION", icon_items_ACTION}, {"NLA", icon_items_NLA}, {"SCRIPTWIN", icon_items_SCRIPTWIN}, {"TIME", icon_items_TIME}, {"NODETREE", icon_items_NODETREE}, {"LOGIC", icon_items_LOGIC}, {"CONSOLE", icon_items_CONSOLE}, {"PREFERENCES", icon_items_PREFERENCES}, {"CLIP", icon_items_CLIP}, {"ASSET_MANAGER", icon_items_ASSET_MANAGER}, {"OBJECT_DATAMODE", icon_items_OBJECT_DATAMODE}, {"EDITMODE_HLT", icon_items_EDITMODE_HLT}, {"FACESEL_HLT", icon_items_FACESEL_HLT}, {"VPAINT_HLT", icon_items_VPAINT_HLT}, {"TPAINT_HLT", icon_items_TPAINT_HLT}, {"WPAINT_HLT", icon_items_WPAINT_HLT}, {"SCULPTMODE_HLT", icon_items_SCULPTMODE_HLT}, {"POSE_HLT", icon_items_POSE_HLT}, {"PARTICLEMODE", icon_items_PARTICLEMODE}, {"LIGHTPAINT", icon_items_LIGHTPAINT}, {"SCENE_DATA", icon_items_SCENE_DATA}, {"RENDERLAYERS", icon_items_RENDERLAYERS}, {"WORLD_DATA", icon_items_WORLD_DATA}, {"OBJECT_DATA", icon_items_OBJECT_DATA}, {"MESH_DATA", icon_items_MESH_DATA}, {"CURVE_DATA", icon_items_CURVE_DATA}, {"META_DATA", icon_items_META_DATA}, {"LATTICE_DATA", icon_items_LATTICE_DATA}, {"LAMP_DATA", icon_items_LAMP_DATA}, {"MATERIAL_DATA", icon_items_MATERIAL_DATA}, {"TEXTURE_DATA", icon_items_TEXTURE_DATA}, {"ANIM_DATA", icon_items_ANIM_DATA}, {"CAMERA_DATA", icon_items_CAMERA_DATA}, {"PARTICLE_DATA", icon_items_PARTICLE_DATA}, {"LIBRARY_DATA_DIRECT", icon_items_LIBRARY_DATA_DIRECT}, {"GROUP", icon_items_GROUP}, {"ARMATURE_DATA", icon_items_ARMATURE_DATA}, {"POSE_DATA", icon_items_POSE_DATA}, {"BONE_DATA", icon_items_BONE_DATA}, {"CONSTRAINT", icon_items_CONSTRAINT}, {"SHAPEKEY_DATA", icon_items_SHAPEKEY_DATA}, {"CONSTRAINT_BONE", icon_items_CONSTRAINT_BONE}, {"CAMERA_STEREO", icon_items_CAMERA_STEREO}, {"PACKAGE", icon_items_PACKAGE}, {"UGLYPACKAGE", icon_items_UGLYPACKAGE}, {"BRUSH_DATA", icon_items_BRUSH_DATA}, {"IMAGE_DATA", icon_items_IMAGE_DATA}, {"FILE", icon_items_FILE}, {"FCURVE", icon_items_FCURVE}, {"FONT_DATA", icon_items_FONT_DATA}, {"RENDER_RESULT", icon_items_RENDER_RESULT}, {"SURFACE_DATA", icon_items_SURFACE_DATA}, {"EMPTY_DATA", icon_items_EMPTY_DATA}, {"SETTINGS", icon_items_SETTINGS}, {"RENDER_ANIMATION", icon_items_RENDER_ANIMATION}, {"RENDER_STILL", icon_items_RENDER_STILL}, {"LIBRARY_DATA_BROKEN", icon_items_LIBRARY_DATA_BROKEN}, {"BOIDS", icon_items_BOIDS}, {"STRANDS", icon_items_STRANDS}, {"LIBRARY_DATA_INDIRECT", icon_items_LIBRARY_DATA_INDIRECT}, {"GREASEPENCIL", icon_items_GREASEPENCIL}, {"LINE_DATA", icon_items_LINE_DATA}, {"GROUP_BONE", icon_items_GROUP_BONE}, {"GROUP_VERTEX", icon_items_GROUP_VERTEX}, {"GROUP_VCOL", icon_items_GROUP_VCOL}, {"GROUP_UVS", icon_items_GROUP_UVS}, {"RNA", icon_items_RNA}, {"RNA_ADD", icon_items_RNA_ADD}, {"OUTLINER_OB_EMPTY", icon_items_OUTLINER_OB_EMPTY}, {"OUTLINER_OB_MESH", icon_items_OUTLINER_OB_MESH}, {"OUTLINER_OB_CURVE", icon_items_OUTLINER_OB_CURVE}, {"OUTLINER_OB_LATTICE", icon_items_OUTLINER_OB_LATTICE}, {"OUTLINER_OB_META", icon_items_OUTLINER_OB_META}, {"OUTLINER_OB_LAMP", icon_items_OUTLINER_OB_LAMP}, {"OUTLINER_OB_CAMERA", icon_items_OUTLINER_OB_CAMERA}, {"OUTLINER_OB_ARMATURE", icon_items_OUTLINER_OB_ARMATURE}, {"OUTLINER_OB_FONT", icon_items_OUTLINER_OB_FONT}, {"OUTLINER_OB_SURFACE", icon_items_OUTLINER_OB_SURFACE}, {"OUTLINER_OB_SPEAKER", icon_items_OUTLINER_OB_SPEAKER}, {"RESTRICT_VIEW_OFF", icon_items_RESTRICT_VIEW_OFF}, {"RESTRICT_VIEW_ON", icon_items_RESTRICT_VIEW_ON}, {"RESTRICT_SELECT_OFF", icon_items_RESTRICT_SELECT_OFF}, {"RESTRICT_SELECT_ON", icon_items_RESTRICT_SELECT_ON}, {"RESTRICT_RENDER_OFF", icon_items_RESTRICT_RENDER_OFF}, {"RESTRICT_RENDER_ON", icon_items_RESTRICT_RENDER_ON}, {"OUTLINER_DATA_EMPTY", icon_items_OUTLINER_DATA_EMPTY}, {"OUTLINER_DATA_MESH", icon_items_OUTLINER_DATA_MESH}, {"OUTLINER_DATA_CURVE", icon_items_OUTLINER_DATA_CURVE}, {"OUTLINER_DATA_LATTICE", icon_items_OUTLINER_DATA_LATTICE}, {"OUTLINER_DATA_META", icon_items_OUTLINER_DATA_META}, {"OUTLINER_DATA_LAMP", icon_items_OUTLINER_DATA_LAMP}, {"OUTLINER_DATA_CAMERA", icon_items_OUTLINER_DATA_CAMERA}, {"OUTLINER_DATA_ARMATURE", icon_items_OUTLINER_DATA_ARMATURE}, {"OUTLINER_DATA_FONT", icon_items_OUTLINER_DATA_FONT}, {"OUTLINER_DATA_SURFACE", icon_items_OUTLINER_DATA_SURFACE}, {"OUTLINER_DATA_SPEAKER", icon_items_OUTLINER_DATA_SPEAKER}, {"OUTLINER_DATA_POSE", icon_items_OUTLINER_DATA_POSE}, {"MESH_PLANE", icon_items_MESH_PLANE}, {"MESH_CUBE", icon_items_MESH_CUBE}, {"MESH_CIRCLE", icon_items_MESH_CIRCLE}, {"MESH_UVSPHERE", icon_items_MESH_UVSPHERE}, {"MESH_ICOSPHERE", icon_items_MESH_ICOSPHERE}, {"MESH_GRID", icon_items_MESH_GRID}, {"MESH_MONKEY", icon_items_MESH_MONKEY}, {"MESH_CYLINDER", icon_items_MESH_CYLINDER}, {"MESH_TORUS", icon_items_MESH_TORUS}, {"MESH_CONE", icon_items_MESH_CONE}, {"LAMP_POINT", icon_items_LAMP_POINT}, {"LAMP_SUN", icon_items_LAMP_SUN}, {"LAMP_SPOT", icon_items_LAMP_SPOT}, {"LAMP_HEMI", icon_items_LAMP_HEMI}, {"LAMP_AREA", icon_items_LAMP_AREA}, {"META_EMPTY", icon_items_META_EMPTY}, {"META_PLANE", icon_items_META_PLANE}, {"META_CUBE", icon_items_META_CUBE}, {"META_BALL", icon_items_META_BALL}, {"META_ELLIPSOID", icon_items_META_ELLIPSOID}, {"META_CAPSULE", icon_items_META_CAPSULE}, {"SURFACE_NCURVE", icon_items_SURFACE_NCURVE}, {"SURFACE_NCIRCLE", icon_items_SURFACE_NCIRCLE}, {"SURFACE_NSURFACE", icon_items_SURFACE_NSURFACE}, {"SURFACE_NCYLINDER", icon_items_SURFACE_NCYLINDER}, {"SURFACE_NSPHERE", icon_items_SURFACE_NSPHERE}, {"SURFACE_NTORUS", icon_items_SURFACE_NTORUS}, {"CURVE_BEZCURVE", icon_items_CURVE_BEZCURVE}, {"CURVE_BEZCIRCLE", icon_items_CURVE_BEZCIRCLE}, {"CURVE_NCURVE", icon_items_CURVE_NCURVE}, {"CURVE_NCIRCLE", icon_items_CURVE_NCIRCLE}, {"CURVE_PATH", icon_items_CURVE_PATH}, {"COLOR_RED", icon_items_COLOR_RED}, {"COLOR_GREEN", icon_items_COLOR_GREEN}, {"COLOR_BLUE", icon_items_COLOR_BLUE}, {"TRIA_RIGHT_BAR", icon_items_TRIA_RIGHT_BAR}, {"TRIA_DOWN_BAR", icon_items_TRIA_DOWN_BAR}, {"TRIA_LEFT_BAR", icon_items_TRIA_LEFT_BAR}, {"TRIA_UP_BAR", icon_items_TRIA_UP_BAR}, {"FORCE_FORCE", icon_items_FORCE_FORCE}, {"FORCE_WIND", icon_items_FORCE_WIND}, {"FORCE_VORTEX", icon_items_FORCE_VORTEX}, {"FORCE_MAGNETIC", icon_items_FORCE_MAGNETIC}, {"FORCE_HARMONIC", icon_items_FORCE_HARMONIC}, {"FORCE_CHARGE", icon_items_FORCE_CHARGE}, {"FORCE_LENNARDJONES", icon_items_FORCE_LENNARDJONES}, {"FORCE_TEXTURE", icon_items_FORCE_TEXTURE}, {"FORCE_CURVE", icon_items_FORCE_CURVE}, {"FORCE_BOID", icon_items_FORCE_BOID}, {"FORCE_TURBULENCE", icon_items_FORCE_TURBULENCE}, {"FORCE_DRAG", icon_items_FORCE_DRAG}, {"FORCE_SMOKEFLOW", icon_items_FORCE_SMOKEFLOW}, {"MODIFIER", icon_items_MODIFIER}, {"MOD_WAVE", icon_items_MOD_WAVE}, {"MOD_BUILD", icon_items_MOD_BUILD}, {"MOD_DECIM", icon_items_MOD_DECIM}, {"MOD_MIRROR", icon_items_MOD_MIRROR}, {"MOD_SOFT", icon_items_MOD_SOFT}, {"MOD_SUBSURF", icon_items_MOD_SUBSURF}, {"HOOK", icon_items_HOOK}, {"MOD_PHYSICS", icon_items_MOD_PHYSICS}, {"MOD_PARTICLES", icon_items_MOD_PARTICLES}, {"MOD_BOOLEAN", icon_items_MOD_BOOLEAN}, {"MOD_EDGESPLIT", icon_items_MOD_EDGESPLIT}, {"MOD_ARRAY", icon_items_MOD_ARRAY}, {"MOD_UVPROJECT", icon_items_MOD_UVPROJECT}, {"MOD_DISPLACE", icon_items_MOD_DISPLACE}, {"MOD_CURVE", icon_items_MOD_CURVE}, {"MOD_LATTICE", icon_items_MOD_LATTICE}, {"CONSTRAINT_DATA", icon_items_CONSTRAINT_DATA}, {"MOD_ARMATURE", icon_items_MOD_ARMATURE}, {"MOD_SHRINKWRAP", icon_items_MOD_SHRINKWRAP}, {"MOD_CAST", icon_items_MOD_CAST}, {"MOD_MESHDEFORM", icon_items_MOD_MESHDEFORM}, {"MOD_BEVEL", icon_items_MOD_BEVEL}, {"MOD_SMOOTH", icon_items_MOD_SMOOTH}, {"MOD_SIMPLEDEFORM", icon_items_MOD_SIMPLEDEFORM}, {"MOD_MASK", icon_items_MOD_MASK}, {"MOD_CLOTH", icon_items_MOD_CLOTH}, {"MOD_EXPLODE", icon_items_MOD_EXPLODE}, {"MOD_FLUIDSIM", icon_items_MOD_FLUIDSIM}, {"MOD_MULTIRES", icon_items_MOD_MULTIRES}, {"MOD_SMOKE", icon_items_MOD_SMOKE}, {"MOD_SOLIDIFY", icon_items_MOD_SOLIDIFY}, {"MOD_SCREW", icon_items_MOD_SCREW}, {"MOD_VERTEX_WEIGHT", icon_items_MOD_VERTEX_WEIGHT}, {"MOD_DYNAMICPAINT", icon_items_MOD_DYNAMICPAINT}, {"MOD_REMESH", icon_items_MOD_REMESH}, {"MOD_OCEAN", icon_items_MOD_OCEAN}, {"MOD_WARP", icon_items_MOD_WARP}, {"MOD_SKIN", icon_items_MOD_SKIN}, {"MOD_TRIANGULATE", icon_items_MOD_TRIANGULATE}, {"MOD_WIREFRAME", icon_items_MOD_WIREFRAME}, {"MOD_DATA_TRANSFER", icon_items_MOD_DATA_TRANSFER}, {"MOD_NORMALEDIT", icon_items_MOD_NORMALEDIT}, {"REC", icon_items_REC}, {"PLAY", icon_items_PLAY}, {"FF", icon_items_FF}, {"REW", icon_items_REW}, {"PAUSE", icon_items_PAUSE}, {"PREV_KEYFRAME", icon_items_PREV_KEYFRAME}, {"NEXT_KEYFRAME", icon_items_NEXT_KEYFRAME}, {"PLAY_AUDIO", icon_items_PLAY_AUDIO}, {"PLAY_REVERSE", icon_items_PLAY_REVERSE}, {"PREVIEW_RANGE", icon_items_PREVIEW_RANGE}, {"ACTION_TWEAK", icon_items_ACTION_TWEAK}, {"PMARKER_ACT", icon_items_PMARKER_ACT}, {"PMARKER_SEL", icon_items_PMARKER_SEL}, {"PMARKER", icon_items_PMARKER}, {"MARKER_HLT", icon_items_MARKER_HLT}, {"MARKER", icon_items_MARKER}, {"SPACE2", icon_items_SPACE2}, {"SPACE3", icon_items_SPACE3}, {"KEYINGSET", icon_items_KEYINGSET}, {"KEY_DEHLT", icon_items_KEY_DEHLT}, {"KEY_HLT", icon_items_KEY_HLT}, {"MUTE_IPO_OFF", icon_items_MUTE_IPO_OFF}, {"MUTE_IPO_ON", icon_items_MUTE_IPO_ON}, {"VISIBLE_IPO_OFF", icon_items_VISIBLE_IPO_OFF}, {"VISIBLE_IPO_ON", icon_items_VISIBLE_IPO_ON}, {"DRIVER", icon_items_DRIVER}, {"SOLO_OFF", icon_items_SOLO_OFF}, {"SOLO_ON", icon_items_SOLO_ON}, {"FRAME_PREV", icon_items_FRAME_PREV}, {"FRAME_NEXT", icon_items_FRAME_NEXT}, {"NLA_PUSHDOWN", icon_items_NLA_PUSHDOWN}, {"IPO_CONSTANT", icon_items_IPO_CONSTANT}, {"IPO_LINEAR", icon_items_IPO_LINEAR}, {"IPO_BEZIER", icon_items_IPO_BEZIER}, {"IPO_SINE", icon_items_IPO_SINE}, {"IPO_QUAD", icon_items_IPO_QUAD}, {"IPO_CUBIC", icon_items_IPO_CUBIC}, {"IPO_QUART", icon_items_IPO_QUART}, {"IPO_QUINT", icon_items_IPO_QUINT}, {"IPO_EXPO", icon_items_IPO_EXPO}, {"IPO_CIRC", icon_items_IPO_CIRC}, {"IPO_BOUNCE", icon_items_IPO_BOUNCE}, {"IPO_ELASTIC", icon_items_IPO_ELASTIC}, {"IPO_BACK", icon_items_IPO_BACK}, {"IPO_EASE_IN", icon_items_IPO_EASE_IN}, {"IPO_EASE_OUT", icon_items_IPO_EASE_OUT}, {"IPO_EASE_IN_OUT", icon_items_IPO_EASE_IN_OUT}, {"VERTEXSEL", icon_items_VERTEXSEL}, {"EDGESEL", icon_items_EDGESEL}, {"FACESEL", icon_items_FACESEL}, {"LOOPSEL", icon_items_LOOPSEL}, {"ROTATE", icon_items_ROTATE}, {"CURSOR", icon_items_CURSOR}, {"ROTATECOLLECTION", icon_items_ROTATECOLLECTION}, {"ROTATECENTER", icon_items_ROTATECENTER}, {"ROTACTIVE", icon_items_ROTACTIVE}, {"ALIGN", icon_items_ALIGN}, {"SMOOTHCURVE", icon_items_SMOOTHCURVE}, {"SPHERECURVE", icon_items_SPHERECURVE}, {"ROOTCURVE", icon_items_ROOTCURVE}, {"SHARPCURVE", icon_items_SHARPCURVE}, {"LINCURVE", icon_items_LINCURVE}, {"NOCURVE", icon_items_NOCURVE}, {"RNDCURVE", icon_items_RNDCURVE}, {"PROP_OFF", icon_items_PROP_OFF}, {"PROP_ON", icon_items_PROP_ON}, {"PROP_CON", icon_items_PROP_CON}, {"SCULPT_DYNTOPO", icon_items_SCULPT_DYNTOPO}, {"PARTICLE_POINT", icon_items_PARTICLE_POINT}, {"PARTICLE_TIP", icon_items_PARTICLE_TIP}, {"PARTICLE_PATH", icon_items_PARTICLE_PATH}, {"MAN_TRANS", icon_items_MAN_TRANS}, {"MAN_ROT", icon_items_MAN_ROT}, {"MAN_SCALE", icon_items_MAN_SCALE}, {"MANIPUL", icon_items_MANIPUL}, {"SNAP_OFF", icon_items_SNAP_OFF}, {"SNAP_ON", icon_items_SNAP_ON}, {"SNAP_NORMAL", icon_items_SNAP_NORMAL}, {"SNAP_INCREMENT", icon_items_SNAP_INCREMENT}, {"SNAP_VERTEX", icon_items_SNAP_VERTEX}, {"SNAP_EDGE", icon_items_SNAP_EDGE}, {"SNAP_FACE", icon_items_SNAP_FACE}, {"SNAP_VOLUME", icon_items_SNAP_VOLUME}, {"STICKY_UVS_LOC", icon_items_STICKY_UVS_LOC}, {"STICKY_UVS_DISABLE", icon_items_STICKY_UVS_DISABLE}, {"STICKY_UVS_VERT", icon_items_STICKY_UVS_VERT}, {"CLIPUV_DEHLT", icon_items_CLIPUV_DEHLT}, {"CLIPUV_HLT", icon_items_CLIPUV_HLT}, {"SNAP_PEEL_OBJECT", icon_items_SNAP_PEEL_OBJECT}, {"GRID", icon_items_GRID}, {"PASTEDOWN", icon_items_PASTEDOWN}, {"COPYDOWN", icon_items_COPYDOWN}, {"PASTEFLIPUP", icon_items_PASTEFLIPUP}, {"PASTEFLIPDOWN", icon_items_PASTEFLIPDOWN}, {"SNAP_SURFACE", icon_items_SNAP_SURFACE}, {"AUTOMERGE_ON", icon_items_AUTOMERGE_ON}, {"AUTOMERGE_OFF", icon_items_AUTOMERGE_OFF}, {"RETOPO", icon_items_RETOPO}, {"UV_VERTEXSEL", icon_items_UV_VERTEXSEL}, {"UV_EDGESEL", icon_items_UV_EDGESEL}, {"UV_FACESEL", icon_items_UV_FACESEL}, {"UV_ISLANDSEL", icon_items_UV_ISLANDSEL}, {"UV_SYNC_SELECT", icon_items_UV_SYNC_SELECT}, {"BBOX", icon_items_BBOX}, {"WIRE", icon_items_WIRE}, {"SOLID", icon_items_SOLID}, {"SMOOTH", icon_items_SMOOTH}, {"POTATO", icon_items_POTATO}, {"ORTHO", icon_items_ORTHO}, {"LOCKVIEW_OFF", icon_items_LOCKVIEW_OFF}, {"LOCKVIEW_ON", icon_items_LOCKVIEW_ON}, {"AXIS_SIDE", icon_items_AXIS_SIDE}, {"AXIS_FRONT", icon_items_AXIS_FRONT}, {"AXIS_TOP", icon_items_AXIS_TOP}, {"NDOF_DOM", icon_items_NDOF_DOM}, {"NDOF_TURN", icon_items_NDOF_TURN}, {"NDOF_FLY", icon_items_NDOF_FLY}, {"NDOF_TRANS", icon_items_NDOF_TRANS}, {"LAYER_USED", icon_items_LAYER_USED}, {"LAYER_ACTIVE", icon_items_LAYER_ACTIVE}, {"SORTALPHA", icon_items_SORTALPHA}, {"SORTBYEXT", icon_items_SORTBYEXT}, {"SORTTIME", icon_items_SORTTIME}, {"SORTSIZE", icon_items_SORTSIZE}, {"LONGDISPLAY", icon_items_LONGDISPLAY}, {"SHORTDISPLAY", icon_items_SHORTDISPLAY}, {"GHOST", icon_items_GHOST}, {"IMGDISPLAY", icon_items_IMGDISPLAY}, {"SAVE_AS", icon_items_SAVE_AS}, {"SAVE_COPY", icon_items_SAVE_COPY}, {"BOOKMARKS", icon_items_BOOKMARKS}, {"FONTPREVIEW", icon_items_FONTPREVIEW}, {"FILTER", icon_items_FILTER}, {"NEWFOLDER", icon_items_NEWFOLDER}, {"OPEN_RECENT", icon_items_OPEN_RECENT}, {"FILE_PARENT", icon_items_FILE_PARENT}, {"FILE_REFRESH", icon_items_FILE_REFRESH}, {"FILE_FOLDER", icon_items_FILE_FOLDER}, {"FILE_BLANK", icon_items_FILE_BLANK}, {"FILE_BLEND", icon_items_FILE_BLEND}, {"FILE_IMAGE", icon_items_FILE_IMAGE}, {"FILE_MOVIE", icon_items_FILE_MOVIE}, {"FILE_SCRIPT", icon_items_FILE_SCRIPT}, {"FILE_SOUND", icon_items_FILE_SOUND}, {"FILE_FONT", icon_items_FILE_FONT}, {"FILE_TEXT", icon_items_FILE_TEXT}, {"RECOVER_AUTO", icon_items_RECOVER_AUTO}, {"SAVE_PREFS", icon_items_SAVE_PREFS}, {"LINK_BLEND", icon_items_LINK_BLEND}, {"APPEND_BLEND", icon_items_APPEND_BLEND}, {"IMPORT", icon_items_IMPORT}, {"EXPORT", icon_items_EXPORT}, {"EXTERNAL_DATA", icon_items_EXTERNAL_DATA}, {"LOAD_FACTORY", icon_items_LOAD_FACTORY}, {"LOOP_BACK", icon_items_LOOP_BACK}, {"LOOP_FORWARDS", icon_items_LOOP_FORWARDS}, {"BACK", icon_items_BACK}, {"FORWARD", icon_items_FORWARD}, {"FILE_HIDDEN", icon_items_FILE_HIDDEN}, {"FILE_BACKUP", icon_items_FILE_BACKUP}, {"DISK_DRIVE", icon_items_DISK_DRIVE}, {"MATPLANE", icon_items_MATPLANE}, {"MATSPHERE", icon_items_MATSPHERE}, {"MATCUBE", icon_items_MATCUBE}, {"MONKEY", icon_items_MONKEY}, {"HAIR", icon_items_HAIR}, {"ALIASED", icon_items_ALIASED}, {"ANTIALIASED", icon_items_ANTIALIASED}, {"MAT_SPHERE_SKY", icon_items_MAT_SPHERE_SKY}, {"WORDWRAP_OFF", icon_items_WORDWRAP_OFF}, {"WORDWRAP_ON", icon_items_WORDWRAP_ON}, {"SYNTAX_OFF", icon_items_SYNTAX_OFF}, {"SYNTAX_ON", icon_items_SYNTAX_ON}, {"LINENUMBERS_OFF", icon_items_LINENUMBERS_OFF}, {"LINENUMBERS_ON", icon_items_LINENUMBERS_ON}, {"SCRIPTPLUGINS", icon_items_SCRIPTPLUGINS}, {"SEQ_SEQUENCER", icon_items_SEQ_SEQUENCER}, {"SEQ_PREVIEW", icon_items_SEQ_PREVIEW}, {"SEQ_LUMA_WAVEFORM", icon_items_SEQ_LUMA_WAVEFORM}, {"SEQ_CHROMA_SCOPE", icon_items_SEQ_CHROMA_SCOPE}, {"SEQ_HISTOGRAM", icon_items_SEQ_HISTOGRAM}, {"SEQ_SPLITVIEW", icon_items_SEQ_SPLITVIEW}, {"IMAGE_RGB", icon_items_IMAGE_RGB}, {"IMAGE_RGB_ALPHA", icon_items_IMAGE_RGB_ALPHA}, {"IMAGE_ALPHA", icon_items_IMAGE_ALPHA}, {"IMAGE_ZDEPTH", icon_items_IMAGE_ZDEPTH}, {"IMAGEFILE", icon_items_IMAGEFILE}, {"BRUSH_ADD", icon_items_BRUSH_ADD}, {"BRUSH_BLOB", icon_items_BRUSH_BLOB}, {"BRUSH_BLUR", icon_items_BRUSH_BLUR}, {"BRUSH_CLAY", icon_items_BRUSH_CLAY}, {"BRUSH_CLAY_STRIPS", icon_items_BRUSH_CLAY_STRIPS}, {"BRUSH_CLONE", icon_items_BRUSH_CLONE}, {"BRUSH_CREASE", icon_items_BRUSH_CREASE}, {"BRUSH_DARKEN", icon_items_BRUSH_DARKEN}, {"BRUSH_FILL", icon_items_BRUSH_FILL}, {"BRUSH_FLATTEN", icon_items_BRUSH_FLATTEN}, {"BRUSH_GRAB", icon_items_BRUSH_GRAB}, {"BRUSH_INFLATE", icon_items_BRUSH_INFLATE}, {"BRUSH_LAYER", icon_items_BRUSH_LAYER}, {"BRUSH_LIGHTEN", icon_items_BRUSH_LIGHTEN}, {"BRUSH_MASK", icon_items_BRUSH_MASK}, {"BRUSH_MIX", icon_items_BRUSH_MIX}, {"BRUSH_MULTIPLY", icon_items_BRUSH_MULTIPLY}, {"BRUSH_NUDGE", icon_items_BRUSH_NUDGE}, {"BRUSH_PINCH", icon_items_BRUSH_PINCH}, {"BRUSH_SCRAPE", icon_items_BRUSH_SCRAPE}, {"BRUSH_SCULPT_DRAW", icon_items_BRUSH_SCULPT_DRAW}, {"BRUSH_SMEAR", icon_items_BRUSH_SMEAR}, {"BRUSH_SMOOTH", icon_items_BRUSH_SMOOTH}, {"BRUSH_SNAKE_HOOK", icon_items_BRUSH_SNAKE_HOOK}, {"BRUSH_SOFTEN", icon_items_BRUSH_SOFTEN}, {"BRUSH_SUBTRACT", icon_items_BRUSH_SUBTRACT}, {"BRUSH_TEXDRAW", icon_items_BRUSH_TEXDRAW}, {"BRUSH_TEXFILL", icon_items_BRUSH_TEXFILL}, {"BRUSH_TEXMASK", icon_items_BRUSH_TEXMASK}, {"BRUSH_THUMB", icon_items_BRUSH_THUMB}, {"BRUSH_ROTATE", icon_items_BRUSH_ROTATE}, {"BRUSH_VERTEXDRAW", icon_items_BRUSH_VERTEXDRAW}, {"MATCAP_01", icon_items_MATCAP_01}, {"MATCAP_02", icon_items_MATCAP_02}, {"MATCAP_03", icon_items_MATCAP_03}, {"MATCAP_04", icon_items_MATCAP_04}, {"MATCAP_05", icon_items_MATCAP_05}, {"MATCAP_06", icon_items_MATCAP_06}, {"MATCAP_07", icon_items_MATCAP_07}, {"MATCAP_08", icon_items_MATCAP_08}, {"MATCAP_09", icon_items_MATCAP_09}, {"MATCAP_10", icon_items_MATCAP_10}, {"MATCAP_11", icon_items_MATCAP_11}, {"MATCAP_12", icon_items_MATCAP_12}, {"MATCAP_13", icon_items_MATCAP_13}, {"MATCAP_14", icon_items_MATCAP_14}, {"MATCAP_15", icon_items_MATCAP_15}, {"MATCAP_16", icon_items_MATCAP_16}, {"MATCAP_17", icon_items_MATCAP_17}, {"MATCAP_18", icon_items_MATCAP_18}, {"MATCAP_19", icon_items_MATCAP_19}, {"MATCAP_20", icon_items_MATCAP_20}, {"MATCAP_21", icon_items_MATCAP_21}, {"MATCAP_22", icon_items_MATCAP_22}, {"MATCAP_23", icon_items_MATCAP_23}, {"MATCAP_24", icon_items_MATCAP_24}, {"VIEW3D_VEC", icon_items_VIEW3D_VEC}, {"EDIT_VEC", icon_items_EDIT_VEC}, {"EDITMODE_VEC_DEHLT", icon_items_EDITMODE_VEC_DEHLT}, {"EDITMODE_VEC_HLT", icon_items_EDITMODE_VEC_HLT}, {"DISCLOSURE_TRI_RIGHT_VEC", icon_items_DISCLOSURE_TRI_RIGHT_VEC}, {"DISCLOSURE_TRI_DOWN_VEC", icon_items_DISCLOSURE_TRI_DOWN_VEC}, {"MOVE_UP_VEC", icon_items_MOVE_UP_VEC}, {"MOVE_DOWN_VEC", icon_items_MOVE_DOWN_VEC}, {"X_VEC", icon_items_X_VEC}, {"SMALL_TRI_RIGHT_VEC", icon_items_SMALL_TRI_RIGHT_VEC}};
	};

	std::map<int, std::string> create_icon_items_to_string() {
		return {{icon_items_NONE, "NONE"}, {icon_items_QUESTION, "QUESTION"}, {icon_items_ERROR, "ERROR"}, {icon_items_CANCEL, "CANCEL"}, {icon_items_TRIA_RIGHT, "TRIA_RIGHT"}, {icon_items_TRIA_DOWN, "TRIA_DOWN"}, {icon_items_TRIA_LEFT, "TRIA_LEFT"}, {icon_items_TRIA_UP, "TRIA_UP"}, {icon_items_ARROW_LEFTRIGHT, "ARROW_LEFTRIGHT"}, {icon_items_PLUS, "PLUS"}, {icon_items_DISCLOSURE_TRI_DOWN, "DISCLOSURE_TRI_DOWN"}, {icon_items_DISCLOSURE_TRI_RIGHT, "DISCLOSURE_TRI_RIGHT"}, {icon_items_RADIOBUT_OFF, "RADIOBUT_OFF"}, {icon_items_RADIOBUT_ON, "RADIOBUT_ON"}, {icon_items_MENU_PANEL, "MENU_PANEL"}, {icon_items_BLENDER, "BLENDER"}, {icon_items_GRIP, "GRIP"}, {icon_items_DOT, "DOT"}, {icon_items_COLLAPSEMENU, "COLLAPSEMENU"}, {icon_items_X, "X"}, {icon_items_GO_LEFT, "GO_LEFT"}, {icon_items_PLUG, "PLUG"}, {icon_items_UI, "UI"}, {icon_items_NODE, "NODE"}, {icon_items_NODE_SEL, "NODE_SEL"}, {icon_items_FULLSCREEN, "FULLSCREEN"}, {icon_items_SPLITSCREEN, "SPLITSCREEN"}, {icon_items_RIGHTARROW_THIN, "RIGHTARROW_THIN"}, {icon_items_BORDERMOVE, "BORDERMOVE"}, {icon_items_VIEWZOOM, "VIEWZOOM"}, {icon_items_ZOOMIN, "ZOOMIN"}, {icon_items_ZOOMOUT, "ZOOMOUT"}, {icon_items_PANEL_CLOSE, "PANEL_CLOSE"}, {icon_items_COPY_ID, "COPY_ID"}, {icon_items_EYEDROPPER, "EYEDROPPER"}, {icon_items_LINK_AREA, "LINK_AREA"}, {icon_items_AUTO, "AUTO"}, {icon_items_CHECKBOX_DEHLT, "CHECKBOX_DEHLT"}, {icon_items_CHECKBOX_HLT, "CHECKBOX_HLT"}, {icon_items_UNLOCKED, "UNLOCKED"}, {icon_items_LOCKED, "LOCKED"}, {icon_items_UNPINNED, "UNPINNED"}, {icon_items_PINNED, "PINNED"}, {icon_items_SCREEN_BACK, "SCREEN_BACK"}, {icon_items_RIGHTARROW, "RIGHTARROW"}, {icon_items_DOWNARROW_HLT, "DOWNARROW_HLT"}, {icon_items_DOTSUP, "DOTSUP"}, {icon_items_DOTSDOWN, "DOTSDOWN"}, {icon_items_LINK, "LINK"}, {icon_items_INLINK, "INLINK"}, {icon_items_PLUGIN, "PLUGIN"}, {icon_items_HELP, "HELP"}, {icon_items_GHOST_ENABLED, "GHOST_ENABLED"}, {icon_items_COLOR, "COLOR"}, {icon_items_LINKED, "LINKED"}, {icon_items_UNLINKED, "UNLINKED"}, {icon_items_HAND, "HAND"}, {icon_items_ZOOM_ALL, "ZOOM_ALL"}, {icon_items_ZOOM_SELECTED, "ZOOM_SELECTED"}, {icon_items_ZOOM_PREVIOUS, "ZOOM_PREVIOUS"}, {icon_items_ZOOM_IN, "ZOOM_IN"}, {icon_items_ZOOM_OUT, "ZOOM_OUT"}, {icon_items_RENDER_REGION, "RENDER_REGION"}, {icon_items_BORDER_RECT, "BORDER_RECT"}, {icon_items_BORDER_LASSO, "BORDER_LASSO"}, {icon_items_FREEZE, "FREEZE"}, {icon_items_STYLUS_PRESSURE, "STYLUS_PRESSURE"}, {icon_items_GHOST_DISABLED, "GHOST_DISABLED"}, {icon_items_NEW, "NEW"}, {icon_items_FILE_TICK, "FILE_TICK"}, {icon_items_QUIT, "QUIT"}, {icon_items_URL, "URL"}, {icon_items_RECOVER_LAST, "RECOVER_LAST"}, {icon_items_FULLSCREEN_ENTER, "FULLSCREEN_ENTER"}, {icon_items_FULLSCREEN_EXIT, "FULLSCREEN_EXIT"}, {icon_items_BLANK1, "BLANK1"}, {icon_items_LAMP, "LAMP"}, {icon_items_MATERIAL, "MATERIAL"}, {icon_items_TEXTURE, "TEXTURE"}, {icon_items_ANIM, "ANIM"}, {icon_items_WORLD, "WORLD"}, {icon_items_SCENE, "SCENE"}, {icon_items_EDIT, "EDIT"}, {icon_items_GAME, "GAME"}, {icon_items_RADIO, "RADIO"}, {icon_items_SCRIPT, "SCRIPT"}, {icon_items_PARTICLES, "PARTICLES"}, {icon_items_PHYSICS, "PHYSICS"}, {icon_items_SPEAKER, "SPEAKER"}, {icon_items_TEXTURE_SHADED, "TEXTURE_SHADED"}, {icon_items_VIEW3D, "VIEW3D"}, {icon_items_IPO, "IPO"}, {icon_items_OOPS, "OOPS"}, {icon_items_BUTS, "BUTS"}, {icon_items_FILESEL, "FILESEL"}, {icon_items_IMAGE_COL, "IMAGE_COL"}, {icon_items_INFO, "INFO"}, {icon_items_SEQUENCE, "SEQUENCE"}, {icon_items_TEXT, "TEXT"}, {icon_items_IMASEL, "IMASEL"}, {icon_items_SOUND, "SOUND"}, {icon_items_ACTION, "ACTION"}, {icon_items_NLA, "NLA"}, {icon_items_SCRIPTWIN, "SCRIPTWIN"}, {icon_items_TIME, "TIME"}, {icon_items_NODETREE, "NODETREE"}, {icon_items_LOGIC, "LOGIC"}, {icon_items_CONSOLE, "CONSOLE"}, {icon_items_PREFERENCES, "PREFERENCES"}, {icon_items_CLIP, "CLIP"}, {icon_items_ASSET_MANAGER, "ASSET_MANAGER"}, {icon_items_OBJECT_DATAMODE, "OBJECT_DATAMODE"}, {icon_items_EDITMODE_HLT, "EDITMODE_HLT"}, {icon_items_FACESEL_HLT, "FACESEL_HLT"}, {icon_items_VPAINT_HLT, "VPAINT_HLT"}, {icon_items_TPAINT_HLT, "TPAINT_HLT"}, {icon_items_WPAINT_HLT, "WPAINT_HLT"}, {icon_items_SCULPTMODE_HLT, "SCULPTMODE_HLT"}, {icon_items_POSE_HLT, "POSE_HLT"}, {icon_items_PARTICLEMODE, "PARTICLEMODE"}, {icon_items_LIGHTPAINT, "LIGHTPAINT"}, {icon_items_SCENE_DATA, "SCENE_DATA"}, {icon_items_RENDERLAYERS, "RENDERLAYERS"}, {icon_items_WORLD_DATA, "WORLD_DATA"}, {icon_items_OBJECT_DATA, "OBJECT_DATA"}, {icon_items_MESH_DATA, "MESH_DATA"}, {icon_items_CURVE_DATA, "CURVE_DATA"}, {icon_items_META_DATA, "META_DATA"}, {icon_items_LATTICE_DATA, "LATTICE_DATA"}, {icon_items_LAMP_DATA, "LAMP_DATA"}, {icon_items_MATERIAL_DATA, "MATERIAL_DATA"}, {icon_items_TEXTURE_DATA, "TEXTURE_DATA"}, {icon_items_ANIM_DATA, "ANIM_DATA"}, {icon_items_CAMERA_DATA, "CAMERA_DATA"}, {icon_items_PARTICLE_DATA, "PARTICLE_DATA"}, {icon_items_LIBRARY_DATA_DIRECT, "LIBRARY_DATA_DIRECT"}, {icon_items_GROUP, "GROUP"}, {icon_items_ARMATURE_DATA, "ARMATURE_DATA"}, {icon_items_POSE_DATA, "POSE_DATA"}, {icon_items_BONE_DATA, "BONE_DATA"}, {icon_items_CONSTRAINT, "CONSTRAINT"}, {icon_items_SHAPEKEY_DATA, "SHAPEKEY_DATA"}, {icon_items_CONSTRAINT_BONE, "CONSTRAINT_BONE"}, {icon_items_CAMERA_STEREO, "CAMERA_STEREO"}, {icon_items_PACKAGE, "PACKAGE"}, {icon_items_UGLYPACKAGE, "UGLYPACKAGE"}, {icon_items_BRUSH_DATA, "BRUSH_DATA"}, {icon_items_IMAGE_DATA, "IMAGE_DATA"}, {icon_items_FILE, "FILE"}, {icon_items_FCURVE, "FCURVE"}, {icon_items_FONT_DATA, "FONT_DATA"}, {icon_items_RENDER_RESULT, "RENDER_RESULT"}, {icon_items_SURFACE_DATA, "SURFACE_DATA"}, {icon_items_EMPTY_DATA, "EMPTY_DATA"}, {icon_items_SETTINGS, "SETTINGS"}, {icon_items_RENDER_ANIMATION, "RENDER_ANIMATION"}, {icon_items_RENDER_STILL, "RENDER_STILL"}, {icon_items_LIBRARY_DATA_BROKEN, "LIBRARY_DATA_BROKEN"}, {icon_items_BOIDS, "BOIDS"}, {icon_items_STRANDS, "STRANDS"}, {icon_items_LIBRARY_DATA_INDIRECT, "LIBRARY_DATA_INDIRECT"}, {icon_items_GREASEPENCIL, "GREASEPENCIL"}, {icon_items_LINE_DATA, "LINE_DATA"}, {icon_items_GROUP_BONE, "GROUP_BONE"}, {icon_items_GROUP_VERTEX, "GROUP_VERTEX"}, {icon_items_GROUP_VCOL, "GROUP_VCOL"}, {icon_items_GROUP_UVS, "GROUP_UVS"}, {icon_items_RNA, "RNA"}, {icon_items_RNA_ADD, "RNA_ADD"}, {icon_items_OUTLINER_OB_EMPTY, "OUTLINER_OB_EMPTY"}, {icon_items_OUTLINER_OB_MESH, "OUTLINER_OB_MESH"}, {icon_items_OUTLINER_OB_CURVE, "OUTLINER_OB_CURVE"}, {icon_items_OUTLINER_OB_LATTICE, "OUTLINER_OB_LATTICE"}, {icon_items_OUTLINER_OB_META, "OUTLINER_OB_META"}, {icon_items_OUTLINER_OB_LAMP, "OUTLINER_OB_LAMP"}, {icon_items_OUTLINER_OB_CAMERA, "OUTLINER_OB_CAMERA"}, {icon_items_OUTLINER_OB_ARMATURE, "OUTLINER_OB_ARMATURE"}, {icon_items_OUTLINER_OB_FONT, "OUTLINER_OB_FONT"}, {icon_items_OUTLINER_OB_SURFACE, "OUTLINER_OB_SURFACE"}, {icon_items_OUTLINER_OB_SPEAKER, "OUTLINER_OB_SPEAKER"}, {icon_items_RESTRICT_VIEW_OFF, "RESTRICT_VIEW_OFF"}, {icon_items_RESTRICT_VIEW_ON, "RESTRICT_VIEW_ON"}, {icon_items_RESTRICT_SELECT_OFF, "RESTRICT_SELECT_OFF"}, {icon_items_RESTRICT_SELECT_ON, "RESTRICT_SELECT_ON"}, {icon_items_RESTRICT_RENDER_OFF, "RESTRICT_RENDER_OFF"}, {icon_items_RESTRICT_RENDER_ON, "RESTRICT_RENDER_ON"}, {icon_items_OUTLINER_DATA_EMPTY, "OUTLINER_DATA_EMPTY"}, {icon_items_OUTLINER_DATA_MESH, "OUTLINER_DATA_MESH"}, {icon_items_OUTLINER_DATA_CURVE, "OUTLINER_DATA_CURVE"}, {icon_items_OUTLINER_DATA_LATTICE, "OUTLINER_DATA_LATTICE"}, {icon_items_OUTLINER_DATA_META, "OUTLINER_DATA_META"}, {icon_items_OUTLINER_DATA_LAMP, "OUTLINER_DATA_LAMP"}, {icon_items_OUTLINER_DATA_CAMERA, "OUTLINER_DATA_CAMERA"}, {icon_items_OUTLINER_DATA_ARMATURE, "OUTLINER_DATA_ARMATURE"}, {icon_items_OUTLINER_DATA_FONT, "OUTLINER_DATA_FONT"}, {icon_items_OUTLINER_DATA_SURFACE, "OUTLINER_DATA_SURFACE"}, {icon_items_OUTLINER_DATA_SPEAKER, "OUTLINER_DATA_SPEAKER"}, {icon_items_OUTLINER_DATA_POSE, "OUTLINER_DATA_POSE"}, {icon_items_MESH_PLANE, "MESH_PLANE"}, {icon_items_MESH_CUBE, "MESH_CUBE"}, {icon_items_MESH_CIRCLE, "MESH_CIRCLE"}, {icon_items_MESH_UVSPHERE, "MESH_UVSPHERE"}, {icon_items_MESH_ICOSPHERE, "MESH_ICOSPHERE"}, {icon_items_MESH_GRID, "MESH_GRID"}, {icon_items_MESH_MONKEY, "MESH_MONKEY"}, {icon_items_MESH_CYLINDER, "MESH_CYLINDER"}, {icon_items_MESH_TORUS, "MESH_TORUS"}, {icon_items_MESH_CONE, "MESH_CONE"}, {icon_items_LAMP_POINT, "LAMP_POINT"}, {icon_items_LAMP_SUN, "LAMP_SUN"}, {icon_items_LAMP_SPOT, "LAMP_SPOT"}, {icon_items_LAMP_HEMI, "LAMP_HEMI"}, {icon_items_LAMP_AREA, "LAMP_AREA"}, {icon_items_META_EMPTY, "META_EMPTY"}, {icon_items_META_PLANE, "META_PLANE"}, {icon_items_META_CUBE, "META_CUBE"}, {icon_items_META_BALL, "META_BALL"}, {icon_items_META_ELLIPSOID, "META_ELLIPSOID"}, {icon_items_META_CAPSULE, "META_CAPSULE"}, {icon_items_SURFACE_NCURVE, "SURFACE_NCURVE"}, {icon_items_SURFACE_NCIRCLE, "SURFACE_NCIRCLE"}, {icon_items_SURFACE_NSURFACE, "SURFACE_NSURFACE"}, {icon_items_SURFACE_NCYLINDER, "SURFACE_NCYLINDER"}, {icon_items_SURFACE_NSPHERE, "SURFACE_NSPHERE"}, {icon_items_SURFACE_NTORUS, "SURFACE_NTORUS"}, {icon_items_CURVE_BEZCURVE, "CURVE_BEZCURVE"}, {icon_items_CURVE_BEZCIRCLE, "CURVE_BEZCIRCLE"}, {icon_items_CURVE_NCURVE, "CURVE_NCURVE"}, {icon_items_CURVE_NCIRCLE, "CURVE_NCIRCLE"}, {icon_items_CURVE_PATH, "CURVE_PATH"}, {icon_items_COLOR_RED, "COLOR_RED"}, {icon_items_COLOR_GREEN, "COLOR_GREEN"}, {icon_items_COLOR_BLUE, "COLOR_BLUE"}, {icon_items_TRIA_RIGHT_BAR, "TRIA_RIGHT_BAR"}, {icon_items_TRIA_DOWN_BAR, "TRIA_DOWN_BAR"}, {icon_items_TRIA_LEFT_BAR, "TRIA_LEFT_BAR"}, {icon_items_TRIA_UP_BAR, "TRIA_UP_BAR"}, {icon_items_FORCE_FORCE, "FORCE_FORCE"}, {icon_items_FORCE_WIND, "FORCE_WIND"}, {icon_items_FORCE_VORTEX, "FORCE_VORTEX"}, {icon_items_FORCE_MAGNETIC, "FORCE_MAGNETIC"}, {icon_items_FORCE_HARMONIC, "FORCE_HARMONIC"}, {icon_items_FORCE_CHARGE, "FORCE_CHARGE"}, {icon_items_FORCE_LENNARDJONES, "FORCE_LENNARDJONES"}, {icon_items_FORCE_TEXTURE, "FORCE_TEXTURE"}, {icon_items_FORCE_CURVE, "FORCE_CURVE"}, {icon_items_FORCE_BOID, "FORCE_BOID"}, {icon_items_FORCE_TURBULENCE, "FORCE_TURBULENCE"}, {icon_items_FORCE_DRAG, "FORCE_DRAG"}, {icon_items_FORCE_SMOKEFLOW, "FORCE_SMOKEFLOW"}, {icon_items_MODIFIER, "MODIFIER"}, {icon_items_MOD_WAVE, "MOD_WAVE"}, {icon_items_MOD_BUILD, "MOD_BUILD"}, {icon_items_MOD_DECIM, "MOD_DECIM"}, {icon_items_MOD_MIRROR, "MOD_MIRROR"}, {icon_items_MOD_SOFT, "MOD_SOFT"}, {icon_items_MOD_SUBSURF, "MOD_SUBSURF"}, {icon_items_HOOK, "HOOK"}, {icon_items_MOD_PHYSICS, "MOD_PHYSICS"}, {icon_items_MOD_PARTICLES, "MOD_PARTICLES"}, {icon_items_MOD_BOOLEAN, "MOD_BOOLEAN"}, {icon_items_MOD_EDGESPLIT, "MOD_EDGESPLIT"}, {icon_items_MOD_ARRAY, "MOD_ARRAY"}, {icon_items_MOD_UVPROJECT, "MOD_UVPROJECT"}, {icon_items_MOD_DISPLACE, "MOD_DISPLACE"}, {icon_items_MOD_CURVE, "MOD_CURVE"}, {icon_items_MOD_LATTICE, "MOD_LATTICE"}, {icon_items_CONSTRAINT_DATA, "CONSTRAINT_DATA"}, {icon_items_MOD_ARMATURE, "MOD_ARMATURE"}, {icon_items_MOD_SHRINKWRAP, "MOD_SHRINKWRAP"}, {icon_items_MOD_CAST, "MOD_CAST"}, {icon_items_MOD_MESHDEFORM, "MOD_MESHDEFORM"}, {icon_items_MOD_BEVEL, "MOD_BEVEL"}, {icon_items_MOD_SMOOTH, "MOD_SMOOTH"}, {icon_items_MOD_SIMPLEDEFORM, "MOD_SIMPLEDEFORM"}, {icon_items_MOD_MASK, "MOD_MASK"}, {icon_items_MOD_CLOTH, "MOD_CLOTH"}, {icon_items_MOD_EXPLODE, "MOD_EXPLODE"}, {icon_items_MOD_FLUIDSIM, "MOD_FLUIDSIM"}, {icon_items_MOD_MULTIRES, "MOD_MULTIRES"}, {icon_items_MOD_SMOKE, "MOD_SMOKE"}, {icon_items_MOD_SOLIDIFY, "MOD_SOLIDIFY"}, {icon_items_MOD_SCREW, "MOD_SCREW"}, {icon_items_MOD_VERTEX_WEIGHT, "MOD_VERTEX_WEIGHT"}, {icon_items_MOD_DYNAMICPAINT, "MOD_DYNAMICPAINT"}, {icon_items_MOD_REMESH, "MOD_REMESH"}, {icon_items_MOD_OCEAN, "MOD_OCEAN"}, {icon_items_MOD_WARP, "MOD_WARP"}, {icon_items_MOD_SKIN, "MOD_SKIN"}, {icon_items_MOD_TRIANGULATE, "MOD_TRIANGULATE"}, {icon_items_MOD_WIREFRAME, "MOD_WIREFRAME"}, {icon_items_MOD_DATA_TRANSFER, "MOD_DATA_TRANSFER"}, {icon_items_MOD_NORMALEDIT, "MOD_NORMALEDIT"}, {icon_items_REC, "REC"}, {icon_items_PLAY, "PLAY"}, {icon_items_FF, "FF"}, {icon_items_REW, "REW"}, {icon_items_PAUSE, "PAUSE"}, {icon_items_PREV_KEYFRAME, "PREV_KEYFRAME"}, {icon_items_NEXT_KEYFRAME, "NEXT_KEYFRAME"}, {icon_items_PLAY_AUDIO, "PLAY_AUDIO"}, {icon_items_PLAY_REVERSE, "PLAY_REVERSE"}, {icon_items_PREVIEW_RANGE, "PREVIEW_RANGE"}, {icon_items_ACTION_TWEAK, "ACTION_TWEAK"}, {icon_items_PMARKER_ACT, "PMARKER_ACT"}, {icon_items_PMARKER_SEL, "PMARKER_SEL"}, {icon_items_PMARKER, "PMARKER"}, {icon_items_MARKER_HLT, "MARKER_HLT"}, {icon_items_MARKER, "MARKER"}, {icon_items_SPACE2, "SPACE2"}, {icon_items_SPACE3, "SPACE3"}, {icon_items_KEYINGSET, "KEYINGSET"}, {icon_items_KEY_DEHLT, "KEY_DEHLT"}, {icon_items_KEY_HLT, "KEY_HLT"}, {icon_items_MUTE_IPO_OFF, "MUTE_IPO_OFF"}, {icon_items_MUTE_IPO_ON, "MUTE_IPO_ON"}, {icon_items_VISIBLE_IPO_OFF, "VISIBLE_IPO_OFF"}, {icon_items_VISIBLE_IPO_ON, "VISIBLE_IPO_ON"}, {icon_items_DRIVER, "DRIVER"}, {icon_items_SOLO_OFF, "SOLO_OFF"}, {icon_items_SOLO_ON, "SOLO_ON"}, {icon_items_FRAME_PREV, "FRAME_PREV"}, {icon_items_FRAME_NEXT, "FRAME_NEXT"}, {icon_items_NLA_PUSHDOWN, "NLA_PUSHDOWN"}, {icon_items_IPO_CONSTANT, "IPO_CONSTANT"}, {icon_items_IPO_LINEAR, "IPO_LINEAR"}, {icon_items_IPO_BEZIER, "IPO_BEZIER"}, {icon_items_IPO_SINE, "IPO_SINE"}, {icon_items_IPO_QUAD, "IPO_QUAD"}, {icon_items_IPO_CUBIC, "IPO_CUBIC"}, {icon_items_IPO_QUART, "IPO_QUART"}, {icon_items_IPO_QUINT, "IPO_QUINT"}, {icon_items_IPO_EXPO, "IPO_EXPO"}, {icon_items_IPO_CIRC, "IPO_CIRC"}, {icon_items_IPO_BOUNCE, "IPO_BOUNCE"}, {icon_items_IPO_ELASTIC, "IPO_ELASTIC"}, {icon_items_IPO_BACK, "IPO_BACK"}, {icon_items_IPO_EASE_IN, "IPO_EASE_IN"}, {icon_items_IPO_EASE_OUT, "IPO_EASE_OUT"}, {icon_items_IPO_EASE_IN_OUT, "IPO_EASE_IN_OUT"}, {icon_items_VERTEXSEL, "VERTEXSEL"}, {icon_items_EDGESEL, "EDGESEL"}, {icon_items_FACESEL, "FACESEL"}, {icon_items_LOOPSEL, "LOOPSEL"}, {icon_items_ROTATE, "ROTATE"}, {icon_items_CURSOR, "CURSOR"}, {icon_items_ROTATECOLLECTION, "ROTATECOLLECTION"}, {icon_items_ROTATECENTER, "ROTATECENTER"}, {icon_items_ROTACTIVE, "ROTACTIVE"}, {icon_items_ALIGN, "ALIGN"}, {icon_items_SMOOTHCURVE, "SMOOTHCURVE"}, {icon_items_SPHERECURVE, "SPHERECURVE"}, {icon_items_ROOTCURVE, "ROOTCURVE"}, {icon_items_SHARPCURVE, "SHARPCURVE"}, {icon_items_LINCURVE, "LINCURVE"}, {icon_items_NOCURVE, "NOCURVE"}, {icon_items_RNDCURVE, "RNDCURVE"}, {icon_items_PROP_OFF, "PROP_OFF"}, {icon_items_PROP_ON, "PROP_ON"}, {icon_items_PROP_CON, "PROP_CON"}, {icon_items_SCULPT_DYNTOPO, "SCULPT_DYNTOPO"}, {icon_items_PARTICLE_POINT, "PARTICLE_POINT"}, {icon_items_PARTICLE_TIP, "PARTICLE_TIP"}, {icon_items_PARTICLE_PATH, "PARTICLE_PATH"}, {icon_items_MAN_TRANS, "MAN_TRANS"}, {icon_items_MAN_ROT, "MAN_ROT"}, {icon_items_MAN_SCALE, "MAN_SCALE"}, {icon_items_MANIPUL, "MANIPUL"}, {icon_items_SNAP_OFF, "SNAP_OFF"}, {icon_items_SNAP_ON, "SNAP_ON"}, {icon_items_SNAP_NORMAL, "SNAP_NORMAL"}, {icon_items_SNAP_INCREMENT, "SNAP_INCREMENT"}, {icon_items_SNAP_VERTEX, "SNAP_VERTEX"}, {icon_items_SNAP_EDGE, "SNAP_EDGE"}, {icon_items_SNAP_FACE, "SNAP_FACE"}, {icon_items_SNAP_VOLUME, "SNAP_VOLUME"}, {icon_items_STICKY_UVS_LOC, "STICKY_UVS_LOC"}, {icon_items_STICKY_UVS_DISABLE, "STICKY_UVS_DISABLE"}, {icon_items_STICKY_UVS_VERT, "STICKY_UVS_VERT"}, {icon_items_CLIPUV_DEHLT, "CLIPUV_DEHLT"}, {icon_items_CLIPUV_HLT, "CLIPUV_HLT"}, {icon_items_SNAP_PEEL_OBJECT, "SNAP_PEEL_OBJECT"}, {icon_items_GRID, "GRID"}, {icon_items_PASTEDOWN, "PASTEDOWN"}, {icon_items_COPYDOWN, "COPYDOWN"}, {icon_items_PASTEFLIPUP, "PASTEFLIPUP"}, {icon_items_PASTEFLIPDOWN, "PASTEFLIPDOWN"}, {icon_items_SNAP_SURFACE, "SNAP_SURFACE"}, {icon_items_AUTOMERGE_ON, "AUTOMERGE_ON"}, {icon_items_AUTOMERGE_OFF, "AUTOMERGE_OFF"}, {icon_items_RETOPO, "RETOPO"}, {icon_items_UV_VERTEXSEL, "UV_VERTEXSEL"}, {icon_items_UV_EDGESEL, "UV_EDGESEL"}, {icon_items_UV_FACESEL, "UV_FACESEL"}, {icon_items_UV_ISLANDSEL, "UV_ISLANDSEL"}, {icon_items_UV_SYNC_SELECT, "UV_SYNC_SELECT"}, {icon_items_BBOX, "BBOX"}, {icon_items_WIRE, "WIRE"}, {icon_items_SOLID, "SOLID"}, {icon_items_SMOOTH, "SMOOTH"}, {icon_items_POTATO, "POTATO"}, {icon_items_ORTHO, "ORTHO"}, {icon_items_LOCKVIEW_OFF, "LOCKVIEW_OFF"}, {icon_items_LOCKVIEW_ON, "LOCKVIEW_ON"}, {icon_items_AXIS_SIDE, "AXIS_SIDE"}, {icon_items_AXIS_FRONT, "AXIS_FRONT"}, {icon_items_AXIS_TOP, "AXIS_TOP"}, {icon_items_NDOF_DOM, "NDOF_DOM"}, {icon_items_NDOF_TURN, "NDOF_TURN"}, {icon_items_NDOF_FLY, "NDOF_FLY"}, {icon_items_NDOF_TRANS, "NDOF_TRANS"}, {icon_items_LAYER_USED, "LAYER_USED"}, {icon_items_LAYER_ACTIVE, "LAYER_ACTIVE"}, {icon_items_SORTALPHA, "SORTALPHA"}, {icon_items_SORTBYEXT, "SORTBYEXT"}, {icon_items_SORTTIME, "SORTTIME"}, {icon_items_SORTSIZE, "SORTSIZE"}, {icon_items_LONGDISPLAY, "LONGDISPLAY"}, {icon_items_SHORTDISPLAY, "SHORTDISPLAY"}, {icon_items_GHOST, "GHOST"}, {icon_items_IMGDISPLAY, "IMGDISPLAY"}, {icon_items_SAVE_AS, "SAVE_AS"}, {icon_items_SAVE_COPY, "SAVE_COPY"}, {icon_items_BOOKMARKS, "BOOKMARKS"}, {icon_items_FONTPREVIEW, "FONTPREVIEW"}, {icon_items_FILTER, "FILTER"}, {icon_items_NEWFOLDER, "NEWFOLDER"}, {icon_items_OPEN_RECENT, "OPEN_RECENT"}, {icon_items_FILE_PARENT, "FILE_PARENT"}, {icon_items_FILE_REFRESH, "FILE_REFRESH"}, {icon_items_FILE_FOLDER, "FILE_FOLDER"}, {icon_items_FILE_BLANK, "FILE_BLANK"}, {icon_items_FILE_BLEND, "FILE_BLEND"}, {icon_items_FILE_IMAGE, "FILE_IMAGE"}, {icon_items_FILE_MOVIE, "FILE_MOVIE"}, {icon_items_FILE_SCRIPT, "FILE_SCRIPT"}, {icon_items_FILE_SOUND, "FILE_SOUND"}, {icon_items_FILE_FONT, "FILE_FONT"}, {icon_items_FILE_TEXT, "FILE_TEXT"}, {icon_items_RECOVER_AUTO, "RECOVER_AUTO"}, {icon_items_SAVE_PREFS, "SAVE_PREFS"}, {icon_items_LINK_BLEND, "LINK_BLEND"}, {icon_items_APPEND_BLEND, "APPEND_BLEND"}, {icon_items_IMPORT, "IMPORT"}, {icon_items_EXPORT, "EXPORT"}, {icon_items_EXTERNAL_DATA, "EXTERNAL_DATA"}, {icon_items_LOAD_FACTORY, "LOAD_FACTORY"}, {icon_items_LOOP_BACK, "LOOP_BACK"}, {icon_items_LOOP_FORWARDS, "LOOP_FORWARDS"}, {icon_items_BACK, "BACK"}, {icon_items_FORWARD, "FORWARD"}, {icon_items_FILE_HIDDEN, "FILE_HIDDEN"}, {icon_items_FILE_BACKUP, "FILE_BACKUP"}, {icon_items_DISK_DRIVE, "DISK_DRIVE"}, {icon_items_MATPLANE, "MATPLANE"}, {icon_items_MATSPHERE, "MATSPHERE"}, {icon_items_MATCUBE, "MATCUBE"}, {icon_items_MONKEY, "MONKEY"}, {icon_items_HAIR, "HAIR"}, {icon_items_ALIASED, "ALIASED"}, {icon_items_ANTIALIASED, "ANTIALIASED"}, {icon_items_MAT_SPHERE_SKY, "MAT_SPHERE_SKY"}, {icon_items_WORDWRAP_OFF, "WORDWRAP_OFF"}, {icon_items_WORDWRAP_ON, "WORDWRAP_ON"}, {icon_items_SYNTAX_OFF, "SYNTAX_OFF"}, {icon_items_SYNTAX_ON, "SYNTAX_ON"}, {icon_items_LINENUMBERS_OFF, "LINENUMBERS_OFF"}, {icon_items_LINENUMBERS_ON, "LINENUMBERS_ON"}, {icon_items_SCRIPTPLUGINS, "SCRIPTPLUGINS"}, {icon_items_SEQ_SEQUENCER, "SEQ_SEQUENCER"}, {icon_items_SEQ_PREVIEW, "SEQ_PREVIEW"}, {icon_items_SEQ_LUMA_WAVEFORM, "SEQ_LUMA_WAVEFORM"}, {icon_items_SEQ_CHROMA_SCOPE, "SEQ_CHROMA_SCOPE"}, {icon_items_SEQ_HISTOGRAM, "SEQ_HISTOGRAM"}, {icon_items_SEQ_SPLITVIEW, "SEQ_SPLITVIEW"}, {icon_items_IMAGE_RGB, "IMAGE_RGB"}, {icon_items_IMAGE_RGB_ALPHA, "IMAGE_RGB_ALPHA"}, {icon_items_IMAGE_ALPHA, "IMAGE_ALPHA"}, {icon_items_IMAGE_ZDEPTH, "IMAGE_ZDEPTH"}, {icon_items_IMAGEFILE, "IMAGEFILE"}, {icon_items_BRUSH_ADD, "BRUSH_ADD"}, {icon_items_BRUSH_BLOB, "BRUSH_BLOB"}, {icon_items_BRUSH_BLUR, "BRUSH_BLUR"}, {icon_items_BRUSH_CLAY, "BRUSH_CLAY"}, {icon_items_BRUSH_CLAY_STRIPS, "BRUSH_CLAY_STRIPS"}, {icon_items_BRUSH_CLONE, "BRUSH_CLONE"}, {icon_items_BRUSH_CREASE, "BRUSH_CREASE"}, {icon_items_BRUSH_DARKEN, "BRUSH_DARKEN"}, {icon_items_BRUSH_FILL, "BRUSH_FILL"}, {icon_items_BRUSH_FLATTEN, "BRUSH_FLATTEN"}, {icon_items_BRUSH_GRAB, "BRUSH_GRAB"}, {icon_items_BRUSH_INFLATE, "BRUSH_INFLATE"}, {icon_items_BRUSH_LAYER, "BRUSH_LAYER"}, {icon_items_BRUSH_LIGHTEN, "BRUSH_LIGHTEN"}, {icon_items_BRUSH_MASK, "BRUSH_MASK"}, {icon_items_BRUSH_MIX, "BRUSH_MIX"}, {icon_items_BRUSH_MULTIPLY, "BRUSH_MULTIPLY"}, {icon_items_BRUSH_NUDGE, "BRUSH_NUDGE"}, {icon_items_BRUSH_PINCH, "BRUSH_PINCH"}, {icon_items_BRUSH_SCRAPE, "BRUSH_SCRAPE"}, {icon_items_BRUSH_SCULPT_DRAW, "BRUSH_SCULPT_DRAW"}, {icon_items_BRUSH_SMEAR, "BRUSH_SMEAR"}, {icon_items_BRUSH_SMOOTH, "BRUSH_SMOOTH"}, {icon_items_BRUSH_SNAKE_HOOK, "BRUSH_SNAKE_HOOK"}, {icon_items_BRUSH_SOFTEN, "BRUSH_SOFTEN"}, {icon_items_BRUSH_SUBTRACT, "BRUSH_SUBTRACT"}, {icon_items_BRUSH_TEXDRAW, "BRUSH_TEXDRAW"}, {icon_items_BRUSH_TEXFILL, "BRUSH_TEXFILL"}, {icon_items_BRUSH_TEXMASK, "BRUSH_TEXMASK"}, {icon_items_BRUSH_THUMB, "BRUSH_THUMB"}, {icon_items_BRUSH_ROTATE, "BRUSH_ROTATE"}, {icon_items_BRUSH_VERTEXDRAW, "BRUSH_VERTEXDRAW"}, {icon_items_MATCAP_01, "MATCAP_01"}, {icon_items_MATCAP_02, "MATCAP_02"}, {icon_items_MATCAP_03, "MATCAP_03"}, {icon_items_MATCAP_04, "MATCAP_04"}, {icon_items_MATCAP_05, "MATCAP_05"}, {icon_items_MATCAP_06, "MATCAP_06"}, {icon_items_MATCAP_07, "MATCAP_07"}, {icon_items_MATCAP_08, "MATCAP_08"}, {icon_items_MATCAP_09, "MATCAP_09"}, {icon_items_MATCAP_10, "MATCAP_10"}, {icon_items_MATCAP_11, "MATCAP_11"}, {icon_items_MATCAP_12, "MATCAP_12"}, {icon_items_MATCAP_13, "MATCAP_13"}, {icon_items_MATCAP_14, "MATCAP_14"}, {icon_items_MATCAP_15, "MATCAP_15"}, {icon_items_MATCAP_16, "MATCAP_16"}, {icon_items_MATCAP_17, "MATCAP_17"}, {icon_items_MATCAP_18, "MATCAP_18"}, {icon_items_MATCAP_19, "MATCAP_19"}, {icon_items_MATCAP_20, "MATCAP_20"}, {icon_items_MATCAP_21, "MATCAP_21"}, {icon_items_MATCAP_22, "MATCAP_22"}, {icon_items_MATCAP_23, "MATCAP_23"}, {icon_items_MATCAP_24, "MATCAP_24"}, {icon_items_VIEW3D_VEC, "VIEW3D_VEC"}, {icon_items_EDIT_VEC, "EDIT_VEC"}, {icon_items_EDITMODE_VEC_DEHLT, "EDITMODE_VEC_DEHLT"}, {icon_items_EDITMODE_VEC_HLT, "EDITMODE_VEC_HLT"}, {icon_items_DISCLOSURE_TRI_RIGHT_VEC, "DISCLOSURE_TRI_RIGHT_VEC"}, {icon_items_DISCLOSURE_TRI_DOWN_VEC, "DISCLOSURE_TRI_DOWN_VEC"}, {icon_items_MOVE_UP_VEC, "MOVE_UP_VEC"}, {icon_items_MOVE_DOWN_VEC, "MOVE_DOWN_VEC"}, {icon_items_X_VEC, "X_VEC"}, {icon_items_SMALL_TRI_RIGHT_VEC, "SMALL_TRI_RIGHT_VEC"}};
	};

	const std::map<std::string, int> string_to_icon_items = create_string_to_icon_items();
	const std::map<int, std::string> icon_items_to_string = create_icon_items_to_string();

	void prop(AnyType data, const std::string property, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE, bool expand = false, bool slider = false, bool toggle = false, bool icon_only = false, bool event = false, bool full_event = false, bool emboss = true, int index = -1, int icon_value = 0) {
		PYTHON_FUNCTION_ARGS_CALL("prop", "Osssisiiiiiiiii", data.get_pyobjref(), property, text, text_ctxt, translate, icon_items_to_string.at(icon), expand, slider, toggle, icon_only, event, full_event, emboss, index, icon_value)
	}

	void props_enum(AnyType data, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("props_enum", "Os", data.get_pyobjref(), property)
	}

	void prop_menu_enum(AnyType data, const std::string property, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE) {
		PYTHON_FUNCTION_ARGS_CALL("prop_menu_enum", "Osssis", data.get_pyobjref(), property, text, text_ctxt, translate, icon_items_to_string.at(icon))
	}

	void prop_enum(AnyType data, const std::string property, const std::string value, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE) {
		PYTHON_FUNCTION_ARGS_CALL("prop_enum", "Ossssis", data.get_pyobjref(), property, value, text, text_ctxt, translate, icon_items_to_string.at(icon))
	}

	void prop_search(AnyType data, const std::string property, AnyType search_data, const std::string search_property, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE) {
		PYTHON_FUNCTION_ARGS_CALL("prop_search", "OsOsssis", data.get_pyobjref(), property, search_data.get_pyobjref(), search_property, text, text_ctxt, translate, icon_items_to_string.at(icon))
	}

	OperatorProperties operator_value(const std::string operator_value, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE, bool emboss = true, int icon_value = 0);

	void operator_enum(const std::string operator_value, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("operator_enum", "ss", operator_value, property)
	}

	void operator_menu_enum(const std::string operator_value, const std::string property, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE) {
		PYTHON_FUNCTION_ARGS_CALL("operator_menu_enum", "ssssis", operator_value, property, text, text_ctxt, translate, icon_items_to_string.at(icon))
	}

	void label(const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE, int icon_value = 0) {
		PYTHON_FUNCTION_ARGS_CALL("label", "ssisi", text, text_ctxt, translate, icon_items_to_string.at(icon), icon_value)
	}

	void menu(const std::string menu, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true, icon_items_enum icon = icon_items_NONE, int icon_value = 0) {
		PYTHON_FUNCTION_ARGS_CALL("menu", "sssisi", menu, text, text_ctxt, translate, icon_items_to_string.at(icon), icon_value)
	}

	void separator() {
		PYTHON_FUNCTION_CALL("separator")
	}

	void context_pointer_set(const std::string name, AnyType data) {
		PYTHON_FUNCTION_ARGS_CALL("context_pointer_set", "sO", name, data.get_pyobjref())
	}

	void template_header() {
		PYTHON_FUNCTION_CALL("template_header")
	}

	void template_ID(AnyType data, const std::string property, const std::string create = NULL, const std::string open = NULL, const std::string unlink = NULL) {
		PYTHON_FUNCTION_ARGS_CALL("template_ID", "Ossss", data.get_pyobjref(), property, create, open, unlink)
	}

	void template_ID_preview(AnyType data, const std::string property, const std::string create = NULL, const std::string open = NULL, const std::string unlink = NULL, int rows = 0, int cols = 0) {
		PYTHON_FUNCTION_ARGS_CALL("template_ID_preview", "Ossssii", data.get_pyobjref(), property, create, open, unlink, rows, cols)
	}

	void template_any_ID(AnyType data, const std::string property, const std::string type_property, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true) {
		PYTHON_FUNCTION_ARGS_CALL("template_any_ID", "Ossssi", data.get_pyobjref(), property, type_property, text, text_ctxt, translate)
	}

	void template_path_builder(AnyType data, const std::string property, ID root, const std::string text = NULL, const std::string text_ctxt = NULL, bool translate = true) {
		PYTHON_FUNCTION_ARGS_CALL("template_path_builder", "OsOssi", data.get_pyobjref(), property, root.get_pyobjref(), text, text_ctxt, translate)
	}

	UILayout template_modifier(Modifier data) {
		PYTHON_FUNCTION_ARGS_CALL("template_modifier", "O", data.get_pyobjref())
		CLASS_TYPES_RETURN(UILayout)
	}

	UILayout template_constraint(Constraint data) {
		PYTHON_FUNCTION_ARGS_CALL("template_constraint", "O", data.get_pyobjref())
		CLASS_TYPES_RETURN(UILayout)
	}

	void template_preview(ID id, bool show_buttons, ID parent, TextureSlot slot, const std::string preview_id = NULL) {
		PYTHON_FUNCTION_ARGS_CALL("template_preview", "OiOOs", id.get_pyobjref(), show_buttons, parent.get_pyobjref(), slot.get_pyobjref(), preview_id)
	}

	enum curve_type_items_enum {
		curve_type_items_NONE = 0,	
		curve_type_items_VECTOR = 118,	
		curve_type_items_COLOR = 99,	
		curve_type_items_HUE = 104	
	};

	std::map<std::string, int> create_string_to_curve_type_items() {
		return {{"NONE", curve_type_items_NONE}, {"VECTOR", curve_type_items_VECTOR}, {"COLOR", curve_type_items_COLOR}, {"HUE", curve_type_items_HUE}};
	};

	std::map<int, std::string> create_curve_type_items_to_string() {
		return {{curve_type_items_NONE, "NONE"}, {curve_type_items_VECTOR, "VECTOR"}, {curve_type_items_COLOR, "COLOR"}, {curve_type_items_HUE, "HUE"}};
	};

	const std::map<std::string, int> string_to_curve_type_items = create_string_to_curve_type_items();
	const std::map<int, std::string> curve_type_items_to_string = create_curve_type_items_to_string();

	void template_curve_mapping(AnyType data, const std::string property, curve_type_items_enum type = curve_type_items_NONE, bool levels = false, bool brush = false, bool use_negative_slope = false) {
		PYTHON_FUNCTION_ARGS_CALL("template_curve_mapping", "Ossiii", data.get_pyobjref(), property, curve_type_items_to_string.at(type), levels, brush, use_negative_slope)
	}

	void template_color_ramp(AnyType data, const std::string property, bool expand = false) {
		PYTHON_FUNCTION_ARGS_CALL("template_color_ramp", "Osi", data.get_pyobjref(), property, expand)
	}

	void template_icon_view(AnyType data, const std::string property, bool show_labels = false, float scale = 5.0f) {
		PYTHON_FUNCTION_ARGS_CALL("template_icon_view", "Osif", data.get_pyobjref(), property, show_labels, scale)
	}

	void template_histogram(AnyType data, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("template_histogram", "Os", data.get_pyobjref(), property)
	}

	void template_waveform(AnyType data, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("template_waveform", "Os", data.get_pyobjref(), property)
	}

	void template_vectorscope(AnyType data, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("template_vectorscope", "Os", data.get_pyobjref(), property)
	}

	void template_layers(AnyType data, const std::string property, AnyType used_layers_data, const std::string used_layers_property, int active_layer) {
		PYTHON_FUNCTION_ARGS_CALL("template_layers", "OsOsi", data.get_pyobjref(), property, used_layers_data.get_pyobjref(), used_layers_property, active_layer)
	}

	void template_color_picker(AnyType data, const std::string property, bool value_slider = false, bool lock_value = false, bool lock_luminosity = false, bool cubic = false) {
		PYTHON_FUNCTION_ARGS_CALL("template_color_picker", "Osiiii", data.get_pyobjref(), property, value_slider, lock_value, lock_luminosity, cubic)
	}

	void template_palette(AnyType data, const std::string property, bool color = false) {
		PYTHON_FUNCTION_ARGS_CALL("template_palette", "Osi", data.get_pyobjref(), property, color)
	}

	void template_image_layers(Image image, ImageUser image_user) {
		PYTHON_FUNCTION_ARGS_CALL("template_image_layers", "OO", image.get_pyobjref(), image_user.get_pyobjref())
	}

	void template_image(AnyType data, const std::string property, ImageUser image_user, bool compact = false, bool multiview = false) {
		PYTHON_FUNCTION_ARGS_CALL("template_image", "OsOii", data.get_pyobjref(), property, image_user.get_pyobjref(), compact, multiview)
	}

	void template_image_settings(ImageFormatSettings image_settings, bool color_management = false) {
		PYTHON_FUNCTION_ARGS_CALL("template_image_settings", "Oi", image_settings.get_pyobjref(), color_management)
	}

	void template_image_stereo_3d(Stereo3dFormat stereo_3d_format) {
		PYTHON_FUNCTION_ARGS_CALL("template_image_stereo_3d", "O", stereo_3d_format.get_pyobjref())
	}

	void template_image_views(ImageFormatSettings image_settings) {
		PYTHON_FUNCTION_ARGS_CALL("template_image_views", "O", image_settings.get_pyobjref())
	}

	void template_movieclip(AnyType data, const std::string property, bool compact = false) {
		PYTHON_FUNCTION_ARGS_CALL("template_movieclip", "Osi", data.get_pyobjref(), property, compact)
	}

	void template_track(AnyType data, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("template_track", "Os", data.get_pyobjref(), property)
	}

	void template_marker(AnyType data, const std::string property, MovieClipUser clip_user, MovieTrackingTrack track, bool compact = false);

	void template_movieclip_information(AnyType data, const std::string property, MovieClipUser clip_user);

	enum uilist_layout_type_items_enum {
		uilist_layout_type_items_DEFAULT = 0,	
		uilist_layout_type_items_COMPACT = 1,	
		uilist_layout_type_items_GRID = 2	
	};

	std::map<std::string, int> create_string_to_uilist_layout_type_items() {
		return {{"DEFAULT", uilist_layout_type_items_DEFAULT}, {"COMPACT", uilist_layout_type_items_COMPACT}, {"GRID", uilist_layout_type_items_GRID}};
	};

	std::map<int, std::string> create_uilist_layout_type_items_to_string() {
		return {{uilist_layout_type_items_DEFAULT, "DEFAULT"}, {uilist_layout_type_items_COMPACT, "COMPACT"}, {uilist_layout_type_items_GRID, "GRID"}};
	};

	const std::map<std::string, int> string_to_uilist_layout_type_items = create_string_to_uilist_layout_type_items();
	const std::map<int, std::string> uilist_layout_type_items_to_string = create_uilist_layout_type_items_to_string();

	void template_list(const std::string listtype_name, const std::string list_id, AnyType dataptr, const std::string propname, AnyType active_dataptr, const std::string active_propname, const std::string item_dyntip_propname = NULL, int rows = 5, int maxrows = 5, uilist_layout_type_items_enum type = uilist_layout_type_items_DEFAULT, int columns = 9) {
		PYTHON_FUNCTION_ARGS_CALL("template_list", "ssOsOssiisi", listtype_name, list_id, dataptr.get_pyobjref(), propname, active_dataptr.get_pyobjref(), active_propname, item_dyntip_propname, rows, maxrows, uilist_layout_type_items_to_string.at(type), columns)
	}

	void template_running_jobs() {
		PYTHON_FUNCTION_CALL("template_running_jobs")
	}

	void template_operator_search() {
		PYTHON_FUNCTION_CALL("template_operator_search")
	}

	void template_header_3D() {
		PYTHON_FUNCTION_CALL("template_header_3D")
	}

	void template_edit_mode_selection() {
		PYTHON_FUNCTION_CALL("template_edit_mode_selection")
	}

	void template_reports_banner() {
		PYTHON_FUNCTION_CALL("template_reports_banner")
	}

	void template_node_link(NodeTree ntree, Node node, NodeSocket socket) {
		PYTHON_FUNCTION_ARGS_CALL("template_node_link", "OOO", ntree.get_pyobjref(), node.get_pyobjref(), socket.get_pyobjref())
	}

	void template_node_view(NodeTree ntree, Node node, NodeSocket socket) {
		PYTHON_FUNCTION_ARGS_CALL("template_node_view", "OOO", ntree.get_pyobjref(), node.get_pyobjref(), socket.get_pyobjref())
	}

	void template_texture_user() {
		PYTHON_FUNCTION_CALL("template_texture_user")
	}

	void template_keymap_item_properties(KeyMapItem item);

	void template_component_menu(AnyType data, const std::string property, const std::string name = NULL) {
		PYTHON_FUNCTION_ARGS_CALL("template_component_menu", "Oss", data.get_pyobjref(), property, name)
	}

	const std::string introspect() {
		PYTHON_FUNCTION_CALL("introspect")
		CREATE_SINGLE_PYOBJ(string_value)
		STRING_TYPE_CONV(string_value)
		NONCLASS_TYPES_RETURN(string_value_res)
	}

	void template_colorspace_settings(AnyType data, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("template_colorspace_settings", "Os", data.get_pyobjref(), property)
	}

	void template_colormanaged_view_settings(AnyType data, const std::string property) {
		PYTHON_FUNCTION_ARGS_CALL("template_colormanaged_view_settings", "Os", data.get_pyobjref(), property)
	}

	void template_node_socket(VFLOAT4 color) {
		ARRAY_TO_PYOBJ(color, "O", 4)
		PYTHON_FUNCTION_ARGS_CALL("template_node_socket", "O", color_tupleval)
		DECREF_ARRAY_ITEMS(color, 4)
	}
};

class Panel : public pyUniplug {
public:
	Panel(PyObject* pyobj) : pyUniplug(pyobj) {}
	Panel() : pyUniplug(0) { }

	UILayout layout() {
		CLASS_TYPES_GETTER(UILayout, "layout")
	}

	std::string text() {
		STRING_TYPE_GETTER("text", resstr)
	}

	void text(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "text", value)
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_translation_context() {
		STRING_TYPE_GETTER("bl_translation_context", resstr)
	}

	void bl_translation_context(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_translation_context", value)
	}

	std::string bl_category() {
		STRING_TYPE_GETTER("bl_category", resstr)
	}

	void bl_category(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_category", value)
	}

	enum space_type_items_enum {
		space_type_items_EMPTY = 0,	
		space_type_items_VIEW_3D = 1,	
		space_type_items_TIMELINE = 15,	
		space_type_items_GRAPH_EDITOR = 2,	
		space_type_items_DOPESHEET_EDITOR = 12,	
		space_type_items_NLA_EDITOR = 13,	
		space_type_items_IMAGE_EDITOR = 6,	
		space_type_items_SEQUENCE_EDITOR = 8,	
		space_type_items_CLIP_EDITOR = 20,	
		space_type_items_TEXT_EDITOR = 9,	
		space_type_items_NODE_EDITOR = 16,	
		space_type_items_LOGIC_EDITOR = 17,	
		space_type_items_PROPERTIES = 4,	
		space_type_items_OUTLINER = 3,	
		space_type_items_USER_PREFERENCES = 19,	
		space_type_items_INFO = 7,	
		space_type_items_FILE_BROWSER = 5,	
		space_type_items_CONSOLE = 18	
	};

	std::map<std::string, int> create_string_to_space_type_items() {
		return {{"EMPTY", space_type_items_EMPTY}, {"VIEW_3D", space_type_items_VIEW_3D}, {"TIMELINE", space_type_items_TIMELINE}, {"GRAPH_EDITOR", space_type_items_GRAPH_EDITOR}, {"DOPESHEET_EDITOR", space_type_items_DOPESHEET_EDITOR}, {"NLA_EDITOR", space_type_items_NLA_EDITOR}, {"IMAGE_EDITOR", space_type_items_IMAGE_EDITOR}, {"SEQUENCE_EDITOR", space_type_items_SEQUENCE_EDITOR}, {"CLIP_EDITOR", space_type_items_CLIP_EDITOR}, {"TEXT_EDITOR", space_type_items_TEXT_EDITOR}, {"NODE_EDITOR", space_type_items_NODE_EDITOR}, {"LOGIC_EDITOR", space_type_items_LOGIC_EDITOR}, {"PROPERTIES", space_type_items_PROPERTIES}, {"OUTLINER", space_type_items_OUTLINER}, {"USER_PREFERENCES", space_type_items_USER_PREFERENCES}, {"INFO", space_type_items_INFO}, {"FILE_BROWSER", space_type_items_FILE_BROWSER}, {"CONSOLE", space_type_items_CONSOLE}};
	};

	std::map<int, std::string> create_space_type_items_to_string() {
		return {{space_type_items_EMPTY, "EMPTY"}, {space_type_items_VIEW_3D, "VIEW_3D"}, {space_type_items_TIMELINE, "TIMELINE"}, {space_type_items_GRAPH_EDITOR, "GRAPH_EDITOR"}, {space_type_items_DOPESHEET_EDITOR, "DOPESHEET_EDITOR"}, {space_type_items_NLA_EDITOR, "NLA_EDITOR"}, {space_type_items_IMAGE_EDITOR, "IMAGE_EDITOR"}, {space_type_items_SEQUENCE_EDITOR, "SEQUENCE_EDITOR"}, {space_type_items_CLIP_EDITOR, "CLIP_EDITOR"}, {space_type_items_TEXT_EDITOR, "TEXT_EDITOR"}, {space_type_items_NODE_EDITOR, "NODE_EDITOR"}, {space_type_items_LOGIC_EDITOR, "LOGIC_EDITOR"}, {space_type_items_PROPERTIES, "PROPERTIES"}, {space_type_items_OUTLINER, "OUTLINER"}, {space_type_items_USER_PREFERENCES, "USER_PREFERENCES"}, {space_type_items_INFO, "INFO"}, {space_type_items_FILE_BROWSER, "FILE_BROWSER"}, {space_type_items_CONSOLE, "CONSOLE"}};
	};

	const std::map<std::string, int> string_to_space_type_items = create_string_to_space_type_items();
	const std::map<int, std::string> space_type_items_to_string = create_space_type_items_to_string();

	space_type_items_enum bl_space_type() {
		STRING_TYPE_GETTER("bl_space_type", static_cast<space_type_items_enum>(string_to_space_type_items.at(resstr)))
	}

	void bl_space_type(space_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_space_type", space_type_items_to_string.at(value))
	}

	enum region_type_items_enum {
		region_type_items_WINDOW = 0,	
		region_type_items_HEADER = 1,	
		region_type_items_CHANNELS = 2,	
		region_type_items_TEMPORARY = 3,	
		region_type_items_UI = 4,	
		region_type_items_TOOLS = 5,	
		region_type_items_TOOL_PROPS = 6,	
		region_type_items_PREVIEW = 7	
	};

	std::map<std::string, int> create_string_to_region_type_items() {
		return {{"WINDOW", region_type_items_WINDOW}, {"HEADER", region_type_items_HEADER}, {"CHANNELS", region_type_items_CHANNELS}, {"TEMPORARY", region_type_items_TEMPORARY}, {"UI", region_type_items_UI}, {"TOOLS", region_type_items_TOOLS}, {"TOOL_PROPS", region_type_items_TOOL_PROPS}, {"PREVIEW", region_type_items_PREVIEW}};
	};

	std::map<int, std::string> create_region_type_items_to_string() {
		return {{region_type_items_WINDOW, "WINDOW"}, {region_type_items_HEADER, "HEADER"}, {region_type_items_CHANNELS, "CHANNELS"}, {region_type_items_TEMPORARY, "TEMPORARY"}, {region_type_items_UI, "UI"}, {region_type_items_TOOLS, "TOOLS"}, {region_type_items_TOOL_PROPS, "TOOL_PROPS"}, {region_type_items_PREVIEW, "PREVIEW"}};
	};

	const std::map<std::string, int> string_to_region_type_items = create_string_to_region_type_items();
	const std::map<int, std::string> region_type_items_to_string = create_region_type_items_to_string();

	region_type_items_enum bl_region_type() {
		STRING_TYPE_GETTER("bl_region_type", static_cast<region_type_items_enum>(string_to_region_type_items.at(resstr)))
	}

	void bl_region_type(region_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_region_type", region_type_items_to_string.at(value))
	}

	std::string bl_context() {
		STRING_TYPE_GETTER("bl_context", resstr)
	}

	void bl_context(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_context", value)
	}

	enum panel_flag_items_enum {
		panel_flag_items_DEFAULT_CLOSED = 1,	
		panel_flag_items_HIDE_HEADER = 2	
	};

	std::map<std::string, int> create_string_to_panel_flag_items() {
		return {{"DEFAULT_CLOSED", panel_flag_items_DEFAULT_CLOSED}, {"HIDE_HEADER", panel_flag_items_HIDE_HEADER}};
	};

	std::map<int, std::string> create_panel_flag_items_to_string() {
		return {{panel_flag_items_DEFAULT_CLOSED, "DEFAULT_CLOSED"}, {panel_flag_items_HIDE_HEADER, "HIDE_HEADER"}};
	};

	const std::map<std::string, int> string_to_panel_flag_items = create_string_to_panel_flag_items();
	const std::map<int, std::string> panel_flag_items_to_string = create_panel_flag_items_to_string();

	panel_flag_items_enum bl_options() {
		STRING_TYPE_GETTER("bl_options", static_cast<panel_flag_items_enum>(string_to_panel_flag_items.at(resstr)))
	}

	void bl_options(panel_flag_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_options", panel_flag_items_to_string.at(value))
	}

	bool use_pin() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_pin")
	}

	void use_pin(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_pin", value)
	}

};

class UIList : public pyUniplug {
public:
	UIList(PyObject* pyobj) : pyUniplug(pyobj) {}
	UIList() : pyUniplug(0) { }

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	enum uilist_layout_type_items_enum {
		uilist_layout_type_items_DEFAULT = 0,	
		uilist_layout_type_items_COMPACT = 1,	
		uilist_layout_type_items_GRID = 2	
	};

	std::map<std::string, int> create_string_to_uilist_layout_type_items() {
		return {{"DEFAULT", uilist_layout_type_items_DEFAULT}, {"COMPACT", uilist_layout_type_items_COMPACT}, {"GRID", uilist_layout_type_items_GRID}};
	};

	std::map<int, std::string> create_uilist_layout_type_items_to_string() {
		return {{uilist_layout_type_items_DEFAULT, "DEFAULT"}, {uilist_layout_type_items_COMPACT, "COMPACT"}, {uilist_layout_type_items_GRID, "GRID"}};
	};

	const std::map<std::string, int> string_to_uilist_layout_type_items = create_string_to_uilist_layout_type_items();
	const std::map<int, std::string> uilist_layout_type_items_to_string = create_uilist_layout_type_items_to_string();

	uilist_layout_type_items_enum layout_type() {
		STRING_TYPE_GETTER("layout_type", static_cast<uilist_layout_type_items_enum>(string_to_uilist_layout_type_items.at(resstr)))
	}

	void layout_type(uilist_layout_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "layout_type", uilist_layout_type_items_to_string.at(value))
	}

	bool use_filter_show() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_show")
	}

	void use_filter_show(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_show", value)
	}

	std::string filter_name() {
		STRING_TYPE_GETTER("filter_name", resstr)
	}

	void filter_name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_name", value)
	}

	bool use_filter_invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_invert")
	}

	void use_filter_invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_invert", value)
	}

	bool use_filter_sort_alpha() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_sort_alpha")
	}

	void use_filter_sort_alpha(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_sort_alpha", value)
	}

	bool use_filter_sort_reverse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_sort_reverse")
	}

	void use_filter_sort_reverse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_sort_reverse", value)
	}

	int bitflag_filter_item() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "bitflag_filter_item")
	}

	void bitflag_filter_item(int value) {
		PRIMITIVE_TYPES_SETTER("i", "bitflag_filter_item", value)
	}

};

class Header : public pyUniplug {
public:
	Header(PyObject* pyobj) : pyUniplug(pyobj) {}
	Header() : pyUniplug(0) { }

	UILayout layout() {
		CLASS_TYPES_GETTER(UILayout, "layout")
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	enum space_type_items_enum {
		space_type_items_EMPTY = 0,	
		space_type_items_VIEW_3D = 1,	
		space_type_items_TIMELINE = 15,	
		space_type_items_GRAPH_EDITOR = 2,	
		space_type_items_DOPESHEET_EDITOR = 12,	
		space_type_items_NLA_EDITOR = 13,	
		space_type_items_IMAGE_EDITOR = 6,	
		space_type_items_SEQUENCE_EDITOR = 8,	
		space_type_items_CLIP_EDITOR = 20,	
		space_type_items_TEXT_EDITOR = 9,	
		space_type_items_NODE_EDITOR = 16,	
		space_type_items_LOGIC_EDITOR = 17,	
		space_type_items_PROPERTIES = 4,	
		space_type_items_OUTLINER = 3,	
		space_type_items_USER_PREFERENCES = 19,	
		space_type_items_INFO = 7,	
		space_type_items_FILE_BROWSER = 5,	
		space_type_items_CONSOLE = 18	
	};

	std::map<std::string, int> create_string_to_space_type_items() {
		return {{"EMPTY", space_type_items_EMPTY}, {"VIEW_3D", space_type_items_VIEW_3D}, {"TIMELINE", space_type_items_TIMELINE}, {"GRAPH_EDITOR", space_type_items_GRAPH_EDITOR}, {"DOPESHEET_EDITOR", space_type_items_DOPESHEET_EDITOR}, {"NLA_EDITOR", space_type_items_NLA_EDITOR}, {"IMAGE_EDITOR", space_type_items_IMAGE_EDITOR}, {"SEQUENCE_EDITOR", space_type_items_SEQUENCE_EDITOR}, {"CLIP_EDITOR", space_type_items_CLIP_EDITOR}, {"TEXT_EDITOR", space_type_items_TEXT_EDITOR}, {"NODE_EDITOR", space_type_items_NODE_EDITOR}, {"LOGIC_EDITOR", space_type_items_LOGIC_EDITOR}, {"PROPERTIES", space_type_items_PROPERTIES}, {"OUTLINER", space_type_items_OUTLINER}, {"USER_PREFERENCES", space_type_items_USER_PREFERENCES}, {"INFO", space_type_items_INFO}, {"FILE_BROWSER", space_type_items_FILE_BROWSER}, {"CONSOLE", space_type_items_CONSOLE}};
	};

	std::map<int, std::string> create_space_type_items_to_string() {
		return {{space_type_items_EMPTY, "EMPTY"}, {space_type_items_VIEW_3D, "VIEW_3D"}, {space_type_items_TIMELINE, "TIMELINE"}, {space_type_items_GRAPH_EDITOR, "GRAPH_EDITOR"}, {space_type_items_DOPESHEET_EDITOR, "DOPESHEET_EDITOR"}, {space_type_items_NLA_EDITOR, "NLA_EDITOR"}, {space_type_items_IMAGE_EDITOR, "IMAGE_EDITOR"}, {space_type_items_SEQUENCE_EDITOR, "SEQUENCE_EDITOR"}, {space_type_items_CLIP_EDITOR, "CLIP_EDITOR"}, {space_type_items_TEXT_EDITOR, "TEXT_EDITOR"}, {space_type_items_NODE_EDITOR, "NODE_EDITOR"}, {space_type_items_LOGIC_EDITOR, "LOGIC_EDITOR"}, {space_type_items_PROPERTIES, "PROPERTIES"}, {space_type_items_OUTLINER, "OUTLINER"}, {space_type_items_USER_PREFERENCES, "USER_PREFERENCES"}, {space_type_items_INFO, "INFO"}, {space_type_items_FILE_BROWSER, "FILE_BROWSER"}, {space_type_items_CONSOLE, "CONSOLE"}};
	};

	const std::map<std::string, int> string_to_space_type_items = create_string_to_space_type_items();
	const std::map<int, std::string> space_type_items_to_string = create_space_type_items_to_string();

	space_type_items_enum bl_space_type() {
		STRING_TYPE_GETTER("bl_space_type", static_cast<space_type_items_enum>(string_to_space_type_items.at(resstr)))
	}

	void bl_space_type(space_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_space_type", space_type_items_to_string.at(value))
	}

};

class Menu : public pyUniplug {
public:
	Menu(PyObject* pyobj) : pyUniplug(pyobj) {}
	Menu() : pyUniplug(0) { }

	UILayout layout() {
		CLASS_TYPES_GETTER(UILayout, "layout")
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_translation_context() {
		STRING_TYPE_GETTER("bl_translation_context", resstr)
	}

	void bl_translation_context(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_translation_context", value)
	}

	std::string bl_description() {
		STRING_TYPE_GETTER("bl_description", resstr)
	}

	void bl_description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_description", value)
	}

};

class ThemeFontStyle : public pyUniplug {
public:
	ThemeFontStyle(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeFontStyle() : pyUniplug(0) { }

	int points() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "points")
	}

	void points(int value) {
		PRIMITIVE_TYPES_SETTER("i", "points", value)
	}

	enum font_kerning_style_enum {
		font_kerning_style_UNFITTED = 0,	
		font_kerning_style_FITTED = 1	
	};

	std::map<std::string, int> create_string_to_font_kerning_style() {
		return {{"UNFITTED", font_kerning_style_UNFITTED}, {"FITTED", font_kerning_style_FITTED}};
	};

	std::map<int, std::string> create_font_kerning_style_to_string() {
		return {{font_kerning_style_UNFITTED, "UNFITTED"}, {font_kerning_style_FITTED, "FITTED"}};
	};

	const std::map<std::string, int> string_to_font_kerning_style = create_string_to_font_kerning_style();
	const std::map<int, std::string> font_kerning_style_to_string = create_font_kerning_style_to_string();

	font_kerning_style_enum font_kerning_style() {
		STRING_TYPE_GETTER("font_kerning_style", static_cast<font_kerning_style_enum>(string_to_font_kerning_style.at(resstr)))
	}

	void font_kerning_style(font_kerning_style_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "font_kerning_style", font_kerning_style_to_string.at(value))
	}

	int shadow() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow")
	}

	void shadow(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow", value)
	}

	int shadow_offset_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_offset_x")
	}

	void shadow_offset_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_offset_x", value)
	}

	int shadow_offset_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadow_offset_y")
	}

	void shadow_offset_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadow_offset_y", value)
	}

	float shadow_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_alpha")
	}

	void shadow_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_alpha", value)
	}

	float shadow_value() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "shadow_value")
	}

	void shadow_value(float value) {
		PRIMITIVE_TYPES_SETTER("f", "shadow_value", value)
	}
};

class ThemeStyle : public pyUniplug {
public:
	ThemeStyle(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeStyle() : pyUniplug(0) { }

	ThemeFontStyle panel_title() {
		CLASS_TYPES_GETTER(ThemeFontStyle, "panel_title")
	}

	ThemeFontStyle widget_label() {
		CLASS_TYPES_GETTER(ThemeFontStyle, "widget_label")
	}

	ThemeFontStyle widget() {
		CLASS_TYPES_GETTER(ThemeFontStyle, "widget")
	}
};

class ThemeWidgetColors : public pyUniplug {
public:
	ThemeWidgetColors(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeWidgetColors() : pyUniplug(0) { }

	VFLOAT3 outline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "outline", 3)
	}

	void outline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "outline", 3)
	}

	VFLOAT4 inner() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner", 4)
	}

	void inner(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner", 4)
	}

	VFLOAT4 inner_sel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner_sel", 4)
	}

	void inner_sel(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner_sel", 4)
	}

	VFLOAT4 item() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "item", 4)
	}

	void item(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "item", 4)
	}

	VFLOAT3 text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "text", 3)
	}

	void text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "text", 3)
	}

	VFLOAT3 text_sel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "text_sel", 3)
	}

	void text_sel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "text_sel", 3)
	}

	bool show_shaded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_shaded")
	}

	void show_shaded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_shaded", value)
	}

	int shadetop() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadetop")
	}

	void shadetop(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadetop", value)
	}

	int shadedown() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "shadedown")
	}

	void shadedown(int value) {
		PRIMITIVE_TYPES_SETTER("i", "shadedown", value)
	}
};

class ThemeWidgetStateColors : public pyUniplug {
public:
	ThemeWidgetStateColors(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeWidgetStateColors() : pyUniplug(0) { }

	VFLOAT3 inner_anim() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner_anim", 3)
	}

	void inner_anim(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner_anim", 3)
	}

	VFLOAT3 inner_anim_sel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner_anim_sel", 3)
	}

	void inner_anim_sel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner_anim_sel", 3)
	}

	VFLOAT3 inner_key() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner_key", 3)
	}

	void inner_key(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner_key", 3)
	}

	VFLOAT3 inner_key_sel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner_key_sel", 3)
	}

	void inner_key_sel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner_key_sel", 3)
	}

	VFLOAT3 inner_driven() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner_driven", 3)
	}

	void inner_driven(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner_driven", 3)
	}

	VFLOAT3 inner_driven_sel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "inner_driven_sel", 3)
	}

	void inner_driven_sel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "inner_driven_sel", 3)
	}

	float blend() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend")
	}

	void blend(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend", value)
	}
};

class ThemePanelColors : public pyUniplug {
public:
	ThemePanelColors(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemePanelColors() : pyUniplug(0) { }

	VFLOAT4 header() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "header", 4)
	}

	void header(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "header", 4)
	}

	VFLOAT4 back() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "back", 4)
	}

	void back(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "back", 4)
	}

	bool show_header() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_header")
	}

	void show_header(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_header", value)
	}

	bool show_back() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_back")
	}

	void show_back(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_back", value)
	}
};

class ThemeGradientColors : public pyUniplug {
public:
	ThemeGradientColors(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeGradientColors() : pyUniplug(0) { }

	bool show_grad() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_grad")
	}

	void show_grad(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_grad", value)
	}

	VFLOAT3 gradient() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gradient", 3)
	}

	void gradient(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gradient", 3)
	}

	VFLOAT3 high_gradient() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "high_gradient", 3)
	}

	void high_gradient(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "high_gradient", 3)
	}
};

class ThemeUserInterface : public pyUniplug {
public:
	ThemeUserInterface(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeUserInterface() : pyUniplug(0) { }

	ThemeWidgetColors wcol_regular() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_regular")
	}

	ThemeWidgetColors wcol_tool() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_tool")
	}

	ThemeWidgetColors wcol_radio() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_radio")
	}

	ThemeWidgetColors wcol_text() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_text")
	}

	ThemeWidgetColors wcol_option() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_option")
	}

	ThemeWidgetColors wcol_toggle() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_toggle")
	}

	ThemeWidgetColors wcol_num() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_num")
	}

	ThemeWidgetColors wcol_numslider() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_numslider")
	}

	ThemeWidgetColors wcol_box() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_box")
	}

	ThemeWidgetColors wcol_menu() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_menu")
	}

	ThemeWidgetColors wcol_pulldown() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_pulldown")
	}

	ThemeWidgetColors wcol_menu_back() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_menu_back")
	}

	ThemeWidgetColors wcol_pie_menu() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_pie_menu")
	}

	ThemeWidgetColors wcol_tooltip() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_tooltip")
	}

	ThemeWidgetColors wcol_menu_item() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_menu_item")
	}

	ThemeWidgetColors wcol_scroll() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_scroll")
	}

	ThemeWidgetColors wcol_progress() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_progress")
	}

	ThemeWidgetColors wcol_list_item() {
		CLASS_TYPES_GETTER(ThemeWidgetColors, "wcol_list_item")
	}

	ThemeWidgetStateColors wcol_state() {
		CLASS_TYPES_GETTER(ThemeWidgetStateColors, "wcol_state")
	}

	float menu_shadow_fac() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "menu_shadow_fac")
	}

	void menu_shadow_fac(float value) {
		PRIMITIVE_TYPES_SETTER("f", "menu_shadow_fac", value)
	}

	int menu_shadow_width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "menu_shadow_width")
	}

	void menu_shadow_width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "menu_shadow_width", value)
	}

	std::string icon_file() {
		STRING_TYPE_GETTER("icon_file", resstr)
	}

	void icon_file(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "icon_file", value)
	}

	float icon_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "icon_alpha")
	}

	void icon_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "icon_alpha", value)
	}

	VFLOAT4 widget_emboss() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "widget_emboss", 4)
	}

	void widget_emboss(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "widget_emboss", 4)
	}

	VFLOAT3 axis_x() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "axis_x", 3)
	}

	void axis_x(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "axis_x", 3)
	}

	VFLOAT3 axis_y() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "axis_y", 3)
	}

	void axis_y(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "axis_y", 3)
	}

	VFLOAT3 axis_z() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "axis_z", 3)
	}

	void axis_z(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "axis_z", 3)
	}
};

class ThemeSpaceGeneric : public pyUniplug {
public:
	ThemeSpaceGeneric(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeSpaceGeneric() : pyUniplug(0) { }

	VFLOAT3 back() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "back", 3)
	}

	void back(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "back", 3)
	}

	VFLOAT3 title() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "title", 3)
	}

	void title(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "title", 3)
	}

	VFLOAT3 text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "text", 3)
	}

	void text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "text", 3)
	}

	VFLOAT3 text_hi() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "text_hi", 3)
	}

	void text_hi(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "text_hi", 3)
	}

	VFLOAT3 header() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "header", 3)
	}

	void header(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "header", 3)
	}

	VFLOAT3 header_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "header_text", 3)
	}

	void header_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "header_text", 3)
	}

	VFLOAT3 header_text_hi() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "header_text_hi", 3)
	}

	void header_text_hi(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "header_text_hi", 3)
	}

	ThemePanelColors panelcolors() {
		CLASS_TYPES_GETTER(ThemePanelColors, "panelcolors")
	}

	VFLOAT4 button() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button", 4)
	}

	void button(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button", 4)
	}

	VFLOAT3 button_title() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button_title", 3)
	}

	void button_title(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button_title", 3)
	}

	VFLOAT3 button_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button_text", 3)
	}

	void button_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button_text", 3)
	}

	VFLOAT3 button_text_hi() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button_text_hi", 3)
	}

	void button_text_hi(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button_text_hi", 3)
	}

	VFLOAT3 tab_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_active", 3)
	}

	void tab_active(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_active", 3)
	}

	VFLOAT3 tab_inactive() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_inactive", 3)
	}

	void tab_inactive(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_inactive", 3)
	}

	VFLOAT4 tab_back() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_back", 4)
	}

	void tab_back(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_back", 4)
	}

	VFLOAT3 tab_outline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_outline", 3)
	}

	void tab_outline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_outline", 3)
	}
};

class ThemeSpaceGradient : public pyUniplug {
public:
	ThemeSpaceGradient(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeSpaceGradient() : pyUniplug(0) { }

	ThemeGradientColors gradients() {
		CLASS_TYPES_GETTER(ThemeGradientColors, "gradients")
	}

	VFLOAT3 title() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "title", 3)
	}

	void title(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "title", 3)
	}

	VFLOAT3 text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "text", 3)
	}

	void text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "text", 3)
	}

	VFLOAT3 text_hi() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "text_hi", 3)
	}

	void text_hi(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "text_hi", 3)
	}

	VFLOAT3 header() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "header", 3)
	}

	void header(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "header", 3)
	}

	VFLOAT3 header_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "header_text", 3)
	}

	void header_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "header_text", 3)
	}

	VFLOAT3 header_text_hi() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "header_text_hi", 3)
	}

	void header_text_hi(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "header_text_hi", 3)
	}

	ThemePanelColors panelcolors() {
		CLASS_TYPES_GETTER(ThemePanelColors, "panelcolors")
	}

	VFLOAT4 button() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button", 4)
	}

	void button(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button", 4)
	}

	VFLOAT3 button_title() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button_title", 3)
	}

	void button_title(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button_title", 3)
	}

	VFLOAT3 button_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button_text", 3)
	}

	void button_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button_text", 3)
	}

	VFLOAT3 button_text_hi() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "button_text_hi", 3)
	}

	void button_text_hi(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "button_text_hi", 3)
	}

	VFLOAT3 tab_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_active", 3)
	}

	void tab_active(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_active", 3)
	}

	VFLOAT3 tab_inactive() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_inactive", 3)
	}

	void tab_inactive(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_inactive", 3)
	}

	VFLOAT4 tab_back() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_back", 4)
	}

	void tab_back(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_back", 4)
	}

	VFLOAT3 tab_outline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tab_outline", 3)
	}

	void tab_outline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tab_outline", 3)
	}
};

class ThemeSpaceListGeneric : public pyUniplug {
public:
	ThemeSpaceListGeneric(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeSpaceListGeneric() : pyUniplug(0) { }

	VFLOAT3 list() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "list", 3)
	}

	void list(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "list", 3)
	}

	VFLOAT3 list_title() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "list_title", 3)
	}

	void list_title(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "list_title", 3)
	}

	VFLOAT3 list_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "list_text", 3)
	}

	void list_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "list_text", 3)
	}

	VFLOAT3 list_text_hi() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "list_text_hi", 3)
	}

	void list_text_hi(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "list_text_hi", 3)
	}
};

class ThemeView3D : public pyUniplug {
public:
	ThemeView3D(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeView3D() : pyUniplug(0) { }

	ThemeSpaceGradient space() {
		CLASS_TYPES_GETTER(ThemeSpaceGradient, "space")
	}

	VFLOAT3 grid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "grid", 3)
	}

	void grid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "grid", 3)
	}

	VFLOAT3 wire() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "wire", 3)
	}

	void wire(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "wire", 3)
	}

	VFLOAT3 wire_edit() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "wire_edit", 3)
	}

	void wire_edit(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "wire_edit", 3)
	}

	VFLOAT3 gp_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex", 3)
	}

	void gp_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex", 3)
	}

	VFLOAT3 gp_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex_select", 3)
	}

	void gp_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex_select", 3)
	}

	int gp_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gp_vertex_size")
	}

	void gp_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gp_vertex_size", value)
	}

	VFLOAT4 lamp() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "lamp", 4)
	}

	void lamp(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "lamp", 4)
	}

	VFLOAT3 speaker() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "speaker", 3)
	}

	void speaker(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "speaker", 3)
	}

	VFLOAT3 camera() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "camera", 3)
	}

	void camera(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "camera", 3)
	}

	VFLOAT3 view_overlay() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_overlay", 3)
	}

	void view_overlay(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_overlay", 3)
	}

	VFLOAT3 empty() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "empty", 3)
	}

	void empty(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "empty", 3)
	}

	VFLOAT3 object_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "object_selected", 3)
	}

	void object_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "object_selected", 3)
	}

	VFLOAT3 object_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "object_active", 3)
	}

	void object_active(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "object_active", 3)
	}

	VFLOAT3 object_grouped() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "object_grouped", 3)
	}

	void object_grouped(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "object_grouped", 3)
	}

	VFLOAT3 object_grouped_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "object_grouped_active", 3)
	}

	void object_grouped_active(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "object_grouped_active", 3)
	}

	VFLOAT3 transform() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "transform", 3)
	}

	void transform(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "transform", 3)
	}

	VFLOAT3 vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex", 3)
	}

	void vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex", 3)
	}

	VFLOAT3 vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex_select", 3)
	}

	void vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex_select", 3)
	}

	int vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "vertex_size")
	}

	void vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "vertex_size", value)
	}

	VFLOAT3 vertex_unreferenced() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex_unreferenced", 3)
	}

	void vertex_unreferenced(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex_unreferenced", 3)
	}

	VFLOAT3 edge_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "edge_select", 3)
	}

	void edge_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "edge_select", 3)
	}

	VFLOAT3 edge_seam() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "edge_seam", 3)
	}

	void edge_seam(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "edge_seam", 3)
	}

	VFLOAT3 edge_sharp() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "edge_sharp", 3)
	}

	void edge_sharp(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "edge_sharp", 3)
	}

	VFLOAT3 edge_crease() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "edge_crease", 3)
	}

	void edge_crease(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "edge_crease", 3)
	}

	VFLOAT3 edge_facesel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "edge_facesel", 3)
	}

	void edge_facesel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "edge_facesel", 3)
	}

	VFLOAT3 freestyle_edge_mark() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "freestyle_edge_mark", 3)
	}

	void freestyle_edge_mark(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "freestyle_edge_mark", 3)
	}

	VFLOAT4 face() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "face", 4)
	}

	void face(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "face", 4)
	}

	VFLOAT4 face_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "face_select", 4)
	}

	void face_select(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "face_select", 4)
	}

	VFLOAT3 face_dot() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "face_dot", 3)
	}

	void face_dot(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "face_dot", 3)
	}

	int facedot_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "facedot_size")
	}

	void facedot_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "facedot_size", value)
	}

	VFLOAT4 freestyle_face_mark() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "freestyle_face_mark", 4)
	}

	void freestyle_face_mark(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "freestyle_face_mark", 4)
	}

	VFLOAT3 nurb_uline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "nurb_uline", 3)
	}

	void nurb_uline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "nurb_uline", 3)
	}

	VFLOAT3 nurb_vline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "nurb_vline", 3)
	}

	void nurb_vline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "nurb_vline", 3)
	}

	VFLOAT3 nurb_sel_uline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "nurb_sel_uline", 3)
	}

	void nurb_sel_uline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "nurb_sel_uline", 3)
	}

	VFLOAT3 nurb_sel_vline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "nurb_sel_vline", 3)
	}

	void nurb_sel_vline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "nurb_sel_vline", 3)
	}

	VFLOAT3 act_spline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "act_spline", 3)
	}

	void act_spline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "act_spline", 3)
	}

	VFLOAT3 handle_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_free", 3)
	}

	void handle_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_free", 3)
	}

	VFLOAT3 handle_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_auto", 3)
	}

	void handle_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_auto", 3)
	}

	VFLOAT3 handle_vect() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vect", 3)
	}

	void handle_vect(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vect", 3)
	}

	VFLOAT3 handle_sel_vect() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_vect", 3)
	}

	void handle_sel_vect(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_vect", 3)
	}

	VFLOAT3 handle_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_align", 3)
	}

	void handle_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_align", 3)
	}

	VFLOAT3 handle_sel_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_free", 3)
	}

	void handle_sel_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_free", 3)
	}

	VFLOAT3 handle_sel_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_auto", 3)
	}

	void handle_sel_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_auto", 3)
	}

	VFLOAT3 handle_sel_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_align", 3)
	}

	void handle_sel_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_align", 3)
	}

	VFLOAT3 lastsel_point() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "lastsel_point", 3)
	}

	void lastsel_point(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "lastsel_point", 3)
	}

	VFLOAT3 extra_edge_len() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "extra_edge_len", 3)
	}

	void extra_edge_len(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "extra_edge_len", 3)
	}

	VFLOAT3 extra_edge_angle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "extra_edge_angle", 3)
	}

	void extra_edge_angle(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "extra_edge_angle", 3)
	}

	VFLOAT3 extra_face_angle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "extra_face_angle", 3)
	}

	void extra_face_angle(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "extra_face_angle", 3)
	}

	VFLOAT3 extra_face_area() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "extra_face_area", 3)
	}

	void extra_face_area(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "extra_face_area", 3)
	}

	VFLOAT4 editmesh_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "editmesh_active", 4)
	}

	void editmesh_active(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "editmesh_active", 4)
	}

	VFLOAT3 normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "normal", 3)
	}

	void normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "normal", 3)
	}

	VFLOAT3 vertex_normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex_normal", 3)
	}

	void vertex_normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex_normal", 3)
	}

	VFLOAT3 split_normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "split_normal", 3)
	}

	void split_normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "split_normal", 3)
	}

	VFLOAT3 bone_solid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "bone_solid", 3)
	}

	void bone_solid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "bone_solid", 3)
	}

	VFLOAT3 bone_pose() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "bone_pose", 3)
	}

	void bone_pose(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "bone_pose", 3)
	}

	VFLOAT3 bone_pose_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "bone_pose_active", 3)
	}

	void bone_pose_active(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "bone_pose_active", 3)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}

	int outline_width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "outline_width")
	}

	void outline_width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "outline_width", value)
	}

	VFLOAT3 bundle_solid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "bundle_solid", 3)
	}

	void bundle_solid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "bundle_solid", 3)
	}

	VFLOAT3 camera_path() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "camera_path", 3)
	}

	void camera_path(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "camera_path", 3)
	}

	VFLOAT3 skin_root() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "skin_root", 3)
	}

	void skin_root(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "skin_root", 3)
	}

	VFLOAT4 clipping_border_3d() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "clipping_border_3d", 4)
	}

	void clipping_border_3d(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "clipping_border_3d", 4)
	}

	VFLOAT4 paint_curve_handle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "paint_curve_handle", 4)
	}

	void paint_curve_handle(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "paint_curve_handle", 4)
	}

	VFLOAT4 paint_curve_pivot() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "paint_curve_pivot", 4)
	}

	void paint_curve_pivot(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "paint_curve_pivot", 4)
	}
};

class ThemeGraphEditor : public pyUniplug {
public:
	ThemeGraphEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeGraphEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	ThemeSpaceListGeneric space_list() {
		CLASS_TYPES_GETTER(ThemeSpaceListGeneric, "space_list")
	}

	VFLOAT3 grid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "grid", 3)
	}

	void grid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "grid", 3)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}

	VFLOAT3 window_sliders() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "window_sliders", 3)
	}

	void window_sliders(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "window_sliders", 3)
	}

	VFLOAT3 channels_region() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "channels_region", 3)
	}

	void channels_region(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "channels_region", 3)
	}

	VFLOAT3 dopesheet_channel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "dopesheet_channel", 3)
	}

	void dopesheet_channel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "dopesheet_channel", 3)
	}

	VFLOAT3 dopesheet_subchannel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "dopesheet_subchannel", 3)
	}

	void dopesheet_subchannel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "dopesheet_subchannel", 3)
	}

	VFLOAT3 channel_group() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "channel_group", 3)
	}

	void channel_group(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "channel_group", 3)
	}

	VFLOAT3 active_channels_group() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active_channels_group", 3)
	}

	void active_channels_group(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active_channels_group", 3)
	}

	VFLOAT3 vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex", 3)
	}

	void vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex", 3)
	}

	VFLOAT3 vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex_select", 3)
	}

	void vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex_select", 3)
	}

	int vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "vertex_size")
	}

	void vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "vertex_size", value)
	}

	VFLOAT3 vertex_unreferenced() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex_unreferenced", 3)
	}

	void vertex_unreferenced(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex_unreferenced", 3)
	}

	VFLOAT3 handle_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_free", 3)
	}

	void handle_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_free", 3)
	}

	VFLOAT3 handle_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_auto", 3)
	}

	void handle_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_auto", 3)
	}

	VFLOAT3 handle_vect() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vect", 3)
	}

	void handle_vect(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vect", 3)
	}

	VFLOAT3 handle_sel_vect() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_vect", 3)
	}

	void handle_sel_vect(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_vect", 3)
	}

	VFLOAT3 handle_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_align", 3)
	}

	void handle_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_align", 3)
	}

	VFLOAT3 handle_sel_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_free", 3)
	}

	void handle_sel_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_free", 3)
	}

	VFLOAT3 handle_sel_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_auto", 3)
	}

	void handle_sel_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_auto", 3)
	}

	VFLOAT3 handle_sel_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_align", 3)
	}

	void handle_sel_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_align", 3)
	}

	VFLOAT3 handle_auto_clamped() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_auto_clamped", 3)
	}

	void handle_auto_clamped(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_auto_clamped", 3)
	}

	VFLOAT3 handle_sel_auto_clamped() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_auto_clamped", 3)
	}

	void handle_sel_auto_clamped(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_auto_clamped", 3)
	}

	VFLOAT3 lastsel_point() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "lastsel_point", 3)
	}

	void lastsel_point(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "lastsel_point", 3)
	}

	VFLOAT3 handle_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vertex", 3)
	}

	void handle_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vertex", 3)
	}

	VFLOAT3 handle_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vertex_select", 3)
	}

	void handle_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vertex_select", 3)
	}

	int handle_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "handle_vertex_size")
	}

	void handle_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "handle_vertex_size", value)
	}
};

class ThemeFileBrowser : public pyUniplug {
public:
	ThemeFileBrowser(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeFileBrowser() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	ThemeSpaceListGeneric space_list() {
		CLASS_TYPES_GETTER(ThemeSpaceListGeneric, "space_list")
	}

	VFLOAT3 selected_file() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "selected_file", 3)
	}

	void selected_file(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "selected_file", 3)
	}

	VFLOAT3 scrollbar() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scrollbar", 3)
	}

	void scrollbar(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scrollbar", 3)
	}

	VFLOAT3 scroll_handle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scroll_handle", 3)
	}

	void scroll_handle(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scroll_handle", 3)
	}

	VFLOAT3 active_file() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active_file", 3)
	}

	void active_file(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active_file", 3)
	}

	VFLOAT3 active_file_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active_file_text", 3)
	}

	void active_file_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active_file_text", 3)
	}
};

class ThemeNLAEditor : public pyUniplug {
public:
	ThemeNLAEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeNLAEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	ThemeSpaceListGeneric space_list() {
		CLASS_TYPES_GETTER(ThemeSpaceListGeneric, "space_list")
	}

	VFLOAT3 grid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "grid", 3)
	}

	void grid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "grid", 3)
	}

	VFLOAT3 view_sliders() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_sliders", 3)
	}

	void view_sliders(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_sliders", 3)
	}

	VFLOAT4 active_action() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active_action", 4)
	}

	void active_action(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active_action", 4)
	}

	VFLOAT4 active_action_unset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active_action_unset", 4)
	}

	void active_action_unset(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active_action_unset", 4)
	}

	VFLOAT3 strips() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "strips", 3)
	}

	void strips(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "strips", 3)
	}

	VFLOAT3 strips_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "strips_selected", 3)
	}

	void strips_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "strips_selected", 3)
	}

	VFLOAT3 transition_strips() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "transition_strips", 3)
	}

	void transition_strips(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "transition_strips", 3)
	}

	VFLOAT3 transition_strips_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "transition_strips_selected", 3)
	}

	void transition_strips_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "transition_strips_selected", 3)
	}

	VFLOAT3 meta_strips() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "meta_strips", 3)
	}

	void meta_strips(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "meta_strips", 3)
	}

	VFLOAT3 meta_strips_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "meta_strips_selected", 3)
	}

	void meta_strips_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "meta_strips_selected", 3)
	}

	VFLOAT3 sound_strips() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "sound_strips", 3)
	}

	void sound_strips(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "sound_strips", 3)
	}

	VFLOAT3 sound_strips_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "sound_strips_selected", 3)
	}

	void sound_strips_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "sound_strips_selected", 3)
	}

	VFLOAT3 tweak() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tweak", 3)
	}

	void tweak(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tweak", 3)
	}

	VFLOAT3 tweak_duplicate() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tweak_duplicate", 3)
	}

	void tweak_duplicate(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tweak_duplicate", 3)
	}

	VFLOAT4 keyframe_border() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_border", 4)
	}

	void keyframe_border(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_border", 4)
	}

	VFLOAT4 keyframe_border_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_border_selected", 4)
	}

	void keyframe_border_selected(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_border_selected", 4)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}
};

class ThemeDopeSheet : public pyUniplug {
public:
	ThemeDopeSheet(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeDopeSheet() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	ThemeSpaceListGeneric space_list() {
		CLASS_TYPES_GETTER(ThemeSpaceListGeneric, "space_list")
	}

	VFLOAT3 grid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "grid", 3)
	}

	void grid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "grid", 3)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}

	VFLOAT3 value_sliders() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "value_sliders", 3)
	}

	void value_sliders(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "value_sliders", 3)
	}

	VFLOAT3 view_sliders() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "view_sliders", 3)
	}

	void view_sliders(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "view_sliders", 3)
	}

	VFLOAT3 dopesheet_channel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "dopesheet_channel", 3)
	}

	void dopesheet_channel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "dopesheet_channel", 3)
	}

	VFLOAT3 dopesheet_subchannel() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "dopesheet_subchannel", 3)
	}

	void dopesheet_subchannel(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "dopesheet_subchannel", 3)
	}

	VFLOAT3 channels() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "channels", 3)
	}

	void channels(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "channels", 3)
	}

	VFLOAT3 channels_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "channels_selected", 3)
	}

	void channels_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "channels_selected", 3)
	}

	VFLOAT3 channel_group() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "channel_group", 3)
	}

	void channel_group(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "channel_group", 3)
	}

	VFLOAT3 active_channels_group() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active_channels_group", 3)
	}

	void active_channels_group(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active_channels_group", 3)
	}

	VFLOAT3 long_key() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "long_key", 3)
	}

	void long_key(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "long_key", 3)
	}

	VFLOAT3 long_key_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "long_key_selected", 3)
	}

	void long_key_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "long_key_selected", 3)
	}

	VFLOAT3 keyframe() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe", 3)
	}

	void keyframe(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe", 3)
	}

	VFLOAT3 keyframe_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_selected", 3)
	}

	void keyframe_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_selected", 3)
	}

	VFLOAT3 keyframe_extreme() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_extreme", 3)
	}

	void keyframe_extreme(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_extreme", 3)
	}

	VFLOAT3 keyframe_extreme_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_extreme_selected", 3)
	}

	void keyframe_extreme_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_extreme_selected", 3)
	}

	VFLOAT3 keyframe_breakdown() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_breakdown", 3)
	}

	void keyframe_breakdown(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_breakdown", 3)
	}

	VFLOAT3 keyframe_breakdown_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_breakdown_selected", 3)
	}

	void keyframe_breakdown_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_breakdown_selected", 3)
	}

	VFLOAT3 keyframe_jitter() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_jitter", 3)
	}

	void keyframe_jitter(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_jitter", 3)
	}

	VFLOAT3 keyframe_jitter_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_jitter_selected", 3)
	}

	void keyframe_jitter_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_jitter_selected", 3)
	}

	VFLOAT4 keyframe_border() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_border", 4)
	}

	void keyframe_border(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_border", 4)
	}

	VFLOAT4 keyframe_border_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe_border_selected", 4)
	}

	void keyframe_border_selected(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe_border_selected", 4)
	}

	VFLOAT4 summary() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "summary", 4)
	}

	void summary(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "summary", 4)
	}
};

class ThemeImageEditor : public pyUniplug {
public:
	ThemeImageEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeImageEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	VFLOAT3 gp_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex", 3)
	}

	void gp_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex", 3)
	}

	VFLOAT3 gp_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex_select", 3)
	}

	void gp_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex_select", 3)
	}

	int gp_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gp_vertex_size")
	}

	void gp_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gp_vertex_size", value)
	}

	VFLOAT3 vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex", 3)
	}

	void vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex", 3)
	}

	VFLOAT3 vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex_select", 3)
	}

	void vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex_select", 3)
	}

	int vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "vertex_size")
	}

	void vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "vertex_size", value)
	}

	VFLOAT3 vertex_unreferenced() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vertex_unreferenced", 3)
	}

	void vertex_unreferenced(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vertex_unreferenced", 3)
	}

	VFLOAT4 face() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "face", 4)
	}

	void face(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "face", 4)
	}

	VFLOAT4 face_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "face_select", 4)
	}

	void face_select(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "face_select", 4)
	}

	VFLOAT3 face_dot() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "face_dot", 3)
	}

	void face_dot(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "face_dot", 3)
	}

	int facedot_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "facedot_size")
	}

	void facedot_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "facedot_size", value)
	}

	VFLOAT4 freestyle_face_mark() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "freestyle_face_mark", 4)
	}

	void freestyle_face_mark(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "freestyle_face_mark", 4)
	}

	VFLOAT4 editmesh_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "editmesh_active", 4)
	}

	void editmesh_active(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "editmesh_active", 4)
	}

	VFLOAT3 wire_edit() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "wire_edit", 3)
	}

	void wire_edit(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "wire_edit", 3)
	}

	VFLOAT3 edge_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "edge_select", 3)
	}

	void edge_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "edge_select", 3)
	}

	VFLOAT4 scope_back() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scope_back", 4)
	}

	void scope_back(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scope_back", 4)
	}

	VFLOAT4 preview_stitch_face() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "preview_stitch_face", 4)
	}

	void preview_stitch_face(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "preview_stitch_face", 4)
	}

	VFLOAT4 preview_stitch_edge() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "preview_stitch_edge", 4)
	}

	void preview_stitch_edge(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "preview_stitch_edge", 4)
	}

	VFLOAT4 preview_stitch_vert() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "preview_stitch_vert", 4)
	}

	void preview_stitch_vert(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "preview_stitch_vert", 4)
	}

	VFLOAT4 preview_stitch_stitchable() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "preview_stitch_stitchable", 4)
	}

	void preview_stitch_stitchable(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "preview_stitch_stitchable", 4)
	}

	VFLOAT4 preview_stitch_unstitchable() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "preview_stitch_unstitchable", 4)
	}

	void preview_stitch_unstitchable(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "preview_stitch_unstitchable", 4)
	}

	VFLOAT4 preview_stitch_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "preview_stitch_active", 4)
	}

	void preview_stitch_active(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "preview_stitch_active", 4)
	}

	VFLOAT4 uv_shadow() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv_shadow", 4)
	}

	void uv_shadow(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv_shadow", 4)
	}

	VFLOAT4 uv_others() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "uv_others", 4)
	}

	void uv_others(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "uv_others", 4)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}

	VFLOAT3 metadatabg() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "metadatabg", 3)
	}

	void metadatabg(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "metadatabg", 3)
	}

	VFLOAT3 metadatatext() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "metadatatext", 3)
	}

	void metadatatext(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "metadatatext", 3)
	}

	VFLOAT3 handle_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_free", 3)
	}

	void handle_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_free", 3)
	}

	VFLOAT3 handle_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_auto", 3)
	}

	void handle_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_auto", 3)
	}

	VFLOAT3 handle_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_align", 3)
	}

	void handle_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_align", 3)
	}

	VFLOAT3 handle_sel_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_free", 3)
	}

	void handle_sel_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_free", 3)
	}

	VFLOAT3 handle_sel_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_auto", 3)
	}

	void handle_sel_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_auto", 3)
	}

	VFLOAT3 handle_sel_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_align", 3)
	}

	void handle_sel_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_align", 3)
	}

	VFLOAT3 handle_auto_clamped() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_auto_clamped", 3)
	}

	void handle_auto_clamped(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_auto_clamped", 3)
	}

	VFLOAT3 handle_sel_auto_clamped() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_auto_clamped", 3)
	}

	void handle_sel_auto_clamped(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_auto_clamped", 3)
	}

	VFLOAT3 handle_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vertex", 3)
	}

	void handle_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vertex", 3)
	}

	VFLOAT3 handle_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vertex_select", 3)
	}

	void handle_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vertex_select", 3)
	}

	int handle_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "handle_vertex_size")
	}

	void handle_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "handle_vertex_size", value)
	}

	VFLOAT4 paint_curve_handle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "paint_curve_handle", 4)
	}

	void paint_curve_handle(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "paint_curve_handle", 4)
	}

	VFLOAT4 paint_curve_pivot() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "paint_curve_pivot", 4)
	}

	void paint_curve_pivot(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "paint_curve_pivot", 4)
	}
};

class ThemeSequenceEditor : public pyUniplug {
public:
	ThemeSequenceEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeSequenceEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	VFLOAT3 gp_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex", 3)
	}

	void gp_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex", 3)
	}

	VFLOAT3 gp_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex_select", 3)
	}

	void gp_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex_select", 3)
	}

	int gp_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gp_vertex_size")
	}

	void gp_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gp_vertex_size", value)
	}

	VFLOAT3 grid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "grid", 3)
	}

	void grid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "grid", 3)
	}

	VFLOAT3 window_sliders() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "window_sliders", 3)
	}

	void window_sliders(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "window_sliders", 3)
	}

	VFLOAT3 movie_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "movie_strip", 3)
	}

	void movie_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "movie_strip", 3)
	}

	VFLOAT3 movieclip_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "movieclip_strip", 3)
	}

	void movieclip_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "movieclip_strip", 3)
	}

	VFLOAT3 image_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "image_strip", 3)
	}

	void image_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "image_strip", 3)
	}

	VFLOAT3 scene_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "scene_strip", 3)
	}

	void scene_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "scene_strip", 3)
	}

	VFLOAT3 audio_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "audio_strip", 3)
	}

	void audio_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "audio_strip", 3)
	}

	VFLOAT3 effect_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "effect_strip", 3)
	}

	void effect_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "effect_strip", 3)
	}

	VFLOAT3 transition_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "transition_strip", 3)
	}

	void transition_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "transition_strip", 3)
	}

	VFLOAT3 meta_strip() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "meta_strip", 3)
	}

	void meta_strip(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "meta_strip", 3)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}

	VFLOAT3 keyframe() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "keyframe", 3)
	}

	void keyframe(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "keyframe", 3)
	}

	VFLOAT3 draw_action() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "draw_action", 3)
	}

	void draw_action(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "draw_action", 3)
	}

	VFLOAT3 preview_back() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "preview_back", 3)
	}

	void preview_back(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "preview_back", 3)
	}

	VFLOAT3 metadatabg() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "metadatabg", 3)
	}

	void metadatabg(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "metadatabg", 3)
	}

	VFLOAT3 metadatatext() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "metadatatext", 3)
	}

	void metadatatext(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "metadatatext", 3)
	}
};

class ThemeProperties : public pyUniplug {
public:
	ThemeProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeProperties() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}
};

class ThemeTextEditor : public pyUniplug {
public:
	ThemeTextEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeTextEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	VFLOAT3 line_numbers_background() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "line_numbers_background", 3)
	}

	void line_numbers_background(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "line_numbers_background", 3)
	}

	VFLOAT3 selected_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "selected_text", 3)
	}

	void selected_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "selected_text", 3)
	}

	VFLOAT3 cursor() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor", 3)
	}

	void cursor(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor", 3)
	}

	VFLOAT3 syntax_builtin() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_builtin", 3)
	}

	void syntax_builtin(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_builtin", 3)
	}

	VFLOAT3 syntax_symbols() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_symbols", 3)
	}

	void syntax_symbols(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_symbols", 3)
	}

	VFLOAT3 syntax_special() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_special", 3)
	}

	void syntax_special(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_special", 3)
	}

	VFLOAT3 syntax_preprocessor() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_preprocessor", 3)
	}

	void syntax_preprocessor(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_preprocessor", 3)
	}

	VFLOAT3 syntax_reserved() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_reserved", 3)
	}

	void syntax_reserved(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_reserved", 3)
	}

	VFLOAT3 syntax_comment() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_comment", 3)
	}

	void syntax_comment(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_comment", 3)
	}

	VFLOAT3 syntax_string() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_string", 3)
	}

	void syntax_string(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_string", 3)
	}

	VFLOAT3 syntax_numbers() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "syntax_numbers", 3)
	}

	void syntax_numbers(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "syntax_numbers", 3)
	}
};

class ThemeTimeline : public pyUniplug {
public:
	ThemeTimeline(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeTimeline() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	VFLOAT3 grid() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "grid", 3)
	}

	void grid(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "grid", 3)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}

	VFLOAT3 time_keyframe() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "time_keyframe", 3)
	}

	void time_keyframe(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "time_keyframe", 3)
	}

	VFLOAT3 time_grease_pencil() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "time_grease_pencil", 3)
	}

	void time_grease_pencil(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "time_grease_pencil", 3)
	}
};

class ThemeNodeEditor : public pyUniplug {
public:
	ThemeNodeEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeNodeEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	ThemeSpaceListGeneric space_list() {
		CLASS_TYPES_GETTER(ThemeSpaceListGeneric, "space_list")
	}

	VFLOAT3 gp_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex", 3)
	}

	void gp_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex", 3)
	}

	VFLOAT3 gp_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex_select", 3)
	}

	void gp_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex_select", 3)
	}

	int gp_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gp_vertex_size")
	}

	void gp_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gp_vertex_size", value)
	}

	VFLOAT3 node_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "node_selected", 3)
	}

	void node_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "node_selected", 3)
	}

	VFLOAT3 node_active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "node_active", 3)
	}

	void node_active(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "node_active", 3)
	}

	VFLOAT3 wire() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "wire", 3)
	}

	void wire(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "wire", 3)
	}

	VFLOAT3 wire_inner() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "wire_inner", 3)
	}

	void wire_inner(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "wire_inner", 3)
	}

	VFLOAT3 wire_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "wire_select", 3)
	}

	void wire_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "wire_select", 3)
	}

	VFLOAT3 selected_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "selected_text", 3)
	}

	void selected_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "selected_text", 3)
	}

	VFLOAT4 node_backdrop() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "node_backdrop", 4)
	}

	void node_backdrop(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "node_backdrop", 4)
	}

	VFLOAT3 converter_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "converter_node", 3)
	}

	void converter_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "converter_node", 3)
	}

	VFLOAT3 color_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color_node", 3)
	}

	void color_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color_node", 3)
	}

	VFLOAT3 group_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "group_node", 3)
	}

	void group_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "group_node", 3)
	}

	VFLOAT3 group_socket_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "group_socket_node", 3)
	}

	void group_socket_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "group_socket_node", 3)
	}

	VFLOAT4 frame_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_node", 4)
	}

	void frame_node(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_node", 4)
	}

	VFLOAT3 matte_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matte_node", 3)
	}

	void matte_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matte_node", 3)
	}

	VFLOAT3 distor_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "distor_node", 3)
	}

	void distor_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "distor_node", 3)
	}

	int noodle_curving() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "noodle_curving")
	}

	void noodle_curving(int value) {
		PRIMITIVE_TYPES_SETTER("i", "noodle_curving", value)
	}

	VFLOAT3 input_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "input_node", 3)
	}

	void input_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "input_node", 3)
	}

	VFLOAT3 output_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "output_node", 3)
	}

	void output_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "output_node", 3)
	}

	VFLOAT3 filter_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "filter_node", 3)
	}

	void filter_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "filter_node", 3)
	}

	VFLOAT3 vector_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "vector_node", 3)
	}

	void vector_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "vector_node", 3)
	}

	VFLOAT3 texture_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "texture_node", 3)
	}

	void texture_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "texture_node", 3)
	}

	VFLOAT3 shader_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "shader_node", 3)
	}

	void shader_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "shader_node", 3)
	}

	VFLOAT3 script_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "script_node", 3)
	}

	void script_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "script_node", 3)
	}

	VFLOAT3 pattern_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "pattern_node", 3)
	}

	void pattern_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "pattern_node", 3)
	}

	VFLOAT3 layout_node() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "layout_node", 3)
	}

	void layout_node(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "layout_node", 3)
	}
};

class ThemeOutliner : public pyUniplug {
public:
	ThemeOutliner(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeOutliner() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	VFLOAT3 match() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "match", 3)
	}

	void match(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "match", 3)
	}

	VFLOAT3 selected_highlight() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "selected_highlight", 3)
	}

	void selected_highlight(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "selected_highlight", 3)
	}
};

class ThemeInfo : public pyUniplug {
public:
	ThemeInfo(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeInfo() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	VFLOAT3 info_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_selected", 3)
	}

	void info_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_selected", 3)
	}

	VFLOAT3 info_selected_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_selected_text", 3)
	}

	void info_selected_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_selected_text", 3)
	}

	VFLOAT3 info_error() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_error", 3)
	}

	void info_error(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_error", 3)
	}

	VFLOAT3 info_error_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_error_text", 3)
	}

	void info_error_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_error_text", 3)
	}

	VFLOAT3 info_warning() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_warning", 3)
	}

	void info_warning(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_warning", 3)
	}

	VFLOAT3 info_warning_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_warning_text", 3)
	}

	void info_warning_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_warning_text", 3)
	}

	VFLOAT3 info_info() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_info", 3)
	}

	void info_info(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_info", 3)
	}

	VFLOAT3 info_info_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_info_text", 3)
	}

	void info_info_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_info_text", 3)
	}

	VFLOAT3 info_debug() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_debug", 3)
	}

	void info_debug(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_debug", 3)
	}

	VFLOAT3 info_debug_text() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "info_debug_text", 3)
	}

	void info_debug_text(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "info_debug_text", 3)
	}
};

class ThemeUserPreferences : public pyUniplug {
public:
	ThemeUserPreferences(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeUserPreferences() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}
};

class ThemeConsole : public pyUniplug {
public:
	ThemeConsole(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeConsole() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	VFLOAT3 line_output() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "line_output", 3)
	}

	void line_output(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "line_output", 3)
	}

	VFLOAT3 line_input() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "line_input", 3)
	}

	void line_input(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "line_input", 3)
	}

	VFLOAT3 line_info() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "line_info", 3)
	}

	void line_info(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "line_info", 3)
	}

	VFLOAT3 line_error() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "line_error", 3)
	}

	void line_error(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "line_error", 3)
	}

	VFLOAT3 cursor() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "cursor", 3)
	}

	void cursor(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "cursor", 3)
	}

	VFLOAT4 select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "select", 4)
	}

	void select(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "select", 4)
	}
};

class ThemeLogicEditor : public pyUniplug {
public:
	ThemeLogicEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeLogicEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}
};

class ThemeClipEditor : public pyUniplug {
public:
	ThemeClipEditor(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeClipEditor() : pyUniplug(0) { }

	ThemeSpaceGeneric space() {
		CLASS_TYPES_GETTER(ThemeSpaceGeneric, "space")
	}

	ThemeSpaceListGeneric space_list() {
		CLASS_TYPES_GETTER(ThemeSpaceListGeneric, "space_list")
	}

	VFLOAT3 gp_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex", 3)
	}

	void gp_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex", 3)
	}

	VFLOAT3 gp_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "gp_vertex_select", 3)
	}

	void gp_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "gp_vertex_select", 3)
	}

	int gp_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "gp_vertex_size")
	}

	void gp_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "gp_vertex_size", value)
	}

	VFLOAT3 marker_outline() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "marker_outline", 3)
	}

	void marker_outline(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "marker_outline", 3)
	}

	VFLOAT3 marker() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "marker", 3)
	}

	void marker(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "marker", 3)
	}

	VFLOAT3 active_marker() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active_marker", 3)
	}

	void active_marker(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active_marker", 3)
	}

	VFLOAT3 selected_marker() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "selected_marker", 3)
	}

	void selected_marker(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "selected_marker", 3)
	}

	VFLOAT3 disabled_marker() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "disabled_marker", 3)
	}

	void disabled_marker(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "disabled_marker", 3)
	}

	VFLOAT3 locked_marker() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "locked_marker", 3)
	}

	void locked_marker(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "locked_marker", 3)
	}

	VFLOAT3 path_before() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "path_before", 3)
	}

	void path_before(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "path_before", 3)
	}

	VFLOAT3 path_after() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "path_after", 3)
	}

	void path_after(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "path_after", 3)
	}

	VFLOAT3 frame_current() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "frame_current", 3)
	}

	void frame_current(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "frame_current", 3)
	}

	VFLOAT3 strips() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "strips", 3)
	}

	void strips(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "strips", 3)
	}

	VFLOAT3 strips_selected() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "strips_selected", 3)
	}

	void strips_selected(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "strips_selected", 3)
	}

	VFLOAT3 handle_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_free", 3)
	}

	void handle_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_free", 3)
	}

	VFLOAT3 handle_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_auto", 3)
	}

	void handle_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_auto", 3)
	}

	VFLOAT3 handle_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_align", 3)
	}

	void handle_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_align", 3)
	}

	VFLOAT3 handle_sel_free() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_free", 3)
	}

	void handle_sel_free(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_free", 3)
	}

	VFLOAT3 handle_sel_auto() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_auto", 3)
	}

	void handle_sel_auto(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_auto", 3)
	}

	VFLOAT3 handle_sel_align() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_align", 3)
	}

	void handle_sel_align(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_align", 3)
	}

	VFLOAT3 handle_auto_clamped() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_auto_clamped", 3)
	}

	void handle_auto_clamped(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_auto_clamped", 3)
	}

	VFLOAT3 handle_sel_auto_clamped() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_sel_auto_clamped", 3)
	}

	void handle_sel_auto_clamped(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_sel_auto_clamped", 3)
	}

	VFLOAT3 handle_vertex() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vertex", 3)
	}

	void handle_vertex(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vertex", 3)
	}

	VFLOAT3 handle_vertex_select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_vertex_select", 3)
	}

	void handle_vertex_select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_vertex_select", 3)
	}

	int handle_vertex_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "handle_vertex_size")
	}

	void handle_vertex_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "handle_vertex_size", value)
	}
};

class ThemeBoneColorSet : public pyUniplug {
public:
	ThemeBoneColorSet(PyObject* pyobj) : pyUniplug(pyobj) {}
	ThemeBoneColorSet() : pyUniplug(0) { }

	VFLOAT3 normal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "normal", 3)
	}

	void normal(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "normal", 3)
	}

	VFLOAT3 select() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "select", 3)
	}

	void select(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "select", 3)
	}

	VFLOAT3 active() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "active", 3)
	}

	void active(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "active", 3)
	}

	bool show_colored_constraints() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_colored_constraints")
	}

	void show_colored_constraints(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_colored_constraints", value)
	}
};

class Theme : public pyUniplug {
public:
	Theme(PyObject* pyobj) : pyUniplug(pyobj) {}
	Theme() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum active_theme_area_enum {
		active_theme_area_USER_INTERFACE = 0,	
		active_theme_area_STYLE = 19,	
		active_theme_area_BONE_COLOR_SETS = 18,	
		active_theme_area_VIEW_3D = 1,	
		active_theme_area_TIMELINE = 2,	
		active_theme_area_GRAPH_EDITOR = 3,	
		active_theme_area_DOPESHEET_EDITOR = 4,	
		active_theme_area_NLA_EDITOR = 5,	
		active_theme_area_IMAGE_EDITOR = 6,	
		active_theme_area_SEQUENCE_EDITOR = 7,	
		active_theme_area_TEXT_EDITOR = 8,	
		active_theme_area_NODE_EDITOR = 9,	
		active_theme_area_LOGIC_EDITOR = 10,	
		active_theme_area_PROPERTIES = 11,	
		active_theme_area_OUTLINER = 12,	
		active_theme_area_USER_PREFERENCES = 14,	
		active_theme_area_INFO = 15,	
		active_theme_area_FILE_BROWSER = 16,	
		active_theme_area_CONSOLE = 17,	
		active_theme_area_CLIP_EDITOR = 20	
	};

	std::map<std::string, int> create_string_to_active_theme_area() {
		return {{"USER_INTERFACE", active_theme_area_USER_INTERFACE}, {"STYLE", active_theme_area_STYLE}, {"BONE_COLOR_SETS", active_theme_area_BONE_COLOR_SETS}, {"VIEW_3D", active_theme_area_VIEW_3D}, {"TIMELINE", active_theme_area_TIMELINE}, {"GRAPH_EDITOR", active_theme_area_GRAPH_EDITOR}, {"DOPESHEET_EDITOR", active_theme_area_DOPESHEET_EDITOR}, {"NLA_EDITOR", active_theme_area_NLA_EDITOR}, {"IMAGE_EDITOR", active_theme_area_IMAGE_EDITOR}, {"SEQUENCE_EDITOR", active_theme_area_SEQUENCE_EDITOR}, {"TEXT_EDITOR", active_theme_area_TEXT_EDITOR}, {"NODE_EDITOR", active_theme_area_NODE_EDITOR}, {"LOGIC_EDITOR", active_theme_area_LOGIC_EDITOR}, {"PROPERTIES", active_theme_area_PROPERTIES}, {"OUTLINER", active_theme_area_OUTLINER}, {"USER_PREFERENCES", active_theme_area_USER_PREFERENCES}, {"INFO", active_theme_area_INFO}, {"FILE_BROWSER", active_theme_area_FILE_BROWSER}, {"CONSOLE", active_theme_area_CONSOLE}, {"CLIP_EDITOR", active_theme_area_CLIP_EDITOR}};
	};

	std::map<int, std::string> create_active_theme_area_to_string() {
		return {{active_theme_area_USER_INTERFACE, "USER_INTERFACE"}, {active_theme_area_STYLE, "STYLE"}, {active_theme_area_BONE_COLOR_SETS, "BONE_COLOR_SETS"}, {active_theme_area_VIEW_3D, "VIEW_3D"}, {active_theme_area_TIMELINE, "TIMELINE"}, {active_theme_area_GRAPH_EDITOR, "GRAPH_EDITOR"}, {active_theme_area_DOPESHEET_EDITOR, "DOPESHEET_EDITOR"}, {active_theme_area_NLA_EDITOR, "NLA_EDITOR"}, {active_theme_area_IMAGE_EDITOR, "IMAGE_EDITOR"}, {active_theme_area_SEQUENCE_EDITOR, "SEQUENCE_EDITOR"}, {active_theme_area_TEXT_EDITOR, "TEXT_EDITOR"}, {active_theme_area_NODE_EDITOR, "NODE_EDITOR"}, {active_theme_area_LOGIC_EDITOR, "LOGIC_EDITOR"}, {active_theme_area_PROPERTIES, "PROPERTIES"}, {active_theme_area_OUTLINER, "OUTLINER"}, {active_theme_area_USER_PREFERENCES, "USER_PREFERENCES"}, {active_theme_area_INFO, "INFO"}, {active_theme_area_FILE_BROWSER, "FILE_BROWSER"}, {active_theme_area_CONSOLE, "CONSOLE"}, {active_theme_area_CLIP_EDITOR, "CLIP_EDITOR"}};
	};

	const std::map<std::string, int> string_to_active_theme_area = create_string_to_active_theme_area();
	const std::map<int, std::string> active_theme_area_to_string = create_active_theme_area_to_string();

	active_theme_area_enum theme_area() {
		STRING_TYPE_GETTER("theme_area", static_cast<active_theme_area_enum>(string_to_active_theme_area.at(resstr)))
	}

	void theme_area(active_theme_area_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "theme_area", active_theme_area_to_string.at(value))
	}

	ThemeUserInterface user_interface() {
		CLASS_TYPES_GETTER(ThemeUserInterface, "user_interface")
	}

	ThemeView3D view_3d() {
		CLASS_TYPES_GETTER(ThemeView3D, "view_3d")
	}

	ThemeGraphEditor graph_editor() {
		CLASS_TYPES_GETTER(ThemeGraphEditor, "graph_editor")
	}

	ThemeFileBrowser file_browser() {
		CLASS_TYPES_GETTER(ThemeFileBrowser, "file_browser")
	}

	ThemeNLAEditor nla_editor() {
		CLASS_TYPES_GETTER(ThemeNLAEditor, "nla_editor")
	}

	ThemeDopeSheet dopesheet_editor() {
		CLASS_TYPES_GETTER(ThemeDopeSheet, "dopesheet_editor")
	}

	ThemeImageEditor image_editor() {
		CLASS_TYPES_GETTER(ThemeImageEditor, "image_editor")
	}

	ThemeSequenceEditor sequence_editor() {
		CLASS_TYPES_GETTER(ThemeSequenceEditor, "sequence_editor")
	}

	ThemeProperties properties() {
		CLASS_TYPES_GETTER(ThemeProperties, "properties")
	}

	ThemeTextEditor text_editor() {
		CLASS_TYPES_GETTER(ThemeTextEditor, "text_editor")
	}

	ThemeTimeline timeline() {
		CLASS_TYPES_GETTER(ThemeTimeline, "timeline")
	}

	ThemeNodeEditor node_editor() {
		CLASS_TYPES_GETTER(ThemeNodeEditor, "node_editor")
	}

	ThemeLogicEditor logic_editor() {
		CLASS_TYPES_GETTER(ThemeLogicEditor, "logic_editor")
	}

	ThemeOutliner outliner() {
		CLASS_TYPES_GETTER(ThemeOutliner, "outliner")
	}

	ThemeInfo info() {
		CLASS_TYPES_GETTER(ThemeInfo, "info")
	}

	ThemeUserPreferences user_preferences() {
		CLASS_TYPES_GETTER(ThemeUserPreferences, "user_preferences")
	}

	ThemeConsole console() {
		CLASS_TYPES_GETTER(ThemeConsole, "console")
	}

	std::map<std::string, ThemeBoneColorSet> bone_color_sets() {
		MAP_TYPE_GETTER("bone_color_sets", ThemeBoneColorSet)
	}

	ThemeClipEditor clip_editor() {
		CLASS_TYPES_GETTER(ThemeClipEditor, "clip_editor")
	}
};

class UserSolidLight : public pyUniplug {
public:
	UserSolidLight(PyObject* pyobj) : pyUniplug(pyobj) {}
	UserSolidLight() : pyUniplug(0) { }

	bool use() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use")
	}

	void use(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use", value)
	}

	VFLOAT3 direction() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "direction", 3)
	}

	void direction(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "direction", 3)
	}

	VFLOAT3 diffuse_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "diffuse_color", 3)
	}

	void diffuse_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "diffuse_color", 3)
	}

	VFLOAT3 specular_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "specular_color", 3)
	}

	void specular_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "specular_color", 3)
	}
};

class WalkNavigation : public pyUniplug {
public:
	WalkNavigation(PyObject* pyobj) : pyUniplug(pyobj) {}
	WalkNavigation() : pyUniplug(0) { }

	float mouse_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "mouse_speed")
	}

	void mouse_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "mouse_speed", value)
	}

	float walk_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "walk_speed")
	}

	void walk_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "walk_speed", value)
	}

	float walk_speed_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "walk_speed_factor")
	}

	void walk_speed_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "walk_speed_factor", value)
	}

	float view_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "view_height")
	}

	void view_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "view_height", value)
	}

	float jump_height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "jump_height")
	}

	void jump_height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "jump_height", value)
	}

	float teleport_time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "teleport_time")
	}

	void teleport_time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "teleport_time", value)
	}

	bool use_gravity() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_gravity")
	}

	void use_gravity(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_gravity", value)
	}

	bool use_mouse_reverse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mouse_reverse")
	}

	void use_mouse_reverse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mouse_reverse", value)
	}
};

class UserPreferences : public pyUniplug {
public:
	UserPreferences(PyObject* pyobj) : pyUniplug(pyobj) {}
	UserPreferences() : pyUniplug(0) { }

	enum user_pref_sections_enum {
		user_pref_sections_INTERFACE = 0,	
		user_pref_sections_EDITING = 1,	
		user_pref_sections_INPUT = 5,	
		user_pref_sections_ADDONS = 6,	
		user_pref_sections_THEMES = 4,	
		user_pref_sections_FILES = 2,	
		user_pref_sections_SYSTEM = 3	
	};

	std::map<std::string, int> create_string_to_user_pref_sections() {
		return {{"INTERFACE", user_pref_sections_INTERFACE}, {"EDITING", user_pref_sections_EDITING}, {"INPUT", user_pref_sections_INPUT}, {"ADDONS", user_pref_sections_ADDONS}, {"THEMES", user_pref_sections_THEMES}, {"FILES", user_pref_sections_FILES}, {"SYSTEM", user_pref_sections_SYSTEM}};
	};

	std::map<int, std::string> create_user_pref_sections_to_string() {
		return {{user_pref_sections_INTERFACE, "INTERFACE"}, {user_pref_sections_EDITING, "EDITING"}, {user_pref_sections_INPUT, "INPUT"}, {user_pref_sections_ADDONS, "ADDONS"}, {user_pref_sections_THEMES, "THEMES"}, {user_pref_sections_FILES, "FILES"}, {user_pref_sections_SYSTEM, "SYSTEM"}};
	};

	const std::map<std::string, int> string_to_user_pref_sections = create_string_to_user_pref_sections();
	const std::map<int, std::string> user_pref_sections_to_string = create_user_pref_sections_to_string();

	user_pref_sections_enum active_section() {
		STRING_TYPE_GETTER("active_section", static_cast<user_pref_sections_enum>(string_to_user_pref_sections.at(resstr)))
	}

	void active_section(user_pref_sections_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "active_section", user_pref_sections_to_string.at(value))
	}

	std::map<std::string, Theme> themes() {
		MAP_TYPE_GETTER("themes", Theme)
	}

	std::map<std::string, ThemeStyle> ui_styles() {
		MAP_TYPE_GETTER("ui_styles", ThemeStyle)
	}

	std::map<std::string, Addon> addons();

	std::map<std::string, PathCompare> autoexec_paths();

	UserPreferencesView view();

	UserPreferencesEdit edit();

	UserPreferencesInput inputs();

	UserPreferencesFilePaths filepaths();

	UserPreferencesSystem system();
};

class UserPreferencesView : public pyUniplug {
public:
	UserPreferencesView(PyObject* pyobj) : pyUniplug(pyobj) {}
	UserPreferencesView() : pyUniplug(0) { }

	bool show_tooltips() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_tooltips")
	}

	void show_tooltips(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_tooltips", value)
	}

	bool show_tooltips_python() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_tooltips_python")
	}

	void show_tooltips_python(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_tooltips_python", value)
	}

	bool show_object_info() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_object_info")
	}

	void show_object_info(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_object_info", value)
	}

	bool use_global_scene() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_global_scene")
	}

	void use_global_scene(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_global_scene", value)
	}

	bool show_large_cursors() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_large_cursors")
	}

	void show_large_cursors(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_large_cursors", value)
	}

	bool show_view_name() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_view_name")
	}

	void show_view_name(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_view_name", value)
	}

	bool show_splash() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_splash")
	}

	void show_splash(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_splash", value)
	}

	bool show_playback_fps() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_playback_fps")
	}

	void show_playback_fps(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_playback_fps", value)
	}

	bool use_mouse_over_open() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mouse_over_open")
	}

	void use_mouse_over_open(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mouse_over_open", value)
	}

	int open_toplevel_delay() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "open_toplevel_delay")
	}

	void open_toplevel_delay(int value) {
		PRIMITIVE_TYPES_SETTER("i", "open_toplevel_delay", value)
	}

	int open_sublevel_delay() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "open_sublevel_delay")
	}

	void open_sublevel_delay(int value) {
		PRIMITIVE_TYPES_SETTER("i", "open_sublevel_delay", value)
	}

	int pie_initial_timeout() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "pie_initial_timeout")
	}

	void pie_initial_timeout(int value) {
		PRIMITIVE_TYPES_SETTER("i", "pie_initial_timeout", value)
	}

	int pie_animation_timeout() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "pie_animation_timeout")
	}

	void pie_animation_timeout(int value) {
		PRIMITIVE_TYPES_SETTER("i", "pie_animation_timeout", value)
	}

	int pie_menu_radius() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "pie_menu_radius")
	}

	void pie_menu_radius(int value) {
		PRIMITIVE_TYPES_SETTER("i", "pie_menu_radius", value)
	}

	int pie_menu_threshold() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "pie_menu_threshold")
	}

	void pie_menu_threshold(int value) {
		PRIMITIVE_TYPES_SETTER("i", "pie_menu_threshold", value)
	}

	int pie_menu_confirm() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "pie_menu_confirm")
	}

	void pie_menu_confirm(int value) {
		PRIMITIVE_TYPES_SETTER("i", "pie_menu_confirm", value)
	}

	bool use_quit_dialog() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_quit_dialog")
	}

	void use_quit_dialog(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_quit_dialog", value)
	}

	bool use_gl_warn_support() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_gl_warn_support")
	}

	void use_gl_warn_support(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_gl_warn_support", value)
	}

	int open_left_mouse_delay() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "open_left_mouse_delay")
	}

	void open_left_mouse_delay(int value) {
		PRIMITIVE_TYPES_SETTER("i", "open_left_mouse_delay", value)
	}

	int open_right_mouse_delay() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "open_right_mouse_delay")
	}

	void open_right_mouse_delay(int value) {
		PRIMITIVE_TYPES_SETTER("i", "open_right_mouse_delay", value)
	}

	bool show_column_layout() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_column_layout")
	}

	void show_column_layout(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_column_layout", value)
	}

	bool use_directional_menus() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_directional_menus")
	}

	void use_directional_menus(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_directional_menus", value)
	}

	bool use_global_pivot() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_global_pivot")
	}

	void use_global_pivot(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_global_pivot", value)
	}

	bool use_mouse_depth_navigate() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mouse_depth_navigate")
	}

	void use_mouse_depth_navigate(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mouse_depth_navigate", value)
	}

	bool use_mouse_depth_cursor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mouse_depth_cursor")
	}

	void use_mouse_depth_cursor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mouse_depth_cursor", value)
	}

	bool use_camera_lock_parent() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_camera_lock_parent")
	}

	void use_camera_lock_parent(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_camera_lock_parent", value)
	}

	bool use_zoom_to_mouse() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_zoom_to_mouse")
	}

	void use_zoom_to_mouse(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_zoom_to_mouse", value)
	}

	bool use_auto_perspective() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_perspective")
	}

	void use_auto_perspective(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_perspective", value)
	}

	bool use_rotate_around_active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_rotate_around_active")
	}

	void use_rotate_around_active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_rotate_around_active", value)
	}

	bool show_mini_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_mini_axis")
	}

	void show_mini_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_mini_axis", value)
	}

	int mini_axis_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mini_axis_size")
	}

	void mini_axis_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mini_axis_size", value)
	}

	int mini_axis_brightness() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mini_axis_brightness")
	}

	void mini_axis_brightness(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mini_axis_brightness", value)
	}

	int smooth_view() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "smooth_view")
	}

	void smooth_view(int value) {
		PRIMITIVE_TYPES_SETTER("i", "smooth_view", value)
	}

	float rotation_angle() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "rotation_angle")
	}

	void rotation_angle(float value) {
		PRIMITIVE_TYPES_SETTER("f", "rotation_angle", value)
	}

	bool show_manipulator() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_manipulator")
	}

	void show_manipulator(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_manipulator", value)
	}

	int manipulator_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "manipulator_size")
	}

	void manipulator_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "manipulator_size", value)
	}

	int manipulator_handle_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "manipulator_handle_size")
	}

	void manipulator_handle_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "manipulator_handle_size", value)
	}

	int manipulator_hotspot() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "manipulator_hotspot")
	}

	void manipulator_hotspot(int value) {
		PRIMITIVE_TYPES_SETTER("i", "manipulator_hotspot", value)
	}

	int object_origin_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "object_origin_size")
	}

	void object_origin_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "object_origin_size", value)
	}

	int view2d_grid_spacing_min() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "view2d_grid_spacing_min")
	}

	void view2d_grid_spacing_min(int value) {
		PRIMITIVE_TYPES_SETTER("i", "view2d_grid_spacing_min", value)
	}

	enum timecode_styles_enum {
		timecode_styles_MINIMAL = 0,	
		timecode_styles_SMPTE = 2,	
		timecode_styles_SMPTE_COMPACT = 1,	
		timecode_styles_MILLISECONDS = 3,	
		timecode_styles_SECONDS_ONLY = 4	
	};

	std::map<std::string, int> create_string_to_timecode_styles() {
		return {{"MINIMAL", timecode_styles_MINIMAL}, {"SMPTE", timecode_styles_SMPTE}, {"SMPTE_COMPACT", timecode_styles_SMPTE_COMPACT}, {"MILLISECONDS", timecode_styles_MILLISECONDS}, {"SECONDS_ONLY", timecode_styles_SECONDS_ONLY}};
	};

	std::map<int, std::string> create_timecode_styles_to_string() {
		return {{timecode_styles_MINIMAL, "MINIMAL"}, {timecode_styles_SMPTE, "SMPTE"}, {timecode_styles_SMPTE_COMPACT, "SMPTE_COMPACT"}, {timecode_styles_MILLISECONDS, "MILLISECONDS"}, {timecode_styles_SECONDS_ONLY, "SECONDS_ONLY"}};
	};

	const std::map<std::string, int> string_to_timecode_styles = create_string_to_timecode_styles();
	const std::map<int, std::string> timecode_styles_to_string = create_timecode_styles_to_string();

	timecode_styles_enum timecode_style() {
		STRING_TYPE_GETTER("timecode_style", static_cast<timecode_styles_enum>(string_to_timecode_styles.at(resstr)))
	}

	void timecode_style(timecode_styles_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "timecode_style", timecode_styles_to_string.at(value))
	}

	enum zoom_frame_modes_enum {
		zoom_frame_modes_KEEP_RANGE = 0,	
		zoom_frame_modes_SECONDS = 1,	
		zoom_frame_modes_KEYFRAMES = 2	
	};

	std::map<std::string, int> create_string_to_zoom_frame_modes() {
		return {{"KEEP_RANGE", zoom_frame_modes_KEEP_RANGE}, {"SECONDS", zoom_frame_modes_SECONDS}, {"KEYFRAMES", zoom_frame_modes_KEYFRAMES}};
	};

	std::map<int, std::string> create_zoom_frame_modes_to_string() {
		return {{zoom_frame_modes_KEEP_RANGE, "KEEP_RANGE"}, {zoom_frame_modes_SECONDS, "SECONDS"}, {zoom_frame_modes_KEYFRAMES, "KEYFRAMES"}};
	};

	const std::map<std::string, int> string_to_zoom_frame_modes = create_string_to_zoom_frame_modes();
	const std::map<int, std::string> zoom_frame_modes_to_string = create_zoom_frame_modes_to_string();

	zoom_frame_modes_enum view_frame_type() {
		STRING_TYPE_GETTER("view_frame_type", static_cast<zoom_frame_modes_enum>(string_to_zoom_frame_modes.at(resstr)))
	}

	void view_frame_type(zoom_frame_modes_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_frame_type", zoom_frame_modes_to_string.at(value))
	}

	int view_frame_keyframes() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "view_frame_keyframes")
	}

	void view_frame_keyframes(int value) {
		PRIMITIVE_TYPES_SETTER("i", "view_frame_keyframes", value)
	}

	float view_frame_seconds() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "view_frame_seconds")
	}

	void view_frame_seconds(float value) {
		PRIMITIVE_TYPES_SETTER("f", "view_frame_seconds", value)
	}
};

class UserPreferencesEdit : public pyUniplug {
public:
	UserPreferencesEdit(PyObject* pyobj) : pyUniplug(pyobj) {}
	UserPreferencesEdit() : pyUniplug(0) { }

	enum material_link_items_enum {
		material_link_items_OBDATA = 0,	
		material_link_items_OBJECT = 256	
	};

	std::map<std::string, int> create_string_to_material_link_items() {
		return {{"OBDATA", material_link_items_OBDATA}, {"OBJECT", material_link_items_OBJECT}};
	};

	std::map<int, std::string> create_material_link_items_to_string() {
		return {{material_link_items_OBDATA, "OBDATA"}, {material_link_items_OBJECT, "OBJECT"}};
	};

	const std::map<std::string, int> string_to_material_link_items = create_string_to_material_link_items();
	const std::map<int, std::string> material_link_items_to_string = create_material_link_items_to_string();

	material_link_items_enum material_link() {
		STRING_TYPE_GETTER("material_link", static_cast<material_link_items_enum>(string_to_material_link_items.at(resstr)))
	}

	void material_link(material_link_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "material_link", material_link_items_to_string.at(value))
	}

	enum object_align_items_enum {
		object_align_items_WORLD = 0,	
		object_align_items_VIEW = 524288	
	};

	std::map<std::string, int> create_string_to_object_align_items() {
		return {{"WORLD", object_align_items_WORLD}, {"VIEW", object_align_items_VIEW}};
	};

	std::map<int, std::string> create_object_align_items_to_string() {
		return {{object_align_items_WORLD, "WORLD"}, {object_align_items_VIEW, "VIEW"}};
	};

	const std::map<std::string, int> string_to_object_align_items = create_string_to_object_align_items();
	const std::map<int, std::string> object_align_items_to_string = create_object_align_items_to_string();

	object_align_items_enum object_align() {
		STRING_TYPE_GETTER("object_align", static_cast<object_align_items_enum>(string_to_object_align_items.at(resstr)))
	}

	void object_align(object_align_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "object_align", object_align_items_to_string.at(value))
	}

	bool use_enter_edit_mode() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_enter_edit_mode")
	}

	void use_enter_edit_mode(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_enter_edit_mode", value)
	}

	bool use_drag_immediately() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_drag_immediately")
	}

	void use_drag_immediately(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_drag_immediately", value)
	}

	int undo_steps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "undo_steps")
	}

	void undo_steps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "undo_steps", value)
	}

	int undo_memory_limit() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "undo_memory_limit")
	}

	void undo_memory_limit(int value) {
		PRIMITIVE_TYPES_SETTER("i", "undo_memory_limit", value)
	}

	bool use_global_undo() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_global_undo")
	}

	void use_global_undo(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_global_undo", value)
	}

	bool use_auto_keying() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_keying")
	}

	void use_auto_keying(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_keying", value)
	}

	enum auto_key_modes_enum {
		auto_key_modes_ADD_REPLACE_KEYS = 3,	
		auto_key_modes_REPLACE_KEYS = 5	
	};

	std::map<std::string, int> create_string_to_auto_key_modes() {
		return {{"ADD_REPLACE_KEYS", auto_key_modes_ADD_REPLACE_KEYS}, {"REPLACE_KEYS", auto_key_modes_REPLACE_KEYS}};
	};

	std::map<int, std::string> create_auto_key_modes_to_string() {
		return {{auto_key_modes_ADD_REPLACE_KEYS, "ADD_REPLACE_KEYS"}, {auto_key_modes_REPLACE_KEYS, "REPLACE_KEYS"}};
	};

	const std::map<std::string, int> string_to_auto_key_modes = create_string_to_auto_key_modes();
	const std::map<int, std::string> auto_key_modes_to_string = create_auto_key_modes_to_string();

	auto_key_modes_enum auto_keying_mode() {
		STRING_TYPE_GETTER("auto_keying_mode", static_cast<auto_key_modes_enum>(string_to_auto_key_modes.at(resstr)))
	}

	void auto_keying_mode(auto_key_modes_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "auto_keying_mode", auto_key_modes_to_string.at(value))
	}

	bool use_keyframe_insert_available() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keyframe_insert_available")
	}

	void use_keyframe_insert_available(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keyframe_insert_available", value)
	}

	bool use_auto_keying_warning() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_keying_warning")
	}

	void use_auto_keying_warning(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_keying_warning", value)
	}

	bool use_keyframe_insert_needed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keyframe_insert_needed")
	}

	void use_keyframe_insert_needed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keyframe_insert_needed", value)
	}

	bool use_visual_keying() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_visual_keying")
	}

	void use_visual_keying(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_visual_keying", value)
	}

	bool use_insertkey_xyz_to_rgb() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_insertkey_xyz_to_rgb")
	}

	void use_insertkey_xyz_to_rgb(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_insertkey_xyz_to_rgb", value)
	}

	enum beztriple_interpolation_mode_items_enum {
		beztriple_interpolation_mode_items_CONSTANT = 0,	
		beztriple_interpolation_mode_items_LINEAR = 1,	
		beztriple_interpolation_mode_items_BEZIER = 2,	
		beztriple_interpolation_mode_items_SINE = 12,	
		beztriple_interpolation_mode_items_QUAD = 9,	
		beztriple_interpolation_mode_items_CUBIC = 6,	
		beztriple_interpolation_mode_items_QUART = 10,	
		beztriple_interpolation_mode_items_QUINT = 11,	
		beztriple_interpolation_mode_items_EXPO = 8,	
		beztriple_interpolation_mode_items_CIRC = 5,	
		beztriple_interpolation_mode_items_BACK = 3,	
		beztriple_interpolation_mode_items_BOUNCE = 4,	
		beztriple_interpolation_mode_items_ELASTIC = 7	
	};

	std::map<std::string, int> create_string_to_beztriple_interpolation_mode_items() {
		return {{"CONSTANT", beztriple_interpolation_mode_items_CONSTANT}, {"LINEAR", beztriple_interpolation_mode_items_LINEAR}, {"BEZIER", beztriple_interpolation_mode_items_BEZIER}, {"SINE", beztriple_interpolation_mode_items_SINE}, {"QUAD", beztriple_interpolation_mode_items_QUAD}, {"CUBIC", beztriple_interpolation_mode_items_CUBIC}, {"QUART", beztriple_interpolation_mode_items_QUART}, {"QUINT", beztriple_interpolation_mode_items_QUINT}, {"EXPO", beztriple_interpolation_mode_items_EXPO}, {"CIRC", beztriple_interpolation_mode_items_CIRC}, {"BACK", beztriple_interpolation_mode_items_BACK}, {"BOUNCE", beztriple_interpolation_mode_items_BOUNCE}, {"ELASTIC", beztriple_interpolation_mode_items_ELASTIC}};
	};

	std::map<int, std::string> create_beztriple_interpolation_mode_items_to_string() {
		return {{beztriple_interpolation_mode_items_CONSTANT, "CONSTANT"}, {beztriple_interpolation_mode_items_LINEAR, "LINEAR"}, {beztriple_interpolation_mode_items_BEZIER, "BEZIER"}, {beztriple_interpolation_mode_items_SINE, "SINE"}, {beztriple_interpolation_mode_items_QUAD, "QUAD"}, {beztriple_interpolation_mode_items_CUBIC, "CUBIC"}, {beztriple_interpolation_mode_items_QUART, "QUART"}, {beztriple_interpolation_mode_items_QUINT, "QUINT"}, {beztriple_interpolation_mode_items_EXPO, "EXPO"}, {beztriple_interpolation_mode_items_CIRC, "CIRC"}, {beztriple_interpolation_mode_items_BACK, "BACK"}, {beztriple_interpolation_mode_items_BOUNCE, "BOUNCE"}, {beztriple_interpolation_mode_items_ELASTIC, "ELASTIC"}};
	};

	const std::map<std::string, int> string_to_beztriple_interpolation_mode_items = create_string_to_beztriple_interpolation_mode_items();
	const std::map<int, std::string> beztriple_interpolation_mode_items_to_string = create_beztriple_interpolation_mode_items_to_string();

	beztriple_interpolation_mode_items_enum keyframe_new_interpolation_type() {
		STRING_TYPE_GETTER("keyframe_new_interpolation_type", static_cast<beztriple_interpolation_mode_items_enum>(string_to_beztriple_interpolation_mode_items.at(resstr)))
	}

	void keyframe_new_interpolation_type(beztriple_interpolation_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "keyframe_new_interpolation_type", beztriple_interpolation_mode_items_to_string.at(value))
	}

	enum keyframe_handle_type_items_enum {
		keyframe_handle_type_items_FREE = 0,	
		keyframe_handle_type_items_VECTOR = 2,	
		keyframe_handle_type_items_ALIGNED = 3,	
		keyframe_handle_type_items_AUTO = 1,	
		keyframe_handle_type_items_AUTO_CLAMPED = 4	
	};

	std::map<std::string, int> create_string_to_keyframe_handle_type_items() {
		return {{"FREE", keyframe_handle_type_items_FREE}, {"VECTOR", keyframe_handle_type_items_VECTOR}, {"ALIGNED", keyframe_handle_type_items_ALIGNED}, {"AUTO", keyframe_handle_type_items_AUTO}, {"AUTO_CLAMPED", keyframe_handle_type_items_AUTO_CLAMPED}};
	};

	std::map<int, std::string> create_keyframe_handle_type_items_to_string() {
		return {{keyframe_handle_type_items_FREE, "FREE"}, {keyframe_handle_type_items_VECTOR, "VECTOR"}, {keyframe_handle_type_items_ALIGNED, "ALIGNED"}, {keyframe_handle_type_items_AUTO, "AUTO"}, {keyframe_handle_type_items_AUTO_CLAMPED, "AUTO_CLAMPED"}};
	};

	const std::map<std::string, int> string_to_keyframe_handle_type_items = create_string_to_keyframe_handle_type_items();
	const std::map<int, std::string> keyframe_handle_type_items_to_string = create_keyframe_handle_type_items_to_string();

	keyframe_handle_type_items_enum keyframe_new_handle_type() {
		STRING_TYPE_GETTER("keyframe_new_handle_type", static_cast<keyframe_handle_type_items_enum>(string_to_keyframe_handle_type_items.at(resstr)))
	}

	void keyframe_new_handle_type(keyframe_handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "keyframe_new_handle_type", keyframe_handle_type_items_to_string.at(value))
	}

	bool use_negative_frames() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_negative_frames")
	}

	void use_negative_frames(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_negative_frames", value)
	}

	float fcurve_unselected_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "fcurve_unselected_alpha")
	}

	void fcurve_unselected_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "fcurve_unselected_alpha", value)
	}

	int grease_pencil_manhattan_distance() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grease_pencil_manhattan_distance")
	}

	void grease_pencil_manhattan_distance(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grease_pencil_manhattan_distance", value)
	}

	int grease_pencil_euclidean_distance() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grease_pencil_euclidean_distance")
	}

	void grease_pencil_euclidean_distance(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grease_pencil_euclidean_distance", value)
	}

	bool use_grease_pencil_smooth_stroke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_grease_pencil_smooth_stroke")
	}

	void use_grease_pencil_smooth_stroke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_grease_pencil_smooth_stroke", value)
	}

	bool use_grease_pencil_simplify_stroke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_grease_pencil_simplify_stroke")
	}

	void use_grease_pencil_simplify_stroke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_grease_pencil_simplify_stroke", value)
	}

	int grease_pencil_eraser_radius() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "grease_pencil_eraser_radius")
	}

	void grease_pencil_eraser_radius(int value) {
		PRIMITIVE_TYPES_SETTER("i", "grease_pencil_eraser_radius", value)
	}

	VFLOAT4 grease_pencil_default_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "grease_pencil_default_color", 4)
	}

	void grease_pencil_default_color(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "grease_pencil_default_color", 4)
	}

	VFLOAT3 sculpt_paint_overlay_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "sculpt_paint_overlay_color", 3)
	}

	void sculpt_paint_overlay_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "sculpt_paint_overlay_color", 3)
	}

	bool use_duplicate_mesh() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_mesh")
	}

	void use_duplicate_mesh(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_mesh", value)
	}

	bool use_duplicate_surface() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_surface")
	}

	void use_duplicate_surface(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_surface", value)
	}

	bool use_duplicate_curve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_curve")
	}

	void use_duplicate_curve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_curve", value)
	}

	bool use_duplicate_text() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_text")
	}

	void use_duplicate_text(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_text", value)
	}

	bool use_duplicate_metaball() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_metaball")
	}

	void use_duplicate_metaball(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_metaball", value)
	}

	bool use_duplicate_armature() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_armature")
	}

	void use_duplicate_armature(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_armature", value)
	}

	bool use_duplicate_lamp() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_lamp")
	}

	void use_duplicate_lamp(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_lamp", value)
	}

	bool use_duplicate_material() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_material")
	}

	void use_duplicate_material(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_material", value)
	}

	bool use_duplicate_texture() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_texture")
	}

	void use_duplicate_texture(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_texture", value)
	}

	bool use_duplicate_fcurve() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_fcurve")
	}

	void use_duplicate_fcurve(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_fcurve", value)
	}

	bool use_duplicate_action() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_action")
	}

	void use_duplicate_action(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_action", value)
	}

	bool use_duplicate_particle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_duplicate_particle")
	}

	void use_duplicate_particle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_duplicate_particle", value)
	}
};

class UserPreferencesInput : public pyUniplug {
public:
	UserPreferencesInput(PyObject* pyobj) : pyUniplug(pyobj) {}
	UserPreferencesInput() : pyUniplug(0) { }

	enum select_mouse_items_enum {
		select_mouse_items_LEFT = 16384,	
		select_mouse_items_RIGHT = 0	
	};

	std::map<std::string, int> create_string_to_select_mouse_items() {
		return {{"LEFT", select_mouse_items_LEFT}, {"RIGHT", select_mouse_items_RIGHT}};
	};

	std::map<int, std::string> create_select_mouse_items_to_string() {
		return {{select_mouse_items_LEFT, "LEFT"}, {select_mouse_items_RIGHT, "RIGHT"}};
	};

	const std::map<std::string, int> string_to_select_mouse_items = create_string_to_select_mouse_items();
	const std::map<int, std::string> select_mouse_items_to_string = create_select_mouse_items_to_string();

	select_mouse_items_enum select_mouse() {
		STRING_TYPE_GETTER("select_mouse", static_cast<select_mouse_items_enum>(string_to_select_mouse_items.at(resstr)))
	}

	void select_mouse(select_mouse_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "select_mouse", select_mouse_items_to_string.at(value))
	}

	enum view_zoom_styles_enum {
		view_zoom_styles_CONTINUE = 0,	
		view_zoom_styles_DOLLY = 2,	
		view_zoom_styles_SCALE = 1	
	};

	std::map<std::string, int> create_string_to_view_zoom_styles() {
		return {{"CONTINUE", view_zoom_styles_CONTINUE}, {"DOLLY", view_zoom_styles_DOLLY}, {"SCALE", view_zoom_styles_SCALE}};
	};

	std::map<int, std::string> create_view_zoom_styles_to_string() {
		return {{view_zoom_styles_CONTINUE, "CONTINUE"}, {view_zoom_styles_DOLLY, "DOLLY"}, {view_zoom_styles_SCALE, "SCALE"}};
	};

	const std::map<std::string, int> string_to_view_zoom_styles = create_string_to_view_zoom_styles();
	const std::map<int, std::string> view_zoom_styles_to_string = create_view_zoom_styles_to_string();

	view_zoom_styles_enum view_zoom_method() {
		STRING_TYPE_GETTER("view_zoom_method", static_cast<view_zoom_styles_enum>(string_to_view_zoom_styles.at(resstr)))
	}

	void view_zoom_method(view_zoom_styles_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_zoom_method", view_zoom_styles_to_string.at(value))
	}

	enum view_zoom_axes_enum {
		view_zoom_axes_VERTICAL = 0,	
		view_zoom_axes_HORIZONTAL = 67108864	
	};

	std::map<std::string, int> create_string_to_view_zoom_axes() {
		return {{"VERTICAL", view_zoom_axes_VERTICAL}, {"HORIZONTAL", view_zoom_axes_HORIZONTAL}};
	};

	std::map<int, std::string> create_view_zoom_axes_to_string() {
		return {{view_zoom_axes_VERTICAL, "VERTICAL"}, {view_zoom_axes_HORIZONTAL, "HORIZONTAL"}};
	};

	const std::map<std::string, int> string_to_view_zoom_axes = create_string_to_view_zoom_axes();
	const std::map<int, std::string> view_zoom_axes_to_string = create_view_zoom_axes_to_string();

	view_zoom_axes_enum view_zoom_axis() {
		STRING_TYPE_GETTER("view_zoom_axis", static_cast<view_zoom_axes_enum>(string_to_view_zoom_axes.at(resstr)))
	}

	void view_zoom_axis(view_zoom_axes_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_zoom_axis", view_zoom_axes_to_string.at(value))
	}

	bool invert_mouse_zoom() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_mouse_zoom")
	}

	void invert_mouse_zoom(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_mouse_zoom", value)
	}

	enum view_rotation_items_enum {
		view_rotation_items_TURNTABLE = 0,	
		view_rotation_items_TRACKBALL = 32	
	};

	std::map<std::string, int> create_string_to_view_rotation_items() {
		return {{"TURNTABLE", view_rotation_items_TURNTABLE}, {"TRACKBALL", view_rotation_items_TRACKBALL}};
	};

	std::map<int, std::string> create_view_rotation_items_to_string() {
		return {{view_rotation_items_TURNTABLE, "TURNTABLE"}, {view_rotation_items_TRACKBALL, "TRACKBALL"}};
	};

	const std::map<std::string, int> string_to_view_rotation_items = create_string_to_view_rotation_items();
	const std::map<int, std::string> view_rotation_items_to_string = create_view_rotation_items_to_string();

	view_rotation_items_enum view_rotate_method() {
		STRING_TYPE_GETTER("view_rotate_method", static_cast<view_rotation_items_enum>(string_to_view_rotation_items.at(resstr)))
	}

	void view_rotate_method(view_rotation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "view_rotate_method", view_rotation_items_to_string.at(value))
	}

	bool use_mouse_continuous() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mouse_continuous")
	}

	void use_mouse_continuous(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mouse_continuous", value)
	}

	enum navigation_mode_items_enum {
		navigation_mode_items_WALK = 0,	
		navigation_mode_items_FLY = 1	
	};

	std::map<std::string, int> create_string_to_navigation_mode_items() {
		return {{"WALK", navigation_mode_items_WALK}, {"FLY", navigation_mode_items_FLY}};
	};

	std::map<int, std::string> create_navigation_mode_items_to_string() {
		return {{navigation_mode_items_WALK, "WALK"}, {navigation_mode_items_FLY, "FLY"}};
	};

	const std::map<std::string, int> string_to_navigation_mode_items = create_string_to_navigation_mode_items();
	const std::map<int, std::string> navigation_mode_items_to_string = create_navigation_mode_items_to_string();

	navigation_mode_items_enum navigation_mode() {
		STRING_TYPE_GETTER("navigation_mode", static_cast<navigation_mode_items_enum>(string_to_navigation_mode_items.at(resstr)))
	}

	void navigation_mode(navigation_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "navigation_mode", navigation_mode_items_to_string.at(value))
	}

	WalkNavigation walk_navigation() {
		CLASS_TYPES_GETTER(WalkNavigation, "walk_navigation")
	}

	int drag_threshold() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "drag_threshold")
	}

	void drag_threshold(int value) {
		PRIMITIVE_TYPES_SETTER("i", "drag_threshold", value)
	}

	int tweak_threshold() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "tweak_threshold")
	}

	void tweak_threshold(int value) {
		PRIMITIVE_TYPES_SETTER("i", "tweak_threshold", value)
	}

	float ndof_sensitivity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ndof_sensitivity")
	}

	void ndof_sensitivity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ndof_sensitivity", value)
	}

	float ndof_orbit_sensitivity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ndof_orbit_sensitivity")
	}

	void ndof_orbit_sensitivity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ndof_orbit_sensitivity", value)
	}

	float ndof_deadzone() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ndof_deadzone")
	}

	void ndof_deadzone(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ndof_deadzone", value)
	}

	bool ndof_pan_yz_swap_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_pan_yz_swap_axis")
	}

	void ndof_pan_yz_swap_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_pan_yz_swap_axis", value)
	}

	bool ndof_zoom_invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_zoom_invert")
	}

	void ndof_zoom_invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_zoom_invert", value)
	}

	bool ndof_show_guide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_show_guide")
	}

	void ndof_show_guide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_show_guide", value)
	}

	enum ndof_view_navigation_items_enum {
		ndof_view_navigation_items_FREE = 0,	
		ndof_view_navigation_items_ORBIT = 64	
	};

	std::map<std::string, int> create_string_to_ndof_view_navigation_items() {
		return {{"FREE", ndof_view_navigation_items_FREE}, {"ORBIT", ndof_view_navigation_items_ORBIT}};
	};

	std::map<int, std::string> create_ndof_view_navigation_items_to_string() {
		return {{ndof_view_navigation_items_FREE, "FREE"}, {ndof_view_navigation_items_ORBIT, "ORBIT"}};
	};

	const std::map<std::string, int> string_to_ndof_view_navigation_items = create_string_to_ndof_view_navigation_items();
	const std::map<int, std::string> ndof_view_navigation_items_to_string = create_ndof_view_navigation_items_to_string();

	ndof_view_navigation_items_enum ndof_view_navigate_method() {
		STRING_TYPE_GETTER("ndof_view_navigate_method", static_cast<ndof_view_navigation_items_enum>(string_to_ndof_view_navigation_items.at(resstr)))
	}

	void ndof_view_navigate_method(ndof_view_navigation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ndof_view_navigate_method", ndof_view_navigation_items_to_string.at(value))
	}

	enum ndof_view_rotation_items_enum {
		ndof_view_rotation_items_TURNTABLE = 32768,	
		ndof_view_rotation_items_TRACKBALL = 0	
	};

	std::map<std::string, int> create_string_to_ndof_view_rotation_items() {
		return {{"TURNTABLE", ndof_view_rotation_items_TURNTABLE}, {"TRACKBALL", ndof_view_rotation_items_TRACKBALL}};
	};

	std::map<int, std::string> create_ndof_view_rotation_items_to_string() {
		return {{ndof_view_rotation_items_TURNTABLE, "TURNTABLE"}, {ndof_view_rotation_items_TRACKBALL, "TRACKBALL"}};
	};

	const std::map<std::string, int> string_to_ndof_view_rotation_items = create_string_to_ndof_view_rotation_items();
	const std::map<int, std::string> ndof_view_rotation_items_to_string = create_ndof_view_rotation_items_to_string();

	ndof_view_rotation_items_enum ndof_view_rotate_method() {
		STRING_TYPE_GETTER("ndof_view_rotate_method", static_cast<ndof_view_rotation_items_enum>(string_to_ndof_view_rotation_items.at(resstr)))
	}

	void ndof_view_rotate_method(ndof_view_rotation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ndof_view_rotate_method", ndof_view_rotation_items_to_string.at(value))
	}

	bool ndof_rotx_invert_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_rotx_invert_axis")
	}

	void ndof_rotx_invert_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_rotx_invert_axis", value)
	}

	bool ndof_roty_invert_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_roty_invert_axis")
	}

	void ndof_roty_invert_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_roty_invert_axis", value)
	}

	bool ndof_rotz_invert_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_rotz_invert_axis")
	}

	void ndof_rotz_invert_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_rotz_invert_axis", value)
	}

	bool ndof_panx_invert_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_panx_invert_axis")
	}

	void ndof_panx_invert_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_panx_invert_axis", value)
	}

	bool ndof_pany_invert_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_pany_invert_axis")
	}

	void ndof_pany_invert_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_pany_invert_axis", value)
	}

	bool ndof_panz_invert_axis() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_panz_invert_axis")
	}

	void ndof_panz_invert_axis(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_panz_invert_axis", value)
	}

	bool ndof_lock_horizon() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_lock_horizon")
	}

	void ndof_lock_horizon(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_lock_horizon", value)
	}

	bool ndof_fly_helicopter() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ndof_fly_helicopter")
	}

	void ndof_fly_helicopter(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ndof_fly_helicopter", value)
	}

	int mouse_double_click_time() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mouse_double_click_time")
	}

	void mouse_double_click_time(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mouse_double_click_time", value)
	}

	bool use_mouse_emulate_3_button() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mouse_emulate_3_button")
	}

	void use_mouse_emulate_3_button(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mouse_emulate_3_button", value)
	}

	bool use_emulate_numpad() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_emulate_numpad")
	}

	void use_emulate_numpad(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_emulate_numpad", value)
	}

	bool use_mouse_mmb_paste() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mouse_mmb_paste")
	}

	void use_mouse_mmb_paste(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mouse_mmb_paste", value)
	}

	bool invert_zoom_wheel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert_zoom_wheel")
	}

	void invert_zoom_wheel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert_zoom_wheel", value)
	}

	int wheel_scroll_lines() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "wheel_scroll_lines")
	}

	void wheel_scroll_lines(int value) {
		PRIMITIVE_TYPES_SETTER("i", "wheel_scroll_lines", value)
	}

	bool use_trackpad_natural() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_trackpad_natural")
	}

	void use_trackpad_natural(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_trackpad_natural", value)
	}

	std::string active_keyconfig() {
		STRING_TYPE_GETTER("active_keyconfig", resstr)
	}

	void active_keyconfig(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "active_keyconfig", value)
	}
};

class UserPreferencesFilePaths : public pyUniplug {
public:
	UserPreferencesFilePaths(PyObject* pyobj) : pyUniplug(pyobj) {}
	UserPreferencesFilePaths() : pyUniplug(0) { }

	bool show_hidden_files_datablocks() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_hidden_files_datablocks")
	}

	void show_hidden_files_datablocks(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_hidden_files_datablocks", value)
	}

	bool use_filter_files() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_filter_files")
	}

	void use_filter_files(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_filter_files", value)
	}

	bool hide_recent_locations() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_recent_locations")
	}

	void hide_recent_locations(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_recent_locations", value)
	}

	bool hide_system_bookmarks() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_system_bookmarks")
	}

	void hide_system_bookmarks(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_system_bookmarks", value)
	}

	bool show_thumbnails() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_thumbnails")
	}

	void show_thumbnails(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_thumbnails", value)
	}

	bool use_relative_paths() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_relative_paths")
	}

	void use_relative_paths(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_relative_paths", value)
	}

	bool use_file_compression() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_file_compression")
	}

	void use_file_compression(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_file_compression", value)
	}

	bool use_load_ui() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_load_ui")
	}

	void use_load_ui(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_load_ui", value)
	}

	std::string font_directory() {
		STRING_TYPE_GETTER("font_directory", resstr)
	}

	void font_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "font_directory", value)
	}

	std::string texture_directory() {
		STRING_TYPE_GETTER("texture_directory", resstr)
	}

	void texture_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_directory", value)
	}

	std::string render_output_directory() {
		STRING_TYPE_GETTER("render_output_directory", resstr)
	}

	void render_output_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "render_output_directory", value)
	}

	std::string script_directory() {
		STRING_TYPE_GETTER("script_directory", resstr)
	}

	void script_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "script_directory", value)
	}

	std::string i18n_branches_directory() {
		STRING_TYPE_GETTER("i18n_branches_directory", resstr)
	}

	void i18n_branches_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "i18n_branches_directory", value)
	}

	std::string sound_directory() {
		STRING_TYPE_GETTER("sound_directory", resstr)
	}

	void sound_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "sound_directory", value)
	}

	std::string temporary_directory() {
		STRING_TYPE_GETTER("temporary_directory", resstr)
	}

	void temporary_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "temporary_directory", value)
	}

	std::string render_cache_directory() {
		STRING_TYPE_GETTER("render_cache_directory", resstr)
	}

	void render_cache_directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "render_cache_directory", value)
	}

	std::string image_editor() {
		STRING_TYPE_GETTER("image_editor", resstr)
	}

	void image_editor(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "image_editor", value)
	}

	std::string animation_player() {
		STRING_TYPE_GETTER("animation_player", resstr)
	}

	void animation_player(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "animation_player", value)
	}

	enum anim_player_presets_enum {
		anim_player_presets_INTERNAL = 0,	
		anim_player_presets_DJV = 2,	
		anim_player_presets_FRAMECYCLER = 3,	
		anim_player_presets_RV = 4,	
		anim_player_presets_MPLAYER = 5,	
		anim_player_presets_CUSTOM = 50	
	};

	std::map<std::string, int> create_string_to_anim_player_presets() {
		return {{"INTERNAL", anim_player_presets_INTERNAL}, {"DJV", anim_player_presets_DJV}, {"FRAMECYCLER", anim_player_presets_FRAMECYCLER}, {"RV", anim_player_presets_RV}, {"MPLAYER", anim_player_presets_MPLAYER}, {"CUSTOM", anim_player_presets_CUSTOM}};
	};

	std::map<int, std::string> create_anim_player_presets_to_string() {
		return {{anim_player_presets_INTERNAL, "INTERNAL"}, {anim_player_presets_DJV, "DJV"}, {anim_player_presets_FRAMECYCLER, "FRAMECYCLER"}, {anim_player_presets_RV, "RV"}, {anim_player_presets_MPLAYER, "MPLAYER"}, {anim_player_presets_CUSTOM, "CUSTOM"}};
	};

	const std::map<std::string, int> string_to_anim_player_presets = create_string_to_anim_player_presets();
	const std::map<int, std::string> anim_player_presets_to_string = create_anim_player_presets_to_string();

	anim_player_presets_enum animation_player_preset() {
		STRING_TYPE_GETTER("animation_player_preset", static_cast<anim_player_presets_enum>(string_to_anim_player_presets.at(resstr)))
	}

	void animation_player_preset(anim_player_presets_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "animation_player_preset", anim_player_presets_to_string.at(value))
	}

	int save_version() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "save_version")
	}

	void save_version(int value) {
		PRIMITIVE_TYPES_SETTER("i", "save_version", value)
	}

	bool use_auto_save_temporary_files() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_save_temporary_files")
	}

	void use_auto_save_temporary_files(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_save_temporary_files", value)
	}

	int auto_save_time() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "auto_save_time")
	}

	void auto_save_time(int value) {
		PRIMITIVE_TYPES_SETTER("i", "auto_save_time", value)
	}

	bool use_keep_session() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keep_session")
	}

	void use_keep_session(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keep_session", value)
	}

	int recent_files() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "recent_files")
	}

	void recent_files(int value) {
		PRIMITIVE_TYPES_SETTER("i", "recent_files", value)
	}

	bool use_save_preview_images() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_save_preview_images")
	}

	void use_save_preview_images(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_save_preview_images", value)
	}
};

class UserPreferencesSystem : public pyUniplug {
public:
	UserPreferencesSystem(PyObject* pyobj) : pyUniplug(pyobj) {}
	UserPreferencesSystem() : pyUniplug(0) { }

	bool use_international_fonts() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_international_fonts")
	}

	void use_international_fonts(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_international_fonts", value)
	}

	int dpi() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "dpi")
	}

	void dpi(int value) {
		PRIMITIVE_TYPES_SETTER("i", "dpi", value)
	}

	enum virtual_pixel_mode_items_enum {
		virtual_pixel_mode_items_NATIVE = 0,	
		virtual_pixel_mode_items_DOUBLE = 1	
	};

	std::map<std::string, int> create_string_to_virtual_pixel_mode_items() {
		return {{"NATIVE", virtual_pixel_mode_items_NATIVE}, {"DOUBLE", virtual_pixel_mode_items_DOUBLE}};
	};

	std::map<int, std::string> create_virtual_pixel_mode_items_to_string() {
		return {{virtual_pixel_mode_items_NATIVE, "NATIVE"}, {virtual_pixel_mode_items_DOUBLE, "DOUBLE"}};
	};

	const std::map<std::string, int> string_to_virtual_pixel_mode_items = create_string_to_virtual_pixel_mode_items();
	const std::map<int, std::string> virtual_pixel_mode_items_to_string = create_virtual_pixel_mode_items_to_string();

	virtual_pixel_mode_items_enum virtual_pixel_mode() {
		STRING_TYPE_GETTER("virtual_pixel_mode", static_cast<virtual_pixel_mode_items_enum>(string_to_virtual_pixel_mode_items.at(resstr)))
	}

	void virtual_pixel_mode(virtual_pixel_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "virtual_pixel_mode", virtual_pixel_mode_items_to_string.at(value))
	}

	float pixel_size() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pixel_size")
	}

	void pixel_size(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pixel_size", value)
	}

	std::string font_path_ui() {
		STRING_TYPE_GETTER("font_path_ui", resstr)
	}

	void font_path_ui(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "font_path_ui", value)
	}

	int scrollback() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "scrollback")
	}

	void scrollback(int value) {
		PRIMITIVE_TYPES_SETTER("i", "scrollback", value)
	}

	std::string author() {
		STRING_TYPE_GETTER("author", resstr)
	}

	void author(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "author", value)
	}

	enum language_items_enum {
		language_items_DEFAULT = 0	
	};

	std::map<std::string, int> create_string_to_language_items() {
		return {{"DEFAULT", language_items_DEFAULT}};
	};

	std::map<int, std::string> create_language_items_to_string() {
		return {{language_items_DEFAULT, "DEFAULT"}};
	};

	const std::map<std::string, int> string_to_language_items = create_string_to_language_items();
	const std::map<int, std::string> language_items_to_string = create_language_items_to_string();

	language_items_enum language() {
		STRING_TYPE_GETTER("language", static_cast<language_items_enum>(string_to_language_items.at(resstr)))
	}

	void language(language_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "language", language_items_to_string.at(value))
	}

	bool use_translate_tooltips() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translate_tooltips")
	}

	void use_translate_tooltips(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translate_tooltips", value)
	}

	bool use_translate_interface() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translate_interface")
	}

	void use_translate_interface(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translate_interface", value)
	}

	bool use_translate_new_dataname() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_translate_new_dataname")
	}

	void use_translate_new_dataname(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_translate_new_dataname", value)
	}

	bool use_textured_fonts() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_textured_fonts")
	}

	void use_textured_fonts(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_textured_fonts", value)
	}

	std::map<std::string, UserSolidLight> solid_lights() {
		MAP_TYPE_GETTER("solid_lights", UserSolidLight)
	}

	bool use_weight_color_range() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_weight_color_range")
	}

	void use_weight_color_range(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_weight_color_range", value)
	}

	ColorRamp weight_color_range() {
		CLASS_TYPES_GETTER(ColorRamp, "weight_color_range")
	}

	enum color_picker_types_enum {
		color_picker_types_CIRCLE_HSV = 0,	
		color_picker_types_CIRCLE_HSL = 4,	
		color_picker_types_SQUARE_SV = 1,	
		color_picker_types_SQUARE_HS = 2,	
		color_picker_types_SQUARE_HV = 3	
	};

	std::map<std::string, int> create_string_to_color_picker_types() {
		return {{"CIRCLE_HSV", color_picker_types_CIRCLE_HSV}, {"CIRCLE_HSL", color_picker_types_CIRCLE_HSL}, {"SQUARE_SV", color_picker_types_SQUARE_SV}, {"SQUARE_HS", color_picker_types_SQUARE_HS}, {"SQUARE_HV", color_picker_types_SQUARE_HV}};
	};

	std::map<int, std::string> create_color_picker_types_to_string() {
		return {{color_picker_types_CIRCLE_HSV, "CIRCLE_HSV"}, {color_picker_types_CIRCLE_HSL, "CIRCLE_HSL"}, {color_picker_types_SQUARE_SV, "SQUARE_SV"}, {color_picker_types_SQUARE_HS, "SQUARE_HS"}, {color_picker_types_SQUARE_HV, "SQUARE_HV"}};
	};

	const std::map<std::string, int> string_to_color_picker_types = create_string_to_color_picker_types();
	const std::map<int, std::string> color_picker_types_to_string = create_color_picker_types_to_string();

	color_picker_types_enum color_picker_type() {
		STRING_TYPE_GETTER("color_picker_type", static_cast<color_picker_types_enum>(string_to_color_picker_types.at(resstr)))
	}

	void color_picker_type(color_picker_types_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "color_picker_type", color_picker_types_to_string.at(value))
	}

	bool use_preview_images() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_preview_images")
	}

	void use_preview_images(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_preview_images", value)
	}

	bool use_scripts_auto_execute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_scripts_auto_execute")
	}

	void use_scripts_auto_execute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_scripts_auto_execute", value)
	}

	bool use_tabs_as_spaces() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tabs_as_spaces")
	}

	void use_tabs_as_spaces(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tabs_as_spaces", value)
	}

	int prefetch_frames() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "prefetch_frames")
	}

	void prefetch_frames(int value) {
		PRIMITIVE_TYPES_SETTER("i", "prefetch_frames", value)
	}

	int memory_cache_limit() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "memory_cache_limit")
	}

	void memory_cache_limit(int value) {
		PRIMITIVE_TYPES_SETTER("i", "memory_cache_limit", value)
	}

	int frame_server_port() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_server_port")
	}

	void frame_server_port(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_server_port", value)
	}

	float gl_clip_alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "gl_clip_alpha")
	}

	void gl_clip_alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "gl_clip_alpha", value)
	}

	bool use_mipmaps() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mipmaps")
	}

	void use_mipmaps(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mipmaps", value)
	}

	bool use_16bit_textures() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_16bit_textures")
	}

	void use_16bit_textures(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_16bit_textures", value)
	}

	bool use_gpu_mipmap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_gpu_mipmap")
	}

	void use_gpu_mipmap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_gpu_mipmap", value)
	}

	enum image_draw_methods_enum {
		image_draw_methods_2DTEXTURE = 2,	
		image_draw_methods_GLSL = 1,	
		image_draw_methods_DRAWPIXELS = 3	
	};

	std::map<std::string, int> create_string_to_image_draw_methods() {
		return {{"2DTEXTURE", image_draw_methods_2DTEXTURE}, {"GLSL", image_draw_methods_GLSL}, {"DRAWPIXELS", image_draw_methods_DRAWPIXELS}};
	};

	std::map<int, std::string> create_image_draw_methods_to_string() {
		return {{image_draw_methods_2DTEXTURE, "2DTEXTURE"}, {image_draw_methods_GLSL, "GLSL"}, {image_draw_methods_DRAWPIXELS, "DRAWPIXELS"}};
	};

	const std::map<std::string, int> string_to_image_draw_methods = create_string_to_image_draw_methods();
	const std::map<int, std::string> image_draw_methods_to_string = create_image_draw_methods_to_string();

	image_draw_methods_enum image_draw_method() {
		STRING_TYPE_GETTER("image_draw_method", static_cast<image_draw_methods_enum>(string_to_image_draw_methods.at(resstr)))
	}

	void image_draw_method(image_draw_methods_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "image_draw_method", image_draw_methods_to_string.at(value))
	}

	bool use_vertex_buffer_objects() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_vertex_buffer_objects")
	}

	void use_vertex_buffer_objects(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_vertex_buffer_objects", value)
	}

	enum anisotropic_items_enum {
		anisotropic_items_FILTER_0 = 1,	
		anisotropic_items_FILTER_2 = 2,	
		anisotropic_items_FILTER_4 = 4,	
		anisotropic_items_FILTER_8 = 8,	
		anisotropic_items_FILTER_16 = 16	
	};

	std::map<std::string, int> create_string_to_anisotropic_items() {
		return {{"FILTER_0", anisotropic_items_FILTER_0}, {"FILTER_2", anisotropic_items_FILTER_2}, {"FILTER_4", anisotropic_items_FILTER_4}, {"FILTER_8", anisotropic_items_FILTER_8}, {"FILTER_16", anisotropic_items_FILTER_16}};
	};

	std::map<int, std::string> create_anisotropic_items_to_string() {
		return {{anisotropic_items_FILTER_0, "FILTER_0"}, {anisotropic_items_FILTER_2, "FILTER_2"}, {anisotropic_items_FILTER_4, "FILTER_4"}, {anisotropic_items_FILTER_8, "FILTER_8"}, {anisotropic_items_FILTER_16, "FILTER_16"}};
	};

	const std::map<std::string, int> string_to_anisotropic_items = create_string_to_anisotropic_items();
	const std::map<int, std::string> anisotropic_items_to_string = create_anisotropic_items_to_string();

	anisotropic_items_enum anisotropic_filter() {
		STRING_TYPE_GETTER("anisotropic_filter", static_cast<anisotropic_items_enum>(string_to_anisotropic_items.at(resstr)))
	}

	void anisotropic_filter(anisotropic_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "anisotropic_filter", anisotropic_items_to_string.at(value))
	}

	enum gl_texture_clamp_items_enum {
		gl_texture_clamp_items_CLAMP_OFF = 0,	
		gl_texture_clamp_items_CLAMP_8192 = 8192,	
		gl_texture_clamp_items_CLAMP_4096 = 4096,	
		gl_texture_clamp_items_CLAMP_2048 = 2048,	
		gl_texture_clamp_items_CLAMP_1024 = 1024,	
		gl_texture_clamp_items_CLAMP_512 = 512,	
		gl_texture_clamp_items_CLAMP_256 = 256,	
		gl_texture_clamp_items_CLAMP_128 = 128	
	};

	std::map<std::string, int> create_string_to_gl_texture_clamp_items() {
		return {{"CLAMP_OFF", gl_texture_clamp_items_CLAMP_OFF}, {"CLAMP_8192", gl_texture_clamp_items_CLAMP_8192}, {"CLAMP_4096", gl_texture_clamp_items_CLAMP_4096}, {"CLAMP_2048", gl_texture_clamp_items_CLAMP_2048}, {"CLAMP_1024", gl_texture_clamp_items_CLAMP_1024}, {"CLAMP_512", gl_texture_clamp_items_CLAMP_512}, {"CLAMP_256", gl_texture_clamp_items_CLAMP_256}, {"CLAMP_128", gl_texture_clamp_items_CLAMP_128}};
	};

	std::map<int, std::string> create_gl_texture_clamp_items_to_string() {
		return {{gl_texture_clamp_items_CLAMP_OFF, "CLAMP_OFF"}, {gl_texture_clamp_items_CLAMP_8192, "CLAMP_8192"}, {gl_texture_clamp_items_CLAMP_4096, "CLAMP_4096"}, {gl_texture_clamp_items_CLAMP_2048, "CLAMP_2048"}, {gl_texture_clamp_items_CLAMP_1024, "CLAMP_1024"}, {gl_texture_clamp_items_CLAMP_512, "CLAMP_512"}, {gl_texture_clamp_items_CLAMP_256, "CLAMP_256"}, {gl_texture_clamp_items_CLAMP_128, "CLAMP_128"}};
	};

	const std::map<std::string, int> string_to_gl_texture_clamp_items = create_string_to_gl_texture_clamp_items();
	const std::map<int, std::string> gl_texture_clamp_items_to_string = create_gl_texture_clamp_items_to_string();

	gl_texture_clamp_items_enum gl_texture_limit() {
		STRING_TYPE_GETTER("gl_texture_limit", static_cast<gl_texture_clamp_items_enum>(string_to_gl_texture_clamp_items.at(resstr)))
	}

	void gl_texture_limit(gl_texture_clamp_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "gl_texture_limit", gl_texture_clamp_items_to_string.at(value))
	}

	int texture_time_out() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "texture_time_out")
	}

	void texture_time_out(int value) {
		PRIMITIVE_TYPES_SETTER("i", "texture_time_out", value)
	}

	int texture_collection_rate() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "texture_collection_rate")
	}

	void texture_collection_rate(int value) {
		PRIMITIVE_TYPES_SETTER("i", "texture_collection_rate", value)
	}

	enum draw_method_items_enum {
		draw_method_items_AUTOMATIC = 3,	
		draw_method_items_TRIPLE_BUFFER = 0,	
		draw_method_items_OVERLAP = 1,	
		draw_method_items_OVERLAP_FLIP = 4,	
		draw_method_items_FULL = 2	
	};

	std::map<std::string, int> create_string_to_draw_method_items() {
		return {{"AUTOMATIC", draw_method_items_AUTOMATIC}, {"TRIPLE_BUFFER", draw_method_items_TRIPLE_BUFFER}, {"OVERLAP", draw_method_items_OVERLAP}, {"OVERLAP_FLIP", draw_method_items_OVERLAP_FLIP}, {"FULL", draw_method_items_FULL}};
	};

	std::map<int, std::string> create_draw_method_items_to_string() {
		return {{draw_method_items_AUTOMATIC, "AUTOMATIC"}, {draw_method_items_TRIPLE_BUFFER, "TRIPLE_BUFFER"}, {draw_method_items_OVERLAP, "OVERLAP"}, {draw_method_items_OVERLAP_FLIP, "OVERLAP_FLIP"}, {draw_method_items_FULL, "FULL"}};
	};

	const std::map<std::string, int> string_to_draw_method_items = create_string_to_draw_method_items();
	const std::map<int, std::string> draw_method_items_to_string = create_draw_method_items_to_string();

	draw_method_items_enum window_draw_method() {
		STRING_TYPE_GETTER("window_draw_method", static_cast<draw_method_items_enum>(string_to_draw_method_items.at(resstr)))
	}

	void window_draw_method(draw_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "window_draw_method", draw_method_items_to_string.at(value))
	}

	enum audio_mixing_samples_items_enum {
		audio_mixing_samples_items_SAMPLES_256 = 256,	
		audio_mixing_samples_items_SAMPLES_512 = 512,	
		audio_mixing_samples_items_SAMPLES_1024 = 1024,	
		audio_mixing_samples_items_SAMPLES_2048 = 2048,	
		audio_mixing_samples_items_SAMPLES_4096 = 4096,	
		audio_mixing_samples_items_SAMPLES_8192 = 8192,	
		audio_mixing_samples_items_SAMPLES_16384 = 16384,	
		audio_mixing_samples_items_SAMPLES_32768 = 32768	
	};

	std::map<std::string, int> create_string_to_audio_mixing_samples_items() {
		return {{"SAMPLES_256", audio_mixing_samples_items_SAMPLES_256}, {"SAMPLES_512", audio_mixing_samples_items_SAMPLES_512}, {"SAMPLES_1024", audio_mixing_samples_items_SAMPLES_1024}, {"SAMPLES_2048", audio_mixing_samples_items_SAMPLES_2048}, {"SAMPLES_4096", audio_mixing_samples_items_SAMPLES_4096}, {"SAMPLES_8192", audio_mixing_samples_items_SAMPLES_8192}, {"SAMPLES_16384", audio_mixing_samples_items_SAMPLES_16384}, {"SAMPLES_32768", audio_mixing_samples_items_SAMPLES_32768}};
	};

	std::map<int, std::string> create_audio_mixing_samples_items_to_string() {
		return {{audio_mixing_samples_items_SAMPLES_256, "SAMPLES_256"}, {audio_mixing_samples_items_SAMPLES_512, "SAMPLES_512"}, {audio_mixing_samples_items_SAMPLES_1024, "SAMPLES_1024"}, {audio_mixing_samples_items_SAMPLES_2048, "SAMPLES_2048"}, {audio_mixing_samples_items_SAMPLES_4096, "SAMPLES_4096"}, {audio_mixing_samples_items_SAMPLES_8192, "SAMPLES_8192"}, {audio_mixing_samples_items_SAMPLES_16384, "SAMPLES_16384"}, {audio_mixing_samples_items_SAMPLES_32768, "SAMPLES_32768"}};
	};

	const std::map<std::string, int> string_to_audio_mixing_samples_items = create_string_to_audio_mixing_samples_items();
	const std::map<int, std::string> audio_mixing_samples_items_to_string = create_audio_mixing_samples_items_to_string();

	audio_mixing_samples_items_enum audio_mixing_buffer() {
		STRING_TYPE_GETTER("audio_mixing_buffer", static_cast<audio_mixing_samples_items_enum>(string_to_audio_mixing_samples_items.at(resstr)))
	}

	void audio_mixing_buffer(audio_mixing_samples_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_mixing_buffer", audio_mixing_samples_items_to_string.at(value))
	}

	enum audio_device_items_enum {
		audio_device_items_NONE = 0,	
		audio_device_items_SDL = 1,	
		audio_device_items_OPENAL = 2,	
		audio_device_items_JACK = 3	
	};

	std::map<std::string, int> create_string_to_audio_device_items() {
		return {{"NONE", audio_device_items_NONE}, {"SDL", audio_device_items_SDL}, {"OPENAL", audio_device_items_OPENAL}, {"JACK", audio_device_items_JACK}};
	};

	std::map<int, std::string> create_audio_device_items_to_string() {
		return {{audio_device_items_NONE, "NONE"}, {audio_device_items_SDL, "SDL"}, {audio_device_items_OPENAL, "OPENAL"}, {audio_device_items_JACK, "JACK"}};
	};

	const std::map<std::string, int> string_to_audio_device_items = create_string_to_audio_device_items();
	const std::map<int, std::string> audio_device_items_to_string = create_audio_device_items_to_string();

	audio_device_items_enum audio_device() {
		STRING_TYPE_GETTER("audio_device", static_cast<audio_device_items_enum>(string_to_audio_device_items.at(resstr)))
	}

	void audio_device(audio_device_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_device", audio_device_items_to_string.at(value))
	}

	enum audio_rate_items_enum {
		audio_rate_items_RATE_44100 = 44100,	
		audio_rate_items_RATE_48000 = 48000,	
		audio_rate_items_RATE_96000 = 96000,	
		audio_rate_items_RATE_192000 = 192000	
	};

	std::map<std::string, int> create_string_to_audio_rate_items() {
		return {{"RATE_44100", audio_rate_items_RATE_44100}, {"RATE_48000", audio_rate_items_RATE_48000}, {"RATE_96000", audio_rate_items_RATE_96000}, {"RATE_192000", audio_rate_items_RATE_192000}};
	};

	std::map<int, std::string> create_audio_rate_items_to_string() {
		return {{audio_rate_items_RATE_44100, "RATE_44100"}, {audio_rate_items_RATE_48000, "RATE_48000"}, {audio_rate_items_RATE_96000, "RATE_96000"}, {audio_rate_items_RATE_192000, "RATE_192000"}};
	};

	const std::map<std::string, int> string_to_audio_rate_items = create_string_to_audio_rate_items();
	const std::map<int, std::string> audio_rate_items_to_string = create_audio_rate_items_to_string();

	audio_rate_items_enum audio_sample_rate() {
		STRING_TYPE_GETTER("audio_sample_rate", static_cast<audio_rate_items_enum>(string_to_audio_rate_items.at(resstr)))
	}

	void audio_sample_rate(audio_rate_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_sample_rate", audio_rate_items_to_string.at(value))
	}

	enum audio_format_items_enum {
		audio_format_items_U8 = 1,	
		audio_format_items_S16 = 18,	
		audio_format_items_S24 = 19,	
		audio_format_items_S32 = 20,	
		audio_format_items_FLOAT = 36,	
		audio_format_items_DOUBLE = 40	
	};

	std::map<std::string, int> create_string_to_audio_format_items() {
		return {{"U8", audio_format_items_U8}, {"S16", audio_format_items_S16}, {"S24", audio_format_items_S24}, {"S32", audio_format_items_S32}, {"FLOAT", audio_format_items_FLOAT}, {"DOUBLE", audio_format_items_DOUBLE}};
	};

	std::map<int, std::string> create_audio_format_items_to_string() {
		return {{audio_format_items_U8, "U8"}, {audio_format_items_S16, "S16"}, {audio_format_items_S24, "S24"}, {audio_format_items_S32, "S32"}, {audio_format_items_FLOAT, "FLOAT"}, {audio_format_items_DOUBLE, "DOUBLE"}};
	};

	const std::map<std::string, int> string_to_audio_format_items = create_string_to_audio_format_items();
	const std::map<int, std::string> audio_format_items_to_string = create_audio_format_items_to_string();

	audio_format_items_enum audio_sample_format() {
		STRING_TYPE_GETTER("audio_sample_format", static_cast<audio_format_items_enum>(string_to_audio_format_items.at(resstr)))
	}

	void audio_sample_format(audio_format_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_sample_format", audio_format_items_to_string.at(value))
	}

	enum audio_channel_items_enum {
		audio_channel_items_MONO = 1,	
		audio_channel_items_STEREO = 2,	
		audio_channel_items_SURROUND4 = 4,	
		audio_channel_items_SURROUND51 = 6,	
		audio_channel_items_SURROUND71 = 8	
	};

	std::map<std::string, int> create_string_to_audio_channel_items() {
		return {{"MONO", audio_channel_items_MONO}, {"STEREO", audio_channel_items_STEREO}, {"SURROUND4", audio_channel_items_SURROUND4}, {"SURROUND51", audio_channel_items_SURROUND51}, {"SURROUND71", audio_channel_items_SURROUND71}};
	};

	std::map<int, std::string> create_audio_channel_items_to_string() {
		return {{audio_channel_items_MONO, "MONO"}, {audio_channel_items_STEREO, "STEREO"}, {audio_channel_items_SURROUND4, "SURROUND4"}, {audio_channel_items_SURROUND51, "SURROUND51"}, {audio_channel_items_SURROUND71, "SURROUND71"}};
	};

	const std::map<std::string, int> string_to_audio_channel_items = create_string_to_audio_channel_items();
	const std::map<int, std::string> audio_channel_items_to_string = create_audio_channel_items_to_string();

	audio_channel_items_enum audio_channels() {
		STRING_TYPE_GETTER("audio_channels", static_cast<audio_channel_items_enum>(string_to_audio_channel_items.at(resstr)))
	}

	void audio_channels(audio_channel_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "audio_channels", audio_channel_items_to_string.at(value))
	}

	int screencast_fps() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "screencast_fps")
	}

	void screencast_fps(int value) {
		PRIMITIVE_TYPES_SETTER("i", "screencast_fps", value)
	}

	int screencast_wait_time() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "screencast_wait_time")
	}

	void screencast_wait_time(int value) {
		PRIMITIVE_TYPES_SETTER("i", "screencast_wait_time", value)
	}

	bool use_text_antialiasing() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_text_antialiasing")
	}

	void use_text_antialiasing(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_text_antialiasing", value)
	}

	enum gpu_select_method_items_enum {
		gpu_select_method_items_AUTO = 0,	
		gpu_select_method_items_GL_SELECT = 2,	
		gpu_select_method_items_GL_QUERY = 1	
	};

	std::map<std::string, int> create_string_to_gpu_select_method_items() {
		return {{"AUTO", gpu_select_method_items_AUTO}, {"GL_SELECT", gpu_select_method_items_GL_SELECT}, {"GL_QUERY", gpu_select_method_items_GL_QUERY}};
	};

	std::map<int, std::string> create_gpu_select_method_items_to_string() {
		return {{gpu_select_method_items_AUTO, "AUTO"}, {gpu_select_method_items_GL_SELECT, "GL_SELECT"}, {gpu_select_method_items_GL_QUERY, "GL_QUERY"}};
	};

	const std::map<std::string, int> string_to_gpu_select_method_items = create_string_to_gpu_select_method_items();
	const std::map<int, std::string> gpu_select_method_items_to_string = create_gpu_select_method_items_to_string();

	gpu_select_method_items_enum select_method() {
		STRING_TYPE_GETTER("select_method", static_cast<gpu_select_method_items_enum>(string_to_gpu_select_method_items.at(resstr)))
	}

	void select_method(gpu_select_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "select_method", gpu_select_method_items_to_string.at(value))
	}

	enum multi_sample_levels_enum {
		multi_sample_levels_NONE = 0,	
		multi_sample_levels_2 = 2,	
		multi_sample_levels_4 = 4,	
		multi_sample_levels_8 = 8,	
		multi_sample_levels_16 = 16	
	};

	std::map<std::string, int> create_string_to_multi_sample_levels() {
		return {{"NONE", multi_sample_levels_NONE}, {"2", multi_sample_levels_2}, {"4", multi_sample_levels_4}, {"8", multi_sample_levels_8}, {"16", multi_sample_levels_16}};
	};

	std::map<int, std::string> create_multi_sample_levels_to_string() {
		return {{multi_sample_levels_NONE, "NONE"}, {multi_sample_levels_2, "2"}, {multi_sample_levels_4, "4"}, {multi_sample_levels_8, "8"}, {multi_sample_levels_16, "16"}};
	};

	const std::map<std::string, int> string_to_multi_sample_levels = create_string_to_multi_sample_levels();
	const std::map<int, std::string> multi_sample_levels_to_string = create_multi_sample_levels_to_string();

	multi_sample_levels_enum multi_sample() {
		STRING_TYPE_GETTER("multi_sample", static_cast<multi_sample_levels_enum>(string_to_multi_sample_levels.at(resstr)))
	}

	void multi_sample(multi_sample_levels_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "multi_sample", multi_sample_levels_to_string.at(value))
	}

	bool use_region_overlap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_region_overlap")
	}

	void use_region_overlap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_region_overlap", value)
	}

	enum compute_device_type_items_enum {
		compute_device_type_items_NONE = 0,	
		compute_device_type_items_CUDA = 2,	
		compute_device_type_items_OPENCL = 1	
	};

	std::map<std::string, int> create_string_to_compute_device_type_items() {
		return {{"NONE", compute_device_type_items_NONE}, {"CUDA", compute_device_type_items_CUDA}, {"OPENCL", compute_device_type_items_OPENCL}};
	};

	std::map<int, std::string> create_compute_device_type_items_to_string() {
		return {{compute_device_type_items_NONE, "NONE"}, {compute_device_type_items_CUDA, "CUDA"}, {compute_device_type_items_OPENCL, "OPENCL"}};
	};

	const std::map<std::string, int> string_to_compute_device_type_items = create_string_to_compute_device_type_items();
	const std::map<int, std::string> compute_device_type_items_to_string = create_compute_device_type_items_to_string();

	compute_device_type_items_enum compute_device_type() {
		STRING_TYPE_GETTER("compute_device_type", static_cast<compute_device_type_items_enum>(string_to_compute_device_type_items.at(resstr)))
	}

	void compute_device_type(compute_device_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "compute_device_type", compute_device_type_items_to_string.at(value))
	}

	enum compute_device_items_enum {
		compute_device_items_CPU = 0	
	};

	std::map<std::string, int> create_string_to_compute_device_items() {
		return {{"CPU", compute_device_items_CPU}};
	};

	std::map<int, std::string> create_compute_device_items_to_string() {
		return {{compute_device_items_CPU, "CPU"}};
	};

	const std::map<std::string, int> string_to_compute_device_items = create_string_to_compute_device_items();
	const std::map<int, std::string> compute_device_items_to_string = create_compute_device_items_to_string();

	compute_device_items_enum compute_device() {
		STRING_TYPE_GETTER("compute_device", static_cast<compute_device_items_enum>(string_to_compute_device_items.at(resstr)))
	}

	void compute_device(compute_device_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "compute_device", compute_device_items_to_string.at(value))
	}

	bool is_occlusion_query_supported() {
		PYTHON_FUNCTION_CALL("is_occlusion_query_supported")
		CREATE_SINGLE_PYOBJ(is_supported)
		PRIMITIVE_TYPES_CONV(is_supported, bool, PyLong_AsLong(is_supported_obj)==1)
		NONCLASS_TYPES_RETURN(is_supported_res)
	}
};

class Addon : public pyUniplug {
public:
	Addon(PyObject* pyobj) : pyUniplug(pyobj) {}
	Addon() : pyUniplug(0) { }

	std::string module() {
		STRING_TYPE_GETTER("module", resstr)
	}

	void module(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "module", value)
	}

	AddonPreferences preferences();
};

class AddonPreferences : public pyUniplug {
public:
	AddonPreferences(PyObject* pyobj) : pyUniplug(pyobj) {}
	AddonPreferences() : pyUniplug(0) { }

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}
};

class PathCompare : public pyUniplug {
public:
	PathCompare(PyObject* pyobj) : pyUniplug(pyobj) {}
	PathCompare() : pyUniplug(0) { }

	std::string path() {
		STRING_TYPE_GETTER("path", resstr)
	}

	void path(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "path", value)
	}

	bool use_glob() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_glob")
	}

	void use_glob(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_glob", value)
	}
};

class VectorFont : public ID {
public:
	VectorFont(PyObject* pyobj) : ID(pyobj) {}
	VectorFont() : ID(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	PackedFile packed_file() {
		CLASS_TYPES_GETTER(PackedFile, "packed_file")
	}

	void pack() {
		PYTHON_FUNCTION_CALL("pack")
	}

	enum unpack_method_items_enum {
		unpack_method_items_USE_LOCAL = 5,	
		unpack_method_items_WRITE_LOCAL = 4,	
		unpack_method_items_USE_ORIGINAL = 6,	
		unpack_method_items_WRITE_ORIGINAL = 3	
	};

	std::map<std::string, int> create_string_to_unpack_method_items() {
		return {{"USE_LOCAL", unpack_method_items_USE_LOCAL}, {"WRITE_LOCAL", unpack_method_items_WRITE_LOCAL}, {"USE_ORIGINAL", unpack_method_items_USE_ORIGINAL}, {"WRITE_ORIGINAL", unpack_method_items_WRITE_ORIGINAL}};
	};

	std::map<int, std::string> create_unpack_method_items_to_string() {
		return {{unpack_method_items_USE_LOCAL, "USE_LOCAL"}, {unpack_method_items_WRITE_LOCAL, "WRITE_LOCAL"}, {unpack_method_items_USE_ORIGINAL, "USE_ORIGINAL"}, {unpack_method_items_WRITE_ORIGINAL, "WRITE_ORIGINAL"}};
	};

	const std::map<std::string, int> string_to_unpack_method_items = create_string_to_unpack_method_items();
	const std::map<int, std::string> unpack_method_items_to_string = create_unpack_method_items_to_string();

	void unpack(unpack_method_items_enum method = unpack_method_items_USE_LOCAL) {
		PYTHON_FUNCTION_ARGS_CALL("unpack", "s", unpack_method_items_to_string.at(method))
	}
};

class Operator : public pyUniplug {
public:
	Operator(PyObject* pyobj) : pyUniplug(pyobj) {}
	Operator() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	OperatorProperties properties();

	bool has_reports() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_reports")
	}

	void has_reports(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_reports", value)
	}

	UILayout layout() {
		CLASS_TYPES_GETTER(UILayout, "layout")
	}

	OperatorOptions options();

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_translation_context() {
		STRING_TYPE_GETTER("bl_translation_context", resstr)
	}

	void bl_translation_context(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_translation_context", value)
	}

	std::string bl_description() {
		STRING_TYPE_GETTER("bl_description", resstr)
	}

	void bl_description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_description", value)
	}

	enum operator_flag_items_enum {
		operator_flag_items_REGISTER = 1,	
		operator_flag_items_UNDO = 2,	
		operator_flag_items_BLOCKING = 4,	
		operator_flag_items_MACRO = 8,	
		operator_flag_items_GRAB_CURSOR = 16,	
		operator_flag_items_PRESET = 32,	
		operator_flag_items_INTERNAL = 64	
	};

	std::map<std::string, int> create_string_to_operator_flag_items() {
		return {{"REGISTER", operator_flag_items_REGISTER}, {"UNDO", operator_flag_items_UNDO}, {"BLOCKING", operator_flag_items_BLOCKING}, {"MACRO", operator_flag_items_MACRO}, {"GRAB_CURSOR", operator_flag_items_GRAB_CURSOR}, {"PRESET", operator_flag_items_PRESET}, {"INTERNAL", operator_flag_items_INTERNAL}};
	};

	std::map<int, std::string> create_operator_flag_items_to_string() {
		return {{operator_flag_items_REGISTER, "REGISTER"}, {operator_flag_items_UNDO, "UNDO"}, {operator_flag_items_BLOCKING, "BLOCKING"}, {operator_flag_items_MACRO, "MACRO"}, {operator_flag_items_GRAB_CURSOR, "GRAB_CURSOR"}, {operator_flag_items_PRESET, "PRESET"}, {operator_flag_items_INTERNAL, "INTERNAL"}};
	};

	const std::map<std::string, int> string_to_operator_flag_items = create_string_to_operator_flag_items();
	const std::map<int, std::string> operator_flag_items_to_string = create_operator_flag_items_to_string();

	operator_flag_items_enum bl_options() {
		STRING_TYPE_GETTER("bl_options", static_cast<operator_flag_items_enum>(string_to_operator_flag_items.at(resstr)))
	}

	void bl_options(operator_flag_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_options", operator_flag_items_to_string.at(value))
	}

	std::map<std::string, Macro> macros();

	enum items_enum {
		items_DEBUG = 1,	
		items_INFO = 2,	
		items_OPERATOR = 4,	
		items_PROPERTY = 8,	
		items_WARNING = 16,	
		items_ERROR = 32,	
		items_ERROR_INVALID_INPUT = 64,	
		items_ERROR_INVALID_CONTEXT = 128,	
		items_ERROR_OUT_OF_MEMORY = 256	
	};

	std::map<std::string, int> create_string_to_items() {
		return {{"DEBUG", items_DEBUG}, {"INFO", items_INFO}, {"OPERATOR", items_OPERATOR}, {"PROPERTY", items_PROPERTY}, {"WARNING", items_WARNING}, {"ERROR", items_ERROR}, {"ERROR_INVALID_INPUT", items_ERROR_INVALID_INPUT}, {"ERROR_INVALID_CONTEXT", items_ERROR_INVALID_CONTEXT}, {"ERROR_OUT_OF_MEMORY", items_ERROR_OUT_OF_MEMORY}};
	};

	std::map<int, std::string> create_items_to_string() {
		return {{items_DEBUG, "DEBUG"}, {items_INFO, "INFO"}, {items_OPERATOR, "OPERATOR"}, {items_PROPERTY, "PROPERTY"}, {items_WARNING, "WARNING"}, {items_ERROR, "ERROR"}, {items_ERROR_INVALID_INPUT, "ERROR_INVALID_INPUT"}, {items_ERROR_INVALID_CONTEXT, "ERROR_INVALID_CONTEXT"}, {items_ERROR_OUT_OF_MEMORY, "ERROR_OUT_OF_MEMORY"}};
	};

	const std::map<std::string, int> string_to_items = create_string_to_items();
	const std::map<int, std::string> items_to_string = create_items_to_string();

	void report(items_enum type, const std::string message) {
		PYTHON_FUNCTION_ARGS_CALL("report", "ss", items_to_string.at(type), message)
	}

};

class OperatorProperties : public pyUniplug {
public:
	OperatorProperties(PyObject* pyobj) : pyUniplug(pyobj) {}
	OperatorProperties() : pyUniplug(0) { }

};

class OperatorOptions : public pyUniplug {
public:
	OperatorOptions(PyObject* pyobj) : pyUniplug(pyobj) {}
	OperatorOptions() : pyUniplug(0) { }

	bool is_grab_cursor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_grab_cursor")
	}

	void is_grab_cursor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_grab_cursor", value)
	}

	bool is_invoke() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_invoke")
	}

	void is_invoke(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_invoke", value)
	}

	bool use_cursor_region() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cursor_region")
	}

	void use_cursor_region(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cursor_region", value)
	}
};

class OperatorMousePath : public PropertyGroup {
public:
	OperatorMousePath(PyObject* pyobj) : PropertyGroup(pyobj) {}
	OperatorMousePath() : PropertyGroup(0) { }

	VFLOAT2 loc() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "loc", 2)
	}

	void loc(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "loc", 2)
	}

	float time() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time")
	}

	void time(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time", value)
	}
};

class OperatorFileListElement : public PropertyGroup {
public:
	OperatorFileListElement(PyObject* pyobj) : PropertyGroup(pyobj) {}
	OperatorFileListElement() : PropertyGroup(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}
};

class Macro : public pyUniplug {
public:
	Macro(PyObject* pyobj) : pyUniplug(pyobj) {}
	Macro() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	OperatorProperties properties() {
		CLASS_TYPES_GETTER(OperatorProperties, "properties")
	}

	std::string bl_idname() {
		STRING_TYPE_GETTER("bl_idname", resstr)
	}

	void bl_idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_idname", value)
	}

	std::string bl_label() {
		STRING_TYPE_GETTER("bl_label", resstr)
	}

	void bl_label(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_label", value)
	}

	std::string bl_translation_context() {
		STRING_TYPE_GETTER("bl_translation_context", resstr)
	}

	void bl_translation_context(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_translation_context", value)
	}

	std::string bl_description() {
		STRING_TYPE_GETTER("bl_description", resstr)
	}

	void bl_description(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_description", value)
	}

	enum operator_flag_items_enum {
		operator_flag_items_REGISTER = 1,	
		operator_flag_items_UNDO = 2,	
		operator_flag_items_BLOCKING = 4,	
		operator_flag_items_MACRO = 8,	
		operator_flag_items_GRAB_CURSOR = 16,	
		operator_flag_items_PRESET = 32,	
		operator_flag_items_INTERNAL = 64	
	};

	std::map<std::string, int> create_string_to_operator_flag_items() {
		return {{"REGISTER", operator_flag_items_REGISTER}, {"UNDO", operator_flag_items_UNDO}, {"BLOCKING", operator_flag_items_BLOCKING}, {"MACRO", operator_flag_items_MACRO}, {"GRAB_CURSOR", operator_flag_items_GRAB_CURSOR}, {"PRESET", operator_flag_items_PRESET}, {"INTERNAL", operator_flag_items_INTERNAL}};
	};

	std::map<int, std::string> create_operator_flag_items_to_string() {
		return {{operator_flag_items_REGISTER, "REGISTER"}, {operator_flag_items_UNDO, "UNDO"}, {operator_flag_items_BLOCKING, "BLOCKING"}, {operator_flag_items_MACRO, "MACRO"}, {operator_flag_items_GRAB_CURSOR, "GRAB_CURSOR"}, {operator_flag_items_PRESET, "PRESET"}, {operator_flag_items_INTERNAL, "INTERNAL"}};
	};

	const std::map<std::string, int> string_to_operator_flag_items = create_string_to_operator_flag_items();
	const std::map<int, std::string> operator_flag_items_to_string = create_operator_flag_items_to_string();

	operator_flag_items_enum bl_options() {
		STRING_TYPE_GETTER("bl_options", static_cast<operator_flag_items_enum>(string_to_operator_flag_items.at(resstr)))
	}

	void bl_options(operator_flag_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "bl_options", operator_flag_items_to_string.at(value))
	}

	enum items_enum {
		items_DEBUG = 1,	
		items_INFO = 2,	
		items_OPERATOR = 4,	
		items_PROPERTY = 8,	
		items_WARNING = 16,	
		items_ERROR = 32,	
		items_ERROR_INVALID_INPUT = 64,	
		items_ERROR_INVALID_CONTEXT = 128,	
		items_ERROR_OUT_OF_MEMORY = 256	
	};

	std::map<std::string, int> create_string_to_items() {
		return {{"DEBUG", items_DEBUG}, {"INFO", items_INFO}, {"OPERATOR", items_OPERATOR}, {"PROPERTY", items_PROPERTY}, {"WARNING", items_WARNING}, {"ERROR", items_ERROR}, {"ERROR_INVALID_INPUT", items_ERROR_INVALID_INPUT}, {"ERROR_INVALID_CONTEXT", items_ERROR_INVALID_CONTEXT}, {"ERROR_OUT_OF_MEMORY", items_ERROR_OUT_OF_MEMORY}};
	};

	std::map<int, std::string> create_items_to_string() {
		return {{items_DEBUG, "DEBUG"}, {items_INFO, "INFO"}, {items_OPERATOR, "OPERATOR"}, {items_PROPERTY, "PROPERTY"}, {items_WARNING, "WARNING"}, {items_ERROR, "ERROR"}, {items_ERROR_INVALID_INPUT, "ERROR_INVALID_INPUT"}, {items_ERROR_INVALID_CONTEXT, "ERROR_INVALID_CONTEXT"}, {items_ERROR_OUT_OF_MEMORY, "ERROR_OUT_OF_MEMORY"}};
	};

	const std::map<std::string, int> string_to_items = create_string_to_items();
	const std::map<int, std::string> items_to_string = create_items_to_string();

	void report(items_enum type, const std::string message) {
		PYTHON_FUNCTION_ARGS_CALL("report", "ss", items_to_string.at(type), message)
	}

};

class OperatorMacro : public pyUniplug {
public:
	OperatorMacro(PyObject* pyobj) : pyUniplug(pyobj) {}
	OperatorMacro() : pyUniplug(0) { }

	OperatorProperties properties() {
		CLASS_TYPES_GETTER(OperatorProperties, "properties")
	}
};

class Event : public pyUniplug {
public:
	Event(PyObject* pyobj) : pyUniplug(pyobj) {}
	Event() : pyUniplug(0) { }

	std::string ascii() {
		STRING_TYPE_GETTER("ascii", resstr)
	}

	void ascii(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "ascii", value)
	}

	std::string unicode() {
		STRING_TYPE_GETTER("unicode", resstr)
	}

	void unicode(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "unicode", value)
	}

	enum event_value_items_enum {
		event_value_items_ANY = -1,	
		event_value_items_NOTHING = 0,	
		event_value_items_PRESS = 1,	
		event_value_items_RELEASE = 2,	
		event_value_items_CLICK = 3,	
		event_value_items_DOUBLE_CLICK = 4,	
		event_value_items_NORTH = 1,	
		event_value_items_NORTH_EAST = 2,	
		event_value_items_EAST = 3,	
		event_value_items_SOUTH_EAST = 4,	
		event_value_items_SOUTH = 5,	
		event_value_items_SOUTH_WEST = 6,	
		event_value_items_WEST = 7,	
		event_value_items_NORTH_WEST = 8	
	};

	std::map<std::string, int> create_string_to_event_value_items() {
		return {{"ANY", event_value_items_ANY}, {"NOTHING", event_value_items_NOTHING}, {"PRESS", event_value_items_PRESS}, {"RELEASE", event_value_items_RELEASE}, {"CLICK", event_value_items_CLICK}, {"DOUBLE_CLICK", event_value_items_DOUBLE_CLICK}, {"NORTH", event_value_items_NORTH}, {"NORTH_EAST", event_value_items_NORTH_EAST}, {"EAST", event_value_items_EAST}, {"SOUTH_EAST", event_value_items_SOUTH_EAST}, {"SOUTH", event_value_items_SOUTH}, {"SOUTH_WEST", event_value_items_SOUTH_WEST}, {"WEST", event_value_items_WEST}, {"NORTH_WEST", event_value_items_NORTH_WEST}};
	};

	std::map<int, std::string> create_event_value_items_to_string() {
		return {{event_value_items_ANY, "ANY"}, {event_value_items_NOTHING, "NOTHING"}, {event_value_items_PRESS, "PRESS"}, {event_value_items_RELEASE, "RELEASE"}, {event_value_items_CLICK, "CLICK"}, {event_value_items_DOUBLE_CLICK, "DOUBLE_CLICK"}, {event_value_items_NORTH, "NORTH"}, {event_value_items_NORTH_EAST, "NORTH_EAST"}, {event_value_items_EAST, "EAST"}, {event_value_items_SOUTH_EAST, "SOUTH_EAST"}, {event_value_items_SOUTH, "SOUTH"}, {event_value_items_SOUTH_WEST, "SOUTH_WEST"}, {event_value_items_WEST, "WEST"}, {event_value_items_NORTH_WEST, "NORTH_WEST"}};
	};

	const std::map<std::string, int> string_to_event_value_items = create_string_to_event_value_items();
	const std::map<int, std::string> event_value_items_to_string = create_event_value_items_to_string();

	event_value_items_enum value() {
		STRING_TYPE_GETTER("value", static_cast<event_value_items_enum>(string_to_event_value_items.at(resstr)))
	}

	void value(event_value_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "value", event_value_items_to_string.at(value))
	}

	enum event_type_items_enum {
		event_type_items_NONE = 0,	
		event_type_items_LEFTMOUSE = 1,	
		event_type_items_MIDDLEMOUSE = 2,	
		event_type_items_RIGHTMOUSE = 3,	
		event_type_items_BUTTON4MOUSE = 7,	
		event_type_items_BUTTON5MOUSE = 8,	
		event_type_items_BUTTON6MOUSE = 18,	
		event_type_items_BUTTON7MOUSE = 19,	
		event_type_items_ACTIONMOUSE = 5,	
		event_type_items_SELECTMOUSE = 6,	
		event_type_items_MOUSEMOVE = 4,	
		event_type_items_INBETWEEN_MOUSEMOVE = 17,	
		event_type_items_TRACKPADPAN = 14,	
		event_type_items_TRACKPADZOOM = 15,	
		event_type_items_MOUSEROTATE = 16,	
		event_type_items_WHEELUPMOUSE = 10,	
		event_type_items_WHEELDOWNMOUSE = 11,	
		event_type_items_WHEELINMOUSE = 12,	
		event_type_items_WHEELOUTMOUSE = 13,	
		event_type_items_EVT_TWEAK_L = 20482,	
		event_type_items_EVT_TWEAK_M = 20483,	
		event_type_items_EVT_TWEAK_R = 20484,	
		event_type_items_EVT_TWEAK_A = 20485,	
		event_type_items_EVT_TWEAK_S = 20486,	
		event_type_items_A = 97,	
		event_type_items_B = 98,	
		event_type_items_C = 99,	
		event_type_items_D = 100,	
		event_type_items_E = 101,	
		event_type_items_F = 102,	
		event_type_items_G = 103,	
		event_type_items_H = 104,	
		event_type_items_I = 105,	
		event_type_items_J = 106,	
		event_type_items_K = 107,	
		event_type_items_L = 108,	
		event_type_items_M = 109,	
		event_type_items_N = 110,	
		event_type_items_O = 111,	
		event_type_items_P = 112,	
		event_type_items_Q = 113,	
		event_type_items_R = 114,	
		event_type_items_S = 115,	
		event_type_items_T = 116,	
		event_type_items_U = 117,	
		event_type_items_V = 118,	
		event_type_items_W = 119,	
		event_type_items_X = 120,	
		event_type_items_Y = 121,	
		event_type_items_Z = 122,	
		event_type_items_ZERO = 48,	
		event_type_items_ONE = 49,	
		event_type_items_TWO = 50,	
		event_type_items_THREE = 51,	
		event_type_items_FOUR = 52,	
		event_type_items_FIVE = 53,	
		event_type_items_SIX = 54,	
		event_type_items_SEVEN = 55,	
		event_type_items_EIGHT = 56,	
		event_type_items_NINE = 57,	
		event_type_items_LEFT_CTRL = 212,	
		event_type_items_LEFT_ALT = 213,	
		event_type_items_LEFT_SHIFT = 217,	
		event_type_items_RIGHT_ALT = 214,	
		event_type_items_RIGHT_CTRL = 215,	
		event_type_items_RIGHT_SHIFT = 216,	
		event_type_items_OSKEY = 172,	
		event_type_items_GRLESS = 173,	
		event_type_items_ESC = 218,	
		event_type_items_TAB = 219,	
		event_type_items_RET = 220,	
		event_type_items_SPACE = 221,	
		event_type_items_LINE_FEED = 222,	
		event_type_items_BACK_SPACE = 223,	
		event_type_items_DEL = 224,	
		event_type_items_SEMI_COLON = 225,	
		event_type_items_PERIOD = 226,	
		event_type_items_COMMA = 227,	
		event_type_items_QUOTE = 228,	
		event_type_items_ACCENT_GRAVE = 229,	
		event_type_items_MINUS = 230,	
		event_type_items_SLASH = 232,	
		event_type_items_BACK_SLASH = 233,	
		event_type_items_EQUAL = 234,	
		event_type_items_LEFT_BRACKET = 235,	
		event_type_items_RIGHT_BRACKET = 236,	
		event_type_items_LEFT_ARROW = 137,	
		event_type_items_DOWN_ARROW = 138,	
		event_type_items_RIGHT_ARROW = 139,	
		event_type_items_UP_ARROW = 140,	
		event_type_items_NUMPAD_2 = 152,	
		event_type_items_NUMPAD_4 = 154,	
		event_type_items_NUMPAD_6 = 156,	
		event_type_items_NUMPAD_8 = 158,	
		event_type_items_NUMPAD_1 = 151,	
		event_type_items_NUMPAD_3 = 153,	
		event_type_items_NUMPAD_5 = 155,	
		event_type_items_NUMPAD_7 = 157,	
		event_type_items_NUMPAD_9 = 159,	
		event_type_items_NUMPAD_PERIOD = 199,	
		event_type_items_NUMPAD_SLASH = 161,	
		event_type_items_NUMPAD_ASTERIX = 160,	
		event_type_items_NUMPAD_0 = 150,	
		event_type_items_NUMPAD_MINUS = 162,	
		event_type_items_NUMPAD_ENTER = 163,	
		event_type_items_NUMPAD_PLUS = 164,	
		event_type_items_F1 = 300,	
		event_type_items_F2 = 301,	
		event_type_items_F3 = 302,	
		event_type_items_F4 = 303,	
		event_type_items_F5 = 304,	
		event_type_items_F6 = 305,	
		event_type_items_F7 = 306,	
		event_type_items_F8 = 307,	
		event_type_items_F9 = 308,	
		event_type_items_F10 = 309,	
		event_type_items_F11 = 310,	
		event_type_items_F12 = 311,	
		event_type_items_F13 = 312,	
		event_type_items_F14 = 313,	
		event_type_items_F15 = 314,	
		event_type_items_F16 = 315,	
		event_type_items_F17 = 316,	
		event_type_items_F18 = 317,	
		event_type_items_F19 = 318,	
		event_type_items_PAUSE = 165,	
		event_type_items_INSERT = 166,	
		event_type_items_HOME = 167,	
		event_type_items_PAGE_UP = 168,	
		event_type_items_PAGE_DOWN = 169,	
		event_type_items_END = 170,	
		event_type_items_MEDIA_PLAY = 174,	
		event_type_items_MEDIA_STOP = 175,	
		event_type_items_MEDIA_FIRST = 176,	
		event_type_items_MEDIA_LAST = 177,	
		event_type_items_TEXTINPUT = -2,	
		event_type_items_WINDOW_DEACTIVATE = 260,	
		event_type_items_TIMER = 272,	
		event_type_items_TIMER0 = 273,	
		event_type_items_TIMER1 = 274,	
		event_type_items_TIMER2 = 275,	
		event_type_items_TIMER_JOBS = 276,	
		event_type_items_TIMER_AUTOSAVE = 277,	
		event_type_items_TIMER_REPORT = 278,	
		event_type_items_TIMERREGION = 279,	
		event_type_items_NDOF_MOTION = 400,	
		event_type_items_NDOF_BUTTON_MENU = 401,	
		event_type_items_NDOF_BUTTON_FIT = 402,	
		event_type_items_NDOF_BUTTON_TOP = 403,	
		event_type_items_NDOF_BUTTON_BOTTOM = 404,	
		event_type_items_NDOF_BUTTON_LEFT = 405,	
		event_type_items_NDOF_BUTTON_RIGHT = 406,	
		event_type_items_NDOF_BUTTON_FRONT = 407,	
		event_type_items_NDOF_BUTTON_BACK = 408,	
		event_type_items_NDOF_BUTTON_ISO1 = 409,	
		event_type_items_NDOF_BUTTON_ISO2 = 410,	
		event_type_items_NDOF_BUTTON_ROLL_CW = 411,	
		event_type_items_NDOF_BUTTON_ROLL_CCW = 412,	
		event_type_items_NDOF_BUTTON_SPIN_CW = 413,	
		event_type_items_NDOF_BUTTON_SPIN_CCW = 414,	
		event_type_items_NDOF_BUTTON_TILT_CW = 415,	
		event_type_items_NDOF_BUTTON_TILT_CCW = 416,	
		event_type_items_NDOF_BUTTON_ROTATE = 417,	
		event_type_items_NDOF_BUTTON_PANZOOM = 418,	
		event_type_items_NDOF_BUTTON_DOMINANT = 419,	
		event_type_items_NDOF_BUTTON_PLUS = 420,	
		event_type_items_NDOF_BUTTON_MINUS = 421,	
		event_type_items_NDOF_BUTTON_ESC = 422,	
		event_type_items_NDOF_BUTTON_ALT = 423,	
		event_type_items_NDOF_BUTTON_SHIFT = 424,	
		event_type_items_NDOF_BUTTON_CTRL = 425,	
		event_type_items_NDOF_BUTTON_1 = 426,	
		event_type_items_NDOF_BUTTON_2 = 427,	
		event_type_items_NDOF_BUTTON_3 = 428,	
		event_type_items_NDOF_BUTTON_4 = 429,	
		event_type_items_NDOF_BUTTON_5 = 430,	
		event_type_items_NDOF_BUTTON_6 = 431,	
		event_type_items_NDOF_BUTTON_7 = 432,	
		event_type_items_NDOF_BUTTON_8 = 433,	
		event_type_items_NDOF_BUTTON_9 = 434,	
		event_type_items_NDOF_BUTTON_10 = 435,	
		event_type_items_NDOF_BUTTON_A = 436,	
		event_type_items_NDOF_BUTTON_B = 437,	
		event_type_items_NDOF_BUTTON_C = 438	
	};

	std::map<std::string, int> create_string_to_event_type_items() {
		return {{"NONE", event_type_items_NONE}, {"LEFTMOUSE", event_type_items_LEFTMOUSE}, {"MIDDLEMOUSE", event_type_items_MIDDLEMOUSE}, {"RIGHTMOUSE", event_type_items_RIGHTMOUSE}, {"BUTTON4MOUSE", event_type_items_BUTTON4MOUSE}, {"BUTTON5MOUSE", event_type_items_BUTTON5MOUSE}, {"BUTTON6MOUSE", event_type_items_BUTTON6MOUSE}, {"BUTTON7MOUSE", event_type_items_BUTTON7MOUSE}, {"ACTIONMOUSE", event_type_items_ACTIONMOUSE}, {"SELECTMOUSE", event_type_items_SELECTMOUSE}, {"MOUSEMOVE", event_type_items_MOUSEMOVE}, {"INBETWEEN_MOUSEMOVE", event_type_items_INBETWEEN_MOUSEMOVE}, {"TRACKPADPAN", event_type_items_TRACKPADPAN}, {"TRACKPADZOOM", event_type_items_TRACKPADZOOM}, {"MOUSEROTATE", event_type_items_MOUSEROTATE}, {"WHEELUPMOUSE", event_type_items_WHEELUPMOUSE}, {"WHEELDOWNMOUSE", event_type_items_WHEELDOWNMOUSE}, {"WHEELINMOUSE", event_type_items_WHEELINMOUSE}, {"WHEELOUTMOUSE", event_type_items_WHEELOUTMOUSE}, {"EVT_TWEAK_L", event_type_items_EVT_TWEAK_L}, {"EVT_TWEAK_M", event_type_items_EVT_TWEAK_M}, {"EVT_TWEAK_R", event_type_items_EVT_TWEAK_R}, {"EVT_TWEAK_A", event_type_items_EVT_TWEAK_A}, {"EVT_TWEAK_S", event_type_items_EVT_TWEAK_S}, {"A", event_type_items_A}, {"B", event_type_items_B}, {"C", event_type_items_C}, {"D", event_type_items_D}, {"E", event_type_items_E}, {"F", event_type_items_F}, {"G", event_type_items_G}, {"H", event_type_items_H}, {"I", event_type_items_I}, {"J", event_type_items_J}, {"K", event_type_items_K}, {"L", event_type_items_L}, {"M", event_type_items_M}, {"N", event_type_items_N}, {"O", event_type_items_O}, {"P", event_type_items_P}, {"Q", event_type_items_Q}, {"R", event_type_items_R}, {"S", event_type_items_S}, {"T", event_type_items_T}, {"U", event_type_items_U}, {"V", event_type_items_V}, {"W", event_type_items_W}, {"X", event_type_items_X}, {"Y", event_type_items_Y}, {"Z", event_type_items_Z}, {"ZERO", event_type_items_ZERO}, {"ONE", event_type_items_ONE}, {"TWO", event_type_items_TWO}, {"THREE", event_type_items_THREE}, {"FOUR", event_type_items_FOUR}, {"FIVE", event_type_items_FIVE}, {"SIX", event_type_items_SIX}, {"SEVEN", event_type_items_SEVEN}, {"EIGHT", event_type_items_EIGHT}, {"NINE", event_type_items_NINE}, {"LEFT_CTRL", event_type_items_LEFT_CTRL}, {"LEFT_ALT", event_type_items_LEFT_ALT}, {"LEFT_SHIFT", event_type_items_LEFT_SHIFT}, {"RIGHT_ALT", event_type_items_RIGHT_ALT}, {"RIGHT_CTRL", event_type_items_RIGHT_CTRL}, {"RIGHT_SHIFT", event_type_items_RIGHT_SHIFT}, {"OSKEY", event_type_items_OSKEY}, {"GRLESS", event_type_items_GRLESS}, {"ESC", event_type_items_ESC}, {"TAB", event_type_items_TAB}, {"RET", event_type_items_RET}, {"SPACE", event_type_items_SPACE}, {"LINE_FEED", event_type_items_LINE_FEED}, {"BACK_SPACE", event_type_items_BACK_SPACE}, {"DEL", event_type_items_DEL}, {"SEMI_COLON", event_type_items_SEMI_COLON}, {"PERIOD", event_type_items_PERIOD}, {"COMMA", event_type_items_COMMA}, {"QUOTE", event_type_items_QUOTE}, {"ACCENT_GRAVE", event_type_items_ACCENT_GRAVE}, {"MINUS", event_type_items_MINUS}, {"SLASH", event_type_items_SLASH}, {"BACK_SLASH", event_type_items_BACK_SLASH}, {"EQUAL", event_type_items_EQUAL}, {"LEFT_BRACKET", event_type_items_LEFT_BRACKET}, {"RIGHT_BRACKET", event_type_items_RIGHT_BRACKET}, {"LEFT_ARROW", event_type_items_LEFT_ARROW}, {"DOWN_ARROW", event_type_items_DOWN_ARROW}, {"RIGHT_ARROW", event_type_items_RIGHT_ARROW}, {"UP_ARROW", event_type_items_UP_ARROW}, {"NUMPAD_2", event_type_items_NUMPAD_2}, {"NUMPAD_4", event_type_items_NUMPAD_4}, {"NUMPAD_6", event_type_items_NUMPAD_6}, {"NUMPAD_8", event_type_items_NUMPAD_8}, {"NUMPAD_1", event_type_items_NUMPAD_1}, {"NUMPAD_3", event_type_items_NUMPAD_3}, {"NUMPAD_5", event_type_items_NUMPAD_5}, {"NUMPAD_7", event_type_items_NUMPAD_7}, {"NUMPAD_9", event_type_items_NUMPAD_9}, {"NUMPAD_PERIOD", event_type_items_NUMPAD_PERIOD}, {"NUMPAD_SLASH", event_type_items_NUMPAD_SLASH}, {"NUMPAD_ASTERIX", event_type_items_NUMPAD_ASTERIX}, {"NUMPAD_0", event_type_items_NUMPAD_0}, {"NUMPAD_MINUS", event_type_items_NUMPAD_MINUS}, {"NUMPAD_ENTER", event_type_items_NUMPAD_ENTER}, {"NUMPAD_PLUS", event_type_items_NUMPAD_PLUS}, {"F1", event_type_items_F1}, {"F2", event_type_items_F2}, {"F3", event_type_items_F3}, {"F4", event_type_items_F4}, {"F5", event_type_items_F5}, {"F6", event_type_items_F6}, {"F7", event_type_items_F7}, {"F8", event_type_items_F8}, {"F9", event_type_items_F9}, {"F10", event_type_items_F10}, {"F11", event_type_items_F11}, {"F12", event_type_items_F12}, {"F13", event_type_items_F13}, {"F14", event_type_items_F14}, {"F15", event_type_items_F15}, {"F16", event_type_items_F16}, {"F17", event_type_items_F17}, {"F18", event_type_items_F18}, {"F19", event_type_items_F19}, {"PAUSE", event_type_items_PAUSE}, {"INSERT", event_type_items_INSERT}, {"HOME", event_type_items_HOME}, {"PAGE_UP", event_type_items_PAGE_UP}, {"PAGE_DOWN", event_type_items_PAGE_DOWN}, {"END", event_type_items_END}, {"MEDIA_PLAY", event_type_items_MEDIA_PLAY}, {"MEDIA_STOP", event_type_items_MEDIA_STOP}, {"MEDIA_FIRST", event_type_items_MEDIA_FIRST}, {"MEDIA_LAST", event_type_items_MEDIA_LAST}, {"TEXTINPUT", event_type_items_TEXTINPUT}, {"WINDOW_DEACTIVATE", event_type_items_WINDOW_DEACTIVATE}, {"TIMER", event_type_items_TIMER}, {"TIMER0", event_type_items_TIMER0}, {"TIMER1", event_type_items_TIMER1}, {"TIMER2", event_type_items_TIMER2}, {"TIMER_JOBS", event_type_items_TIMER_JOBS}, {"TIMER_AUTOSAVE", event_type_items_TIMER_AUTOSAVE}, {"TIMER_REPORT", event_type_items_TIMER_REPORT}, {"TIMERREGION", event_type_items_TIMERREGION}, {"NDOF_MOTION", event_type_items_NDOF_MOTION}, {"NDOF_BUTTON_MENU", event_type_items_NDOF_BUTTON_MENU}, {"NDOF_BUTTON_FIT", event_type_items_NDOF_BUTTON_FIT}, {"NDOF_BUTTON_TOP", event_type_items_NDOF_BUTTON_TOP}, {"NDOF_BUTTON_BOTTOM", event_type_items_NDOF_BUTTON_BOTTOM}, {"NDOF_BUTTON_LEFT", event_type_items_NDOF_BUTTON_LEFT}, {"NDOF_BUTTON_RIGHT", event_type_items_NDOF_BUTTON_RIGHT}, {"NDOF_BUTTON_FRONT", event_type_items_NDOF_BUTTON_FRONT}, {"NDOF_BUTTON_BACK", event_type_items_NDOF_BUTTON_BACK}, {"NDOF_BUTTON_ISO1", event_type_items_NDOF_BUTTON_ISO1}, {"NDOF_BUTTON_ISO2", event_type_items_NDOF_BUTTON_ISO2}, {"NDOF_BUTTON_ROLL_CW", event_type_items_NDOF_BUTTON_ROLL_CW}, {"NDOF_BUTTON_ROLL_CCW", event_type_items_NDOF_BUTTON_ROLL_CCW}, {"NDOF_BUTTON_SPIN_CW", event_type_items_NDOF_BUTTON_SPIN_CW}, {"NDOF_BUTTON_SPIN_CCW", event_type_items_NDOF_BUTTON_SPIN_CCW}, {"NDOF_BUTTON_TILT_CW", event_type_items_NDOF_BUTTON_TILT_CW}, {"NDOF_BUTTON_TILT_CCW", event_type_items_NDOF_BUTTON_TILT_CCW}, {"NDOF_BUTTON_ROTATE", event_type_items_NDOF_BUTTON_ROTATE}, {"NDOF_BUTTON_PANZOOM", event_type_items_NDOF_BUTTON_PANZOOM}, {"NDOF_BUTTON_DOMINANT", event_type_items_NDOF_BUTTON_DOMINANT}, {"NDOF_BUTTON_PLUS", event_type_items_NDOF_BUTTON_PLUS}, {"NDOF_BUTTON_MINUS", event_type_items_NDOF_BUTTON_MINUS}, {"NDOF_BUTTON_ESC", event_type_items_NDOF_BUTTON_ESC}, {"NDOF_BUTTON_ALT", event_type_items_NDOF_BUTTON_ALT}, {"NDOF_BUTTON_SHIFT", event_type_items_NDOF_BUTTON_SHIFT}, {"NDOF_BUTTON_CTRL", event_type_items_NDOF_BUTTON_CTRL}, {"NDOF_BUTTON_1", event_type_items_NDOF_BUTTON_1}, {"NDOF_BUTTON_2", event_type_items_NDOF_BUTTON_2}, {"NDOF_BUTTON_3", event_type_items_NDOF_BUTTON_3}, {"NDOF_BUTTON_4", event_type_items_NDOF_BUTTON_4}, {"NDOF_BUTTON_5", event_type_items_NDOF_BUTTON_5}, {"NDOF_BUTTON_6", event_type_items_NDOF_BUTTON_6}, {"NDOF_BUTTON_7", event_type_items_NDOF_BUTTON_7}, {"NDOF_BUTTON_8", event_type_items_NDOF_BUTTON_8}, {"NDOF_BUTTON_9", event_type_items_NDOF_BUTTON_9}, {"NDOF_BUTTON_10", event_type_items_NDOF_BUTTON_10}, {"NDOF_BUTTON_A", event_type_items_NDOF_BUTTON_A}, {"NDOF_BUTTON_B", event_type_items_NDOF_BUTTON_B}, {"NDOF_BUTTON_C", event_type_items_NDOF_BUTTON_C}};
	};

	std::map<int, std::string> create_event_type_items_to_string() {
		return {{event_type_items_NONE, "NONE"}, {event_type_items_LEFTMOUSE, "LEFTMOUSE"}, {event_type_items_MIDDLEMOUSE, "MIDDLEMOUSE"}, {event_type_items_RIGHTMOUSE, "RIGHTMOUSE"}, {event_type_items_BUTTON4MOUSE, "BUTTON4MOUSE"}, {event_type_items_BUTTON5MOUSE, "BUTTON5MOUSE"}, {event_type_items_BUTTON6MOUSE, "BUTTON6MOUSE"}, {event_type_items_BUTTON7MOUSE, "BUTTON7MOUSE"}, {event_type_items_ACTIONMOUSE, "ACTIONMOUSE"}, {event_type_items_SELECTMOUSE, "SELECTMOUSE"}, {event_type_items_MOUSEMOVE, "MOUSEMOVE"}, {event_type_items_INBETWEEN_MOUSEMOVE, "INBETWEEN_MOUSEMOVE"}, {event_type_items_TRACKPADPAN, "TRACKPADPAN"}, {event_type_items_TRACKPADZOOM, "TRACKPADZOOM"}, {event_type_items_MOUSEROTATE, "MOUSEROTATE"}, {event_type_items_WHEELUPMOUSE, "WHEELUPMOUSE"}, {event_type_items_WHEELDOWNMOUSE, "WHEELDOWNMOUSE"}, {event_type_items_WHEELINMOUSE, "WHEELINMOUSE"}, {event_type_items_WHEELOUTMOUSE, "WHEELOUTMOUSE"}, {event_type_items_EVT_TWEAK_L, "EVT_TWEAK_L"}, {event_type_items_EVT_TWEAK_M, "EVT_TWEAK_M"}, {event_type_items_EVT_TWEAK_R, "EVT_TWEAK_R"}, {event_type_items_EVT_TWEAK_A, "EVT_TWEAK_A"}, {event_type_items_EVT_TWEAK_S, "EVT_TWEAK_S"}, {event_type_items_A, "A"}, {event_type_items_B, "B"}, {event_type_items_C, "C"}, {event_type_items_D, "D"}, {event_type_items_E, "E"}, {event_type_items_F, "F"}, {event_type_items_G, "G"}, {event_type_items_H, "H"}, {event_type_items_I, "I"}, {event_type_items_J, "J"}, {event_type_items_K, "K"}, {event_type_items_L, "L"}, {event_type_items_M, "M"}, {event_type_items_N, "N"}, {event_type_items_O, "O"}, {event_type_items_P, "P"}, {event_type_items_Q, "Q"}, {event_type_items_R, "R"}, {event_type_items_S, "S"}, {event_type_items_T, "T"}, {event_type_items_U, "U"}, {event_type_items_V, "V"}, {event_type_items_W, "W"}, {event_type_items_X, "X"}, {event_type_items_Y, "Y"}, {event_type_items_Z, "Z"}, {event_type_items_ZERO, "ZERO"}, {event_type_items_ONE, "ONE"}, {event_type_items_TWO, "TWO"}, {event_type_items_THREE, "THREE"}, {event_type_items_FOUR, "FOUR"}, {event_type_items_FIVE, "FIVE"}, {event_type_items_SIX, "SIX"}, {event_type_items_SEVEN, "SEVEN"}, {event_type_items_EIGHT, "EIGHT"}, {event_type_items_NINE, "NINE"}, {event_type_items_LEFT_CTRL, "LEFT_CTRL"}, {event_type_items_LEFT_ALT, "LEFT_ALT"}, {event_type_items_LEFT_SHIFT, "LEFT_SHIFT"}, {event_type_items_RIGHT_ALT, "RIGHT_ALT"}, {event_type_items_RIGHT_CTRL, "RIGHT_CTRL"}, {event_type_items_RIGHT_SHIFT, "RIGHT_SHIFT"}, {event_type_items_OSKEY, "OSKEY"}, {event_type_items_GRLESS, "GRLESS"}, {event_type_items_ESC, "ESC"}, {event_type_items_TAB, "TAB"}, {event_type_items_RET, "RET"}, {event_type_items_SPACE, "SPACE"}, {event_type_items_LINE_FEED, "LINE_FEED"}, {event_type_items_BACK_SPACE, "BACK_SPACE"}, {event_type_items_DEL, "DEL"}, {event_type_items_SEMI_COLON, "SEMI_COLON"}, {event_type_items_PERIOD, "PERIOD"}, {event_type_items_COMMA, "COMMA"}, {event_type_items_QUOTE, "QUOTE"}, {event_type_items_ACCENT_GRAVE, "ACCENT_GRAVE"}, {event_type_items_MINUS, "MINUS"}, {event_type_items_SLASH, "SLASH"}, {event_type_items_BACK_SLASH, "BACK_SLASH"}, {event_type_items_EQUAL, "EQUAL"}, {event_type_items_LEFT_BRACKET, "LEFT_BRACKET"}, {event_type_items_RIGHT_BRACKET, "RIGHT_BRACKET"}, {event_type_items_LEFT_ARROW, "LEFT_ARROW"}, {event_type_items_DOWN_ARROW, "DOWN_ARROW"}, {event_type_items_RIGHT_ARROW, "RIGHT_ARROW"}, {event_type_items_UP_ARROW, "UP_ARROW"}, {event_type_items_NUMPAD_2, "NUMPAD_2"}, {event_type_items_NUMPAD_4, "NUMPAD_4"}, {event_type_items_NUMPAD_6, "NUMPAD_6"}, {event_type_items_NUMPAD_8, "NUMPAD_8"}, {event_type_items_NUMPAD_1, "NUMPAD_1"}, {event_type_items_NUMPAD_3, "NUMPAD_3"}, {event_type_items_NUMPAD_5, "NUMPAD_5"}, {event_type_items_NUMPAD_7, "NUMPAD_7"}, {event_type_items_NUMPAD_9, "NUMPAD_9"}, {event_type_items_NUMPAD_PERIOD, "NUMPAD_PERIOD"}, {event_type_items_NUMPAD_SLASH, "NUMPAD_SLASH"}, {event_type_items_NUMPAD_ASTERIX, "NUMPAD_ASTERIX"}, {event_type_items_NUMPAD_0, "NUMPAD_0"}, {event_type_items_NUMPAD_MINUS, "NUMPAD_MINUS"}, {event_type_items_NUMPAD_ENTER, "NUMPAD_ENTER"}, {event_type_items_NUMPAD_PLUS, "NUMPAD_PLUS"}, {event_type_items_F1, "F1"}, {event_type_items_F2, "F2"}, {event_type_items_F3, "F3"}, {event_type_items_F4, "F4"}, {event_type_items_F5, "F5"}, {event_type_items_F6, "F6"}, {event_type_items_F7, "F7"}, {event_type_items_F8, "F8"}, {event_type_items_F9, "F9"}, {event_type_items_F10, "F10"}, {event_type_items_F11, "F11"}, {event_type_items_F12, "F12"}, {event_type_items_F13, "F13"}, {event_type_items_F14, "F14"}, {event_type_items_F15, "F15"}, {event_type_items_F16, "F16"}, {event_type_items_F17, "F17"}, {event_type_items_F18, "F18"}, {event_type_items_F19, "F19"}, {event_type_items_PAUSE, "PAUSE"}, {event_type_items_INSERT, "INSERT"}, {event_type_items_HOME, "HOME"}, {event_type_items_PAGE_UP, "PAGE_UP"}, {event_type_items_PAGE_DOWN, "PAGE_DOWN"}, {event_type_items_END, "END"}, {event_type_items_MEDIA_PLAY, "MEDIA_PLAY"}, {event_type_items_MEDIA_STOP, "MEDIA_STOP"}, {event_type_items_MEDIA_FIRST, "MEDIA_FIRST"}, {event_type_items_MEDIA_LAST, "MEDIA_LAST"}, {event_type_items_TEXTINPUT, "TEXTINPUT"}, {event_type_items_WINDOW_DEACTIVATE, "WINDOW_DEACTIVATE"}, {event_type_items_TIMER, "TIMER"}, {event_type_items_TIMER0, "TIMER0"}, {event_type_items_TIMER1, "TIMER1"}, {event_type_items_TIMER2, "TIMER2"}, {event_type_items_TIMER_JOBS, "TIMER_JOBS"}, {event_type_items_TIMER_AUTOSAVE, "TIMER_AUTOSAVE"}, {event_type_items_TIMER_REPORT, "TIMER_REPORT"}, {event_type_items_TIMERREGION, "TIMERREGION"}, {event_type_items_NDOF_MOTION, "NDOF_MOTION"}, {event_type_items_NDOF_BUTTON_MENU, "NDOF_BUTTON_MENU"}, {event_type_items_NDOF_BUTTON_FIT, "NDOF_BUTTON_FIT"}, {event_type_items_NDOF_BUTTON_TOP, "NDOF_BUTTON_TOP"}, {event_type_items_NDOF_BUTTON_BOTTOM, "NDOF_BUTTON_BOTTOM"}, {event_type_items_NDOF_BUTTON_LEFT, "NDOF_BUTTON_LEFT"}, {event_type_items_NDOF_BUTTON_RIGHT, "NDOF_BUTTON_RIGHT"}, {event_type_items_NDOF_BUTTON_FRONT, "NDOF_BUTTON_FRONT"}, {event_type_items_NDOF_BUTTON_BACK, "NDOF_BUTTON_BACK"}, {event_type_items_NDOF_BUTTON_ISO1, "NDOF_BUTTON_ISO1"}, {event_type_items_NDOF_BUTTON_ISO2, "NDOF_BUTTON_ISO2"}, {event_type_items_NDOF_BUTTON_ROLL_CW, "NDOF_BUTTON_ROLL_CW"}, {event_type_items_NDOF_BUTTON_ROLL_CCW, "NDOF_BUTTON_ROLL_CCW"}, {event_type_items_NDOF_BUTTON_SPIN_CW, "NDOF_BUTTON_SPIN_CW"}, {event_type_items_NDOF_BUTTON_SPIN_CCW, "NDOF_BUTTON_SPIN_CCW"}, {event_type_items_NDOF_BUTTON_TILT_CW, "NDOF_BUTTON_TILT_CW"}, {event_type_items_NDOF_BUTTON_TILT_CCW, "NDOF_BUTTON_TILT_CCW"}, {event_type_items_NDOF_BUTTON_ROTATE, "NDOF_BUTTON_ROTATE"}, {event_type_items_NDOF_BUTTON_PANZOOM, "NDOF_BUTTON_PANZOOM"}, {event_type_items_NDOF_BUTTON_DOMINANT, "NDOF_BUTTON_DOMINANT"}, {event_type_items_NDOF_BUTTON_PLUS, "NDOF_BUTTON_PLUS"}, {event_type_items_NDOF_BUTTON_MINUS, "NDOF_BUTTON_MINUS"}, {event_type_items_NDOF_BUTTON_ESC, "NDOF_BUTTON_ESC"}, {event_type_items_NDOF_BUTTON_ALT, "NDOF_BUTTON_ALT"}, {event_type_items_NDOF_BUTTON_SHIFT, "NDOF_BUTTON_SHIFT"}, {event_type_items_NDOF_BUTTON_CTRL, "NDOF_BUTTON_CTRL"}, {event_type_items_NDOF_BUTTON_1, "NDOF_BUTTON_1"}, {event_type_items_NDOF_BUTTON_2, "NDOF_BUTTON_2"}, {event_type_items_NDOF_BUTTON_3, "NDOF_BUTTON_3"}, {event_type_items_NDOF_BUTTON_4, "NDOF_BUTTON_4"}, {event_type_items_NDOF_BUTTON_5, "NDOF_BUTTON_5"}, {event_type_items_NDOF_BUTTON_6, "NDOF_BUTTON_6"}, {event_type_items_NDOF_BUTTON_7, "NDOF_BUTTON_7"}, {event_type_items_NDOF_BUTTON_8, "NDOF_BUTTON_8"}, {event_type_items_NDOF_BUTTON_9, "NDOF_BUTTON_9"}, {event_type_items_NDOF_BUTTON_10, "NDOF_BUTTON_10"}, {event_type_items_NDOF_BUTTON_A, "NDOF_BUTTON_A"}, {event_type_items_NDOF_BUTTON_B, "NDOF_BUTTON_B"}, {event_type_items_NDOF_BUTTON_C, "NDOF_BUTTON_C"}};
	};

	const std::map<std::string, int> string_to_event_type_items = create_string_to_event_type_items();
	const std::map<int, std::string> event_type_items_to_string = create_event_type_items_to_string();

	event_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void type(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", event_type_items_to_string.at(value))
	}

	int mouse_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mouse_x")
	}

	void mouse_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mouse_x", value)
	}

	int mouse_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mouse_y")
	}

	void mouse_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mouse_y", value)
	}

	int mouse_region_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mouse_region_x")
	}

	void mouse_region_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mouse_region_x", value)
	}

	int mouse_region_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mouse_region_y")
	}

	void mouse_region_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mouse_region_y", value)
	}

	int mouse_prev_x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mouse_prev_x")
	}

	void mouse_prev_x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mouse_prev_x", value)
	}

	int mouse_prev_y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "mouse_prev_y")
	}

	void mouse_prev_y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "mouse_prev_y", value)
	}

	float pressure() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pressure")
	}

	void pressure(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pressure", value)
	}

	VFLOAT2 tilt() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "tilt", 2)
	}

	void tilt(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "tilt", 2)
	}

	bool is_tablet() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_tablet")
	}

	void is_tablet(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_tablet", value)
	}

	bool shift() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "shift")
	}

	void shift(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "shift", value)
	}

	bool ctrl() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ctrl")
	}

	void ctrl(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ctrl", value)
	}

	bool alt() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "alt")
	}

	void alt(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "alt", value)
	}

	bool oskey() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "oskey")
	}

	void oskey(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "oskey", value)
	}
};

class Timer : public pyUniplug {
public:
	Timer(PyObject* pyobj) : pyUniplug(pyobj) {}
	Timer() : pyUniplug(0) { }

	float time_step() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_step")
	}

	void time_step(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_step", value)
	}

	float time_delta() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_delta")
	}

	void time_delta(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_delta", value)
	}

	float time_duration() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "time_duration")
	}

	void time_duration(float value) {
		PRIMITIVE_TYPES_SETTER("f", "time_duration", value)
	}
};

class UIPopupMenu : public pyUniplug {
public:
	UIPopupMenu(PyObject* pyobj) : pyUniplug(pyobj) {}
	UIPopupMenu() : pyUniplug(0) { }

	UILayout layout() {
		CLASS_TYPES_GETTER(UILayout, "layout")
	}
};

class UIPieMenu : public pyUniplug {
public:
	UIPieMenu(PyObject* pyobj) : pyUniplug(pyobj) {}
	UIPieMenu() : pyUniplug(0) { }

	UILayout layout() {
		CLASS_TYPES_GETTER(UILayout, "layout")
	}
};

class Window : public pyUniplug {
public:
	Window(PyObject* pyobj) : pyUniplug(pyobj) {}
	Window() : pyUniplug(0) { }

	Screen screen() {
		CLASS_TYPES_GETTER(Screen, "screen")
	}

	int x() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "x")
	}

	void x(int value) {
		PRIMITIVE_TYPES_SETTER("i", "x", value)
	}

	int y() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "y")
	}

	void y(int value) {
		PRIMITIVE_TYPES_SETTER("i", "y", value)
	}

	int width() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "width")
	}

	void width(int value) {
		PRIMITIVE_TYPES_SETTER("i", "width", value)
	}

	int height() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "height")
	}

	void height(int value) {
		PRIMITIVE_TYPES_SETTER("i", "height", value)
	}

	Stereo3dDisplay stereo_3d_display();

	void cursor_warp(int x, int y) {
		PYTHON_FUNCTION_ARGS_CALL("cursor_warp", "ii", x, y)
	}

	enum window_cursor_items_enum {
		window_cursor_items_DEFAULT = 1006,	
		window_cursor_items_NONE = 1007,	
		window_cursor_items_WAIT = 1001,	
		window_cursor_items_CROSSHAIR = 1002,	
		window_cursor_items_MOVE_X = 1003,	
		window_cursor_items_MOVE_Y = 1004,	
		window_cursor_items_KNIFE = 9,	
		window_cursor_items_TEXT = 11,	
		window_cursor_items_PAINT_BRUSH = 12,	
		window_cursor_items_HAND = 13,	
		window_cursor_items_SCROLL_X = 16,	
		window_cursor_items_SCROLL_Y = 15,	
		window_cursor_items_SCROLL_XY = 14,	
		window_cursor_items_EYEDROPPER = 17	
	};

	std::map<std::string, int> create_string_to_window_cursor_items() {
		return {{"DEFAULT", window_cursor_items_DEFAULT}, {"NONE", window_cursor_items_NONE}, {"WAIT", window_cursor_items_WAIT}, {"CROSSHAIR", window_cursor_items_CROSSHAIR}, {"MOVE_X", window_cursor_items_MOVE_X}, {"MOVE_Y", window_cursor_items_MOVE_Y}, {"KNIFE", window_cursor_items_KNIFE}, {"TEXT", window_cursor_items_TEXT}, {"PAINT_BRUSH", window_cursor_items_PAINT_BRUSH}, {"HAND", window_cursor_items_HAND}, {"SCROLL_X", window_cursor_items_SCROLL_X}, {"SCROLL_Y", window_cursor_items_SCROLL_Y}, {"SCROLL_XY", window_cursor_items_SCROLL_XY}, {"EYEDROPPER", window_cursor_items_EYEDROPPER}};
	};

	std::map<int, std::string> create_window_cursor_items_to_string() {
		return {{window_cursor_items_DEFAULT, "DEFAULT"}, {window_cursor_items_NONE, "NONE"}, {window_cursor_items_WAIT, "WAIT"}, {window_cursor_items_CROSSHAIR, "CROSSHAIR"}, {window_cursor_items_MOVE_X, "MOVE_X"}, {window_cursor_items_MOVE_Y, "MOVE_Y"}, {window_cursor_items_KNIFE, "KNIFE"}, {window_cursor_items_TEXT, "TEXT"}, {window_cursor_items_PAINT_BRUSH, "PAINT_BRUSH"}, {window_cursor_items_HAND, "HAND"}, {window_cursor_items_SCROLL_X, "SCROLL_X"}, {window_cursor_items_SCROLL_Y, "SCROLL_Y"}, {window_cursor_items_SCROLL_XY, "SCROLL_XY"}, {window_cursor_items_EYEDROPPER, "EYEDROPPER"}};
	};

	const std::map<std::string, int> string_to_window_cursor_items = create_string_to_window_cursor_items();
	const std::map<int, std::string> window_cursor_items_to_string = create_window_cursor_items_to_string();

	void cursor_set(window_cursor_items_enum cursor) {
		PYTHON_FUNCTION_ARGS_CALL("cursor_set", "s", window_cursor_items_to_string.at(cursor))
	}

	void cursor_modal_set(window_cursor_items_enum cursor) {
		PYTHON_FUNCTION_ARGS_CALL("cursor_modal_set", "s", window_cursor_items_to_string.at(cursor))
	}

	void cursor_modal_restore() {
		PYTHON_FUNCTION_CALL("cursor_modal_restore")
	}
};

class Stereo3dDisplay : public pyUniplug {
public:
	Stereo3dDisplay(PyObject* pyobj) : pyUniplug(pyobj) {}
	Stereo3dDisplay() : pyUniplug(0) { }

	enum stereo3d_display_items_enum {
		stereo3d_display_items_ANAGLYPH = 0,	
		stereo3d_display_items_INTERLACE = 1,	
		stereo3d_display_items_TIMESEQUENTIAL = 2,	
		stereo3d_display_items_SIDEBYSIDE = 3,	
		stereo3d_display_items_TOPBOTTOM = 4	
	};

	std::map<std::string, int> create_string_to_stereo3d_display_items() {
		return {{"ANAGLYPH", stereo3d_display_items_ANAGLYPH}, {"INTERLACE", stereo3d_display_items_INTERLACE}, {"TIMESEQUENTIAL", stereo3d_display_items_TIMESEQUENTIAL}, {"SIDEBYSIDE", stereo3d_display_items_SIDEBYSIDE}, {"TOPBOTTOM", stereo3d_display_items_TOPBOTTOM}};
	};

	std::map<int, std::string> create_stereo3d_display_items_to_string() {
		return {{stereo3d_display_items_ANAGLYPH, "ANAGLYPH"}, {stereo3d_display_items_INTERLACE, "INTERLACE"}, {stereo3d_display_items_TIMESEQUENTIAL, "TIMESEQUENTIAL"}, {stereo3d_display_items_SIDEBYSIDE, "SIDEBYSIDE"}, {stereo3d_display_items_TOPBOTTOM, "TOPBOTTOM"}};
	};

	const std::map<std::string, int> string_to_stereo3d_display_items = create_string_to_stereo3d_display_items();
	const std::map<int, std::string> stereo3d_display_items_to_string = create_stereo3d_display_items_to_string();

	stereo3d_display_items_enum display_mode() {
		STRING_TYPE_GETTER("display_mode", static_cast<stereo3d_display_items_enum>(string_to_stereo3d_display_items.at(resstr)))
	}

	void display_mode(stereo3d_display_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "display_mode", stereo3d_display_items_to_string.at(value))
	}

	enum stereo3d_anaglyph_type_items_enum {
		stereo3d_anaglyph_type_items_RED_CYAN = 0,	
		stereo3d_anaglyph_type_items_GREEN_MAGENTA = 1,	
		stereo3d_anaglyph_type_items_YELLOW_BLUE = 2	
	};

	std::map<std::string, int> create_string_to_stereo3d_anaglyph_type_items() {
		return {{"RED_CYAN", stereo3d_anaglyph_type_items_RED_CYAN}, {"GREEN_MAGENTA", stereo3d_anaglyph_type_items_GREEN_MAGENTA}, {"YELLOW_BLUE", stereo3d_anaglyph_type_items_YELLOW_BLUE}};
	};

	std::map<int, std::string> create_stereo3d_anaglyph_type_items_to_string() {
		return {{stereo3d_anaglyph_type_items_RED_CYAN, "RED_CYAN"}, {stereo3d_anaglyph_type_items_GREEN_MAGENTA, "GREEN_MAGENTA"}, {stereo3d_anaglyph_type_items_YELLOW_BLUE, "YELLOW_BLUE"}};
	};

	const std::map<std::string, int> string_to_stereo3d_anaglyph_type_items = create_string_to_stereo3d_anaglyph_type_items();
	const std::map<int, std::string> stereo3d_anaglyph_type_items_to_string = create_stereo3d_anaglyph_type_items_to_string();

	stereo3d_anaglyph_type_items_enum anaglyph_type() {
		STRING_TYPE_GETTER("anaglyph_type", static_cast<stereo3d_anaglyph_type_items_enum>(string_to_stereo3d_anaglyph_type_items.at(resstr)))
	}

	void anaglyph_type(stereo3d_anaglyph_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "anaglyph_type", stereo3d_anaglyph_type_items_to_string.at(value))
	}

	enum stereo3d_interlace_type_items_enum {
		stereo3d_interlace_type_items_ROW_INTERLEAVED = 0,	
		stereo3d_interlace_type_items_COLUMN_INTERLEAVED = 1,	
		stereo3d_interlace_type_items_CHECKERBOARD_INTERLEAVED = 2	
	};

	std::map<std::string, int> create_string_to_stereo3d_interlace_type_items() {
		return {{"ROW_INTERLEAVED", stereo3d_interlace_type_items_ROW_INTERLEAVED}, {"COLUMN_INTERLEAVED", stereo3d_interlace_type_items_COLUMN_INTERLEAVED}, {"CHECKERBOARD_INTERLEAVED", stereo3d_interlace_type_items_CHECKERBOARD_INTERLEAVED}};
	};

	std::map<int, std::string> create_stereo3d_interlace_type_items_to_string() {
		return {{stereo3d_interlace_type_items_ROW_INTERLEAVED, "ROW_INTERLEAVED"}, {stereo3d_interlace_type_items_COLUMN_INTERLEAVED, "COLUMN_INTERLEAVED"}, {stereo3d_interlace_type_items_CHECKERBOARD_INTERLEAVED, "CHECKERBOARD_INTERLEAVED"}};
	};

	const std::map<std::string, int> string_to_stereo3d_interlace_type_items = create_string_to_stereo3d_interlace_type_items();
	const std::map<int, std::string> stereo3d_interlace_type_items_to_string = create_stereo3d_interlace_type_items_to_string();

	stereo3d_interlace_type_items_enum interlace_type() {
		STRING_TYPE_GETTER("interlace_type", static_cast<stereo3d_interlace_type_items_enum>(string_to_stereo3d_interlace_type_items.at(resstr)))
	}

	void interlace_type(stereo3d_interlace_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "interlace_type", stereo3d_interlace_type_items_to_string.at(value))
	}

	bool use_interlace_swap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_interlace_swap")
	}

	void use_interlace_swap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_interlace_swap", value)
	}

	bool use_sidebyside_crosseyed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sidebyside_crosseyed")
	}

	void use_sidebyside_crosseyed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sidebyside_crosseyed", value)
	}
};

class WindowManager : public ID {
public:
	WindowManager(PyObject* pyobj) : ID(pyobj) {}
	WindowManager() : ID(0) { }

	std::map<std::string, Operator> operators() {
		MAP_TYPE_GETTER("operators", Operator)
	}

	std::map<std::string, Window> windows() {
		MAP_TYPE_GETTER("windows", Window)
	}

	std::map<std::string, KeyConfig> keyconfigs();

	std::string clipboard() {
		STRING_TYPE_GETTER("clipboard", resstr)
	}

	void clipboard(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "clipboard", value)
	}

	void fileselect_add(Operator operator_value) {
		PYTHON_FUNCTION_ARGS_CALL("fileselect_add", "O", operator_value.get_pyobjref())
	}

	bool modal_handler_add(Operator operator_value) {
		PYTHON_FUNCTION_ARGS_CALL("modal_handler_add", "O", operator_value.get_pyobjref())
		CREATE_SINGLE_PYOBJ(handle)
		PRIMITIVE_TYPES_CONV(handle, bool, PyLong_AsLong(handle_obj)==1)
		NONCLASS_TYPES_RETURN(handle_res)
	}

	Timer event_timer_add(float time_step, Window window) {
		PYTHON_FUNCTION_ARGS_CALL("event_timer_add", "fO", time_step, window.get_pyobjref())
		CLASS_TYPES_RETURN(Timer)
	}

	void event_timer_remove(Timer timer) {
		PYTHON_FUNCTION_ARGS_CALL("event_timer_remove", "O", timer.get_pyobjref())
	}

	void progress_begin(float min, float max) {
		PYTHON_FUNCTION_ARGS_CALL("progress_begin", "ff", min, max)
	}

	void progress_update(float value) {
		PYTHON_FUNCTION_ARGS_CALL("progress_update", "f", value)
	}

	void progress_end() {
		PYTHON_FUNCTION_CALL("progress_end")
	}

	enum items_enum {
		items_RUNNING_MODAL = 1,	
		items_CANCELLED = 2,	
		items_FINISHED = 4,	
		items_PASS_THROUGH = 8,	
		items_INTERFACE = 32	
	};

	std::map<std::string, int> create_string_to_items() {
		return {{"RUNNING_MODAL", items_RUNNING_MODAL}, {"CANCELLED", items_CANCELLED}, {"FINISHED", items_FINISHED}, {"PASS_THROUGH", items_PASS_THROUGH}, {"INTERFACE", items_INTERFACE}};
	};

	std::map<int, std::string> create_items_to_string() {
		return {{items_RUNNING_MODAL, "RUNNING_MODAL"}, {items_CANCELLED, "CANCELLED"}, {items_FINISHED, "FINISHED"}, {items_PASS_THROUGH, "PASS_THROUGH"}, {items_INTERFACE, "INTERFACE"}};
	};

	const std::map<std::string, int> string_to_items = create_string_to_items();
	const std::map<int, std::string> items_to_string = create_items_to_string();

	items_enum invoke_props_popup(Operator operator_value, Event event) {
		PYTHON_FUNCTION_ARGS_CALL("invoke_props_popup", "OO", operator_value.get_pyobjref(), event.get_pyobjref())
		CREATE_SINGLE_PYOBJ(result)
		ENUM_TYPES_CONV(result, items)
		NONCLASS_TYPES_RETURN(result_res)
	}

	items_enum invoke_props_dialog(Operator operator_value, int width = 300, int height = 20) {
		PYTHON_FUNCTION_ARGS_CALL("invoke_props_dialog", "Oii", operator_value.get_pyobjref(), width, height)
		CREATE_SINGLE_PYOBJ(result)
		ENUM_TYPES_CONV(result, items)
		NONCLASS_TYPES_RETURN(result_res)
	}

	void invoke_search_popup(Operator operator_value) {
		PYTHON_FUNCTION_ARGS_CALL("invoke_search_popup", "O", operator_value.get_pyobjref())
	}

	items_enum invoke_popup(Operator operator_value, int width = 300, int height = 20) {
		PYTHON_FUNCTION_ARGS_CALL("invoke_popup", "Oii", operator_value.get_pyobjref(), width, height)
		CREATE_SINGLE_PYOBJ(result)
		ENUM_TYPES_CONV(result, items)
		NONCLASS_TYPES_RETURN(result_res)
	}

	items_enum invoke_confirm(Operator operator_value, Event event) {
		PYTHON_FUNCTION_ARGS_CALL("invoke_confirm", "OO", operator_value.get_pyobjref(), event.get_pyobjref())
		CREATE_SINGLE_PYOBJ(result)
		ENUM_TYPES_CONV(result, items)
		NONCLASS_TYPES_RETURN(result_res)
	}

	enum icon_items_enum {
		icon_items_NONE = 0,	
		icon_items_QUESTION = 1,	
		icon_items_ERROR = 2,	
		icon_items_CANCEL = 3,	
		icon_items_TRIA_RIGHT = 4,	
		icon_items_TRIA_DOWN = 5,	
		icon_items_TRIA_LEFT = 6,	
		icon_items_TRIA_UP = 7,	
		icon_items_ARROW_LEFTRIGHT = 8,	
		icon_items_PLUS = 9,	
		icon_items_DISCLOSURE_TRI_DOWN = 10,	
		icon_items_DISCLOSURE_TRI_RIGHT = 11,	
		icon_items_RADIOBUT_OFF = 12,	
		icon_items_RADIOBUT_ON = 13,	
		icon_items_MENU_PANEL = 14,	
		icon_items_BLENDER = 15,	
		icon_items_GRIP = 16,	
		icon_items_DOT = 17,	
		icon_items_COLLAPSEMENU = 18,	
		icon_items_X = 19,	
		icon_items_GO_LEFT = 21,	
		icon_items_PLUG = 22,	
		icon_items_UI = 23,	
		icon_items_NODE = 24,	
		icon_items_NODE_SEL = 25,	
		icon_items_FULLSCREEN = 26,	
		icon_items_SPLITSCREEN = 27,	
		icon_items_RIGHTARROW_THIN = 28,	
		icon_items_BORDERMOVE = 29,	
		icon_items_VIEWZOOM = 30,	
		icon_items_ZOOMIN = 31,	
		icon_items_ZOOMOUT = 32,	
		icon_items_PANEL_CLOSE = 33,	
		icon_items_COPY_ID = 34,	
		icon_items_EYEDROPPER = 35,	
		icon_items_LINK_AREA = 36,	
		icon_items_AUTO = 37,	
		icon_items_CHECKBOX_DEHLT = 38,	
		icon_items_CHECKBOX_HLT = 39,	
		icon_items_UNLOCKED = 40,	
		icon_items_LOCKED = 41,	
		icon_items_UNPINNED = 42,	
		icon_items_PINNED = 43,	
		icon_items_SCREEN_BACK = 44,	
		icon_items_RIGHTARROW = 45,	
		icon_items_DOWNARROW_HLT = 46,	
		icon_items_DOTSUP = 47,	
		icon_items_DOTSDOWN = 48,	
		icon_items_LINK = 49,	
		icon_items_INLINK = 50,	
		icon_items_PLUGIN = 51,	
		icon_items_HELP = 52,	
		icon_items_GHOST_ENABLED = 53,	
		icon_items_COLOR = 54,	
		icon_items_LINKED = 55,	
		icon_items_UNLINKED = 56,	
		icon_items_HAND = 57,	
		icon_items_ZOOM_ALL = 58,	
		icon_items_ZOOM_SELECTED = 59,	
		icon_items_ZOOM_PREVIOUS = 60,	
		icon_items_ZOOM_IN = 61,	
		icon_items_ZOOM_OUT = 62,	
		icon_items_RENDER_REGION = 63,	
		icon_items_BORDER_RECT = 64,	
		icon_items_BORDER_LASSO = 65,	
		icon_items_FREEZE = 66,	
		icon_items_STYLUS_PRESSURE = 67,	
		icon_items_GHOST_DISABLED = 68,	
		icon_items_NEW = 69,	
		icon_items_FILE_TICK = 70,	
		icon_items_QUIT = 71,	
		icon_items_URL = 72,	
		icon_items_RECOVER_LAST = 73,	
		icon_items_FULLSCREEN_ENTER = 75,	
		icon_items_FULLSCREEN_EXIT = 76,	
		icon_items_BLANK1 = 77,	
		icon_items_LAMP = 78,	
		icon_items_MATERIAL = 79,	
		icon_items_TEXTURE = 80,	
		icon_items_ANIM = 81,	
		icon_items_WORLD = 82,	
		icon_items_SCENE = 83,	
		icon_items_EDIT = 84,	
		icon_items_GAME = 85,	
		icon_items_RADIO = 86,	
		icon_items_SCRIPT = 87,	
		icon_items_PARTICLES = 88,	
		icon_items_PHYSICS = 89,	
		icon_items_SPEAKER = 90,	
		icon_items_TEXTURE_SHADED = 91,	
		icon_items_VIEW3D = 104,	
		icon_items_IPO = 105,	
		icon_items_OOPS = 106,	
		icon_items_BUTS = 107,	
		icon_items_FILESEL = 108,	
		icon_items_IMAGE_COL = 109,	
		icon_items_INFO = 110,	
		icon_items_SEQUENCE = 111,	
		icon_items_TEXT = 112,	
		icon_items_IMASEL = 113,	
		icon_items_SOUND = 114,	
		icon_items_ACTION = 115,	
		icon_items_NLA = 116,	
		icon_items_SCRIPTWIN = 117,	
		icon_items_TIME = 118,	
		icon_items_NODETREE = 119,	
		icon_items_LOGIC = 120,	
		icon_items_CONSOLE = 121,	
		icon_items_PREFERENCES = 122,	
		icon_items_CLIP = 123,	
		icon_items_ASSET_MANAGER = 124,	
		icon_items_OBJECT_DATAMODE = 130,	
		icon_items_EDITMODE_HLT = 131,	
		icon_items_FACESEL_HLT = 132,	
		icon_items_VPAINT_HLT = 133,	
		icon_items_TPAINT_HLT = 134,	
		icon_items_WPAINT_HLT = 135,	
		icon_items_SCULPTMODE_HLT = 136,	
		icon_items_POSE_HLT = 137,	
		icon_items_PARTICLEMODE = 138,	
		icon_items_LIGHTPAINT = 139,	
		icon_items_SCENE_DATA = 156,	
		icon_items_RENDERLAYERS = 157,	
		icon_items_WORLD_DATA = 158,	
		icon_items_OBJECT_DATA = 159,	
		icon_items_MESH_DATA = 160,	
		icon_items_CURVE_DATA = 161,	
		icon_items_META_DATA = 162,	
		icon_items_LATTICE_DATA = 163,	
		icon_items_LAMP_DATA = 164,	
		icon_items_MATERIAL_DATA = 165,	
		icon_items_TEXTURE_DATA = 166,	
		icon_items_ANIM_DATA = 167,	
		icon_items_CAMERA_DATA = 168,	
		icon_items_PARTICLE_DATA = 169,	
		icon_items_LIBRARY_DATA_DIRECT = 170,	
		icon_items_GROUP = 171,	
		icon_items_ARMATURE_DATA = 172,	
		icon_items_POSE_DATA = 173,	
		icon_items_BONE_DATA = 174,	
		icon_items_CONSTRAINT = 175,	
		icon_items_SHAPEKEY_DATA = 176,	
		icon_items_CONSTRAINT_BONE = 177,	
		icon_items_CAMERA_STEREO = 178,	
		icon_items_PACKAGE = 179,	
		icon_items_UGLYPACKAGE = 180,	
		icon_items_BRUSH_DATA = 182,	
		icon_items_IMAGE_DATA = 183,	
		icon_items_FILE = 184,	
		icon_items_FCURVE = 185,	
		icon_items_FONT_DATA = 186,	
		icon_items_RENDER_RESULT = 187,	
		icon_items_SURFACE_DATA = 188,	
		icon_items_EMPTY_DATA = 189,	
		icon_items_SETTINGS = 190,	
		icon_items_RENDER_ANIMATION = 191,	
		icon_items_RENDER_STILL = 192,	
		icon_items_LIBRARY_DATA_BROKEN = 193,	
		icon_items_BOIDS = 194,	
		icon_items_STRANDS = 195,	
		icon_items_LIBRARY_DATA_INDIRECT = 196,	
		icon_items_GREASEPENCIL = 197,	
		icon_items_LINE_DATA = 198,	
		icon_items_GROUP_BONE = 200,	
		icon_items_GROUP_VERTEX = 201,	
		icon_items_GROUP_VCOL = 202,	
		icon_items_GROUP_UVS = 203,	
		icon_items_RNA = 206,	
		icon_items_RNA_ADD = 207,	
		icon_items_OUTLINER_OB_EMPTY = 234,	
		icon_items_OUTLINER_OB_MESH = 235,	
		icon_items_OUTLINER_OB_CURVE = 236,	
		icon_items_OUTLINER_OB_LATTICE = 237,	
		icon_items_OUTLINER_OB_META = 238,	
		icon_items_OUTLINER_OB_LAMP = 239,	
		icon_items_OUTLINER_OB_CAMERA = 240,	
		icon_items_OUTLINER_OB_ARMATURE = 241,	
		icon_items_OUTLINER_OB_FONT = 242,	
		icon_items_OUTLINER_OB_SURFACE = 243,	
		icon_items_OUTLINER_OB_SPEAKER = 244,	
		icon_items_RESTRICT_VIEW_OFF = 253,	
		icon_items_RESTRICT_VIEW_ON = 254,	
		icon_items_RESTRICT_SELECT_OFF = 255,	
		icon_items_RESTRICT_SELECT_ON = 256,	
		icon_items_RESTRICT_RENDER_OFF = 257,	
		icon_items_RESTRICT_RENDER_ON = 258,	
		icon_items_OUTLINER_DATA_EMPTY = 260,	
		icon_items_OUTLINER_DATA_MESH = 261,	
		icon_items_OUTLINER_DATA_CURVE = 262,	
		icon_items_OUTLINER_DATA_LATTICE = 263,	
		icon_items_OUTLINER_DATA_META = 264,	
		icon_items_OUTLINER_DATA_LAMP = 265,	
		icon_items_OUTLINER_DATA_CAMERA = 266,	
		icon_items_OUTLINER_DATA_ARMATURE = 267,	
		icon_items_OUTLINER_DATA_FONT = 268,	
		icon_items_OUTLINER_DATA_SURFACE = 269,	
		icon_items_OUTLINER_DATA_SPEAKER = 270,	
		icon_items_OUTLINER_DATA_POSE = 271,	
		icon_items_MESH_PLANE = 286,	
		icon_items_MESH_CUBE = 287,	
		icon_items_MESH_CIRCLE = 288,	
		icon_items_MESH_UVSPHERE = 289,	
		icon_items_MESH_ICOSPHERE = 290,	
		icon_items_MESH_GRID = 291,	
		icon_items_MESH_MONKEY = 292,	
		icon_items_MESH_CYLINDER = 293,	
		icon_items_MESH_TORUS = 294,	
		icon_items_MESH_CONE = 295,	
		icon_items_LAMP_POINT = 298,	
		icon_items_LAMP_SUN = 299,	
		icon_items_LAMP_SPOT = 300,	
		icon_items_LAMP_HEMI = 301,	
		icon_items_LAMP_AREA = 302,	
		icon_items_META_EMPTY = 305,	
		icon_items_META_PLANE = 306,	
		icon_items_META_CUBE = 307,	
		icon_items_META_BALL = 308,	
		icon_items_META_ELLIPSOID = 309,	
		icon_items_META_CAPSULE = 310,	
		icon_items_SURFACE_NCURVE = 312,	
		icon_items_SURFACE_NCIRCLE = 313,	
		icon_items_SURFACE_NSURFACE = 314,	
		icon_items_SURFACE_NCYLINDER = 315,	
		icon_items_SURFACE_NSPHERE = 316,	
		icon_items_SURFACE_NTORUS = 317,	
		icon_items_CURVE_BEZCURVE = 321,	
		icon_items_CURVE_BEZCIRCLE = 322,	
		icon_items_CURVE_NCURVE = 323,	
		icon_items_CURVE_NCIRCLE = 324,	
		icon_items_CURVE_PATH = 325,	
		icon_items_COLOR_RED = 331,	
		icon_items_COLOR_GREEN = 332,	
		icon_items_COLOR_BLUE = 333,	
		icon_items_TRIA_RIGHT_BAR = 334,	
		icon_items_TRIA_DOWN_BAR = 335,	
		icon_items_TRIA_LEFT_BAR = 336,	
		icon_items_TRIA_UP_BAR = 337,	
		icon_items_FORCE_FORCE = 338,	
		icon_items_FORCE_WIND = 339,	
		icon_items_FORCE_VORTEX = 340,	
		icon_items_FORCE_MAGNETIC = 341,	
		icon_items_FORCE_HARMONIC = 342,	
		icon_items_FORCE_CHARGE = 343,	
		icon_items_FORCE_LENNARDJONES = 344,	
		icon_items_FORCE_TEXTURE = 345,	
		icon_items_FORCE_CURVE = 346,	
		icon_items_FORCE_BOID = 347,	
		icon_items_FORCE_TURBULENCE = 348,	
		icon_items_FORCE_DRAG = 349,	
		icon_items_FORCE_SMOKEFLOW = 350,	
		icon_items_MODIFIER = 442,	
		icon_items_MOD_WAVE = 443,	
		icon_items_MOD_BUILD = 444,	
		icon_items_MOD_DECIM = 445,	
		icon_items_MOD_MIRROR = 446,	
		icon_items_MOD_SOFT = 447,	
		icon_items_MOD_SUBSURF = 448,	
		icon_items_HOOK = 449,	
		icon_items_MOD_PHYSICS = 450,	
		icon_items_MOD_PARTICLES = 451,	
		icon_items_MOD_BOOLEAN = 452,	
		icon_items_MOD_EDGESPLIT = 453,	
		icon_items_MOD_ARRAY = 454,	
		icon_items_MOD_UVPROJECT = 455,	
		icon_items_MOD_DISPLACE = 456,	
		icon_items_MOD_CURVE = 457,	
		icon_items_MOD_LATTICE = 458,	
		icon_items_CONSTRAINT_DATA = 459,	
		icon_items_MOD_ARMATURE = 460,	
		icon_items_MOD_SHRINKWRAP = 461,	
		icon_items_MOD_CAST = 462,	
		icon_items_MOD_MESHDEFORM = 463,	
		icon_items_MOD_BEVEL = 464,	
		icon_items_MOD_SMOOTH = 465,	
		icon_items_MOD_SIMPLEDEFORM = 466,	
		icon_items_MOD_MASK = 467,	
		icon_items_MOD_CLOTH = 468,	
		icon_items_MOD_EXPLODE = 469,	
		icon_items_MOD_FLUIDSIM = 470,	
		icon_items_MOD_MULTIRES = 471,	
		icon_items_MOD_SMOKE = 472,	
		icon_items_MOD_SOLIDIFY = 473,	
		icon_items_MOD_SCREW = 474,	
		icon_items_MOD_VERTEX_WEIGHT = 475,	
		icon_items_MOD_DYNAMICPAINT = 476,	
		icon_items_MOD_REMESH = 477,	
		icon_items_MOD_OCEAN = 478,	
		icon_items_MOD_WARP = 479,	
		icon_items_MOD_SKIN = 480,	
		icon_items_MOD_TRIANGULATE = 481,	
		icon_items_MOD_WIREFRAME = 482,	
		icon_items_MOD_DATA_TRANSFER = 483,	
		icon_items_MOD_NORMALEDIT = 484,	
		icon_items_REC = 494,	
		icon_items_PLAY = 495,	
		icon_items_FF = 496,	
		icon_items_REW = 497,	
		icon_items_PAUSE = 498,	
		icon_items_PREV_KEYFRAME = 499,	
		icon_items_NEXT_KEYFRAME = 500,	
		icon_items_PLAY_AUDIO = 501,	
		icon_items_PLAY_REVERSE = 502,	
		icon_items_PREVIEW_RANGE = 503,	
		icon_items_ACTION_TWEAK = 504,	
		icon_items_PMARKER_ACT = 505,	
		icon_items_PMARKER_SEL = 506,	
		icon_items_PMARKER = 507,	
		icon_items_MARKER_HLT = 508,	
		icon_items_MARKER = 509,	
		icon_items_SPACE2 = 510,	
		icon_items_SPACE3 = 511,	
		icon_items_KEYINGSET = 512,	
		icon_items_KEY_DEHLT = 513,	
		icon_items_KEY_HLT = 514,	
		icon_items_MUTE_IPO_OFF = 515,	
		icon_items_MUTE_IPO_ON = 516,	
		icon_items_VISIBLE_IPO_OFF = 517,	
		icon_items_VISIBLE_IPO_ON = 518,	
		icon_items_DRIVER = 519,	
		icon_items_SOLO_OFF = 520,	
		icon_items_SOLO_ON = 521,	
		icon_items_FRAME_PREV = 522,	
		icon_items_FRAME_NEXT = 523,	
		icon_items_NLA_PUSHDOWN = 524,	
		icon_items_IPO_CONSTANT = 525,	
		icon_items_IPO_LINEAR = 526,	
		icon_items_IPO_BEZIER = 527,	
		icon_items_IPO_SINE = 528,	
		icon_items_IPO_QUAD = 529,	
		icon_items_IPO_CUBIC = 530,	
		icon_items_IPO_QUART = 531,	
		icon_items_IPO_QUINT = 532,	
		icon_items_IPO_EXPO = 533,	
		icon_items_IPO_CIRC = 534,	
		icon_items_IPO_BOUNCE = 535,	
		icon_items_IPO_ELASTIC = 536,	
		icon_items_IPO_BACK = 537,	
		icon_items_IPO_EASE_IN = 538,	
		icon_items_IPO_EASE_OUT = 539,	
		icon_items_IPO_EASE_IN_OUT = 540,	
		icon_items_VERTEXSEL = 546,	
		icon_items_EDGESEL = 547,	
		icon_items_FACESEL = 548,	
		icon_items_LOOPSEL = 549,	
		icon_items_ROTATE = 551,	
		icon_items_CURSOR = 552,	
		icon_items_ROTATECOLLECTION = 553,	
		icon_items_ROTATECENTER = 554,	
		icon_items_ROTACTIVE = 555,	
		icon_items_ALIGN = 556,	
		icon_items_SMOOTHCURVE = 558,	
		icon_items_SPHERECURVE = 559,	
		icon_items_ROOTCURVE = 560,	
		icon_items_SHARPCURVE = 561,	
		icon_items_LINCURVE = 562,	
		icon_items_NOCURVE = 563,	
		icon_items_RNDCURVE = 564,	
		icon_items_PROP_OFF = 565,	
		icon_items_PROP_ON = 566,	
		icon_items_PROP_CON = 567,	
		icon_items_SCULPT_DYNTOPO = 568,	
		icon_items_PARTICLE_POINT = 569,	
		icon_items_PARTICLE_TIP = 570,	
		icon_items_PARTICLE_PATH = 571,	
		icon_items_MAN_TRANS = 572,	
		icon_items_MAN_ROT = 573,	
		icon_items_MAN_SCALE = 574,	
		icon_items_MANIPUL = 575,	
		icon_items_SNAP_OFF = 576,	
		icon_items_SNAP_ON = 577,	
		icon_items_SNAP_NORMAL = 578,	
		icon_items_SNAP_INCREMENT = 579,	
		icon_items_SNAP_VERTEX = 580,	
		icon_items_SNAP_EDGE = 581,	
		icon_items_SNAP_FACE = 582,	
		icon_items_SNAP_VOLUME = 583,	
		icon_items_STICKY_UVS_LOC = 585,	
		icon_items_STICKY_UVS_DISABLE = 586,	
		icon_items_STICKY_UVS_VERT = 587,	
		icon_items_CLIPUV_DEHLT = 588,	
		icon_items_CLIPUV_HLT = 589,	
		icon_items_SNAP_PEEL_OBJECT = 590,	
		icon_items_GRID = 591,	
		icon_items_PASTEDOWN = 598,	
		icon_items_COPYDOWN = 599,	
		icon_items_PASTEFLIPUP = 600,	
		icon_items_PASTEFLIPDOWN = 601,	
		icon_items_SNAP_SURFACE = 606,	
		icon_items_AUTOMERGE_ON = 607,	
		icon_items_AUTOMERGE_OFF = 608,	
		icon_items_RETOPO = 609,	
		icon_items_UV_VERTEXSEL = 610,	
		icon_items_UV_EDGESEL = 611,	
		icon_items_UV_FACESEL = 612,	
		icon_items_UV_ISLANDSEL = 613,	
		icon_items_UV_SYNC_SELECT = 614,	
		icon_items_BBOX = 624,	
		icon_items_WIRE = 625,	
		icon_items_SOLID = 626,	
		icon_items_SMOOTH = 627,	
		icon_items_POTATO = 628,	
		icon_items_ORTHO = 630,	
		icon_items_LOCKVIEW_OFF = 633,	
		icon_items_LOCKVIEW_ON = 634,	
		icon_items_AXIS_SIDE = 636,	
		icon_items_AXIS_FRONT = 637,	
		icon_items_AXIS_TOP = 638,	
		icon_items_NDOF_DOM = 639,	
		icon_items_NDOF_TURN = 640,	
		icon_items_NDOF_FLY = 641,	
		icon_items_NDOF_TRANS = 642,	
		icon_items_LAYER_USED = 643,	
		icon_items_LAYER_ACTIVE = 644,	
		icon_items_SORTALPHA = 676,	
		icon_items_SORTBYEXT = 677,	
		icon_items_SORTTIME = 678,	
		icon_items_SORTSIZE = 679,	
		icon_items_LONGDISPLAY = 680,	
		icon_items_SHORTDISPLAY = 681,	
		icon_items_GHOST = 682,	
		icon_items_IMGDISPLAY = 683,	
		icon_items_SAVE_AS = 684,	
		icon_items_SAVE_COPY = 685,	
		icon_items_BOOKMARKS = 686,	
		icon_items_FONTPREVIEW = 687,	
		icon_items_FILTER = 688,	
		icon_items_NEWFOLDER = 689,	
		icon_items_OPEN_RECENT = 690,	
		icon_items_FILE_PARENT = 691,	
		icon_items_FILE_REFRESH = 692,	
		icon_items_FILE_FOLDER = 693,	
		icon_items_FILE_BLANK = 694,	
		icon_items_FILE_BLEND = 695,	
		icon_items_FILE_IMAGE = 696,	
		icon_items_FILE_MOVIE = 697,	
		icon_items_FILE_SCRIPT = 698,	
		icon_items_FILE_SOUND = 699,	
		icon_items_FILE_FONT = 700,	
		icon_items_FILE_TEXT = 701,	
		icon_items_RECOVER_AUTO = 702,	
		icon_items_SAVE_PREFS = 703,	
		icon_items_LINK_BLEND = 704,	
		icon_items_APPEND_BLEND = 705,	
		icon_items_IMPORT = 706,	
		icon_items_EXPORT = 707,	
		icon_items_EXTERNAL_DATA = 708,	
		icon_items_LOAD_FACTORY = 709,	
		icon_items_LOOP_BACK = 715,	
		icon_items_LOOP_FORWARDS = 716,	
		icon_items_BACK = 717,	
		icon_items_FORWARD = 718,	
		icon_items_FILE_HIDDEN = 725,	
		icon_items_FILE_BACKUP = 726,	
		icon_items_DISK_DRIVE = 727,	
		icon_items_MATPLANE = 728,	
		icon_items_MATSPHERE = 729,	
		icon_items_MATCUBE = 730,	
		icon_items_MONKEY = 731,	
		icon_items_HAIR = 732,	
		icon_items_ALIASED = 733,	
		icon_items_ANTIALIASED = 734,	
		icon_items_MAT_SPHERE_SKY = 735,	
		icon_items_WORDWRAP_OFF = 740,	
		icon_items_WORDWRAP_ON = 741,	
		icon_items_SYNTAX_OFF = 742,	
		icon_items_SYNTAX_ON = 743,	
		icon_items_LINENUMBERS_OFF = 744,	
		icon_items_LINENUMBERS_ON = 745,	
		icon_items_SCRIPTPLUGINS = 746,	
		icon_items_SEQ_SEQUENCER = 754,	
		icon_items_SEQ_PREVIEW = 755,	
		icon_items_SEQ_LUMA_WAVEFORM = 756,	
		icon_items_SEQ_CHROMA_SCOPE = 757,	
		icon_items_SEQ_HISTOGRAM = 758,	
		icon_items_SEQ_SPLITVIEW = 759,	
		icon_items_IMAGE_RGB = 763,	
		icon_items_IMAGE_RGB_ALPHA = 764,	
		icon_items_IMAGE_ALPHA = 765,	
		icon_items_IMAGE_ZDEPTH = 766,	
		icon_items_IMAGEFILE = 767,	
		icon_items_BRUSH_ADD = 780,	
		icon_items_BRUSH_BLOB = 781,	
		icon_items_BRUSH_BLUR = 782,	
		icon_items_BRUSH_CLAY = 783,	
		icon_items_BRUSH_CLAY_STRIPS = 784,	
		icon_items_BRUSH_CLONE = 785,	
		icon_items_BRUSH_CREASE = 786,	
		icon_items_BRUSH_DARKEN = 787,	
		icon_items_BRUSH_FILL = 788,	
		icon_items_BRUSH_FLATTEN = 789,	
		icon_items_BRUSH_GRAB = 790,	
		icon_items_BRUSH_INFLATE = 791,	
		icon_items_BRUSH_LAYER = 792,	
		icon_items_BRUSH_LIGHTEN = 793,	
		icon_items_BRUSH_MASK = 794,	
		icon_items_BRUSH_MIX = 795,	
		icon_items_BRUSH_MULTIPLY = 796,	
		icon_items_BRUSH_NUDGE = 797,	
		icon_items_BRUSH_PINCH = 798,	
		icon_items_BRUSH_SCRAPE = 799,	
		icon_items_BRUSH_SCULPT_DRAW = 800,	
		icon_items_BRUSH_SMEAR = 801,	
		icon_items_BRUSH_SMOOTH = 802,	
		icon_items_BRUSH_SNAKE_HOOK = 803,	
		icon_items_BRUSH_SOFTEN = 804,	
		icon_items_BRUSH_SUBTRACT = 805,	
		icon_items_BRUSH_TEXDRAW = 806,	
		icon_items_BRUSH_TEXFILL = 807,	
		icon_items_BRUSH_TEXMASK = 808,	
		icon_items_BRUSH_THUMB = 809,	
		icon_items_BRUSH_ROTATE = 810,	
		icon_items_BRUSH_VERTEXDRAW = 811,	
		icon_items_MATCAP_01 = 812,	
		icon_items_MATCAP_02 = 813,	
		icon_items_MATCAP_03 = 814,	
		icon_items_MATCAP_04 = 815,	
		icon_items_MATCAP_05 = 816,	
		icon_items_MATCAP_06 = 817,	
		icon_items_MATCAP_07 = 818,	
		icon_items_MATCAP_08 = 819,	
		icon_items_MATCAP_09 = 820,	
		icon_items_MATCAP_10 = 821,	
		icon_items_MATCAP_11 = 822,	
		icon_items_MATCAP_12 = 823,	
		icon_items_MATCAP_13 = 824,	
		icon_items_MATCAP_14 = 825,	
		icon_items_MATCAP_15 = 826,	
		icon_items_MATCAP_16 = 827,	
		icon_items_MATCAP_17 = 828,	
		icon_items_MATCAP_18 = 829,	
		icon_items_MATCAP_19 = 830,	
		icon_items_MATCAP_20 = 831,	
		icon_items_MATCAP_21 = 832,	
		icon_items_MATCAP_22 = 833,	
		icon_items_MATCAP_23 = 834,	
		icon_items_MATCAP_24 = 835,	
		icon_items_VIEW3D_VEC = 836,	
		icon_items_EDIT_VEC = 837,	
		icon_items_EDITMODE_VEC_DEHLT = 838,	
		icon_items_EDITMODE_VEC_HLT = 839,	
		icon_items_DISCLOSURE_TRI_RIGHT_VEC = 840,	
		icon_items_DISCLOSURE_TRI_DOWN_VEC = 841,	
		icon_items_MOVE_UP_VEC = 842,	
		icon_items_MOVE_DOWN_VEC = 843,	
		icon_items_X_VEC = 844,	
		icon_items_SMALL_TRI_RIGHT_VEC = 845	
	};

	std::map<std::string, int> create_string_to_icon_items() {
		return {{"NONE", icon_items_NONE}, {"QUESTION", icon_items_QUESTION}, {"ERROR", icon_items_ERROR}, {"CANCEL", icon_items_CANCEL}, {"TRIA_RIGHT", icon_items_TRIA_RIGHT}, {"TRIA_DOWN", icon_items_TRIA_DOWN}, {"TRIA_LEFT", icon_items_TRIA_LEFT}, {"TRIA_UP", icon_items_TRIA_UP}, {"ARROW_LEFTRIGHT", icon_items_ARROW_LEFTRIGHT}, {"PLUS", icon_items_PLUS}, {"DISCLOSURE_TRI_DOWN", icon_items_DISCLOSURE_TRI_DOWN}, {"DISCLOSURE_TRI_RIGHT", icon_items_DISCLOSURE_TRI_RIGHT}, {"RADIOBUT_OFF", icon_items_RADIOBUT_OFF}, {"RADIOBUT_ON", icon_items_RADIOBUT_ON}, {"MENU_PANEL", icon_items_MENU_PANEL}, {"BLENDER", icon_items_BLENDER}, {"GRIP", icon_items_GRIP}, {"DOT", icon_items_DOT}, {"COLLAPSEMENU", icon_items_COLLAPSEMENU}, {"X", icon_items_X}, {"GO_LEFT", icon_items_GO_LEFT}, {"PLUG", icon_items_PLUG}, {"UI", icon_items_UI}, {"NODE", icon_items_NODE}, {"NODE_SEL", icon_items_NODE_SEL}, {"FULLSCREEN", icon_items_FULLSCREEN}, {"SPLITSCREEN", icon_items_SPLITSCREEN}, {"RIGHTARROW_THIN", icon_items_RIGHTARROW_THIN}, {"BORDERMOVE", icon_items_BORDERMOVE}, {"VIEWZOOM", icon_items_VIEWZOOM}, {"ZOOMIN", icon_items_ZOOMIN}, {"ZOOMOUT", icon_items_ZOOMOUT}, {"PANEL_CLOSE", icon_items_PANEL_CLOSE}, {"COPY_ID", icon_items_COPY_ID}, {"EYEDROPPER", icon_items_EYEDROPPER}, {"LINK_AREA", icon_items_LINK_AREA}, {"AUTO", icon_items_AUTO}, {"CHECKBOX_DEHLT", icon_items_CHECKBOX_DEHLT}, {"CHECKBOX_HLT", icon_items_CHECKBOX_HLT}, {"UNLOCKED", icon_items_UNLOCKED}, {"LOCKED", icon_items_LOCKED}, {"UNPINNED", icon_items_UNPINNED}, {"PINNED", icon_items_PINNED}, {"SCREEN_BACK", icon_items_SCREEN_BACK}, {"RIGHTARROW", icon_items_RIGHTARROW}, {"DOWNARROW_HLT", icon_items_DOWNARROW_HLT}, {"DOTSUP", icon_items_DOTSUP}, {"DOTSDOWN", icon_items_DOTSDOWN}, {"LINK", icon_items_LINK}, {"INLINK", icon_items_INLINK}, {"PLUGIN", icon_items_PLUGIN}, {"HELP", icon_items_HELP}, {"GHOST_ENABLED", icon_items_GHOST_ENABLED}, {"COLOR", icon_items_COLOR}, {"LINKED", icon_items_LINKED}, {"UNLINKED", icon_items_UNLINKED}, {"HAND", icon_items_HAND}, {"ZOOM_ALL", icon_items_ZOOM_ALL}, {"ZOOM_SELECTED", icon_items_ZOOM_SELECTED}, {"ZOOM_PREVIOUS", icon_items_ZOOM_PREVIOUS}, {"ZOOM_IN", icon_items_ZOOM_IN}, {"ZOOM_OUT", icon_items_ZOOM_OUT}, {"RENDER_REGION", icon_items_RENDER_REGION}, {"BORDER_RECT", icon_items_BORDER_RECT}, {"BORDER_LASSO", icon_items_BORDER_LASSO}, {"FREEZE", icon_items_FREEZE}, {"STYLUS_PRESSURE", icon_items_STYLUS_PRESSURE}, {"GHOST_DISABLED", icon_items_GHOST_DISABLED}, {"NEW", icon_items_NEW}, {"FILE_TICK", icon_items_FILE_TICK}, {"QUIT", icon_items_QUIT}, {"URL", icon_items_URL}, {"RECOVER_LAST", icon_items_RECOVER_LAST}, {"FULLSCREEN_ENTER", icon_items_FULLSCREEN_ENTER}, {"FULLSCREEN_EXIT", icon_items_FULLSCREEN_EXIT}, {"BLANK1", icon_items_BLANK1}, {"LAMP", icon_items_LAMP}, {"MATERIAL", icon_items_MATERIAL}, {"TEXTURE", icon_items_TEXTURE}, {"ANIM", icon_items_ANIM}, {"WORLD", icon_items_WORLD}, {"SCENE", icon_items_SCENE}, {"EDIT", icon_items_EDIT}, {"GAME", icon_items_GAME}, {"RADIO", icon_items_RADIO}, {"SCRIPT", icon_items_SCRIPT}, {"PARTICLES", icon_items_PARTICLES}, {"PHYSICS", icon_items_PHYSICS}, {"SPEAKER", icon_items_SPEAKER}, {"TEXTURE_SHADED", icon_items_TEXTURE_SHADED}, {"VIEW3D", icon_items_VIEW3D}, {"IPO", icon_items_IPO}, {"OOPS", icon_items_OOPS}, {"BUTS", icon_items_BUTS}, {"FILESEL", icon_items_FILESEL}, {"IMAGE_COL", icon_items_IMAGE_COL}, {"INFO", icon_items_INFO}, {"SEQUENCE", icon_items_SEQUENCE}, {"TEXT", icon_items_TEXT}, {"IMASEL", icon_items_IMASEL}, {"SOUND", icon_items_SOUND}, {"ACTION", icon_items_ACTION}, {"NLA", icon_items_NLA}, {"SCRIPTWIN", icon_items_SCRIPTWIN}, {"TIME", icon_items_TIME}, {"NODETREE", icon_items_NODETREE}, {"LOGIC", icon_items_LOGIC}, {"CONSOLE", icon_items_CONSOLE}, {"PREFERENCES", icon_items_PREFERENCES}, {"CLIP", icon_items_CLIP}, {"ASSET_MANAGER", icon_items_ASSET_MANAGER}, {"OBJECT_DATAMODE", icon_items_OBJECT_DATAMODE}, {"EDITMODE_HLT", icon_items_EDITMODE_HLT}, {"FACESEL_HLT", icon_items_FACESEL_HLT}, {"VPAINT_HLT", icon_items_VPAINT_HLT}, {"TPAINT_HLT", icon_items_TPAINT_HLT}, {"WPAINT_HLT", icon_items_WPAINT_HLT}, {"SCULPTMODE_HLT", icon_items_SCULPTMODE_HLT}, {"POSE_HLT", icon_items_POSE_HLT}, {"PARTICLEMODE", icon_items_PARTICLEMODE}, {"LIGHTPAINT", icon_items_LIGHTPAINT}, {"SCENE_DATA", icon_items_SCENE_DATA}, {"RENDERLAYERS", icon_items_RENDERLAYERS}, {"WORLD_DATA", icon_items_WORLD_DATA}, {"OBJECT_DATA", icon_items_OBJECT_DATA}, {"MESH_DATA", icon_items_MESH_DATA}, {"CURVE_DATA", icon_items_CURVE_DATA}, {"META_DATA", icon_items_META_DATA}, {"LATTICE_DATA", icon_items_LATTICE_DATA}, {"LAMP_DATA", icon_items_LAMP_DATA}, {"MATERIAL_DATA", icon_items_MATERIAL_DATA}, {"TEXTURE_DATA", icon_items_TEXTURE_DATA}, {"ANIM_DATA", icon_items_ANIM_DATA}, {"CAMERA_DATA", icon_items_CAMERA_DATA}, {"PARTICLE_DATA", icon_items_PARTICLE_DATA}, {"LIBRARY_DATA_DIRECT", icon_items_LIBRARY_DATA_DIRECT}, {"GROUP", icon_items_GROUP}, {"ARMATURE_DATA", icon_items_ARMATURE_DATA}, {"POSE_DATA", icon_items_POSE_DATA}, {"BONE_DATA", icon_items_BONE_DATA}, {"CONSTRAINT", icon_items_CONSTRAINT}, {"SHAPEKEY_DATA", icon_items_SHAPEKEY_DATA}, {"CONSTRAINT_BONE", icon_items_CONSTRAINT_BONE}, {"CAMERA_STEREO", icon_items_CAMERA_STEREO}, {"PACKAGE", icon_items_PACKAGE}, {"UGLYPACKAGE", icon_items_UGLYPACKAGE}, {"BRUSH_DATA", icon_items_BRUSH_DATA}, {"IMAGE_DATA", icon_items_IMAGE_DATA}, {"FILE", icon_items_FILE}, {"FCURVE", icon_items_FCURVE}, {"FONT_DATA", icon_items_FONT_DATA}, {"RENDER_RESULT", icon_items_RENDER_RESULT}, {"SURFACE_DATA", icon_items_SURFACE_DATA}, {"EMPTY_DATA", icon_items_EMPTY_DATA}, {"SETTINGS", icon_items_SETTINGS}, {"RENDER_ANIMATION", icon_items_RENDER_ANIMATION}, {"RENDER_STILL", icon_items_RENDER_STILL}, {"LIBRARY_DATA_BROKEN", icon_items_LIBRARY_DATA_BROKEN}, {"BOIDS", icon_items_BOIDS}, {"STRANDS", icon_items_STRANDS}, {"LIBRARY_DATA_INDIRECT", icon_items_LIBRARY_DATA_INDIRECT}, {"GREASEPENCIL", icon_items_GREASEPENCIL}, {"LINE_DATA", icon_items_LINE_DATA}, {"GROUP_BONE", icon_items_GROUP_BONE}, {"GROUP_VERTEX", icon_items_GROUP_VERTEX}, {"GROUP_VCOL", icon_items_GROUP_VCOL}, {"GROUP_UVS", icon_items_GROUP_UVS}, {"RNA", icon_items_RNA}, {"RNA_ADD", icon_items_RNA_ADD}, {"OUTLINER_OB_EMPTY", icon_items_OUTLINER_OB_EMPTY}, {"OUTLINER_OB_MESH", icon_items_OUTLINER_OB_MESH}, {"OUTLINER_OB_CURVE", icon_items_OUTLINER_OB_CURVE}, {"OUTLINER_OB_LATTICE", icon_items_OUTLINER_OB_LATTICE}, {"OUTLINER_OB_META", icon_items_OUTLINER_OB_META}, {"OUTLINER_OB_LAMP", icon_items_OUTLINER_OB_LAMP}, {"OUTLINER_OB_CAMERA", icon_items_OUTLINER_OB_CAMERA}, {"OUTLINER_OB_ARMATURE", icon_items_OUTLINER_OB_ARMATURE}, {"OUTLINER_OB_FONT", icon_items_OUTLINER_OB_FONT}, {"OUTLINER_OB_SURFACE", icon_items_OUTLINER_OB_SURFACE}, {"OUTLINER_OB_SPEAKER", icon_items_OUTLINER_OB_SPEAKER}, {"RESTRICT_VIEW_OFF", icon_items_RESTRICT_VIEW_OFF}, {"RESTRICT_VIEW_ON", icon_items_RESTRICT_VIEW_ON}, {"RESTRICT_SELECT_OFF", icon_items_RESTRICT_SELECT_OFF}, {"RESTRICT_SELECT_ON", icon_items_RESTRICT_SELECT_ON}, {"RESTRICT_RENDER_OFF", icon_items_RESTRICT_RENDER_OFF}, {"RESTRICT_RENDER_ON", icon_items_RESTRICT_RENDER_ON}, {"OUTLINER_DATA_EMPTY", icon_items_OUTLINER_DATA_EMPTY}, {"OUTLINER_DATA_MESH", icon_items_OUTLINER_DATA_MESH}, {"OUTLINER_DATA_CURVE", icon_items_OUTLINER_DATA_CURVE}, {"OUTLINER_DATA_LATTICE", icon_items_OUTLINER_DATA_LATTICE}, {"OUTLINER_DATA_META", icon_items_OUTLINER_DATA_META}, {"OUTLINER_DATA_LAMP", icon_items_OUTLINER_DATA_LAMP}, {"OUTLINER_DATA_CAMERA", icon_items_OUTLINER_DATA_CAMERA}, {"OUTLINER_DATA_ARMATURE", icon_items_OUTLINER_DATA_ARMATURE}, {"OUTLINER_DATA_FONT", icon_items_OUTLINER_DATA_FONT}, {"OUTLINER_DATA_SURFACE", icon_items_OUTLINER_DATA_SURFACE}, {"OUTLINER_DATA_SPEAKER", icon_items_OUTLINER_DATA_SPEAKER}, {"OUTLINER_DATA_POSE", icon_items_OUTLINER_DATA_POSE}, {"MESH_PLANE", icon_items_MESH_PLANE}, {"MESH_CUBE", icon_items_MESH_CUBE}, {"MESH_CIRCLE", icon_items_MESH_CIRCLE}, {"MESH_UVSPHERE", icon_items_MESH_UVSPHERE}, {"MESH_ICOSPHERE", icon_items_MESH_ICOSPHERE}, {"MESH_GRID", icon_items_MESH_GRID}, {"MESH_MONKEY", icon_items_MESH_MONKEY}, {"MESH_CYLINDER", icon_items_MESH_CYLINDER}, {"MESH_TORUS", icon_items_MESH_TORUS}, {"MESH_CONE", icon_items_MESH_CONE}, {"LAMP_POINT", icon_items_LAMP_POINT}, {"LAMP_SUN", icon_items_LAMP_SUN}, {"LAMP_SPOT", icon_items_LAMP_SPOT}, {"LAMP_HEMI", icon_items_LAMP_HEMI}, {"LAMP_AREA", icon_items_LAMP_AREA}, {"META_EMPTY", icon_items_META_EMPTY}, {"META_PLANE", icon_items_META_PLANE}, {"META_CUBE", icon_items_META_CUBE}, {"META_BALL", icon_items_META_BALL}, {"META_ELLIPSOID", icon_items_META_ELLIPSOID}, {"META_CAPSULE", icon_items_META_CAPSULE}, {"SURFACE_NCURVE", icon_items_SURFACE_NCURVE}, {"SURFACE_NCIRCLE", icon_items_SURFACE_NCIRCLE}, {"SURFACE_NSURFACE", icon_items_SURFACE_NSURFACE}, {"SURFACE_NCYLINDER", icon_items_SURFACE_NCYLINDER}, {"SURFACE_NSPHERE", icon_items_SURFACE_NSPHERE}, {"SURFACE_NTORUS", icon_items_SURFACE_NTORUS}, {"CURVE_BEZCURVE", icon_items_CURVE_BEZCURVE}, {"CURVE_BEZCIRCLE", icon_items_CURVE_BEZCIRCLE}, {"CURVE_NCURVE", icon_items_CURVE_NCURVE}, {"CURVE_NCIRCLE", icon_items_CURVE_NCIRCLE}, {"CURVE_PATH", icon_items_CURVE_PATH}, {"COLOR_RED", icon_items_COLOR_RED}, {"COLOR_GREEN", icon_items_COLOR_GREEN}, {"COLOR_BLUE", icon_items_COLOR_BLUE}, {"TRIA_RIGHT_BAR", icon_items_TRIA_RIGHT_BAR}, {"TRIA_DOWN_BAR", icon_items_TRIA_DOWN_BAR}, {"TRIA_LEFT_BAR", icon_items_TRIA_LEFT_BAR}, {"TRIA_UP_BAR", icon_items_TRIA_UP_BAR}, {"FORCE_FORCE", icon_items_FORCE_FORCE}, {"FORCE_WIND", icon_items_FORCE_WIND}, {"FORCE_VORTEX", icon_items_FORCE_VORTEX}, {"FORCE_MAGNETIC", icon_items_FORCE_MAGNETIC}, {"FORCE_HARMONIC", icon_items_FORCE_HARMONIC}, {"FORCE_CHARGE", icon_items_FORCE_CHARGE}, {"FORCE_LENNARDJONES", icon_items_FORCE_LENNARDJONES}, {"FORCE_TEXTURE", icon_items_FORCE_TEXTURE}, {"FORCE_CURVE", icon_items_FORCE_CURVE}, {"FORCE_BOID", icon_items_FORCE_BOID}, {"FORCE_TURBULENCE", icon_items_FORCE_TURBULENCE}, {"FORCE_DRAG", icon_items_FORCE_DRAG}, {"FORCE_SMOKEFLOW", icon_items_FORCE_SMOKEFLOW}, {"MODIFIER", icon_items_MODIFIER}, {"MOD_WAVE", icon_items_MOD_WAVE}, {"MOD_BUILD", icon_items_MOD_BUILD}, {"MOD_DECIM", icon_items_MOD_DECIM}, {"MOD_MIRROR", icon_items_MOD_MIRROR}, {"MOD_SOFT", icon_items_MOD_SOFT}, {"MOD_SUBSURF", icon_items_MOD_SUBSURF}, {"HOOK", icon_items_HOOK}, {"MOD_PHYSICS", icon_items_MOD_PHYSICS}, {"MOD_PARTICLES", icon_items_MOD_PARTICLES}, {"MOD_BOOLEAN", icon_items_MOD_BOOLEAN}, {"MOD_EDGESPLIT", icon_items_MOD_EDGESPLIT}, {"MOD_ARRAY", icon_items_MOD_ARRAY}, {"MOD_UVPROJECT", icon_items_MOD_UVPROJECT}, {"MOD_DISPLACE", icon_items_MOD_DISPLACE}, {"MOD_CURVE", icon_items_MOD_CURVE}, {"MOD_LATTICE", icon_items_MOD_LATTICE}, {"CONSTRAINT_DATA", icon_items_CONSTRAINT_DATA}, {"MOD_ARMATURE", icon_items_MOD_ARMATURE}, {"MOD_SHRINKWRAP", icon_items_MOD_SHRINKWRAP}, {"MOD_CAST", icon_items_MOD_CAST}, {"MOD_MESHDEFORM", icon_items_MOD_MESHDEFORM}, {"MOD_BEVEL", icon_items_MOD_BEVEL}, {"MOD_SMOOTH", icon_items_MOD_SMOOTH}, {"MOD_SIMPLEDEFORM", icon_items_MOD_SIMPLEDEFORM}, {"MOD_MASK", icon_items_MOD_MASK}, {"MOD_CLOTH", icon_items_MOD_CLOTH}, {"MOD_EXPLODE", icon_items_MOD_EXPLODE}, {"MOD_FLUIDSIM", icon_items_MOD_FLUIDSIM}, {"MOD_MULTIRES", icon_items_MOD_MULTIRES}, {"MOD_SMOKE", icon_items_MOD_SMOKE}, {"MOD_SOLIDIFY", icon_items_MOD_SOLIDIFY}, {"MOD_SCREW", icon_items_MOD_SCREW}, {"MOD_VERTEX_WEIGHT", icon_items_MOD_VERTEX_WEIGHT}, {"MOD_DYNAMICPAINT", icon_items_MOD_DYNAMICPAINT}, {"MOD_REMESH", icon_items_MOD_REMESH}, {"MOD_OCEAN", icon_items_MOD_OCEAN}, {"MOD_WARP", icon_items_MOD_WARP}, {"MOD_SKIN", icon_items_MOD_SKIN}, {"MOD_TRIANGULATE", icon_items_MOD_TRIANGULATE}, {"MOD_WIREFRAME", icon_items_MOD_WIREFRAME}, {"MOD_DATA_TRANSFER", icon_items_MOD_DATA_TRANSFER}, {"MOD_NORMALEDIT", icon_items_MOD_NORMALEDIT}, {"REC", icon_items_REC}, {"PLAY", icon_items_PLAY}, {"FF", icon_items_FF}, {"REW", icon_items_REW}, {"PAUSE", icon_items_PAUSE}, {"PREV_KEYFRAME", icon_items_PREV_KEYFRAME}, {"NEXT_KEYFRAME", icon_items_NEXT_KEYFRAME}, {"PLAY_AUDIO", icon_items_PLAY_AUDIO}, {"PLAY_REVERSE", icon_items_PLAY_REVERSE}, {"PREVIEW_RANGE", icon_items_PREVIEW_RANGE}, {"ACTION_TWEAK", icon_items_ACTION_TWEAK}, {"PMARKER_ACT", icon_items_PMARKER_ACT}, {"PMARKER_SEL", icon_items_PMARKER_SEL}, {"PMARKER", icon_items_PMARKER}, {"MARKER_HLT", icon_items_MARKER_HLT}, {"MARKER", icon_items_MARKER}, {"SPACE2", icon_items_SPACE2}, {"SPACE3", icon_items_SPACE3}, {"KEYINGSET", icon_items_KEYINGSET}, {"KEY_DEHLT", icon_items_KEY_DEHLT}, {"KEY_HLT", icon_items_KEY_HLT}, {"MUTE_IPO_OFF", icon_items_MUTE_IPO_OFF}, {"MUTE_IPO_ON", icon_items_MUTE_IPO_ON}, {"VISIBLE_IPO_OFF", icon_items_VISIBLE_IPO_OFF}, {"VISIBLE_IPO_ON", icon_items_VISIBLE_IPO_ON}, {"DRIVER", icon_items_DRIVER}, {"SOLO_OFF", icon_items_SOLO_OFF}, {"SOLO_ON", icon_items_SOLO_ON}, {"FRAME_PREV", icon_items_FRAME_PREV}, {"FRAME_NEXT", icon_items_FRAME_NEXT}, {"NLA_PUSHDOWN", icon_items_NLA_PUSHDOWN}, {"IPO_CONSTANT", icon_items_IPO_CONSTANT}, {"IPO_LINEAR", icon_items_IPO_LINEAR}, {"IPO_BEZIER", icon_items_IPO_BEZIER}, {"IPO_SINE", icon_items_IPO_SINE}, {"IPO_QUAD", icon_items_IPO_QUAD}, {"IPO_CUBIC", icon_items_IPO_CUBIC}, {"IPO_QUART", icon_items_IPO_QUART}, {"IPO_QUINT", icon_items_IPO_QUINT}, {"IPO_EXPO", icon_items_IPO_EXPO}, {"IPO_CIRC", icon_items_IPO_CIRC}, {"IPO_BOUNCE", icon_items_IPO_BOUNCE}, {"IPO_ELASTIC", icon_items_IPO_ELASTIC}, {"IPO_BACK", icon_items_IPO_BACK}, {"IPO_EASE_IN", icon_items_IPO_EASE_IN}, {"IPO_EASE_OUT", icon_items_IPO_EASE_OUT}, {"IPO_EASE_IN_OUT", icon_items_IPO_EASE_IN_OUT}, {"VERTEXSEL", icon_items_VERTEXSEL}, {"EDGESEL", icon_items_EDGESEL}, {"FACESEL", icon_items_FACESEL}, {"LOOPSEL", icon_items_LOOPSEL}, {"ROTATE", icon_items_ROTATE}, {"CURSOR", icon_items_CURSOR}, {"ROTATECOLLECTION", icon_items_ROTATECOLLECTION}, {"ROTATECENTER", icon_items_ROTATECENTER}, {"ROTACTIVE", icon_items_ROTACTIVE}, {"ALIGN", icon_items_ALIGN}, {"SMOOTHCURVE", icon_items_SMOOTHCURVE}, {"SPHERECURVE", icon_items_SPHERECURVE}, {"ROOTCURVE", icon_items_ROOTCURVE}, {"SHARPCURVE", icon_items_SHARPCURVE}, {"LINCURVE", icon_items_LINCURVE}, {"NOCURVE", icon_items_NOCURVE}, {"RNDCURVE", icon_items_RNDCURVE}, {"PROP_OFF", icon_items_PROP_OFF}, {"PROP_ON", icon_items_PROP_ON}, {"PROP_CON", icon_items_PROP_CON}, {"SCULPT_DYNTOPO", icon_items_SCULPT_DYNTOPO}, {"PARTICLE_POINT", icon_items_PARTICLE_POINT}, {"PARTICLE_TIP", icon_items_PARTICLE_TIP}, {"PARTICLE_PATH", icon_items_PARTICLE_PATH}, {"MAN_TRANS", icon_items_MAN_TRANS}, {"MAN_ROT", icon_items_MAN_ROT}, {"MAN_SCALE", icon_items_MAN_SCALE}, {"MANIPUL", icon_items_MANIPUL}, {"SNAP_OFF", icon_items_SNAP_OFF}, {"SNAP_ON", icon_items_SNAP_ON}, {"SNAP_NORMAL", icon_items_SNAP_NORMAL}, {"SNAP_INCREMENT", icon_items_SNAP_INCREMENT}, {"SNAP_VERTEX", icon_items_SNAP_VERTEX}, {"SNAP_EDGE", icon_items_SNAP_EDGE}, {"SNAP_FACE", icon_items_SNAP_FACE}, {"SNAP_VOLUME", icon_items_SNAP_VOLUME}, {"STICKY_UVS_LOC", icon_items_STICKY_UVS_LOC}, {"STICKY_UVS_DISABLE", icon_items_STICKY_UVS_DISABLE}, {"STICKY_UVS_VERT", icon_items_STICKY_UVS_VERT}, {"CLIPUV_DEHLT", icon_items_CLIPUV_DEHLT}, {"CLIPUV_HLT", icon_items_CLIPUV_HLT}, {"SNAP_PEEL_OBJECT", icon_items_SNAP_PEEL_OBJECT}, {"GRID", icon_items_GRID}, {"PASTEDOWN", icon_items_PASTEDOWN}, {"COPYDOWN", icon_items_COPYDOWN}, {"PASTEFLIPUP", icon_items_PASTEFLIPUP}, {"PASTEFLIPDOWN", icon_items_PASTEFLIPDOWN}, {"SNAP_SURFACE", icon_items_SNAP_SURFACE}, {"AUTOMERGE_ON", icon_items_AUTOMERGE_ON}, {"AUTOMERGE_OFF", icon_items_AUTOMERGE_OFF}, {"RETOPO", icon_items_RETOPO}, {"UV_VERTEXSEL", icon_items_UV_VERTEXSEL}, {"UV_EDGESEL", icon_items_UV_EDGESEL}, {"UV_FACESEL", icon_items_UV_FACESEL}, {"UV_ISLANDSEL", icon_items_UV_ISLANDSEL}, {"UV_SYNC_SELECT", icon_items_UV_SYNC_SELECT}, {"BBOX", icon_items_BBOX}, {"WIRE", icon_items_WIRE}, {"SOLID", icon_items_SOLID}, {"SMOOTH", icon_items_SMOOTH}, {"POTATO", icon_items_POTATO}, {"ORTHO", icon_items_ORTHO}, {"LOCKVIEW_OFF", icon_items_LOCKVIEW_OFF}, {"LOCKVIEW_ON", icon_items_LOCKVIEW_ON}, {"AXIS_SIDE", icon_items_AXIS_SIDE}, {"AXIS_FRONT", icon_items_AXIS_FRONT}, {"AXIS_TOP", icon_items_AXIS_TOP}, {"NDOF_DOM", icon_items_NDOF_DOM}, {"NDOF_TURN", icon_items_NDOF_TURN}, {"NDOF_FLY", icon_items_NDOF_FLY}, {"NDOF_TRANS", icon_items_NDOF_TRANS}, {"LAYER_USED", icon_items_LAYER_USED}, {"LAYER_ACTIVE", icon_items_LAYER_ACTIVE}, {"SORTALPHA", icon_items_SORTALPHA}, {"SORTBYEXT", icon_items_SORTBYEXT}, {"SORTTIME", icon_items_SORTTIME}, {"SORTSIZE", icon_items_SORTSIZE}, {"LONGDISPLAY", icon_items_LONGDISPLAY}, {"SHORTDISPLAY", icon_items_SHORTDISPLAY}, {"GHOST", icon_items_GHOST}, {"IMGDISPLAY", icon_items_IMGDISPLAY}, {"SAVE_AS", icon_items_SAVE_AS}, {"SAVE_COPY", icon_items_SAVE_COPY}, {"BOOKMARKS", icon_items_BOOKMARKS}, {"FONTPREVIEW", icon_items_FONTPREVIEW}, {"FILTER", icon_items_FILTER}, {"NEWFOLDER", icon_items_NEWFOLDER}, {"OPEN_RECENT", icon_items_OPEN_RECENT}, {"FILE_PARENT", icon_items_FILE_PARENT}, {"FILE_REFRESH", icon_items_FILE_REFRESH}, {"FILE_FOLDER", icon_items_FILE_FOLDER}, {"FILE_BLANK", icon_items_FILE_BLANK}, {"FILE_BLEND", icon_items_FILE_BLEND}, {"FILE_IMAGE", icon_items_FILE_IMAGE}, {"FILE_MOVIE", icon_items_FILE_MOVIE}, {"FILE_SCRIPT", icon_items_FILE_SCRIPT}, {"FILE_SOUND", icon_items_FILE_SOUND}, {"FILE_FONT", icon_items_FILE_FONT}, {"FILE_TEXT", icon_items_FILE_TEXT}, {"RECOVER_AUTO", icon_items_RECOVER_AUTO}, {"SAVE_PREFS", icon_items_SAVE_PREFS}, {"LINK_BLEND", icon_items_LINK_BLEND}, {"APPEND_BLEND", icon_items_APPEND_BLEND}, {"IMPORT", icon_items_IMPORT}, {"EXPORT", icon_items_EXPORT}, {"EXTERNAL_DATA", icon_items_EXTERNAL_DATA}, {"LOAD_FACTORY", icon_items_LOAD_FACTORY}, {"LOOP_BACK", icon_items_LOOP_BACK}, {"LOOP_FORWARDS", icon_items_LOOP_FORWARDS}, {"BACK", icon_items_BACK}, {"FORWARD", icon_items_FORWARD}, {"FILE_HIDDEN", icon_items_FILE_HIDDEN}, {"FILE_BACKUP", icon_items_FILE_BACKUP}, {"DISK_DRIVE", icon_items_DISK_DRIVE}, {"MATPLANE", icon_items_MATPLANE}, {"MATSPHERE", icon_items_MATSPHERE}, {"MATCUBE", icon_items_MATCUBE}, {"MONKEY", icon_items_MONKEY}, {"HAIR", icon_items_HAIR}, {"ALIASED", icon_items_ALIASED}, {"ANTIALIASED", icon_items_ANTIALIASED}, {"MAT_SPHERE_SKY", icon_items_MAT_SPHERE_SKY}, {"WORDWRAP_OFF", icon_items_WORDWRAP_OFF}, {"WORDWRAP_ON", icon_items_WORDWRAP_ON}, {"SYNTAX_OFF", icon_items_SYNTAX_OFF}, {"SYNTAX_ON", icon_items_SYNTAX_ON}, {"LINENUMBERS_OFF", icon_items_LINENUMBERS_OFF}, {"LINENUMBERS_ON", icon_items_LINENUMBERS_ON}, {"SCRIPTPLUGINS", icon_items_SCRIPTPLUGINS}, {"SEQ_SEQUENCER", icon_items_SEQ_SEQUENCER}, {"SEQ_PREVIEW", icon_items_SEQ_PREVIEW}, {"SEQ_LUMA_WAVEFORM", icon_items_SEQ_LUMA_WAVEFORM}, {"SEQ_CHROMA_SCOPE", icon_items_SEQ_CHROMA_SCOPE}, {"SEQ_HISTOGRAM", icon_items_SEQ_HISTOGRAM}, {"SEQ_SPLITVIEW", icon_items_SEQ_SPLITVIEW}, {"IMAGE_RGB", icon_items_IMAGE_RGB}, {"IMAGE_RGB_ALPHA", icon_items_IMAGE_RGB_ALPHA}, {"IMAGE_ALPHA", icon_items_IMAGE_ALPHA}, {"IMAGE_ZDEPTH", icon_items_IMAGE_ZDEPTH}, {"IMAGEFILE", icon_items_IMAGEFILE}, {"BRUSH_ADD", icon_items_BRUSH_ADD}, {"BRUSH_BLOB", icon_items_BRUSH_BLOB}, {"BRUSH_BLUR", icon_items_BRUSH_BLUR}, {"BRUSH_CLAY", icon_items_BRUSH_CLAY}, {"BRUSH_CLAY_STRIPS", icon_items_BRUSH_CLAY_STRIPS}, {"BRUSH_CLONE", icon_items_BRUSH_CLONE}, {"BRUSH_CREASE", icon_items_BRUSH_CREASE}, {"BRUSH_DARKEN", icon_items_BRUSH_DARKEN}, {"BRUSH_FILL", icon_items_BRUSH_FILL}, {"BRUSH_FLATTEN", icon_items_BRUSH_FLATTEN}, {"BRUSH_GRAB", icon_items_BRUSH_GRAB}, {"BRUSH_INFLATE", icon_items_BRUSH_INFLATE}, {"BRUSH_LAYER", icon_items_BRUSH_LAYER}, {"BRUSH_LIGHTEN", icon_items_BRUSH_LIGHTEN}, {"BRUSH_MASK", icon_items_BRUSH_MASK}, {"BRUSH_MIX", icon_items_BRUSH_MIX}, {"BRUSH_MULTIPLY", icon_items_BRUSH_MULTIPLY}, {"BRUSH_NUDGE", icon_items_BRUSH_NUDGE}, {"BRUSH_PINCH", icon_items_BRUSH_PINCH}, {"BRUSH_SCRAPE", icon_items_BRUSH_SCRAPE}, {"BRUSH_SCULPT_DRAW", icon_items_BRUSH_SCULPT_DRAW}, {"BRUSH_SMEAR", icon_items_BRUSH_SMEAR}, {"BRUSH_SMOOTH", icon_items_BRUSH_SMOOTH}, {"BRUSH_SNAKE_HOOK", icon_items_BRUSH_SNAKE_HOOK}, {"BRUSH_SOFTEN", icon_items_BRUSH_SOFTEN}, {"BRUSH_SUBTRACT", icon_items_BRUSH_SUBTRACT}, {"BRUSH_TEXDRAW", icon_items_BRUSH_TEXDRAW}, {"BRUSH_TEXFILL", icon_items_BRUSH_TEXFILL}, {"BRUSH_TEXMASK", icon_items_BRUSH_TEXMASK}, {"BRUSH_THUMB", icon_items_BRUSH_THUMB}, {"BRUSH_ROTATE", icon_items_BRUSH_ROTATE}, {"BRUSH_VERTEXDRAW", icon_items_BRUSH_VERTEXDRAW}, {"MATCAP_01", icon_items_MATCAP_01}, {"MATCAP_02", icon_items_MATCAP_02}, {"MATCAP_03", icon_items_MATCAP_03}, {"MATCAP_04", icon_items_MATCAP_04}, {"MATCAP_05", icon_items_MATCAP_05}, {"MATCAP_06", icon_items_MATCAP_06}, {"MATCAP_07", icon_items_MATCAP_07}, {"MATCAP_08", icon_items_MATCAP_08}, {"MATCAP_09", icon_items_MATCAP_09}, {"MATCAP_10", icon_items_MATCAP_10}, {"MATCAP_11", icon_items_MATCAP_11}, {"MATCAP_12", icon_items_MATCAP_12}, {"MATCAP_13", icon_items_MATCAP_13}, {"MATCAP_14", icon_items_MATCAP_14}, {"MATCAP_15", icon_items_MATCAP_15}, {"MATCAP_16", icon_items_MATCAP_16}, {"MATCAP_17", icon_items_MATCAP_17}, {"MATCAP_18", icon_items_MATCAP_18}, {"MATCAP_19", icon_items_MATCAP_19}, {"MATCAP_20", icon_items_MATCAP_20}, {"MATCAP_21", icon_items_MATCAP_21}, {"MATCAP_22", icon_items_MATCAP_22}, {"MATCAP_23", icon_items_MATCAP_23}, {"MATCAP_24", icon_items_MATCAP_24}, {"VIEW3D_VEC", icon_items_VIEW3D_VEC}, {"EDIT_VEC", icon_items_EDIT_VEC}, {"EDITMODE_VEC_DEHLT", icon_items_EDITMODE_VEC_DEHLT}, {"EDITMODE_VEC_HLT", icon_items_EDITMODE_VEC_HLT}, {"DISCLOSURE_TRI_RIGHT_VEC", icon_items_DISCLOSURE_TRI_RIGHT_VEC}, {"DISCLOSURE_TRI_DOWN_VEC", icon_items_DISCLOSURE_TRI_DOWN_VEC}, {"MOVE_UP_VEC", icon_items_MOVE_UP_VEC}, {"MOVE_DOWN_VEC", icon_items_MOVE_DOWN_VEC}, {"X_VEC", icon_items_X_VEC}, {"SMALL_TRI_RIGHT_VEC", icon_items_SMALL_TRI_RIGHT_VEC}};
	};

	std::map<int, std::string> create_icon_items_to_string() {
		return {{icon_items_NONE, "NONE"}, {icon_items_QUESTION, "QUESTION"}, {icon_items_ERROR, "ERROR"}, {icon_items_CANCEL, "CANCEL"}, {icon_items_TRIA_RIGHT, "TRIA_RIGHT"}, {icon_items_TRIA_DOWN, "TRIA_DOWN"}, {icon_items_TRIA_LEFT, "TRIA_LEFT"}, {icon_items_TRIA_UP, "TRIA_UP"}, {icon_items_ARROW_LEFTRIGHT, "ARROW_LEFTRIGHT"}, {icon_items_PLUS, "PLUS"}, {icon_items_DISCLOSURE_TRI_DOWN, "DISCLOSURE_TRI_DOWN"}, {icon_items_DISCLOSURE_TRI_RIGHT, "DISCLOSURE_TRI_RIGHT"}, {icon_items_RADIOBUT_OFF, "RADIOBUT_OFF"}, {icon_items_RADIOBUT_ON, "RADIOBUT_ON"}, {icon_items_MENU_PANEL, "MENU_PANEL"}, {icon_items_BLENDER, "BLENDER"}, {icon_items_GRIP, "GRIP"}, {icon_items_DOT, "DOT"}, {icon_items_COLLAPSEMENU, "COLLAPSEMENU"}, {icon_items_X, "X"}, {icon_items_GO_LEFT, "GO_LEFT"}, {icon_items_PLUG, "PLUG"}, {icon_items_UI, "UI"}, {icon_items_NODE, "NODE"}, {icon_items_NODE_SEL, "NODE_SEL"}, {icon_items_FULLSCREEN, "FULLSCREEN"}, {icon_items_SPLITSCREEN, "SPLITSCREEN"}, {icon_items_RIGHTARROW_THIN, "RIGHTARROW_THIN"}, {icon_items_BORDERMOVE, "BORDERMOVE"}, {icon_items_VIEWZOOM, "VIEWZOOM"}, {icon_items_ZOOMIN, "ZOOMIN"}, {icon_items_ZOOMOUT, "ZOOMOUT"}, {icon_items_PANEL_CLOSE, "PANEL_CLOSE"}, {icon_items_COPY_ID, "COPY_ID"}, {icon_items_EYEDROPPER, "EYEDROPPER"}, {icon_items_LINK_AREA, "LINK_AREA"}, {icon_items_AUTO, "AUTO"}, {icon_items_CHECKBOX_DEHLT, "CHECKBOX_DEHLT"}, {icon_items_CHECKBOX_HLT, "CHECKBOX_HLT"}, {icon_items_UNLOCKED, "UNLOCKED"}, {icon_items_LOCKED, "LOCKED"}, {icon_items_UNPINNED, "UNPINNED"}, {icon_items_PINNED, "PINNED"}, {icon_items_SCREEN_BACK, "SCREEN_BACK"}, {icon_items_RIGHTARROW, "RIGHTARROW"}, {icon_items_DOWNARROW_HLT, "DOWNARROW_HLT"}, {icon_items_DOTSUP, "DOTSUP"}, {icon_items_DOTSDOWN, "DOTSDOWN"}, {icon_items_LINK, "LINK"}, {icon_items_INLINK, "INLINK"}, {icon_items_PLUGIN, "PLUGIN"}, {icon_items_HELP, "HELP"}, {icon_items_GHOST_ENABLED, "GHOST_ENABLED"}, {icon_items_COLOR, "COLOR"}, {icon_items_LINKED, "LINKED"}, {icon_items_UNLINKED, "UNLINKED"}, {icon_items_HAND, "HAND"}, {icon_items_ZOOM_ALL, "ZOOM_ALL"}, {icon_items_ZOOM_SELECTED, "ZOOM_SELECTED"}, {icon_items_ZOOM_PREVIOUS, "ZOOM_PREVIOUS"}, {icon_items_ZOOM_IN, "ZOOM_IN"}, {icon_items_ZOOM_OUT, "ZOOM_OUT"}, {icon_items_RENDER_REGION, "RENDER_REGION"}, {icon_items_BORDER_RECT, "BORDER_RECT"}, {icon_items_BORDER_LASSO, "BORDER_LASSO"}, {icon_items_FREEZE, "FREEZE"}, {icon_items_STYLUS_PRESSURE, "STYLUS_PRESSURE"}, {icon_items_GHOST_DISABLED, "GHOST_DISABLED"}, {icon_items_NEW, "NEW"}, {icon_items_FILE_TICK, "FILE_TICK"}, {icon_items_QUIT, "QUIT"}, {icon_items_URL, "URL"}, {icon_items_RECOVER_LAST, "RECOVER_LAST"}, {icon_items_FULLSCREEN_ENTER, "FULLSCREEN_ENTER"}, {icon_items_FULLSCREEN_EXIT, "FULLSCREEN_EXIT"}, {icon_items_BLANK1, "BLANK1"}, {icon_items_LAMP, "LAMP"}, {icon_items_MATERIAL, "MATERIAL"}, {icon_items_TEXTURE, "TEXTURE"}, {icon_items_ANIM, "ANIM"}, {icon_items_WORLD, "WORLD"}, {icon_items_SCENE, "SCENE"}, {icon_items_EDIT, "EDIT"}, {icon_items_GAME, "GAME"}, {icon_items_RADIO, "RADIO"}, {icon_items_SCRIPT, "SCRIPT"}, {icon_items_PARTICLES, "PARTICLES"}, {icon_items_PHYSICS, "PHYSICS"}, {icon_items_SPEAKER, "SPEAKER"}, {icon_items_TEXTURE_SHADED, "TEXTURE_SHADED"}, {icon_items_VIEW3D, "VIEW3D"}, {icon_items_IPO, "IPO"}, {icon_items_OOPS, "OOPS"}, {icon_items_BUTS, "BUTS"}, {icon_items_FILESEL, "FILESEL"}, {icon_items_IMAGE_COL, "IMAGE_COL"}, {icon_items_INFO, "INFO"}, {icon_items_SEQUENCE, "SEQUENCE"}, {icon_items_TEXT, "TEXT"}, {icon_items_IMASEL, "IMASEL"}, {icon_items_SOUND, "SOUND"}, {icon_items_ACTION, "ACTION"}, {icon_items_NLA, "NLA"}, {icon_items_SCRIPTWIN, "SCRIPTWIN"}, {icon_items_TIME, "TIME"}, {icon_items_NODETREE, "NODETREE"}, {icon_items_LOGIC, "LOGIC"}, {icon_items_CONSOLE, "CONSOLE"}, {icon_items_PREFERENCES, "PREFERENCES"}, {icon_items_CLIP, "CLIP"}, {icon_items_ASSET_MANAGER, "ASSET_MANAGER"}, {icon_items_OBJECT_DATAMODE, "OBJECT_DATAMODE"}, {icon_items_EDITMODE_HLT, "EDITMODE_HLT"}, {icon_items_FACESEL_HLT, "FACESEL_HLT"}, {icon_items_VPAINT_HLT, "VPAINT_HLT"}, {icon_items_TPAINT_HLT, "TPAINT_HLT"}, {icon_items_WPAINT_HLT, "WPAINT_HLT"}, {icon_items_SCULPTMODE_HLT, "SCULPTMODE_HLT"}, {icon_items_POSE_HLT, "POSE_HLT"}, {icon_items_PARTICLEMODE, "PARTICLEMODE"}, {icon_items_LIGHTPAINT, "LIGHTPAINT"}, {icon_items_SCENE_DATA, "SCENE_DATA"}, {icon_items_RENDERLAYERS, "RENDERLAYERS"}, {icon_items_WORLD_DATA, "WORLD_DATA"}, {icon_items_OBJECT_DATA, "OBJECT_DATA"}, {icon_items_MESH_DATA, "MESH_DATA"}, {icon_items_CURVE_DATA, "CURVE_DATA"}, {icon_items_META_DATA, "META_DATA"}, {icon_items_LATTICE_DATA, "LATTICE_DATA"}, {icon_items_LAMP_DATA, "LAMP_DATA"}, {icon_items_MATERIAL_DATA, "MATERIAL_DATA"}, {icon_items_TEXTURE_DATA, "TEXTURE_DATA"}, {icon_items_ANIM_DATA, "ANIM_DATA"}, {icon_items_CAMERA_DATA, "CAMERA_DATA"}, {icon_items_PARTICLE_DATA, "PARTICLE_DATA"}, {icon_items_LIBRARY_DATA_DIRECT, "LIBRARY_DATA_DIRECT"}, {icon_items_GROUP, "GROUP"}, {icon_items_ARMATURE_DATA, "ARMATURE_DATA"}, {icon_items_POSE_DATA, "POSE_DATA"}, {icon_items_BONE_DATA, "BONE_DATA"}, {icon_items_CONSTRAINT, "CONSTRAINT"}, {icon_items_SHAPEKEY_DATA, "SHAPEKEY_DATA"}, {icon_items_CONSTRAINT_BONE, "CONSTRAINT_BONE"}, {icon_items_CAMERA_STEREO, "CAMERA_STEREO"}, {icon_items_PACKAGE, "PACKAGE"}, {icon_items_UGLYPACKAGE, "UGLYPACKAGE"}, {icon_items_BRUSH_DATA, "BRUSH_DATA"}, {icon_items_IMAGE_DATA, "IMAGE_DATA"}, {icon_items_FILE, "FILE"}, {icon_items_FCURVE, "FCURVE"}, {icon_items_FONT_DATA, "FONT_DATA"}, {icon_items_RENDER_RESULT, "RENDER_RESULT"}, {icon_items_SURFACE_DATA, "SURFACE_DATA"}, {icon_items_EMPTY_DATA, "EMPTY_DATA"}, {icon_items_SETTINGS, "SETTINGS"}, {icon_items_RENDER_ANIMATION, "RENDER_ANIMATION"}, {icon_items_RENDER_STILL, "RENDER_STILL"}, {icon_items_LIBRARY_DATA_BROKEN, "LIBRARY_DATA_BROKEN"}, {icon_items_BOIDS, "BOIDS"}, {icon_items_STRANDS, "STRANDS"}, {icon_items_LIBRARY_DATA_INDIRECT, "LIBRARY_DATA_INDIRECT"}, {icon_items_GREASEPENCIL, "GREASEPENCIL"}, {icon_items_LINE_DATA, "LINE_DATA"}, {icon_items_GROUP_BONE, "GROUP_BONE"}, {icon_items_GROUP_VERTEX, "GROUP_VERTEX"}, {icon_items_GROUP_VCOL, "GROUP_VCOL"}, {icon_items_GROUP_UVS, "GROUP_UVS"}, {icon_items_RNA, "RNA"}, {icon_items_RNA_ADD, "RNA_ADD"}, {icon_items_OUTLINER_OB_EMPTY, "OUTLINER_OB_EMPTY"}, {icon_items_OUTLINER_OB_MESH, "OUTLINER_OB_MESH"}, {icon_items_OUTLINER_OB_CURVE, "OUTLINER_OB_CURVE"}, {icon_items_OUTLINER_OB_LATTICE, "OUTLINER_OB_LATTICE"}, {icon_items_OUTLINER_OB_META, "OUTLINER_OB_META"}, {icon_items_OUTLINER_OB_LAMP, "OUTLINER_OB_LAMP"}, {icon_items_OUTLINER_OB_CAMERA, "OUTLINER_OB_CAMERA"}, {icon_items_OUTLINER_OB_ARMATURE, "OUTLINER_OB_ARMATURE"}, {icon_items_OUTLINER_OB_FONT, "OUTLINER_OB_FONT"}, {icon_items_OUTLINER_OB_SURFACE, "OUTLINER_OB_SURFACE"}, {icon_items_OUTLINER_OB_SPEAKER, "OUTLINER_OB_SPEAKER"}, {icon_items_RESTRICT_VIEW_OFF, "RESTRICT_VIEW_OFF"}, {icon_items_RESTRICT_VIEW_ON, "RESTRICT_VIEW_ON"}, {icon_items_RESTRICT_SELECT_OFF, "RESTRICT_SELECT_OFF"}, {icon_items_RESTRICT_SELECT_ON, "RESTRICT_SELECT_ON"}, {icon_items_RESTRICT_RENDER_OFF, "RESTRICT_RENDER_OFF"}, {icon_items_RESTRICT_RENDER_ON, "RESTRICT_RENDER_ON"}, {icon_items_OUTLINER_DATA_EMPTY, "OUTLINER_DATA_EMPTY"}, {icon_items_OUTLINER_DATA_MESH, "OUTLINER_DATA_MESH"}, {icon_items_OUTLINER_DATA_CURVE, "OUTLINER_DATA_CURVE"}, {icon_items_OUTLINER_DATA_LATTICE, "OUTLINER_DATA_LATTICE"}, {icon_items_OUTLINER_DATA_META, "OUTLINER_DATA_META"}, {icon_items_OUTLINER_DATA_LAMP, "OUTLINER_DATA_LAMP"}, {icon_items_OUTLINER_DATA_CAMERA, "OUTLINER_DATA_CAMERA"}, {icon_items_OUTLINER_DATA_ARMATURE, "OUTLINER_DATA_ARMATURE"}, {icon_items_OUTLINER_DATA_FONT, "OUTLINER_DATA_FONT"}, {icon_items_OUTLINER_DATA_SURFACE, "OUTLINER_DATA_SURFACE"}, {icon_items_OUTLINER_DATA_SPEAKER, "OUTLINER_DATA_SPEAKER"}, {icon_items_OUTLINER_DATA_POSE, "OUTLINER_DATA_POSE"}, {icon_items_MESH_PLANE, "MESH_PLANE"}, {icon_items_MESH_CUBE, "MESH_CUBE"}, {icon_items_MESH_CIRCLE, "MESH_CIRCLE"}, {icon_items_MESH_UVSPHERE, "MESH_UVSPHERE"}, {icon_items_MESH_ICOSPHERE, "MESH_ICOSPHERE"}, {icon_items_MESH_GRID, "MESH_GRID"}, {icon_items_MESH_MONKEY, "MESH_MONKEY"}, {icon_items_MESH_CYLINDER, "MESH_CYLINDER"}, {icon_items_MESH_TORUS, "MESH_TORUS"}, {icon_items_MESH_CONE, "MESH_CONE"}, {icon_items_LAMP_POINT, "LAMP_POINT"}, {icon_items_LAMP_SUN, "LAMP_SUN"}, {icon_items_LAMP_SPOT, "LAMP_SPOT"}, {icon_items_LAMP_HEMI, "LAMP_HEMI"}, {icon_items_LAMP_AREA, "LAMP_AREA"}, {icon_items_META_EMPTY, "META_EMPTY"}, {icon_items_META_PLANE, "META_PLANE"}, {icon_items_META_CUBE, "META_CUBE"}, {icon_items_META_BALL, "META_BALL"}, {icon_items_META_ELLIPSOID, "META_ELLIPSOID"}, {icon_items_META_CAPSULE, "META_CAPSULE"}, {icon_items_SURFACE_NCURVE, "SURFACE_NCURVE"}, {icon_items_SURFACE_NCIRCLE, "SURFACE_NCIRCLE"}, {icon_items_SURFACE_NSURFACE, "SURFACE_NSURFACE"}, {icon_items_SURFACE_NCYLINDER, "SURFACE_NCYLINDER"}, {icon_items_SURFACE_NSPHERE, "SURFACE_NSPHERE"}, {icon_items_SURFACE_NTORUS, "SURFACE_NTORUS"}, {icon_items_CURVE_BEZCURVE, "CURVE_BEZCURVE"}, {icon_items_CURVE_BEZCIRCLE, "CURVE_BEZCIRCLE"}, {icon_items_CURVE_NCURVE, "CURVE_NCURVE"}, {icon_items_CURVE_NCIRCLE, "CURVE_NCIRCLE"}, {icon_items_CURVE_PATH, "CURVE_PATH"}, {icon_items_COLOR_RED, "COLOR_RED"}, {icon_items_COLOR_GREEN, "COLOR_GREEN"}, {icon_items_COLOR_BLUE, "COLOR_BLUE"}, {icon_items_TRIA_RIGHT_BAR, "TRIA_RIGHT_BAR"}, {icon_items_TRIA_DOWN_BAR, "TRIA_DOWN_BAR"}, {icon_items_TRIA_LEFT_BAR, "TRIA_LEFT_BAR"}, {icon_items_TRIA_UP_BAR, "TRIA_UP_BAR"}, {icon_items_FORCE_FORCE, "FORCE_FORCE"}, {icon_items_FORCE_WIND, "FORCE_WIND"}, {icon_items_FORCE_VORTEX, "FORCE_VORTEX"}, {icon_items_FORCE_MAGNETIC, "FORCE_MAGNETIC"}, {icon_items_FORCE_HARMONIC, "FORCE_HARMONIC"}, {icon_items_FORCE_CHARGE, "FORCE_CHARGE"}, {icon_items_FORCE_LENNARDJONES, "FORCE_LENNARDJONES"}, {icon_items_FORCE_TEXTURE, "FORCE_TEXTURE"}, {icon_items_FORCE_CURVE, "FORCE_CURVE"}, {icon_items_FORCE_BOID, "FORCE_BOID"}, {icon_items_FORCE_TURBULENCE, "FORCE_TURBULENCE"}, {icon_items_FORCE_DRAG, "FORCE_DRAG"}, {icon_items_FORCE_SMOKEFLOW, "FORCE_SMOKEFLOW"}, {icon_items_MODIFIER, "MODIFIER"}, {icon_items_MOD_WAVE, "MOD_WAVE"}, {icon_items_MOD_BUILD, "MOD_BUILD"}, {icon_items_MOD_DECIM, "MOD_DECIM"}, {icon_items_MOD_MIRROR, "MOD_MIRROR"}, {icon_items_MOD_SOFT, "MOD_SOFT"}, {icon_items_MOD_SUBSURF, "MOD_SUBSURF"}, {icon_items_HOOK, "HOOK"}, {icon_items_MOD_PHYSICS, "MOD_PHYSICS"}, {icon_items_MOD_PARTICLES, "MOD_PARTICLES"}, {icon_items_MOD_BOOLEAN, "MOD_BOOLEAN"}, {icon_items_MOD_EDGESPLIT, "MOD_EDGESPLIT"}, {icon_items_MOD_ARRAY, "MOD_ARRAY"}, {icon_items_MOD_UVPROJECT, "MOD_UVPROJECT"}, {icon_items_MOD_DISPLACE, "MOD_DISPLACE"}, {icon_items_MOD_CURVE, "MOD_CURVE"}, {icon_items_MOD_LATTICE, "MOD_LATTICE"}, {icon_items_CONSTRAINT_DATA, "CONSTRAINT_DATA"}, {icon_items_MOD_ARMATURE, "MOD_ARMATURE"}, {icon_items_MOD_SHRINKWRAP, "MOD_SHRINKWRAP"}, {icon_items_MOD_CAST, "MOD_CAST"}, {icon_items_MOD_MESHDEFORM, "MOD_MESHDEFORM"}, {icon_items_MOD_BEVEL, "MOD_BEVEL"}, {icon_items_MOD_SMOOTH, "MOD_SMOOTH"}, {icon_items_MOD_SIMPLEDEFORM, "MOD_SIMPLEDEFORM"}, {icon_items_MOD_MASK, "MOD_MASK"}, {icon_items_MOD_CLOTH, "MOD_CLOTH"}, {icon_items_MOD_EXPLODE, "MOD_EXPLODE"}, {icon_items_MOD_FLUIDSIM, "MOD_FLUIDSIM"}, {icon_items_MOD_MULTIRES, "MOD_MULTIRES"}, {icon_items_MOD_SMOKE, "MOD_SMOKE"}, {icon_items_MOD_SOLIDIFY, "MOD_SOLIDIFY"}, {icon_items_MOD_SCREW, "MOD_SCREW"}, {icon_items_MOD_VERTEX_WEIGHT, "MOD_VERTEX_WEIGHT"}, {icon_items_MOD_DYNAMICPAINT, "MOD_DYNAMICPAINT"}, {icon_items_MOD_REMESH, "MOD_REMESH"}, {icon_items_MOD_OCEAN, "MOD_OCEAN"}, {icon_items_MOD_WARP, "MOD_WARP"}, {icon_items_MOD_SKIN, "MOD_SKIN"}, {icon_items_MOD_TRIANGULATE, "MOD_TRIANGULATE"}, {icon_items_MOD_WIREFRAME, "MOD_WIREFRAME"}, {icon_items_MOD_DATA_TRANSFER, "MOD_DATA_TRANSFER"}, {icon_items_MOD_NORMALEDIT, "MOD_NORMALEDIT"}, {icon_items_REC, "REC"}, {icon_items_PLAY, "PLAY"}, {icon_items_FF, "FF"}, {icon_items_REW, "REW"}, {icon_items_PAUSE, "PAUSE"}, {icon_items_PREV_KEYFRAME, "PREV_KEYFRAME"}, {icon_items_NEXT_KEYFRAME, "NEXT_KEYFRAME"}, {icon_items_PLAY_AUDIO, "PLAY_AUDIO"}, {icon_items_PLAY_REVERSE, "PLAY_REVERSE"}, {icon_items_PREVIEW_RANGE, "PREVIEW_RANGE"}, {icon_items_ACTION_TWEAK, "ACTION_TWEAK"}, {icon_items_PMARKER_ACT, "PMARKER_ACT"}, {icon_items_PMARKER_SEL, "PMARKER_SEL"}, {icon_items_PMARKER, "PMARKER"}, {icon_items_MARKER_HLT, "MARKER_HLT"}, {icon_items_MARKER, "MARKER"}, {icon_items_SPACE2, "SPACE2"}, {icon_items_SPACE3, "SPACE3"}, {icon_items_KEYINGSET, "KEYINGSET"}, {icon_items_KEY_DEHLT, "KEY_DEHLT"}, {icon_items_KEY_HLT, "KEY_HLT"}, {icon_items_MUTE_IPO_OFF, "MUTE_IPO_OFF"}, {icon_items_MUTE_IPO_ON, "MUTE_IPO_ON"}, {icon_items_VISIBLE_IPO_OFF, "VISIBLE_IPO_OFF"}, {icon_items_VISIBLE_IPO_ON, "VISIBLE_IPO_ON"}, {icon_items_DRIVER, "DRIVER"}, {icon_items_SOLO_OFF, "SOLO_OFF"}, {icon_items_SOLO_ON, "SOLO_ON"}, {icon_items_FRAME_PREV, "FRAME_PREV"}, {icon_items_FRAME_NEXT, "FRAME_NEXT"}, {icon_items_NLA_PUSHDOWN, "NLA_PUSHDOWN"}, {icon_items_IPO_CONSTANT, "IPO_CONSTANT"}, {icon_items_IPO_LINEAR, "IPO_LINEAR"}, {icon_items_IPO_BEZIER, "IPO_BEZIER"}, {icon_items_IPO_SINE, "IPO_SINE"}, {icon_items_IPO_QUAD, "IPO_QUAD"}, {icon_items_IPO_CUBIC, "IPO_CUBIC"}, {icon_items_IPO_QUART, "IPO_QUART"}, {icon_items_IPO_QUINT, "IPO_QUINT"}, {icon_items_IPO_EXPO, "IPO_EXPO"}, {icon_items_IPO_CIRC, "IPO_CIRC"}, {icon_items_IPO_BOUNCE, "IPO_BOUNCE"}, {icon_items_IPO_ELASTIC, "IPO_ELASTIC"}, {icon_items_IPO_BACK, "IPO_BACK"}, {icon_items_IPO_EASE_IN, "IPO_EASE_IN"}, {icon_items_IPO_EASE_OUT, "IPO_EASE_OUT"}, {icon_items_IPO_EASE_IN_OUT, "IPO_EASE_IN_OUT"}, {icon_items_VERTEXSEL, "VERTEXSEL"}, {icon_items_EDGESEL, "EDGESEL"}, {icon_items_FACESEL, "FACESEL"}, {icon_items_LOOPSEL, "LOOPSEL"}, {icon_items_ROTATE, "ROTATE"}, {icon_items_CURSOR, "CURSOR"}, {icon_items_ROTATECOLLECTION, "ROTATECOLLECTION"}, {icon_items_ROTATECENTER, "ROTATECENTER"}, {icon_items_ROTACTIVE, "ROTACTIVE"}, {icon_items_ALIGN, "ALIGN"}, {icon_items_SMOOTHCURVE, "SMOOTHCURVE"}, {icon_items_SPHERECURVE, "SPHERECURVE"}, {icon_items_ROOTCURVE, "ROOTCURVE"}, {icon_items_SHARPCURVE, "SHARPCURVE"}, {icon_items_LINCURVE, "LINCURVE"}, {icon_items_NOCURVE, "NOCURVE"}, {icon_items_RNDCURVE, "RNDCURVE"}, {icon_items_PROP_OFF, "PROP_OFF"}, {icon_items_PROP_ON, "PROP_ON"}, {icon_items_PROP_CON, "PROP_CON"}, {icon_items_SCULPT_DYNTOPO, "SCULPT_DYNTOPO"}, {icon_items_PARTICLE_POINT, "PARTICLE_POINT"}, {icon_items_PARTICLE_TIP, "PARTICLE_TIP"}, {icon_items_PARTICLE_PATH, "PARTICLE_PATH"}, {icon_items_MAN_TRANS, "MAN_TRANS"}, {icon_items_MAN_ROT, "MAN_ROT"}, {icon_items_MAN_SCALE, "MAN_SCALE"}, {icon_items_MANIPUL, "MANIPUL"}, {icon_items_SNAP_OFF, "SNAP_OFF"}, {icon_items_SNAP_ON, "SNAP_ON"}, {icon_items_SNAP_NORMAL, "SNAP_NORMAL"}, {icon_items_SNAP_INCREMENT, "SNAP_INCREMENT"}, {icon_items_SNAP_VERTEX, "SNAP_VERTEX"}, {icon_items_SNAP_EDGE, "SNAP_EDGE"}, {icon_items_SNAP_FACE, "SNAP_FACE"}, {icon_items_SNAP_VOLUME, "SNAP_VOLUME"}, {icon_items_STICKY_UVS_LOC, "STICKY_UVS_LOC"}, {icon_items_STICKY_UVS_DISABLE, "STICKY_UVS_DISABLE"}, {icon_items_STICKY_UVS_VERT, "STICKY_UVS_VERT"}, {icon_items_CLIPUV_DEHLT, "CLIPUV_DEHLT"}, {icon_items_CLIPUV_HLT, "CLIPUV_HLT"}, {icon_items_SNAP_PEEL_OBJECT, "SNAP_PEEL_OBJECT"}, {icon_items_GRID, "GRID"}, {icon_items_PASTEDOWN, "PASTEDOWN"}, {icon_items_COPYDOWN, "COPYDOWN"}, {icon_items_PASTEFLIPUP, "PASTEFLIPUP"}, {icon_items_PASTEFLIPDOWN, "PASTEFLIPDOWN"}, {icon_items_SNAP_SURFACE, "SNAP_SURFACE"}, {icon_items_AUTOMERGE_ON, "AUTOMERGE_ON"}, {icon_items_AUTOMERGE_OFF, "AUTOMERGE_OFF"}, {icon_items_RETOPO, "RETOPO"}, {icon_items_UV_VERTEXSEL, "UV_VERTEXSEL"}, {icon_items_UV_EDGESEL, "UV_EDGESEL"}, {icon_items_UV_FACESEL, "UV_FACESEL"}, {icon_items_UV_ISLANDSEL, "UV_ISLANDSEL"}, {icon_items_UV_SYNC_SELECT, "UV_SYNC_SELECT"}, {icon_items_BBOX, "BBOX"}, {icon_items_WIRE, "WIRE"}, {icon_items_SOLID, "SOLID"}, {icon_items_SMOOTH, "SMOOTH"}, {icon_items_POTATO, "POTATO"}, {icon_items_ORTHO, "ORTHO"}, {icon_items_LOCKVIEW_OFF, "LOCKVIEW_OFF"}, {icon_items_LOCKVIEW_ON, "LOCKVIEW_ON"}, {icon_items_AXIS_SIDE, "AXIS_SIDE"}, {icon_items_AXIS_FRONT, "AXIS_FRONT"}, {icon_items_AXIS_TOP, "AXIS_TOP"}, {icon_items_NDOF_DOM, "NDOF_DOM"}, {icon_items_NDOF_TURN, "NDOF_TURN"}, {icon_items_NDOF_FLY, "NDOF_FLY"}, {icon_items_NDOF_TRANS, "NDOF_TRANS"}, {icon_items_LAYER_USED, "LAYER_USED"}, {icon_items_LAYER_ACTIVE, "LAYER_ACTIVE"}, {icon_items_SORTALPHA, "SORTALPHA"}, {icon_items_SORTBYEXT, "SORTBYEXT"}, {icon_items_SORTTIME, "SORTTIME"}, {icon_items_SORTSIZE, "SORTSIZE"}, {icon_items_LONGDISPLAY, "LONGDISPLAY"}, {icon_items_SHORTDISPLAY, "SHORTDISPLAY"}, {icon_items_GHOST, "GHOST"}, {icon_items_IMGDISPLAY, "IMGDISPLAY"}, {icon_items_SAVE_AS, "SAVE_AS"}, {icon_items_SAVE_COPY, "SAVE_COPY"}, {icon_items_BOOKMARKS, "BOOKMARKS"}, {icon_items_FONTPREVIEW, "FONTPREVIEW"}, {icon_items_FILTER, "FILTER"}, {icon_items_NEWFOLDER, "NEWFOLDER"}, {icon_items_OPEN_RECENT, "OPEN_RECENT"}, {icon_items_FILE_PARENT, "FILE_PARENT"}, {icon_items_FILE_REFRESH, "FILE_REFRESH"}, {icon_items_FILE_FOLDER, "FILE_FOLDER"}, {icon_items_FILE_BLANK, "FILE_BLANK"}, {icon_items_FILE_BLEND, "FILE_BLEND"}, {icon_items_FILE_IMAGE, "FILE_IMAGE"}, {icon_items_FILE_MOVIE, "FILE_MOVIE"}, {icon_items_FILE_SCRIPT, "FILE_SCRIPT"}, {icon_items_FILE_SOUND, "FILE_SOUND"}, {icon_items_FILE_FONT, "FILE_FONT"}, {icon_items_FILE_TEXT, "FILE_TEXT"}, {icon_items_RECOVER_AUTO, "RECOVER_AUTO"}, {icon_items_SAVE_PREFS, "SAVE_PREFS"}, {icon_items_LINK_BLEND, "LINK_BLEND"}, {icon_items_APPEND_BLEND, "APPEND_BLEND"}, {icon_items_IMPORT, "IMPORT"}, {icon_items_EXPORT, "EXPORT"}, {icon_items_EXTERNAL_DATA, "EXTERNAL_DATA"}, {icon_items_LOAD_FACTORY, "LOAD_FACTORY"}, {icon_items_LOOP_BACK, "LOOP_BACK"}, {icon_items_LOOP_FORWARDS, "LOOP_FORWARDS"}, {icon_items_BACK, "BACK"}, {icon_items_FORWARD, "FORWARD"}, {icon_items_FILE_HIDDEN, "FILE_HIDDEN"}, {icon_items_FILE_BACKUP, "FILE_BACKUP"}, {icon_items_DISK_DRIVE, "DISK_DRIVE"}, {icon_items_MATPLANE, "MATPLANE"}, {icon_items_MATSPHERE, "MATSPHERE"}, {icon_items_MATCUBE, "MATCUBE"}, {icon_items_MONKEY, "MONKEY"}, {icon_items_HAIR, "HAIR"}, {icon_items_ALIASED, "ALIASED"}, {icon_items_ANTIALIASED, "ANTIALIASED"}, {icon_items_MAT_SPHERE_SKY, "MAT_SPHERE_SKY"}, {icon_items_WORDWRAP_OFF, "WORDWRAP_OFF"}, {icon_items_WORDWRAP_ON, "WORDWRAP_ON"}, {icon_items_SYNTAX_OFF, "SYNTAX_OFF"}, {icon_items_SYNTAX_ON, "SYNTAX_ON"}, {icon_items_LINENUMBERS_OFF, "LINENUMBERS_OFF"}, {icon_items_LINENUMBERS_ON, "LINENUMBERS_ON"}, {icon_items_SCRIPTPLUGINS, "SCRIPTPLUGINS"}, {icon_items_SEQ_SEQUENCER, "SEQ_SEQUENCER"}, {icon_items_SEQ_PREVIEW, "SEQ_PREVIEW"}, {icon_items_SEQ_LUMA_WAVEFORM, "SEQ_LUMA_WAVEFORM"}, {icon_items_SEQ_CHROMA_SCOPE, "SEQ_CHROMA_SCOPE"}, {icon_items_SEQ_HISTOGRAM, "SEQ_HISTOGRAM"}, {icon_items_SEQ_SPLITVIEW, "SEQ_SPLITVIEW"}, {icon_items_IMAGE_RGB, "IMAGE_RGB"}, {icon_items_IMAGE_RGB_ALPHA, "IMAGE_RGB_ALPHA"}, {icon_items_IMAGE_ALPHA, "IMAGE_ALPHA"}, {icon_items_IMAGE_ZDEPTH, "IMAGE_ZDEPTH"}, {icon_items_IMAGEFILE, "IMAGEFILE"}, {icon_items_BRUSH_ADD, "BRUSH_ADD"}, {icon_items_BRUSH_BLOB, "BRUSH_BLOB"}, {icon_items_BRUSH_BLUR, "BRUSH_BLUR"}, {icon_items_BRUSH_CLAY, "BRUSH_CLAY"}, {icon_items_BRUSH_CLAY_STRIPS, "BRUSH_CLAY_STRIPS"}, {icon_items_BRUSH_CLONE, "BRUSH_CLONE"}, {icon_items_BRUSH_CREASE, "BRUSH_CREASE"}, {icon_items_BRUSH_DARKEN, "BRUSH_DARKEN"}, {icon_items_BRUSH_FILL, "BRUSH_FILL"}, {icon_items_BRUSH_FLATTEN, "BRUSH_FLATTEN"}, {icon_items_BRUSH_GRAB, "BRUSH_GRAB"}, {icon_items_BRUSH_INFLATE, "BRUSH_INFLATE"}, {icon_items_BRUSH_LAYER, "BRUSH_LAYER"}, {icon_items_BRUSH_LIGHTEN, "BRUSH_LIGHTEN"}, {icon_items_BRUSH_MASK, "BRUSH_MASK"}, {icon_items_BRUSH_MIX, "BRUSH_MIX"}, {icon_items_BRUSH_MULTIPLY, "BRUSH_MULTIPLY"}, {icon_items_BRUSH_NUDGE, "BRUSH_NUDGE"}, {icon_items_BRUSH_PINCH, "BRUSH_PINCH"}, {icon_items_BRUSH_SCRAPE, "BRUSH_SCRAPE"}, {icon_items_BRUSH_SCULPT_DRAW, "BRUSH_SCULPT_DRAW"}, {icon_items_BRUSH_SMEAR, "BRUSH_SMEAR"}, {icon_items_BRUSH_SMOOTH, "BRUSH_SMOOTH"}, {icon_items_BRUSH_SNAKE_HOOK, "BRUSH_SNAKE_HOOK"}, {icon_items_BRUSH_SOFTEN, "BRUSH_SOFTEN"}, {icon_items_BRUSH_SUBTRACT, "BRUSH_SUBTRACT"}, {icon_items_BRUSH_TEXDRAW, "BRUSH_TEXDRAW"}, {icon_items_BRUSH_TEXFILL, "BRUSH_TEXFILL"}, {icon_items_BRUSH_TEXMASK, "BRUSH_TEXMASK"}, {icon_items_BRUSH_THUMB, "BRUSH_THUMB"}, {icon_items_BRUSH_ROTATE, "BRUSH_ROTATE"}, {icon_items_BRUSH_VERTEXDRAW, "BRUSH_VERTEXDRAW"}, {icon_items_MATCAP_01, "MATCAP_01"}, {icon_items_MATCAP_02, "MATCAP_02"}, {icon_items_MATCAP_03, "MATCAP_03"}, {icon_items_MATCAP_04, "MATCAP_04"}, {icon_items_MATCAP_05, "MATCAP_05"}, {icon_items_MATCAP_06, "MATCAP_06"}, {icon_items_MATCAP_07, "MATCAP_07"}, {icon_items_MATCAP_08, "MATCAP_08"}, {icon_items_MATCAP_09, "MATCAP_09"}, {icon_items_MATCAP_10, "MATCAP_10"}, {icon_items_MATCAP_11, "MATCAP_11"}, {icon_items_MATCAP_12, "MATCAP_12"}, {icon_items_MATCAP_13, "MATCAP_13"}, {icon_items_MATCAP_14, "MATCAP_14"}, {icon_items_MATCAP_15, "MATCAP_15"}, {icon_items_MATCAP_16, "MATCAP_16"}, {icon_items_MATCAP_17, "MATCAP_17"}, {icon_items_MATCAP_18, "MATCAP_18"}, {icon_items_MATCAP_19, "MATCAP_19"}, {icon_items_MATCAP_20, "MATCAP_20"}, {icon_items_MATCAP_21, "MATCAP_21"}, {icon_items_MATCAP_22, "MATCAP_22"}, {icon_items_MATCAP_23, "MATCAP_23"}, {icon_items_MATCAP_24, "MATCAP_24"}, {icon_items_VIEW3D_VEC, "VIEW3D_VEC"}, {icon_items_EDIT_VEC, "EDIT_VEC"}, {icon_items_EDITMODE_VEC_DEHLT, "EDITMODE_VEC_DEHLT"}, {icon_items_EDITMODE_VEC_HLT, "EDITMODE_VEC_HLT"}, {icon_items_DISCLOSURE_TRI_RIGHT_VEC, "DISCLOSURE_TRI_RIGHT_VEC"}, {icon_items_DISCLOSURE_TRI_DOWN_VEC, "DISCLOSURE_TRI_DOWN_VEC"}, {icon_items_MOVE_UP_VEC, "MOVE_UP_VEC"}, {icon_items_MOVE_DOWN_VEC, "MOVE_DOWN_VEC"}, {icon_items_X_VEC, "X_VEC"}, {icon_items_SMALL_TRI_RIGHT_VEC, "SMALL_TRI_RIGHT_VEC"}};
	};

	const std::map<std::string, int> string_to_icon_items = create_string_to_icon_items();
	const std::map<int, std::string> icon_items_to_string = create_icon_items_to_string();

	UIPopupMenu pupmenu_begin__internal(const std::string title, icon_items_enum icon = icon_items_NONE) {
		PYTHON_FUNCTION_ARGS_CALL("pupmenu_begin__internal", "ss", title, icon_items_to_string.at(icon))
		CLASS_TYPES_RETURN(UIPopupMenu)
	}

	void pupmenu_end__internal(UIPopupMenu menu) {
		PYTHON_FUNCTION_ARGS_CALL("pupmenu_end__internal", "O", menu.get_pyobjref())
	}

	UIPieMenu piemenu_begin__internal(const std::string title, icon_items_enum icon, Event event) {
		PYTHON_FUNCTION_ARGS_CALL("piemenu_begin__internal", "ssO", title, icon_items_to_string.at(icon), event.get_pyobjref())
		CLASS_TYPES_RETURN(UIPieMenu)
	}

	void piemenu_end__internal(UIPieMenu menu) {
		PYTHON_FUNCTION_ARGS_CALL("piemenu_end__internal", "O", menu.get_pyobjref())
	}
};

class KeyConfig : public pyUniplug {
public:
	KeyConfig(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyConfig() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, KeyMap> keymaps();

	bool is_user_defined() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_user_defined")
	}

	void is_user_defined(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_user_defined", value)
	}
};

class KeyMap : public pyUniplug {
public:
	KeyMap(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyMap() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	enum space_type_items_enum {
		space_type_items_EMPTY = 0,	
		space_type_items_VIEW_3D = 1,	
		space_type_items_TIMELINE = 15,	
		space_type_items_GRAPH_EDITOR = 2,	
		space_type_items_DOPESHEET_EDITOR = 12,	
		space_type_items_NLA_EDITOR = 13,	
		space_type_items_IMAGE_EDITOR = 6,	
		space_type_items_SEQUENCE_EDITOR = 8,	
		space_type_items_CLIP_EDITOR = 20,	
		space_type_items_TEXT_EDITOR = 9,	
		space_type_items_NODE_EDITOR = 16,	
		space_type_items_LOGIC_EDITOR = 17,	
		space_type_items_PROPERTIES = 4,	
		space_type_items_OUTLINER = 3,	
		space_type_items_USER_PREFERENCES = 19,	
		space_type_items_INFO = 7,	
		space_type_items_FILE_BROWSER = 5,	
		space_type_items_CONSOLE = 18	
	};

	std::map<std::string, int> create_string_to_space_type_items() {
		return {{"EMPTY", space_type_items_EMPTY}, {"VIEW_3D", space_type_items_VIEW_3D}, {"TIMELINE", space_type_items_TIMELINE}, {"GRAPH_EDITOR", space_type_items_GRAPH_EDITOR}, {"DOPESHEET_EDITOR", space_type_items_DOPESHEET_EDITOR}, {"NLA_EDITOR", space_type_items_NLA_EDITOR}, {"IMAGE_EDITOR", space_type_items_IMAGE_EDITOR}, {"SEQUENCE_EDITOR", space_type_items_SEQUENCE_EDITOR}, {"CLIP_EDITOR", space_type_items_CLIP_EDITOR}, {"TEXT_EDITOR", space_type_items_TEXT_EDITOR}, {"NODE_EDITOR", space_type_items_NODE_EDITOR}, {"LOGIC_EDITOR", space_type_items_LOGIC_EDITOR}, {"PROPERTIES", space_type_items_PROPERTIES}, {"OUTLINER", space_type_items_OUTLINER}, {"USER_PREFERENCES", space_type_items_USER_PREFERENCES}, {"INFO", space_type_items_INFO}, {"FILE_BROWSER", space_type_items_FILE_BROWSER}, {"CONSOLE", space_type_items_CONSOLE}};
	};

	std::map<int, std::string> create_space_type_items_to_string() {
		return {{space_type_items_EMPTY, "EMPTY"}, {space_type_items_VIEW_3D, "VIEW_3D"}, {space_type_items_TIMELINE, "TIMELINE"}, {space_type_items_GRAPH_EDITOR, "GRAPH_EDITOR"}, {space_type_items_DOPESHEET_EDITOR, "DOPESHEET_EDITOR"}, {space_type_items_NLA_EDITOR, "NLA_EDITOR"}, {space_type_items_IMAGE_EDITOR, "IMAGE_EDITOR"}, {space_type_items_SEQUENCE_EDITOR, "SEQUENCE_EDITOR"}, {space_type_items_CLIP_EDITOR, "CLIP_EDITOR"}, {space_type_items_TEXT_EDITOR, "TEXT_EDITOR"}, {space_type_items_NODE_EDITOR, "NODE_EDITOR"}, {space_type_items_LOGIC_EDITOR, "LOGIC_EDITOR"}, {space_type_items_PROPERTIES, "PROPERTIES"}, {space_type_items_OUTLINER, "OUTLINER"}, {space_type_items_USER_PREFERENCES, "USER_PREFERENCES"}, {space_type_items_INFO, "INFO"}, {space_type_items_FILE_BROWSER, "FILE_BROWSER"}, {space_type_items_CONSOLE, "CONSOLE"}};
	};

	const std::map<std::string, int> string_to_space_type_items = create_string_to_space_type_items();
	const std::map<int, std::string> space_type_items_to_string = create_space_type_items_to_string();

	space_type_items_enum space_type() {
		STRING_TYPE_GETTER("space_type", static_cast<space_type_items_enum>(string_to_space_type_items.at(resstr)))
	}

	void space_type(space_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "space_type", space_type_items_to_string.at(value))
	}

	enum region_type_items_enum {
		region_type_items_WINDOW = 0,	
		region_type_items_HEADER = 1,	
		region_type_items_CHANNELS = 2,	
		region_type_items_TEMPORARY = 3,	
		region_type_items_UI = 4,	
		region_type_items_TOOLS = 5,	
		region_type_items_TOOL_PROPS = 6,	
		region_type_items_PREVIEW = 7	
	};

	std::map<std::string, int> create_string_to_region_type_items() {
		return {{"WINDOW", region_type_items_WINDOW}, {"HEADER", region_type_items_HEADER}, {"CHANNELS", region_type_items_CHANNELS}, {"TEMPORARY", region_type_items_TEMPORARY}, {"UI", region_type_items_UI}, {"TOOLS", region_type_items_TOOLS}, {"TOOL_PROPS", region_type_items_TOOL_PROPS}, {"PREVIEW", region_type_items_PREVIEW}};
	};

	std::map<int, std::string> create_region_type_items_to_string() {
		return {{region_type_items_WINDOW, "WINDOW"}, {region_type_items_HEADER, "HEADER"}, {region_type_items_CHANNELS, "CHANNELS"}, {region_type_items_TEMPORARY, "TEMPORARY"}, {region_type_items_UI, "UI"}, {region_type_items_TOOLS, "TOOLS"}, {region_type_items_TOOL_PROPS, "TOOL_PROPS"}, {region_type_items_PREVIEW, "PREVIEW"}};
	};

	const std::map<std::string, int> string_to_region_type_items = create_string_to_region_type_items();
	const std::map<int, std::string> region_type_items_to_string = create_region_type_items_to_string();

	region_type_items_enum region_type() {
		STRING_TYPE_GETTER("region_type", static_cast<region_type_items_enum>(string_to_region_type_items.at(resstr)))
	}

	void region_type(region_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "region_type", region_type_items_to_string.at(value))
	}

	std::map<std::string, KeyMapItem> keymap_items();

	bool is_user_modified() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_user_modified")
	}

	void is_user_modified(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_user_modified", value)
	}

	bool is_modal() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_modal")
	}

	void is_modal(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_modal", value)
	}

	bool show_expanded_items() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded_items")
	}

	void show_expanded_items(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded_items", value)
	}

	bool show_expanded_children() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded_children")
	}

	void show_expanded_children(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded_children", value)
	}

	KeyMap active() {
		PYTHON_FUNCTION_CALL("active")
		CLASS_TYPES_RETURN(KeyMap)
	}

	void restore_to_default() {
		PYTHON_FUNCTION_CALL("restore_to_default")
	}

	void restore_item_to_default(KeyMapItem item);
};

class KeyMapItem : public pyUniplug {
public:
	KeyMapItem(PyObject* pyobj) : pyUniplug(pyobj) {}
	KeyMapItem() : pyUniplug(0) { }

	std::string idname() {
		STRING_TYPE_GETTER("idname", resstr)
	}

	void idname(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "idname", value)
	}

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	OperatorProperties properties() {
		CLASS_TYPES_GETTER(OperatorProperties, "properties")
	}

	enum map_type_items_enum {
		map_type_items_KEYBOARD = 0,	
		map_type_items_TWEAK = 2,	
		map_type_items_MOUSE = 1,	
		map_type_items_NDOF = 5,	
		map_type_items_TEXTINPUT = 3,	
		map_type_items_TIMER = 4	
	};

	std::map<std::string, int> create_string_to_map_type_items() {
		return {{"KEYBOARD", map_type_items_KEYBOARD}, {"TWEAK", map_type_items_TWEAK}, {"MOUSE", map_type_items_MOUSE}, {"NDOF", map_type_items_NDOF}, {"TEXTINPUT", map_type_items_TEXTINPUT}, {"TIMER", map_type_items_TIMER}};
	};

	std::map<int, std::string> create_map_type_items_to_string() {
		return {{map_type_items_KEYBOARD, "KEYBOARD"}, {map_type_items_TWEAK, "TWEAK"}, {map_type_items_MOUSE, "MOUSE"}, {map_type_items_NDOF, "NDOF"}, {map_type_items_TEXTINPUT, "TEXTINPUT"}, {map_type_items_TIMER, "TIMER"}};
	};

	const std::map<std::string, int> string_to_map_type_items = create_string_to_map_type_items();
	const std::map<int, std::string> map_type_items_to_string = create_map_type_items_to_string();

	map_type_items_enum map_type() {
		STRING_TYPE_GETTER("map_type", static_cast<map_type_items_enum>(string_to_map_type_items.at(resstr)))
	}

	void map_type(map_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "map_type", map_type_items_to_string.at(value))
	}

	enum event_type_items_enum {
		event_type_items_NONE = 0,	
		event_type_items_LEFTMOUSE = 1,	
		event_type_items_MIDDLEMOUSE = 2,	
		event_type_items_RIGHTMOUSE = 3,	
		event_type_items_BUTTON4MOUSE = 7,	
		event_type_items_BUTTON5MOUSE = 8,	
		event_type_items_BUTTON6MOUSE = 18,	
		event_type_items_BUTTON7MOUSE = 19,	
		event_type_items_ACTIONMOUSE = 5,	
		event_type_items_SELECTMOUSE = 6,	
		event_type_items_MOUSEMOVE = 4,	
		event_type_items_INBETWEEN_MOUSEMOVE = 17,	
		event_type_items_TRACKPADPAN = 14,	
		event_type_items_TRACKPADZOOM = 15,	
		event_type_items_MOUSEROTATE = 16,	
		event_type_items_WHEELUPMOUSE = 10,	
		event_type_items_WHEELDOWNMOUSE = 11,	
		event_type_items_WHEELINMOUSE = 12,	
		event_type_items_WHEELOUTMOUSE = 13,	
		event_type_items_EVT_TWEAK_L = 20482,	
		event_type_items_EVT_TWEAK_M = 20483,	
		event_type_items_EVT_TWEAK_R = 20484,	
		event_type_items_EVT_TWEAK_A = 20485,	
		event_type_items_EVT_TWEAK_S = 20486,	
		event_type_items_A = 97,	
		event_type_items_B = 98,	
		event_type_items_C = 99,	
		event_type_items_D = 100,	
		event_type_items_E = 101,	
		event_type_items_F = 102,	
		event_type_items_G = 103,	
		event_type_items_H = 104,	
		event_type_items_I = 105,	
		event_type_items_J = 106,	
		event_type_items_K = 107,	
		event_type_items_L = 108,	
		event_type_items_M = 109,	
		event_type_items_N = 110,	
		event_type_items_O = 111,	
		event_type_items_P = 112,	
		event_type_items_Q = 113,	
		event_type_items_R = 114,	
		event_type_items_S = 115,	
		event_type_items_T = 116,	
		event_type_items_U = 117,	
		event_type_items_V = 118,	
		event_type_items_W = 119,	
		event_type_items_X = 120,	
		event_type_items_Y = 121,	
		event_type_items_Z = 122,	
		event_type_items_ZERO = 48,	
		event_type_items_ONE = 49,	
		event_type_items_TWO = 50,	
		event_type_items_THREE = 51,	
		event_type_items_FOUR = 52,	
		event_type_items_FIVE = 53,	
		event_type_items_SIX = 54,	
		event_type_items_SEVEN = 55,	
		event_type_items_EIGHT = 56,	
		event_type_items_NINE = 57,	
		event_type_items_LEFT_CTRL = 212,	
		event_type_items_LEFT_ALT = 213,	
		event_type_items_LEFT_SHIFT = 217,	
		event_type_items_RIGHT_ALT = 214,	
		event_type_items_RIGHT_CTRL = 215,	
		event_type_items_RIGHT_SHIFT = 216,	
		event_type_items_OSKEY = 172,	
		event_type_items_GRLESS = 173,	
		event_type_items_ESC = 218,	
		event_type_items_TAB = 219,	
		event_type_items_RET = 220,	
		event_type_items_SPACE = 221,	
		event_type_items_LINE_FEED = 222,	
		event_type_items_BACK_SPACE = 223,	
		event_type_items_DEL = 224,	
		event_type_items_SEMI_COLON = 225,	
		event_type_items_PERIOD = 226,	
		event_type_items_COMMA = 227,	
		event_type_items_QUOTE = 228,	
		event_type_items_ACCENT_GRAVE = 229,	
		event_type_items_MINUS = 230,	
		event_type_items_SLASH = 232,	
		event_type_items_BACK_SLASH = 233,	
		event_type_items_EQUAL = 234,	
		event_type_items_LEFT_BRACKET = 235,	
		event_type_items_RIGHT_BRACKET = 236,	
		event_type_items_LEFT_ARROW = 137,	
		event_type_items_DOWN_ARROW = 138,	
		event_type_items_RIGHT_ARROW = 139,	
		event_type_items_UP_ARROW = 140,	
		event_type_items_NUMPAD_2 = 152,	
		event_type_items_NUMPAD_4 = 154,	
		event_type_items_NUMPAD_6 = 156,	
		event_type_items_NUMPAD_8 = 158,	
		event_type_items_NUMPAD_1 = 151,	
		event_type_items_NUMPAD_3 = 153,	
		event_type_items_NUMPAD_5 = 155,	
		event_type_items_NUMPAD_7 = 157,	
		event_type_items_NUMPAD_9 = 159,	
		event_type_items_NUMPAD_PERIOD = 199,	
		event_type_items_NUMPAD_SLASH = 161,	
		event_type_items_NUMPAD_ASTERIX = 160,	
		event_type_items_NUMPAD_0 = 150,	
		event_type_items_NUMPAD_MINUS = 162,	
		event_type_items_NUMPAD_ENTER = 163,	
		event_type_items_NUMPAD_PLUS = 164,	
		event_type_items_F1 = 300,	
		event_type_items_F2 = 301,	
		event_type_items_F3 = 302,	
		event_type_items_F4 = 303,	
		event_type_items_F5 = 304,	
		event_type_items_F6 = 305,	
		event_type_items_F7 = 306,	
		event_type_items_F8 = 307,	
		event_type_items_F9 = 308,	
		event_type_items_F10 = 309,	
		event_type_items_F11 = 310,	
		event_type_items_F12 = 311,	
		event_type_items_F13 = 312,	
		event_type_items_F14 = 313,	
		event_type_items_F15 = 314,	
		event_type_items_F16 = 315,	
		event_type_items_F17 = 316,	
		event_type_items_F18 = 317,	
		event_type_items_F19 = 318,	
		event_type_items_PAUSE = 165,	
		event_type_items_INSERT = 166,	
		event_type_items_HOME = 167,	
		event_type_items_PAGE_UP = 168,	
		event_type_items_PAGE_DOWN = 169,	
		event_type_items_END = 170,	
		event_type_items_MEDIA_PLAY = 174,	
		event_type_items_MEDIA_STOP = 175,	
		event_type_items_MEDIA_FIRST = 176,	
		event_type_items_MEDIA_LAST = 177,	
		event_type_items_TEXTINPUT = -2,	
		event_type_items_WINDOW_DEACTIVATE = 260,	
		event_type_items_TIMER = 272,	
		event_type_items_TIMER0 = 273,	
		event_type_items_TIMER1 = 274,	
		event_type_items_TIMER2 = 275,	
		event_type_items_TIMER_JOBS = 276,	
		event_type_items_TIMER_AUTOSAVE = 277,	
		event_type_items_TIMER_REPORT = 278,	
		event_type_items_TIMERREGION = 279,	
		event_type_items_NDOF_MOTION = 400,	
		event_type_items_NDOF_BUTTON_MENU = 401,	
		event_type_items_NDOF_BUTTON_FIT = 402,	
		event_type_items_NDOF_BUTTON_TOP = 403,	
		event_type_items_NDOF_BUTTON_BOTTOM = 404,	
		event_type_items_NDOF_BUTTON_LEFT = 405,	
		event_type_items_NDOF_BUTTON_RIGHT = 406,	
		event_type_items_NDOF_BUTTON_FRONT = 407,	
		event_type_items_NDOF_BUTTON_BACK = 408,	
		event_type_items_NDOF_BUTTON_ISO1 = 409,	
		event_type_items_NDOF_BUTTON_ISO2 = 410,	
		event_type_items_NDOF_BUTTON_ROLL_CW = 411,	
		event_type_items_NDOF_BUTTON_ROLL_CCW = 412,	
		event_type_items_NDOF_BUTTON_SPIN_CW = 413,	
		event_type_items_NDOF_BUTTON_SPIN_CCW = 414,	
		event_type_items_NDOF_BUTTON_TILT_CW = 415,	
		event_type_items_NDOF_BUTTON_TILT_CCW = 416,	
		event_type_items_NDOF_BUTTON_ROTATE = 417,	
		event_type_items_NDOF_BUTTON_PANZOOM = 418,	
		event_type_items_NDOF_BUTTON_DOMINANT = 419,	
		event_type_items_NDOF_BUTTON_PLUS = 420,	
		event_type_items_NDOF_BUTTON_MINUS = 421,	
		event_type_items_NDOF_BUTTON_ESC = 422,	
		event_type_items_NDOF_BUTTON_ALT = 423,	
		event_type_items_NDOF_BUTTON_SHIFT = 424,	
		event_type_items_NDOF_BUTTON_CTRL = 425,	
		event_type_items_NDOF_BUTTON_1 = 426,	
		event_type_items_NDOF_BUTTON_2 = 427,	
		event_type_items_NDOF_BUTTON_3 = 428,	
		event_type_items_NDOF_BUTTON_4 = 429,	
		event_type_items_NDOF_BUTTON_5 = 430,	
		event_type_items_NDOF_BUTTON_6 = 431,	
		event_type_items_NDOF_BUTTON_7 = 432,	
		event_type_items_NDOF_BUTTON_8 = 433,	
		event_type_items_NDOF_BUTTON_9 = 434,	
		event_type_items_NDOF_BUTTON_10 = 435,	
		event_type_items_NDOF_BUTTON_A = 436,	
		event_type_items_NDOF_BUTTON_B = 437,	
		event_type_items_NDOF_BUTTON_C = 438	
	};

	std::map<std::string, int> create_string_to_event_type_items() {
		return {{"NONE", event_type_items_NONE}, {"LEFTMOUSE", event_type_items_LEFTMOUSE}, {"MIDDLEMOUSE", event_type_items_MIDDLEMOUSE}, {"RIGHTMOUSE", event_type_items_RIGHTMOUSE}, {"BUTTON4MOUSE", event_type_items_BUTTON4MOUSE}, {"BUTTON5MOUSE", event_type_items_BUTTON5MOUSE}, {"BUTTON6MOUSE", event_type_items_BUTTON6MOUSE}, {"BUTTON7MOUSE", event_type_items_BUTTON7MOUSE}, {"ACTIONMOUSE", event_type_items_ACTIONMOUSE}, {"SELECTMOUSE", event_type_items_SELECTMOUSE}, {"MOUSEMOVE", event_type_items_MOUSEMOVE}, {"INBETWEEN_MOUSEMOVE", event_type_items_INBETWEEN_MOUSEMOVE}, {"TRACKPADPAN", event_type_items_TRACKPADPAN}, {"TRACKPADZOOM", event_type_items_TRACKPADZOOM}, {"MOUSEROTATE", event_type_items_MOUSEROTATE}, {"WHEELUPMOUSE", event_type_items_WHEELUPMOUSE}, {"WHEELDOWNMOUSE", event_type_items_WHEELDOWNMOUSE}, {"WHEELINMOUSE", event_type_items_WHEELINMOUSE}, {"WHEELOUTMOUSE", event_type_items_WHEELOUTMOUSE}, {"EVT_TWEAK_L", event_type_items_EVT_TWEAK_L}, {"EVT_TWEAK_M", event_type_items_EVT_TWEAK_M}, {"EVT_TWEAK_R", event_type_items_EVT_TWEAK_R}, {"EVT_TWEAK_A", event_type_items_EVT_TWEAK_A}, {"EVT_TWEAK_S", event_type_items_EVT_TWEAK_S}, {"A", event_type_items_A}, {"B", event_type_items_B}, {"C", event_type_items_C}, {"D", event_type_items_D}, {"E", event_type_items_E}, {"F", event_type_items_F}, {"G", event_type_items_G}, {"H", event_type_items_H}, {"I", event_type_items_I}, {"J", event_type_items_J}, {"K", event_type_items_K}, {"L", event_type_items_L}, {"M", event_type_items_M}, {"N", event_type_items_N}, {"O", event_type_items_O}, {"P", event_type_items_P}, {"Q", event_type_items_Q}, {"R", event_type_items_R}, {"S", event_type_items_S}, {"T", event_type_items_T}, {"U", event_type_items_U}, {"V", event_type_items_V}, {"W", event_type_items_W}, {"X", event_type_items_X}, {"Y", event_type_items_Y}, {"Z", event_type_items_Z}, {"ZERO", event_type_items_ZERO}, {"ONE", event_type_items_ONE}, {"TWO", event_type_items_TWO}, {"THREE", event_type_items_THREE}, {"FOUR", event_type_items_FOUR}, {"FIVE", event_type_items_FIVE}, {"SIX", event_type_items_SIX}, {"SEVEN", event_type_items_SEVEN}, {"EIGHT", event_type_items_EIGHT}, {"NINE", event_type_items_NINE}, {"LEFT_CTRL", event_type_items_LEFT_CTRL}, {"LEFT_ALT", event_type_items_LEFT_ALT}, {"LEFT_SHIFT", event_type_items_LEFT_SHIFT}, {"RIGHT_ALT", event_type_items_RIGHT_ALT}, {"RIGHT_CTRL", event_type_items_RIGHT_CTRL}, {"RIGHT_SHIFT", event_type_items_RIGHT_SHIFT}, {"OSKEY", event_type_items_OSKEY}, {"GRLESS", event_type_items_GRLESS}, {"ESC", event_type_items_ESC}, {"TAB", event_type_items_TAB}, {"RET", event_type_items_RET}, {"SPACE", event_type_items_SPACE}, {"LINE_FEED", event_type_items_LINE_FEED}, {"BACK_SPACE", event_type_items_BACK_SPACE}, {"DEL", event_type_items_DEL}, {"SEMI_COLON", event_type_items_SEMI_COLON}, {"PERIOD", event_type_items_PERIOD}, {"COMMA", event_type_items_COMMA}, {"QUOTE", event_type_items_QUOTE}, {"ACCENT_GRAVE", event_type_items_ACCENT_GRAVE}, {"MINUS", event_type_items_MINUS}, {"SLASH", event_type_items_SLASH}, {"BACK_SLASH", event_type_items_BACK_SLASH}, {"EQUAL", event_type_items_EQUAL}, {"LEFT_BRACKET", event_type_items_LEFT_BRACKET}, {"RIGHT_BRACKET", event_type_items_RIGHT_BRACKET}, {"LEFT_ARROW", event_type_items_LEFT_ARROW}, {"DOWN_ARROW", event_type_items_DOWN_ARROW}, {"RIGHT_ARROW", event_type_items_RIGHT_ARROW}, {"UP_ARROW", event_type_items_UP_ARROW}, {"NUMPAD_2", event_type_items_NUMPAD_2}, {"NUMPAD_4", event_type_items_NUMPAD_4}, {"NUMPAD_6", event_type_items_NUMPAD_6}, {"NUMPAD_8", event_type_items_NUMPAD_8}, {"NUMPAD_1", event_type_items_NUMPAD_1}, {"NUMPAD_3", event_type_items_NUMPAD_3}, {"NUMPAD_5", event_type_items_NUMPAD_5}, {"NUMPAD_7", event_type_items_NUMPAD_7}, {"NUMPAD_9", event_type_items_NUMPAD_9}, {"NUMPAD_PERIOD", event_type_items_NUMPAD_PERIOD}, {"NUMPAD_SLASH", event_type_items_NUMPAD_SLASH}, {"NUMPAD_ASTERIX", event_type_items_NUMPAD_ASTERIX}, {"NUMPAD_0", event_type_items_NUMPAD_0}, {"NUMPAD_MINUS", event_type_items_NUMPAD_MINUS}, {"NUMPAD_ENTER", event_type_items_NUMPAD_ENTER}, {"NUMPAD_PLUS", event_type_items_NUMPAD_PLUS}, {"F1", event_type_items_F1}, {"F2", event_type_items_F2}, {"F3", event_type_items_F3}, {"F4", event_type_items_F4}, {"F5", event_type_items_F5}, {"F6", event_type_items_F6}, {"F7", event_type_items_F7}, {"F8", event_type_items_F8}, {"F9", event_type_items_F9}, {"F10", event_type_items_F10}, {"F11", event_type_items_F11}, {"F12", event_type_items_F12}, {"F13", event_type_items_F13}, {"F14", event_type_items_F14}, {"F15", event_type_items_F15}, {"F16", event_type_items_F16}, {"F17", event_type_items_F17}, {"F18", event_type_items_F18}, {"F19", event_type_items_F19}, {"PAUSE", event_type_items_PAUSE}, {"INSERT", event_type_items_INSERT}, {"HOME", event_type_items_HOME}, {"PAGE_UP", event_type_items_PAGE_UP}, {"PAGE_DOWN", event_type_items_PAGE_DOWN}, {"END", event_type_items_END}, {"MEDIA_PLAY", event_type_items_MEDIA_PLAY}, {"MEDIA_STOP", event_type_items_MEDIA_STOP}, {"MEDIA_FIRST", event_type_items_MEDIA_FIRST}, {"MEDIA_LAST", event_type_items_MEDIA_LAST}, {"TEXTINPUT", event_type_items_TEXTINPUT}, {"WINDOW_DEACTIVATE", event_type_items_WINDOW_DEACTIVATE}, {"TIMER", event_type_items_TIMER}, {"TIMER0", event_type_items_TIMER0}, {"TIMER1", event_type_items_TIMER1}, {"TIMER2", event_type_items_TIMER2}, {"TIMER_JOBS", event_type_items_TIMER_JOBS}, {"TIMER_AUTOSAVE", event_type_items_TIMER_AUTOSAVE}, {"TIMER_REPORT", event_type_items_TIMER_REPORT}, {"TIMERREGION", event_type_items_TIMERREGION}, {"NDOF_MOTION", event_type_items_NDOF_MOTION}, {"NDOF_BUTTON_MENU", event_type_items_NDOF_BUTTON_MENU}, {"NDOF_BUTTON_FIT", event_type_items_NDOF_BUTTON_FIT}, {"NDOF_BUTTON_TOP", event_type_items_NDOF_BUTTON_TOP}, {"NDOF_BUTTON_BOTTOM", event_type_items_NDOF_BUTTON_BOTTOM}, {"NDOF_BUTTON_LEFT", event_type_items_NDOF_BUTTON_LEFT}, {"NDOF_BUTTON_RIGHT", event_type_items_NDOF_BUTTON_RIGHT}, {"NDOF_BUTTON_FRONT", event_type_items_NDOF_BUTTON_FRONT}, {"NDOF_BUTTON_BACK", event_type_items_NDOF_BUTTON_BACK}, {"NDOF_BUTTON_ISO1", event_type_items_NDOF_BUTTON_ISO1}, {"NDOF_BUTTON_ISO2", event_type_items_NDOF_BUTTON_ISO2}, {"NDOF_BUTTON_ROLL_CW", event_type_items_NDOF_BUTTON_ROLL_CW}, {"NDOF_BUTTON_ROLL_CCW", event_type_items_NDOF_BUTTON_ROLL_CCW}, {"NDOF_BUTTON_SPIN_CW", event_type_items_NDOF_BUTTON_SPIN_CW}, {"NDOF_BUTTON_SPIN_CCW", event_type_items_NDOF_BUTTON_SPIN_CCW}, {"NDOF_BUTTON_TILT_CW", event_type_items_NDOF_BUTTON_TILT_CW}, {"NDOF_BUTTON_TILT_CCW", event_type_items_NDOF_BUTTON_TILT_CCW}, {"NDOF_BUTTON_ROTATE", event_type_items_NDOF_BUTTON_ROTATE}, {"NDOF_BUTTON_PANZOOM", event_type_items_NDOF_BUTTON_PANZOOM}, {"NDOF_BUTTON_DOMINANT", event_type_items_NDOF_BUTTON_DOMINANT}, {"NDOF_BUTTON_PLUS", event_type_items_NDOF_BUTTON_PLUS}, {"NDOF_BUTTON_MINUS", event_type_items_NDOF_BUTTON_MINUS}, {"NDOF_BUTTON_ESC", event_type_items_NDOF_BUTTON_ESC}, {"NDOF_BUTTON_ALT", event_type_items_NDOF_BUTTON_ALT}, {"NDOF_BUTTON_SHIFT", event_type_items_NDOF_BUTTON_SHIFT}, {"NDOF_BUTTON_CTRL", event_type_items_NDOF_BUTTON_CTRL}, {"NDOF_BUTTON_1", event_type_items_NDOF_BUTTON_1}, {"NDOF_BUTTON_2", event_type_items_NDOF_BUTTON_2}, {"NDOF_BUTTON_3", event_type_items_NDOF_BUTTON_3}, {"NDOF_BUTTON_4", event_type_items_NDOF_BUTTON_4}, {"NDOF_BUTTON_5", event_type_items_NDOF_BUTTON_5}, {"NDOF_BUTTON_6", event_type_items_NDOF_BUTTON_6}, {"NDOF_BUTTON_7", event_type_items_NDOF_BUTTON_7}, {"NDOF_BUTTON_8", event_type_items_NDOF_BUTTON_8}, {"NDOF_BUTTON_9", event_type_items_NDOF_BUTTON_9}, {"NDOF_BUTTON_10", event_type_items_NDOF_BUTTON_10}, {"NDOF_BUTTON_A", event_type_items_NDOF_BUTTON_A}, {"NDOF_BUTTON_B", event_type_items_NDOF_BUTTON_B}, {"NDOF_BUTTON_C", event_type_items_NDOF_BUTTON_C}};
	};

	std::map<int, std::string> create_event_type_items_to_string() {
		return {{event_type_items_NONE, "NONE"}, {event_type_items_LEFTMOUSE, "LEFTMOUSE"}, {event_type_items_MIDDLEMOUSE, "MIDDLEMOUSE"}, {event_type_items_RIGHTMOUSE, "RIGHTMOUSE"}, {event_type_items_BUTTON4MOUSE, "BUTTON4MOUSE"}, {event_type_items_BUTTON5MOUSE, "BUTTON5MOUSE"}, {event_type_items_BUTTON6MOUSE, "BUTTON6MOUSE"}, {event_type_items_BUTTON7MOUSE, "BUTTON7MOUSE"}, {event_type_items_ACTIONMOUSE, "ACTIONMOUSE"}, {event_type_items_SELECTMOUSE, "SELECTMOUSE"}, {event_type_items_MOUSEMOVE, "MOUSEMOVE"}, {event_type_items_INBETWEEN_MOUSEMOVE, "INBETWEEN_MOUSEMOVE"}, {event_type_items_TRACKPADPAN, "TRACKPADPAN"}, {event_type_items_TRACKPADZOOM, "TRACKPADZOOM"}, {event_type_items_MOUSEROTATE, "MOUSEROTATE"}, {event_type_items_WHEELUPMOUSE, "WHEELUPMOUSE"}, {event_type_items_WHEELDOWNMOUSE, "WHEELDOWNMOUSE"}, {event_type_items_WHEELINMOUSE, "WHEELINMOUSE"}, {event_type_items_WHEELOUTMOUSE, "WHEELOUTMOUSE"}, {event_type_items_EVT_TWEAK_L, "EVT_TWEAK_L"}, {event_type_items_EVT_TWEAK_M, "EVT_TWEAK_M"}, {event_type_items_EVT_TWEAK_R, "EVT_TWEAK_R"}, {event_type_items_EVT_TWEAK_A, "EVT_TWEAK_A"}, {event_type_items_EVT_TWEAK_S, "EVT_TWEAK_S"}, {event_type_items_A, "A"}, {event_type_items_B, "B"}, {event_type_items_C, "C"}, {event_type_items_D, "D"}, {event_type_items_E, "E"}, {event_type_items_F, "F"}, {event_type_items_G, "G"}, {event_type_items_H, "H"}, {event_type_items_I, "I"}, {event_type_items_J, "J"}, {event_type_items_K, "K"}, {event_type_items_L, "L"}, {event_type_items_M, "M"}, {event_type_items_N, "N"}, {event_type_items_O, "O"}, {event_type_items_P, "P"}, {event_type_items_Q, "Q"}, {event_type_items_R, "R"}, {event_type_items_S, "S"}, {event_type_items_T, "T"}, {event_type_items_U, "U"}, {event_type_items_V, "V"}, {event_type_items_W, "W"}, {event_type_items_X, "X"}, {event_type_items_Y, "Y"}, {event_type_items_Z, "Z"}, {event_type_items_ZERO, "ZERO"}, {event_type_items_ONE, "ONE"}, {event_type_items_TWO, "TWO"}, {event_type_items_THREE, "THREE"}, {event_type_items_FOUR, "FOUR"}, {event_type_items_FIVE, "FIVE"}, {event_type_items_SIX, "SIX"}, {event_type_items_SEVEN, "SEVEN"}, {event_type_items_EIGHT, "EIGHT"}, {event_type_items_NINE, "NINE"}, {event_type_items_LEFT_CTRL, "LEFT_CTRL"}, {event_type_items_LEFT_ALT, "LEFT_ALT"}, {event_type_items_LEFT_SHIFT, "LEFT_SHIFT"}, {event_type_items_RIGHT_ALT, "RIGHT_ALT"}, {event_type_items_RIGHT_CTRL, "RIGHT_CTRL"}, {event_type_items_RIGHT_SHIFT, "RIGHT_SHIFT"}, {event_type_items_OSKEY, "OSKEY"}, {event_type_items_GRLESS, "GRLESS"}, {event_type_items_ESC, "ESC"}, {event_type_items_TAB, "TAB"}, {event_type_items_RET, "RET"}, {event_type_items_SPACE, "SPACE"}, {event_type_items_LINE_FEED, "LINE_FEED"}, {event_type_items_BACK_SPACE, "BACK_SPACE"}, {event_type_items_DEL, "DEL"}, {event_type_items_SEMI_COLON, "SEMI_COLON"}, {event_type_items_PERIOD, "PERIOD"}, {event_type_items_COMMA, "COMMA"}, {event_type_items_QUOTE, "QUOTE"}, {event_type_items_ACCENT_GRAVE, "ACCENT_GRAVE"}, {event_type_items_MINUS, "MINUS"}, {event_type_items_SLASH, "SLASH"}, {event_type_items_BACK_SLASH, "BACK_SLASH"}, {event_type_items_EQUAL, "EQUAL"}, {event_type_items_LEFT_BRACKET, "LEFT_BRACKET"}, {event_type_items_RIGHT_BRACKET, "RIGHT_BRACKET"}, {event_type_items_LEFT_ARROW, "LEFT_ARROW"}, {event_type_items_DOWN_ARROW, "DOWN_ARROW"}, {event_type_items_RIGHT_ARROW, "RIGHT_ARROW"}, {event_type_items_UP_ARROW, "UP_ARROW"}, {event_type_items_NUMPAD_2, "NUMPAD_2"}, {event_type_items_NUMPAD_4, "NUMPAD_4"}, {event_type_items_NUMPAD_6, "NUMPAD_6"}, {event_type_items_NUMPAD_8, "NUMPAD_8"}, {event_type_items_NUMPAD_1, "NUMPAD_1"}, {event_type_items_NUMPAD_3, "NUMPAD_3"}, {event_type_items_NUMPAD_5, "NUMPAD_5"}, {event_type_items_NUMPAD_7, "NUMPAD_7"}, {event_type_items_NUMPAD_9, "NUMPAD_9"}, {event_type_items_NUMPAD_PERIOD, "NUMPAD_PERIOD"}, {event_type_items_NUMPAD_SLASH, "NUMPAD_SLASH"}, {event_type_items_NUMPAD_ASTERIX, "NUMPAD_ASTERIX"}, {event_type_items_NUMPAD_0, "NUMPAD_0"}, {event_type_items_NUMPAD_MINUS, "NUMPAD_MINUS"}, {event_type_items_NUMPAD_ENTER, "NUMPAD_ENTER"}, {event_type_items_NUMPAD_PLUS, "NUMPAD_PLUS"}, {event_type_items_F1, "F1"}, {event_type_items_F2, "F2"}, {event_type_items_F3, "F3"}, {event_type_items_F4, "F4"}, {event_type_items_F5, "F5"}, {event_type_items_F6, "F6"}, {event_type_items_F7, "F7"}, {event_type_items_F8, "F8"}, {event_type_items_F9, "F9"}, {event_type_items_F10, "F10"}, {event_type_items_F11, "F11"}, {event_type_items_F12, "F12"}, {event_type_items_F13, "F13"}, {event_type_items_F14, "F14"}, {event_type_items_F15, "F15"}, {event_type_items_F16, "F16"}, {event_type_items_F17, "F17"}, {event_type_items_F18, "F18"}, {event_type_items_F19, "F19"}, {event_type_items_PAUSE, "PAUSE"}, {event_type_items_INSERT, "INSERT"}, {event_type_items_HOME, "HOME"}, {event_type_items_PAGE_UP, "PAGE_UP"}, {event_type_items_PAGE_DOWN, "PAGE_DOWN"}, {event_type_items_END, "END"}, {event_type_items_MEDIA_PLAY, "MEDIA_PLAY"}, {event_type_items_MEDIA_STOP, "MEDIA_STOP"}, {event_type_items_MEDIA_FIRST, "MEDIA_FIRST"}, {event_type_items_MEDIA_LAST, "MEDIA_LAST"}, {event_type_items_TEXTINPUT, "TEXTINPUT"}, {event_type_items_WINDOW_DEACTIVATE, "WINDOW_DEACTIVATE"}, {event_type_items_TIMER, "TIMER"}, {event_type_items_TIMER0, "TIMER0"}, {event_type_items_TIMER1, "TIMER1"}, {event_type_items_TIMER2, "TIMER2"}, {event_type_items_TIMER_JOBS, "TIMER_JOBS"}, {event_type_items_TIMER_AUTOSAVE, "TIMER_AUTOSAVE"}, {event_type_items_TIMER_REPORT, "TIMER_REPORT"}, {event_type_items_TIMERREGION, "TIMERREGION"}, {event_type_items_NDOF_MOTION, "NDOF_MOTION"}, {event_type_items_NDOF_BUTTON_MENU, "NDOF_BUTTON_MENU"}, {event_type_items_NDOF_BUTTON_FIT, "NDOF_BUTTON_FIT"}, {event_type_items_NDOF_BUTTON_TOP, "NDOF_BUTTON_TOP"}, {event_type_items_NDOF_BUTTON_BOTTOM, "NDOF_BUTTON_BOTTOM"}, {event_type_items_NDOF_BUTTON_LEFT, "NDOF_BUTTON_LEFT"}, {event_type_items_NDOF_BUTTON_RIGHT, "NDOF_BUTTON_RIGHT"}, {event_type_items_NDOF_BUTTON_FRONT, "NDOF_BUTTON_FRONT"}, {event_type_items_NDOF_BUTTON_BACK, "NDOF_BUTTON_BACK"}, {event_type_items_NDOF_BUTTON_ISO1, "NDOF_BUTTON_ISO1"}, {event_type_items_NDOF_BUTTON_ISO2, "NDOF_BUTTON_ISO2"}, {event_type_items_NDOF_BUTTON_ROLL_CW, "NDOF_BUTTON_ROLL_CW"}, {event_type_items_NDOF_BUTTON_ROLL_CCW, "NDOF_BUTTON_ROLL_CCW"}, {event_type_items_NDOF_BUTTON_SPIN_CW, "NDOF_BUTTON_SPIN_CW"}, {event_type_items_NDOF_BUTTON_SPIN_CCW, "NDOF_BUTTON_SPIN_CCW"}, {event_type_items_NDOF_BUTTON_TILT_CW, "NDOF_BUTTON_TILT_CW"}, {event_type_items_NDOF_BUTTON_TILT_CCW, "NDOF_BUTTON_TILT_CCW"}, {event_type_items_NDOF_BUTTON_ROTATE, "NDOF_BUTTON_ROTATE"}, {event_type_items_NDOF_BUTTON_PANZOOM, "NDOF_BUTTON_PANZOOM"}, {event_type_items_NDOF_BUTTON_DOMINANT, "NDOF_BUTTON_DOMINANT"}, {event_type_items_NDOF_BUTTON_PLUS, "NDOF_BUTTON_PLUS"}, {event_type_items_NDOF_BUTTON_MINUS, "NDOF_BUTTON_MINUS"}, {event_type_items_NDOF_BUTTON_ESC, "NDOF_BUTTON_ESC"}, {event_type_items_NDOF_BUTTON_ALT, "NDOF_BUTTON_ALT"}, {event_type_items_NDOF_BUTTON_SHIFT, "NDOF_BUTTON_SHIFT"}, {event_type_items_NDOF_BUTTON_CTRL, "NDOF_BUTTON_CTRL"}, {event_type_items_NDOF_BUTTON_1, "NDOF_BUTTON_1"}, {event_type_items_NDOF_BUTTON_2, "NDOF_BUTTON_2"}, {event_type_items_NDOF_BUTTON_3, "NDOF_BUTTON_3"}, {event_type_items_NDOF_BUTTON_4, "NDOF_BUTTON_4"}, {event_type_items_NDOF_BUTTON_5, "NDOF_BUTTON_5"}, {event_type_items_NDOF_BUTTON_6, "NDOF_BUTTON_6"}, {event_type_items_NDOF_BUTTON_7, "NDOF_BUTTON_7"}, {event_type_items_NDOF_BUTTON_8, "NDOF_BUTTON_8"}, {event_type_items_NDOF_BUTTON_9, "NDOF_BUTTON_9"}, {event_type_items_NDOF_BUTTON_10, "NDOF_BUTTON_10"}, {event_type_items_NDOF_BUTTON_A, "NDOF_BUTTON_A"}, {event_type_items_NDOF_BUTTON_B, "NDOF_BUTTON_B"}, {event_type_items_NDOF_BUTTON_C, "NDOF_BUTTON_C"}};
	};

	const std::map<std::string, int> string_to_event_type_items = create_string_to_event_type_items();
	const std::map<int, std::string> event_type_items_to_string = create_event_type_items_to_string();

	event_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void type(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", event_type_items_to_string.at(value))
	}

	enum event_value_items_enum {
		event_value_items_ANY = -1,	
		event_value_items_NOTHING = 0,	
		event_value_items_PRESS = 1,	
		event_value_items_RELEASE = 2,	
		event_value_items_CLICK = 3,	
		event_value_items_DOUBLE_CLICK = 4,	
		event_value_items_NORTH = 1,	
		event_value_items_NORTH_EAST = 2,	
		event_value_items_EAST = 3,	
		event_value_items_SOUTH_EAST = 4,	
		event_value_items_SOUTH = 5,	
		event_value_items_SOUTH_WEST = 6,	
		event_value_items_WEST = 7,	
		event_value_items_NORTH_WEST = 8	
	};

	std::map<std::string, int> create_string_to_event_value_items() {
		return {{"ANY", event_value_items_ANY}, {"NOTHING", event_value_items_NOTHING}, {"PRESS", event_value_items_PRESS}, {"RELEASE", event_value_items_RELEASE}, {"CLICK", event_value_items_CLICK}, {"DOUBLE_CLICK", event_value_items_DOUBLE_CLICK}, {"NORTH", event_value_items_NORTH}, {"NORTH_EAST", event_value_items_NORTH_EAST}, {"EAST", event_value_items_EAST}, {"SOUTH_EAST", event_value_items_SOUTH_EAST}, {"SOUTH", event_value_items_SOUTH}, {"SOUTH_WEST", event_value_items_SOUTH_WEST}, {"WEST", event_value_items_WEST}, {"NORTH_WEST", event_value_items_NORTH_WEST}};
	};

	std::map<int, std::string> create_event_value_items_to_string() {
		return {{event_value_items_ANY, "ANY"}, {event_value_items_NOTHING, "NOTHING"}, {event_value_items_PRESS, "PRESS"}, {event_value_items_RELEASE, "RELEASE"}, {event_value_items_CLICK, "CLICK"}, {event_value_items_DOUBLE_CLICK, "DOUBLE_CLICK"}, {event_value_items_NORTH, "NORTH"}, {event_value_items_NORTH_EAST, "NORTH_EAST"}, {event_value_items_EAST, "EAST"}, {event_value_items_SOUTH_EAST, "SOUTH_EAST"}, {event_value_items_SOUTH, "SOUTH"}, {event_value_items_SOUTH_WEST, "SOUTH_WEST"}, {event_value_items_WEST, "WEST"}, {event_value_items_NORTH_WEST, "NORTH_WEST"}};
	};

	const std::map<std::string, int> string_to_event_value_items = create_string_to_event_value_items();
	const std::map<int, std::string> event_value_items_to_string = create_event_value_items_to_string();

	event_value_items_enum value() {
		STRING_TYPE_GETTER("value", static_cast<event_value_items_enum>(string_to_event_value_items.at(resstr)))
	}

	void value(event_value_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "value", event_value_items_to_string.at(value))
	}

	int id() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "id")
	}

	void id(int value) {
		PRIMITIVE_TYPES_SETTER("i", "id", value)
	}

	bool any() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "any")
	}

	void any(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "any", value)
	}

	bool shift() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "shift")
	}

	void shift(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "shift", value)
	}

	bool ctrl() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "ctrl")
	}

	void ctrl(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "ctrl", value)
	}

	bool alt() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "alt")
	}

	void alt(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "alt", value)
	}

	bool oskey() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "oskey")
	}

	void oskey(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "oskey", value)
	}

	event_type_items_enum key_modifier() {
		STRING_TYPE_GETTER("key_modifier", static_cast<event_type_items_enum>(string_to_event_type_items.at(resstr)))
	}

	void key_modifier(event_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "key_modifier", event_type_items_to_string.at(value))
	}

	bool show_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_expanded")
	}

	void show_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_expanded", value)
	}

	enum keymap_propvalue_items_enum {
		keymap_propvalue_items_NONE = 0	
	};

	std::map<std::string, int> create_string_to_keymap_propvalue_items() {
		return {{"NONE", keymap_propvalue_items_NONE}};
	};

	std::map<int, std::string> create_keymap_propvalue_items_to_string() {
		return {{keymap_propvalue_items_NONE, "NONE"}};
	};

	const std::map<std::string, int> string_to_keymap_propvalue_items = create_string_to_keymap_propvalue_items();
	const std::map<int, std::string> keymap_propvalue_items_to_string = create_keymap_propvalue_items_to_string();

	keymap_propvalue_items_enum propvalue() {
		STRING_TYPE_GETTER("propvalue", static_cast<keymap_propvalue_items_enum>(string_to_keymap_propvalue_items.at(resstr)))
	}

	void propvalue(keymap_propvalue_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "propvalue", keymap_propvalue_items_to_string.at(value))
	}

	bool active() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "active")
	}

	void active(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "active", value)
	}

	bool is_user_modified() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_user_modified")
	}

	void is_user_modified(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_user_modified", value)
	}

	bool is_user_defined() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_user_defined")
	}

	void is_user_defined(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_user_defined", value)
	}

	bool compare(KeyMapItem item) {
		PYTHON_FUNCTION_ARGS_CALL("compare", "O", item.get_pyobjref())
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}
};

class World : public ID {
public:
	World(PyObject* pyobj) : ID(pyobj) {}
	World() : ID(0) { }

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	std::map<std::string, WorldTextureSlot> texture_slots();

	Texture active_texture() {
		CLASS_TYPES_GETTER(Texture, "active_texture")
	}

	int active_texture_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_texture_index")
	}

	void active_texture_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_texture_index", value)
	}

	VFLOAT3 horizon_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "horizon_color", 3)
	}

	void horizon_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "horizon_color", 3)
	}

	VFLOAT3 zenith_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "zenith_color", 3)
	}

	void zenith_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "zenith_color", 3)
	}

	VFLOAT3 ambient_color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "ambient_color", 3)
	}

	void ambient_color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "ambient_color", 3)
	}

	float exposure() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "exposure")
	}

	void exposure(float value) {
		PRIMITIVE_TYPES_SETTER("f", "exposure", value)
	}

	float color_range() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "color_range")
	}

	void color_range(float value) {
		PRIMITIVE_TYPES_SETTER("f", "color_range", value)
	}

	bool use_sky_blend() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sky_blend")
	}

	void use_sky_blend(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sky_blend", value)
	}

	bool use_sky_paper() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sky_paper")
	}

	void use_sky_paper(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sky_paper", value)
	}

	bool use_sky_real() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_sky_real")
	}

	void use_sky_real(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_sky_real", value)
	}

	WorldLighting light_settings();

	WorldMistSettings mist_settings();

	NodeTree node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	bool use_nodes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_nodes")
	}

	void use_nodes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_nodes", value)
	}
};

class WorldLighting : public pyUniplug {
public:
	WorldLighting(PyObject* pyobj) : pyUniplug(pyobj) {}
	WorldLighting() : pyUniplug(0) { }

	bool use_ambient_occlusion() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_ambient_occlusion")
	}

	void use_ambient_occlusion(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_ambient_occlusion", value)
	}

	float ao_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "ao_factor")
	}

	void ao_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "ao_factor", value)
	}

	enum blend_mode_items_enum {
		blend_mode_items_MULTIPLY = 3,	
		blend_mode_items_ADD = 0	
	};

	std::map<std::string, int> create_string_to_blend_mode_items() {
		return {{"MULTIPLY", blend_mode_items_MULTIPLY}, {"ADD", blend_mode_items_ADD}};
	};

	std::map<int, std::string> create_blend_mode_items_to_string() {
		return {{blend_mode_items_MULTIPLY, "MULTIPLY"}, {blend_mode_items_ADD, "ADD"}};
	};

	const std::map<std::string, int> string_to_blend_mode_items = create_string_to_blend_mode_items();
	const std::map<int, std::string> blend_mode_items_to_string = create_blend_mode_items_to_string();

	blend_mode_items_enum ao_blend_type() {
		STRING_TYPE_GETTER("ao_blend_type", static_cast<blend_mode_items_enum>(string_to_blend_mode_items.at(resstr)))
	}

	void ao_blend_type(blend_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "ao_blend_type", blend_mode_items_to_string.at(value))
	}

	bool use_environment_light() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_environment_light")
	}

	void use_environment_light(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_environment_light", value)
	}

	float environment_energy() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "environment_energy")
	}

	void environment_energy(float value) {
		PRIMITIVE_TYPES_SETTER("f", "environment_energy", value)
	}

	enum prop_color_items_enum {
		prop_color_items_PLAIN = 0,	
		prop_color_items_SKY_COLOR = 1,	
		prop_color_items_SKY_TEXTURE = 2	
	};

	std::map<std::string, int> create_string_to_prop_color_items() {
		return {{"PLAIN", prop_color_items_PLAIN}, {"SKY_COLOR", prop_color_items_SKY_COLOR}, {"SKY_TEXTURE", prop_color_items_SKY_TEXTURE}};
	};

	std::map<int, std::string> create_prop_color_items_to_string() {
		return {{prop_color_items_PLAIN, "PLAIN"}, {prop_color_items_SKY_COLOR, "SKY_COLOR"}, {prop_color_items_SKY_TEXTURE, "SKY_TEXTURE"}};
	};

	const std::map<std::string, int> string_to_prop_color_items = create_string_to_prop_color_items();
	const std::map<int, std::string> prop_color_items_to_string = create_prop_color_items_to_string();

	prop_color_items_enum environment_color() {
		STRING_TYPE_GETTER("environment_color", static_cast<prop_color_items_enum>(string_to_prop_color_items.at(resstr)))
	}

	void environment_color(prop_color_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "environment_color", prop_color_items_to_string.at(value))
	}

	bool use_indirect_light() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_indirect_light")
	}

	void use_indirect_light(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_indirect_light", value)
	}

	float indirect_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "indirect_factor")
	}

	void indirect_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "indirect_factor", value)
	}

	int indirect_bounces() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "indirect_bounces")
	}

	void indirect_bounces(int value) {
		PRIMITIVE_TYPES_SETTER("i", "indirect_bounces", value)
	}

	enum prop_gather_method_items_enum {
		prop_gather_method_items_RAYTRACE = 0,	
		prop_gather_method_items_APPROXIMATE = 1	
	};

	std::map<std::string, int> create_string_to_prop_gather_method_items() {
		return {{"RAYTRACE", prop_gather_method_items_RAYTRACE}, {"APPROXIMATE", prop_gather_method_items_APPROXIMATE}};
	};

	std::map<int, std::string> create_prop_gather_method_items_to_string() {
		return {{prop_gather_method_items_RAYTRACE, "RAYTRACE"}, {prop_gather_method_items_APPROXIMATE, "APPROXIMATE"}};
	};

	const std::map<std::string, int> string_to_prop_gather_method_items = create_string_to_prop_gather_method_items();
	const std::map<int, std::string> prop_gather_method_items_to_string = create_prop_gather_method_items_to_string();

	prop_gather_method_items_enum gather_method() {
		STRING_TYPE_GETTER("gather_method", static_cast<prop_gather_method_items_enum>(string_to_prop_gather_method_items.at(resstr)))
	}

	void gather_method(prop_gather_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "gather_method", prop_gather_method_items_to_string.at(value))
	}

	int passes() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "passes")
	}

	void passes(int value) {
		PRIMITIVE_TYPES_SETTER("i", "passes", value)
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	float falloff_strength() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "falloff_strength")
	}

	void falloff_strength(float value) {
		PRIMITIVE_TYPES_SETTER("f", "falloff_strength", value)
	}

	float bias() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "bias")
	}

	void bias(float value) {
		PRIMITIVE_TYPES_SETTER("f", "bias", value)
	}

	float threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "threshold")
	}

	void threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "threshold", value)
	}

	float adapt_to_speed() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "adapt_to_speed")
	}

	void adapt_to_speed(float value) {
		PRIMITIVE_TYPES_SETTER("f", "adapt_to_speed", value)
	}

	float error_threshold() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "error_threshold")
	}

	void error_threshold(float value) {
		PRIMITIVE_TYPES_SETTER("f", "error_threshold", value)
	}

	float correction() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "correction")
	}

	void correction(float value) {
		PRIMITIVE_TYPES_SETTER("f", "correction", value)
	}

	bool use_falloff() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_falloff")
	}

	void use_falloff(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_falloff", value)
	}

	bool use_cache() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cache")
	}

	void use_cache(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cache", value)
	}

	int samples() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "samples")
	}

	void samples(int value) {
		PRIMITIVE_TYPES_SETTER("i", "samples", value)
	}

	enum prop_sample_method_items_enum {
		prop_sample_method_items_CONSTANT_JITTERED = 0,	
		prop_sample_method_items_ADAPTIVE_QMC = 1,	
		prop_sample_method_items_CONSTANT_QMC = 2	
	};

	std::map<std::string, int> create_string_to_prop_sample_method_items() {
		return {{"CONSTANT_JITTERED", prop_sample_method_items_CONSTANT_JITTERED}, {"ADAPTIVE_QMC", prop_sample_method_items_ADAPTIVE_QMC}, {"CONSTANT_QMC", prop_sample_method_items_CONSTANT_QMC}};
	};

	std::map<int, std::string> create_prop_sample_method_items_to_string() {
		return {{prop_sample_method_items_CONSTANT_JITTERED, "CONSTANT_JITTERED"}, {prop_sample_method_items_ADAPTIVE_QMC, "ADAPTIVE_QMC"}, {prop_sample_method_items_CONSTANT_QMC, "CONSTANT_QMC"}};
	};

	const std::map<std::string, int> string_to_prop_sample_method_items = create_string_to_prop_sample_method_items();
	const std::map<int, std::string> prop_sample_method_items_to_string = create_prop_sample_method_items_to_string();

	prop_sample_method_items_enum sample_method() {
		STRING_TYPE_GETTER("sample_method", static_cast<prop_sample_method_items_enum>(string_to_prop_sample_method_items.at(resstr)))
	}

	void sample_method(prop_sample_method_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sample_method", prop_sample_method_items_to_string.at(value))
	}
};

class WorldMistSettings : public pyUniplug {
public:
	WorldMistSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	WorldMistSettings() : pyUniplug(0) { }

	bool use_mist() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mist")
	}

	void use_mist(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mist", value)
	}

	float intensity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "intensity")
	}

	void intensity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "intensity", value)
	}

	float start() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "start")
	}

	void start(float value) {
		PRIMITIVE_TYPES_SETTER("f", "start", value)
	}

	float depth() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "depth")
	}

	void depth(float value) {
		PRIMITIVE_TYPES_SETTER("f", "depth", value)
	}

	float height() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "height")
	}

	void height(float value) {
		PRIMITIVE_TYPES_SETTER("f", "height", value)
	}

	enum falloff_items_enum {
		falloff_items_QUADRATIC = 0,	
		falloff_items_LINEAR = 1,	
		falloff_items_INVERSE_QUADRATIC = 2	
	};

	std::map<std::string, int> create_string_to_falloff_items() {
		return {{"QUADRATIC", falloff_items_QUADRATIC}, {"LINEAR", falloff_items_LINEAR}, {"INVERSE_QUADRATIC", falloff_items_INVERSE_QUADRATIC}};
	};

	std::map<int, std::string> create_falloff_items_to_string() {
		return {{falloff_items_QUADRATIC, "QUADRATIC"}, {falloff_items_LINEAR, "LINEAR"}, {falloff_items_INVERSE_QUADRATIC, "INVERSE_QUADRATIC"}};
	};

	const std::map<std::string, int> string_to_falloff_items = create_string_to_falloff_items();
	const std::map<int, std::string> falloff_items_to_string = create_falloff_items_to_string();

	falloff_items_enum falloff() {
		STRING_TYPE_GETTER("falloff", static_cast<falloff_items_enum>(string_to_falloff_items.at(resstr)))
	}

	void falloff(falloff_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff", falloff_items_to_string.at(value))
	}
};

class WorldTextureSlot : public TextureSlot {
public:
	WorldTextureSlot(PyObject* pyobj) : TextureSlot(pyobj) {}
	WorldTextureSlot() : TextureSlot(0) { }

	bool use_map_blend() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_blend")
	}

	void use_map_blend(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_blend", value)
	}

	bool use_map_horizon() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_horizon")
	}

	void use_map_horizon(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_horizon", value)
	}

	bool use_map_zenith_up() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_zenith_up")
	}

	void use_map_zenith_up(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_zenith_up", value)
	}

	bool use_map_zenith_down() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_map_zenith_down")
	}

	void use_map_zenith_down(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_map_zenith_down", value)
	}

	enum texco_items_enum {
		texco_items_VIEW = 128,	
		texco_items_GLOBAL = 8,	
		texco_items_ANGMAP = 64,	
		texco_items_SPHERE = 256,	
		texco_items_EQUIRECT = 2048,	
		texco_items_TUBE = 1024,	
		texco_items_OBJECT = 32	
	};

	std::map<std::string, int> create_string_to_texco_items() {
		return {{"VIEW", texco_items_VIEW}, {"GLOBAL", texco_items_GLOBAL}, {"ANGMAP", texco_items_ANGMAP}, {"SPHERE", texco_items_SPHERE}, {"EQUIRECT", texco_items_EQUIRECT}, {"TUBE", texco_items_TUBE}, {"OBJECT", texco_items_OBJECT}};
	};

	std::map<int, std::string> create_texco_items_to_string() {
		return {{texco_items_VIEW, "VIEW"}, {texco_items_GLOBAL, "GLOBAL"}, {texco_items_ANGMAP, "ANGMAP"}, {texco_items_SPHERE, "SPHERE"}, {texco_items_EQUIRECT, "EQUIRECT"}, {texco_items_TUBE, "TUBE"}, {texco_items_OBJECT, "OBJECT"}};
	};

	const std::map<std::string, int> string_to_texco_items = create_string_to_texco_items();
	const std::map<int, std::string> texco_items_to_string = create_texco_items_to_string();

	texco_items_enum texture_coords() {
		STRING_TYPE_GETTER("texture_coords", static_cast<texco_items_enum>(string_to_texco_items.at(resstr)))
	}

	void texture_coords(texco_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "texture_coords", texco_items_to_string.at(value))
	}

	Object object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	float blend_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "blend_factor")
	}

	void blend_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "blend_factor", value)
	}

	float horizon_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "horizon_factor")
	}

	void horizon_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "horizon_factor", value)
	}

	float zenith_up_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "zenith_up_factor")
	}

	void zenith_up_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "zenith_up_factor", value)
	}

	float zenith_down_factor() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "zenith_down_factor")
	}

	void zenith_down_factor(float value) {
		PRIMITIVE_TYPES_SETTER("f", "zenith_down_factor", value)
	}
};

class MovieClip : public ID {
public:
	MovieClip(PyObject* pyobj) : ID(pyobj) {}
	MovieClip() : ID(0) { }

	std::string filepath() {
		STRING_TYPE_GETTER("filepath", resstr)
	}

	void filepath(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "filepath", value)
	}

	MovieTracking tracking();

	MovieClipProxy proxy();

	bool use_proxy() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy")
	}

	void use_proxy(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy", value)
	}

	std::array<int, 2> size() {
		PRIMITIVE_TYPES_ARRAY_GETTER(int, PyLong_AsLong(item), "size", 2)
	}

	void size(int values[2]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("i", "size", 2)
	}

	VFLOAT2 display_aspect() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "display_aspect", 2)
	}

	void display_aspect(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "display_aspect", 2)
	}

	enum clip_source_items_enum {
		clip_source_items_SEQUENCE = 1,	
		clip_source_items_MOVIE = 2	
	};

	std::map<std::string, int> create_string_to_clip_source_items() {
		return {{"SEQUENCE", clip_source_items_SEQUENCE}, {"MOVIE", clip_source_items_MOVIE}};
	};

	std::map<int, std::string> create_clip_source_items_to_string() {
		return {{clip_source_items_SEQUENCE, "SEQUENCE"}, {clip_source_items_MOVIE, "MOVIE"}};
	};

	const std::map<std::string, int> string_to_clip_source_items = create_string_to_clip_source_items();
	const std::map<int, std::string> clip_source_items_to_string = create_clip_source_items_to_string();

	clip_source_items_enum source() {
		STRING_TYPE_GETTER("source", static_cast<clip_source_items_enum>(string_to_clip_source_items.at(resstr)))
	}

	void source(clip_source_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "source", clip_source_items_to_string.at(value))
	}

	bool use_proxy_custom_directory() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_proxy_custom_directory")
	}

	void use_proxy_custom_directory(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_proxy_custom_directory", value)
	}

	GreasePencil grease_pencil() {
		CLASS_TYPES_GETTER(GreasePencil, "grease_pencil")
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_offset() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_offset")
	}

	void frame_offset(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_offset", value)
	}

	int frame_duration() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_duration")
	}

	void frame_duration(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_duration", value)
	}

	ColorManagedInputColorspaceSettings colorspace_settings() {
		CLASS_TYPES_GETTER(ColorManagedInputColorspaceSettings, "colorspace_settings")
	}
};

class MovieClipProxy : public pyUniplug {
public:
	MovieClipProxy(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieClipProxy() : pyUniplug(0) { }

	bool build_25() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_25")
	}

	void build_25(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_25", value)
	}

	bool build_50() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_50")
	}

	void build_50(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_50", value)
	}

	bool build_75() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_75")
	}

	void build_75(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_75", value)
	}

	bool build_100() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_100")
	}

	void build_100(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_100", value)
	}

	bool build_undistorted_25() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_undistorted_25")
	}

	void build_undistorted_25(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_undistorted_25", value)
	}

	bool build_undistorted_50() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_undistorted_50")
	}

	void build_undistorted_50(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_undistorted_50", value)
	}

	bool build_undistorted_75() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_undistorted_75")
	}

	void build_undistorted_75(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_undistorted_75", value)
	}

	bool build_undistorted_100() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_undistorted_100")
	}

	void build_undistorted_100(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_undistorted_100", value)
	}

	bool build_record_run() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_record_run")
	}

	void build_record_run(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_record_run", value)
	}

	bool build_free_run() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_free_run")
	}

	void build_free_run(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_free_run", value)
	}

	bool build_free_run_rec_date() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "build_free_run_rec_date")
	}

	void build_free_run_rec_date(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "build_free_run_rec_date", value)
	}

	int quality() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "quality")
	}

	void quality(int value) {
		PRIMITIVE_TYPES_SETTER("i", "quality", value)
	}

	enum clip_tc_items_enum {
		clip_tc_items_NONE = 0,	
		clip_tc_items_RECORD_RUN = 1,	
		clip_tc_items_FREE_RUN = 2,	
		clip_tc_items_FREE_RUN_REC_DATE = 4,	
		clip_tc_items_FREE_RUN_NO_GAPS = 8	
	};

	std::map<std::string, int> create_string_to_clip_tc_items() {
		return {{"NONE", clip_tc_items_NONE}, {"RECORD_RUN", clip_tc_items_RECORD_RUN}, {"FREE_RUN", clip_tc_items_FREE_RUN}, {"FREE_RUN_REC_DATE", clip_tc_items_FREE_RUN_REC_DATE}, {"FREE_RUN_NO_GAPS", clip_tc_items_FREE_RUN_NO_GAPS}};
	};

	std::map<int, std::string> create_clip_tc_items_to_string() {
		return {{clip_tc_items_NONE, "NONE"}, {clip_tc_items_RECORD_RUN, "RECORD_RUN"}, {clip_tc_items_FREE_RUN, "FREE_RUN"}, {clip_tc_items_FREE_RUN_REC_DATE, "FREE_RUN_REC_DATE"}, {clip_tc_items_FREE_RUN_NO_GAPS, "FREE_RUN_NO_GAPS"}};
	};

	const std::map<std::string, int> string_to_clip_tc_items = create_string_to_clip_tc_items();
	const std::map<int, std::string> clip_tc_items_to_string = create_clip_tc_items_to_string();

	clip_tc_items_enum timecode() {
		STRING_TYPE_GETTER("timecode", static_cast<clip_tc_items_enum>(string_to_clip_tc_items.at(resstr)))
	}

	void timecode(clip_tc_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "timecode", clip_tc_items_to_string.at(value))
	}

	std::string directory() {
		STRING_TYPE_GETTER("directory", resstr)
	}

	void directory(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "directory", value)
	}
};

class MovieClipUser : public pyUniplug {
public:
	MovieClipUser(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieClipUser() : pyUniplug(0) { }

	int frame_current() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_current")
	}

	void frame_current(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_current", value)
	}

	enum clip_render_size_items_enum {
		clip_render_size_items_PROXY_25 = 1,	
		clip_render_size_items_PROXY_50 = 2,	
		clip_render_size_items_PROXY_75 = 3,	
		clip_render_size_items_PROXY_100 = 4,	
		clip_render_size_items_FULL = 0	
	};

	std::map<std::string, int> create_string_to_clip_render_size_items() {
		return {{"PROXY_25", clip_render_size_items_PROXY_25}, {"PROXY_50", clip_render_size_items_PROXY_50}, {"PROXY_75", clip_render_size_items_PROXY_75}, {"PROXY_100", clip_render_size_items_PROXY_100}, {"FULL", clip_render_size_items_FULL}};
	};

	std::map<int, std::string> create_clip_render_size_items_to_string() {
		return {{clip_render_size_items_PROXY_25, "PROXY_25"}, {clip_render_size_items_PROXY_50, "PROXY_50"}, {clip_render_size_items_PROXY_75, "PROXY_75"}, {clip_render_size_items_PROXY_100, "PROXY_100"}, {clip_render_size_items_FULL, "FULL"}};
	};

	const std::map<std::string, int> string_to_clip_render_size_items = create_string_to_clip_render_size_items();
	const std::map<int, std::string> clip_render_size_items_to_string = create_clip_render_size_items_to_string();

	clip_render_size_items_enum proxy_render_size() {
		STRING_TYPE_GETTER("proxy_render_size", static_cast<clip_render_size_items_enum>(string_to_clip_render_size_items.at(resstr)))
	}

	void proxy_render_size(clip_render_size_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "proxy_render_size", clip_render_size_items_to_string.at(value))
	}

	bool use_render_undistorted() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_render_undistorted")
	}

	void use_render_undistorted(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_render_undistorted", value)
	}
};

class MovieClipScopes : public pyUniplug {
public:
	MovieClipScopes(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieClipScopes() : pyUniplug(0) { }

};

class MovieTrackingSettings : public pyUniplug {
public:
	MovieTrackingSettings(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingSettings() : pyUniplug(0) { }

	enum speed_items_enum {
		speed_items_FASTEST = 0,	
		speed_items_DOUBLE = 5,	
		speed_items_REALTIME = 1,	
		speed_items_HALF = 2,	
		speed_items_QUARTER = 4	
	};

	std::map<std::string, int> create_string_to_speed_items() {
		return {{"FASTEST", speed_items_FASTEST}, {"DOUBLE", speed_items_DOUBLE}, {"REALTIME", speed_items_REALTIME}, {"HALF", speed_items_HALF}, {"QUARTER", speed_items_QUARTER}};
	};

	std::map<int, std::string> create_speed_items_to_string() {
		return {{speed_items_FASTEST, "FASTEST"}, {speed_items_DOUBLE, "DOUBLE"}, {speed_items_REALTIME, "REALTIME"}, {speed_items_HALF, "HALF"}, {speed_items_QUARTER, "QUARTER"}};
	};

	const std::map<std::string, int> string_to_speed_items = create_string_to_speed_items();
	const std::map<int, std::string> speed_items_to_string = create_speed_items_to_string();

	speed_items_enum speed() {
		STRING_TYPE_GETTER("speed", static_cast<speed_items_enum>(string_to_speed_items.at(resstr)))
	}

	void speed(speed_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "speed", speed_items_to_string.at(value))
	}

	bool use_keyframe_selection() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_keyframe_selection")
	}

	void use_keyframe_selection(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_keyframe_selection", value)
	}

	enum refine_items_enum {
		refine_items_NONE = 0,	
		refine_items_FOCAL_LENGTH = 1,	
		refine_items_FOCAL_LENGTH_RADIAL_K1 = 5,	
		refine_items_FOCAL_LENGTH_RADIAL_K1_K2 = 21,	
		refine_items_FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2 = 23,	
		refine_items_FOCAL_LENGTH_PRINCIPAL_POINT = 3,	
		refine_items_RADIAL_K1_K2 = 20	
	};

	std::map<std::string, int> create_string_to_refine_items() {
		return {{"NONE", refine_items_NONE}, {"FOCAL_LENGTH", refine_items_FOCAL_LENGTH}, {"FOCAL_LENGTH_RADIAL_K1", refine_items_FOCAL_LENGTH_RADIAL_K1}, {"FOCAL_LENGTH_RADIAL_K1_K2", refine_items_FOCAL_LENGTH_RADIAL_K1_K2}, {"FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2", refine_items_FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2}, {"FOCAL_LENGTH_PRINCIPAL_POINT", refine_items_FOCAL_LENGTH_PRINCIPAL_POINT}, {"RADIAL_K1_K2", refine_items_RADIAL_K1_K2}};
	};

	std::map<int, std::string> create_refine_items_to_string() {
		return {{refine_items_NONE, "NONE"}, {refine_items_FOCAL_LENGTH, "FOCAL_LENGTH"}, {refine_items_FOCAL_LENGTH_RADIAL_K1, "FOCAL_LENGTH_RADIAL_K1"}, {refine_items_FOCAL_LENGTH_RADIAL_K1_K2, "FOCAL_LENGTH_RADIAL_K1_K2"}, {refine_items_FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2, "FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2"}, {refine_items_FOCAL_LENGTH_PRINCIPAL_POINT, "FOCAL_LENGTH_PRINCIPAL_POINT"}, {refine_items_RADIAL_K1_K2, "RADIAL_K1_K2"}};
	};

	const std::map<std::string, int> string_to_refine_items = create_string_to_refine_items();
	const std::map<int, std::string> refine_items_to_string = create_refine_items_to_string();

	refine_items_enum refine_intrinsics() {
		STRING_TYPE_GETTER("refine_intrinsics", static_cast<refine_items_enum>(string_to_refine_items.at(resstr)))
	}

	void refine_intrinsics(refine_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "refine_intrinsics", refine_items_to_string.at(value))
	}

	float distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "distance")
	}

	void distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "distance", value)
	}

	int clean_frames() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "clean_frames")
	}

	void clean_frames(int value) {
		PRIMITIVE_TYPES_SETTER("i", "clean_frames", value)
	}

	float clean_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "clean_error")
	}

	void clean_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "clean_error", value)
	}

	enum cleanup_items_enum {
		cleanup_items_SELECT = 0,	
		cleanup_items_DELETE_TRACK = 1,	
		cleanup_items_DELETE_SEGMENTS = 2	
	};

	std::map<std::string, int> create_string_to_cleanup_items() {
		return {{"SELECT", cleanup_items_SELECT}, {"DELETE_TRACK", cleanup_items_DELETE_TRACK}, {"DELETE_SEGMENTS", cleanup_items_DELETE_SEGMENTS}};
	};

	std::map<int, std::string> create_cleanup_items_to_string() {
		return {{cleanup_items_SELECT, "SELECT"}, {cleanup_items_DELETE_TRACK, "DELETE_TRACK"}, {cleanup_items_DELETE_SEGMENTS, "DELETE_SEGMENTS"}};
	};

	const std::map<std::string, int> string_to_cleanup_items = create_string_to_cleanup_items();
	const std::map<int, std::string> cleanup_items_to_string = create_cleanup_items_to_string();

	cleanup_items_enum clean_action() {
		STRING_TYPE_GETTER("clean_action", static_cast<cleanup_items_enum>(string_to_cleanup_items.at(resstr)))
	}

	void clean_action(cleanup_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "clean_action", cleanup_items_to_string.at(value))
	}

	bool show_default_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_default_expanded")
	}

	void show_default_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_default_expanded", value)
	}

	bool show_extra_expanded() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_extra_expanded")
	}

	void show_extra_expanded(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_extra_expanded", value)
	}

	bool use_tripod_solver() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_tripod_solver")
	}

	void use_tripod_solver(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_tripod_solver", value)
	}

	int default_frames_limit() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_frames_limit")
	}

	void default_frames_limit(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_frames_limit", value)
	}

	enum pattern_match_items_enum {
		pattern_match_items_KEYFRAME = 0,	
		pattern_match_items_PREV_FRAME = 1	
	};

	std::map<std::string, int> create_string_to_pattern_match_items() {
		return {{"KEYFRAME", pattern_match_items_KEYFRAME}, {"PREV_FRAME", pattern_match_items_PREV_FRAME}};
	};

	std::map<int, std::string> create_pattern_match_items_to_string() {
		return {{pattern_match_items_KEYFRAME, "KEYFRAME"}, {pattern_match_items_PREV_FRAME, "PREV_FRAME"}};
	};

	const std::map<std::string, int> string_to_pattern_match_items = create_string_to_pattern_match_items();
	const std::map<int, std::string> pattern_match_items_to_string = create_pattern_match_items_to_string();

	pattern_match_items_enum default_pattern_match() {
		STRING_TYPE_GETTER("default_pattern_match", static_cast<pattern_match_items_enum>(string_to_pattern_match_items.at(resstr)))
	}

	void default_pattern_match(pattern_match_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "default_pattern_match", pattern_match_items_to_string.at(value))
	}

	int default_margin() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_margin")
	}

	void default_margin(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_margin", value)
	}

	enum tracker_motion_model_enum {
		tracker_motion_model_Perspective = 5,	
		tracker_motion_model_Affine = 4,	
		tracker_motion_model_LocRotScale = 3,	
		tracker_motion_model_LocScale = 2,	
		tracker_motion_model_LocRot = 1,	
		tracker_motion_model_Loc = 0	
	};

	std::map<std::string, int> create_string_to_tracker_motion_model() {
		return {{"Perspective", tracker_motion_model_Perspective}, {"Affine", tracker_motion_model_Affine}, {"LocRotScale", tracker_motion_model_LocRotScale}, {"LocScale", tracker_motion_model_LocScale}, {"LocRot", tracker_motion_model_LocRot}, {"Loc", tracker_motion_model_Loc}};
	};

	std::map<int, std::string> create_tracker_motion_model_to_string() {
		return {{tracker_motion_model_Perspective, "Perspective"}, {tracker_motion_model_Affine, "Affine"}, {tracker_motion_model_LocRotScale, "LocRotScale"}, {tracker_motion_model_LocScale, "LocScale"}, {tracker_motion_model_LocRot, "LocRot"}, {tracker_motion_model_Loc, "Loc"}};
	};

	const std::map<std::string, int> string_to_tracker_motion_model = create_string_to_tracker_motion_model();
	const std::map<int, std::string> tracker_motion_model_to_string = create_tracker_motion_model_to_string();

	tracker_motion_model_enum default_motion_model() {
		STRING_TYPE_GETTER("default_motion_model", static_cast<tracker_motion_model_enum>(string_to_tracker_motion_model.at(resstr)))
	}

	void default_motion_model(tracker_motion_model_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "default_motion_model", tracker_motion_model_to_string.at(value))
	}

	bool use_default_brute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_brute")
	}

	void use_default_brute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_brute", value)
	}

	bool use_default_mask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_mask")
	}

	void use_default_mask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_mask", value)
	}

	bool use_default_normalization() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_normalization")
	}

	void use_default_normalization(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_normalization", value)
	}

	float default_correlation_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_correlation_min")
	}

	void default_correlation_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_correlation_min", value)
	}

	int default_pattern_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_pattern_size")
	}

	void default_pattern_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_pattern_size", value)
	}

	int default_search_size() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "default_search_size")
	}

	void default_search_size(int value) {
		PRIMITIVE_TYPES_SETTER("i", "default_search_size", value)
	}

	bool use_default_red_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_red_channel")
	}

	void use_default_red_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_red_channel", value)
	}

	bool use_default_green_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_green_channel")
	}

	void use_default_green_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_green_channel", value)
	}

	bool use_default_blue_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_default_blue_channel")
	}

	void use_default_blue_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_default_blue_channel", value)
	}

	float default_weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "default_weight")
	}

	void default_weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "default_weight", value)
	}

	float object_distance() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "object_distance")
	}

	void object_distance(float value) {
		PRIMITIVE_TYPES_SETTER("f", "object_distance", value)
	}
};

class MovieTrackingCamera : public pyUniplug {
public:
	MovieTrackingCamera(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingCamera() : pyUniplug(0) { }

	enum distortion_model_items_enum {
		distortion_model_items_POLYNOMIAL = 0,	
		distortion_model_items_DIVISION = 1	
	};

	std::map<std::string, int> create_string_to_distortion_model_items() {
		return {{"POLYNOMIAL", distortion_model_items_POLYNOMIAL}, {"DIVISION", distortion_model_items_DIVISION}};
	};

	std::map<int, std::string> create_distortion_model_items_to_string() {
		return {{distortion_model_items_POLYNOMIAL, "POLYNOMIAL"}, {distortion_model_items_DIVISION, "DIVISION"}};
	};

	const std::map<std::string, int> string_to_distortion_model_items = create_string_to_distortion_model_items();
	const std::map<int, std::string> distortion_model_items_to_string = create_distortion_model_items_to_string();

	distortion_model_items_enum distortion_model() {
		STRING_TYPE_GETTER("distortion_model", static_cast<distortion_model_items_enum>(string_to_distortion_model_items.at(resstr)))
	}

	void distortion_model(distortion_model_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "distortion_model", distortion_model_items_to_string.at(value))
	}

	float sensor_width() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "sensor_width")
	}

	void sensor_width(float value) {
		PRIMITIVE_TYPES_SETTER("f", "sensor_width", value)
	}

	float focal_length() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "focal_length")
	}

	void focal_length(float value) {
		PRIMITIVE_TYPES_SETTER("f", "focal_length", value)
	}

	float focal_length_pixels() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "focal_length_pixels")
	}

	void focal_length_pixels(float value) {
		PRIMITIVE_TYPES_SETTER("f", "focal_length_pixels", value)
	}

	enum camera_units_items_enum {
		camera_units_items_PIXELS = 0,	
		camera_units_items_MILLIMETERS = 1	
	};

	std::map<std::string, int> create_string_to_camera_units_items() {
		return {{"PIXELS", camera_units_items_PIXELS}, {"MILLIMETERS", camera_units_items_MILLIMETERS}};
	};

	std::map<int, std::string> create_camera_units_items_to_string() {
		return {{camera_units_items_PIXELS, "PIXELS"}, {camera_units_items_MILLIMETERS, "MILLIMETERS"}};
	};

	const std::map<std::string, int> string_to_camera_units_items = create_string_to_camera_units_items();
	const std::map<int, std::string> camera_units_items_to_string = create_camera_units_items_to_string();

	camera_units_items_enum units() {
		STRING_TYPE_GETTER("units", static_cast<camera_units_items_enum>(string_to_camera_units_items.at(resstr)))
	}

	void units(camera_units_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "units", camera_units_items_to_string.at(value))
	}

	VFLOAT2 principal() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "principal", 2)
	}

	void principal(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "principal", 2)
	}

	float k1() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "k1")
	}

	void k1(float value) {
		PRIMITIVE_TYPES_SETTER("f", "k1", value)
	}

	float k2() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "k2")
	}

	void k2(float value) {
		PRIMITIVE_TYPES_SETTER("f", "k2", value)
	}

	float k3() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "k3")
	}

	void k3(float value) {
		PRIMITIVE_TYPES_SETTER("f", "k3", value)
	}

	float division_k1() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "division_k1")
	}

	void division_k1(float value) {
		PRIMITIVE_TYPES_SETTER("f", "division_k1", value)
	}

	float division_k2() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "division_k2")
	}

	void division_k2(float value) {
		PRIMITIVE_TYPES_SETTER("f", "division_k2", value)
	}

	float pixel_aspect() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "pixel_aspect")
	}

	void pixel_aspect(float value) {
		PRIMITIVE_TYPES_SETTER("f", "pixel_aspect", value)
	}
};

class MovieTrackingMarker : public pyUniplug {
public:
	MovieTrackingMarker(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingMarker() : pyUniplug(0) { }

	VFLOAT2 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 2)
	}

	void co(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 2)
	}

	int frame() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame")
	}

	void frame(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame", value)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}

	std::array<float, 8> pattern_corners() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "pattern_corners", 8)
	}

	void pattern_corners(float values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "pattern_corners", 8)
	}

	VFLOAT4 pattern_bound_box() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "pattern_bound_box", 4)
	}

	void pattern_bound_box(VFLOAT4 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "pattern_bound_box", 4)
	}

	VFLOAT2 search_min() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "search_min", 2)
	}

	void search_min(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "search_min", 2)
	}

	VFLOAT2 search_max() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "search_max", 2)
	}

	void search_max(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "search_max", 2)
	}

	bool is_keyed() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_keyed")
	}

	void is_keyed(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_keyed", value)
	}
};

class MovieTrackingTrack : public pyUniplug {
public:
	MovieTrackingTrack(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingTrack() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	int frames_limit() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frames_limit")
	}

	void frames_limit(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frames_limit", value)
	}

	enum pattern_match_items_enum {
		pattern_match_items_KEYFRAME = 0,	
		pattern_match_items_PREV_FRAME = 1	
	};

	std::map<std::string, int> create_string_to_pattern_match_items() {
		return {{"KEYFRAME", pattern_match_items_KEYFRAME}, {"PREV_FRAME", pattern_match_items_PREV_FRAME}};
	};

	std::map<int, std::string> create_pattern_match_items_to_string() {
		return {{pattern_match_items_KEYFRAME, "KEYFRAME"}, {pattern_match_items_PREV_FRAME, "PREV_FRAME"}};
	};

	const std::map<std::string, int> string_to_pattern_match_items = create_string_to_pattern_match_items();
	const std::map<int, std::string> pattern_match_items_to_string = create_pattern_match_items_to_string();

	pattern_match_items_enum pattern_match() {
		STRING_TYPE_GETTER("pattern_match", static_cast<pattern_match_items_enum>(string_to_pattern_match_items.at(resstr)))
	}

	void pattern_match(pattern_match_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "pattern_match", pattern_match_items_to_string.at(value))
	}

	int margin() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "margin")
	}

	void margin(int value) {
		PRIMITIVE_TYPES_SETTER("i", "margin", value)
	}

	enum tracker_motion_model_enum {
		tracker_motion_model_Perspective = 5,	
		tracker_motion_model_Affine = 4,	
		tracker_motion_model_LocRotScale = 3,	
		tracker_motion_model_LocScale = 2,	
		tracker_motion_model_LocRot = 1,	
		tracker_motion_model_Loc = 0	
	};

	std::map<std::string, int> create_string_to_tracker_motion_model() {
		return {{"Perspective", tracker_motion_model_Perspective}, {"Affine", tracker_motion_model_Affine}, {"LocRotScale", tracker_motion_model_LocRotScale}, {"LocScale", tracker_motion_model_LocScale}, {"LocRot", tracker_motion_model_LocRot}, {"Loc", tracker_motion_model_Loc}};
	};

	std::map<int, std::string> create_tracker_motion_model_to_string() {
		return {{tracker_motion_model_Perspective, "Perspective"}, {tracker_motion_model_Affine, "Affine"}, {tracker_motion_model_LocRotScale, "LocRotScale"}, {tracker_motion_model_LocScale, "LocScale"}, {tracker_motion_model_LocRot, "LocRot"}, {tracker_motion_model_Loc, "Loc"}};
	};

	const std::map<std::string, int> string_to_tracker_motion_model = create_string_to_tracker_motion_model();
	const std::map<int, std::string> tracker_motion_model_to_string = create_tracker_motion_model_to_string();

	tracker_motion_model_enum motion_model() {
		STRING_TYPE_GETTER("motion_model", static_cast<tracker_motion_model_enum>(string_to_tracker_motion_model.at(resstr)))
	}

	void motion_model(tracker_motion_model_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "motion_model", tracker_motion_model_to_string.at(value))
	}

	float correlation_min() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "correlation_min")
	}

	void correlation_min(float value) {
		PRIMITIVE_TYPES_SETTER("f", "correlation_min", value)
	}

	bool use_brute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_brute")
	}

	void use_brute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_brute", value)
	}

	bool use_mask() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_mask")
	}

	void use_mask(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_mask", value)
	}

	bool use_normalization() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_normalization")
	}

	void use_normalization(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_normalization", value)
	}

	std::map<std::string, MovieTrackingMarker> markers() {
		MAP_TYPE_GETTER("markers", MovieTrackingMarker)
	}

	bool use_red_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_red_channel")
	}

	void use_red_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_red_channel", value)
	}

	bool use_green_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_green_channel")
	}

	void use_green_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_green_channel", value)
	}

	bool use_blue_channel() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_blue_channel")
	}

	void use_blue_channel(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_blue_channel", value)
	}

	bool use_grayscale_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_grayscale_preview")
	}

	void use_grayscale_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_grayscale_preview", value)
	}

	bool use_alpha_preview() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_alpha_preview")
	}

	void use_alpha_preview(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_alpha_preview", value)
	}

	bool has_bundle() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "has_bundle")
	}

	void has_bundle(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "has_bundle", value)
	}

	VFLOAT3 bundle() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "bundle", 3)
	}

	void bundle(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "bundle", 3)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool select_anchor() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_anchor")
	}

	void select_anchor(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_anchor", value)
	}

	bool select_pattern() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_pattern")
	}

	void select_pattern(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_pattern", value)
	}

	bool select_search() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select_search")
	}

	void select_search(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select_search", value)
	}

	bool lock_value() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "lock")
	}

	void lock_value(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "lock", value)
	}

	bool use_custom_color() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_custom_color")
	}

	void use_custom_color(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_custom_color", value)
	}

	VFLOAT3 color() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "color", 3)
	}

	void color(VFLOAT3 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "color", 3)
	}

	float average_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "average_error")
	}

	void average_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "average_error", value)
	}

	GreasePencil grease_pencil() {
		CLASS_TYPES_GETTER(GreasePencil, "grease_pencil")
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	VFLOAT2 offset() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "offset", 2)
	}

	void offset(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "offset", 2)
	}
};

class MovieTrackingPlaneMarker : public pyUniplug {
public:
	MovieTrackingPlaneMarker(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingPlaneMarker() : pyUniplug(0) { }

	int frame() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame")
	}

	void frame(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame", value)
	}

	std::array<float, 8> corners() {
		PRIMITIVE_TYPES_ARRAY_GETTER(float, (float)PyFloat_AsDouble(item), "corners", 8)
	}

	void corners(float values[8]) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "corners", 8)
	}

	bool mute() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "mute")
	}

	void mute(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "mute", value)
	}
};

class MovieTrackingPlaneTrack : public pyUniplug {
public:
	MovieTrackingPlaneTrack(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingPlaneTrack() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MovieTrackingPlaneMarker> markers() {
		MAP_TYPE_GETTER("markers", MovieTrackingPlaneMarker)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	bool use_auto_keying() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_auto_keying")
	}

	void use_auto_keying(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_auto_keying", value)
	}

	Image image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	float image_opacity() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "image_opacity")
	}

	void image_opacity(float value) {
		PRIMITIVE_TYPES_SETTER("f", "image_opacity", value)
	}
};

class MovieTrackingStabilization : public pyUniplug {
public:
	MovieTrackingStabilization(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingStabilization() : pyUniplug(0) { }

	bool use_2d_stabilization() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_2d_stabilization")
	}

	void use_2d_stabilization(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_2d_stabilization", value)
	}

	std::map<std::string, MovieTrackingTrack> tracks() {
		MAP_TYPE_GETTER("tracks", MovieTrackingTrack)
	}

	MovieTrackingTrack rotation_track() {
		CLASS_TYPES_GETTER(MovieTrackingTrack, "rotation_track")
	}

	int active_track_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_track_index")
	}

	void active_track_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_track_index", value)
	}

	bool use_autoscale() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_autoscale")
	}

	void use_autoscale(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_autoscale", value)
	}

	float scale_max() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale_max")
	}

	void scale_max(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale_max", value)
	}

	float influence_location() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence_location")
	}

	void influence_location(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence_location", value)
	}

	float influence_scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence_scale")
	}

	void influence_scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence_scale", value)
	}

	bool use_stabilize_rotation() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_stabilize_rotation")
	}

	void use_stabilize_rotation(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_stabilize_rotation", value)
	}

	float influence_rotation() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "influence_rotation")
	}

	void influence_rotation(float value) {
		PRIMITIVE_TYPES_SETTER("f", "influence_rotation", value)
	}

	enum filter_items_enum {
		filter_items_NEAREST = 0,	
		filter_items_BILINEAR = 1,	
		filter_items_BICUBIC = 2	
	};

	std::map<std::string, int> create_string_to_filter_items() {
		return {{"NEAREST", filter_items_NEAREST}, {"BILINEAR", filter_items_BILINEAR}, {"BICUBIC", filter_items_BICUBIC}};
	};

	std::map<int, std::string> create_filter_items_to_string() {
		return {{filter_items_NEAREST, "NEAREST"}, {filter_items_BILINEAR, "BILINEAR"}, {filter_items_BICUBIC, "BICUBIC"}};
	};

	const std::map<std::string, int> string_to_filter_items = create_string_to_filter_items();
	const std::map<int, std::string> filter_items_to_string = create_filter_items_to_string();

	filter_items_enum filter_type() {
		STRING_TYPE_GETTER("filter_type", static_cast<filter_items_enum>(string_to_filter_items.at(resstr)))
	}

	void filter_type(filter_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "filter_type", filter_items_to_string.at(value))
	}
};

class MovieReconstructedCamera : public pyUniplug {
public:
	MovieReconstructedCamera(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieReconstructedCamera() : pyUniplug(0) { }

	int frame() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame")
	}

	void frame(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame", value)
	}

	VFLOAT16 matrix() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "matrix", 16)
	}

	void matrix(VFLOAT16 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "matrix", 16)
	}

	float average_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "average_error")
	}

	void average_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "average_error", value)
	}
};

class MovieTrackingReconstruction : public pyUniplug {
public:
	MovieTrackingReconstruction(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingReconstruction() : pyUniplug(0) { }

	bool is_valid() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_valid")
	}

	void is_valid(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_valid", value)
	}

	float average_error() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "average_error")
	}

	void average_error(float value) {
		PRIMITIVE_TYPES_SETTER("f", "average_error", value)
	}

	std::map<std::string, MovieReconstructedCamera> cameras() {
		MAP_TYPE_GETTER("cameras", MovieReconstructedCamera)
	}
};

class MovieTrackingObject : public pyUniplug {
public:
	MovieTrackingObject(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingObject() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	bool is_camera() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "is_camera")
	}

	void is_camera(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "is_camera", value)
	}

	std::map<std::string, MovieTrackingTrack> tracks() {
		MAP_TYPE_GETTER("tracks", MovieTrackingTrack)
	}

	std::map<std::string, MovieTrackingPlaneTrack> plane_tracks() {
		MAP_TYPE_GETTER("plane_tracks", MovieTrackingPlaneTrack)
	}

	MovieTrackingReconstruction reconstruction() {
		CLASS_TYPES_GETTER(MovieTrackingReconstruction, "reconstruction")
	}

	float scale() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "scale")
	}

	void scale(float value) {
		PRIMITIVE_TYPES_SETTER("f", "scale", value)
	}

	int keyframe_a() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "keyframe_a")
	}

	void keyframe_a(int value) {
		PRIMITIVE_TYPES_SETTER("i", "keyframe_a", value)
	}

	int keyframe_b() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "keyframe_b")
	}

	void keyframe_b(int value) {
		PRIMITIVE_TYPES_SETTER("i", "keyframe_b", value)
	}
};

class MovieTrackingDopesheet : public pyUniplug {
public:
	MovieTrackingDopesheet(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTrackingDopesheet() : pyUniplug(0) { }

	enum sort_items_enum {
		sort_items_NAME = 0,	
		sort_items_LONGEST = 1,	
		sort_items_TOTAL = 2,	
		sort_items_AVERAGE_ERROR = 3	
	};

	std::map<std::string, int> create_string_to_sort_items() {
		return {{"NAME", sort_items_NAME}, {"LONGEST", sort_items_LONGEST}, {"TOTAL", sort_items_TOTAL}, {"AVERAGE_ERROR", sort_items_AVERAGE_ERROR}};
	};

	std::map<int, std::string> create_sort_items_to_string() {
		return {{sort_items_NAME, "NAME"}, {sort_items_LONGEST, "LONGEST"}, {sort_items_TOTAL, "TOTAL"}, {sort_items_AVERAGE_ERROR, "AVERAGE_ERROR"}};
	};

	const std::map<std::string, int> string_to_sort_items = create_string_to_sort_items();
	const std::map<int, std::string> sort_items_to_string = create_sort_items_to_string();

	sort_items_enum sort_method() {
		STRING_TYPE_GETTER("sort_method", static_cast<sort_items_enum>(string_to_sort_items.at(resstr)))
	}

	void sort_method(sort_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "sort_method", sort_items_to_string.at(value))
	}

	bool use_invert_sort() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_invert_sort")
	}

	void use_invert_sort(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_invert_sort", value)
	}

	bool show_only_selected() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_only_selected")
	}

	void show_only_selected(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_only_selected", value)
	}

	bool show_hidden() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "show_hidden")
	}

	void show_hidden(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "show_hidden", value)
	}
};

class MovieTracking : public pyUniplug {
public:
	MovieTracking(PyObject* pyobj) : pyUniplug(pyobj) {}
	MovieTracking() : pyUniplug(0) { }

	MovieTrackingSettings settings() {
		CLASS_TYPES_GETTER(MovieTrackingSettings, "settings")
	}

	MovieTrackingCamera camera() {
		CLASS_TYPES_GETTER(MovieTrackingCamera, "camera")
	}

	std::map<std::string, MovieTrackingTrack> tracks() {
		MAP_TYPE_GETTER("tracks", MovieTrackingTrack)
	}

	std::map<std::string, MovieTrackingPlaneTrack> plane_tracks() {
		MAP_TYPE_GETTER("plane_tracks", MovieTrackingPlaneTrack)
	}

	MovieTrackingStabilization stabilization() {
		CLASS_TYPES_GETTER(MovieTrackingStabilization, "stabilization")
	}

	MovieTrackingReconstruction reconstruction() {
		CLASS_TYPES_GETTER(MovieTrackingReconstruction, "reconstruction")
	}

	std::map<std::string, MovieTrackingObject> objects() {
		MAP_TYPE_GETTER("objects", MovieTrackingObject)
	}

	int active_object_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_object_index")
	}

	void active_object_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_object_index", value)
	}

	MovieTrackingDopesheet dopesheet() {
		CLASS_TYPES_GETTER(MovieTrackingDopesheet, "dopesheet")
	}
};

class MaskParent : public pyUniplug {
public:
	MaskParent(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskParent() : pyUniplug(0) { }

	ID id() {
		CLASS_TYPES_GETTER(ID, "id")
	}

	enum mask_id_type_items_enum {
		mask_id_type_items_MOVIECLIP = 17229	
	};

	std::map<std::string, int> create_string_to_mask_id_type_items() {
		return {{"MOVIECLIP", mask_id_type_items_MOVIECLIP}};
	};

	std::map<int, std::string> create_mask_id_type_items_to_string() {
		return {{mask_id_type_items_MOVIECLIP, "MOVIECLIP"}};
	};

	const std::map<std::string, int> string_to_mask_id_type_items = create_string_to_mask_id_type_items();
	const std::map<int, std::string> mask_id_type_items_to_string = create_mask_id_type_items_to_string();

	mask_id_type_items_enum id_type() {
		STRING_TYPE_GETTER("id_type", static_cast<mask_id_type_items_enum>(string_to_mask_id_type_items.at(resstr)))
	}

	void id_type(mask_id_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "id_type", mask_id_type_items_to_string.at(value))
	}

	enum parent_type_items_enum {
		parent_type_items_POINT_TRACK = 0,	
		parent_type_items_PLANE_TRACK = 1	
	};

	std::map<std::string, int> create_string_to_parent_type_items() {
		return {{"POINT_TRACK", parent_type_items_POINT_TRACK}, {"PLANE_TRACK", parent_type_items_PLANE_TRACK}};
	};

	std::map<int, std::string> create_parent_type_items_to_string() {
		return {{parent_type_items_POINT_TRACK, "POINT_TRACK"}, {parent_type_items_PLANE_TRACK, "PLANE_TRACK"}};
	};

	const std::map<std::string, int> string_to_parent_type_items = create_string_to_parent_type_items();
	const std::map<int, std::string> parent_type_items_to_string = create_parent_type_items_to_string();

	parent_type_items_enum type() {
		STRING_TYPE_GETTER("type", static_cast<parent_type_items_enum>(string_to_parent_type_items.at(resstr)))
	}

	void type(parent_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "type", parent_type_items_to_string.at(value))
	}

	std::string parent() {
		STRING_TYPE_GETTER("parent", resstr)
	}

	void parent(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "parent", value)
	}

	std::string sub_parent() {
		STRING_TYPE_GETTER("sub_parent", resstr)
	}

	void sub_parent(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "sub_parent", value)
	}
};

class MaskSplinePointUW : public pyUniplug {
public:
	MaskSplinePointUW(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskSplinePointUW() : pyUniplug(0) { }

	float u() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "u")
	}

	void u(float value) {
		PRIMITIVE_TYPES_SETTER("f", "u", value)
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}
};

class MaskSplinePoint : public pyUniplug {
public:
	MaskSplinePoint(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskSplinePoint() : pyUniplug(0) { }

	VFLOAT2 handle_left() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_left", 2)
	}

	void handle_left(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_left", 2)
	}

	VFLOAT2 co() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "co", 2)
	}

	void co(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "co", 2)
	}

	VFLOAT2 handle_right() {
		POD_VECTOR_TYPES_GETTER(FLOAT, (float)PyFloat_AsDouble(item), "handle_right", 2)
	}

	void handle_right(VFLOAT2 values) {
		PRIMITIVE_TYPES_ARRAY_SETTER("f", "handle_right", 2)
	}

	enum handle_type_items_enum {
		handle_type_items_AUTO = 1,	
		handle_type_items_VECTOR = 2,	
		handle_type_items_ALIGNED = 3,	
		handle_type_items_ALIGNED_DOUBLESIDE = 5,	
		handle_type_items_FREE = 0	
	};

	std::map<std::string, int> create_string_to_handle_type_items() {
		return {{"AUTO", handle_type_items_AUTO}, {"VECTOR", handle_type_items_VECTOR}, {"ALIGNED", handle_type_items_ALIGNED}, {"ALIGNED_DOUBLESIDE", handle_type_items_ALIGNED_DOUBLESIDE}, {"FREE", handle_type_items_FREE}};
	};

	std::map<int, std::string> create_handle_type_items_to_string() {
		return {{handle_type_items_AUTO, "AUTO"}, {handle_type_items_VECTOR, "VECTOR"}, {handle_type_items_ALIGNED, "ALIGNED"}, {handle_type_items_ALIGNED_DOUBLESIDE, "ALIGNED_DOUBLESIDE"}, {handle_type_items_FREE, "FREE"}};
	};

	const std::map<std::string, int> string_to_handle_type_items = create_string_to_handle_type_items();
	const std::map<int, std::string> handle_type_items_to_string = create_handle_type_items_to_string();

	handle_type_items_enum handle_type() {
		STRING_TYPE_GETTER("handle_type", static_cast<handle_type_items_enum>(string_to_handle_type_items.at(resstr)))
	}

	void handle_type(handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_type", handle_type_items_to_string.at(value))
	}

	handle_type_items_enum handle_left_type() {
		STRING_TYPE_GETTER("handle_left_type", static_cast<handle_type_items_enum>(string_to_handle_type_items.at(resstr)))
	}

	void handle_left_type(handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_left_type", handle_type_items_to_string.at(value))
	}

	handle_type_items_enum handle_right_type() {
		STRING_TYPE_GETTER("handle_right_type", static_cast<handle_type_items_enum>(string_to_handle_type_items.at(resstr)))
	}

	void handle_right_type(handle_type_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "handle_right_type", handle_type_items_to_string.at(value))
	}

	float weight() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "weight")
	}

	void weight(float value) {
		PRIMITIVE_TYPES_SETTER("f", "weight", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	MaskParent parent() {
		CLASS_TYPES_GETTER(MaskParent, "parent")
	}

	std::map<std::string, MaskSplinePointUW> feather_points() {
		MAP_TYPE_GETTER("feather_points", MaskSplinePointUW)
	}
};

class MaskSpline : public pyUniplug {
public:
	MaskSpline(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskSpline() : pyUniplug(0) { }

	enum spline_offset_mode_items_enum {
		spline_offset_mode_items_EVEN = 0,	
		spline_offset_mode_items_SMOOTH = 1	
	};

	std::map<std::string, int> create_string_to_spline_offset_mode_items() {
		return {{"EVEN", spline_offset_mode_items_EVEN}, {"SMOOTH", spline_offset_mode_items_SMOOTH}};
	};

	std::map<int, std::string> create_spline_offset_mode_items_to_string() {
		return {{spline_offset_mode_items_EVEN, "EVEN"}, {spline_offset_mode_items_SMOOTH, "SMOOTH"}};
	};

	const std::map<std::string, int> string_to_spline_offset_mode_items = create_string_to_spline_offset_mode_items();
	const std::map<int, std::string> spline_offset_mode_items_to_string = create_spline_offset_mode_items_to_string();

	spline_offset_mode_items_enum offset_mode() {
		STRING_TYPE_GETTER("offset_mode", static_cast<spline_offset_mode_items_enum>(string_to_spline_offset_mode_items.at(resstr)))
	}

	void offset_mode(spline_offset_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "offset_mode", spline_offset_mode_items_to_string.at(value))
	}

	enum spline_interpolation_items_enum {
		spline_interpolation_items_LINEAR = 1,	
		spline_interpolation_items_EASE = 2	
	};

	std::map<std::string, int> create_string_to_spline_interpolation_items() {
		return {{"LINEAR", spline_interpolation_items_LINEAR}, {"EASE", spline_interpolation_items_EASE}};
	};

	std::map<int, std::string> create_spline_interpolation_items_to_string() {
		return {{spline_interpolation_items_LINEAR, "LINEAR"}, {spline_interpolation_items_EASE, "EASE"}};
	};

	const std::map<std::string, int> string_to_spline_interpolation_items = create_string_to_spline_interpolation_items();
	const std::map<int, std::string> spline_interpolation_items_to_string = create_spline_interpolation_items_to_string();

	spline_interpolation_items_enum weight_interpolation() {
		STRING_TYPE_GETTER("weight_interpolation", static_cast<spline_interpolation_items_enum>(string_to_spline_interpolation_items.at(resstr)))
	}

	void weight_interpolation(spline_interpolation_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "weight_interpolation", spline_interpolation_items_to_string.at(value))
	}

	bool use_cyclic() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_cyclic")
	}

	void use_cyclic(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_cyclic", value)
	}

	bool use_fill() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fill")
	}

	void use_fill(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fill", value)
	}

	bool use_self_intersection_check() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_self_intersection_check")
	}

	void use_self_intersection_check(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_self_intersection_check", value)
	}

	std::map<std::string, MaskSplinePoint> points() {
		MAP_TYPE_GETTER("points", MaskSplinePoint)
	}
};

class MaskLayer : public pyUniplug {
public:
	MaskLayer(PyObject* pyobj) : pyUniplug(pyobj) {}
	MaskLayer() : pyUniplug(0) { }

	std::string name() {
		STRING_TYPE_GETTER("name", resstr)
	}

	void name(const std::string& value) {
		PRIMITIVE_TYPES_SETTER("s", "name", value)
	}

	std::map<std::string, MaskSpline> splines() {
		MAP_TYPE_GETTER("splines", MaskSpline)
	}

	bool hide() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide")
	}

	void hide(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide", value)
	}

	bool hide_select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_select")
	}

	void hide_select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_select", value)
	}

	bool hide_render() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "hide_render")
	}

	void hide_render(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "hide_render", value)
	}

	bool select() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "select")
	}

	void select(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "select", value)
	}

	float alpha() {
		PRIMITIVE_TYPES_GETTER(float, (float)PyFloat_AsDouble(val), "alpha")
	}

	void alpha(float value) {
		PRIMITIVE_TYPES_SETTER("f", "alpha", value)
	}

	enum masklay_blend_mode_items_enum {
		masklay_blend_mode_items_MERGE_ADD = 7,	
		masklay_blend_mode_items_MERGE_SUBTRACT = 8,	
		masklay_blend_mode_items_ADD = 0,	
		masklay_blend_mode_items_SUBTRACT = 1,	
		masklay_blend_mode_items_LIGHTEN = 2,	
		masklay_blend_mode_items_DARKEN = 3,	
		masklay_blend_mode_items_MUL = 4,	
		masklay_blend_mode_items_REPLACE = 5,	
		masklay_blend_mode_items_DIFFERENCE = 6	
	};

	std::map<std::string, int> create_string_to_masklay_blend_mode_items() {
		return {{"MERGE_ADD", masklay_blend_mode_items_MERGE_ADD}, {"MERGE_SUBTRACT", masklay_blend_mode_items_MERGE_SUBTRACT}, {"ADD", masklay_blend_mode_items_ADD}, {"SUBTRACT", masklay_blend_mode_items_SUBTRACT}, {"LIGHTEN", masklay_blend_mode_items_LIGHTEN}, {"DARKEN", masklay_blend_mode_items_DARKEN}, {"MUL", masklay_blend_mode_items_MUL}, {"REPLACE", masklay_blend_mode_items_REPLACE}, {"DIFFERENCE", masklay_blend_mode_items_DIFFERENCE}};
	};

	std::map<int, std::string> create_masklay_blend_mode_items_to_string() {
		return {{masklay_blend_mode_items_MERGE_ADD, "MERGE_ADD"}, {masklay_blend_mode_items_MERGE_SUBTRACT, "MERGE_SUBTRACT"}, {masklay_blend_mode_items_ADD, "ADD"}, {masklay_blend_mode_items_SUBTRACT, "SUBTRACT"}, {masklay_blend_mode_items_LIGHTEN, "LIGHTEN"}, {masklay_blend_mode_items_DARKEN, "DARKEN"}, {masklay_blend_mode_items_MUL, "MUL"}, {masklay_blend_mode_items_REPLACE, "REPLACE"}, {masklay_blend_mode_items_DIFFERENCE, "DIFFERENCE"}};
	};

	const std::map<std::string, int> string_to_masklay_blend_mode_items = create_string_to_masklay_blend_mode_items();
	const std::map<int, std::string> masklay_blend_mode_items_to_string = create_masklay_blend_mode_items_to_string();

	masklay_blend_mode_items_enum blend() {
		STRING_TYPE_GETTER("blend", static_cast<masklay_blend_mode_items_enum>(string_to_masklay_blend_mode_items.at(resstr)))
	}

	void blend(masklay_blend_mode_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "blend", masklay_blend_mode_items_to_string.at(value))
	}

	bool invert() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "invert")
	}

	void invert(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "invert", value)
	}

	enum proportional_falloff_curve_only_items_enum {
		proportional_falloff_curve_only_items_SMOOTH = 0,	
		proportional_falloff_curve_only_items_SPHERE = 1,	
		proportional_falloff_curve_only_items_ROOT = 2,	
		proportional_falloff_curve_only_items_INVERSE_SQUARE = 7,	
		proportional_falloff_curve_only_items_SHARP = 3,	
		proportional_falloff_curve_only_items_LINEAR = 4	
	};

	std::map<std::string, int> create_string_to_proportional_falloff_curve_only_items() {
		return {{"SMOOTH", proportional_falloff_curve_only_items_SMOOTH}, {"SPHERE", proportional_falloff_curve_only_items_SPHERE}, {"ROOT", proportional_falloff_curve_only_items_ROOT}, {"INVERSE_SQUARE", proportional_falloff_curve_only_items_INVERSE_SQUARE}, {"SHARP", proportional_falloff_curve_only_items_SHARP}, {"LINEAR", proportional_falloff_curve_only_items_LINEAR}};
	};

	std::map<int, std::string> create_proportional_falloff_curve_only_items_to_string() {
		return {{proportional_falloff_curve_only_items_SMOOTH, "SMOOTH"}, {proportional_falloff_curve_only_items_SPHERE, "SPHERE"}, {proportional_falloff_curve_only_items_ROOT, "ROOT"}, {proportional_falloff_curve_only_items_INVERSE_SQUARE, "INVERSE_SQUARE"}, {proportional_falloff_curve_only_items_SHARP, "SHARP"}, {proportional_falloff_curve_only_items_LINEAR, "LINEAR"}};
	};

	const std::map<std::string, int> string_to_proportional_falloff_curve_only_items = create_string_to_proportional_falloff_curve_only_items();
	const std::map<int, std::string> proportional_falloff_curve_only_items_to_string = create_proportional_falloff_curve_only_items_to_string();

	proportional_falloff_curve_only_items_enum falloff() {
		STRING_TYPE_GETTER("falloff", static_cast<proportional_falloff_curve_only_items_enum>(string_to_proportional_falloff_curve_only_items.at(resstr)))
	}

	void falloff(proportional_falloff_curve_only_items_enum value) {
		PRIMITIVE_TYPES_SETTER("s", "falloff", proportional_falloff_curve_only_items_to_string.at(value))
	}

	bool use_fill_holes() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fill_holes")
	}

	void use_fill_holes(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fill_holes", value)
	}

	bool use_fill_overlap() {
		PRIMITIVE_TYPES_GETTER(bool, PyLong_AsLong(val)==1, "use_fill_overlap")
	}

	void use_fill_overlap(bool value) {
		PRIMITIVE_TYPES_SETTER("i", "use_fill_overlap", value)
	}
};

class Mask : public ID {
public:
	Mask(PyObject* pyobj) : ID(pyobj) {}
	Mask() : ID(0) { }

	std::map<std::string, MaskLayer> layers() {
		MAP_TYPE_GETTER("layers", MaskLayer)
	}

	int active_layer_index() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "active_layer_index")
	}

	void active_layer_index(int value) {
		PRIMITIVE_TYPES_SETTER("i", "active_layer_index", value)
	}

	int frame_start() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_start")
	}

	void frame_start(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_start", value)
	}

	int frame_end() {
		PRIMITIVE_TYPES_GETTER(int, PyLong_AsLong(val), "frame_end")
	}

	void frame_end(int value) {
		PRIMITIVE_TYPES_SETTER("i", "frame_end", value)
	}

	AnimData animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}
};

} /* namespace UniplugBL */

namespace UniplugBL {
	Context pyUniplug::context() {
		return Context(PyObject_GetAttrString(pyobjref, "context"));
	}

	StringProperty Struct::name_property() {
		CLASS_TYPES_GETTER(StringProperty, "name_property")
	}

	std::map<std::string, Property> Struct::properties() {
		MAP_TYPE_GETTER("properties", Property)
	}

	std::map<std::string, Function> Struct::functions() {
		MAP_TYPE_GETTER("functions", Function)
	}

	std::map<std::string, EnumPropertyItem> EnumProperty::enum_items() {
		MAP_TYPE_GETTER("enum_items", EnumPropertyItem)
	}

	Library ID::library() {
		CLASS_TYPES_GETTER(Library, "library")
	}

	AnimData ID::animation_data_create() {
		PYTHON_FUNCTION_CALL("animation_data_create")
		CLASS_TYPES_RETURN(AnimData)
	}

	PropertyGroup PropertyGroupItem::group() {
		CLASS_TYPES_GETTER(PropertyGroup, "group")
	}

	std::map<std::string, PropertyGroup> PropertyGroupItem::collection() {
		MAP_TYPE_GETTER("collection", PropertyGroup)
	}

	std::map<std::string, PropertyGroup> PropertyGroupItem::idp_array() {
		MAP_TYPE_GETTER("idp_array", PropertyGroup)
	}

	void IDMaterials::append(Material material) {
		PYTHON_FUNCTION_ARGS_CALL("append", "O", material.get_pyobjref())
	}

	Material IDMaterials::pop(int index, bool update_data) {
		PYTHON_FUNCTION_ARGS_CALL("pop", "ii", index, update_data)
		CLASS_TYPES_RETURN(Material)
	}

	PackedFile Library::packed_file() {
		CLASS_TYPES_GETTER(PackedFile, "packed_file")
	}

	ColorRamp Texture::color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	NodeTree Texture::node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	AnimData Texture::animation_data() {
		CLASS_TYPES_GETTER(AnimData, "animation_data")
	}

	Image ImageTexture::image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	ImageUser ImageTexture::image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	Image EnvironmentMapTexture::image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	ImageUser EnvironmentMapTexture::image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	EnvironmentMap EnvironmentMapTexture::environment_map() {
		CLASS_TYPES_GETTER(EnvironmentMap, "environment_map")
	}

	Object PointDensity::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	ParticleSystem PointDensity::particle_system() {
		CLASS_TYPES_GETTER(ParticleSystem, "particle_system")
	}

	ColorRamp PointDensity::color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	CurveMapping PointDensity::falloff_curve() {
		CLASS_TYPES_GETTER(CurveMapping, "falloff_curve")
	}

	Object VoxelData::domain_object() {
		CLASS_TYPES_GETTER(Object, "domain_object")
	}

	Image VoxelDataTexture::image() {
		CLASS_TYPES_GETTER(Image, "image")
	}

	ImageUser VoxelDataTexture::image_user() {
		CLASS_TYPES_GETTER(ImageUser, "image_user")
	}

	Object OceanTexData::ocean_object() {
		CLASS_TYPES_GETTER(Object, "ocean_object")
	}

	Object EnvironmentMap::viewpoint_object() {
		CLASS_TYPES_GETTER(Object, "viewpoint_object")
	}

	void EnvironmentMap::save(const std::string filepath, Scene scene, float layout[12]) {
		ARRAY_TO_PYOBJ(layout, "O", 12)
		PYTHON_FUNCTION_ARGS_CALL("save", "sOO", filepath, scene.get_pyobjref(), layout_tupleval)
		DECREF_ARRAY_ITEMS(layout, 12)
	}

	ColorRamp ColorMapping::color_ramp() {
		CLASS_TYPES_GETTER(ColorRamp, "color_ramp")
	}

	std::map<std::string, FCurve> Action::fcurves() {
		MAP_TYPE_GETTER("fcurves", FCurve)
	}

	std::map<std::string, ActionGroup> Action::groups() {
		MAP_TYPE_GETTER("groups", ActionGroup)
	}

	std::map<std::string, TimelineMarker> Action::pose_markers() {
		MAP_TYPE_GETTER("pose_markers", TimelineMarker)
	}

	FCurve ActionFCurves::create(const std::string data_path, int index, const std::string action_group) {
		PYTHON_FUNCTION_ARGS_CALL("new", "sis", data_path, index, action_group)
		CLASS_TYPES_RETURN(FCurve)
	}

	void ActionFCurves::remove(FCurve fcurve) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", fcurve.get_pyobjref())
	}

	ActionGroup ActionGroups::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(ActionGroup)
	}

	void ActionGroups::remove(ActionGroup action_group) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", action_group.get_pyobjref())
	}

	TimelineMarker ActionPoseMarkers::active() {
		CLASS_TYPES_GETTER(TimelineMarker, "active")
	}

	TimelineMarker ActionPoseMarkers::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(TimelineMarker)
	}

	void ActionPoseMarkers::remove(TimelineMarker marker) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", marker.get_pyobjref())
	}

	std::map<std::string, FCurve> ActionGroup::channels() {
		MAP_TYPE_GETTER("channels", FCurve)
	}

	ThemeBoneColorSet ActionGroup::colors() {
		CLASS_TYPES_GETTER(ThemeBoneColorSet, "colors")
	}

	Group DopeSheet::filter_group() {
		CLASS_TYPES_GETTER(Group, "filter_group")
	}

	std::map<std::string, NlaTrack> AnimData::nla_tracks() {
		MAP_TYPE_GETTER("nla_tracks", NlaTrack)
	}

	std::map<std::string, FCurve> AnimData::drivers() {
		MAP_TYPE_GETTER("drivers", FCurve)
	}

	NlaTrack NlaTracks::active() {
		CLASS_TYPES_GETTER(NlaTrack, "active")
	}

	NlaTrack NlaTracks::create(NlaTrack prev) {
		PYTHON_FUNCTION_ARGS_CALL("new", "O", prev.get_pyobjref())
		CLASS_TYPES_RETURN(NlaTrack)
	}

	void NlaTracks::remove(NlaTrack track) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", track.get_pyobjref())
	}

	FCurve AnimDataDrivers::from_existing(FCurve src_driver) {
		PYTHON_FUNCTION_ARGS_CALL("from_existing", "O", src_driver.get_pyobjref())
		CLASS_TYPES_RETURN(FCurve)
	}

	KeyingSetInfo KeyingSet::type_info() {
		CLASS_TYPES_GETTER(KeyingSetInfo, "type_info")
	}

	std::map<std::string, KeyingSetPath> KeyingSet::paths() {
		MAP_TYPE_GETTER("paths", KeyingSetPath)
	}

	KeyingSetPath KeyingSetPaths::active() {
		CLASS_TYPES_GETTER(KeyingSetPath, "active")
	}

	KeyingSetPath KeyingSetPaths::add(ID target_id, const std::string data_path, int index, keyingset_path_grouping_items_enum group_method, const std::string group_name) {
		PYTHON_FUNCTION_ARGS_CALL("add", "Osiss", target_id.get_pyobjref(), data_path, index, keyingset_path_grouping_items_to_string.at(group_method), group_name)
		CLASS_TYPES_RETURN(KeyingSetPath)
	}

	void KeyingSetPaths::remove(KeyingSetPath path) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", path.get_pyobjref())
	}

	AnimVizOnionSkinning AnimViz::onion_skin_frames() {
		CLASS_TYPES_GETTER(AnimVizOnionSkinning, "onion_skin_frames")
	}

	AnimVizMotionPaths AnimViz::motion_path() {
		CLASS_TYPES_GETTER(AnimVizMotionPaths, "motion_path")
	}

	std::map<std::string, MotionPathVert> MotionPath::points() {
		MAP_TYPE_GETTER("points", MotionPathVert)
	}

	void Actuator::link(Controller controller) {
		PYTHON_FUNCTION_ARGS_CALL("link", "O", controller.get_pyobjref())
	}

	void Actuator::unlink(Controller controller) {
		PYTHON_FUNCTION_ARGS_CALL("unlink", "O", controller.get_pyobjref())
	}

	Object ObjectActuator::reference_object() {
		CLASS_TYPES_GETTER(Object, "reference_object")
	}

	Object CameraActuator::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Sound SoundActuator::sound() {
		CLASS_TYPES_GETTER(Sound, "sound")
	}

	Object PropertyActuator::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object EditObjectActuator::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object EditObjectActuator::track_object() {
		CLASS_TYPES_GETTER(Object, "track_object")
	}

	Mesh EditObjectActuator::mesh() {
		CLASS_TYPES_GETTER(Mesh, "mesh")
	}

	Object SceneActuator::camera() {
		CLASS_TYPES_GETTER(Object, "camera")
	}

	Scene SceneActuator::scene() {
		CLASS_TYPES_GETTER(Scene, "scene")
	}

	Text Filter2DActuator::glsl_shader() {
		CLASS_TYPES_GETTER(Text, "glsl_shader")
	}

	Object ParentActuator::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object ArmatureActuator::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object ArmatureActuator::secondary_target() {
		CLASS_TYPES_GETTER(Object, "secondary_target")
	}

	Object SteeringActuator::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object SteeringActuator::navmesh() {
		CLASS_TYPES_GETTER(Object, "navmesh")
	}

	std::map<std::string, Bone> Armature::bones() {
		MAP_TYPE_GETTER("bones", Bone)
	}

	std::map<std::string, EditBone> Armature::edit_bones() {
		MAP_TYPE_GETTER("edit_bones", EditBone)
	}

	Bone ArmatureBones::active() {
		CLASS_TYPES_GETTER(Bone, "active")
	}

	EditBone ArmatureEditBones::active() {
		CLASS_TYPES_GETTER(EditBone, "active")
	}

	EditBone ArmatureEditBones::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(EditBone)
	}

	void ArmatureEditBones::remove(EditBone bone) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", bone.get_pyobjref())
	}

	Object BoidRuleGoal::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object BoidRuleAvoid::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object BoidRuleFollowLeader::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	CurveMapping Brush::curve() {
		CLASS_TYPES_GETTER(CurveMapping, "curve")
	}

	PaintCurve Brush::paint_curve() {
		CLASS_TYPES_GETTER(PaintCurve, "paint_curve")
	}

	ColorRamp Brush::gradient() {
		CLASS_TYPES_GETTER(ColorRamp, "gradient")
	}

	BrushTextureSlot Brush::texture_slot() {
		CLASS_TYPES_GETTER(BrushTextureSlot, "texture_slot")
	}

	BrushTextureSlot Brush::mask_texture_slot() {
		CLASS_TYPES_GETTER(BrushTextureSlot, "mask_texture_slot")
	}

	Image Brush::clone_image() {
		CLASS_TYPES_GETTER(Image, "clone_image")
	}

	BrushCapabilities Brush::brush_capabilities() {
		CLASS_TYPES_GETTER(BrushCapabilities, "brush_capabilities")
	}

	SculptToolCapabilities Brush::sculpt_capabilities() {
		CLASS_TYPES_GETTER(SculptToolCapabilities, "sculpt_capabilities")
	}

	ImapaintToolCapabilities Brush::image_paint_capabilities() {
		CLASS_TYPES_GETTER(ImapaintToolCapabilities, "image_paint_capabilities")
	}

	CameraStereoData Camera::stereo() {
		CLASS_TYPES_GETTER(CameraStereoData, "stereo")
	}

	Object Camera::dof_object() {
		CLASS_TYPES_GETTER(Object, "dof_object")
	}

	GPUDOFSettings Camera::gpu_dof() {
		CLASS_TYPES_GETTER(GPUDOFSettings, "gpu_dof")
	}

	Camera::view_frame_result Camera::view_frame(Scene scene) {
		PYTHON_FUNCTION_ARGS_CALL("view_frame", "O", scene.get_pyobjref())
		CREATE_MULTIPLE_PYOBJS(*result_1_obj, *result_2_obj, *result_3_obj, *result_4_obj)
		UNPACK_TUPLE_TO_OBJS("view_frame", 4, &result_1_obj, &result_2_obj, &result_3_obj, &result_4_obj)
		POD_VECTOR_TYPES_CONV(result_1, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(result_2, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(result_3, FLOAT, (float)PyFloat_AsDouble(item), 3)
		POD_VECTOR_TYPES_CONV(result_4, FLOAT, (float)PyFloat_AsDouble(item), 3)
		NONCLASS_TYPES_RETURN(result_1_res, result_2_res, result_3_res, result_4_res)
	}

	EffectorWeights ClothSettings::effector_weights() {
		CLASS_TYPES_GETTER(EffectorWeights, "effector_weights")
	}

	ShapeKey ClothSettings::rest_shape_key() {
		CLASS_TYPES_GETTER(ShapeKey, "rest_shape_key")
	}

	Group ClothCollisionSettings::group() {
		CLASS_TYPES_GETTER(Group, "group")
	}

	CurveMapPoint CurveMapPoints::create(float position, float value) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ff", position, value)
		CLASS_TYPES_RETURN(CurveMapPoint)
	}

	void CurveMapPoints::remove(CurveMapPoint point) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", point.get_pyobjref())
	}

	ColorRampElement ColorRampElements::create(float position) {
		PYTHON_FUNCTION_ARGS_CALL("new", "f", position)
		CLASS_TYPES_RETURN(ColorRampElement)
	}

	void ColorRampElements::remove(ColorRampElement element) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", element.get_pyobjref())
	}

	Object ConstraintTarget::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object ChildOfConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Text PythonConstraint::text() {
		CLASS_TYPES_GETTER(Text, "text")
	}

	Object StretchToConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object FollowPathConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object LockedTrackConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object ActionConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object CopyScaleConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object CopyLocationConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object CopyRotationConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object CopyTransformsConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object FloorConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object TrackToConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object KinematicConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object KinematicConstraint::pole_target() {
		CLASS_TYPES_GETTER(Object, "pole_target")
	}

	Object RigidBodyJointConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object RigidBodyJointConstraint::child() {
		CLASS_TYPES_GETTER(Object, "child")
	}

	Object ClampToConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object LimitDistanceConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object TransformConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object ShrinkwrapConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object DampedTrackConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object SplineIKConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object PivotConstraint::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	MovieClip FollowTrackConstraint::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	Object FollowTrackConstraint::camera() {
		CLASS_TYPES_GETTER(Object, "camera")
	}

	Object FollowTrackConstraint::depth_object() {
		CLASS_TYPES_GETTER(Object, "depth_object")
	}

	MovieClip CameraSolverConstraint::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	MovieClip ObjectSolverConstraint::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	Object ObjectSolverConstraint::camera() {
		CLASS_TYPES_GETTER(Object, "camera")
	}

	WindowManager Context::window_manager() {
		CLASS_TYPES_GETTER(WindowManager, "window_manager")
	}

	Window Context::window() {
		CLASS_TYPES_GETTER(Window, "window")
	}

	Screen Context::screen() {
		CLASS_TYPES_GETTER(Screen, "screen")
	}

	Area Context::area() {
		CLASS_TYPES_GETTER(Area, "area")
	}

	Space Context::space_data() {
		CLASS_TYPES_GETTER(Space, "space_data")
	}

	Region Context::region() {
		CLASS_TYPES_GETTER(Region, "region")
	}

	RegionView3D Context::region_data() {
		CLASS_TYPES_GETTER(RegionView3D, "region_data")
	}

	BlendData Context::blend_data() {
		CLASS_TYPES_GETTER(BlendData, "blend_data")
	}

	Scene Context::scene() {
		CLASS_TYPES_GETTER(Scene, "scene")
	}

	ToolSettings Context::tool_settings() {
		CLASS_TYPES_GETTER(ToolSettings, "tool_settings")
	}

	UserPreferences Context::user_preferences() {
		CLASS_TYPES_GETTER(UserPreferences, "user_preferences")
	}

	void Controller::link(Sensor sensor, Actuator actuator) {
		PYTHON_FUNCTION_ARGS_CALL("link", "OO", sensor.get_pyobjref(), actuator.get_pyobjref())
	}

	void Controller::unlink(Sensor sensor, Actuator actuator) {
		PYTHON_FUNCTION_ARGS_CALL("unlink", "OO", sensor.get_pyobjref(), actuator.get_pyobjref())
	}

	Text PythonController::text() {
		CLASS_TYPES_GETTER(Text, "text")
	}

	Key Curve::shape_keys() {
		CLASS_TYPES_GETTER(Key, "shape_keys")
	}

	std::map<std::string, Spline> Curve::splines() {
		MAP_TYPE_GETTER("splines", Spline)
	}

	Object Curve::bevel_object() {
		CLASS_TYPES_GETTER(Object, "bevel_object")
	}

	Object Curve::taper_object() {
		CLASS_TYPES_GETTER(Object, "taper_object")
	}

	std::map<std::string, Material> Curve::materials() {
		MAP_TYPE_GETTER("materials", Material)
	}

	Spline CurveSplines::active() {
		CLASS_TYPES_GETTER(Spline, "active")
	}

	Spline CurveSplines::create(curve_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", curve_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(Spline)
	}

	void CurveSplines::remove(Spline spline) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", spline.get_pyobjref())
	}

	std::map<std::string, TextBox> TextCurve::text_boxes() {
		MAP_TYPE_GETTER("text_boxes", TextBox)
	}

	std::map<std::string, TextCharacterFormat> TextCurve::body_format() {
		MAP_TYPE_GETTER("body_format", TextCharacterFormat)
	}

	Object TextCurve::follow_curve() {
		CLASS_TYPES_GETTER(Object, "follow_curve")
	}

	VectorFont TextCurve::font() {
		CLASS_TYPES_GETTER(VectorFont, "font")
	}

	VectorFont TextCurve::font_bold() {
		CLASS_TYPES_GETTER(VectorFont, "font_bold")
	}

	VectorFont TextCurve::font_italic() {
		CLASS_TYPES_GETTER(VectorFont, "font_italic")
	}

	VectorFont TextCurve::font_bold_italic() {
		CLASS_TYPES_GETTER(VectorFont, "font_bold_italic")
	}

	TextCharacterFormat TextCurve::edit_format() {
		CLASS_TYPES_GETTER(TextCharacterFormat, "edit_format")
	}

	std::map<std::string, DynamicPaintSurface> DynamicPaintCanvasSettings::canvas_surfaces() {
		MAP_TYPE_GETTER("canvas_surfaces", DynamicPaintSurface)
	}

	DynamicPaintSurface DynamicPaintSurfaces::active() {
		CLASS_TYPES_GETTER(DynamicPaintSurface, "active")
	}

	Material DynamicPaintBrushSettings::material() {
		CLASS_TYPES_GETTER(Material, "material")
	}

	ParticleSystem DynamicPaintBrushSettings::particle_system() {
		CLASS_TYPES_GETTER(ParticleSystem, "particle_system")
	}

	Group DynamicPaintSurface::brush_group() {
		CLASS_TYPES_GETTER(Group, "brush_group")
	}

	EffectorWeights DynamicPaintSurface::effector_weights() {
		CLASS_TYPES_GETTER(EffectorWeights, "effector_weights")
	}

	PointCache DynamicPaintSurface::point_cache() {
		CLASS_TYPES_GETTER(PointCache, "point_cache")
	}

	bool DynamicPaintSurface::output_exists(Object object_value, int index) {
		PYTHON_FUNCTION_ARGS_CALL("output_exists", "Oi", object_value.get_pyobjref(), index)
		CREATE_SINGLE_PYOBJ(exists)
		PRIMITIVE_TYPES_CONV(exists, bool, PyLong_AsLong(exists_obj)==1)
		NONCLASS_TYPES_RETURN(exists_res)
	}

	Driver FCurve::driver() {
		CLASS_TYPES_GETTER(Driver, "driver")
	}

	std::map<std::string, FCurveSample> FCurve::sampled_points() {
		MAP_TYPE_GETTER("sampled_points", FCurveSample)
	}

	std::map<std::string, Keyframe> FCurve::keyframe_points() {
		MAP_TYPE_GETTER("keyframe_points", Keyframe)
	}

	std::map<std::string, FModifier> FCurve::modifiers() {
		MAP_TYPE_GETTER("modifiers", FModifier)
	}

	Keyframe FCurveKeyframePoints::insert(float frame, float value, items_enum options) {
		PYTHON_FUNCTION_ARGS_CALL("insert", "ffs", frame, value, items_to_string.at(options))
		CLASS_TYPES_RETURN(Keyframe)
	}

	void FCurveKeyframePoints::remove(Keyframe keyframe, bool fast) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "Oi", keyframe.get_pyobjref(), fast)
	}

	FModifier FCurveModifiers::active() {
		CLASS_TYPES_GETTER(FModifier, "active")
	}

	FModifier FCurveModifiers::create(fmodifier_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", fmodifier_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(FModifier)
	}

	void FCurveModifiers::remove(FModifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", modifier.get_pyobjref())
	}

	DriverVariable ChannelDriverVariables::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(DriverVariable)
	}

	void ChannelDriverVariables::remove(DriverVariable variable) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", variable.get_pyobjref())
	}

	std::map<std::string, FModifierEnvelopeControlPoint> FModifierEnvelope::control_points() {
		MAP_TYPE_GETTER("control_points", FModifierEnvelopeControlPoint)
	}

	FModifierEnvelopeControlPoint FModifierEnvelopeControlPoints::add(float frame) {
		PYTHON_FUNCTION_ARGS_CALL("add", "f", frame)
		CLASS_TYPES_RETURN(FModifierEnvelopeControlPoint)
	}

	void FModifierEnvelopeControlPoints::remove(FModifierEnvelopeControlPoint point) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", point.get_pyobjref())
	}

	std::map<std::string, FluidMeshVertex> DomainFluidSettings::fluid_mesh_vertices() {
		MAP_TYPE_GETTER("fluid_mesh_vertices", FluidMeshVertex)
	}

	std::map<std::string, GPencilLayer> GreasePencil::layers() {
		MAP_TYPE_GETTER("layers", GPencilLayer)
	}

	GPencilLayer GreasePencilLayers::active() {
		CLASS_TYPES_GETTER(GPencilLayer, "active")
	}

	GPencilLayer GreasePencilLayers::create(const std::string name, bool set_active) {
		PYTHON_FUNCTION_ARGS_CALL("new", "si", name, set_active)
		CLASS_TYPES_RETURN(GPencilLayer)
	}

	void GreasePencilLayers::remove(GPencilLayer layer) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", layer.get_pyobjref())
	}

	std::map<std::string, GPencilFrame> GPencilLayer::frames() {
		MAP_TYPE_GETTER("frames", GPencilFrame)
	}

	GPencilFrame GPencilLayer::active_frame() {
		CLASS_TYPES_GETTER(GPencilFrame, "active_frame")
	}

	GPencilFrame GPencilFrames::create(int frame_number) {
		PYTHON_FUNCTION_ARGS_CALL("new", "i", frame_number)
		CLASS_TYPES_RETURN(GPencilFrame)
	}

	void GPencilFrames::remove(GPencilFrame frame) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", frame.get_pyobjref())
	}

	GPencilFrame GPencilFrames::copy(GPencilFrame source) {
		PYTHON_FUNCTION_ARGS_CALL("copy", "O", source.get_pyobjref())
		CLASS_TYPES_RETURN(GPencilFrame)
	}

	std::map<std::string, GPencilStroke> GPencilFrame::strokes() {
		MAP_TYPE_GETTER("strokes", GPencilStroke)
	}

	GPencilStroke GPencilStrokes::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(GPencilStroke)
	}

	void GPencilStrokes::remove(GPencilStroke stroke) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", stroke.get_pyobjref())
	}

	std::map<std::string, GPencilStrokePoint> GPencilStroke::points() {
		MAP_TYPE_GETTER("points", GPencilStrokePoint)
	}

	std::map<std::string, Object> Group::objects() {
		MAP_TYPE_GETTER("objects", Object)
	}

	void GroupObjects::link(Object object_value) {
		PYTHON_FUNCTION_ARGS_CALL("link", "O", object_value.get_pyobjref())
	}

	void GroupObjects::unlink(Object object_value) {
		PYTHON_FUNCTION_ARGS_CALL("unlink", "O", object_value.get_pyobjref())
	}

	RenderSlot RenderSlots::active() {
		CLASS_TYPES_GETTER(RenderSlot, "active")
	}

	PackedFile Image::packed_file() {
		CLASS_TYPES_GETTER(PackedFile, "packed_file")
	}

	std::map<std::string, ImagePackedFile> Image::packed_files() {
		MAP_TYPE_GETTER("packed_files", ImagePackedFile)
	}

	Stereo3dFormat Image::stereo_3d_format() {
		CLASS_TYPES_GETTER(Stereo3dFormat, "stereo_3d_format")
	}

	void Image::save_render(const std::string filepath, Scene scene) {
		PYTHON_FUNCTION_ARGS_CALL("save_render", "sO", filepath, scene.get_pyobjref())
	}

	std::string Image::filepath_from_user(ImageUser image_user) {
		PYTHON_FUNCTION_ARGS_CALL("filepath_from_user", "O", image_user.get_pyobjref())
		CREATE_SINGLE_PYOBJ(filepath)
		STRING_TYPE_CONV(filepath)
		NONCLASS_TYPES_RETURN(filepath_res)
	}

	PackedFile ImagePackedFile::packed_file() {
		CLASS_TYPES_GETTER(PackedFile, "packed_file")
	}

	ShapeKey Key::reference_key() {
		CLASS_TYPES_GETTER(ShapeKey, "reference_key")
	}

	std::map<std::string, ShapeKey> Key::key_blocks() {
		MAP_TYPE_GETTER("key_blocks", ShapeKey)
	}

	NodeTree Lamp::node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	std::map<std::string, LampTextureSlot> Lamp::texture_slots() {
		MAP_TYPE_GETTER("texture_slots", LampTextureSlot)
	}

	LampTextureSlot LampTextureSlots::add() {
		PYTHON_FUNCTION_CALL("add")
		CLASS_TYPES_RETURN(LampTextureSlot)
	}

	LampTextureSlot LampTextureSlots::create(int index) {
		PYTHON_FUNCTION_ARGS_CALL("create", "i", index)
		CLASS_TYPES_RETURN(LampTextureSlot)
	}

	LampSkySettings SunLamp::sky() {
		CLASS_TYPES_GETTER(LampSkySettings, "sky")
	}

	Object LampTextureSlot::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	std::map<std::string, LatticePoint> Lattice::points() {
		MAP_TYPE_GETTER("points", LatticePoint)
	}

	std::map<std::string, VertexGroupElement> LatticePoint::groups() {
		MAP_TYPE_GETTER("groups", VertexGroupElement)
	}

	Object LineStyleColorModifier_DistanceFromObject::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object LineStyleAlphaModifier_DistanceFromObject::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object LineStyleThicknessModifier_DistanceFromObject::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	std::map<std::string, LineStyleTextureSlot> FreestyleLineStyle::texture_slots() {
		MAP_TYPE_GETTER("texture_slots", LineStyleTextureSlot)
	}

	NodeTree FreestyleLineStyle::node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	LineStyleTextureSlot LineStyleTextureSlots::add() {
		PYTHON_FUNCTION_CALL("add")
		CLASS_TYPES_RETURN(LineStyleTextureSlot)
	}

	LineStyleTextureSlot LineStyleTextureSlots::create(int index) {
		PYTHON_FUNCTION_ARGS_CALL("create", "i", index)
		CLASS_TYPES_RETURN(LineStyleTextureSlot)
	}

	LineStyleColorModifier LineStyleColorModifiers::create(const std::string name, linestyle_color_modifier_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, linestyle_color_modifier_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(LineStyleColorModifier)
	}

	void LineStyleColorModifiers::remove(LineStyleColorModifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", modifier.get_pyobjref())
	}

	LineStyleAlphaModifier LineStyleAlphaModifiers::create(const std::string name, linestyle_alpha_modifier_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, linestyle_alpha_modifier_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(LineStyleAlphaModifier)
	}

	void LineStyleAlphaModifiers::remove(LineStyleAlphaModifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", modifier.get_pyobjref())
	}

	LineStyleThicknessModifier LineStyleThicknessModifiers::create(const std::string name, linestyle_thickness_modifier_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, linestyle_thickness_modifier_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(LineStyleThicknessModifier)
	}

	void LineStyleThicknessModifiers::remove(LineStyleThicknessModifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", modifier.get_pyobjref())
	}

	LineStyleGeometryModifier LineStyleGeometryModifiers::create(const std::string name, linestyle_geometry_modifier_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, linestyle_geometry_modifier_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(LineStyleGeometryModifier)
	}

	void LineStyleGeometryModifiers::remove(LineStyleGeometryModifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", modifier.get_pyobjref())
	}

	std::map<std::string, Scene> BlendData::scenes() {
		MAP_TYPE_GETTER("scenes", Scene)
	}

	std::map<std::string, Object> BlendData::objects() {
		MAP_TYPE_GETTER("objects", Object)
	}

	std::map<std::string, Material> BlendData::materials() {
		MAP_TYPE_GETTER("materials", Material)
	}

	std::map<std::string, NodeTree> BlendData::node_groups() {
		MAP_TYPE_GETTER("node_groups", NodeTree)
	}

	std::map<std::string, Mesh> BlendData::meshes() {
		MAP_TYPE_GETTER("meshes", Mesh)
	}

	std::map<std::string, Screen> BlendData::screens() {
		MAP_TYPE_GETTER("screens", Screen)
	}

	std::map<std::string, WindowManager> BlendData::window_managers() {
		MAP_TYPE_GETTER("window_managers", WindowManager)
	}

	std::map<std::string, MetaBall> BlendData::metaballs() {
		MAP_TYPE_GETTER("metaballs", MetaBall)
	}

	std::map<std::string, VectorFont> BlendData::fonts() {
		MAP_TYPE_GETTER("fonts", VectorFont)
	}

	std::map<std::string, World> BlendData::worlds() {
		MAP_TYPE_GETTER("worlds", World)
	}

	std::map<std::string, Text> BlendData::texts() {
		MAP_TYPE_GETTER("texts", Text)
	}

	std::map<std::string, Speaker> BlendData::speakers() {
		MAP_TYPE_GETTER("speakers", Speaker)
	}

	std::map<std::string, Sound> BlendData::sounds() {
		MAP_TYPE_GETTER("sounds", Sound)
	}

	std::map<std::string, ParticleSettings> BlendData::particles() {
		MAP_TYPE_GETTER("particles", ParticleSettings)
	}

	std::map<std::string, Palette> BlendData::palettes() {
		MAP_TYPE_GETTER("palettes", Palette)
	}

	std::map<std::string, MovieClip> BlendData::movieclips() {
		MAP_TYPE_GETTER("movieclips", MovieClip)
	}

	std::map<std::string, Mask> BlendData::masks() {
		MAP_TYPE_GETTER("masks", Mask)
	}

	Camera BlendDataCameras::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Camera)
	}

	void BlendDataCameras::remove(Camera camera) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", camera.get_pyobjref())
	}

	Scene BlendDataScenes::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Scene)
	}

	void BlendDataScenes::remove(Scene scene) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", scene.get_pyobjref())
	}

	Object BlendDataObjects::create(const std::string name, ID object_data) {
		PYTHON_FUNCTION_ARGS_CALL("new", "sO", name, object_data.get_pyobjref())
		CLASS_TYPES_RETURN(Object)
	}

	void BlendDataObjects::remove(Object object_value) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", object_value.get_pyobjref())
	}

	Material BlendDataMaterials::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Material)
	}

	void BlendDataMaterials::remove(Material material) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", material.get_pyobjref())
	}

	NodeTree BlendDataNodeTrees::create(const std::string name, dummy_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, dummy_items_to_string.at(type))
		CLASS_TYPES_RETURN(NodeTree)
	}

	void BlendDataNodeTrees::remove(NodeTree tree) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", tree.get_pyobjref())
	}

	Mesh BlendDataMeshes::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Mesh)
	}

	Mesh BlendDataMeshes::new_from_object(Scene scene, Object object_value, bool apply_modifiers, mesh_type_items_enum settings, bool calc_tessface, bool calc_undeformed) {
		PYTHON_FUNCTION_ARGS_CALL("new_from_object", "OOisii", scene.get_pyobjref(), object_value.get_pyobjref(), apply_modifiers, mesh_type_items_to_string.at(settings), calc_tessface, calc_undeformed)
		CLASS_TYPES_RETURN(Mesh)
	}

	void BlendDataMeshes::remove(Mesh mesh) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", mesh.get_pyobjref())
	}

	Lamp BlendDataLamps::create(const std::string name, lamp_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, lamp_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(Lamp)
	}

	void BlendDataLamps::remove(Lamp lamp) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", lamp.get_pyobjref())
	}

	Image BlendDataImages::create(const std::string name, int width, int height, bool alpha, bool float_buffer, bool stereo3d) {
		PYTHON_FUNCTION_ARGS_CALL("new", "siiiii", name, width, height, alpha, float_buffer, stereo3d)
		CLASS_TYPES_RETURN(Image)
	}

	Image BlendDataImages::load(const std::string filepath) {
		PYTHON_FUNCTION_ARGS_CALL("load", "s", filepath)
		CLASS_TYPES_RETURN(Image)
	}

	void BlendDataImages::remove(Image image) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", image.get_pyobjref())
	}

	Lattice BlendDataLattices::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Lattice)
	}

	void BlendDataLattices::remove(Lattice lattice) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", lattice.get_pyobjref())
	}

	Curve BlendDataCurves::create(const std::string name, object_type_curve_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, object_type_curve_items_to_string.at(type))
		CLASS_TYPES_RETURN(Curve)
	}

	void BlendDataCurves::remove(Curve curve) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", curve.get_pyobjref())
	}

	MetaBall BlendDataMetaBalls::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MetaBall)
	}

	void BlendDataMetaBalls::remove(MetaBall metaball) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", metaball.get_pyobjref())
	}

	VectorFont BlendDataFonts::load(const std::string filepath) {
		PYTHON_FUNCTION_ARGS_CALL("load", "s", filepath)
		CLASS_TYPES_RETURN(VectorFont)
	}

	void BlendDataFonts::remove(VectorFont vfont) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", vfont.get_pyobjref())
	}

	Brush BlendDataBrushes::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Brush)
	}

	void BlendDataBrushes::remove(Brush brush) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", brush.get_pyobjref())
	}

	World BlendDataWorlds::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(World)
	}

	void BlendDataWorlds::remove(World world) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", world.get_pyobjref())
	}

	Group BlendDataGroups::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Group)
	}

	void BlendDataGroups::remove(Group group) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", group.get_pyobjref())
	}

	Text BlendDataTexts::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Text)
	}

	void BlendDataTexts::remove(Text text) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", text.get_pyobjref())
	}

	Text BlendDataTexts::load(const std::string filepath, bool internal) {
		PYTHON_FUNCTION_ARGS_CALL("load", "si", filepath, internal)
		CLASS_TYPES_RETURN(Text)
	}

	Speaker BlendDataSpeakers::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Speaker)
	}

	void BlendDataSpeakers::remove(Speaker speaker) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", speaker.get_pyobjref())
	}

	Sound BlendDataSounds::load(const std::string filepath) {
		PYTHON_FUNCTION_ARGS_CALL("load", "s", filepath)
		CLASS_TYPES_RETURN(Sound)
	}

	void BlendDataSounds::remove(Sound sound) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", sound.get_pyobjref())
	}

	Armature BlendDataArmatures::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Armature)
	}

	void BlendDataArmatures::remove(Armature armature) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", armature.get_pyobjref())
	}

	Action BlendDataActions::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Action)
	}

	void BlendDataActions::remove(Action action) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", action.get_pyobjref())
	}

	ParticleSettings BlendDataParticles::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(ParticleSettings)
	}

	void BlendDataParticles::remove(ParticleSettings particle) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", particle.get_pyobjref())
	}

	Palette BlendDataPalettes::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Palette)
	}

	void BlendDataPalettes::remove(Palette palette) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", palette.get_pyobjref())
	}

	GreasePencil BlendDataGreasePencils::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(GreasePencil)
	}

	void BlendDataGreasePencils::remove(GreasePencil grease_pencil) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", grease_pencil.get_pyobjref())
	}

	void BlendDataMovieClips::remove(MovieClip clip) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", clip.get_pyobjref())
	}

	MovieClip BlendDataMovieClips::load(const std::string filepath) {
		PYTHON_FUNCTION_ARGS_CALL("load", "s", filepath)
		CLASS_TYPES_RETURN(MovieClip)
	}

	Mask BlendDataMasks::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(Mask)
	}

	void BlendDataMasks::remove(Mask mask) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", mask.get_pyobjref())
	}

	FreestyleLineStyle BlendDataLineStyles::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(FreestyleLineStyle)
	}

	void BlendDataLineStyles::remove(FreestyleLineStyle linestyle) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", linestyle.get_pyobjref())
	}

	MaterialRaytraceMirror Material::raytrace_mirror() {
		CLASS_TYPES_GETTER(MaterialRaytraceMirror, "raytrace_mirror")
	}

	MaterialRaytraceTransparency Material::raytrace_transparency() {
		CLASS_TYPES_GETTER(MaterialRaytraceTransparency, "raytrace_transparency")
	}

	MaterialVolume Material::volume() {
		CLASS_TYPES_GETTER(MaterialVolume, "volume")
	}

	MaterialHalo Material::halo() {
		CLASS_TYPES_GETTER(MaterialHalo, "halo")
	}

	MaterialSubsurfaceScattering Material::subsurface_scattering() {
		CLASS_TYPES_GETTER(MaterialSubsurfaceScattering, "subsurface_scattering")
	}

	MaterialStrand Material::strand() {
		CLASS_TYPES_GETTER(MaterialStrand, "strand")
	}

	MaterialPhysics Material::physics() {
		CLASS_TYPES_GETTER(MaterialPhysics, "physics")
	}

	MaterialGameSettings Material::game_settings() {
		CLASS_TYPES_GETTER(MaterialGameSettings, "game_settings")
	}

	NodeTree Material::node_tree() {
		CLASS_TYPES_GETTER(NodeTree, "node_tree")
	}

	std::map<std::string, MaterialTextureSlot> Material::texture_slots() {
		MAP_TYPE_GETTER("texture_slots", MaterialTextureSlot)
	}

	std::map<std::string, TexPaintSlot> Material::texture_paint_slots() {
		MAP_TYPE_GETTER("texture_paint_slots", TexPaintSlot)
	}

	MaterialTextureSlot MaterialTextureSlots::add() {
		PYTHON_FUNCTION_CALL("add")
		CLASS_TYPES_RETURN(MaterialTextureSlot)
	}

	MaterialTextureSlot MaterialTextureSlots::create(int index) {
		PYTHON_FUNCTION_ARGS_CALL("create", "i", index)
		CLASS_TYPES_RETURN(MaterialTextureSlot)
	}

	Object MaterialTextureSlot::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	std::map<std::string, MeshVertex> Mesh::vertices() {
		MAP_TYPE_GETTER("vertices", MeshVertex)
	}

	std::map<std::string, MeshEdge> Mesh::edges() {
		MAP_TYPE_GETTER("edges", MeshEdge)
	}

	std::map<std::string, MeshTessFace> Mesh::tessfaces() {
		MAP_TYPE_GETTER("tessfaces", MeshTessFace)
	}

	std::map<std::string, MeshLoop> Mesh::loops() {
		MAP_TYPE_GETTER("loops", MeshLoop)
	}

	std::map<std::string, MeshPolygon> Mesh::polygons() {
		MAP_TYPE_GETTER("polygons", MeshPolygon)
	}

	std::map<std::string, MeshUVLoopLayer> Mesh::uv_layers() {
		MAP_TYPE_GETTER("uv_layers", MeshUVLoopLayer)
	}

	MeshUVLoopLayer Mesh::uv_layer_clone() {
		CLASS_TYPES_GETTER(MeshUVLoopLayer, "uv_layer_clone")
	}

	MeshUVLoopLayer Mesh::uv_layer_stencil() {
		CLASS_TYPES_GETTER(MeshUVLoopLayer, "uv_layer_stencil")
	}

	std::map<std::string, MeshTextureFaceLayer> Mesh::tessface_uv_textures() {
		MAP_TYPE_GETTER("tessface_uv_textures", MeshTextureFaceLayer)
	}

	std::map<std::string, MeshTexturePolyLayer> Mesh::uv_textures() {
		MAP_TYPE_GETTER("uv_textures", MeshTexturePolyLayer)
	}

	MeshTexturePolyLayer Mesh::uv_texture_clone() {
		CLASS_TYPES_GETTER(MeshTexturePolyLayer, "uv_texture_clone")
	}

	MeshTexturePolyLayer Mesh::uv_texture_stencil() {
		CLASS_TYPES_GETTER(MeshTexturePolyLayer, "uv_texture_stencil")
	}

	std::map<std::string, MeshColorLayer> Mesh::tessface_vertex_colors() {
		MAP_TYPE_GETTER("tessface_vertex_colors", MeshColorLayer)
	}

	std::map<std::string, MeshLoopColorLayer> Mesh::vertex_colors() {
		MAP_TYPE_GETTER("vertex_colors", MeshLoopColorLayer)
	}

	std::map<std::string, MeshVertexFloatPropertyLayer> Mesh::vertex_layers_float() {
		MAP_TYPE_GETTER("vertex_layers_float", MeshVertexFloatPropertyLayer)
	}

	std::map<std::string, MeshVertexIntPropertyLayer> Mesh::vertex_layers_int() {
		MAP_TYPE_GETTER("vertex_layers_int", MeshVertexIntPropertyLayer)
	}

	std::map<std::string, MeshVertexStringPropertyLayer> Mesh::vertex_layers_string() {
		MAP_TYPE_GETTER("vertex_layers_string", MeshVertexStringPropertyLayer)
	}

	std::map<std::string, MeshPolygonFloatPropertyLayer> Mesh::polygon_layers_float() {
		MAP_TYPE_GETTER("polygon_layers_float", MeshPolygonFloatPropertyLayer)
	}

	std::map<std::string, MeshPolygonIntPropertyLayer> Mesh::polygon_layers_int() {
		MAP_TYPE_GETTER("polygon_layers_int", MeshPolygonIntPropertyLayer)
	}

	std::map<std::string, MeshPolygonStringPropertyLayer> Mesh::polygon_layers_string() {
		MAP_TYPE_GETTER("polygon_layers_string", MeshPolygonStringPropertyLayer)
	}

	std::map<std::string, MeshSkinVertexLayer> Mesh::skin_vertices() {
		MAP_TYPE_GETTER("skin_vertices", MeshSkinVertexLayer)
	}

	std::map<std::string, MeshPaintMaskLayer> Mesh::vertex_paint_masks() {
		MAP_TYPE_GETTER("vertex_paint_masks", MeshPaintMaskLayer)
	}

	MeshUVLoopLayer UVLoopLayers::active() {
		CLASS_TYPES_GETTER(MeshUVLoopLayer, "active")
	}

	MeshTextureFaceLayer TessfaceUVTextures::active() {
		CLASS_TYPES_GETTER(MeshTextureFaceLayer, "active")
	}

	MeshTextureFaceLayer TessfaceUVTextures::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshTextureFaceLayer)
	}

	MeshTexturePolyLayer UVTextures::active() {
		CLASS_TYPES_GETTER(MeshTexturePolyLayer, "active")
	}

	MeshTexturePolyLayer UVTextures::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshTexturePolyLayer)
	}

	void UVTextures::remove(MeshTexturePolyLayer layer) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", layer.get_pyobjref())
	}

	MeshColorLayer VertexColors::active() {
		CLASS_TYPES_GETTER(MeshColorLayer, "active")
	}

	MeshColorLayer VertexColors::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshColorLayer)
	}

	MeshLoopColorLayer LoopColors::active() {
		CLASS_TYPES_GETTER(MeshLoopColorLayer, "active")
	}

	MeshLoopColorLayer LoopColors::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshLoopColorLayer)
	}

	void LoopColors::remove(MeshLoopColorLayer layer) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", layer.get_pyobjref())
	}

	MeshVertexFloatPropertyLayer VertexFloatProperties::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshVertexFloatPropertyLayer)
	}

	MeshVertexIntPropertyLayer VertexIntProperties::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshVertexIntPropertyLayer)
	}

	MeshVertexStringPropertyLayer VertexStringProperties::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshVertexStringPropertyLayer)
	}

	MeshPolygonFloatPropertyLayer PolygonFloatProperties::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshPolygonFloatPropertyLayer)
	}

	MeshPolygonIntPropertyLayer PolygonIntProperties::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshPolygonIntPropertyLayer)
	}

	MeshPolygonStringPropertyLayer PolygonStringProperties::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MeshPolygonStringPropertyLayer)
	}

	std::map<std::string, MeshSkinVertex> MeshSkinVertexLayer::data() {
		MAP_TYPE_GETTER("data", MeshSkinVertex)
	}

	std::map<std::string, MeshPaintMaskProperty> MeshPaintMaskLayer::data() {
		MAP_TYPE_GETTER("data", MeshPaintMaskProperty)
	}

	std::map<std::string, VertexGroupElement> MeshVertex::groups() {
		MAP_TYPE_GETTER("groups", VertexGroupElement)
	}

	std::map<std::string, MeshUVLoop> MeshUVLoopLayer::data() {
		MAP_TYPE_GETTER("data", MeshUVLoop)
	}

	std::map<std::string, MeshTextureFace> MeshTextureFaceLayer::data() {
		MAP_TYPE_GETTER("data", MeshTextureFace)
	}

	std::map<std::string, MeshTexturePoly> MeshTexturePolyLayer::data() {
		MAP_TYPE_GETTER("data", MeshTexturePoly)
	}

	std::map<std::string, MeshColor> MeshColorLayer::data() {
		MAP_TYPE_GETTER("data", MeshColor)
	}

	std::map<std::string, MeshLoopColor> MeshLoopColorLayer::data() {
		MAP_TYPE_GETTER("data", MeshLoopColor)
	}

	std::map<std::string, MeshVertexFloatProperty> MeshVertexFloatPropertyLayer::data() {
		MAP_TYPE_GETTER("data", MeshVertexFloatProperty)
	}

	std::map<std::string, MeshPolygonFloatProperty> MeshPolygonFloatPropertyLayer::data() {
		MAP_TYPE_GETTER("data", MeshPolygonFloatProperty)
	}

	std::map<std::string, MeshVertexIntProperty> MeshVertexIntPropertyLayer::data() {
		MAP_TYPE_GETTER("data", MeshVertexIntProperty)
	}

	std::map<std::string, MeshPolygonIntProperty> MeshPolygonIntPropertyLayer::data() {
		MAP_TYPE_GETTER("data", MeshPolygonIntProperty)
	}

	std::map<std::string, MeshVertexStringProperty> MeshVertexStringPropertyLayer::data() {
		MAP_TYPE_GETTER("data", MeshVertexStringProperty)
	}

	std::map<std::string, MeshPolygonStringProperty> MeshPolygonStringPropertyLayer::data() {
		MAP_TYPE_GETTER("data", MeshPolygonStringProperty)
	}

	MetaElement MetaBallElements::active() {
		CLASS_TYPES_GETTER(MetaElement, "active")
	}

	MetaElement MetaBallElements::create(metaelem_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", metaelem_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(MetaElement)
	}

	void MetaBallElements::remove(MetaElement element) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", element.get_pyobjref())
	}

	Object LatticeModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object CurveModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object MirrorModifier::mirror_object() {
		CLASS_TYPES_GETTER(Object, "mirror_object")
	}

	Object WaveModifier::start_position_object() {
		CLASS_TYPES_GETTER(Object, "start_position_object")
	}

	Object WaveModifier::texture_coords_object() {
		CLASS_TYPES_GETTER(Object, "texture_coords_object")
	}

	Object ArmatureModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object HookModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	SoftBodySettings SoftBodyModifier::settings() {
		CLASS_TYPES_GETTER(SoftBodySettings, "settings")
	}

	PointCache SoftBodyModifier::point_cache() {
		CLASS_TYPES_GETTER(PointCache, "point_cache")
	}

	Object BooleanModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object ArrayModifier::curve() {
		CLASS_TYPES_GETTER(Object, "curve")
	}

	Object ArrayModifier::offset_object() {
		CLASS_TYPES_GETTER(Object, "offset_object")
	}

	Object ArrayModifier::start_cap() {
		CLASS_TYPES_GETTER(Object, "start_cap")
	}

	Object ArrayModifier::end_cap() {
		CLASS_TYPES_GETTER(Object, "end_cap")
	}

	Object DisplaceModifier::texture_coords_object() {
		CLASS_TYPES_GETTER(Object, "texture_coords_object")
	}

	std::map<std::string, UVProjector> UVProjectModifier::projectors() {
		MAP_TYPE_GETTER("projectors", UVProjector)
	}

	Object UVProjector::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object CastModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object MeshDeformModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	ParticleSystem ParticleSystemModifier::particle_system() {
		CLASS_TYPES_GETTER(ParticleSystem, "particle_system")
	}

	Object ParticleInstanceModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	PointCache ClothModifier::point_cache() {
		CLASS_TYPES_GETTER(PointCache, "point_cache")
	}

	CollisionSettings CollisionModifier::settings() {
		CLASS_TYPES_GETTER(CollisionSettings, "settings")
	}

	Object ShrinkwrapModifier::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object ShrinkwrapModifier::auxiliary_target() {
		CLASS_TYPES_GETTER(Object, "auxiliary_target")
	}

	Object MaskModifier::armature() {
		CLASS_TYPES_GETTER(Object, "armature")
	}

	Object SimpleDeformModifier::origin() {
		CLASS_TYPES_GETTER(Object, "origin")
	}

	Object WarpModifier::object_from() {
		CLASS_TYPES_GETTER(Object, "object_from")
	}

	Object WarpModifier::object_to() {
		CLASS_TYPES_GETTER(Object, "object_to")
	}

	Object WarpModifier::texture_coords_object() {
		CLASS_TYPES_GETTER(Object, "texture_coords_object")
	}

	SmokeDomainSettings SmokeModifier::domain_settings() {
		CLASS_TYPES_GETTER(SmokeDomainSettings, "domain_settings")
	}

	SmokeFlowSettings SmokeModifier::flow_settings() {
		CLASS_TYPES_GETTER(SmokeFlowSettings, "flow_settings")
	}

	SmokeCollSettings SmokeModifier::coll_settings() {
		CLASS_TYPES_GETTER(SmokeCollSettings, "coll_settings")
	}

	Object ScrewModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object UVWarpModifier::object_from() {
		CLASS_TYPES_GETTER(Object, "object_from")
	}

	Object UVWarpModifier::object_to() {
		CLASS_TYPES_GETTER(Object, "object_to")
	}

	Object VertexWeightEditModifier::mask_tex_map_object() {
		CLASS_TYPES_GETTER(Object, "mask_tex_map_object")
	}

	Object VertexWeightMixModifier::mask_tex_map_object() {
		CLASS_TYPES_GETTER(Object, "mask_tex_map_object")
	}

	Object VertexWeightProximityModifier::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	Object VertexWeightProximityModifier::mask_tex_map_object() {
		CLASS_TYPES_GETTER(Object, "mask_tex_map_object")
	}

	Object DataTransferModifier::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Object NormalEditModifier::target() {
		CLASS_TYPES_GETTER(Object, "target")
	}

	std::map<std::string, NlaStrip> NlaTrack::strips() {
		MAP_TYPE_GETTER("strips", NlaStrip)
	}

	NlaStrip NlaStrips::create(const std::string name, int start, Action action) {
		PYTHON_FUNCTION_ARGS_CALL("new", "siO", name, start, action.get_pyobjref())
		CLASS_TYPES_RETURN(NlaStrip)
	}

	void NlaStrips::remove(NlaStrip strip) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", strip.get_pyobjref())
	}

	Node NodeSocket::node() {
		CLASS_TYPES_GETTER(Node, "node")
	}

	std::map<std::string, NodeLink> Node::internal_links() {
		MAP_TYPE_GETTER("internal_links", NodeLink)
	}

	NodeSocket NodeInputs::create(const std::string type, const std::string name, const std::string identifier) {
		PYTHON_FUNCTION_ARGS_CALL("new", "sss", type, name, identifier)
		CLASS_TYPES_RETURN(NodeSocket)
	}

	void NodeInputs::remove(NodeSocket socket) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", socket.get_pyobjref())
	}

	NodeSocket NodeOutputs::create(const std::string type, const std::string name, const std::string identifier) {
		PYTHON_FUNCTION_ARGS_CALL("new", "sss", type, name, identifier)
		CLASS_TYPES_RETURN(NodeSocket)
	}

	void NodeOutputs::remove(NodeSocket socket) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", socket.get_pyobjref())
	}

	bool NodeInternal::poll(NodeTree node_tree) {
		PYTHON_FUNCTION_ARGS_CALL("poll", "O", node_tree.get_pyobjref())
		CREATE_SINGLE_PYOBJ(visible)
		PRIMITIVE_TYPES_CONV(visible, bool, PyLong_AsLong(visible_obj)==1)
		NONCLASS_TYPES_RETURN(visible_res)
	}

	bool NodeInternal::poll_instance(NodeTree node_tree) {
		PYTHON_FUNCTION_ARGS_CALL("poll_instance", "O", node_tree.get_pyobjref())
		CREATE_SINGLE_PYOBJ(visible)
		PRIMITIVE_TYPES_CONV(visible, bool, PyLong_AsLong(visible_obj)==1)
		NONCLASS_TYPES_RETURN(visible_res)
	}

	void NodeInternal::draw_buttons(Context context, UILayout layout) {
		PYTHON_FUNCTION_ARGS_CALL("draw_buttons", "OO", context.get_pyobjref(), layout.get_pyobjref())
	}

	void NodeInternal::draw_buttons_ext(Context context, UILayout layout) {
		PYTHON_FUNCTION_ARGS_CALL("draw_buttons_ext", "OO", context.get_pyobjref(), layout.get_pyobjref())
	}

	Node Nodes::active() {
		CLASS_TYPES_GETTER(Node, "active")
	}

	Node Nodes::create(const std::string type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", type)
		CLASS_TYPES_RETURN(Node)
	}

	void Nodes::remove(Node node) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", node.get_pyobjref())
	}

	NodeLink NodeLinks::create(NodeSocket input, NodeSocket output, bool verify_limits) {
		PYTHON_FUNCTION_ARGS_CALL("new", "OOi", input.get_pyobjref(), output.get_pyobjref(), verify_limits)
		CLASS_TYPES_RETURN(NodeLink)
	}

	void NodeLinks::remove(NodeLink link) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", link.get_pyobjref())
	}

	NodeSocketInterface NodeTreeInputs::create(const std::string type, const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", type, name)
		CLASS_TYPES_RETURN(NodeSocketInterface)
	}

	void NodeTreeInputs::remove(NodeSocketInterface socket) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", socket.get_pyobjref())
	}

	NodeSocketInterface NodeTreeOutputs::create(const std::string type, const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", type, name)
		CLASS_TYPES_RETURN(NodeSocketInterface)
	}

	void NodeTreeOutputs::remove(NodeSocketInterface socket) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", socket.get_pyobjref())
	}

	void NodeSocketStandard::draw(Context context, UILayout layout, Node node, const std::string text) {
		PYTHON_FUNCTION_ARGS_CALL("draw", "OOOs", context.get_pyobjref(), layout.get_pyobjref(), node.get_pyobjref(), text)
	}

	void NodeSocketInterfaceStandard::draw(Context context, UILayout layout) {
		PYTHON_FUNCTION_ARGS_CALL("draw", "OO", context.get_pyobjref(), layout.get_pyobjref())
	}

	Text NodeFrame::text() {
		CLASS_TYPES_GETTER(Text, "text")
	}

	Object ShaderNodeLampData::lamp_object() {
		CLASS_TYPES_GETTER(Object, "lamp_object")
	}

	Text ShaderNodeScript::script() {
		CLASS_TYPES_GETTER(Text, "script")
	}

	Object ShaderNodeTexCoord::object_value() {
		CLASS_TYPES_GETTER(Object, "object")
	}

	Scene CompositorNodeRLayers::scene() {
		CLASS_TYPES_GETTER(Scene, "scene")
	}

	ImageFormatSettings CompositorNodeOutputFile::format() {
		CLASS_TYPES_GETTER(ImageFormatSettings, "format")
	}

	std::map<std::string, NodeOutputFileSlotFile> CompositorNodeOutputFile::file_slots() {
		MAP_TYPE_GETTER("file_slots", NodeOutputFileSlotFile)
	}

	std::map<std::string, NodeOutputFileSlotLayer> CompositorNodeOutputFile::layer_slots() {
		MAP_TYPE_GETTER("layer_slots", NodeOutputFileSlotLayer)
	}

	NodeSocket CompositorNodeOutputFileFileSlots::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(NodeSocket)
	}

	void CompositorNodeOutputFileFileSlots::remove(NodeSocket socket) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", socket.get_pyobjref())
	}

	NodeSocket CompositorNodeOutputFileLayerSlots::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(NodeSocket)
	}

	void CompositorNodeOutputFileLayerSlots::remove(NodeSocket socket) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", socket.get_pyobjref())
	}

	Scene CompositorNodeDefocus::scene() {
		CLASS_TYPES_GETTER(Scene, "scene")
	}

	MovieClip CompositorNodeMovieClip::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	MovieClip CompositorNodeStabilize::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	MovieClip CompositorNodeMovieDistortion::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	Mask CompositorNodeMask::mask() {
		CLASS_TYPES_GETTER(Mask, "mask")
	}

	MovieClip CompositorNodeKeyingScreen::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	MovieClip CompositorNodeTrackPos::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	MovieClip CompositorNodePlaneTrackDeform::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	ImageFormatSettings NodeOutputFileSlotFile::format() {
		CLASS_TYPES_GETTER(ImageFormatSettings, "format")
	}

	std::map<std::string, MaterialSlot> Object::material_slots() {
		MAP_TYPE_GETTER("material_slots", MaterialSlot)
	}

	GameObjectSettings Object::game() {
		CLASS_TYPES_GETTER(GameObjectSettings, "game")
	}

	std::map<std::string, VertexGroup> Object::vertex_groups() {
		MAP_TYPE_GETTER("vertex_groups", VertexGroup)
	}

	FieldSettings Object::field() {
		CLASS_TYPES_GETTER(FieldSettings, "field")
	}

	CollisionSettings Object::collision() {
		CLASS_TYPES_GETTER(CollisionSettings, "collision")
	}

	SoftBodySettings Object::soft_body() {
		CLASS_TYPES_GETTER(SoftBodySettings, "soft_body")
	}

	std::map<std::string, ParticleSystem> Object::particle_systems() {
		MAP_TYPE_GETTER("particle_systems", ParticleSystem)
	}

	RigidBodyObject Object::rigid_body() {
		CLASS_TYPES_GETTER(RigidBodyObject, "rigid_body")
	}

	RigidBodyConstraint Object::rigid_body_constraint() {
		CLASS_TYPES_GETTER(RigidBodyConstraint, "rigid_body_constraint")
	}

	std::map<std::string, DupliObject> Object::dupli_list() {
		MAP_TYPE_GETTER("dupli_list", DupliObject)
	}

	Pose Object::pose() {
		CLASS_TYPES_GETTER(Pose, "pose")
	}

	std::map<std::string, LodLevel> Object::lod_levels() {
		MAP_TYPE_GETTER("lod_levels", LodLevel)
	}

	VFLOAT16 Object::convert_space(PoseBone pose_bone, VFLOAT16 matrix, space_items_enum from_space, space_items_enum to_space) {
		ARRAY_TO_PYOBJ(matrix, "O", 16)
		PYTHON_FUNCTION_ARGS_CALL("convert_space", "OOss", pose_bone.get_pyobjref(), matrix_tupleval, space_items_to_string.at(from_space), space_items_to_string.at(to_space))
		DECREF_ARRAY_ITEMS(matrix, 16)
		CREATE_SINGLE_PYOBJ(matrix_return)
		POD_VECTOR_TYPES_CONV(matrix_return, FLOAT, (float)PyFloat_AsDouble(item), 16)
		NONCLASS_TYPES_RETURN(matrix_return_res)
	}

	Object::camera_fit_coords_result Object::camera_fit_coords(Scene scene, float coordinates[1]) {
		ARRAY_TO_PYOBJ(coordinates, "O", 1)
		PYTHON_FUNCTION_ARGS_CALL("camera_fit_coords", "OO", scene.get_pyobjref(), coordinates_tupleval)
		DECREF_ARRAY_ITEMS(coordinates, 1)
		CREATE_MULTIPLE_PYOBJS(*co_return_obj, *scale_return_obj)
		UNPACK_TUPLE_TO_OBJS("camera_fit_coords", 2, &co_return_obj, &scale_return_obj)
		POD_VECTOR_TYPES_CONV(co_return, FLOAT, (float)PyFloat_AsDouble(item), 3)
		PRIMITIVE_TYPES_CONV(scale_return, float, (float)PyFloat_AsDouble(scale_return_obj))
		NONCLASS_TYPES_RETURN(co_return_res, scale_return_res)
	}

	Mesh Object::to_mesh(Scene scene, bool apply_modifiers, mesh_type_items_enum settings, bool calc_tessface, bool calc_undeformed) {
		PYTHON_FUNCTION_ARGS_CALL("to_mesh", "Oisii", scene.get_pyobjref(), apply_modifiers, mesh_type_items_to_string.at(settings), calc_tessface, calc_undeformed)
		CLASS_TYPES_RETURN(Mesh)
	}

	void Object::dupli_list_create(Scene scene, dupli_eval_mode_items_enum settings) {
		PYTHON_FUNCTION_ARGS_CALL("dupli_list_create", "Os", scene.get_pyobjref(), dupli_eval_mode_items_to_string.at(settings))
	}

	bool Object::is_visible(Scene scene) {
		PYTHON_FUNCTION_ARGS_CALL("is_visible", "O", scene.get_pyobjref())
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	bool Object::is_modified(Scene scene, mesh_type_items_enum settings) {
		PYTHON_FUNCTION_ARGS_CALL("is_modified", "Os", scene.get_pyobjref(), mesh_type_items_to_string.at(settings))
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	bool Object::is_deform_modified(Scene scene, mesh_type_items_enum settings) {
		PYTHON_FUNCTION_ARGS_CALL("is_deform_modified", "Os", scene.get_pyobjref(), mesh_type_items_to_string.at(settings))
		CREATE_SINGLE_PYOBJ(result)
		PRIMITIVE_TYPES_CONV(result, bool, PyLong_AsLong(result_obj)==1)
		NONCLASS_TYPES_RETURN(result_res)
	}

	Modifier ObjectModifiers::create(const std::string name, modifier_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, modifier_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(Modifier)
	}

	void ObjectModifiers::remove(Modifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", modifier.get_pyobjref())
	}

	Constraint ObjectConstraints::active() {
		CLASS_TYPES_GETTER(Constraint, "active")
	}

	Constraint ObjectConstraints::create(constraint_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", constraint_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(Constraint)
	}

	void ObjectConstraints::remove(Constraint constraint) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", constraint.get_pyobjref())
	}

	VertexGroup VertexGroups::active() {
		CLASS_TYPES_GETTER(VertexGroup, "active")
	}

	VertexGroup VertexGroups::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(VertexGroup)
	}

	void VertexGroups::remove(VertexGroup group) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", group.get_pyobjref())
	}

	ParticleSystem ParticleSystems::active() {
		CLASS_TYPES_GETTER(ParticleSystem, "active")
	}

	std::map<std::string, Sensor> GameObjectSettings::sensors() {
		MAP_TYPE_GETTER("sensors", Sensor)
	}

	std::map<std::string, GameProperty> GameObjectSettings::properties() {
		MAP_TYPE_GETTER("properties", GameProperty)
	}

	GameSoftBodySettings GameObjectSettings::soft_body() {
		CLASS_TYPES_GETTER(GameSoftBodySettings, "soft_body")
	}

	void ObjectBase::layers_from_view(SpaceView3D view) {
		PYTHON_FUNCTION_ARGS_CALL("layers_from_view", "O", view.get_pyobjref())
	}

	ParticleSystem DupliObject::particle_system() {
		CLASS_TYPES_GETTER(ParticleSystem, "particle_system")
	}

	PaletteColor PaletteColors::active() {
		CLASS_TYPES_GETTER(PaletteColor, "active")
	}

	PaletteColor PaletteColors::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(PaletteColor)
	}

	void PaletteColors::remove(PaletteColor color) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", color.get_pyobjref())
	}

	VFLOAT3 ParticleHairKey::co_object(Object object_value, ParticleSystemModifier modifier, Particle particle) {
		PYTHON_FUNCTION_ARGS_CALL("co_object", "OOO", object_value.get_pyobjref(), modifier.get_pyobjref(), particle.get_pyobjref())
		CREATE_SINGLE_PYOBJ(co)
		POD_VECTOR_TYPES_CONV(co, FLOAT, (float)PyFloat_AsDouble(item), 3)
		NONCLASS_TYPES_RETURN(co_res)
	}

	ParticleSettings ParticleSystem::settings() {
		CLASS_TYPES_GETTER(ParticleSettings, "settings")
	}

	void ParticleSystem::set_resolution(Scene scene, Object object_value, resolution_items_enum resolution) {
		PYTHON_FUNCTION_ARGS_CALL("set_resolution", "OOs", scene.get_pyobjref(), object_value.get_pyobjref(), resolution_items_to_string.at(resolution))
	}

	ParticleSettingsTextureSlot ParticleSettingsTextureSlots::add() {
		PYTHON_FUNCTION_CALL("add")
		CLASS_TYPES_RETURN(ParticleSettingsTextureSlot)
	}

	ParticleSettingsTextureSlot ParticleSettingsTextureSlots::create(int index) {
		PYTHON_FUNCTION_ARGS_CALL("create", "i", index)
		CLASS_TYPES_RETURN(ParticleSettingsTextureSlot)
	}

	std::map<std::string, PoseBone> Pose::bones() {
		MAP_TYPE_GETTER("bones", PoseBone)
	}

	std::map<std::string, BoneGroup> Pose::bone_groups() {
		MAP_TYPE_GETTER("bone_groups", BoneGroup)
	}

	IKParam Pose::ik_param() {
		CLASS_TYPES_GETTER(IKParam, "ik_param")
	}

	BoneGroup BoneGroups::active() {
		CLASS_TYPES_GETTER(BoneGroup, "active")
	}

	BoneGroup BoneGroups::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(BoneGroup)
	}

	void BoneGroups::remove(BoneGroup group) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", group.get_pyobjref())
	}

	BoneGroup PoseBone::bone_group() {
		CLASS_TYPES_GETTER(BoneGroup, "bone_group")
	}

	Constraint PoseBoneConstraints::active() {
		CLASS_TYPES_GETTER(Constraint, "active")
	}

	Constraint PoseBoneConstraints::create(constraint_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", constraint_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(Constraint)
	}

	void PoseBoneConstraints::remove(Constraint constraint) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", constraint.get_pyobjref())
	}

	ThemeBoneColorSet BoneGroup::colors() {
		CLASS_TYPES_GETTER(ThemeBoneColorSet, "colors")
	}

	RenderSettings RenderEngine::render() {
		CLASS_TYPES_GETTER(RenderSettings, "render")
	}

	RenderResult RenderEngine::begin_result(int x, int y, int w, int h, const std::string layer, const std::string view) {
		PYTHON_FUNCTION_ARGS_CALL("begin_result", "iiiiss", x, y, w, h, layer, view)
		CLASS_TYPES_RETURN(RenderResult)
	}

	void RenderEngine::update_result(RenderResult result) {
		PYTHON_FUNCTION_ARGS_CALL("update_result", "O", result.get_pyobjref())
	}

	void RenderEngine::end_result(RenderResult result, bool cancel, bool do_merge_results) {
		PYTHON_FUNCTION_ARGS_CALL("end_result", "Oii", result.get_pyobjref(), cancel, do_merge_results)
	}

	void RenderEngine::bind_display_space_shader(Scene scene) {
		PYTHON_FUNCTION_ARGS_CALL("bind_display_space_shader", "O", scene.get_pyobjref())
	}

	bool RenderEngine::support_display_space_shader(Scene scene) {
		PYTHON_FUNCTION_ARGS_CALL("support_display_space_shader", "O", scene.get_pyobjref())
		CREATE_SINGLE_PYOBJ(supported)
		PRIMITIVE_TYPES_CONV(supported, bool, PyLong_AsLong(supported_obj)==1)
		NONCLASS_TYPES_RETURN(supported_res)
	}

	std::map<std::string, RenderLayer> RenderResult::layers() {
		MAP_TYPE_GETTER("layers", RenderLayer)
	}

	std::map<std::string, RenderView> RenderResult::views() {
		MAP_TYPE_GETTER("views", RenderView)
	}

	std::map<std::string, RenderPass> RenderLayer::passes() {
		MAP_TYPE_GETTER("passes", RenderPass)
	}

	RenderPass RenderPasses::find_by_type(render_pass_type_items_enum pass_type, const std::string view) {
		PYTHON_FUNCTION_ARGS_CALL("find_by_type", "ss", render_pass_type_items_to_string.at(pass_type), view)
		CLASS_TYPES_RETURN(RenderPass)
	}

	World Scene::world() {
		CLASS_TYPES_GETTER(World, "world")
	}

	SequenceEditor Scene::sequence_editor() {
		CLASS_TYPES_GETTER(SequenceEditor, "sequence_editor")
	}

	ToolSettings Scene::tool_settings() {
		CLASS_TYPES_GETTER(ToolSettings, "tool_settings")
	}

	UnitSettings Scene::unit_settings() {
		CLASS_TYPES_GETTER(UnitSettings, "unit_settings")
	}

	RenderSettings Scene::render() {
		CLASS_TYPES_GETTER(RenderSettings, "render")
	}

	DisplaySafeAreas Scene::safe_areas() {
		CLASS_TYPES_GETTER(DisplaySafeAreas, "safe_areas")
	}

	std::map<std::string, TimelineMarker> Scene::timeline_markers() {
		MAP_TYPE_GETTER("timeline_markers", TimelineMarker)
	}

	SceneGameData Scene::game_settings() {
		CLASS_TYPES_GETTER(SceneGameData, "game_settings")
	}

	std::map<std::string, TransformOrientation> Scene::orientations() {
		MAP_TYPE_GETTER("orientations", TransformOrientation)
	}

	MovieClip Scene::active_clip() {
		CLASS_TYPES_GETTER(MovieClip, "active_clip")
	}

	SequenceEditor Scene::sequence_editor_create() {
		PYTHON_FUNCTION_CALL("sequence_editor_create")
		CLASS_TYPES_RETURN(SequenceEditor)
	}

	ObjectBase SceneBases::active() {
		CLASS_TYPES_GETTER(ObjectBase, "active")
	}

	Object SceneObjects::active() {
		CLASS_TYPES_GETTER(Object, "active")
	}

	ObjectBase SceneObjects::link(Object object_value) {
		PYTHON_FUNCTION_ARGS_CALL("link", "O", object_value.get_pyobjref())
		CLASS_TYPES_RETURN(ObjectBase)
	}

	void SceneObjects::unlink(Object object_value) {
		PYTHON_FUNCTION_ARGS_CALL("unlink", "O", object_value.get_pyobjref())
	}

	KeyingSet KeyingSets::active() {
		CLASS_TYPES_GETTER(KeyingSet, "active")
	}

	KeyingSet KeyingSets::create(const std::string idname, const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", idname, name)
		CLASS_TYPES_RETURN(KeyingSet)
	}

	KeyingSet KeyingSetsAll::active() {
		CLASS_TYPES_GETTER(KeyingSet, "active")
	}

	TimelineMarker TimelineMarkers::create(const std::string name, int frame) {
		PYTHON_FUNCTION_ARGS_CALL("new", "si", name, frame)
		CLASS_TYPES_RETURN(TimelineMarker)
	}

	void TimelineMarkers::remove(TimelineMarker marker) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", marker.get_pyobjref())
	}

	Sculpt ToolSettings::sculpt() {
		CLASS_TYPES_GETTER(Sculpt, "sculpt")
	}

	VertexPaint ToolSettings::vertex_paint() {
		CLASS_TYPES_GETTER(VertexPaint, "vertex_paint")
	}

	VertexPaint ToolSettings::weight_paint() {
		CLASS_TYPES_GETTER(VertexPaint, "weight_paint")
	}

	ImagePaint ToolSettings::image_paint() {
		CLASS_TYPES_GETTER(ImagePaint, "image_paint")
	}

	UvSculpt ToolSettings::uv_sculpt() {
		CLASS_TYPES_GETTER(UvSculpt, "uv_sculpt")
	}

	ParticleEdit ToolSettings::particle_edit() {
		CLASS_TYPES_GETTER(ParticleEdit, "particle_edit")
	}

	UnifiedPaintSettings ToolSettings::unified_paint_settings() {
		CLASS_TYPES_GETTER(UnifiedPaintSettings, "unified_paint_settings")
	}

	MeshStatVis ToolSettings::statvis() {
		CLASS_TYPES_GETTER(MeshStatVis, "statvis")
	}

	Text SceneGameData::dome_text() {
		CLASS_TYPES_GETTER(Text, "dome_text")
	}

	SceneGameRecastData SceneGameData::recast_data() {
		CLASS_TYPES_GETTER(SceneGameRecastData, "recast_data")
	}

	std::map<std::string, SceneRenderLayer> RenderSettings::layers() {
		MAP_TYPE_GETTER("layers", SceneRenderLayer)
	}

	std::map<std::string, SceneRenderView> RenderSettings::views() {
		MAP_TYPE_GETTER("views", SceneRenderView)
	}

	std::map<std::string, SceneRenderView> RenderSettings::stereo_views() {
		MAP_TYPE_GETTER("stereo_views", SceneRenderView)
	}

	BakeSettings RenderSettings::bake() {
		CLASS_TYPES_GETTER(BakeSettings, "bake")
	}

	SceneRenderLayer RenderLayers::active() {
		CLASS_TYPES_GETTER(SceneRenderLayer, "active")
	}

	SceneRenderLayer RenderLayers::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(SceneRenderLayer)
	}

	void RenderLayers::remove(SceneRenderLayer layer) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", layer.get_pyobjref())
	}

	SceneRenderView RenderViews::active() {
		CLASS_TYPES_GETTER(SceneRenderView, "active")
	}

	SceneRenderView RenderViews::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(SceneRenderView)
	}

	void RenderViews::remove(SceneRenderView view) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", view.get_pyobjref())
	}

	FreestyleSettings SceneRenderLayer::freestyle_settings() {
		CLASS_TYPES_GETTER(FreestyleSettings, "freestyle_settings")
	}

	Text FreestyleModuleSettings::script() {
		CLASS_TYPES_GETTER(Text, "script")
	}

	FreestyleModuleSettings FreestyleModules::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(FreestyleModuleSettings)
	}

	void FreestyleModules::remove(FreestyleModuleSettings module) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", module.get_pyobjref())
	}

	FreestyleLineSet Linesets::active() {
		CLASS_TYPES_GETTER(FreestyleLineSet, "active")
	}

	FreestyleLineSet Linesets::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(FreestyleLineSet)
	}

	void Linesets::remove(FreestyleLineSet lineset) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", lineset.get_pyobjref())
	}

	std::map<std::string, Area> Screen::areas() {
		MAP_TYPE_GETTER("areas", Area)
	}

	std::map<std::string, Space> Area::spaces() {
		MAP_TYPE_GETTER("spaces", Space)
	}

	std::map<std::string, Region> Area::regions() {
		MAP_TYPE_GETTER("regions", Region)
	}

	Space AreaSpaces::active() {
		CLASS_TYPES_GETTER(Space, "active")
	}

	View2D Region::view2d() {
		CLASS_TYPES_GETTER(View2D, "view2d")
	}

	ParticleBrush ParticleEdit::brush() {
		CLASS_TYPES_GETTER(ParticleBrush, "brush")
	}

	std::map<std::string, SequenceModifier> Sequence::modifiers() {
		MAP_TYPE_GETTER("modifiers", SequenceModifier)
	}

	SequenceModifier SequenceModifiers::create(const std::string name, sequence_modifier_type_items_enum type) {
		PYTHON_FUNCTION_ARGS_CALL("new", "ss", name, sequence_modifier_type_items_to_string.at(type))
		CLASS_TYPES_RETURN(SequenceModifier)
	}

	void SequenceModifiers::remove(SequenceModifier modifier) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", modifier.get_pyobjref())
	}

	Sequence Sequences::new_clip(const std::string name, MovieClip clip, int channel, int frame_start) {
		PYTHON_FUNCTION_ARGS_CALL("new_clip", "sOii", name, clip.get_pyobjref(), channel, frame_start)
		CLASS_TYPES_RETURN(Sequence)
	}

	Sequence Sequences::new_mask(const std::string name, Mask mask, int channel, int frame_start) {
		PYTHON_FUNCTION_ARGS_CALL("new_mask", "sOii", name, mask.get_pyobjref(), channel, frame_start)
		CLASS_TYPES_RETURN(Sequence)
	}

	Sequence Sequences::new_scene(const std::string name, Scene scene, int channel, int frame_start) {
		PYTHON_FUNCTION_ARGS_CALL("new_scene", "sOii", name, scene.get_pyobjref(), channel, frame_start)
		CLASS_TYPES_RETURN(Sequence)
	}

	Sequence Sequences::new_image(const std::string name, const std::string filepath, int channel, int frame_start) {
		PYTHON_FUNCTION_ARGS_CALL("new_image", "ssii", name, filepath, channel, frame_start)
		CLASS_TYPES_RETURN(Sequence)
	}

	Sequence Sequences::new_movie(const std::string name, const std::string filepath, int channel, int frame_start) {
		PYTHON_FUNCTION_ARGS_CALL("new_movie", "ssii", name, filepath, channel, frame_start)
		CLASS_TYPES_RETURN(Sequence)
	}

	Sequence Sequences::new_sound(const std::string name, const std::string filepath, int channel, int frame_start) {
		PYTHON_FUNCTION_ARGS_CALL("new_sound", "ssii", name, filepath, channel, frame_start)
		CLASS_TYPES_RETURN(Sequence)
	}

	Sequence Sequences::new_effect(const std::string name, seq_effect_items_enum type, int channel, int frame_start, int frame_end, Sequence seq1, Sequence seq2, Sequence seq3) {
		PYTHON_FUNCTION_ARGS_CALL("new_effect", "ssiiiOOO", name, seq_effect_items_to_string.at(type), channel, frame_start, frame_end, seq1.get_pyobjref(), seq2.get_pyobjref(), seq3.get_pyobjref())
		CLASS_TYPES_RETURN(Sequence)
	}

	void Sequences::remove(Sequence sequence) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", sequence.get_pyobjref())
	}

	SequenceElement SequenceElements::append(const std::string filename) {
		PYTHON_FUNCTION_ARGS_CALL("append", "s", filename)
		CLASS_TYPES_RETURN(SequenceElement)
	}

	Mask MaskSequence::mask() {
		CLASS_TYPES_GETTER(Mask, "mask")
	}

	Sound SoundSequence::sound() {
		CLASS_TYPES_GETTER(Sound, "sound")
	}

	Mask SequenceModifier::input_mask_id() {
		CLASS_TYPES_GETTER(Mask, "input_mask_id")
	}

	SpaceUVEditor SpaceImageEditor::uv_editor() {
		CLASS_TYPES_GETTER(SpaceUVEditor, "uv_editor")
	}

	Mask SpaceImageEditor::mask() {
		CLASS_TYPES_GETTER(Mask, "mask")
	}

	Text SpaceTextEditor::text() {
		CLASS_TYPES_GETTER(Text, "text")
	}

	Operator SpaceFileBrowser::active_operator() {
		CLASS_TYPES_GETTER(Operator, "active_operator")
	}

	Operator SpaceFileBrowser::operator_value() {
		CLASS_TYPES_GETTER(Operator, "operator")
	}

	MovieClip BackgroundImage::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	MovieClipUser BackgroundImage::clip_user() {
		CLASS_TYPES_GETTER(MovieClipUser, "clip_user")
	}

	RegionView3D SpaceView3D::region_3d() {
		CLASS_TYPES_GETTER(RegionView3D, "region_3d")
	}

	std::map<std::string, RegionView3D> SpaceView3D::region_quadviews() {
		MAP_TYPE_GETTER("region_quadviews", RegionView3D)
	}

	BackgroundImage BackgroundImages::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(BackgroundImage)
	}

	void BackgroundImages::remove(BackgroundImage image) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", image.get_pyobjref())
	}

	std::map<std::string, ConsoleLine> SpaceConsole::history() {
		MAP_TYPE_GETTER("history", ConsoleLine)
	}

	std::map<std::string, ConsoleLine> SpaceConsole::scrollback() {
		MAP_TYPE_GETTER("scrollback", ConsoleLine)
	}

	void SpaceNodeEditorPath::start(NodeTree node_tree) {
		PYTHON_FUNCTION_ARGS_CALL("start", "O", node_tree.get_pyobjref())
	}

	void SpaceNodeEditorPath::append(NodeTree node_tree, Node node) {
		PYTHON_FUNCTION_ARGS_CALL("append", "OO", node_tree.get_pyobjref(), node.get_pyobjref())
	}

	MovieClip SpaceClipEditor::clip() {
		CLASS_TYPES_GETTER(MovieClip, "clip")
	}

	MovieClipUser SpaceClipEditor::clip_user() {
		CLASS_TYPES_GETTER(MovieClipUser, "clip_user")
	}

	Mask SpaceClipEditor::mask() {
		CLASS_TYPES_GETTER(Mask, "mask")
	}

	MovieClipScopes SpaceClipEditor::scopes() {
		CLASS_TYPES_GETTER(MovieClipScopes, "scopes")
	}

	Sound Speaker::sound() {
		CLASS_TYPES_GETTER(Sound, "sound")
	}

	OperatorProperties UILayout::operator_value(const std::string operator_value, const std::string text, const std::string text_ctxt, bool translate, icon_items_enum icon, bool emboss, int icon_value) {
		PYTHON_FUNCTION_ARGS_CALL("operator", "sssisii", operator_value, text, text_ctxt, translate, icon_items_to_string.at(icon), emboss, icon_value)
		CLASS_TYPES_RETURN(OperatorProperties)
	}

	void UILayout::template_marker(AnyType data, const std::string property, MovieClipUser clip_user, MovieTrackingTrack track, bool compact) {
		PYTHON_FUNCTION_ARGS_CALL("template_marker", "OsOOi", data.get_pyobjref(), property, clip_user.get_pyobjref(), track.get_pyobjref(), compact)
	}

	void UILayout::template_movieclip_information(AnyType data, const std::string property, MovieClipUser clip_user) {
		PYTHON_FUNCTION_ARGS_CALL("template_movieclip_information", "OsO", data.get_pyobjref(), property, clip_user.get_pyobjref())
	}

	void UILayout::template_keymap_item_properties(KeyMapItem item) {
		PYTHON_FUNCTION_ARGS_CALL("template_keymap_item_properties", "O", item.get_pyobjref())
	}

	std::map<std::string, Addon> UserPreferences::addons() {
		MAP_TYPE_GETTER("addons", Addon)
	}

	std::map<std::string, PathCompare> UserPreferences::autoexec_paths() {
		MAP_TYPE_GETTER("autoexec_paths", PathCompare)
	}

	UserPreferencesView UserPreferences::view() {
		CLASS_TYPES_GETTER(UserPreferencesView, "view")
	}

	UserPreferencesEdit UserPreferences::edit() {
		CLASS_TYPES_GETTER(UserPreferencesEdit, "edit")
	}

	UserPreferencesInput UserPreferences::inputs() {
		CLASS_TYPES_GETTER(UserPreferencesInput, "inputs")
	}

	UserPreferencesFilePaths UserPreferences::filepaths() {
		CLASS_TYPES_GETTER(UserPreferencesFilePaths, "filepaths")
	}

	UserPreferencesSystem UserPreferences::system() {
		CLASS_TYPES_GETTER(UserPreferencesSystem, "system")
	}

	Addon Addons::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(Addon)
	}

	void Addons::remove(Addon addon) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", addon.get_pyobjref())
	}

	PathCompare PathCompareCollection::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(PathCompare)
	}

	void PathCompareCollection::remove(PathCompare pathcmp) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", pathcmp.get_pyobjref())
	}

	AddonPreferences Addon::preferences() {
		CLASS_TYPES_GETTER(AddonPreferences, "preferences")
	}

	OperatorProperties Operator::properties() {
		CLASS_TYPES_GETTER(OperatorProperties, "properties")
	}

	OperatorOptions Operator::options() {
		CLASS_TYPES_GETTER(OperatorOptions, "options")
	}

	std::map<std::string, Macro> Operator::macros() {
		MAP_TYPE_GETTER("macros", Macro)
	}

	Stereo3dDisplay Window::stereo_3d_display() {
		CLASS_TYPES_GETTER(Stereo3dDisplay, "stereo_3d_display")
	}

	std::map<std::string, KeyConfig> WindowManager::keyconfigs() {
		MAP_TYPE_GETTER("keyconfigs", KeyConfig)
	}

	KeyConfig KeyConfigurations::active() {
		CLASS_TYPES_GETTER(KeyConfig, "active")
	}

	KeyConfig KeyConfigurations::default_value() {
		CLASS_TYPES_GETTER(KeyConfig, "default")
	}

	KeyConfig KeyConfigurations::addon() {
		CLASS_TYPES_GETTER(KeyConfig, "addon")
	}

	KeyConfig KeyConfigurations::user() {
		CLASS_TYPES_GETTER(KeyConfig, "user")
	}

	KeyConfig KeyConfigurations::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(KeyConfig)
	}

	void KeyConfigurations::remove(KeyConfig keyconfig) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", keyconfig.get_pyobjref())
	}

	std::map<std::string, KeyMap> KeyConfig::keymaps() {
		MAP_TYPE_GETTER("keymaps", KeyMap)
	}

	KeyMap KeyMaps::create(const std::string name, space_type_items_enum space_type, region_type_items_enum region_type, bool modal) {
		PYTHON_FUNCTION_ARGS_CALL("new", "sssi", name, space_type_items_to_string.at(space_type), region_type_items_to_string.at(region_type), modal)
		CLASS_TYPES_RETURN(KeyMap)
	}

	void KeyMaps::remove(KeyMap keymap) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", keymap.get_pyobjref())
	}

	KeyMap KeyMaps::find(const std::string name, space_type_items_enum space_type, region_type_items_enum region_type) {
		PYTHON_FUNCTION_ARGS_CALL("find", "sss", name, space_type_items_to_string.at(space_type), region_type_items_to_string.at(region_type))
		CLASS_TYPES_RETURN(KeyMap)
	}

	KeyMap KeyMaps::find_modal(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("find_modal", "s", name)
		CLASS_TYPES_RETURN(KeyMap)
	}

	std::map<std::string, KeyMapItem> KeyMap::keymap_items() {
		MAP_TYPE_GETTER("keymap_items", KeyMapItem)
	}

	void KeyMap::restore_item_to_default(KeyMapItem item) {
		PYTHON_FUNCTION_ARGS_CALL("restore_item_to_default", "O", item.get_pyobjref())
	}

	KeyMapItem KeyMapItems::create(const std::string idname, event_type_items_enum type, event_value_items_enum value, bool any, bool shift, bool ctrl, bool alt, bool oskey, event_type_items_enum key_modifier, bool head) {
		PYTHON_FUNCTION_ARGS_CALL("new", "sssiiiiisi", idname, event_type_items_to_string.at(type), event_value_items_to_string.at(value), any, shift, ctrl, alt, oskey, event_type_items_to_string.at(key_modifier), head)
		CLASS_TYPES_RETURN(KeyMapItem)
	}

	KeyMapItem KeyMapItems::new_modal(const std::string propvalue, event_type_items_enum type, event_value_items_enum value, bool any, bool shift, bool ctrl, bool alt, bool oskey, event_type_items_enum key_modifier) {
		PYTHON_FUNCTION_ARGS_CALL("new_modal", "sssiiiiis", propvalue, event_type_items_to_string.at(type), event_value_items_to_string.at(value), any, shift, ctrl, alt, oskey, event_type_items_to_string.at(key_modifier))
		CLASS_TYPES_RETURN(KeyMapItem)
	}

	void KeyMapItems::remove(KeyMapItem item) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", item.get_pyobjref())
	}

	KeyMapItem KeyMapItems::from_id(int id) {
		PYTHON_FUNCTION_ARGS_CALL("from_id", "i", id)
		CLASS_TYPES_RETURN(KeyMapItem)
	}

	std::map<std::string, WorldTextureSlot> World::texture_slots() {
		MAP_TYPE_GETTER("texture_slots", WorldTextureSlot)
	}

	WorldLighting World::light_settings() {
		CLASS_TYPES_GETTER(WorldLighting, "light_settings")
	}

	WorldMistSettings World::mist_settings() {
		CLASS_TYPES_GETTER(WorldMistSettings, "mist_settings")
	}

	WorldTextureSlot WorldTextureSlots::add() {
		PYTHON_FUNCTION_CALL("add")
		CLASS_TYPES_RETURN(WorldTextureSlot)
	}

	WorldTextureSlot WorldTextureSlots::create(int index) {
		PYTHON_FUNCTION_ARGS_CALL("create", "i", index)
		CLASS_TYPES_RETURN(WorldTextureSlot)
	}

	MovieTracking MovieClip::tracking() {
		CLASS_TYPES_GETTER(MovieTracking, "tracking")
	}

	MovieClipProxy MovieClip::proxy() {
		CLASS_TYPES_GETTER(MovieClipProxy, "proxy")
	}

	MovieTrackingMarker MovieTrackingMarkers::find_frame(int frame, bool exact) {
		PYTHON_FUNCTION_ARGS_CALL("find_frame", "ii", frame, exact)
		CLASS_TYPES_RETURN(MovieTrackingMarker)
	}

	MovieTrackingMarker MovieTrackingMarkers::insert_frame(int frame, VFLOAT2 co) {
		ARRAY_TO_PYOBJ(co, "O", 2)
		PYTHON_FUNCTION_ARGS_CALL("insert_frame", "iO", frame, co_tupleval)
		DECREF_ARRAY_ITEMS(co, 2)
		CLASS_TYPES_RETURN(MovieTrackingMarker)
	}

	MovieTrackingPlaneMarker MovieTrackingPlaneMarkers::find_frame(int frame, bool exact) {
		PYTHON_FUNCTION_ARGS_CALL("find_frame", "ii", frame, exact)
		CLASS_TYPES_RETURN(MovieTrackingPlaneMarker)
	}

	MovieTrackingPlaneMarker MovieTrackingPlaneMarkers::insert_frame(int frame) {
		PYTHON_FUNCTION_ARGS_CALL("insert_frame", "i", frame)
		CLASS_TYPES_RETURN(MovieTrackingPlaneMarker)
	}

	MovieTrackingTrack MovieTrackingTracks::active() {
		CLASS_TYPES_GETTER(MovieTrackingTrack, "active")
	}

	MovieTrackingTrack MovieTrackingTracks::create(const std::string name, int frame) {
		PYTHON_FUNCTION_ARGS_CALL("new", "si", name, frame)
		CLASS_TYPES_RETURN(MovieTrackingTrack)
	}

	MovieTrackingPlaneTrack MovieTrackingPlaneTracks::active() {
		CLASS_TYPES_GETTER(MovieTrackingPlaneTrack, "active")
	}

	MovieTrackingTrack MovieTrackingObjectTracks::active() {
		CLASS_TYPES_GETTER(MovieTrackingTrack, "active")
	}

	MovieTrackingTrack MovieTrackingObjectTracks::create(const std::string name, int frame) {
		PYTHON_FUNCTION_ARGS_CALL("new", "si", name, frame)
		CLASS_TYPES_RETURN(MovieTrackingTrack)
	}

	MovieTrackingTrack MovieTrackingObjectPlaneTracks::active() {
		CLASS_TYPES_GETTER(MovieTrackingTrack, "active")
	}

	MovieReconstructedCamera MovieTrackingReconstructedCameras::find_frame(int frame) {
		PYTHON_FUNCTION_ARGS_CALL("find_frame", "i", frame)
		CLASS_TYPES_RETURN(MovieReconstructedCamera)
	}

	MovieTrackingObject MovieTrackingObjects::active() {
		CLASS_TYPES_GETTER(MovieTrackingObject, "active")
	}

	MovieTrackingObject MovieTrackingObjects::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MovieTrackingObject)
	}

	void MovieTrackingObjects::remove(MovieTrackingObject object_value) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", object_value.get_pyobjref())
	}

	MaskSpline MaskSplines::active() {
		CLASS_TYPES_GETTER(MaskSpline, "active")
	}

	MaskSplinePoint MaskSplines::active_point() {
		CLASS_TYPES_GETTER(MaskSplinePoint, "active_point")
	}

	MaskSpline MaskSplines::create() {
		PYTHON_FUNCTION_CALL("new")
		CLASS_TYPES_RETURN(MaskSpline)
	}

	void MaskSplines::remove(MaskSpline spline) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", spline.get_pyobjref())
	}

	void MaskSplinePoints::remove(MaskSplinePoint point) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", point.get_pyobjref())
	}

	MaskLayer MaskLayers::active() {
		CLASS_TYPES_GETTER(MaskLayer, "active")
	}

	MaskLayer MaskLayers::create(const std::string name) {
		PYTHON_FUNCTION_ARGS_CALL("new", "s", name)
		CLASS_TYPES_RETURN(MaskLayer)
	}

	void MaskLayers::remove(MaskLayer layer) {
		PYTHON_FUNCTION_ARGS_CALL("remove", "O", layer.get_pyobjref())
	}

}

#endif /* __UNIPLUG_BLENDER_CPP_H__ */

